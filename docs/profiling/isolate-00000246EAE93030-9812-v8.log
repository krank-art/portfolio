v8-version,9,4,146,26,-node.24,0
v8-platform,windows,unknown
shared-library,C:\\Program Files\\nodejs\\node.exe,0x7ff6d5aa0000,0x7ff6d991a000,0
shared-library,C:\\Windows\\SYSTEM32\\ntdll.dll,0x7ff8131b0000,0x7ff8133a8000,0
shared-library,C:\\Windows\\System32\\KERNEL32.DLL,0x7ff812730000,0x7ff8127f1000,0
shared-library,C:\\Windows\\System32\\KERNELBASE.dll,0x7ff810ee0000,0x7ff8111dd000,0
shared-library,C:\\Windows\\System32\\WS2_32.dll,0x7ff813100000,0x7ff81316b000,0
shared-library,C:\\Windows\\System32\\RPCRT4.dll,0x7ff811b80000,0x7ff811ca3000,0
shared-library,C:\\Windows\\System32\\PSAPI.DLL,0x7ff811400000,0x7ff811408000,0
shared-library,C:\\Windows\\System32\\ADVAPI32.dll,0x7ff812800000,0x7ff8128b0000,0
shared-library,C:\\Windows\\SYSTEM32\\dbghelp.dll,0x7ff80ee30000,0x7ff80f014000,0
shared-library,C:\\Windows\\System32\\msvcrt.dll,0x7ff812e10000,0x7ff812eae000,0
shared-library,C:\\Windows\\System32\\ucrtbase.dll,0x7ff810890000,0x7ff810990000,0
shared-library,C:\\Windows\\System32\\sechost.dll,0x7ff8128b0000,0x7ff812950000,0
shared-library,C:\\Windows\\System32\\bcrypt.dll,0x7ff810a40000,0x7ff810a67000,0
shared-library,C:\\Windows\\System32\\USER32.dll,0x7ff812f60000,0x7ff8130fd000,0
shared-library,C:\\Windows\\SYSTEM32\\IPHLPAPI.DLL,0x7ff80fc10000,0x7ff80fc4b000,0
shared-library,C:\\Windows\\System32\\win32u.dll,0x7ff810860000,0x7ff810882000,0
shared-library,C:\\Windows\\System32\\GDI32.dll,0x7ff812bd0000,0x7ff812bfb000,0
shared-library,C:\\Windows\\SYSTEM32\\USERENV.dll,0x7ff810700000,0x7ff81072e000,0
shared-library,C:\\Windows\\System32\\gdi32full.dll,0x7ff810c90000,0x7ff810da7000,0
shared-library,C:\\Windows\\System32\\msvcp_win.dll,0x7ff810e40000,0x7ff810edd000,0
shared-library,C:\\Windows\\System32\\CRYPT32.dll,0x7ff810ae0000,0x7ff810c3e000,0
shared-library,C:\\Windows\\SYSTEM32\\WINMM.dll,0x7ff800090000,0x7ff8000b7000,0
shared-library,C:\\Windows\\SYSTEM32\\CRYPTBASE.DLL,0x7ff8100a0000,0x7ff8100ac000,0
shared-library,C:\\Windows\\System32\\IMM32.DLL,0x7ff812ba0000,0x7ff812bcf000,0
shared-library,C:\\Windows\\SYSTEM32\\powrprof.dll,0x7ff810180000,0x7ff8101cb000,0
shared-library,C:\\Windows\\SYSTEM32\\UMPDC.dll,0x7ff810160000,0x7ff810172000,0
shared-library,C:\\Windows\\system32\\uxtheme.dll,0x7ff80dcf0000,0x7ff80dd8e000,0
shared-library,C:\\Windows\\System32\\combase.dll,0x7ff811cb0000,0x7ff812003000,0
shared-library,C:\\Windows\\system32\\mswsock.dll,0x7ff80ff10000,0x7ff80ff7a000,0
shared-library,C:\\Windows\\System32\\bcryptprimitives.dll,0x7ff810db0000,0x7ff810e32000,0
shared-library,C:\\Windows\\SYSTEM32\\kernel.appcore.dll,0x7ff80f050000,0x7ff80f062000,0
shared-library-end
profiler,begin,1000
tick,0x7ff81324d664,271811,0,0x0,6
new,CodeRange,0x246eee70000,0
new,MemoryChunk,0x13ef0400000,262144
new,MemoryChunk,0x13f49b00000,262144
new,MemoryChunk,0x2d869480000,262144
new,MemoryChunk,0x1dc15280000,262144
new,MemoryChunk,0x15971800000,262144
heap-capacity,1031072
heap-available,4346136384
new,MemoryChunk,0x39b87c0000,262144
new,MemoryChunk,0x27f35740000,262144
new,MemoryChunk,0x2392d40000,262144
new,MemoryChunk,0xb0b6e80000,262144
new,MemoryChunk,0x32ebb7c0000,262144
new,MemoryChunk,0x1b785780000,262144
new,MemoryChunk,0x6414e80000,262144
new,MemoryChunk,0x246eee80000,262144
new,MemoryChunk,0x3d43af00000,262144
new,MemoryChunk,0xb70e380000,262144
code-creation,Builtin,2,278232,0x7ff6d6608e74,1356,RecordWriteEmitRememberedSetSaveFP
code-creation,Builtin,2,278674,0x7ff6d66093d4,448,RecordWriteOmitRememberedSetSaveFP
code-creation,Builtin,2,278695,0x7ff6d66095b4,636,RecordWriteEmitRememberedSetIgnoreFP
code-creation,Builtin,2,278711,0x7ff6d6609834,204,RecordWriteOmitRememberedSetIgnoreFP
code-creation,Builtin,2,278726,0x7ff6d6609914,364,EphemeronKeyBarrierSaveFP
code-creation,Builtin,2,278747,0x7ff6d6609a94,128,EphemeronKeyBarrierIgnoreFP
code-creation,Builtin,2,278762,0x7ff6d6609b34,60,AdaptorWithBuiltinExitFrame
code-creation,Builtin,2,278777,0x7ff6d6609b74,360,CallFunction_ReceiverIsNullOrUndefined
code-creation,Builtin,2,278792,0x7ff6d6609cf4,416,CallFunction_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,278807,0x7ff6d6609eb4,444,CallFunction_ReceiverIsAny
code-creation,Builtin,2,278895,0x7ff6d660a074,104,CallBoundFunction
code-creation,Builtin,2,278915,0x7ff6d660a0f4,120,Call_ReceiverIsNullOrUndefined
code-creation,Builtin,2,278931,0x7ff6d660a174,120,Call_ReceiverIsNotNullOrUndefined
code-creation,Builtin,2,278946,0x7ff6d660a1f4,120,Call_ReceiverIsAny
code-creation,Builtin,2,278960,0x7ff6d660a274,992,Call_ReceiverIsNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,278976,0x7ff6d660a674,992,Call_ReceiverIsNullOrUndefined_Baseline
code-creation,Builtin,2,278991,0x7ff6d660aa74,1080,Call_ReceiverIsNotNullOrUndefined_Baseline_Compact
code-creation,Builtin,2,279007,0x7ff6d660aeb4,1076,Call_ReceiverIsNotNullOrUndefined_Baseline
code-creation,Builtin,2,279022,0x7ff6d660b2f4,1080,Call_ReceiverIsAny_Baseline_Compact
code-creation,Builtin,2,279037,0x7ff6d660b734,1076,Call_ReceiverIsAny_Baseline
code-creation,Builtin,2,279051,0x7ff6d660bb74,948,Call_ReceiverIsNullOrUndefined_WithFeedback
code-creation,Builtin,2,279067,0x7ff6d660bf34,948,Call_ReceiverIsNotNullOrUndefined_WithFeedback
code-creation,Builtin,2,279082,0x7ff6d660c2f4,948,Call_ReceiverIsAny_WithFeedback
code-creation,Builtin,2,279097,0x7ff6d660c6b4,736,CallProxy
code-creation,Builtin,2,279111,0x7ff6d660c9b4,148,CallVarargs
code-creation,Builtin,2,279130,0x7ff6d660ca54,944,CallWithSpread
code-creation,Builtin,2,279145,0x7ff6d660ce14,1956,CallWithSpread_Baseline
code-creation,Builtin,2,279159,0x7ff6d660d5d4,1928,CallWithSpread_WithFeedback
code-creation,Builtin,2,279174,0x7ff6d660dd74,864,CallWithArrayLike
code-creation,Builtin,2,279188,0x7ff6d660e0f4,1820,CallWithArrayLike_WithFeedback
code-creation,Builtin,2,279203,0x7ff6d660e814,156,CallForwardVarargs
code-creation,Builtin,2,279217,0x7ff6d660e8b4,156,CallFunctionForwardVarargs
code-creation,Builtin,2,279232,0x7ff6d660e954,132,CallFunctionTemplate_CheckAccess
code-creation,Builtin,2,279247,0x7ff6d660e9f4,228,CallFunctionTemplate_CheckCompatibleReceiver
code-creation,Builtin,2,279262,0x7ff6d660eaf4,316,CallFunctionTemplate_CheckAccessAndCompatibleReceiver
code-creation,Builtin,2,279278,0x7ff6d660ec34,28,ConstructFunction
code-creation,Builtin,2,279292,0x7ff6d660ec54,104,ConstructBoundFunction
code-creation,Builtin,2,279307,0x7ff6d660ecd4,28,ConstructedNonConstructable
code-creation,Builtin,2,279321,0x7ff6d660ecf4,100,Construct
code-creation,Builtin,2,279335,0x7ff6d660ed74,148,ConstructVarargs
code-creation,Builtin,2,279349,0x7ff6d660ee14,968,ConstructWithSpread
code-creation,Builtin,2,279364,0x7ff6d660f1f4,1748,ConstructWithSpread_Baseline
code-creation,Builtin,2,279379,0x7ff6d660f8d4,1764,ConstructWithSpread_WithFeedback
code-creation,Builtin,2,279393,0x7ff6d660ffd4,924,ConstructWithArrayLike
code-creation,Builtin,2,279408,0x7ff6d6610374,1652,ConstructWithArrayLike_WithFeedback
code-creation,Builtin,2,279423,0x7ff6d66109f4,196,ConstructForwardVarargs
code-creation,Builtin,2,279437,0x7ff6d6610ad4,196,ConstructFunctionForwardVarargs
code-creation,Builtin,2,279452,0x7ff6d6610bb4,804,Construct_Baseline
code-creation,Builtin,2,279466,0x7ff6d6610ef4,820,Construct_WithFeedback
code-creation,Builtin,2,279481,0x7ff6d6611234,476,JSConstructStubGeneric
code-creation,Builtin,2,279495,0x7ff6d6611414,376,JSBuiltinsConstructStub
code-creation,Builtin,2,279509,0x7ff6d6611594,676,FastNewObject
code-creation,Builtin,2,279523,0x7ff6d6611854,292,FastNewClosure
code-creation,Builtin,2,279538,0x7ff6d6611994,720,ConstructProxy
code-creation,Builtin,2,279552,0x7ff6d6611c74,360,JSEntry
code-creation,Builtin,2,279566,0x7ff6d6611df4,360,JSConstructEntry
code-creation,Builtin,2,279580,0x7ff6d6611f74,360,JSRunMicrotasksEntry
code-creation,Builtin,2,279594,0x7ff6d66120f4,96,JSEntryTrampoline
code-creation,Builtin,2,279609,0x7ff6d6612174,96,JSConstructEntryTrampoline
code-creation,Builtin,2,279623,0x7ff6d66121f4,280,ResumeGeneratorTrampoline
code-creation,Builtin,2,279638,0x7ff6d6612314,1116,StringCodePointAt
code-creation,Builtin,2,279652,0x7ff6d6612774,1552,StringFromCodePointAt
code-creation,Builtin,2,279666,0x7ff6d6612d94,544,StringEqual
code-creation,Builtin,2,280033,0x7ff6d6612fd4,276,StringGreaterThan
code-creation,Builtin,2,280101,0x7ff6d66130f4,276,StringGreaterThanOrEqual
code-creation,Builtin,2,280128,0x7ff6d6613214,276,StringLessThan
code-creation,Builtin,2,280143,0x7ff6d6613334,276,StringLessThanOrEqual
code-creation,Builtin,2,280158,0x7ff6d6613454,2492,StringSubstring
code-creation,Builtin,2,280172,0x7ff6d6613e14,80,OrderedHashTableHealIndex
code-creation,Builtin,2,280187,0x7ff6d6613e74,1168,InterpreterEntryTrampoline
code-creation,Builtin,2,280202,0x7ff6d6614314,76,InterpreterPushArgsThenCall
code-creation,Builtin,2,280217,0x7ff6d6614374,84,InterpreterPushUndefinedAndArgsThenCall
code-creation,Builtin,2,280232,0x7ff6d66143d4,84,InterpreterPushArgsThenCallWithFinalSpread
code-creation,Builtin,2,280247,0x7ff6d6614434,80,InterpreterPushArgsThenConstruct
code-creation,Builtin,2,280262,0x7ff6d6614494,80,InterpreterPushArgsThenConstructArrayFunction
code-creation,Builtin,2,280277,0x7ff6d66144f4,84,InterpreterPushArgsThenConstructWithFinalSpread
code-creation,Builtin,2,280292,0x7ff6d6614554,84,InterpreterEnterAtBytecode
code-creation,Builtin,2,280307,0x7ff6d66145b4,220,InterpreterEnterAtNextBytecode
code-creation,Builtin,2,280709,0x7ff6d6614694,52,InterpreterOnStackReplacement
code-creation,Builtin,2,280731,0x7ff6d66146d4,592,BaselineOutOfLinePrologue
code-creation,Builtin,2,280747,0x7ff6d6614934,56,BaselineOnStackReplacement
code-creation,Builtin,2,280762,0x7ff6d6614974,84,BaselineLeaveFrame
code-creation,Builtin,2,280776,0x7ff6d66149d4,216,BaselineOrInterpreterEnterAtBytecode
code-creation,Builtin,2,280791,0x7ff6d6614ab4,224,BaselineOrInterpreterEnterAtNextBytecode
code-creation,Builtin,2,280806,0x7ff6d6614bb4,192,InterpreterOnStackReplacement_ToBaseline
code-creation,Builtin,2,280821,0x7ff6d6614c94,1004,CompileLazy
code-creation,Builtin,2,280842,0x7ff6d6615094,68,CompileLazyDeoptimizedCode
code-creation,Builtin,2,280857,0x7ff6d66150f4,252,InstantiateAsmJs
code-creation,Builtin,2,280871,0x7ff6d66151f4,32,NotifyDeoptimized
code-creation,Builtin,2,280885,0x7ff6d6615234,796,DeoptimizationEntry_Eager
code-creation,Builtin,2,280899,0x7ff6d6615554,796,DeoptimizationEntry_Soft
code-creation,Builtin,2,280914,0x7ff6d6615874,796,DeoptimizationEntry_Bailout
code-creation,Builtin,2,280928,0x7ff6d6615b94,796,DeoptimizationEntry_Lazy
code-creation,Builtin,2,280943,0x7ff6d6615eb4,52,ContinueToCodeStubBuiltin
code-creation,Builtin,2,280957,0x7ff6d6615ef4,60,ContinueToCodeStubBuiltinWithResult
code-creation,Builtin,2,280972,0x7ff6d6615f34,56,ContinueToJavaScriptBuiltin
code-creation,Builtin,2,280987,0x7ff6d6615f74,64,ContinueToJavaScriptBuiltinWithResult
code-creation,Builtin,2,281002,0x7ff6d6615fd4,288,CallApiCallback
code-creation,Builtin,2,281016,0x7ff6d6616114,268,CallApiGetter
code-creation,Builtin,2,281030,0x7ff6d6616234,12,HandleApiCall
code-creation,Builtin,2,281044,0x7ff6d6616254,12,HandleApiCallAsFunction
code-creation,Builtin,2,281058,0x7ff6d6616274,12,HandleApiCallAsConstructor
code-creation,Builtin,2,281073,0x7ff6d6616294,64,AllocateInYoungGeneration
code-creation,Builtin,2,281087,0x7ff6d66162f4,52,AllocateRegularInYoungGeneration
code-creation,Builtin,2,281102,0x7ff6d6616334,64,AllocateInOldGeneration
code-creation,Builtin,2,281116,0x7ff6d6616394,52,AllocateRegularInOldGeneration
code-creation,Builtin,2,281136,0x7ff6d66163d4,420,CopyFastSmiOrObjectElements
code-creation,Builtin,2,281151,0x7ff6d6616594,496,GrowFastDoubleElements
code-creation,Builtin,2,281166,0x7ff6d6616794,400,GrowFastSmiOrObjectElements
code-creation,Builtin,2,281180,0x7ff6d6616934,388,DebugBreakTrampoline
code-creation,Builtin,2,281194,0x7ff6d6616ad4,180,ToNumber
code-creation,Builtin,2,281208,0x7ff6d6616b94,292,ToNumber_Baseline
code-creation,Builtin,2,281222,0x7ff6d6616cd4,360,ToNumeric_Baseline
code-creation,Builtin,2,281237,0x7ff6d6616e54,104,PlainPrimitiveToNumber
code-creation,Builtin,2,281251,0x7ff6d6616ed4,212,ToNumberConvertBigInt
code-creation,Builtin,2,281265,0x7ff6d6616fb4,132,Typeof
code-creation,Builtin,2,281283,0x7ff6d6617054,104,BigIntToI64
code-creation,Builtin,2,281297,0x7ff6d66170d4,4,BigIntToI32Pair
code-creation,Builtin,2,281315,0x7ff6d66170f4,232,I64ToBigInt
code-creation,Builtin,2,281332,0x7ff6d66171f4,4,I32PairToBigInt
code-creation,Builtin,2,281346,0x7ff6d6617214,100,ToBooleanLazyDeoptContinuation
code-creation,Builtin,2,281361,0x7ff6d6617294,4232,KeyedLoadIC_PolymorphicName
code-creation,Builtin,2,281376,0x7ff6d6618334,15848,KeyedStoreIC_Megamorphic
code-creation,Builtin,2,281390,0x7ff6d661c134,280,LoadGlobalIC_NoFeedback
code-creation,Builtin,2,281405,0x7ff6d661c254,60,LoadIC_FunctionPrototype
code-creation,Builtin,2,281419,0x7ff6d661c294,12,LoadIC_StringLength
code-creation,Builtin,2,281433,0x7ff6d661c2b4,16,LoadIC_StringWrapperLength
code-creation,Builtin,2,281448,0x7ff6d661c2d4,3056,LoadIC_NoFeedback
code-creation,Builtin,2,281462,0x7ff6d661ced4,32,StoreGlobalIC_Slow
code-creation,Builtin,2,281476,0x7ff6d661cf14,7332,StoreIC_NoFeedback
code-creation,Builtin,2,281491,0x7ff6d661ebd4,180,KeyedLoadIC_SloppyArguments
code-creation,Builtin,2,281505,0x7ff6d661ec94,72,LoadIndexedInterceptorIC
code-creation,Builtin,2,281519,0x7ff6d661ecf4,236,KeyedStoreIC_SloppyArguments_Standard
code-creation,Builtin,2,281534,0x7ff6d661edf4,236,KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW
code-creation,Builtin,2,281550,0x7ff6d661eef4,236,KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB
code-creation,Builtin,2,281565,0x7ff6d661eff4,236,KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW
code-creation,Builtin,2,281581,0x7ff6d661f0f4,14344,StoreFastElementIC_Standard
code-creation,Builtin,2,281596,0x7ff6d6622914,9616,StoreFastElementIC_GrowNoTransitionHandleCOW
code-creation,Builtin,2,281611,0x7ff6d6624eb4,13364,StoreFastElementIC_NoTransitionIgnoreOOB
code-creation,Builtin,2,281626,0x7ff6d66282f4,6088,StoreFastElementIC_NoTransitionHandleCOW
code-creation,Builtin,2,281641,0x7ff6d6629ad4,8484,ElementsTransitionAndStore_Standard
code-creation,Builtin,2,281656,0x7ff6d662bc14,19368,ElementsTransitionAndStore_GrowNoTransitionHandleCOW
code-creation,Builtin,2,281672,0x7ff6d66307d4,8484,ElementsTransitionAndStore_NoTransitionIgnoreOOB
code-creation,Builtin,2,281687,0x7ff6d6632914,11024,ElementsTransitionAndStore_NoTransitionHandleCOW
code-creation,Builtin,2,281703,0x7ff6d6635434,792,KeyedHasIC_PolymorphicName
code-creation,Builtin,2,281717,0x7ff6d6635754,164,KeyedHasIC_SloppyArguments
code-creation,Builtin,2,281732,0x7ff6d6635814,72,HasIndexedInterceptorIC
code-creation,Builtin,2,281746,0x7ff6d6635874,96,DynamicCheckMapsTrampoline
code-creation,Builtin,2,281760,0x7ff6d66358f4,224,DynamicCheckMaps
code-creation,Builtin,2,282155,0x7ff6d66359f4,96,DynamicCheckMapsWithFeedbackVectorTrampoline
code-creation,Builtin,2,282177,0x7ff6d6635a74,188,DynamicCheckMapsWithFeedbackVector
code-creation,Builtin,2,282193,0x7ff6d6635b34,152,EnqueueMicrotask
code-creation,Builtin,2,282208,0x7ff6d6635bd4,8,RunMicrotasksTrampoline
code-creation,Builtin,2,282222,0x7ff6d6635bf4,3476,RunMicrotasks
code-creation,Builtin,2,282242,0x7ff6d6636994,2636,HasProperty
code-creation,Builtin,2,282257,0x7ff6d66373f4,1156,DeleteProperty
code-creation,Builtin,2,282271,0x7ff6d6637894,1972,CopyDataProperties
code-creation,Builtin,2,282285,0x7ff6d6638054,9184,SetDataProperties
code-creation,Builtin,2,282300,0x7ff6d663a454,28,Abort
code-creation,Builtin,2,282313,0x7ff6d663a474,28,AbortCSAAssert
code-creation,Builtin,2,282327,0x7ff6d663a494,12,EmptyFunction
code-creation,Builtin,2,282341,0x7ff6d663a4b4,12,Illegal
code-creation,Builtin,2,282355,0x7ff6d663a4d4,12,StrictPoisonPillThrower
code-creation,Builtin,2,282370,0x7ff6d663a4f4,12,UnsupportedThrower
code-creation,Builtin,2,282384,0x7ff6d663a514,64,ReturnReceiver
code-creation,Builtin,2,282398,0x7ff6d663a574,28,ArrayConstructor
code-creation,Builtin,2,282412,0x7ff6d663a594,404,ArrayConstructorImpl
code-creation,Builtin,2,282426,0x7ff6d663a734,216,ArrayNoArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,282442,0x7ff6d663a814,216,ArrayNoArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,282457,0x7ff6d663a8f4,176,ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,282544,0x7ff6d663a9b4,176,ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,282565,0x7ff6d663aa74,176,ArrayNoArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,282582,0x7ff6d663ab34,176,ArrayNoArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,282598,0x7ff6d663abf4,188,ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,282614,0x7ff6d663acb4,188,ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,282630,0x7ff6d663ad74,512,ArraySingleArgumentConstructor_PackedSmi_DontOverride
code-creation,Builtin,2,282645,0x7ff6d663af94,480,ArraySingleArgumentConstructor_HoleySmi_DontOverride
code-creation,Builtin,2,282661,0x7ff6d663b194,436,ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites
code-creation,Builtin,2,282677,0x7ff6d663b354,404,ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites
code-creation,Builtin,2,282693,0x7ff6d663b4f4,436,ArraySingleArgumentConstructor_Packed_DisableAllocationSites
code-creation,Builtin,2,282708,0x7ff6d663b6b4,404,ArraySingleArgumentConstructor_Holey_DisableAllocationSites
code-creation,Builtin,2,282724,0x7ff6d663b854,448,ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites
code-creation,Builtin,2,282740,0x7ff6d663ba34,412,ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites
code-creation,Builtin,2,282756,0x7ff6d663bbd4,64,ArrayNArgumentsConstructor
code-creation,Builtin,2,282771,0x7ff6d663bc34,12,ArrayConcat
code-creation,Builtin,2,282785,0x7ff6d663bc54,12,ArrayPrototypeFill
code-creation,Builtin,2,282799,0x7ff6d663bc74,932,ArrayIncludesSmiOrObject
code-creation,Builtin,2,282813,0x7ff6d663c034,140,ArrayIncludesPackedDoubles
code-creation,Builtin,2,282828,0x7ff6d663c0d4,208,ArrayIncludesHoleyDoubles
code-creation,Builtin,2,282842,0x7ff6d663c1b4,548,ArrayIncludes
code-creation,Builtin,2,282856,0x7ff6d663c3f4,856,ArrayIndexOfSmiOrObject
code-creation,Builtin,2,282871,0x7ff6d663c754,116,ArrayIndexOfPackedDoubles
code-creation,Builtin,2,282885,0x7ff6d663c7d4,116,ArrayIndexOfHoleyDoubles
code-creation,Builtin,2,282899,0x7ff6d663c854,552,ArrayIndexOf
code-creation,Builtin,2,282914,0x7ff6d663ca94,12,ArrayPop
code-creation,Builtin,2,282927,0x7ff6d663cab4,616,ArrayPrototypePop
code-creation,Builtin,2,282942,0x7ff6d663cd34,12,ArrayPush
code-creation,Builtin,2,282956,0x7ff6d663cd54,2424,ArrayPrototypePush
code-creation,Builtin,2,282970,0x7ff6d663d6d4,12,ArrayShift
code-creation,Builtin,2,282984,0x7ff6d663d6f4,12,ArrayUnshift
code-creation,Builtin,2,282998,0x7ff6d663d714,956,CloneFastJSArray
code-creation,Builtin,2,283012,0x7ff6d663dad4,2196,CloneFastJSArrayFillingHoles
code-creation,Builtin,2,283026,0x7ff6d663e374,976,ExtractFastJSArray
code-creation,Builtin,2,283041,0x7ff6d663e754,260,ArrayPrototypeEntries
code-creation,Builtin,2,283055,0x7ff6d663e874,248,ArrayPrototypeKeys
code-creation,Builtin,2,283069,0x7ff6d663e974,260,ArrayPrototypeValues
code-creation,Builtin,2,283083,0x7ff6d663ea94,4428,ArrayIteratorPrototypeNext
code-creation,Builtin,2,283098,0x7ff6d663fbf4,4168,FlattenIntoArray
code-creation,Builtin,2,283112,0x7ff6d6640c54,4172,FlatMapIntoArray
code-creation,Builtin,2,283132,0x7ff6d6641cb4,372,ArrayPrototypeFlat
code-creation,Builtin,2,283147,0x7ff6d6641e34,428,ArrayPrototypeFlatMap
code-creation,Builtin,2,283161,0x7ff6d6641ff4,12,ArrayBufferConstructor
code-creation,Builtin,2,283176,0x7ff6d6642014,12,ArrayBufferConstructor_DoNotInitialize
code-creation,Builtin,2,283191,0x7ff6d6642034,12,ArrayBufferPrototypeSlice
code-creation,Builtin,2,283205,0x7ff6d6642054,12,ArrayBufferPrototypeResize
code-creation,Builtin,2,283220,0x7ff6d6642074,804,AsyncFunctionEnter
code-creation,Builtin,2,283234,0x7ff6d66423b4,132,AsyncFunctionReject
code-creation,Builtin,2,283248,0x7ff6d6642454,128,AsyncFunctionResolve
code-creation,Builtin,2,283262,0x7ff6d66424f4,12,AsyncFunctionLazyDeoptContinuation
code-creation,Builtin,2,283277,0x7ff6d6642514,2804,AsyncFunctionAwaitCaught
code-creation,Builtin,2,283292,0x7ff6d6643014,2804,AsyncFunctionAwaitUncaught
code-creation,Builtin,2,283309,0x7ff6d6643b14,172,AsyncFunctionAwaitRejectClosure
code-creation,Builtin,2,283326,0x7ff6d6643bd4,164,AsyncFunctionAwaitResolveClosure
code-creation,Builtin,2,283346,0x7ff6d6643c94,12,BigIntConstructor
code-creation,Builtin,2,283361,0x7ff6d6643cb4,12,BigIntAsUintN
code-creation,Builtin,2,283375,0x7ff6d6643cd4,12,BigIntAsIntN
code-creation,Builtin,2,283389,0x7ff6d6643cf4,12,BigIntPrototypeToLocaleString
code-creation,Builtin,2,283403,0x7ff6d6643d14,12,BigIntPrototypeToString
code-creation,Builtin,2,283418,0x7ff6d6643d34,12,BigIntPrototypeValueOf
code-creation,Builtin,2,283432,0x7ff6d6643d54,12,CallSitePrototypeGetColumnNumber
code-creation,Builtin,2,283447,0x7ff6d6643d74,12,CallSitePrototypeGetEnclosingColumnNumber
code-creation,Builtin,2,283462,0x7ff6d6643d94,12,CallSitePrototypeGetEnclosingLineNumber
code-creation,Builtin,2,283477,0x7ff6d6643db4,12,CallSitePrototypeGetEvalOrigin
code-creation,Builtin,2,283491,0x7ff6d6643dd4,12,CallSitePrototypeGetFileName
code-creation,Builtin,2,283506,0x7ff6d6643df4,12,CallSitePrototypeGetFunction
code-creation,Builtin,2,283520,0x7ff6d6643e14,12,CallSitePrototypeGetFunctionName
code-creation,Builtin,2,283535,0x7ff6d6643e34,12,CallSitePrototypeGetLineNumber
code-creation,Builtin,2,283550,0x7ff6d6643e54,12,CallSitePrototypeGetMethodName
code-creation,Builtin,2,283564,0x7ff6d6643e74,12,CallSitePrototypeGetPosition
code-creation,Builtin,2,283579,0x7ff6d6643e94,12,CallSitePrototypeGetPromiseIndex
code-creation,Builtin,2,283593,0x7ff6d6643eb4,12,CallSitePrototypeGetScriptNameOrSourceURL
code-creation,Builtin,2,283608,0x7ff6d6643ed4,12,CallSitePrototypeGetThis
code-creation,Builtin,2,283623,0x7ff6d6643ef4,12,CallSitePrototypeGetTypeName
code-creation,Builtin,2,283637,0x7ff6d6643f14,12,CallSitePrototypeIsAsync
code-creation,Builtin,2,283651,0x7ff6d6643f34,12,CallSitePrototypeIsConstructor
code-creation,Builtin,2,283666,0x7ff6d6643f54,12,CallSitePrototypeIsEval
code-creation,Builtin,2,283680,0x7ff6d6643f74,12,CallSitePrototypeIsNative
code-creation,Builtin,2,283695,0x7ff6d6643f94,12,CallSitePrototypeIsPromiseAll
code-creation,Builtin,2,283709,0x7ff6d6643fb4,12,CallSitePrototypeIsToplevel
code-creation,Builtin,2,283724,0x7ff6d6643fd4,12,CallSitePrototypeToString
code-creation,Builtin,2,283738,0x7ff6d6643ff4,12,ConsoleDebug
code-creation,Builtin,2,283752,0x7ff6d6644014,12,ConsoleError
code-creation,Builtin,2,283766,0x7ff6d6644034,12,ConsoleInfo
code-creation,Builtin,2,283780,0x7ff6d6644054,12,ConsoleLog
code-creation,Builtin,2,283793,0x7ff6d6644074,12,ConsoleWarn
code-creation,Builtin,2,283807,0x7ff6d6644094,12,ConsoleDir
code-creation,Builtin,2,283821,0x7ff6d66440b4,12,ConsoleDirXml
code-creation,Builtin,2,283835,0x7ff6d66440d4,12,ConsoleTable
code-creation,Builtin,2,283849,0x7ff6d66440f4,12,ConsoleTrace
code-creation,Builtin,2,283863,0x7ff6d6644114,12,ConsoleGroup
code-creation,Builtin,2,283876,0x7ff6d6644134,12,ConsoleGroupCollapsed
code-creation,Builtin,2,283891,0x7ff6d6644154,12,ConsoleGroupEnd
code-creation,Builtin,2,283905,0x7ff6d6644174,12,ConsoleClear
code-creation,Builtin,2,283919,0x7ff6d6644194,12,ConsoleCount
code-creation,Builtin,2,283932,0x7ff6d66441b4,12,ConsoleCountReset
code-creation,Builtin,2,283946,0x7ff6d66441d4,12,ConsoleAssert
code-creation,Builtin,2,283960,0x7ff6d66441f4,12,ConsoleProfile
code-creation,Builtin,2,283974,0x7ff6d6644214,12,ConsoleProfileEnd
code-creation,Builtin,2,283989,0x7ff6d6644234,12,ConsoleTime
code-creation,Builtin,2,284002,0x7ff6d6644254,12,ConsoleTimeLog
code-creation,Builtin,2,284016,0x7ff6d6644274,12,ConsoleTimeEnd
code-creation,Builtin,2,284030,0x7ff6d6644294,12,ConsoleTimeStamp
code-creation,Builtin,2,284044,0x7ff6d66442b4,12,ConsoleContext
code-creation,Builtin,2,284058,0x7ff6d66442d4,12,DataViewConstructor
code-creation,Builtin,2,284072,0x7ff6d66442f4,12,DateConstructor
code-creation,Builtin,2,284086,0x7ff6d6644314,216,DatePrototypeGetDate
code-creation,Builtin,2,284100,0x7ff6d66443f4,216,DatePrototypeGetDay
code-creation,Builtin,2,284115,0x7ff6d66444d4,216,DatePrototypeGetFullYear
code-creation,Builtin,2,284135,0x7ff6d66445b4,216,DatePrototypeGetHours
code-creation,Builtin,2,284151,0x7ff6d6644694,196,DatePrototypeGetMilliseconds
code-creation,Builtin,2,284166,0x7ff6d6644774,216,DatePrototypeGetMinutes
code-creation,Builtin,2,284181,0x7ff6d6644854,216,DatePrototypeGetMonth
code-creation,Builtin,2,284195,0x7ff6d6644934,216,DatePrototypeGetSeconds
code-creation,Builtin,2,284209,0x7ff6d6644a14,124,DatePrototypeGetTime
code-creation,Builtin,2,284224,0x7ff6d6644a94,196,DatePrototypeGetTimezoneOffset
code-creation,Builtin,2,284239,0x7ff6d6644b74,196,DatePrototypeGetUTCDate
code-creation,Builtin,2,284253,0x7ff6d6644c54,196,DatePrototypeGetUTCDay
code-creation,Builtin,2,284268,0x7ff6d6644d34,196,DatePrototypeGetUTCFullYear
code-creation,Builtin,2,284282,0x7ff6d6644e14,196,DatePrototypeGetUTCHours
code-creation,Builtin,2,284296,0x7ff6d6644ef4,196,DatePrototypeGetUTCMilliseconds
code-creation,Builtin,2,284311,0x7ff6d6644fd4,196,DatePrototypeGetUTCMinutes
code-creation,Builtin,2,284326,0x7ff6d66450b4,196,DatePrototypeGetUTCMonth
code-creation,Builtin,2,284340,0x7ff6d6645194,196,DatePrototypeGetUTCSeconds
code-creation,Builtin,2,284355,0x7ff6d6645274,124,DatePrototypeValueOf
code-creation,Builtin,2,284369,0x7ff6d66452f4,352,DatePrototypeToPrimitive
code-creation,Builtin,2,284384,0x7ff6d6645474,12,DatePrototypeGetYear
code-creation,Builtin,2,284398,0x7ff6d6645494,12,DatePrototypeSetYear
code-creation,Builtin,2,284413,0x7ff6d66454b4,12,DateNow
code-creation,Builtin,2,284426,0x7ff6d66454d4,12,DateParse
code-creation,Builtin,2,284440,0x7ff6d66454f4,12,DatePrototypeSetDate
code-creation,Builtin,2,284455,0x7ff6d6645514,12,DatePrototypeSetFullYear
code-creation,Builtin,2,284469,0x7ff6d6645534,12,DatePrototypeSetHours
code-creation,Builtin,2,284483,0x7ff6d6645554,12,DatePrototypeSetMilliseconds
code-creation,Builtin,2,284498,0x7ff6d6645574,12,DatePrototypeSetMinutes
code-creation,Builtin,2,284512,0x7ff6d6645594,12,DatePrototypeSetMonth
code-creation,Builtin,2,284527,0x7ff6d66455b4,12,DatePrototypeSetSeconds
code-creation,Builtin,2,284541,0x7ff6d66455d4,12,DatePrototypeSetTime
code-creation,Builtin,2,284555,0x7ff6d66455f4,12,DatePrototypeSetUTCDate
code-creation,Builtin,2,284570,0x7ff6d6645614,12,DatePrototypeSetUTCFullYear
code-creation,Builtin,2,284584,0x7ff6d6645634,12,DatePrototypeSetUTCHours
code-creation,Builtin,2,284599,0x7ff6d6645654,12,DatePrototypeSetUTCMilliseconds
code-creation,Builtin,2,284613,0x7ff6d6645674,12,DatePrototypeSetUTCMinutes
code-creation,Builtin,2,284628,0x7ff6d6645694,12,DatePrototypeSetUTCMonth
code-creation,Builtin,2,284642,0x7ff6d66456b4,12,DatePrototypeSetUTCSeconds
code-creation,Builtin,2,284657,0x7ff6d66456d4,12,DatePrototypeToDateString
code-creation,Builtin,2,284671,0x7ff6d66456f4,12,DatePrototypeToISOString
code-creation,Builtin,2,284686,0x7ff6d6645714,12,DatePrototypeToUTCString
code-creation,Builtin,2,284700,0x7ff6d6645734,12,DatePrototypeToString
code-creation,Builtin,2,284714,0x7ff6d6645754,12,DatePrototypeToTimeString
code-creation,Builtin,2,284729,0x7ff6d6645774,12,DatePrototypeToJson
code-creation,Builtin,2,284743,0x7ff6d6645794,12,DateUTC
code-creation,Builtin,2,284757,0x7ff6d66457b4,12,ErrorConstructor
code-creation,Builtin,2,284771,0x7ff6d66457d4,12,ErrorCaptureStackTrace
code-creation,Builtin,2,284786,0x7ff6d66457f4,12,ErrorPrototypeToString
code-creation,Builtin,2,284800,0x7ff6d6645814,12,FunctionConstructor
code-creation,Builtin,2,284814,0x7ff6d6645834,68,FunctionPrototypeApply
code-creation,Builtin,2,284829,0x7ff6d6645894,12,FunctionPrototypeBind
code-creation,Builtin,2,284843,0x7ff6d66458b4,32,FunctionPrototypeCall
code-creation,Builtin,2,284857,0x7ff6d66458f4,12,FunctionPrototypeToString
code-creation,Builtin,2,284872,0x7ff6d6645914,192,CreateIterResultObject
code-creation,Builtin,2,284886,0x7ff6d66459f4,788,CreateGeneratorObject
code-creation,Builtin,2,284900,0x7ff6d6645d14,12,GeneratorFunctionConstructor
code-creation,Builtin,2,284915,0x7ff6d6645d34,412,GeneratorPrototypeNext
code-creation,Builtin,2,284929,0x7ff6d6645ed4,420,GeneratorPrototypeReturn
code-creation,Builtin,2,284946,0x7ff6d6646094,424,GeneratorPrototypeThrow
code-creation,Builtin,2,284962,0x7ff6d6646254,12,AsyncFunctionConstructor
code-creation,Builtin,2,284977,0x7ff6d6646274,372,SuspendGeneratorBaseline
code-creation,Builtin,2,284992,0x7ff6d66463f4,88,ResumeGeneratorBaseline
code-creation,Builtin,2,285006,0x7ff6d6646454,36,GetIteratorWithFeedbackLazyDeoptContinuation
code-creation,Builtin,2,285021,0x7ff6d6646494,12,GlobalDecodeURI
code-creation,Builtin,2,285035,0x7ff6d66464b4,12,GlobalDecodeURIComponent
code-creation,Builtin,2,285050,0x7ff6d66464d4,12,GlobalEncodeURI
code-creation,Builtin,2,285064,0x7ff6d66464f4,12,GlobalEncodeURIComponent
code-creation,Builtin,2,285078,0x7ff6d6646514,12,GlobalEscape
code-creation,Builtin,2,285092,0x7ff6d6646534,12,GlobalUnescape
code-creation,Builtin,2,285106,0x7ff6d6646554,12,GlobalEval
code-creation,Builtin,2,285120,0x7ff6d6646574,132,GlobalIsFinite
code-creation,Builtin,2,285145,0x7ff6d6646614,124,GlobalIsNaN
code-creation,Builtin,2,285284,0x7ff6d6646694,12,JsonParse
code-creation,Builtin,2,285315,0x7ff6d66466b4,12,JsonStringify
code-creation,Builtin,2,285333,0x7ff6d66466d4,4608,LoadIC
code-creation,Builtin,2,285356,0x7ff6d66478f4,4296,LoadIC_Megamorphic
code-creation,Builtin,2,285380,0x7ff6d66489d4,4520,LoadIC_Noninlined
code-creation,Builtin,2,285397,0x7ff6d6649b94,44,LoadICTrampoline
code-creation,Builtin,2,285414,0x7ff6d6649bd4,24,LoadICBaseline
code-creation,Builtin,2,285429,0x7ff6d6649bf4,44,LoadICTrampoline_Megamorphic
code-creation,Builtin,2,285446,0x7ff6d6649c34,7376,LoadSuperIC
code-creation,Builtin,2,285461,0x7ff6d664b914,24,LoadSuperICBaseline
code-creation,Builtin,2,285478,0x7ff6d664b934,8148,KeyedLoadIC
code-creation,Builtin,2,285494,0x7ff6d664d914,13088,KeyedLoadIC_Megamorphic
code-creation,Builtin,2,285510,0x7ff6d6650c54,44,KeyedLoadICTrampoline
code-creation,Builtin,2,285527,0x7ff6d6650c94,24,KeyedLoadICBaseline
code-creation,Builtin,2,285542,0x7ff6d6650cb4,44,KeyedLoadICTrampoline_Megamorphic
code-creation,Builtin,2,285559,0x7ff6d6650cf4,5104,StoreGlobalIC
code-creation,Builtin,2,285576,0x7ff6d66520f4,44,StoreGlobalICTrampoline
code-creation,Builtin,2,285593,0x7ff6d6652134,24,StoreGlobalICBaseline
code-creation,Builtin,2,285609,0x7ff6d6652154,5340,StoreIC
code-creation,Builtin,2,285626,0x7ff6d6653634,44,StoreICTrampoline
code-creation,Builtin,2,285643,0x7ff6d6653674,24,StoreICBaseline
code-creation,Builtin,2,285658,0x7ff6d6653694,5780,KeyedStoreIC
code-creation,Builtin,2,285675,0x7ff6d6654d34,44,KeyedStoreICTrampoline
code-creation,Builtin,2,285690,0x7ff6d6654d74,24,KeyedStoreICBaseline
code-creation,Builtin,2,285707,0x7ff6d6654d94,404,StoreInArrayLiteralIC
code-creation,Builtin,2,285723,0x7ff6d6654f34,24,StoreInArrayLiteralICBaseline
code-creation,Builtin,2,285740,0x7ff6d6654f54,140,LookupContextBaseline
code-creation,Builtin,2,285757,0x7ff6d6654ff4,140,LookupContextInsideTypeofBaseline
code-creation,Builtin,2,285775,0x7ff6d6655094,3244,LoadGlobalIC
code-creation,Builtin,2,285790,0x7ff6d6655d54,3220,LoadGlobalICInsideTypeof
code-creation,Builtin,2,285807,0x7ff6d66569f4,44,LoadGlobalICTrampoline
code-creation,Builtin,2,285824,0x7ff6d6656a34,24,LoadGlobalICBaseline
code-creation,Builtin,2,285842,0x7ff6d6656a54,44,LoadGlobalICInsideTypeofTrampoline
code-creation,Builtin,2,285859,0x7ff6d6656a94,24,LoadGlobalICInsideTypeofBaseline
code-creation,Builtin,2,285877,0x7ff6d6656ab4,140,LookupGlobalICBaseline
code-creation,Builtin,2,285894,0x7ff6d6656b54,140,LookupGlobalICInsideTypeofBaseline
code-creation,Builtin,2,285911,0x7ff6d6656bf4,2064,CloneObjectIC
code-creation,Builtin,2,285928,0x7ff6d6657414,24,CloneObjectICBaseline
code-creation,Builtin,2,285945,0x7ff6d6657434,1988,CloneObjectIC_Slow
code-creation,Builtin,2,285962,0x7ff6d6657c14,2756,KeyedHasIC
code-creation,Builtin,2,285979,0x7ff6d66586f4,24,KeyedHasICBaseline
code-creation,Builtin,2,286000,0x7ff6d6658714,2640,KeyedHasIC_Megamorphic
code-creation,Builtin,2,286018,0x7ff6d6659174,1436,IterableToList
code-creation,Builtin,2,286035,0x7ff6d6659714,1240,IterableToFixedArray
code-creation,Builtin,2,286052,0x7ff6d6659bf4,748,IterableToListWithSymbolLookup
code-creation,Builtin,2,286120,0x7ff6d6659ef4,56,IterableToFixedArrayWithSymbolLookupSlow
code-creation,Builtin,2,286143,0x7ff6d6659f34,124,IterableToListMayPreserveHoles
code-creation,Builtin,2,286161,0x7ff6d6659fb4,984,IterableToFixedArrayForWasm
code-creation,Builtin,2,286179,0x7ff6d665a394,1616,StringListFromIterable
code-creation,Builtin,2,286195,0x7ff6d665a9f4,1228,FindOrderedHashMapEntry
code-creation,Builtin,2,286212,0x7ff6d665aed4,4156,MapConstructor
code-creation,Builtin,2,286226,0x7ff6d665bf14,1996,MapPrototypeSet
code-creation,Builtin,2,286243,0x7ff6d665c6f4,1524,MapPrototypeDelete
code-creation,Builtin,2,286259,0x7ff6d665ccf4,204,MapPrototypeGet
code-creation,Builtin,2,286276,0x7ff6d665cdd4,164,MapPrototypeHas
code-creation,Builtin,2,286292,0x7ff6d665ce94,12,MapPrototypeClear
code-creation,Builtin,2,286309,0x7ff6d665ceb4,284,MapPrototypeEntries
code-creation,Builtin,2,286324,0x7ff6d665cfd4,144,MapPrototypeGetSize
code-creation,Builtin,2,286341,0x7ff6d665d074,492,MapPrototypeForEach
code-creation,Builtin,2,286357,0x7ff6d665d274,284,MapPrototypeKeys
code-creation,Builtin,2,286374,0x7ff6d665d394,284,MapPrototypeValues
code-creation,Builtin,2,286391,0x7ff6d665d4b4,1052,MapIteratorPrototypeNext
code-creation,Builtin,2,286408,0x7ff6d665d8d4,1168,MapIteratorToList
code-creation,Builtin,2,286424,0x7ff6d665dd74,12,NumberPrototypeToExponential
code-creation,Builtin,2,286442,0x7ff6d665dd94,12,NumberPrototypeToFixed
code-creation,Builtin,2,286457,0x7ff6d665ddb4,12,NumberPrototypeToLocaleString
code-creation,Builtin,2,286472,0x7ff6d665ddd4,12,NumberPrototypeToPrecision
code-creation,Builtin,2,286490,0x7ff6d665ddf4,328,SameValue
code-creation,Builtin,2,286505,0x7ff6d665df54,204,SameValueNumbersOnly
code-creation,Builtin,2,286522,0x7ff6d665e034,792,Add_Baseline
code-creation,Builtin,2,286537,0x7ff6d665e354,828,Subtract_Baseline
code-creation,Builtin,2,286554,0x7ff6d665e694,808,Multiply_Baseline
code-creation,Builtin,2,286571,0x7ff6d665e9d4,832,Divide_Baseline
code-creation,Builtin,2,286586,0x7ff6d665ed34,764,Modulus_Baseline
code-creation,Builtin,2,286600,0x7ff6d665f034,808,Exponentiate_Baseline
code-creation,Builtin,2,286615,0x7ff6d665f374,708,BitwiseAnd_Baseline
code-creation,Builtin,2,286629,0x7ff6d665f654,700,BitwiseOr_Baseline
code-creation,Builtin,2,286646,0x7ff6d665f914,708,BitwiseXor_Baseline
code-creation,Builtin,2,286662,0x7ff6d665fbf4,720,ShiftLeft_Baseline
code-creation,Builtin,2,286679,0x7ff6d665fed4,720,ShiftRight_Baseline
code-creation,Builtin,2,286693,0x7ff6d66601b4,836,ShiftRightLogical_Baseline
code-creation,Builtin,2,286708,0x7ff6d6660514,720,Add_WithFeedback
code-creation,Builtin,2,286722,0x7ff6d66607f4,780,Subtract_WithFeedback
code-creation,Builtin,2,286737,0x7ff6d6660b14,776,Multiply_WithFeedback
code-creation,Builtin,2,286754,0x7ff6d6660e34,804,Divide_WithFeedback
code-creation,Builtin,2,286771,0x7ff6d6661174,724,Modulus_WithFeedback
code-creation,Builtin,2,286788,0x7ff6d6661454,764,Exponentiate_WithFeedback
code-creation,Builtin,2,286806,0x7ff6d6661754,684,BitwiseAnd_WithFeedback
code-creation,Builtin,2,286823,0x7ff6d6661a14,676,BitwiseOr_WithFeedback
code-creation,Builtin,2,286838,0x7ff6d6661cd4,684,BitwiseXor_WithFeedback
code-creation,Builtin,2,286852,0x7ff6d6661f94,692,ShiftLeft_WithFeedback
code-creation,Builtin,2,286867,0x7ff6d6662254,692,ShiftRight_WithFeedback
code-creation,Builtin,2,286881,0x7ff6d6662514,808,ShiftRightLogical_WithFeedback
code-creation,Builtin,2,286898,0x7ff6d6662854,1696,Equal_Baseline
code-creation,Builtin,2,286915,0x7ff6d6662f14,908,StrictEqual_Baseline
code-creation,Builtin,2,286932,0x7ff6d66632b4,1264,LessThan_Baseline
code-creation,Builtin,2,286949,0x7ff6d66637b4,1264,GreaterThan_Baseline
code-creation,Builtin,2,286966,0x7ff6d6663cb4,1264,LessThanOrEqual_Baseline
code-creation,Builtin,2,286984,0x7ff6d66641b4,1264,GreaterThanOrEqual_Baseline
code-creation,Builtin,2,287001,0x7ff6d66646b4,1620,Equal_WithFeedback
code-creation,Builtin,2,287017,0x7ff6d6664d14,940,StrictEqual_WithFeedback
code-creation,Builtin,2,287034,0x7ff6d66650d4,1240,LessThan_WithFeedback
code-creation,Builtin,2,287115,0x7ff6d66655b4,1240,GreaterThan_WithFeedback
code-creation,Builtin,2,287140,0x7ff6d6665a94,1240,LessThanOrEqual_WithFeedback
code-creation,Builtin,2,287159,0x7ff6d6665f74,1240,GreaterThanOrEqual_WithFeedback
code-creation,Builtin,2,287176,0x7ff6d6666454,332,BitwiseNot_Baseline
code-creation,Builtin,2,287192,0x7ff6d66665b4,460,Decrement_Baseline
code-creation,Builtin,2,287209,0x7ff6d6666794,464,Increment_Baseline
code-creation,Builtin,2,287224,0x7ff6d6666974,488,Negate_Baseline
code-creation,Builtin,2,287238,0x7ff6d6666b74,316,BitwiseNot_WithFeedback
code-creation,Builtin,2,287253,0x7ff6d6666cb4,440,Decrement_WithFeedback
code-creation,Builtin,2,287267,0x7ff6d6666e74,444,Increment_WithFeedback
code-creation,Builtin,2,287281,0x7ff6d6667034,472,Negate_WithFeedback
code-creation,Builtin,2,287297,0x7ff6d6667214,252,ObjectAssign
code-creation,Builtin,2,287313,0x7ff6d6667314,864,ObjectCreate
code-creation,Builtin,2,287330,0x7ff6d6667694,12,ObjectDefineGetter
code-creation,Builtin,2,287347,0x7ff6d66676b4,12,ObjectDefineProperties
code-creation,Builtin,2,287364,0x7ff6d66676d4,12,ObjectDefineProperty
code-creation,Builtin,2,287381,0x7ff6d66676f4,12,ObjectDefineSetter
code-creation,Builtin,2,287398,0x7ff6d6667714,1516,ObjectEntries
code-creation,Builtin,2,287415,0x7ff6d6667d14,12,ObjectFreeze
code-creation,Builtin,2,287432,0x7ff6d6667d34,5620,ObjectGetOwnPropertyDescriptor
code-creation,Builtin,2,287449,0x7ff6d6669334,12,ObjectGetOwnPropertyDescriptors
code-creation,Builtin,2,287467,0x7ff6d6669354,600,ObjectGetOwnPropertyNames
code-creation,Builtin,2,287484,0x7ff6d66695b4,12,ObjectGetOwnPropertySymbols
code-creation,Builtin,2,287500,0x7ff6d66695d4,164,ObjectHasOwn
code-creation,Builtin,2,287514,0x7ff6d6669694,388,ObjectIs
code-creation,Builtin,2,287528,0x7ff6d6669834,12,ObjectIsFrozen
code-creation,Builtin,2,287542,0x7ff6d6669854,12,ObjectIsSealed
code-creation,Builtin,2,287556,0x7ff6d6669874,536,ObjectKeys
code-creation,Builtin,2,287570,0x7ff6d6669a94,12,ObjectLookupGetter
code-creation,Builtin,2,287584,0x7ff6d6669ab4,12,ObjectLookupSetter
code-creation,Builtin,2,287598,0x7ff6d6669ad4,2280,ObjectPrototypeHasOwnProperty
code-creation,Builtin,2,287620,0x7ff6d666a3d4,216,ObjectPrototypeIsPrototypeOf
code-creation,Builtin,2,287635,0x7ff6d666a4b4,12,ObjectPrototypePropertyIsEnumerable
code-creation,Builtin,2,287651,0x7ff6d666a4d4,12,ObjectPrototypeGetProto
code-creation,Builtin,2,287665,0x7ff6d666a4f4,12,ObjectPrototypeSetProto
code-creation,Builtin,2,287680,0x7ff6d666a514,12,ObjectSeal
code-creation,Builtin,2,287778,0x7ff6d666a534,1108,ObjectToString
code-creation,Builtin,2,287825,0x7ff6d666a994,1284,ObjectValues
code-creation,Builtin,2,287847,0x7ff6d666aeb4,280,OrdinaryHasInstance
code-creation,Builtin,2,287862,0x7ff6d666afd4,344,InstanceOf
code-creation,Builtin,2,287876,0x7ff6d666b134,632,InstanceOf_WithFeedback
code-creation,Builtin,2,287891,0x7ff6d666b3b4,648,InstanceOf_Baseline
code-creation,Builtin,2,287908,0x7ff6d666b654,268,ForInEnumerate
code-creation,Builtin,2,287923,0x7ff6d666b774,148,ForInPrepare
code-creation,Builtin,2,287938,0x7ff6d666b814,2584,ForInFilter
code-creation,Builtin,2,287953,0x7ff6d666c234,52,ReflectApply
code-creation,Builtin,2,287974,0x7ff6d666c274,60,ReflectConstruct
code-creation,Builtin,2,287988,0x7ff6d666c2b4,12,ReflectDefineProperty
code-creation,Builtin,2,288004,0x7ff6d666c2d4,12,ReflectGetOwnPropertyDescriptor
code-creation,Builtin,2,288022,0x7ff6d666c2f4,12,ReflectOwnKeys
code-creation,Builtin,2,288039,0x7ff6d666c314,12,ReflectSet
code-creation,Builtin,2,288055,0x7ff6d666c334,12,RegExpCapture1Getter
code-creation,Builtin,2,288072,0x7ff6d666c354,12,RegExpCapture2Getter
code-creation,Builtin,2,288094,0x7ff6d666c374,12,RegExpCapture3Getter
code-creation,Builtin,2,288109,0x7ff6d666c394,12,RegExpCapture4Getter
code-creation,Builtin,2,288128,0x7ff6d666c3b4,12,RegExpCapture5Getter
code-creation,Builtin,2,288152,0x7ff6d666c3d4,12,RegExpCapture6Getter
code-creation,Builtin,2,288169,0x7ff6d666c3f4,12,RegExpCapture7Getter
code-creation,Builtin,2,288186,0x7ff6d666c414,12,RegExpCapture8Getter
code-creation,Builtin,2,288207,0x7ff6d666c434,12,RegExpCapture9Getter
code-creation,Builtin,2,288233,0x7ff6d666c454,2212,RegExpConstructor
code-creation,Builtin,2,288248,0x7ff6d666cd14,12,RegExpInputGetter
code-creation,Builtin,2,288263,0x7ff6d666cd34,12,RegExpInputSetter
code-creation,Builtin,2,288279,0x7ff6d666cd54,12,RegExpLastMatchGetter
code-creation,Builtin,2,288297,0x7ff6d666cd74,12,RegExpLastParenGetter
code-creation,Builtin,2,288322,0x7ff6d666cd94,12,RegExpLeftContextGetter
code-creation,Builtin,2,288339,0x7ff6d666cdb4,908,RegExpPrototypeCompile
code-creation,Builtin,2,288356,0x7ff6d666d154,12,RegExpPrototypeToString
code-creation,Builtin,2,288373,0x7ff6d666d174,12,RegExpRightContextGetter
code-creation,Builtin,2,288391,0x7ff6d666d194,252,RegExpExecAtom
code-creation,Builtin,2,288408,0x7ff6d666d294,1040,RegExpExecInternal
code-creation,Builtin,2,288425,0x7ff6d666d6b4,8,RegExpInterpreterTrampoline
code-creation,Builtin,2,288450,0x7ff6d666d6d4,8,RegExpExperimentalTrampoline
code-creation,Builtin,2,288469,0x7ff6d666d6f4,2684,SetConstructor
code-creation,Builtin,2,288486,0x7ff6d666e174,1284,SetPrototypeHas
code-creation,Builtin,2,288504,0x7ff6d666e694,1736,SetPrototypeAdd
code-creation,Builtin,2,288520,0x7ff6d666ed74,1476,SetPrototypeDelete
code-creation,Builtin,2,288536,0x7ff6d666f354,12,SetPrototypeClear
code-creation,Builtin,2,288551,0x7ff6d666f374,284,SetPrototypeEntries
code-creation,Builtin,2,288566,0x7ff6d666f494,144,SetPrototypeGetSize
code-creation,Builtin,2,288580,0x7ff6d666f534,444,SetPrototypeForEach
code-creation,Builtin,2,288605,0x7ff6d666f6f4,284,SetPrototypeValues
code-creation,Builtin,2,288621,0x7ff6d666f814,988,SetIteratorPrototypeNext
code-creation,Builtin,2,288638,0x7ff6d666fbf4,1112,SetOrSetIteratorToList
code-creation,Builtin,2,288653,0x7ff6d6670054,12,SharedArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,288669,0x7ff6d6670074,12,SharedArrayBufferPrototypeSlice
code-creation,Builtin,2,288684,0x7ff6d6670094,12,SharedArrayBufferPrototypeGrow
code-creation,Builtin,2,288698,0x7ff6d66700b4,1280,AtomicsLoad
tick,0x7ff6d6ba8858,288714,0,0x0,6
code-creation,Builtin,2,288781,0x7ff6d66705d4,1008,AtomicsStore
code-creation,Builtin,2,288816,0x7ff6d66709d4,1704,AtomicsExchange
code-creation,Builtin,2,288835,0x7ff6d6671094,2092,AtomicsCompareExchange
code-creation,Builtin,2,288852,0x7ff6d66718d4,1804,AtomicsAdd
code-creation,Builtin,2,288866,0x7ff6d6671ff4,1804,AtomicsSub
code-creation,Builtin,2,288880,0x7ff6d6672714,1804,AtomicsAnd
code-creation,Builtin,2,288895,0x7ff6d6672e34,1804,AtomicsOr
code-creation,Builtin,2,288909,0x7ff6d6673554,1804,AtomicsXor
code-creation,Builtin,2,288923,0x7ff6d6673c74,12,AtomicsNotify
code-creation,Builtin,2,288937,0x7ff6d6673c94,12,AtomicsIsLockFree
code-creation,Builtin,2,288951,0x7ff6d6673cb4,12,AtomicsWait
code-creation,Builtin,2,288965,0x7ff6d6673cd4,12,AtomicsWaitAsync
code-creation,Builtin,2,288979,0x7ff6d6673cf4,12,StringFromCodePoint
code-creation,Builtin,2,288993,0x7ff6d6673d14,1428,StringFromCharCode
code-creation,Builtin,2,289007,0x7ff6d66742b4,12,StringPrototypeLastIndexOf
code-creation,Builtin,2,289022,0x7ff6d66742d4,4360,StringPrototypeMatchAll
code-creation,Builtin,2,289036,0x7ff6d66753f4,12,StringPrototypeLocaleCompare
code-creation,Builtin,2,289051,0x7ff6d6675414,1228,StringPrototypeReplace
code-creation,Builtin,2,289066,0x7ff6d66758f4,2900,StringPrototypeSplit
code-creation,Builtin,2,289080,0x7ff6d6676454,12,StringRaw
code-creation,Builtin,2,289094,0x7ff6d6676474,12,SymbolConstructor
code-creation,Builtin,2,289108,0x7ff6d6676494,12,SymbolFor
code-creation,Builtin,2,289127,0x7ff6d66764b4,12,SymbolKeyFor
code-creation,Builtin,2,289142,0x7ff6d66764d4,88,TypedArrayBaseConstructor
code-creation,Builtin,2,289156,0x7ff6d6676534,256,TypedArrayConstructor
code-creation,Builtin,2,289171,0x7ff6d6676654,12,TypedArrayPrototypeBuffer
code-creation,Builtin,2,289186,0x7ff6d6676674,888,TypedArrayPrototypeByteLength
code-creation,Builtin,2,289200,0x7ff6d66769f4,368,TypedArrayPrototypeByteOffset
code-creation,Builtin,2,289215,0x7ff6d6676b74,584,TypedArrayPrototypeLength
code-creation,Builtin,2,289234,0x7ff6d6676dd4,12,TypedArrayPrototypeCopyWithin
code-creation,Builtin,2,289252,0x7ff6d6676df4,12,TypedArrayPrototypeFill
code-creation,Builtin,2,289266,0x7ff6d6676e14,12,TypedArrayPrototypeIncludes
code-creation,Builtin,2,289281,0x7ff6d6676e34,12,TypedArrayPrototypeIndexOf
code-creation,Builtin,2,289304,0x7ff6d6676e54,12,TypedArrayPrototypeLastIndexOf
code-creation,Builtin,2,289319,0x7ff6d6676e74,12,TypedArrayPrototypeReverse
code-creation,Builtin,2,289334,0x7ff6d6676e94,316,TypedArrayPrototypeToStringTag
code-creation,Builtin,2,289349,0x7ff6d6676fd4,10664,TypedArrayPrototypeMap
code-creation,Builtin,2,289363,0x7ff6d6679994,792,GenericJSToWasmWrapper
code-creation,Builtin,2,289378,0x7ff6d6679cb4,148,WasmCompileLazy
code-creation,Builtin,2,289392,0x7ff6d6679d54,168,WasmDebugBreak
code-creation,Builtin,2,289406,0x7ff6d6679e14,16,WasmOnStackReplace
code-creation,Builtin,2,289420,0x7ff6d6679e34,140,WasmFloat32ToNumber
code-creation,Builtin,2,289434,0x7ff6d6679ed4,152,WasmFloat64ToNumber
code-creation,Builtin,2,289449,0x7ff6d6679f74,4,WasmI32AtomicWait32
code-creation,Builtin,2,289463,0x7ff6d6679f94,4,WasmI64AtomicWait32
code-creation,Builtin,2,289478,0x7ff6d6679fb4,24,JSToWasmLazyDeoptContinuation
code-creation,Builtin,2,289492,0x7ff6d6679fd4,4320,WeakMapConstructor
code-creation,Builtin,2,289507,0x7ff6d667b0d4,196,WeakMapLookupHashIndex
code-creation,Builtin,2,289521,0x7ff6d667b1b4,220,WeakMapGet
code-creation,Builtin,2,289535,0x7ff6d667b294,176,WeakMapPrototypeHas
code-creation,Builtin,2,289549,0x7ff6d667b354,204,WeakMapPrototypeSet
code-creation,Builtin,2,289563,0x7ff6d667b434,144,WeakMapPrototypeDelete
code-creation,Builtin,2,289578,0x7ff6d667b4d4,2876,WeakSetConstructor
code-creation,Builtin,2,289592,0x7ff6d667c014,176,WeakSetPrototypeHas
code-creation,Builtin,2,289606,0x7ff6d667c0d4,204,WeakSetPrototypeAdd
code-creation,Builtin,2,289620,0x7ff6d667c1b4,144,WeakSetPrototypeDelete
code-creation,Builtin,2,289635,0x7ff6d667c254,372,WeakCollectionDelete
code-creation,Builtin,2,289649,0x7ff6d667c3d4,764,WeakCollectionSet
code-creation,Builtin,2,289664,0x7ff6d667c6d4,296,AsyncGeneratorResolve
code-creation,Builtin,2,289678,0x7ff6d667c814,100,AsyncGeneratorReject
code-creation,Builtin,2,289692,0x7ff6d667c894,2760,AsyncGeneratorYield
code-creation,Builtin,2,289707,0x7ff6d667d374,2872,AsyncGeneratorReturn
code-creation,Builtin,2,289721,0x7ff6d667deb4,292,AsyncGeneratorResumeNext
code-creation,Builtin,2,289736,0x7ff6d667dff4,12,AsyncGeneratorFunctionConstructor
code-creation,Builtin,2,289750,0x7ff6d667e014,1020,AsyncGeneratorPrototypeNext
code-creation,Builtin,2,289765,0x7ff6d667e414,1028,AsyncGeneratorPrototypeReturn
code-creation,Builtin,2,289780,0x7ff6d667e834,1028,AsyncGeneratorPrototypeThrow
code-creation,Builtin,2,289795,0x7ff6d667ec54,2736,AsyncGeneratorAwaitCaught
code-creation,Builtin,2,289809,0x7ff6d667f714,2736,AsyncGeneratorAwaitUncaught
code-creation,Builtin,2,289824,0x7ff6d66801d4,116,AsyncGeneratorAwaitResolveClosure
code-creation,Builtin,2,289839,0x7ff6d6680254,128,AsyncGeneratorAwaitRejectClosure
code-creation,Builtin,2,289853,0x7ff6d66802f4,116,AsyncGeneratorYieldResolveClosure
code-creation,Builtin,2,289868,0x7ff6d6680374,116,AsyncGeneratorReturnClosedResolveClosure
code-creation,Builtin,2,289884,0x7ff6d66803f4,112,AsyncGeneratorReturnClosedRejectClosure
code-creation,Builtin,2,289899,0x7ff6d6680474,128,AsyncGeneratorReturnResolveClosure
code-creation,Builtin,2,289913,0x7ff6d6680514,1592,AsyncFromSyncIteratorPrototypeNext
code-creation,Builtin,2,289928,0x7ff6d6680b54,1696,AsyncFromSyncIteratorPrototypeThrow
code-creation,Builtin,2,289943,0x7ff6d6681214,1716,AsyncFromSyncIteratorPrototypeReturn
code-creation,Builtin,2,289958,0x7ff6d66818d4,100,AsyncIteratorValueUnwrap
code-creation,Builtin,2,289973,0x7ff6d6681954,220,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,289988,0x7ff6d6681a34,220,CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,290004,0x7ff6d6681b14,200,CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,290022,0x7ff6d6681bf4,392,CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,290040,0x7ff6d6681d94,392,CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,290056,0x7ff6d6681f34,232,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,290072,0x7ff6d6682034,232,CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,290087,0x7ff6d6682134,216,CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit
code-creation,Builtin,2,290103,0x7ff6d6682214,408,CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit
code-creation,Builtin,2,290118,0x7ff6d66823b4,408,CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit
code-creation,Builtin,2,290138,0x7ff6d6682554,4,DirectCEntry
code-creation,Builtin,2,290152,0x7ff6d6682574,1096,StringAdd_CheckNone
code-creation,Builtin,2,290166,0x7ff6d66829d4,2484,SubString
code-creation,Builtin,2,290180,0x7ff6d6683394,16,StackCheck
code-creation,Builtin,2,290194,0x7ff6d66833b4,84,DoubleToI
code-creation,Builtin,2,290208,0x7ff6d6683414,2236,GetProperty
code-creation,Builtin,2,290222,0x7ff6d6683cd4,2308,GetPropertyWithReceiver
code-creation,Builtin,2,290237,0x7ff6d66845f4,16004,SetProperty
code-creation,Builtin,2,290251,0x7ff6d6688494,13480,SetPropertyInLiteral
code-creation,Builtin,2,290265,0x7ff6d668b954,8,MemCopyUint8Uint8
code-creation,Builtin,2,290279,0x7ff6d668b974,8,MemMove
code-creation,Builtin,2,290293,0x7ff6d668b994,12,IsTraceCategoryEnabled
code-creation,Builtin,2,290308,0x7ff6d668b9b4,12,Trace
code-creation,Builtin,2,290321,0x7ff6d668b9d4,12,FinalizationRegistryUnregister
code-creation,Builtin,2,290336,0x7ff6d668b9f4,416,AsyncModuleEvaluate
code-creation,Builtin,2,290351,0x7ff6d668bbb4,12,CallAsyncModuleFulfilled
code-creation,Builtin,2,290365,0x7ff6d668bbd4,12,CallAsyncModuleRejected
code-creation,Builtin,2,290380,0x7ff6d668bbf4,260,AggregateErrorConstructor
code-creation,Builtin,2,290394,0x7ff6d668bd14,856,ArrayPrototypeAt
code-creation,Builtin,2,290408,0x7ff6d668c074,656,ArrayPrototypeConcat
code-creation,Builtin,2,290423,0x7ff6d668c314,5824,ArrayPrototypeCopyWithin
code-creation,Builtin,2,290437,0x7ff6d668d9f4,212,ArrayEveryLoopEagerDeoptContinuation
code-creation,Builtin,2,290452,0x7ff6d668dad4,612,ArrayEveryLoopLazyDeoptContinuation
code-creation,Builtin,2,290467,0x7ff6d668dd54,3316,ArrayEveryLoopContinuation
code-creation,Builtin,2,290482,0x7ff6d668ea54,1464,ArrayEvery
code-creation,Builtin,2,290496,0x7ff6d668f014,284,ArrayFilterLoopEagerDeoptContinuation
code-creation,Builtin,2,290511,0x7ff6d668f134,988,ArrayFilterLoopLazyDeoptContinuation
code-creation,Builtin,2,290526,0x7ff6d668f514,3564,ArrayFilterLoopContinuation
code-creation,Builtin,2,290541,0x7ff6d6690314,4260,ArrayFilter
code-creation,Builtin,2,290555,0x7ff6d66913d4,204,ArrayFindLoopEagerDeoptContinuation
code-creation,Builtin,2,290570,0x7ff6d66914b4,32,ArrayFindLoopLazyDeoptContinuation
code-creation,Builtin,2,290584,0x7ff6d66914f4,312,ArrayFindLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,290600,0x7ff6d6691634,528,ArrayFindLoopContinuation
code-creation,Builtin,2,290614,0x7ff6d6691854,1460,ArrayPrototypeFind
code-creation,Builtin,2,290628,0x7ff6d6691e14,204,ArrayFindIndexLoopEagerDeoptContinuation
code-creation,Builtin,2,290644,0x7ff6d6691ef4,32,ArrayFindIndexLoopLazyDeoptContinuation
code-creation,Builtin,2,290659,0x7ff6d6691f34,312,ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation
code-creation,Builtin,2,290674,0x7ff6d6692074,524,ArrayFindIndexLoopContinuation
code-creation,Builtin,2,290689,0x7ff6d6692294,1460,ArrayPrototypeFindIndex
code-creation,Builtin,2,290703,0x7ff6d6692854,448,ArrayFindLastLoopContinuation
code-creation,Builtin,2,290718,0x7ff6d6692a34,1700,ArrayPrototypeFindLast
code-creation,Builtin,2,290733,0x7ff6d66930f4,448,ArrayFindLastIndexLoopContinuation
code-creation,Builtin,2,290748,0x7ff6d66932d4,1700,ArrayPrototypeFindLastIndex
code-creation,Builtin,2,290762,0x7ff6d6693994,212,ArrayForEachLoopEagerDeoptContinuation
code-creation,Builtin,2,290779,0x7ff6d6693a74,212,ArrayForEachLoopLazyDeoptContinuation
code-creation,Builtin,2,290796,0x7ff6d6693b54,3156,ArrayForEachLoopContinuation
code-creation,Builtin,2,290811,0x7ff6d66947b4,1328,ArrayForEach
code-creation,Builtin,2,290825,0x7ff6d6694cf4,3572,ArrayFrom
code-creation,Builtin,2,290839,0x7ff6d6695af4,148,ArrayIsArray
code-creation,Builtin,2,290853,0x7ff6d6695b94,404,LoadJoinElement_DictionaryElements_0
code-creation,Builtin,2,290868,0x7ff6d6695d34,36,LoadJoinElement_FastSmiOrObjectElements_0
code-creation,Builtin,2,290883,0x7ff6d6695d74,140,LoadJoinElement_FastDoubleElements_0
code-creation,Builtin,2,290899,0x7ff6d6695e14,312,ConvertToLocaleString
code-creation,Builtin,2,290913,0x7ff6d6695f54,752,JoinStackPush
code-creation,Builtin,2,290927,0x7ff6d6696254,272,JoinStackPop
code-creation,Builtin,2,290941,0x7ff6d6696374,6628,ArrayPrototypeJoin
code-creation,Builtin,2,290955,0x7ff6d6697d74,5360,ArrayPrototypeToLocaleString
code-creation,Builtin,2,290970,0x7ff6d6699274,236,ArrayPrototypeToString
code-creation,Builtin,2,290985,0x7ff6d6699374,5924,TypedArrayPrototypeJoin
code-creation,Builtin,2,290999,0x7ff6d669aab4,4636,TypedArrayPrototypeToLocaleString
code-creation,Builtin,2,291014,0x7ff6d669bcd4,3824,ArrayPrototypeLastIndexOf
code-creation,Builtin,2,291028,0x7ff6d669cbd4,260,ArrayMapPreLoopLazyDeoptContinuation
code-creation,Builtin,2,291044,0x7ff6d669ccf4,252,ArrayMapLoopEagerDeoptContinuation
code-creation,Builtin,2,291058,0x7ff6d669cdf4,532,ArrayMapLoopLazyDeoptContinuation
code-creation,Builtin,2,291073,0x7ff6d669d014,3192,ArrayMapLoopContinuation
code-creation,Builtin,2,291088,0x7ff6d669dc94,3912,ArrayMap
code-creation,Builtin,2,291102,0x7ff6d669ebf4,1000,ArrayOf
code-creation,Builtin,2,291115,0x7ff6d669eff4,444,ArrayReduceRightPreLoopEagerDeoptContinuation
code-creation,Builtin,2,291158,0x7ff6d669f1b4,204,ArrayReduceRightLoopEagerDeoptContinuation
code-creation,Builtin,2,291176,0x7ff6d669f294,204,ArrayReduceRightLoopLazyDeoptContinuation
code-creation,Builtin,2,291191,0x7ff6d669f374,3200,ArrayReduceRightLoopContinuation
code-creation,Builtin,2,291206,0x7ff6d66a0014,2000,ArrayReduceRight
code-creation,Builtin,2,291221,0x7ff6d66a07f4,176,ArrayReducePreLoopEagerDeoptContinuation
code-creation,Builtin,2,291236,0x7ff6d66a08b4,204,ArrayReduceLoopEagerDeoptContinuation
code-creation,Builtin,2,291251,0x7ff6d66a0994,204,ArrayReduceLoopLazyDeoptContinuation
code-creation,Builtin,2,291266,0x7ff6d66a0a74,3252,ArrayReduceLoopContinuation
code-creation,Builtin,2,291281,0x7ff6d66a1734,1604,ArrayReduce
code-creation,Builtin,2,291295,0x7ff6d66a1d94,3216,ArrayPrototypeReverse
code-creation,Builtin,2,291309,0x7ff6d66a2a34,3592,ArrayPrototypeShift
code-creation,Builtin,2,291324,0x7ff6d66a3854,5220,ArrayPrototypeSlice
code-creation,Builtin,2,291338,0x7ff6d66a4cd4,212,ArraySomeLoopEagerDeoptContinuation
code-creation,Builtin,2,291353,0x7ff6d66a4db4,580,ArraySomeLoopLazyDeoptContinuation
code-creation,Builtin,2,291368,0x7ff6d66a5014,3304,ArraySomeLoopContinuation
code-creation,Builtin,2,291383,0x7ff6d66a5d14,1448,ArraySome
code-creation,Builtin,2,291397,0x7ff6d66a62d4,14216,ArrayPrototypeSplice
code-creation,Builtin,2,291411,0x7ff6d66a9a74,3264,ArrayPrototypeUnshift
code-creation,Builtin,2,291426,0x7ff6d66aa754,332,ArrayBufferPrototypeGetByteLength
code-creation,Builtin,2,291824,0x7ff6d66aa8b4,348,ArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,291847,0x7ff6d66aaa14,208,ArrayBufferPrototypeGetResizable
code-creation,Builtin,2,291863,0x7ff6d66aaaf4,332,SharedArrayBufferPrototypeGetMaxByteLength
code-creation,Builtin,2,291878,0x7ff6d66aac54,208,SharedArrayBufferPrototypeGetGrowable
code-creation,Builtin,2,291894,0x7ff6d66aad34,96,ArrayBufferIsView
code-creation,Builtin,2,291908,0x7ff6d66aadb4,396,ToInteger
code-creation,Builtin,2,291922,0x7ff6d66aaf54,3084,FastCreateDataProperty
code-creation,Builtin,2,291936,0x7ff6d66abb74,676,CheckNumberInRange
code-creation,Builtin,2,291951,0x7ff6d66abe34,584,CheckSameObject
code-creation,Builtin,2,291965,0x7ff6d66ac094,904,BooleanConstructor
code-creation,Builtin,2,291979,0x7ff6d66ac434,164,BooleanPrototypeToString
code-creation,Builtin,2,291997,0x7ff6d66ac4f4,156,BooleanPrototypeValueOf
code-creation,Builtin,2,292014,0x7ff6d66ac594,1184,BigIntAddNoThrow
code-creation,Builtin,2,292029,0x7ff6d66aca54,1280,BigIntAdd
code-creation,Builtin,2,292043,0x7ff6d66acf74,1184,BigIntSubtractNoThrow
code-creation,Builtin,2,292058,0x7ff6d66ad434,1280,BigIntSubtract
code-creation,Builtin,2,292072,0x7ff6d66ad954,284,BigIntUnaryMinus
code-creation,Builtin,2,292086,0x7ff6d66ada74,1360,ToString
code-creation,Builtin,2,292100,0x7ff6d66adfd4,156,StringPrototypeToString
code-creation,Builtin,2,292114,0x7ff6d66ae074,156,StringPrototypeValueOf
code-creation,Builtin,2,292134,0x7ff6d66ae114,2480,StringToList
code-creation,Builtin,2,292148,0x7ff6d66aead4,1012,StringPrototypeCharAt
code-creation,Builtin,2,292163,0x7ff6d66aeed4,700,StringPrototypeCharCodeAt
code-creation,Builtin,2,292177,0x7ff6d66af194,1288,StringPrototypeCodePointAt
code-creation,Builtin,2,292192,0x7ff6d66af6b4,400,StringPrototypeConcat
code-creation,Builtin,2,292206,0x7ff6d66af854,992,StringConstructor
code-creation,Builtin,2,292221,0x7ff6d66afc54,1436,StringAddConvertLeft
code-creation,Builtin,2,292235,0x7ff6d66b01f4,1464,StringAddConvertRight
code-creation,Builtin,2,292249,0x7ff6d66b07b4,816,StringCharAt
code-creation,Builtin,2,292263,0x7ff6d66b0af4,16,FastNewClosureBaseline
code-creation,Builtin,2,292278,0x7ff6d66b0b14,196,FastNewFunctionContextEval
code-creation,Builtin,2,292292,0x7ff6d66b0bf4,196,FastNewFunctionContextFunction
code-creation,Builtin,2,292307,0x7ff6d66b0cd4,248,CreateRegExpLiteral
code-creation,Builtin,2,292321,0x7ff6d66b0dd4,1060,CreateShallowArrayLiteral
code-creation,Builtin,2,292336,0x7ff6d66b1214,504,CreateEmptyArrayLiteral
code-creation,Builtin,2,292350,0x7ff6d66b1414,1736,CreateShallowObjectLiteral
code-creation,Builtin,2,292365,0x7ff6d66b1af4,384,ObjectConstructor
code-creation,Builtin,2,292379,0x7ff6d66b1c94,176,CreateEmptyLiteralObject
code-creation,Builtin,2,292394,0x7ff6d66b1d54,536,NumberConstructor
code-creation,Builtin,2,292408,0x7ff6d66b1f74,64,GenericLazyDeoptContinuation
code-creation,Builtin,2,292423,0x7ff6d66b1fd4,64,StringToNumber
code-creation,Builtin,2,292437,0x7ff6d66b2034,184,NonNumberToNumber
code-creation,Builtin,2,292451,0x7ff6d66b20f4,240,NonNumberToNumeric
code-creation,Builtin,2,292465,0x7ff6d66b21f4,36,ToNumeric
code-creation,Builtin,2,292479,0x7ff6d66b2234,1184,NumberToString
code-creation,Builtin,2,292493,0x7ff6d66b26f4,92,ToBoolean
code-creation,Builtin,2,292507,0x7ff6d66b2754,96,ToBooleanForBaselineJump
code-creation,Builtin,2,292521,0x7ff6d66b27d4,728,ToLength
code-creation,Builtin,2,292535,0x7ff6d66b2ab4,1312,ToName
code-creation,Builtin,2,292549,0x7ff6d66b2ff4,756,ToObject
code-creation,Builtin,2,292563,0x7ff6d66b32f4,208,NonPrimitiveToPrimitive_Default
code-creation,Builtin,2,292578,0x7ff6d66b33d4,208,NonPrimitiveToPrimitive_Number
code-creation,Builtin,2,292592,0x7ff6d66b34b4,208,NonPrimitiveToPrimitive_String
code-creation,Builtin,2,292607,0x7ff6d66b3594,288,OrdinaryToPrimitive_Number
code-creation,Builtin,2,292622,0x7ff6d66b36d4,288,OrdinaryToPrimitive_String
code-creation,Builtin,2,292636,0x7ff6d66b3814,216,FastConsoleAssert
code-creation,Builtin,2,292650,0x7ff6d66b38f4,160,DataViewPrototypeGetBuffer
code-creation,Builtin,2,292665,0x7ff6d66b39b4,336,DataViewPrototypeGetByteLength
code-creation,Builtin,2,292680,0x7ff6d66b3b14,336,DataViewPrototypeGetByteOffset
code-creation,Builtin,2,292694,0x7ff6d66b3c74,572,DataViewPrototypeGetUint8
code-creation,Builtin,2,292709,0x7ff6d66b3eb4,572,DataViewPrototypeGetInt8
code-creation,Builtin,2,292723,0x7ff6d66b40f4,644,DataViewPrototypeGetUint16
code-creation,Builtin,2,292738,0x7ff6d66b4394,644,DataViewPrototypeGetInt16
code-creation,Builtin,2,292752,0x7ff6d66b4634,808,DataViewPrototypeGetUint32
code-creation,Builtin,2,292767,0x7ff6d66b4974,684,DataViewPrototypeGetInt32
code-creation,Builtin,2,292781,0x7ff6d66b4c34,848,DataViewPrototypeGetFloat32
code-creation,Builtin,2,292796,0x7ff6d66b4f94,912,DataViewPrototypeGetFloat64
code-creation,Builtin,2,292810,0x7ff6d66b5334,984,DataViewPrototypeGetBigUint64
code-creation,Builtin,2,292827,0x7ff6d66b5714,1004,DataViewPrototypeGetBigInt64
code-creation,Builtin,2,292844,0x7ff6d66b5b14,928,DataViewPrototypeSetUint8
code-creation,Builtin,2,292859,0x7ff6d66b5ed4,928,DataViewPrototypeSetInt8
code-creation,Builtin,2,292873,0x7ff6d66b6294,1028,DataViewPrototypeSetUint16
code-creation,Builtin,2,292888,0x7ff6d66b66b4,1028,DataViewPrototypeSetInt16
code-creation,Builtin,2,292903,0x7ff6d66b6ad4,1064,DataViewPrototypeSetUint32
code-creation,Builtin,2,292917,0x7ff6d66b6f14,1064,DataViewPrototypeSetInt32
code-creation,Builtin,2,292932,0x7ff6d66b7354,1032,DataViewPrototypeSetFloat32
code-creation,Builtin,2,292946,0x7ff6d66b7774,1096,DataViewPrototypeSetFloat64
code-creation,Builtin,2,292961,0x7ff6d66b7bd4,944,DataViewPrototypeSetBigUint64
code-creation,Builtin,2,292976,0x7ff6d66b7f94,944,DataViewPrototypeSetBigInt64
code-creation,Builtin,2,292990,0x7ff6d66b8354,828,FinalizationRegistryConstructor
code-creation,Builtin,2,293005,0x7ff6d66b8694,1152,FinalizationRegistryRegister
code-creation,Builtin,2,293020,0x7ff6d66b8b34,648,FinalizationRegistryPrototypeCleanupSome
code-creation,Builtin,2,293035,0x7ff6d66b8dd4,328,FunctionPrototypeHasInstance
code-creation,Builtin,2,293050,0x7ff6d66b8f34,924,FastFunctionPrototypeBind
code-creation,Builtin,2,293064,0x7ff6d66b92d4,88,IncBlockCounter
code-creation,Builtin,2,293078,0x7ff6d66b9334,228,GetTemplateObject
code-creation,Builtin,2,293092,0x7ff6d66b9434,28,BytecodeBudgetInterruptFromCode
code-creation,Builtin,2,293107,0x7ff6d66b9454,92,ForInNext
code-creation,Builtin,2,293124,0x7ff6d66b94b4,128,GetImportMetaObjectBaseline
code-creation,Builtin,2,293140,0x7ff6d66b9554,116,GetIteratorWithFeedback
code-creation,Builtin,2,293154,0x7ff6d66b95d4,100,GetIteratorBaseline
code-creation,Builtin,2,293169,0x7ff6d66b9654,268,CreateAsyncFromSyncIteratorBaseline
code-creation,Builtin,2,293184,0x7ff6d66b9774,1084,CallIteratorWithFeedback
code-creation,Builtin,2,293198,0x7ff6d66b9bb4,288,MathAbs
code-creation,Builtin,2,293212,0x7ff6d66b9cf4,428,MathCeil
code-creation,Builtin,2,293226,0x7ff6d66b9eb4,432,MathFloor
code-creation,Builtin,2,293240,0x7ff6d66ba074,488,MathRound
code-creation,Builtin,2,293254,0x7ff6d66ba274,428,MathTrunc
code-creation,Builtin,2,293268,0x7ff6d66ba434,368,MathPow
code-creation,Builtin,2,293281,0x7ff6d66ba5b4,396,MathMax
code-creation,Builtin,2,293295,0x7ff6d66ba754,404,MathMin
code-creation,Builtin,2,293309,0x7ff6d66ba8f4,320,MathAcos
code-creation,Builtin,2,293323,0x7ff6d66baa54,320,MathAcosh
code-creation,Builtin,2,293336,0x7ff6d66babb4,320,MathAsin
code-creation,Builtin,2,293350,0x7ff6d66bad14,320,MathAsinh
code-creation,Builtin,2,293364,0x7ff6d66bae74,320,MathAtan
code-creation,Builtin,2,293378,0x7ff6d66bafd4,416,MathAtan2
code-creation,Builtin,2,293392,0x7ff6d66bb194,320,MathAtanh
code-creation,Builtin,2,293406,0x7ff6d66bb2f4,320,MathCbrt
code-creation,Builtin,2,293419,0x7ff6d66bb454,168,MathClz32
code-creation,Builtin,2,293433,0x7ff6d66bb514,320,MathCos
code-creation,Builtin,2,293447,0x7ff6d66bb674,320,MathCosh
code-creation,Builtin,2,293461,0x7ff6d66bb7d4,320,MathExp
code-creation,Builtin,2,293475,0x7ff6d66bb934,320,MathExpm1
code-creation,Builtin,2,293488,0x7ff6d66bba94,272,MathFround
code-creation,Builtin,2,293502,0x7ff6d66bbbb4,304,MathImul
code-creation,Builtin,2,293516,0x7ff6d66bbcf4,320,MathLog
code-creation,Builtin,2,293530,0x7ff6d66bbe54,320,MathLog1p
code-creation,Builtin,2,293544,0x7ff6d66bbfb4,320,MathLog10
code-creation,Builtin,2,293558,0x7ff6d66bc114,320,MathLog2
code-creation,Builtin,2,293571,0x7ff6d66bc274,320,MathSin
code-creation,Builtin,2,293585,0x7ff6d66bc3d4,180,MathSign
code-creation,Builtin,2,293599,0x7ff6d66bc494,320,MathSinh
code-creation,Builtin,2,293613,0x7ff6d66bc5f4,268,MathSqrt
code-creation,Builtin,2,293627,0x7ff6d66bc714,320,MathTan
code-creation,Builtin,2,293641,0x7ff6d66bc874,320,MathTanh
code-creation,Builtin,2,293654,0x7ff6d66bc9d4,1060,MathHypot
code-creation,Builtin,2,293668,0x7ff6d66bce14,332,MathRandom
code-creation,Builtin,2,293682,0x7ff6d66bcf74,2956,NumberPrototypeToString
code-creation,Builtin,2,293699,0x7ff6d66bdb14,136,NumberIsFinite
code-creation,Builtin,2,293715,0x7ff6d66bdbb4,340,NumberIsInteger
code-creation,Builtin,2,293729,0x7ff6d66bdd14,116,NumberIsNaN
code-creation,Builtin,2,293743,0x7ff6d66bdd94,372,NumberIsSafeInteger
code-creation,Builtin,2,293758,0x7ff6d66bdf14,156,NumberPrototypeValueOf
code-creation,Builtin,2,293772,0x7ff6d66bdfb4,196,NumberParseFloat
code-creation,Builtin,2,293786,0x7ff6d66be094,248,ParseInt
code-creation,Builtin,2,293800,0x7ff6d66be194,84,NumberParseInt
code-creation,Builtin,2,293814,0x7ff6d66be1f4,860,Add
code-creation,Builtin,2,293828,0x7ff6d66be554,424,Subtract
code-creation,Builtin,2,293841,0x7ff6d66be714,608,Multiply
code-creation,Builtin,2,293855,0x7ff6d66be994,532,Divide
code-creation,Builtin,2,293869,0x7ff6d66bebb4,592,Modulus
code-creation,Builtin,2,293883,0x7ff6d66bee14,524,Exponentiate
code-creation,Builtin,2,293896,0x7ff6d66bf034,344,Negate
code-creation,Builtin,2,293910,0x7ff6d66bf194,112,BitwiseNot
code-creation,Builtin,2,293924,0x7ff6d66bf214,112,Decrement
code-creation,Builtin,2,293938,0x7ff6d66bf294,112,Increment
code-creation,Builtin,2,293952,0x7ff6d66bf314,392,ShiftLeft
code-creation,Builtin,2,293966,0x7ff6d66bf4b4,392,ShiftRight
code-creation,Builtin,2,293979,0x7ff6d66bf654,508,ShiftRightLogical
code-creation,Builtin,2,293994,0x7ff6d66bf854,388,BitwiseAnd
code-creation,Builtin,2,294008,0x7ff6d66bf9f4,388,BitwiseOr
code-creation,Builtin,2,294021,0x7ff6d66bfb94,388,BitwiseXor
code-creation,Builtin,2,294035,0x7ff6d66bfd34,796,LessThan
code-creation,Builtin,2,294049,0x7ff6d66c0054,796,LessThanOrEqual
code-creation,Builtin,2,294063,0x7ff6d66c0374,796,GreaterThan
code-creation,Builtin,2,294077,0x7ff6d66c0694,796,GreaterThanOrEqual
code-creation,Builtin,2,294091,0x7ff6d66c09b4,860,Equal
code-creation,Builtin,2,294105,0x7ff6d66c0d14,348,StrictEqual
code-creation,Builtin,2,294119,0x7ff6d66c0e74,3132,ObjectFromEntries
code-creation,Builtin,2,294136,0x7ff6d66c1ab4,756,CreateObjectWithoutProperties
code-creation,Builtin,2,294151,0x7ff6d66c1db4,144,ObjectIsExtensible
code-creation,Builtin,2,294166,0x7ff6d66c1e54,148,ObjectPreventExtensions
code-creation,Builtin,2,294180,0x7ff6d66c1ef4,144,ObjectGetPrototypeOf
code-creation,Builtin,2,294194,0x7ff6d66c1f94,300,ObjectSetPrototypeOf
code-creation,Builtin,2,294209,0x7ff6d66c20d4,80,ObjectPrototypeToString
code-creation,Builtin,2,294223,0x7ff6d66c2134,96,ObjectPrototypeValueOf
code-creation,Builtin,2,294238,0x7ff6d66c21b4,164,ObjectPrototypeToLocaleString
code-creation,Builtin,2,294252,0x7ff6d66c2274,868,FulfillPromise
code-creation,Builtin,2,294266,0x7ff6d66c25f4,988,RejectPromise
code-creation,Builtin,2,294280,0x7ff6d66c29d4,2416,NewPromiseCapability
code-creation,Builtin,2,294295,0x7ff6d66c3354,164,PromiseCapabilityDefaultReject
code-creation,Builtin,2,294309,0x7ff6d66c3414,148,PromiseCapabilityDefaultResolve
code-creation,Builtin,2,294324,0x7ff6d66c34b4,1416,PerformPromiseThen
code-creation,Builtin,2,294339,0x7ff6d66c3a54,648,PromiseReject
code-creation,Builtin,2,294353,0x7ff6d66c3cf4,284,PromiseGetCapabilitiesExecutor
code-creation,Builtin,2,294368,0x7ff6d66c3e14,104,PromiseConstructorLazyDeoptContinuation
code-creation,Builtin,2,294383,0x7ff6d66c3e94,4560,PromiseAll
code-creation,Builtin,2,294397,0x7ff6d66c5074,4880,PromiseAllSettled
code-creation,Builtin,2,294411,0x7ff6d66c6394,1104,PromiseAllResolveElementClosure
code-creation,Builtin,2,294426,0x7ff6d66c67f4,1392,PromiseAllSettledResolveElementClosure
code-creation,Builtin,2,294441,0x7ff6d66c6d74,1400,PromiseAllSettledRejectElementClosure
code-creation,Builtin,2,294456,0x7ff6d66c72f4,1180,PromiseAnyRejectElementClosure
code-creation,Builtin,2,294470,0x7ff6d66c7794,2368,PromiseAny
code-creation,Builtin,2,294484,0x7ff6d66c80f4,2908,PromiseConstructor
code-creation,Builtin,2,294499,0x7ff6d66c8c54,296,PromisePrototypeCatch
code-creation,Builtin,2,294513,0x7ff6d66c8d94,88,PromiseValueThunkFinally
code-creation,Builtin,2,294527,0x7ff6d66c8df4,84,PromiseThrowerFinally
code-creation,Builtin,2,294542,0x7ff6d66c8e54,904,PromiseCatchFinally
code-creation,Builtin,2,294558,0x7ff6d66c91f4,904,PromiseThenFinally
code-creation,Builtin,2,294574,0x7ff6d66c9594,1700,PromisePrototypeFinally
code-creation,Builtin,2,294589,0x7ff6d66c9c54,1336,PromiseRace
code-creation,Builtin,2,294603,0x7ff6d66ca194,268,PromiseFulfillReactionJob
code-creation,Builtin,2,294618,0x7ff6d66ca2b4,364,PromiseRejectReactionJob
code-creation,Builtin,2,294632,0x7ff6d66ca434,156,PromiseResolveTrampoline
code-creation,Builtin,2,294647,0x7ff6d66ca4d4,656,PromiseResolve
code-creation,Builtin,2,294661,0x7ff6d66ca774,712,ResolvePromise
code-creation,Builtin,2,294675,0x7ff6d66caa54,2224,PromisePrototypeThen
code-creation,Builtin,2,294690,0x7ff6d66cb314,1144,PromiseResolveThenableJob
code-creation,Builtin,2,294704,0x7ff6d66cb794,448,ProxyConstructor
code-creation,Builtin,2,294724,0x7ff6d66cb974,1760,ProxyDeleteProperty
code-creation,Builtin,2,294739,0x7ff6d66cc074,2112,ProxyGetProperty
code-creation,Builtin,2,294754,0x7ff6d66cc8d4,1060,ProxyGetPrototypeOf
code-creation,Builtin,2,294768,0x7ff6d66ccd14,1668,ProxyHasProperty
code-creation,Builtin,2,294782,0x7ff6d66cd3b4,760,ProxyIsExtensible
code-creation,Builtin,2,294796,0x7ff6d66cd6b4,800,ProxyPreventExtensions
code-creation,Builtin,2,294811,0x7ff6d66cd9f4,1148,ProxyRevocable
code-creation,Builtin,2,294825,0x7ff6d66cde74,120,ProxyRevoke
code-creation,Builtin,2,294839,0x7ff6d66cdef4,2216,ProxySetProperty
code-creation,Builtin,2,294853,0x7ff6d66ce7b4,1292,ProxySetPrototypeOf
code-creation,Builtin,2,294867,0x7ff6d66cecd4,208,ReflectIsExtensible
code-creation,Builtin,2,294882,0x7ff6d66cedb4,212,ReflectPreventExtensions
code-creation,Builtin,2,294896,0x7ff6d66cee94,188,ReflectGetPrototypeOf
code-creation,Builtin,2,294911,0x7ff6d66cef54,292,ReflectSetPrototypeOf
code-creation,Builtin,2,294925,0x7ff6d66cf094,284,ReflectGet
code-creation,Builtin,2,294939,0x7ff6d66cf1b4,160,ReflectDeleteProperty
code-creation,Builtin,2,294953,0x7ff6d66cf274,148,ReflectHas
code-creation,Builtin,2,294967,0x7ff6d66cf314,5132,RegExpPrototypeExecSlow
code-creation,Builtin,2,294982,0x7ff6d66d0734,5104,RegExpPrototypeExec
code-creation,Builtin,2,294996,0x7ff6d66d1b34,2360,RegExpPrototypeMatchAll
code-creation,Builtin,2,295011,0x7ff6d66d2474,9428,RegExpStringIteratorPrototypeNext
code-creation,Builtin,2,295026,0x7ff6d66d4954,8840,RegExpMatchFast
code-creation,Builtin,2,295040,0x7ff6d66d6bf4,3600,RegExpPrototypeMatch
code-creation,Builtin,2,295054,0x7ff6d66d7a14,6328,RegExpReplace
code-creation,Builtin,2,295068,0x7ff6d66d92d4,524,RegExpPrototypeReplace
code-creation,Builtin,2,295083,0x7ff6d66d94f4,1424,RegExpSearchFast
code-creation,Builtin,2,295097,0x7ff6d66d9a94,1640,RegExpPrototypeSearch
code-creation,Builtin,2,295111,0x7ff6d66da114,200,RegExpPrototypeSourceGetter
code-creation,Builtin,2,295130,0x7ff6d66da1f4,5872,RegExpSplit
code-creation,Builtin,2,295144,0x7ff6d66db8f4,476,RegExpPrototypeSplit
code-creation,Builtin,2,295159,0x7ff6d66dbad4,2252,RegExpPrototypeTest
code-creation,Builtin,2,295173,0x7ff6d66dc3b4,1360,RegExpPrototypeTestFast
code-creation,Builtin,2,295188,0x7ff6d66dc914,228,RegExpPrototypeGlobalGetter
code-creation,Builtin,2,295202,0x7ff6d66dca14,244,RegExpPrototypeIgnoreCaseGetter
code-creation,Builtin,2,295217,0x7ff6d66dcb14,244,RegExpPrototypeMultilineGetter
code-creation,Builtin,2,295232,0x7ff6d66dcc14,244,RegExpPrototypeHasIndicesGetter
code-creation,Builtin,2,295246,0x7ff6d66dcd14,244,RegExpPrototypeLinearGetter
code-creation,Builtin,2,295261,0x7ff6d66dce14,244,RegExpPrototypeDotAllGetter
code-creation,Builtin,2,295276,0x7ff6d66dcf14,272,RegExpPrototypeStickyGetter
code-creation,Builtin,2,295290,0x7ff6d66dd034,272,RegExpPrototypeUnicodeGetter
code-creation,Builtin,2,295305,0x7ff6d66dd154,2256,RegExpPrototypeFlagsGetter
code-creation,Builtin,2,295320,0x7ff6d66dda34,1500,StringPrototypeAt
code-creation,Builtin,2,295334,0x7ff6d66de014,3008,StringPrototypeEndsWith
code-creation,Builtin,2,295348,0x7ff6d66debf4,480,CreateHTML
code-creation,Builtin,2,295362,0x7ff6d66dedf4,164,StringPrototypeAnchor
code-creation,Builtin,2,295377,0x7ff6d66deeb4,128,StringPrototypeBig
code-creation,Builtin,2,295393,0x7ff6d66def54,128,StringPrototypeBlink
code-creation,Builtin,2,295409,0x7ff6d66deff4,128,StringPrototypeBold
code-creation,Builtin,2,295424,0x7ff6d66df094,168,StringPrototypeFontcolor
code-creation,Builtin,2,295439,0x7ff6d66df154,168,StringPrototypeFontsize
code-creation,Builtin,2,295453,0x7ff6d66df214,128,StringPrototypeFixed
code-creation,Builtin,2,295468,0x7ff6d66df2b4,128,StringPrototypeItalics
code-creation,Builtin,2,295482,0x7ff6d66df354,168,StringPrototypeLink
code-creation,Builtin,2,295496,0x7ff6d66df414,128,StringPrototypeSmall
code-creation,Builtin,2,295511,0x7ff6d66df4b4,128,StringPrototypeStrike
code-creation,Builtin,2,295525,0x7ff6d66df554,128,StringPrototypeSub
code-creation,Builtin,2,295539,0x7ff6d66df5f4,128,StringPrototypeSup
code-creation,Builtin,2,295554,0x7ff6d66df694,1028,StringPrototypeIncludes
code-creation,Builtin,2,295568,0x7ff6d66dfab4,628,StringPrototypeIndexOf
code-creation,Builtin,2,295583,0x7ff6d66dfd34,344,StringPrototypeIterator
code-creation,Builtin,2,295597,0x7ff6d66dfe94,2024,StringIteratorPrototypeNext
code-creation,Builtin,2,295612,0x7ff6d66e0694,1304,StringPrototypeMatch
code-creation,Builtin,2,295626,0x7ff6d66e0bb4,1304,StringPrototypeSearch
code-creation,Builtin,2,295640,0x7ff6d66e10d4,824,StringPrototypePadStart
code-creation,Builtin,2,295655,0x7ff6d66e1414,824,StringPrototypePadEnd
code-creation,Builtin,2,295669,0x7ff6d66e1754,120,StringRepeat
code-creation,Builtin,2,295683,0x7ff6d66e17d4,400,StringPrototypeRepeat
code-creation,Builtin,2,295698,0x7ff6d66e1974,11188,StringPrototypeReplaceAll
code-creation,Builtin,2,295712,0x7ff6d66e4534,3388,StringPrototypeSlice
code-creation,Builtin,2,295727,0x7ff6d66e5274,3028,StringPrototypeStartsWith
code-creation,Builtin,2,295741,0x7ff6d66e5e54,3328,StringPrototypeSubstr
code-creation,Builtin,2,295756,0x7ff6d66e6b74,3260,StringPrototypeSubstring
code-creation,Builtin,2,295770,0x7ff6d66e7834,6916,StringPrototypeTrim
code-creation,Builtin,2,295785,0x7ff6d66e9354,6332,StringPrototypeTrimStart
code-creation,Builtin,2,295799,0x7ff6d66eac14,5836,StringPrototypeTrimEnd
code-creation,Builtin,2,295813,0x7ff6d66ec2f4,160,SymbolPrototypeDescriptionGetter
code-creation,Builtin,2,295828,0x7ff6d66ec3b4,156,SymbolPrototypeToPrimitive
code-creation,Builtin,2,295843,0x7ff6d66ec454,172,SymbolPrototypeToString
code-creation,Builtin,2,295857,0x7ff6d66ec514,156,SymbolPrototypeValueOf
code-creation,Builtin,2,295872,0x7ff6d66ec5b4,832,TypedArrayPrototypeAt
code-creation,Builtin,2,295886,0x7ff6d66ec914,10064,CreateTypedArray
code-creation,Builtin,2,295901,0x7ff6d66ef074,1000,TypedArrayPrototypeEvery
code-creation,Builtin,2,295915,0x7ff6d66ef474,372,TypedArrayPrototypeEntries
code-creation,Builtin,2,295929,0x7ff6d66ef5f4,3512,TypedArrayPrototypeFilter
code-creation,Builtin,2,295944,0x7ff6d66f03b4,996,TypedArrayPrototypeFind
code-creation,Builtin,2,295959,0x7ff6d66f07b4,1004,TypedArrayPrototypeFindIndex
code-creation,Builtin,2,295973,0x7ff6d66f0bb4,428,FindLastAllElementsDetachedContinuation
code-creation,Builtin,2,295988,0x7ff6d66f0d74,1208,TypedArrayPrototypeFindLast
code-creation,Builtin,2,296003,0x7ff6d66f1234,436,FindLastIndexAllElementsDetachedContinuation
code-creation,Builtin,2,296018,0x7ff6d66f13f4,1216,TypedArrayPrototypeFindLastIndex
code-creation,Builtin,2,296033,0x7ff6d66f18d4,864,TypedArrayPrototypeForEach
code-creation,Builtin,2,296048,0x7ff6d66f1c54,2352,TypedArrayFrom
code-creation,Builtin,2,296062,0x7ff6d66f2594,356,TypedArrayPrototypeKeys
code-creation,Builtin,2,296077,0x7ff6d66f2714,1028,TypedArrayOf
code-creation,Builtin,2,296091,0x7ff6d66f2b34,952,TypedArrayPrototypeReduce
code-creation,Builtin,2,296105,0x7ff6d66f2ef4,944,TypedArrayPrototypeReduceRight
code-creation,Builtin,2,296123,0x7ff6d66f32b4,2508,TypedArrayPrototypeSet
code-creation,Builtin,2,296138,0x7ff6d66f3c94,3040,TypedArrayPrototypeSlice
code-creation,Builtin,2,296153,0x7ff6d66f4894,992,TypedArrayPrototypeSome
code-creation,Builtin,2,296167,0x7ff6d66f4c94,1060,TypedArrayMergeSort
code-creation,Builtin,2,296182,0x7ff6d66f50d4,1620,TypedArrayPrototypeSort
code-creation,Builtin,2,296198,0x7ff6d66f5734,2736,TypedArrayPrototypeSubArray
code-creation,Builtin,2,296214,0x7ff6d66f61f4,372,TypedArrayPrototypeValues
code-creation,Builtin,2,296229,0x7ff6d66f6374,952,WeakRefConstructor
code-creation,Builtin,2,296244,0x7ff6d66f6734,184,WeakRefDeref
code-creation,Builtin,2,296258,0x7ff6d66f67f4,680,NewSloppyArgumentsElements
code-creation,Builtin,2,296272,0x7ff6d66f6ab4,296,NewStrictArgumentsElements
code-creation,Builtin,2,296287,0x7ff6d66f6bf4,320,NewRestArgumentsElements
code-creation,Builtin,2,296303,0x7ff6d66f6d54,1388,FastNewSloppyArguments
code-creation,Builtin,2,296317,0x7ff6d66f72d4,524,FastNewStrictArguments
code-creation,Builtin,2,296332,0x7ff6d66f74f4,556,FastNewRestArguments
code-creation,Builtin,2,296346,0x7ff6d66f7734,676,StringSlowFlatten
code-creation,Builtin,2,296360,0x7ff6d66f79f4,2068,StringIndexOf
code-creation,Builtin,2,296375,0x7ff6d66f8214,4,GenericBuiltinTest_JSAny_0
code-creation,Builtin,2,296389,0x7ff6d66f8234,20,TestHelperPlus1
code-creation,Builtin,2,296403,0x7ff6d66f8254,20,TestHelperPlus2
code-creation,Builtin,2,296417,0x7ff6d66f8274,96,NewSmiBox
code-creation,Builtin,2,296431,0x7ff6d66f82f4,24,ReturnTwoValues
code-creation,Builtin,2,296445,0x7ff6d66f8314,32,Load_FastSmiElements_0
code-creation,Builtin,2,296460,0x7ff6d66f8354,32,Load_FastObjectElements_0
code-creation,Builtin,2,296474,0x7ff6d66f8394,144,Load_FastDoubleElements_0
code-creation,Builtin,2,296489,0x7ff6d66f8434,32,Store_FastSmiElements_0
code-creation,Builtin,2,296503,0x7ff6d66f8474,96,Store_FastObjectElements_0
code-creation,Builtin,2,296518,0x7ff6d66f84f4,48,Store_FastDoubleElements_0
code-creation,Builtin,2,296532,0x7ff6d66f8534,36,Delete_FastSmiElements_0
code-creation,Builtin,2,296547,0x7ff6d66f8574,36,Delete_FastObjectElements_0
code-creation,Builtin,2,296561,0x7ff6d66f85b4,44,Delete_FastDoubleElements_0
code-creation,Builtin,2,296576,0x7ff6d66f85f4,308,SortCompareDefault
code-creation,Builtin,2,296590,0x7ff6d66f8734,92,SortCompareUserFn
code-creation,Builtin,2,296604,0x7ff6d66f8794,8,CanUseSameAccessor_GenericElementsAccessor_0
code-creation,Builtin,2,296619,0x7ff6d66f87b4,312,Copy
code-creation,Builtin,2,296633,0x7ff6d66f88f4,5776,MergeAt
code-creation,Builtin,2,296647,0x7ff6d66f9f94,792,GallopLeft
code-creation,Builtin,2,296661,0x7ff6d66fa2b4,832,GallopRight
code-creation,Builtin,2,296675,0x7ff6d66fa614,3832,ArrayTimSort
code-creation,Builtin,2,296689,0x7ff6d66fb514,2112,ArrayPrototypeSort
code-creation,Builtin,2,296703,0x7ff6d66fbd74,100,WasmInt32ToHeapNumber
code-creation,Builtin,2,296717,0x7ff6d66fbdf4,124,WasmTaggedNonSmiToInt32
code-creation,Builtin,2,296732,0x7ff6d66fbe74,76,WasmTaggedToFloat64
code-creation,Builtin,2,296746,0x7ff6d66fbed4,72,WasmMemoryGrow
code-creation,Builtin,2,296760,0x7ff6d66fbf34,100,WasmTableInit
code-creation,Builtin,2,296774,0x7ff6d66fbfb4,100,WasmTableCopy
code-creation,Builtin,2,296788,0x7ff6d66fc034,84,WasmTableFill
code-creation,Builtin,2,296802,0x7ff6d66fc094,72,WasmTableGrow
code-creation,Builtin,2,296816,0x7ff6d66fc0f4,144,WasmTableGet
code-creation,Builtin,2,296830,0x7ff6d66fc194,236,WasmTableSet
code-creation,Builtin,2,296844,0x7ff6d66fc294,88,WasmRefFunc
code-creation,Builtin,2,296858,0x7ff6d66fc2f4,144,WasmAllocateFixedArray
code-creation,Builtin,2,296872,0x7ff6d66fc394,44,WasmThrow
code-creation,Builtin,2,296886,0x7ff6d66fc3d4,52,WasmRethrow
code-creation,Builtin,2,296900,0x7ff6d66fc414,44,WasmTriggerTierUp
code-creation,Builtin,2,296914,0x7ff6d66fc454,32,WasmStackGuard
code-creation,Builtin,2,296928,0x7ff6d66fc494,32,WasmStackOverflow
code-creation,Builtin,2,296942,0x7ff6d66fc4d4,40,WasmTraceMemory
code-creation,Builtin,2,296956,0x7ff6d66fc514,32,WasmTraceEnter
code-creation,Builtin,2,296970,0x7ff6d66fc554,40,WasmTraceExit
code-creation,Builtin,2,296984,0x7ff6d66fc594,332,WasmAllocateJSArray
code-creation,Builtin,2,296998,0x7ff6d66fc6f4,104,WasmAllocatePair
code-creation,Builtin,2,297012,0x7ff6d66fc774,64,WasmAllocateRtt
code-creation,Builtin,2,297026,0x7ff6d66fc7d4,72,WasmAllocateFreshRtt
code-creation,Builtin,2,297041,0x7ff6d66fc834,124,WasmAllocateStructWithRtt
code-creation,Builtin,2,297057,0x7ff6d66fc8b4,140,WasmAllocateArray_Uninitialized
code-creation,Builtin,2,297074,0x7ff6d66fc954,176,WasmAllocateArray_InitZero
code-creation,Builtin,2,297089,0x7ff6d66fca14,176,WasmAllocateArray_InitNull
code-creation,Builtin,2,297104,0x7ff6d66fcad4,116,WasmArrayCopyWithChecks
code-creation,Builtin,2,297118,0x7ff6d66fcb54,60,WasmArrayCopy
code-creation,Builtin,2,297136,0x7ff6d66fcb94,240,WasmAllocateObjectWrapper
code-creation,Builtin,2,297150,0x7ff6d66fcc94,52,WasmSubtypeCheck
code-creation,Builtin,2,297165,0x7ff6d66fccd4,8,WasmInt32ToNumber
code-creation,Builtin,2,297179,0x7ff6d66fccf4,116,WasmUint32ToNumber
code-creation,Builtin,2,297193,0x7ff6d66fcd74,144,UintPtr53ToNumber
code-creation,Builtin,2,297207,0x7ff6d66fce14,96,WasmAtomicNotify
code-creation,Builtin,2,297221,0x7ff6d66fce94,116,WasmI32AtomicWait64
code-creation,Builtin,2,297235,0x7ff6d66fcf14,116,WasmI64AtomicWait64
code-creation,Builtin,2,297250,0x7ff6d66fcf94,580,WasmGetOwnProperty
code-creation,Builtin,2,297264,0x7ff6d66fd1f4,40,WasmTrap
code-creation,Builtin,2,297278,0x7ff6d66fd234,16,ThrowWasmTrapUnreachable
code-creation,Builtin,2,297292,0x7ff6d66fd254,16,ThrowWasmTrapMemOutOfBounds
code-creation,Builtin,2,297307,0x7ff6d66fd274,16,ThrowWasmTrapUnalignedAccess
code-creation,Builtin,2,297321,0x7ff6d66fd294,16,ThrowWasmTrapDivByZero
code-creation,Builtin,2,297336,0x7ff6d66fd2b4,16,ThrowWasmTrapDivUnrepresentable
code-creation,Builtin,2,297351,0x7ff6d66fd2d4,16,ThrowWasmTrapRemByZero
code-creation,Builtin,2,297365,0x7ff6d66fd2f4,16,ThrowWasmTrapFloatUnrepresentable
code-creation,Builtin,2,297380,0x7ff6d66fd314,16,ThrowWasmTrapFuncSigMismatch
code-creation,Builtin,2,297394,0x7ff6d66fd334,16,ThrowWasmTrapDataSegmentDropped
code-creation,Builtin,2,297409,0x7ff6d66fd354,16,ThrowWasmTrapElemSegmentDropped
code-creation,Builtin,2,297424,0x7ff6d66fd374,16,ThrowWasmTrapTableOutOfBounds
code-creation,Builtin,2,297438,0x7ff6d66fd394,16,ThrowWasmTrapRethrowNull
code-creation,Builtin,2,297453,0x7ff6d66fd3b4,16,ThrowWasmTrapNullDereference
code-creation,Builtin,2,297467,0x7ff6d66fd3d4,16,ThrowWasmTrapIllegalCast
code-creation,Builtin,2,297482,0x7ff6d66fd3f4,16,ThrowWasmTrapArrayOutOfBounds
code-creation,Builtin,2,297496,0x7ff6d66fd414,16,ThrowWasmTrapArrayTooLarge
code-creation,Builtin,2,297511,0x7ff6d66fd434,172,LoadJoinElement_GenericElementsAccessor_0
code-creation,Builtin,2,297526,0x7ff6d66fd4f4,24,LoadJoinTypedElement_Int32Elements_0
code-creation,Builtin,2,297541,0x7ff6d66fd514,116,LoadJoinTypedElement_Float32Elements_0
code-creation,Builtin,2,297556,0x7ff6d66fd594,112,LoadJoinTypedElement_Float64Elements_0
code-creation,Builtin,2,297571,0x7ff6d66fd614,24,LoadJoinTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,297586,0x7ff6d66fd634,220,LoadJoinTypedElement_BigUint64Elements_0
code-creation,Builtin,2,297601,0x7ff6d66fd714,248,LoadJoinTypedElement_BigInt64Elements_0
code-creation,Builtin,2,297616,0x7ff6d66fd814,24,LoadJoinTypedElement_Uint8Elements_0
code-creation,Builtin,2,297631,0x7ff6d66fd834,24,LoadJoinTypedElement_Int8Elements_0
code-creation,Builtin,2,297646,0x7ff6d66fd854,24,LoadJoinTypedElement_Uint16Elements_0
code-creation,Builtin,2,297661,0x7ff6d66fd874,24,LoadJoinTypedElement_Int16Elements_0
code-creation,Builtin,2,297676,0x7ff6d66fd894,132,LoadJoinTypedElement_Uint32Elements_0
code-creation,Builtin,2,297695,0x7ff6d66fd934,8,GenericBuiltinTest_Smi_0
code-creation,Builtin,2,297710,0x7ff6d66fd954,32,CanUseSameAccessor_FastDoubleElements_0
code-creation,Builtin,2,297725,0x7ff6d66fd994,32,CanUseSameAccessor_FastSmiElements_0
code-creation,Builtin,2,297740,0x7ff6d66fd9d4,32,CanUseSameAccessor_FastObjectElements_0
code-creation,Builtin,2,297755,0x7ff6d66fda14,2680,Load_GenericElementsAccessor_0
code-creation,Builtin,2,297770,0x7ff6d66fe494,24,Store_GenericElementsAccessor_0
code-creation,Builtin,2,297785,0x7ff6d66fe4b4,36,Delete_GenericElementsAccessor_0
code-creation,Builtin,2,297799,0x7ff6d66fe4f4,24,LoadTypedElement_Int32Elements_0
code-creation,Builtin,2,297814,0x7ff6d66fe514,164,StoreTypedElementNumeric_Int32Elements_0
code-creation,Builtin,2,297831,0x7ff6d66fe5d4,180,StoreTypedElementJSAny_Int32Elements_0
code-creation,Builtin,2,297848,0x7ff6d66fe694,116,LoadTypedElement_Float32Elements_0
code-creation,Builtin,2,297863,0x7ff6d66fe714,32,StoreTypedElementNumeric_Float32Elements_0
code-creation,Builtin,2,297879,0x7ff6d66fe754,156,StoreTypedElementJSAny_Float32Elements_0
code-creation,Builtin,2,297894,0x7ff6d66fe7f4,112,LoadTypedElement_Float64Elements_0
code-creation,Builtin,2,297909,0x7ff6d66fe874,28,StoreTypedElementNumeric_Float64Elements_0
code-creation,Builtin,2,297924,0x7ff6d66fe894,152,StoreTypedElementJSAny_Float64Elements_0
code-creation,Builtin,2,297939,0x7ff6d66fe934,24,LoadTypedElement_Uint8ClampedElements_0
code-creation,Builtin,2,297954,0x7ff6d66fe954,24,StoreTypedElementNumeric_Uint8ClampedElements_0
code-creation,Builtin,2,297969,0x7ff6d66fe974,620,StoreTypedElementJSAny_Uint8ClampedElements_0
code-creation,Builtin,2,297984,0x7ff6d66febf4,220,LoadTypedElement_BigUint64Elements_0
code-creation,Builtin,2,297999,0x7ff6d66fecd4,56,StoreTypedElementNumeric_BigUint64Elements_0
code-creation,Builtin,2,298015,0x7ff6d66fed14,200,StoreTypedElementJSAny_BigUint64Elements_0
code-creation,Builtin,2,298030,0x7ff6d66fedf4,248,LoadTypedElement_BigInt64Elements_0
code-creation,Builtin,2,298045,0x7ff6d66feef4,56,StoreTypedElementNumeric_BigInt64Elements_0
code-creation,Builtin,2,298060,0x7ff6d66fef34,200,StoreTypedElementJSAny_BigInt64Elements_0
code-creation,Builtin,2,298075,0x7ff6d66ff014,24,LoadTypedElement_Uint8Elements_0
code-creation,Builtin,2,298090,0x7ff6d66ff034,24,StoreTypedElementNumeric_Uint8Elements_0
code-creation,Builtin,2,298105,0x7ff6d66ff054,180,StoreTypedElementJSAny_Uint8Elements_0
code-creation,Builtin,2,298123,0x7ff6d66ff114,24,LoadTypedElement_Int8Elements_0
code-creation,Builtin,2,298138,0x7ff6d66ff134,24,StoreTypedElementNumeric_Int8Elements_0
code-creation,Builtin,2,298153,0x7ff6d66ff154,180,StoreTypedElementJSAny_Int8Elements_0
code-creation,Builtin,2,298168,0x7ff6d66ff214,24,LoadTypedElement_Uint16Elements_0
code-creation,Builtin,2,298183,0x7ff6d66ff234,24,StoreTypedElementNumeric_Uint16Elements_0
code-creation,Builtin,2,298198,0x7ff6d66ff254,180,StoreTypedElementJSAny_Uint16Elements_0
code-creation,Builtin,2,298213,0x7ff6d66ff314,24,LoadTypedElement_Int16Elements_0
code-creation,Builtin,2,298228,0x7ff6d66ff334,24,StoreTypedElementNumeric_Int16Elements_0
code-creation,Builtin,2,298243,0x7ff6d66ff354,180,StoreTypedElementJSAny_Int16Elements_0
code-creation,Builtin,2,298258,0x7ff6d66ff414,132,LoadTypedElement_Uint32Elements_0
code-creation,Builtin,2,298273,0x7ff6d66ff4b4,164,StoreTypedElementNumeric_Uint32Elements_0
code-creation,Builtin,2,298288,0x7ff6d66ff574,180,StoreTypedElementJSAny_Uint32Elements_0
code-creation,Builtin,2,298303,0x7ff6d66ff634,12,CollatorConstructor
code-creation,Builtin,2,298317,0x7ff6d66ff654,12,CollatorInternalCompare
code-creation,Builtin,2,298332,0x7ff6d66ff674,12,CollatorPrototypeCompare
code-creation,Builtin,2,298346,0x7ff6d66ff694,12,CollatorSupportedLocalesOf
code-creation,Builtin,2,298361,0x7ff6d66ff6b4,12,CollatorPrototypeResolvedOptions
code-creation,Builtin,2,298376,0x7ff6d66ff6d4,12,DatePrototypeToLocaleDateString
code-creation,Builtin,2,298391,0x7ff6d66ff6f4,12,DatePrototypeToLocaleString
code-creation,Builtin,2,298405,0x7ff6d66ff714,12,DatePrototypeToLocaleTimeString
code-creation,Builtin,2,298420,0x7ff6d66ff734,12,DateTimeFormatConstructor
code-creation,Builtin,2,298434,0x7ff6d66ff754,12,DateTimeFormatInternalFormat
code-creation,Builtin,2,298449,0x7ff6d66ff774,12,DateTimeFormatPrototypeFormat
code-creation,Builtin,2,298464,0x7ff6d66ff794,12,DateTimeFormatPrototypeFormatRange
code-creation,Builtin,2,298479,0x7ff6d66ff7b4,12,DateTimeFormatPrototypeFormatRangeToParts
code-creation,Builtin,2,298494,0x7ff6d66ff7d4,12,DateTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,298509,0x7ff6d66ff7f4,12,DateTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,298524,0x7ff6d66ff814,12,DateTimeFormatSupportedLocalesOf
code-creation,Builtin,2,298540,0x7ff6d66ff834,12,DisplayNamesConstructor
code-creation,Builtin,2,298557,0x7ff6d66ff854,12,DisplayNamesPrototypeOf
code-creation,Builtin,2,298571,0x7ff6d66ff874,12,DisplayNamesPrototypeResolvedOptions
code-creation,Builtin,2,298586,0x7ff6d66ff894,12,DisplayNamesSupportedLocalesOf
code-creation,Builtin,2,298601,0x7ff6d66ff8b4,12,IntlGetCanonicalLocales
code-creation,Builtin,2,298615,0x7ff6d66ff8d4,12,ListFormatConstructor
code-creation,Builtin,2,298630,0x7ff6d66ff8f4,224,ListFormatPrototypeFormat
code-creation,Builtin,2,298644,0x7ff6d66ff9f4,224,ListFormatPrototypeFormatToParts
code-creation,Builtin,2,298659,0x7ff6d66ffaf4,12,ListFormatPrototypeResolvedOptions
code-creation,Builtin,2,298674,0x7ff6d66ffb14,12,ListFormatSupportedLocalesOf
code-creation,Builtin,2,298689,0x7ff6d66ffb34,12,LocaleConstructor
code-creation,Builtin,2,298703,0x7ff6d66ffb54,12,LocalePrototypeBaseName
code-creation,Builtin,2,298717,0x7ff6d66ffb74,12,LocalePrototypeCalendar
code-creation,Builtin,2,298732,0x7ff6d66ffb94,12,LocalePrototypeCalendars
code-creation,Builtin,2,298746,0x7ff6d66ffbb4,12,LocalePrototypeCaseFirst
code-creation,Builtin,2,298760,0x7ff6d66ffbd4,12,LocalePrototypeCollation
code-creation,Builtin,2,298775,0x7ff6d66ffbf4,12,LocalePrototypeCollations
code-creation,Builtin,2,298789,0x7ff6d66ffc14,12,LocalePrototypeHourCycle
code-creation,Builtin,2,298804,0x7ff6d66ffc34,12,LocalePrototypeHourCycles
code-creation,Builtin,2,298818,0x7ff6d66ffc54,12,LocalePrototypeLanguage
code-creation,Builtin,2,298833,0x7ff6d66ffc74,12,LocalePrototypeMaximize
code-creation,Builtin,2,298847,0x7ff6d66ffc94,12,LocalePrototypeMinimize
code-creation,Builtin,2,298861,0x7ff6d66ffcb4,12,LocalePrototypeNumeric
code-creation,Builtin,2,298876,0x7ff6d66ffcd4,12,LocalePrototypeNumberingSystem
code-creation,Builtin,2,298890,0x7ff6d66ffcf4,12,LocalePrototypeNumberingSystems
code-creation,Builtin,2,298905,0x7ff6d66ffd14,12,LocalePrototypeRegion
code-creation,Builtin,2,298920,0x7ff6d66ffd34,12,LocalePrototypeScript
code-creation,Builtin,2,298934,0x7ff6d66ffd54,12,LocalePrototypeTextInfo
code-creation,Builtin,2,298948,0x7ff6d66ffd74,12,LocalePrototypeTimeZones
code-creation,Builtin,2,298963,0x7ff6d66ffd94,12,LocalePrototypeToString
code-creation,Builtin,2,298977,0x7ff6d66ffdb4,12,LocalePrototypeWeekInfo
code-creation,Builtin,2,298992,0x7ff6d66ffdd4,12,NumberFormatConstructor
code-creation,Builtin,2,299006,0x7ff6d66ffdf4,12,NumberFormatInternalFormatNumber
code-creation,Builtin,2,299021,0x7ff6d66ffe14,12,NumberFormatPrototypeFormatNumber
code-creation,Builtin,2,299035,0x7ff6d66ffe34,12,NumberFormatPrototypeFormatToParts
code-creation,Builtin,2,299050,0x7ff6d66ffe54,12,NumberFormatPrototypeResolvedOptions
code-creation,Builtin,2,299065,0x7ff6d66ffe74,12,NumberFormatSupportedLocalesOf
code-creation,Builtin,2,299080,0x7ff6d66ffe94,12,PluralRulesConstructor
code-creation,Builtin,2,299094,0x7ff6d66ffeb4,12,PluralRulesPrototypeResolvedOptions
code-creation,Builtin,2,299109,0x7ff6d66ffed4,12,PluralRulesPrototypeSelect
code-creation,Builtin,2,299127,0x7ff6d66ffef4,12,PluralRulesSupportedLocalesOf
code-creation,Builtin,2,299142,0x7ff6d66fff14,12,RelativeTimeFormatConstructor
code-creation,Builtin,2,299157,0x7ff6d66fff34,12,RelativeTimeFormatPrototypeFormat
code-creation,Builtin,2,299171,0x7ff6d66fff54,12,RelativeTimeFormatPrototypeFormatToParts
code-creation,Builtin,2,299187,0x7ff6d66fff74,12,RelativeTimeFormatPrototypeResolvedOptions
code-creation,Builtin,2,299202,0x7ff6d66fff94,12,RelativeTimeFormatSupportedLocalesOf
code-creation,Builtin,2,299217,0x7ff6d66fffb4,12,SegmenterConstructor
code-creation,Builtin,2,299231,0x7ff6d66fffd4,12,SegmenterPrototypeResolvedOptions
code-creation,Builtin,2,299246,0x7ff6d66ffff4,12,SegmenterPrototypeSegment
code-creation,Builtin,2,299260,0x7ff6d6700014,12,SegmenterSupportedLocalesOf
code-creation,Builtin,2,299275,0x7ff6d6700034,12,SegmentIteratorPrototypeNext
code-creation,Builtin,2,299289,0x7ff6d6700054,12,SegmentsPrototypeContaining
code-creation,Builtin,2,299304,0x7ff6d6700074,12,SegmentsPrototypeIterator
code-creation,Builtin,2,299321,0x7ff6d6700094,12,StringPrototypeNormalizeIntl
code-creation,Builtin,2,299337,0x7ff6d67000b4,12,StringPrototypeToLocaleLowerCase
code-creation,Builtin,2,299352,0x7ff6d67000d4,12,StringPrototypeToLocaleUpperCase
code-creation,Builtin,2,299367,0x7ff6d67000f4,200,StringPrototypeToLowerCaseIntl
code-creation,Builtin,2,299382,0x7ff6d67001d4,12,StringPrototypeToUpperCaseIntl
code-creation,Builtin,2,299401,0x7ff6d67001f4,636,StringToLowerCaseIntl
code-creation,Builtin,2,299416,0x7ff6d6700474,12,V8BreakIteratorConstructor
code-creation,Builtin,2,299431,0x7ff6d6700494,12,V8BreakIteratorInternalAdoptText
code-creation,Builtin,2,299445,0x7ff6d67004b4,12,V8BreakIteratorInternalBreakType
code-creation,Builtin,2,299460,0x7ff6d67004d4,12,V8BreakIteratorInternalCurrent
code-creation,Builtin,2,299475,0x7ff6d67004f4,12,V8BreakIteratorInternalFirst
code-creation,Builtin,2,299489,0x7ff6d6700514,12,V8BreakIteratorInternalNext
code-creation,Builtin,2,299504,0x7ff6d6700534,12,V8BreakIteratorPrototypeAdoptText
code-creation,Builtin,2,299519,0x7ff6d6700554,12,V8BreakIteratorPrototypeBreakType
code-creation,Builtin,2,299533,0x7ff6d6700574,12,V8BreakIteratorPrototypeCurrent
code-creation,Builtin,2,299548,0x7ff6d6700594,12,V8BreakIteratorPrototypeFirst
code-creation,Builtin,2,299563,0x7ff6d67005b4,12,V8BreakIteratorPrototypeNext
code-creation,Builtin,2,299577,0x7ff6d67005d4,12,V8BreakIteratorPrototypeResolvedOptions
code-creation,Builtin,2,299592,0x7ff6d67005f4,12,V8BreakIteratorSupportedLocalesOf
code-creation,BytecodeHandler,0,299611,0x7ff6d6700614,24,Wide
code-creation,BytecodeHandler,0,299626,0x7ff6d6700634,24,ExtraWide
code-creation,BytecodeHandler,0,299640,0x7ff6d6700654,104,DebugBreakWide
code-creation,BytecodeHandler,0,299655,0x7ff6d67006d4,104,DebugBreakExtraWide
code-creation,BytecodeHandler,0,299670,0x7ff6d6700754,164,DebugBreak0
code-creation,BytecodeHandler,0,299684,0x7ff6d6700814,104,DebugBreak1
code-creation,BytecodeHandler,0,299699,0x7ff6d6700894,104,DebugBreak2
code-creation,BytecodeHandler,0,299713,0x7ff6d6700914,104,DebugBreak3
code-creation,BytecodeHandler,0,299728,0x7ff6d6700994,104,DebugBreak4
code-creation,BytecodeHandler,0,299742,0x7ff6d6700a14,104,DebugBreak5
code-creation,BytecodeHandler,0,299756,0x7ff6d6700a94,104,DebugBreak6
code-creation,BytecodeHandler,0,299771,0x7ff6d6700b14,32,Ldar
code-creation,BytecodeHandler,0,299785,0x7ff6d6700b54,68,LdaZero
code-creation,BytecodeHandler,0,299799,0x7ff6d6700bb4,76,LdaSmi
code-creation,BytecodeHandler,0,299814,0x7ff6d6700c14,68,LdaUndefined
code-creation,BytecodeHandler,0,299828,0x7ff6d6700c74,68,LdaNull
code-creation,BytecodeHandler,0,299842,0x7ff6d6700cd4,68,LdaTheHole
code-creation,BytecodeHandler,0,299856,0x7ff6d6700d34,20,LdaTrue
code-creation,BytecodeHandler,0,299871,0x7ff6d6700d54,20,LdaFalse
code-creation,BytecodeHandler,0,299885,0x7ff6d6700d74,76,LdaConstant
code-creation,BytecodeHandler,0,299899,0x7ff6d6700dd4,132,LdaContextSlot
code-creation,BytecodeHandler,0,299914,0x7ff6d6700e74,132,LdaImmutableContextSlot
code-creation,BytecodeHandler,0,299929,0x7ff6d6700f14,88,LdaCurrentContextSlot
code-creation,BytecodeHandler,0,299943,0x7ff6d6700f74,88,LdaImmutableCurrentContextSlot
code-creation,BytecodeHandler,0,299959,0x7ff6d6700fd4,32,Star
code-creation,BytecodeHandler,0,299973,0x7ff6d6701014,40,Mov
code-creation,BytecodeHandler,0,299987,0x7ff6d6701054,40,PushContext
code-creation,BytecodeHandler,0,300001,0x7ff6d6701094,36,PopContext
code-creation,BytecodeHandler,0,300015,0x7ff6d67010d4,48,TestReferenceEqual
code-creation,BytecodeHandler,0,300030,0x7ff6d6701114,52,TestUndetectable
code-creation,BytecodeHandler,0,300044,0x7ff6d6701154,36,TestNull
code-creation,BytecodeHandler,0,300059,0x7ff6d6701194,36,TestUndefined
code-creation,BytecodeHandler,0,300073,0x7ff6d67011d4,336,TestTypeOf
code-creation,BytecodeHandler,0,300087,0x7ff6d6701334,6036,LdaGlobal
code-creation,BytecodeHandler,0,300102,0x7ff6d6702ad4,4536,LdaGlobalInsideTypeof
code-creation,BytecodeHandler,0,300116,0x7ff6d6703c94,168,StaGlobal
code-creation,BytecodeHandler,0,300135,0x7ff6d6703d54,160,StaContextSlot
code-creation,BytecodeHandler,0,300222,0x7ff6d6703e14,116,StaCurrentContextSlot
code-creation,BytecodeHandler,0,300266,0x7ff6d6703e94,124,LdaLookupSlot
code-creation,BytecodeHandler,0,300292,0x7ff6d6703f14,240,LdaLookupContextSlot
code-creation,BytecodeHandler,0,300311,0x7ff6d6704014,4776,LdaLookupGlobalSlot
code-creation,BytecodeHandler,0,300330,0x7ff6d67052d4,124,LdaLookupSlotInsideTypeof
code-creation,BytecodeHandler,0,300349,0x7ff6d6705354,240,LdaLookupContextSlotInsideTypeof
code-creation,BytecodeHandler,0,300368,0x7ff6d6705454,4740,LdaLookupGlobalSlotInsideTypeof
code-creation,BytecodeHandler,0,300387,0x7ff6d67066f4,220,StaLookupSlot
code-creation,BytecodeHandler,0,300406,0x7ff6d67067d4,5216,LdaNamedProperty
code-creation,BytecodeHandler,0,300425,0x7ff6d6707c54,180,LdaNamedPropertyFromSuper
code-creation,BytecodeHandler,0,300444,0x7ff6d6707d14,212,LdaKeyedProperty
code-creation,BytecodeHandler,0,300462,0x7ff6d6707df4,160,LdaModuleVariable
code-creation,BytecodeHandler,0,300488,0x7ff6d6707eb4,292,StaModuleVariable
code-creation,BytecodeHandler,0,300506,0x7ff6d6707ff4,172,StaNamedProperty
code-creation,BytecodeHandler,0,300524,0x7ff6d67080b4,172,StaNamedOwnProperty
code-creation,BytecodeHandler,0,300542,0x7ff6d6708174,164,StaKeyedProperty
code-creation,BytecodeHandler,0,300559,0x7ff6d6708234,164,StaInArrayLiteral
code-creation,BytecodeHandler,0,300577,0x7ff6d67082f4,196,StaDataPropertyInLiteral
code-creation,BytecodeHandler,0,300595,0x7ff6d67083d4,160,CollectTypeProfile
code-creation,BytecodeHandler,0,300613,0x7ff6d6708494,1028,Add
code-creation,BytecodeHandler,0,300631,0x7ff6d67088b4,1064,Sub
code-creation,BytecodeHandler,0,300648,0x7ff6d6708cf4,1024,Mul
code-creation,BytecodeHandler,0,300665,0x7ff6d6709114,988,Div
code-creation,BytecodeHandler,0,300682,0x7ff6d67094f4,912,Mod
code-creation,BytecodeHandler,0,300699,0x7ff6d6709894,964,Exp
code-creation,BytecodeHandler,0,300716,0x7ff6d6709c74,876,BitwiseOr
code-creation,BytecodeHandler,0,300732,0x7ff6d6709ff4,888,BitwiseXor
code-creation,BytecodeHandler,0,300750,0x7ff6d670a374,888,BitwiseAnd
code-creation,BytecodeHandler,0,300766,0x7ff6d670a6f4,900,ShiftLeft
code-creation,BytecodeHandler,0,300783,0x7ff6d670aa94,900,ShiftRight
code-creation,BytecodeHandler,0,300801,0x7ff6d670ae34,1020,ShiftRightLogical
code-creation,BytecodeHandler,0,300817,0x7ff6d670b234,960,AddSmi
code-creation,BytecodeHandler,0,300834,0x7ff6d670b614,1000,SubSmi
tick,0x7ff81324d664,300851,0,0x0,6
code-creation,BytecodeHandler,0,300885,0x7ff6d670ba14,916,MulSmi
code-creation,BytecodeHandler,0,300908,0x7ff6d670bdb4,920,DivSmi
code-creation,BytecodeHandler,0,300923,0x7ff6d670c154,816,ModSmi
code-creation,BytecodeHandler,0,300938,0x7ff6d670c494,872,ExpSmi
code-creation,BytecodeHandler,0,300952,0x7ff6d670c814,488,BitwiseOrSmi
code-creation,BytecodeHandler,0,300967,0x7ff6d670ca14,488,BitwiseXorSmi
code-creation,BytecodeHandler,0,300982,0x7ff6d670cc14,488,BitwiseAndSmi
code-creation,BytecodeHandler,0,300997,0x7ff6d670ce14,488,ShiftLeftSmi
code-creation,BytecodeHandler,0,301011,0x7ff6d670d014,488,ShiftRightSmi
code-creation,BytecodeHandler,0,301026,0x7ff6d670d214,640,ShiftRightLogicalSmi
code-creation,BytecodeHandler,0,301041,0x7ff6d670d4b4,656,Inc
code-creation,BytecodeHandler,0,301055,0x7ff6d670d754,656,Dec
code-creation,BytecodeHandler,0,301070,0x7ff6d670d9f4,640,Negate
code-creation,BytecodeHandler,0,301084,0x7ff6d670dc94,480,BitwiseNot
code-creation,BytecodeHandler,0,301099,0x7ff6d670de94,108,ToBooleanLogicalNot
code-creation,BytecodeHandler,0,301114,0x7ff6d670df14,36,LogicalNot
code-creation,BytecodeHandler,0,301140,0x7ff6d670df54,208,TypeOf
code-creation,BytecodeHandler,0,301163,0x7ff6d670e034,120,DeletePropertyStrict
code-creation,BytecodeHandler,0,301179,0x7ff6d670e0b4,112,DeletePropertySloppy
code-creation,BytecodeHandler,0,301194,0x7ff6d670e134,40,GetSuperConstructor
code-creation,BytecodeHandler,0,301209,0x7ff6d670e174,1132,CallAnyReceiver
code-creation,BytecodeHandler,0,301224,0x7ff6d670e5f4,1132,CallProperty
code-creation,BytecodeHandler,0,301238,0x7ff6d670ea74,1012,CallProperty0
code-creation,BytecodeHandler,0,301257,0x7ff6d670ee74,1028,CallProperty1
code-creation,BytecodeHandler,0,301274,0x7ff6d670f294,1040,CallProperty2
code-creation,BytecodeHandler,0,301296,0x7ff6d670f6b4,1016,CallUndefinedReceiver
code-creation,BytecodeHandler,0,301311,0x7ff6d670fab4,1048,CallUndefinedReceiver0
code-creation,BytecodeHandler,0,301326,0x7ff6d670fed4,1020,CallUndefinedReceiver1
code-creation,BytecodeHandler,0,301340,0x7ff6d67102d4,1040,CallUndefinedReceiver2
code-creation,BytecodeHandler,0,301355,0x7ff6d67106f4,1132,CallWithSpread
code-creation,BytecodeHandler,0,301377,0x7ff6d6710b74,124,CallRuntime
code-creation,BytecodeHandler,0,301392,0x7ff6d6710bf4,156,CallRuntimeForPair
code-creation,BytecodeHandler,0,301407,0x7ff6d6710c94,80,CallJSRuntime
code-creation,BytecodeHandler,0,301422,0x7ff6d6710cf4,1236,InvokeIntrinsic
code-creation,BytecodeHandler,0,301436,0x7ff6d67111d4,1020,Construct
code-creation,BytecodeHandler,0,301451,0x7ff6d67115d4,536,ConstructWithSpread
code-creation,BytecodeHandler,0,301466,0x7ff6d67117f4,1936,TestEqual
code-creation,BytecodeHandler,0,301481,0x7ff6d6711f94,1064,TestEqualStrict
code-creation,BytecodeHandler,0,301495,0x7ff6d67123d4,1624,TestLessThan
code-creation,BytecodeHandler,0,301510,0x7ff6d6712a34,1624,TestGreaterThan
code-creation,BytecodeHandler,0,301525,0x7ff6d6713094,1624,TestLessThanOrEqual
code-creation,BytecodeHandler,0,301540,0x7ff6d67136f4,1624,TestGreaterThanOrEqual
code-creation,BytecodeHandler,0,301555,0x7ff6d6713d54,860,TestInstanceOf
code-creation,BytecodeHandler,0,301570,0x7ff6d67140b4,156,TestIn
code-creation,BytecodeHandler,0,301584,0x7ff6d6714154,112,ToName
code-creation,BytecodeHandler,0,301599,0x7ff6d67141d4,212,ToNumber
code-creation,BytecodeHandler,0,301613,0x7ff6d67142b4,232,ToNumeric
code-creation,BytecodeHandler,0,301628,0x7ff6d67143b4,112,ToObject
code-creation,BytecodeHandler,0,301642,0x7ff6d6714434,116,ToString
code-creation,BytecodeHandler,0,301657,0x7ff6d67144b4,400,CreateRegExpLiteral
code-creation,BytecodeHandler,0,301672,0x7ff6d6714654,1468,CreateArrayLiteral
code-creation,BytecodeHandler,0,301687,0x7ff6d6714c14,92,CreateArrayFromIterable
code-creation,BytecodeHandler,0,301702,0x7ff6d6714c74,788,CreateEmptyArrayLiteral
code-creation,BytecodeHandler,0,301717,0x7ff6d6714f94,2140,CreateObjectLiteral
code-creation,BytecodeHandler,0,301732,0x7ff6d67157f4,224,CreateEmptyObjectLiteral
code-creation,BytecodeHandler,0,301748,0x7ff6d67158f4,168,CloneObject
code-creation,BytecodeHandler,0,301762,0x7ff6d67159b4,212,GetTemplateObject
code-creation,BytecodeHandler,0,301777,0x7ff6d6715a94,328,CreateClosure
code-creation,BytecodeHandler,0,301792,0x7ff6d6715bf4,120,CreateBlockContext
code-creation,BytecodeHandler,0,301807,0x7ff6d6715c74,132,CreateCatchContext
code-creation,BytecodeHandler,0,301822,0x7ff6d6715d14,256,CreateFunctionContext
code-creation,BytecodeHandler,0,301837,0x7ff6d6715e34,256,CreateEvalContext
code-creation,BytecodeHandler,0,301852,0x7ff6d6715f54,132,CreateWithContext
code-creation,BytecodeHandler,0,301867,0x7ff6d6715ff4,1568,CreateMappedArguments
code-creation,BytecodeHandler,0,301882,0x7ff6d6716634,592,CreateUnmappedArguments
code-creation,BytecodeHandler,0,301897,0x7ff6d6716894,632,CreateRestParameter
code-creation,BytecodeHandler,0,301912,0x7ff6d6716b14,424,JumpLoop
code-creation,BytecodeHandler,0,301927,0x7ff6d6716cd4,44,Jump
code-creation,BytecodeHandler,0,301941,0x7ff6d6716d14,56,JumpConstant
code-creation,BytecodeHandler,0,301956,0x7ff6d6716d54,80,JumpIfNullConstant
code-creation,BytecodeHandler,0,301971,0x7ff6d6716db4,80,JumpIfNotNullConstant
code-creation,BytecodeHandler,0,301986,0x7ff6d6716e14,80,JumpIfUndefinedConstant
code-creation,BytecodeHandler,0,302001,0x7ff6d6716e74,80,JumpIfNotUndefinedConstant
code-creation,BytecodeHandler,0,302016,0x7ff6d6716ed4,84,JumpIfUndefinedOrNullConstant
code-creation,BytecodeHandler,0,302031,0x7ff6d6716f34,80,JumpIfTrueConstant
code-creation,BytecodeHandler,0,302046,0x7ff6d6716f94,80,JumpIfFalseConstant
code-creation,BytecodeHandler,0,302061,0x7ff6d6716ff4,88,JumpIfJSReceiverConstant
code-creation,BytecodeHandler,0,302076,0x7ff6d6717054,152,JumpIfToBooleanTrueConstant
code-creation,BytecodeHandler,0,302094,0x7ff6d67170f4,152,JumpIfToBooleanFalseConstant
code-creation,BytecodeHandler,0,302112,0x7ff6d6717194,136,JumpIfToBooleanTrue
code-creation,BytecodeHandler,0,302131,0x7ff6d6717234,136,JumpIfToBooleanFalse
code-creation,BytecodeHandler,0,302147,0x7ff6d67172d4,64,JumpIfTrue
code-creation,BytecodeHandler,0,302161,0x7ff6d6717334,64,JumpIfFalse
code-creation,BytecodeHandler,0,302176,0x7ff6d6717394,64,JumpIfNull
code-creation,BytecodeHandler,0,302190,0x7ff6d67173f4,64,JumpIfNotNull
code-creation,BytecodeHandler,0,302205,0x7ff6d6717454,64,JumpIfUndefined
code-creation,BytecodeHandler,0,302220,0x7ff6d67174b4,64,JumpIfNotUndefined
code-creation,BytecodeHandler,0,302235,0x7ff6d6717514,72,JumpIfUndefinedOrNull
code-creation,BytecodeHandler,0,302250,0x7ff6d6717574,76,JumpIfJSReceiver
code-creation,BytecodeHandler,0,302264,0x7ff6d67175d4,108,SwitchOnSmiNoFeedback
code-creation,BytecodeHandler,0,302280,0x7ff6d6717654,464,ForInEnumerate
code-creation,BytecodeHandler,0,302294,0x7ff6d6717834,252,ForInPrepare
code-creation,BytecodeHandler,0,302309,0x7ff6d6717934,60,ForInContinue
code-creation,BytecodeHandler,0,302323,0x7ff6d6717974,256,ForInNext
code-creation,BytecodeHandler,0,302338,0x7ff6d6717a94,48,ForInStep
code-creation,BytecodeHandler,0,302352,0x7ff6d6717ad4,36,SetPendingMessage
code-creation,BytecodeHandler,0,302367,0x7ff6d6717b14,116,Throw
code-creation,BytecodeHandler,0,302382,0x7ff6d6717b94,116,ReThrow
code-creation,BytecodeHandler,0,302396,0x7ff6d6717c14,112,Return
code-creation,BytecodeHandler,0,302411,0x7ff6d6717c94,196,ThrowReferenceErrorIfHole
code-creation,BytecodeHandler,0,302426,0x7ff6d6717d74,132,ThrowSuperNotCalledIfHole
code-creation,BytecodeHandler,0,302441,0x7ff6d6717e14,132,ThrowSuperAlreadyCalledIfNotHole
code-creation,BytecodeHandler,0,302457,0x7ff6d6717eb4,156,ThrowIfNotSuperConstructor
code-creation,BytecodeHandler,0,302472,0x7ff6d6717f54,120,SwitchOnGeneratorState
code-creation,BytecodeHandler,0,302487,0x7ff6d6717fd4,512,SuspendGenerator
code-creation,BytecodeHandler,0,302502,0x7ff6d67181f4,128,ResumeGenerator
code-creation,BytecodeHandler,0,302517,0x7ff6d6718294,152,GetIterator
code-creation,BytecodeHandler,0,302531,0x7ff6d6718334,116,Debugger
code-creation,BytecodeHandler,0,302546,0x7ff6d67183b4,124,IncBlockCounter
code-creation,BytecodeHandler,0,302561,0x7ff6d6718434,56,Abort
code-creation,BytecodeHandler,0,302575,0x7ff6d6718474,32,Star0
code-creation,BytecodeHandler,0,302589,0x7ff6d67184b4,60,Illegal
code-creation,BytecodeHandler,0,302613,0x7ff6d67184f4,108,DebugBreak1.Wide
code-creation,BytecodeHandler,0,302630,0x7ff6d6718574,108,DebugBreak2.Wide
code-creation,BytecodeHandler,0,302645,0x7ff6d67185f4,108,DebugBreak3.Wide
code-creation,BytecodeHandler,0,302660,0x7ff6d6718674,108,DebugBreak4.Wide
code-creation,BytecodeHandler,0,302675,0x7ff6d67186f4,108,DebugBreak5.Wide
code-creation,BytecodeHandler,0,302690,0x7ff6d6718774,108,DebugBreak6.Wide
code-creation,BytecodeHandler,0,302705,0x7ff6d67187f4,32,Ldar.Wide
code-creation,BytecodeHandler,0,302719,0x7ff6d6718834,32,LdaSmi.Wide
code-creation,BytecodeHandler,0,302734,0x7ff6d6718874,32,LdaConstant.Wide
code-creation,BytecodeHandler,0,302749,0x7ff6d67188b4,92,LdaContextSlot.Wide
code-creation,BytecodeHandler,0,302764,0x7ff6d6718914,92,LdaImmutableContextSlot.Wide
code-creation,BytecodeHandler,0,302780,0x7ff6d6718974,48,LdaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,302795,0x7ff6d67189b4,48,LdaImmutableCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,302811,0x7ff6d67189f4,32,Star.Wide
code-creation,BytecodeHandler,0,302825,0x7ff6d6718a34,40,Mov.Wide
code-creation,BytecodeHandler,0,302840,0x7ff6d6718a74,40,PushContext.Wide
code-creation,BytecodeHandler,0,302855,0x7ff6d6718ab4,36,PopContext.Wide
code-creation,BytecodeHandler,0,302870,0x7ff6d6718af4,48,TestReferenceEqual.Wide
code-creation,BytecodeHandler,0,302885,0x7ff6d6718b34,4668,LdaGlobal.Wide
code-creation,BytecodeHandler,0,302900,0x7ff6d6719d74,4604,LdaGlobalInsideTypeof.Wide
code-creation,BytecodeHandler,0,302917,0x7ff6d671af74,172,StaGlobal.Wide
code-creation,BytecodeHandler,0,302934,0x7ff6d671b034,160,StaContextSlot.Wide
code-creation,BytecodeHandler,0,302950,0x7ff6d671b0f4,116,StaCurrentContextSlot.Wide
code-creation,BytecodeHandler,0,302966,0x7ff6d671b174,128,LdaLookupSlot.Wide
code-creation,BytecodeHandler,0,302981,0x7ff6d671b214,244,LdaLookupContextSlot.Wide
code-creation,BytecodeHandler,0,302996,0x7ff6d671b314,4852,LdaLookupGlobalSlot.Wide
code-creation,BytecodeHandler,0,303012,0x7ff6d671c614,128,LdaLookupSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,303027,0x7ff6d671c6b4,244,LdaLookupContextSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,303043,0x7ff6d671c7b4,4812,LdaLookupGlobalSlotInsideTypeof.Wide
code-creation,BytecodeHandler,0,303059,0x7ff6d671da94,220,StaLookupSlot.Wide
code-creation,BytecodeHandler,0,303075,0x7ff6d671db74,5216,LdaNamedProperty.Wide
code-creation,BytecodeHandler,0,303090,0x7ff6d671eff4,188,LdaNamedPropertyFromSuper.Wide
code-creation,BytecodeHandler,0,303106,0x7ff6d671f0b4,160,LdaKeyedProperty.Wide
code-creation,BytecodeHandler,0,303124,0x7ff6d671f174,160,LdaModuleVariable.Wide
code-creation,BytecodeHandler,0,303140,0x7ff6d671f234,300,StaModuleVariable.Wide
code-creation,BytecodeHandler,0,303155,0x7ff6d671f374,176,StaNamedProperty.Wide
code-creation,BytecodeHandler,0,303170,0x7ff6d671f434,176,StaNamedOwnProperty.Wide
code-creation,BytecodeHandler,0,303186,0x7ff6d671f4f4,168,StaKeyedProperty.Wide
code-creation,BytecodeHandler,0,303201,0x7ff6d671f5b4,168,StaInArrayLiteral.Wide
code-creation,BytecodeHandler,0,303216,0x7ff6d671f674,200,StaDataPropertyInLiteral.Wide
code-creation,BytecodeHandler,0,303232,0x7ff6d671f754,164,CollectTypeProfile.Wide
code-creation,BytecodeHandler,0,303247,0x7ff6d671f814,984,Add.Wide
code-creation,BytecodeHandler,0,303261,0x7ff6d671fbf4,1020,Sub.Wide
code-creation,BytecodeHandler,0,303276,0x7ff6d671fff4,972,Mul.Wide
code-creation,BytecodeHandler,0,303290,0x7ff6d67203d4,988,Div.Wide
code-creation,BytecodeHandler,0,303305,0x7ff6d67207b4,916,Mod.Wide
code-creation,BytecodeHandler,0,303320,0x7ff6d6720b54,988,Exp.Wide
code-creation,BytecodeHandler,0,303334,0x7ff6d6720f34,904,BitwiseOr.Wide
code-creation,BytecodeHandler,0,303349,0x7ff6d67212d4,920,BitwiseXor.Wide
code-creation,BytecodeHandler,0,303364,0x7ff6d6721674,920,BitwiseAnd.Wide
code-creation,BytecodeHandler,0,303379,0x7ff6d6721a14,932,ShiftLeft.Wide
code-creation,BytecodeHandler,0,303393,0x7ff6d6721dd4,932,ShiftRight.Wide
code-creation,BytecodeHandler,0,303408,0x7ff6d6722194,1052,ShiftRightLogical.Wide
code-creation,BytecodeHandler,0,303424,0x7ff6d67225b4,916,AddSmi.Wide
code-creation,BytecodeHandler,0,303438,0x7ff6d6722954,960,SubSmi.Wide
code-creation,BytecodeHandler,0,303453,0x7ff6d6722d34,912,MulSmi.Wide
code-creation,BytecodeHandler,0,303467,0x7ff6d67230d4,920,DivSmi.Wide
code-creation,BytecodeHandler,0,303482,0x7ff6d6723474,816,ModSmi.Wide
code-creation,BytecodeHandler,0,303497,0x7ff6d67237b4,872,ExpSmi.Wide
code-creation,BytecodeHandler,0,303511,0x7ff6d6723b34,496,BitwiseOrSmi.Wide
code-creation,BytecodeHandler,0,303526,0x7ff6d6723d34,496,BitwiseXorSmi.Wide
code-creation,BytecodeHandler,0,303542,0x7ff6d6723f34,496,BitwiseAndSmi.Wide
code-creation,BytecodeHandler,0,303557,0x7ff6d6724134,496,ShiftLeftSmi.Wide
code-creation,BytecodeHandler,0,303572,0x7ff6d6724334,496,ShiftRightSmi.Wide
code-creation,BytecodeHandler,0,303587,0x7ff6d6724534,648,ShiftRightLogicalSmi.Wide
code-creation,BytecodeHandler,0,303602,0x7ff6d67247d4,616,Inc.Wide
code-creation,BytecodeHandler,0,303617,0x7ff6d6724a54,616,Dec.Wide
code-creation,BytecodeHandler,0,303631,0x7ff6d6724cd4,648,Negate.Wide
code-creation,BytecodeHandler,0,303646,0x7ff6d6724f74,492,BitwiseNot.Wide
code-creation,BytecodeHandler,0,303661,0x7ff6d6725174,124,DeletePropertyStrict.Wide
code-creation,BytecodeHandler,0,303676,0x7ff6d67251f4,116,DeletePropertySloppy.Wide
code-creation,BytecodeHandler,0,303691,0x7ff6d6725274,40,GetSuperConstructor.Wide
code-creation,BytecodeHandler,0,303707,0x7ff6d67252b4,1136,CallAnyReceiver.Wide
code-creation,BytecodeHandler,0,303722,0x7ff6d6725734,1136,CallProperty.Wide
code-creation,BytecodeHandler,0,303739,0x7ff6d6725bb4,1016,CallProperty0.Wide
code-creation,BytecodeHandler,0,303756,0x7ff6d6725fb4,1032,CallProperty1.Wide
code-creation,BytecodeHandler,0,303772,0x7ff6d67263d4,1044,CallProperty2.Wide
code-creation,BytecodeHandler,0,303787,0x7ff6d67267f4,1020,CallUndefinedReceiver.Wide
code-creation,BytecodeHandler,0,303803,0x7ff6d6726bf4,1052,CallUndefinedReceiver0.Wide
code-creation,BytecodeHandler,0,303818,0x7ff6d6727014,1024,CallUndefinedReceiver1.Wide
code-creation,BytecodeHandler,0,303834,0x7ff6d6727434,1044,CallUndefinedReceiver2.Wide
code-creation,BytecodeHandler,0,303849,0x7ff6d6727854,1136,CallWithSpread.Wide
code-creation,BytecodeHandler,0,303864,0x7ff6d6727cd4,128,CallRuntime.Wide
code-creation,BytecodeHandler,0,303880,0x7ff6d6727d74,168,CallRuntimeForPair.Wide
code-creation,BytecodeHandler,0,303895,0x7ff6d6727e34,84,CallJSRuntime.Wide
code-creation,BytecodeHandler,0,303910,0x7ff6d6727e94,1240,InvokeIntrinsic.Wide
code-creation,BytecodeHandler,0,303925,0x7ff6d6728374,968,Construct.Wide
code-creation,BytecodeHandler,0,303940,0x7ff6d6728754,476,ConstructWithSpread.Wide
code-creation,BytecodeHandler,0,303956,0x7ff6d6728934,1964,TestEqual.Wide
code-creation,BytecodeHandler,0,303970,0x7ff6d67290f4,1068,TestEqualStrict.Wide
code-creation,BytecodeHandler,0,303986,0x7ff6d6729534,1512,TestLessThan.Wide
code-creation,BytecodeHandler,0,304001,0x7ff6d6729b34,1512,TestGreaterThan.Wide
code-creation,BytecodeHandler,0,304016,0x7ff6d672a134,1512,TestLessThanOrEqual.Wide
code-creation,BytecodeHandler,0,304031,0x7ff6d672a734,1512,TestGreaterThanOrEqual.Wide
code-creation,BytecodeHandler,0,304047,0x7ff6d672ad34,864,TestInstanceOf.Wide
code-creation,BytecodeHandler,0,304062,0x7ff6d672b0b4,160,TestIn.Wide
code-creation,BytecodeHandler,0,304076,0x7ff6d672b174,116,ToName.Wide
code-creation,BytecodeHandler,0,304091,0x7ff6d672b1f4,216,ToNumber.Wide
code-creation,BytecodeHandler,0,304106,0x7ff6d672b2d4,236,ToNumeric.Wide
code-creation,BytecodeHandler,0,304123,0x7ff6d672b3d4,116,ToObject.Wide
code-creation,BytecodeHandler,0,304139,0x7ff6d672b454,404,CreateRegExpLiteral.Wide
code-creation,BytecodeHandler,0,304154,0x7ff6d672b5f4,1376,CreateArrayLiteral.Wide
code-creation,BytecodeHandler,0,304170,0x7ff6d672bb74,788,CreateEmptyArrayLiteral.Wide
code-creation,BytecodeHandler,0,304185,0x7ff6d672be94,2040,CreateObjectLiteral.Wide
code-creation,BytecodeHandler,0,304201,0x7ff6d672c694,172,CloneObject.Wide
code-creation,BytecodeHandler,0,304216,0x7ff6d672c754,164,GetTemplateObject.Wide
code-creation,BytecodeHandler,0,304231,0x7ff6d672c814,320,CreateClosure.Wide
code-creation,BytecodeHandler,0,304246,0x7ff6d672c974,124,CreateBlockContext.Wide
code-creation,BytecodeHandler,0,304262,0x7ff6d672c9f4,136,CreateCatchContext.Wide
code-creation,BytecodeHandler,0,304277,0x7ff6d672ca94,256,CreateFunctionContext.Wide
code-creation,BytecodeHandler,0,304292,0x7ff6d672cbb4,256,CreateEvalContext.Wide
code-creation,BytecodeHandler,0,304315,0x7ff6d672ccd4,136,CreateWithContext.Wide
code-creation,BytecodeHandler,0,304331,0x7ff6d672cd74,440,JumpLoop.Wide
code-creation,BytecodeHandler,0,304428,0x7ff6d672cf34,44,Jump.Wide
code-creation,BytecodeHandler,0,304450,0x7ff6d672cf74,56,JumpConstant.Wide
code-creation,BytecodeHandler,0,304466,0x7ff6d672cfb4,80,JumpIfNullConstant.Wide
code-creation,BytecodeHandler,0,304483,0x7ff6d672d014,80,JumpIfNotNullConstant.Wide
code-creation,BytecodeHandler,0,304542,0x7ff6d672d074,80,JumpIfUndefinedConstant.Wide
code-creation,BytecodeHandler,0,304568,0x7ff6d672d0d4,80,JumpIfNotUndefinedConstant.Wide
code-creation,BytecodeHandler,0,304585,0x7ff6d672d134,84,JumpIfUndefinedOrNullConstant.Wide
code-creation,BytecodeHandler,0,304601,0x7ff6d672d194,80,JumpIfTrueConstant.Wide
code-creation,BytecodeHandler,0,304616,0x7ff6d672d1f4,80,JumpIfFalseConstant.Wide
code-creation,BytecodeHandler,0,304631,0x7ff6d672d254,88,JumpIfJSReceiverConstant.Wide
code-creation,BytecodeHandler,0,304647,0x7ff6d672d2b4,152,JumpIfToBooleanTrueConstant.Wide
code-creation,BytecodeHandler,0,304663,0x7ff6d672d354,152,JumpIfToBooleanFalseConstant.Wide
code-creation,BytecodeHandler,0,304683,0x7ff6d672d3f4,136,JumpIfToBooleanTrue.Wide
code-creation,BytecodeHandler,0,304703,0x7ff6d672d494,136,JumpIfToBooleanFalse.Wide
code-creation,BytecodeHandler,0,304719,0x7ff6d672d534,64,JumpIfTrue.Wide
code-creation,BytecodeHandler,0,304734,0x7ff6d672d594,64,JumpIfFalse.Wide
code-creation,BytecodeHandler,0,304749,0x7ff6d672d5f4,64,JumpIfNull.Wide
code-creation,BytecodeHandler,0,304764,0x7ff6d672d654,64,JumpIfNotNull.Wide
code-creation,BytecodeHandler,0,304779,0x7ff6d672d6b4,64,JumpIfUndefined.Wide
code-creation,BytecodeHandler,0,304795,0x7ff6d672d714,64,JumpIfNotUndefined.Wide
code-creation,BytecodeHandler,0,304810,0x7ff6d672d774,72,JumpIfUndefinedOrNull.Wide
code-creation,BytecodeHandler,0,304825,0x7ff6d672d7d4,76,JumpIfJSReceiver.Wide
code-creation,BytecodeHandler,0,304841,0x7ff6d672d834,108,SwitchOnSmiNoFeedback.Wide
code-creation,BytecodeHandler,0,304856,0x7ff6d672d8b4,468,ForInEnumerate.Wide
code-creation,BytecodeHandler,0,304872,0x7ff6d672da94,252,ForInPrepare.Wide
code-creation,BytecodeHandler,0,304887,0x7ff6d672db94,60,ForInContinue.Wide
code-creation,BytecodeHandler,0,304902,0x7ff6d672dbd4,260,ForInNext.Wide
code-creation,BytecodeHandler,0,304917,0x7ff6d672dcf4,48,ForInStep.Wide
code-creation,BytecodeHandler,0,304932,0x7ff6d672dd34,156,ThrowReferenceErrorIfHole.Wide
code-creation,BytecodeHandler,0,304948,0x7ff6d672ddd4,160,ThrowIfNotSuperConstructor.Wide
code-creation,BytecodeHandler,0,304971,0x7ff6d672de94,120,SwitchOnGeneratorState.Wide
code-creation,BytecodeHandler,0,304988,0x7ff6d672df14,516,SuspendGenerator.Wide
code-creation,BytecodeHandler,0,305003,0x7ff6d672e134,128,ResumeGenerator.Wide
code-creation,BytecodeHandler,0,305019,0x7ff6d672e1d4,156,GetIterator.Wide
code-creation,BytecodeHandler,0,305043,0x7ff6d672e274,128,IncBlockCounter.Wide
code-creation,BytecodeHandler,0,305058,0x7ff6d672e314,56,Abort.Wide
code-creation,BytecodeHandler,0,305073,0x7ff6d672e354,108,DebugBreak1.ExtraWide
code-creation,BytecodeHandler,0,305089,0x7ff6d672e3d4,108,DebugBreak2.ExtraWide
code-creation,BytecodeHandler,0,305104,0x7ff6d672e454,108,DebugBreak3.ExtraWide
code-creation,BytecodeHandler,0,305119,0x7ff6d672e4d4,108,DebugBreak4.ExtraWide
code-creation,BytecodeHandler,0,305140,0x7ff6d672e554,108,DebugBreak5.ExtraWide
code-creation,BytecodeHandler,0,305155,0x7ff6d672e5d4,108,DebugBreak6.ExtraWide
code-creation,BytecodeHandler,0,305171,0x7ff6d672e654,32,Ldar.ExtraWide
code-creation,BytecodeHandler,0,305186,0x7ff6d672e694,28,LdaSmi.ExtraWide
code-creation,BytecodeHandler,0,305201,0x7ff6d672e6b4,32,LdaConstant.ExtraWide
code-creation,BytecodeHandler,0,305216,0x7ff6d672e6f4,88,LdaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305232,0x7ff6d672e754,88,LdaImmutableContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305247,0x7ff6d672e7b4,48,LdaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305263,0x7ff6d672e7f4,48,LdaImmutableCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305279,0x7ff6d672e834,28,Star.ExtraWide
code-creation,BytecodeHandler,0,305294,0x7ff6d672e854,40,Mov.ExtraWide
code-creation,BytecodeHandler,0,305309,0x7ff6d672e894,36,PushContext.ExtraWide
code-creation,BytecodeHandler,0,305324,0x7ff6d672e8d4,32,PopContext.ExtraWide
code-creation,BytecodeHandler,0,305339,0x7ff6d672e914,48,TestReferenceEqual.ExtraWide
code-creation,BytecodeHandler,0,305354,0x7ff6d672e954,4656,LdaGlobal.ExtraWide
code-creation,BytecodeHandler,0,305370,0x7ff6d672fb94,4592,LdaGlobalInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,305385,0x7ff6d6730d94,168,StaGlobal.ExtraWide
code-creation,BytecodeHandler,0,305401,0x7ff6d6730e54,156,StaContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305416,0x7ff6d6730ef4,116,StaCurrentContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305432,0x7ff6d6730f74,128,LdaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,305447,0x7ff6d6731014,240,LdaLookupContextSlot.ExtraWide
code-creation,BytecodeHandler,0,305463,0x7ff6d6731114,4836,LdaLookupGlobalSlot.ExtraWide
code-creation,BytecodeHandler,0,305481,0x7ff6d6732414,128,LdaLookupSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,305500,0x7ff6d67324b4,240,LdaLookupContextSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,305517,0x7ff6d67325b4,4800,LdaLookupGlobalSlotInsideTypeof.ExtraWide
code-creation,BytecodeHandler,0,305533,0x7ff6d6733894,220,StaLookupSlot.ExtraWide
code-creation,BytecodeHandler,0,305548,0x7ff6d6733974,5196,LdaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,305564,0x7ff6d6734dd4,184,LdaNamedPropertyFromSuper.ExtraWide
code-creation,BytecodeHandler,0,305580,0x7ff6d6734e94,156,LdaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,305596,0x7ff6d6734f34,160,LdaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,305611,0x7ff6d6734ff4,296,StaModuleVariable.ExtraWide
code-creation,BytecodeHandler,0,305626,0x7ff6d6735134,172,StaNamedProperty.ExtraWide
code-creation,BytecodeHandler,0,305642,0x7ff6d67351f4,172,StaNamedOwnProperty.ExtraWide
code-creation,BytecodeHandler,0,305657,0x7ff6d67352b4,168,StaKeyedProperty.ExtraWide
code-creation,BytecodeHandler,0,305673,0x7ff6d6735374,168,StaInArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,305689,0x7ff6d6735434,196,StaDataPropertyInLiteral.ExtraWide
code-creation,BytecodeHandler,0,305705,0x7ff6d6735514,164,CollectTypeProfile.ExtraWide
code-creation,BytecodeHandler,0,305720,0x7ff6d67355d4,980,Add.ExtraWide
code-creation,BytecodeHandler,0,305735,0x7ff6d67359b4,1016,Sub.ExtraWide
code-creation,BytecodeHandler,0,305750,0x7ff6d6735db4,972,Mul.ExtraWide
code-creation,BytecodeHandler,0,305764,0x7ff6d6736194,988,Div.ExtraWide
code-creation,BytecodeHandler,0,305779,0x7ff6d6736574,916,Mod.ExtraWide
code-creation,BytecodeHandler,0,305794,0x7ff6d6736914,984,Exp.ExtraWide
code-creation,BytecodeHandler,0,305809,0x7ff6d6736cf4,904,BitwiseOr.ExtraWide
code-creation,BytecodeHandler,0,305824,0x7ff6d6737094,916,BitwiseXor.ExtraWide
code-creation,BytecodeHandler,0,305839,0x7ff6d6737434,916,BitwiseAnd.ExtraWide
code-creation,BytecodeHandler,0,305855,0x7ff6d67377d4,928,ShiftLeft.ExtraWide
code-creation,BytecodeHandler,0,305870,0x7ff6d6737b94,928,ShiftRight.ExtraWide
code-creation,BytecodeHandler,0,305885,0x7ff6d6737f54,1048,ShiftRightLogical.ExtraWide
code-creation,BytecodeHandler,0,305901,0x7ff6d6738374,916,AddSmi.ExtraWide
code-creation,BytecodeHandler,0,305916,0x7ff6d6738714,960,SubSmi.ExtraWide
code-creation,BytecodeHandler,0,305931,0x7ff6d6738af4,912,MulSmi.ExtraWide
code-creation,BytecodeHandler,0,305946,0x7ff6d6738e94,916,DivSmi.ExtraWide
code-creation,BytecodeHandler,0,305961,0x7ff6d6739234,816,ModSmi.ExtraWide
code-creation,BytecodeHandler,0,305976,0x7ff6d6739574,872,ExpSmi.ExtraWide
code-creation,BytecodeHandler,0,305991,0x7ff6d67398f4,492,BitwiseOrSmi.ExtraWide
code-creation,BytecodeHandler,0,306006,0x7ff6d6739af4,492,BitwiseXorSmi.ExtraWide
code-creation,BytecodeHandler,0,306022,0x7ff6d6739cf4,492,BitwiseAndSmi.ExtraWide
code-creation,BytecodeHandler,0,306037,0x7ff6d6739ef4,492,ShiftLeftSmi.ExtraWide
code-creation,BytecodeHandler,0,306052,0x7ff6d673a0f4,492,ShiftRightSmi.ExtraWide
code-creation,BytecodeHandler,0,306067,0x7ff6d673a2f4,644,ShiftRightLogicalSmi.ExtraWide
code-creation,BytecodeHandler,0,306083,0x7ff6d673a594,616,Inc.ExtraWide
code-creation,BytecodeHandler,0,306098,0x7ff6d673a814,616,Dec.ExtraWide
code-creation,BytecodeHandler,0,306113,0x7ff6d673aa94,644,Negate.ExtraWide
code-creation,BytecodeHandler,0,306131,0x7ff6d673ad34,488,BitwiseNot.ExtraWide
code-creation,BytecodeHandler,0,306146,0x7ff6d673af34,124,DeletePropertyStrict.ExtraWide
code-creation,BytecodeHandler,0,306162,0x7ff6d673afb4,116,DeletePropertySloppy.ExtraWide
code-creation,BytecodeHandler,0,306178,0x7ff6d673b034,36,GetSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,306194,0x7ff6d673b074,1128,CallAnyReceiver.ExtraWide
code-creation,BytecodeHandler,0,306210,0x7ff6d673b4f4,1128,CallProperty.ExtraWide
code-creation,BytecodeHandler,0,306225,0x7ff6d673b974,1012,CallProperty0.ExtraWide
code-creation,BytecodeHandler,0,306241,0x7ff6d673bd74,1024,CallProperty1.ExtraWide
code-creation,BytecodeHandler,0,306258,0x7ff6d673c194,1036,CallProperty2.ExtraWide
code-creation,BytecodeHandler,0,306275,0x7ff6d673c5b4,1016,CallUndefinedReceiver.ExtraWide
code-creation,BytecodeHandler,0,306292,0x7ff6d673c9b4,1048,CallUndefinedReceiver0.ExtraWide
code-creation,BytecodeHandler,0,306308,0x7ff6d673cdd4,1020,CallUndefinedReceiver1.ExtraWide
code-creation,BytecodeHandler,0,306324,0x7ff6d673d1d4,1040,CallUndefinedReceiver2.ExtraWide
code-creation,BytecodeHandler,0,306339,0x7ff6d673d5f4,1128,CallWithSpread.ExtraWide
code-creation,BytecodeHandler,0,306355,0x7ff6d673da74,128,CallRuntime.ExtraWide
code-creation,BytecodeHandler,0,306370,0x7ff6d673db14,164,CallRuntimeForPair.ExtraWide
code-creation,BytecodeHandler,0,306385,0x7ff6d673dbd4,80,CallJSRuntime.ExtraWide
code-creation,BytecodeHandler,0,306401,0x7ff6d673dc34,1240,InvokeIntrinsic.ExtraWide
code-creation,BytecodeHandler,0,306416,0x7ff6d673e114,964,Construct.ExtraWide
code-creation,BytecodeHandler,0,306431,0x7ff6d673e4f4,472,ConstructWithSpread.ExtraWide
code-creation,BytecodeHandler,0,306447,0x7ff6d673e6d4,1964,TestEqual.ExtraWide
code-creation,BytecodeHandler,0,306462,0x7ff6d673ee94,1068,TestEqualStrict.ExtraWide
code-creation,BytecodeHandler,0,306477,0x7ff6d673f2d4,1508,TestLessThan.ExtraWide
code-creation,BytecodeHandler,0,306493,0x7ff6d673f8d4,1508,TestGreaterThan.ExtraWide
code-creation,BytecodeHandler,0,306508,0x7ff6d673fed4,1508,TestLessThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,306524,0x7ff6d67404d4,1508,TestGreaterThanOrEqual.ExtraWide
code-creation,BytecodeHandler,0,306540,0x7ff6d6740ad4,864,TestInstanceOf.ExtraWide
code-creation,BytecodeHandler,0,306555,0x7ff6d6740e54,156,TestIn.ExtraWide
code-creation,BytecodeHandler,0,306570,0x7ff6d6740ef4,116,ToName.ExtraWide
code-creation,BytecodeHandler,0,306585,0x7ff6d6740f74,216,ToNumber.ExtraWide
code-creation,BytecodeHandler,0,306601,0x7ff6d6741054,236,ToNumeric.ExtraWide
code-creation,BytecodeHandler,0,306616,0x7ff6d6741154,116,ToObject.ExtraWide
code-creation,BytecodeHandler,0,306631,0x7ff6d67411d4,400,CreateRegExpLiteral.ExtraWide
code-creation,BytecodeHandler,0,306646,0x7ff6d6741374,1376,CreateArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,306662,0x7ff6d67418f4,788,CreateEmptyArrayLiteral.ExtraWide
code-creation,BytecodeHandler,0,306678,0x7ff6d6741c14,2040,CreateObjectLiteral.ExtraWide
code-creation,BytecodeHandler,0,306693,0x7ff6d6742414,168,CloneObject.ExtraWide
code-creation,BytecodeHandler,0,306709,0x7ff6d67424d4,160,GetTemplateObject.ExtraWide
code-creation,BytecodeHandler,0,306724,0x7ff6d6742594,320,CreateClosure.ExtraWide
code-creation,BytecodeHandler,0,306740,0x7ff6d67426f4,124,CreateBlockContext.ExtraWide
code-creation,BytecodeHandler,0,306755,0x7ff6d6742774,132,CreateCatchContext.ExtraWide
code-creation,BytecodeHandler,0,306771,0x7ff6d6742814,256,CreateFunctionContext.ExtraWide
code-creation,BytecodeHandler,0,306786,0x7ff6d6742934,256,CreateEvalContext.ExtraWide
code-creation,BytecodeHandler,0,306802,0x7ff6d6742a54,132,CreateWithContext.ExtraWide
code-creation,BytecodeHandler,0,306817,0x7ff6d6742af4,436,JumpLoop.ExtraWide
code-creation,BytecodeHandler,0,306832,0x7ff6d6742cb4,44,Jump.ExtraWide
code-creation,BytecodeHandler,0,306847,0x7ff6d6742cf4,56,JumpConstant.ExtraWide
code-creation,BytecodeHandler,0,306862,0x7ff6d6742d34,76,JumpIfNullConstant.ExtraWide
code-creation,BytecodeHandler,0,306878,0x7ff6d6742d94,76,JumpIfNotNullConstant.ExtraWide
code-creation,BytecodeHandler,0,306893,0x7ff6d6742df4,76,JumpIfUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,306909,0x7ff6d6742e54,76,JumpIfNotUndefinedConstant.ExtraWide
code-creation,BytecodeHandler,0,306925,0x7ff6d6742eb4,84,JumpIfUndefinedOrNullConstant.ExtraWide
code-creation,BytecodeHandler,0,306941,0x7ff6d6742f14,76,JumpIfTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,306956,0x7ff6d6742f74,76,JumpIfFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,306972,0x7ff6d6742fd4,88,JumpIfJSReceiverConstant.ExtraWide
code-creation,BytecodeHandler,0,306988,0x7ff6d6743034,148,JumpIfToBooleanTrueConstant.ExtraWide
code-creation,BytecodeHandler,0,307084,0x7ff6d67430d4,148,JumpIfToBooleanFalseConstant.ExtraWide
code-creation,BytecodeHandler,0,307105,0x7ff6d6743174,136,JumpIfToBooleanTrue.ExtraWide
code-creation,BytecodeHandler,0,307125,0x7ff6d6743214,136,JumpIfToBooleanFalse.ExtraWide
code-creation,BytecodeHandler,0,307141,0x7ff6d67432b4,64,JumpIfTrue.ExtraWide
code-creation,BytecodeHandler,0,307157,0x7ff6d6743314,64,JumpIfFalse.ExtraWide
code-creation,BytecodeHandler,0,307172,0x7ff6d6743374,64,JumpIfNull.ExtraWide
code-creation,BytecodeHandler,0,307188,0x7ff6d67433d4,64,JumpIfNotNull.ExtraWide
code-creation,BytecodeHandler,0,307203,0x7ff6d6743434,64,JumpIfUndefined.ExtraWide
code-creation,BytecodeHandler,0,307219,0x7ff6d6743494,64,JumpIfNotUndefined.ExtraWide
code-creation,BytecodeHandler,0,307234,0x7ff6d67434f4,68,JumpIfUndefinedOrNull.ExtraWide
code-creation,BytecodeHandler,0,307250,0x7ff6d6743554,72,JumpIfJSReceiver.ExtraWide
code-creation,BytecodeHandler,0,307265,0x7ff6d67435b4,108,SwitchOnSmiNoFeedback.ExtraWide
code-creation,BytecodeHandler,0,307281,0x7ff6d6743634,464,ForInEnumerate.ExtraWide
code-creation,BytecodeHandler,0,307297,0x7ff6d6743814,252,ForInPrepare.ExtraWide
code-creation,BytecodeHandler,0,307312,0x7ff6d6743914,56,ForInContinue.ExtraWide
code-creation,BytecodeHandler,0,307327,0x7ff6d6743954,256,ForInNext.ExtraWide
code-creation,BytecodeHandler,0,307342,0x7ff6d6743a74,44,ForInStep.ExtraWide
code-creation,BytecodeHandler,0,307358,0x7ff6d6743ab4,156,ThrowReferenceErrorIfHole.ExtraWide
code-creation,BytecodeHandler,0,307374,0x7ff6d6743b54,160,ThrowIfNotSuperConstructor.ExtraWide
code-creation,BytecodeHandler,0,307391,0x7ff6d6743c14,120,SwitchOnGeneratorState.ExtraWide
code-creation,BytecodeHandler,0,307406,0x7ff6d6743c94,512,SuspendGenerator.ExtraWide
code-creation,BytecodeHandler,0,307422,0x7ff6d6743eb4,124,ResumeGenerator.ExtraWide
code-creation,BytecodeHandler,0,307437,0x7ff6d6743f34,152,GetIterator.ExtraWide
code-creation,BytecodeHandler,0,307453,0x7ff6d6743fd4,124,IncBlockCounter.ExtraWide
code-creation,BytecodeHandler,0,307468,0x7ff6d6744054,56,Abort.ExtraWide
new,MemoryChunk,0x1ea4a340000,262144
new,MemoryChunk,0x52feb40000,262144
new,MemoryChunk,0x39901ac0000,262144
new,MemoryChunk,0x33b76d00000,262144
new,MemoryChunk,0x2f2f3a00000,262144
tick,0x7ff6d63bc51a,315271,0,0x0,3
code-creation,Eval,10,315377,0x2f2f3a0b78e,5, node:internal/main/run_main_module:1:1,0x2f2f3a0b648,~
script-source,99,node:internal/main/run_main_module,'use strict';\x0d\n\x0d\nconst { RegExpPrototypeExec } = primordials;\x0d\n\x0d\nconst {\x0d\n  prepareMainThreadExecution\x0d\n} = require('internal/bootstrap/pre_execution');\x0d\n\x0d\nprepareMainThreadExecution(true);\x0d\n\x0d\nmarkBootstrapComplete();\x0d\n\x0d\n// Necessary to reset RegExp statics before user code runs.\x0d\nRegExpPrototypeExec(/^/\x2C '');\x0d\n\x0d\n// Note: this loads the module through the ESM loader if the module is\x0d\n// determined to be an ES module. This hangs from the CJS module loader\x0d\n// because we currently allow monkey-patching of the module loaders\x0d\n// in the preloaded scripts through require('module').\x0d\n// runMain here might be monkey-patched by users in --require.\x0d\n// XXX: the monkey-patchability here should probably be deprecated.\x0d\nrequire('internal/modules/cjs/loader').Module.runMain(process.argv[1]);\x0d\n
code-source-info,0x2f2f3a0b78e,99,0,791,C0O0C4O791,,
code-creation,Function,10,315509,0x2f2f3a0b84e,76, node:internal/main/run_main_module:1:1,0x2f2f3a0b708,~
code-source-info,0x2f2f3a0b84e,99,0,791,C0O25C5O108C8O108C13O76C18O156C20O156C24O193C27O282C35O282C40O718C43O718C48O756C53O763C58O780C65O784C69O764C75O790,,
code-creation,LazyCompile,10,315984,0x2f2f3a0bade,76,nativeModuleRequire node:internal/bootstrap/loaders:353:29,0x39b87d0d20,~
script-source,9,node:internal/bootstrap/loaders,// This file creates the internal module & binding loaders used by built-in\x0d\n// modules. In contrast\x2C user land modules are loaded using\x0d\n// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\x0d\n// lib/internal/modules/esm/* (ES Modules).\x0d\n//\x0d\n// This file is compiled and run by node.cc before bootstrap/node.js\x0d\n// was called\x2C therefore the loaders are bootstrapped before we start to\x0d\n// actually bootstrap Node.js. It creates the following objects:\x0d\n//\x0d\n// C++ binding loaders:\x0d\n// - process.binding(): the legacy C++ binding loader\x2C accessible from user land\x0d\n//   because it is an object attached to the global process object.\x0d\n//   These C++ bindings are created using NODE_BUILTIN_MODULE_CONTEXT_AWARE()\x0d\n//   and have their nm_flags set to NM_F_BUILTIN. We do not make any guarantees\x0d\n//   about the stability of these bindings\x2C but still have to take care of\x0d\n//   compatibility issues caused by them from time to time.\x0d\n// - process._linkedBinding(): intended to be used by embedders to add\x0d\n//   additional C++ bindings in their applications. These C++ bindings\x0d\n//   can be created using NODE_MODULE_CONTEXT_AWARE_CPP() with the flag\x0d\n//   NM_F_LINKED.\x0d\n// - internalBinding(): the private internal C++ binding loader\x2C inaccessible\x0d\n//   from user land unless through `require('internal/test/binding')`.\x0d\n//   These C++ bindings are created using NODE_MODULE_CONTEXT_AWARE_INTERNAL()\x0d\n//   and have their nm_flags set to NM_F_INTERNAL.\x0d\n//\x0d\n// Internal JavaScript module loader:\x0d\n// - BuiltinModule: a minimal module system used to load the JavaScript core\x0d\n//   modules found in lib/**/*.js and deps/**/*.js. All core modules are\x0d\n//   compiled into the node binary via node_javascript.cc generated by js2c.py\x2C\x0d\n//   so they can be loaded faster without the cost of I/O. This class makes the\x0d\n//   lib/internal/*\x2C deps/internal/* modules and internalBinding() available by\x0d\n//   default to core modules\x2C and lets the core modules require itself via\x0d\n//   require('internal/bootstrap/loaders') even when this file is not written in\x0d\n//   CommonJS style.\x0d\n//\x0d\n// Other objects:\x0d\n// - process.moduleLoadList: an array recording the bindings and the modules\x0d\n//   loaded in the process and the order in which they are loaded.\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// This file is compiled as if it's wrapped in a function with arguments\x0d\n// passed by node::RunBootstrapping()\x0d\n/* global process\x2C getLinkedBinding\x2C getInternalBinding\x2C primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  Error\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ReflectGet\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Set up process.moduleLoadList.\x0d\nconst moduleLoadList = [];\x0d\nObjectDefineProperty(process\x2C 'moduleLoadList'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: moduleLoadList\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x2C\x0d\n  writable: false\x0d\n});\x0d\n\x0d\n\x0d\n// internalBindingAllowlist contains the name of internalBinding modules\x0d\n// that are allowed for access via process.binding()... This is used\x0d\n// to provide a transition path for modules that are being moved over to\x0d\n// internalBinding.\x0d\nconst internalBindingAllowlist = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'buffer'\x2C\x0d\n  'cares_wrap'\x2C\x0d\n  'config'\x2C\x0d\n  'constants'\x2C\x0d\n  'contextify'\x2C\x0d\n  'crypto'\x2C\x0d\n  'fs'\x2C\x0d\n  'fs_event_wrap'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'icu'\x2C\x0d\n  'inspector'\x2C\x0d\n  'js_stream'\x2C\x0d\n  'natives'\x2C\x0d\n  'os'\x2C\x0d\n  'pipe_wrap'\x2C\x0d\n  'process_wrap'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'spawn_sync'\x2C\x0d\n  'stream_wrap'\x2C\x0d\n  'tcp_wrap'\x2C\x0d\n  'tls_wrap'\x2C\x0d\n  'tty_wrap'\x2C\x0d\n  'udp_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'util'\x2C\x0d\n  'uv'\x2C\x0d\n  'v8'\x2C\x0d\n  'zlib'\x2C\x0d\n]);\x0d\n\x0d\nconst runtimeDeprecatedList = new SafeSet([\x0d\n  'async_wrap'\x2C\x0d\n  'crypto'\x2C\x0d\n  'http_parser'\x2C\x0d\n  'signal_wrap'\x2C\x0d\n  'url'\x2C\x0d\n  'v8'\x2C\x0d\n]);\x0d\n\x0d\nconst legacyWrapperList = new SafeSet([\x0d\n  'util'\x2C\x0d\n]);\x0d\n\x0d\n// Modules that can only be imported via the node: scheme.\x0d\nconst schemelessBlockList = new SafeSet([\x0d\n  'test'\x2C\x0d\n]);\x0d\n\x0d\n// Set up process.binding() and process._linkedBinding().\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n\x0d\n  process.binding = function binding(module) {\x0d\n    module = String(module);\x0d\n    // Deprecated specific process.binding() modules\x2C but not all\x2C allow\x0d\n    // selective fallback to internalBinding for the deprecated ones.\x0d\n    if (internalBindingAllowlist.has(module)) {\x0d\n      if (runtimeDeprecatedList.has(module)) {\x0d\n        runtimeDeprecatedList.delete(module);\x0d\n        process.emitWarning(\x0d\n          `Access to process.binding('${module}') is deprecated.`\x2C\x0d\n          'DeprecationWarning'\x2C\x0d\n          'DEP0111');\x0d\n      }\x0d\n      if (legacyWrapperList.has(module)) {\x0d\n        return nativeModuleRequire('internal/legacy/processbinding')[module]();\x0d\n      }\x0d\n      return internalBinding(module);\x0d\n    }\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    throw new Error(`No such module: ${module}`);\x0d\n  };\x0d\n\x0d\n  process._linkedBinding = function _linkedBinding(module) {\x0d\n    module = String(module);\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object')\x0d\n      mod = bindingObj[module] = getLinkedBinding(module);\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\n// Set up internalBinding() in the closure.\x0d\n/**\x0d\n * @type {InternalBinding}\x0d\n */\x0d\nlet internalBinding;\x0d\n{\x0d\n  const bindingObj = ObjectCreate(null);\x0d\n  // eslint-disable-next-line no-global-assign\x0d\n  internalBinding = function internalBinding(module) {\x0d\n    let mod = bindingObj[module];\x0d\n    if (typeof mod !== 'object') {\x0d\n      mod = bindingObj[module] = getInternalBinding(module);\x0d\n      ArrayPrototypePush(moduleLoadList\x2C `Internal Binding ${module}`);\x0d\n    }\x0d\n    return mod;\x0d\n  };\x0d\n}\x0d\n\x0d\nconst loaderId = 'internal/bootstrap/loaders';\x0d\nconst {\x0d\n  builtinIds\x2C\x0d\n  compileFunction\x0d\n} = internalBinding('builtins');\x0d\n\x0d\nconst getOwn = (target\x2C property\x2C receiver) => {\x0d\n  return ObjectPrototypeHasOwnProperty(target\x2C property) ?\x0d\n    ReflectGet(target\x2C property\x2C receiver) :\x0d\n    undefined;\x0d\n};\x0d\n\x0d\n/**\x0d\n * An internal abstraction for the built-in JavaScript modules of Node.js.\x0d\n * Be careful not to expose this to user land unless --expose-internals is\x0d\n * used\x2C in which case there is no compatibility guarantee about this class.\x0d\n */\x0d\nclass BuiltinModule {\x0d\n  /**\x0d\n   * A map from the module IDs to the module instances.\x0d\n   * @type {Map<string\x2C BuiltinModule>}\x0d\n   */\x0d\n  static map = new SafeMap(\x0d\n    ArrayPrototypeMap(builtinIds\x2C (id) => [id\x2C new BuiltinModule(id)])\x0d\n  );\x0d\n\x0d\n  constructor(id) {\x0d\n    this.filename = `${id}.js`;\x0d\n    this.id = id;\x0d\n    this.canBeRequiredByUsers = !StringPrototypeStartsWith(id\x2C 'internal/');\x0d\n\x0d\n    // The CJS exports object of the module.\x0d\n    this.exports = {};\x0d\n    // States used to work around circular dependencies.\x0d\n    this.loaded = false;\x0d\n    this.loading = false;\x0d\n\x0d\n    // The following properties are used by the ESM implementation and only\x0d\n    // initialized when the built-in module is loaded by users.\x0d\n    /**\x0d\n     * The C++ ModuleWrap binding used to interface with the ESM implementation.\x0d\n     * @type {ModuleWrap|undefined}\x0d\n     */\x0d\n    this.module = undefined;\x0d\n    /**\x0d\n     * Exported names for the ESM imports.\x0d\n     * @type {string[]|undefined}\x0d\n     */\x0d\n    this.exportKeys = undefined;\x0d\n  }\x0d\n\x0d\n  // To be called during pre-execution when --expose-internals is on.\x0d\n  // Enables the user-land module loader to access internal modules.\x0d\n  static exposeInternals() {\x0d\n    for (const { 0: id\x2C 1: mod } of BuiltinModule.map) {\x0d\n      // Do not expose this to user land even with --expose-internals.\x0d\n      if (id !== loaderId) {\x0d\n        mod.canBeRequiredByUsers = true;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  static exists(id) {\x0d\n    return BuiltinModule.map.has(id);\x0d\n  }\x0d\n\x0d\n  static canBeRequiredByUsers(id) {\x0d\n    const mod = BuiltinModule.map.get(id);\x0d\n    return mod && mod.canBeRequiredByUsers;\x0d\n  }\x0d\n\x0d\n  // Determine if a core module can be loaded without the node: prefix. This\x0d\n  // function does not validate if the module actually exists.\x0d\n  static canBeRequiredWithoutScheme(id) {\x0d\n    return !schemelessBlockList.has(id);\x0d\n  }\x0d\n\x0d\n  static getSchemeOnlyModuleNames() {\x0d\n    return ArrayFrom(schemelessBlockList);\x0d\n  }\x0d\n\x0d\n  // Used by user-land module loaders to compile and load builtins.\x0d\n  compileForPublicLoader() {\x0d\n    if (!this.canBeRequiredByUsers) {\x0d\n      // No code because this is an assertion against bugs\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new Error(`Should not compile ${this.id} for public use`);\x0d\n    }\x0d\n    this.compileForInternalLoader();\x0d\n    if (!this.exportKeys) {\x0d\n      // When using --expose-internals\x2C we do not want to reflect the named\x0d\n      // exports from core modules as this can trigger unnecessary getters.\x0d\n      const internal = StringPrototypeStartsWith(this.id\x2C 'internal/');\x0d\n      this.exportKeys = internal ? [] : ObjectKeys(this.exports);\x0d\n    }\x0d\n    this.getESMFacade();\x0d\n    this.syncExports();\x0d\n    return this.exports;\x0d\n  }\x0d\n\x0d\n  getESMFacade() {\x0d\n    if (this.module) return this.module;\x0d\n    const { ModuleWrap } = internalBinding('module_wrap');\x0d\n    const url = `node:${this.id}`;\x0d\n    const nativeModule = this;\x0d\n    const exportsKeys = ArrayPrototypeSlice(this.exportKeys);\x0d\n    ArrayPrototypePush(exportsKeys\x2C 'default');\x0d\n    this.module = new ModuleWrap(\x0d\n      url\x2C undefined\x2C exportsKeys\x2C\x0d\n      function() {\x0d\n        nativeModule.syncExports();\x0d\n        this.setExport('default'\x2C nativeModule.exports);\x0d\n      });\x0d\n    // Ensure immediate sync execution to capture exports now\x0d\n    this.module.instantiate();\x0d\n    this.module.evaluate(-1\x2C false);\x0d\n    return this.module;\x0d\n  }\x0d\n\x0d\n  // Provide named exports for all builtin libraries so that the libraries\x0d\n  // may be imported in a nicer way for ESM users. The default export is left\x0d\n  // as the entire namespace (module.exports) and updates when this function is\x0d\n  // called so that APMs and other behavior are supported.\x0d\n  syncExports() {\x0d\n    const names = this.exportKeys;\x0d\n    if (this.module) {\x0d\n      for (let i = 0; i < names.length; i++) {\x0d\n        const exportName = names[i];\x0d\n        if (exportName === 'default') continue;\x0d\n        this.module.setExport(exportName\x2C\x0d\n                              getOwn(this.exports\x2C exportName\x2C this.exports));\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  compileForInternalLoader() {\x0d\n    if (this.loaded || this.loading) {\x0d\n      return this.exports;\x0d\n    }\x0d\n\x0d\n    const id = this.id;\x0d\n    this.loading = true;\x0d\n\x0d\n    try {\x0d\n      const requireFn = StringPrototypeStartsWith(this.id\x2C 'internal/deps/') ?\x0d\n        requireWithFallbackInDeps : nativeModuleRequire;\x0d\n\x0d\n      const fn = compileFunction(id);\x0d\n      // Arguments must match the parameters specified in\x0d\n      // BuiltinLoader::LookupAndCompile().\x0d\n      fn(this.exports\x2C requireFn\x2C this\x2C process\x2C internalBinding\x2C primordials);\x0d\n\x0d\n      this.loaded = true;\x0d\n    } finally {\x0d\n      this.loading = false;\x0d\n    }\x0d\n\x0d\n    // "NativeModule" is a legacy name of "BuiltinModule". We keep it\x0d\n    // here to avoid breaking users who parse process.moduleLoadList.\x0d\n    ArrayPrototypePush(moduleLoadList\x2C `NativeModule ${id}`);\x0d\n    return this.exports;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Think of this as module.exports in this file even though it is not\x0d\n// written in CommonJS style.\x0d\nconst loaderExports = {\x0d\n  internalBinding\x2C\x0d\n  BuiltinModule\x2C\x0d\n  require: nativeModuleRequire\x0d\n};\x0d\n\x0d\nfunction nativeModuleRequire(id) {\x0d\n  if (id === loaderId) {\x0d\n    return loaderExports;\x0d\n  }\x0d\n\x0d\n  const mod = BuiltinModule.map.get(id);\x0d\n  // Can't load the internal errors module from here\x2C have to use a raw error.\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  if (!mod) throw new TypeError(`Missing internal module '${id}'`);\x0d\n  return mod.compileForInternalLoader();\x0d\n}\x0d\n\x0d\n// Allow internal modules from dependencies to require\x0d\n// other modules from dependencies by providing fallbacks.\x0d\nfunction requireWithFallbackInDeps(request) {\x0d\n  if (!BuiltinModule.map.has(request)) {\x0d\n    request = `internal/deps/${request}`;\x0d\n  }\x0d\n  return nativeModuleRequire(request);\x0d\n}\x0d\n\x0d\n// Pass the exports back to C++ land for C++ internals to use.\x0d\nreturn loaderExports;\x0d\n
code-source-info,0x2f2f3a0bade,9,11379,11733,C0O11389C2O11400C4O11396C9O11417C13O11438C14O11461C19O11475C24O11479C29O11479C35O11623C37O11633C47O11681C60O11639C65O11633C66O11703C71O11703C75O11730,,
code-creation,LazyCompile,10,316996,0x2f2f3a0c896,175,compileForInternalLoader node:internal/bootstrap/loaders:316:27,0x39b87d0c50,~
code-source-info,0x2f2f3a0c896,9,10312,11141,C0O10331C6O10346C12O10376C16O10384C17O10415C22O10424C23O10437C30O10483C37O10514C45O10483C63O10616C70O10616C75O10756C89O10791C103O10748C108O10831C109O10843C124O10875C126O10888C141O11053C152O11072C160O11104C165O11053C170O11128C174O11136,,
code-creation,Eval,10,317745,0x2f2f3a0d93e,5, node:internal/bootstrap/pre_execution:1:1,0x2f2f3a0d518,~
script-source,100,node:internal/bootstrap/pre_execution,'use strict';\x0d\n\x0d\nconst {\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  getOptionValue\x2C\x0d\n  getEmbedderOptions\x2C\x0d\n  refreshOptions\x2C\x0d\n} = require('internal/options');\x0d\nconst { reconnectZeroFillToggle } = require('internal/buffer');\x0d\nconst {\x0d\n  defineOperation\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  exposeInterface\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nfunction prepareMainThreadExecution(expandArgv1 = false\x2C\x0d\n                                    initialzeModules = true) {\x0d\n  refreshRuntimeOptions();\x0d\n\x0d\n  // TODO(joyeecheung): this is also necessary for workers when they deserialize\x0d\n  // this toggle from the snapshot.\x0d\n  reconnectZeroFillToggle();\x0d\n\x0d\n  // Patch the process object with legacy properties and normalizations\x0d\n  patchProcessObject(expandArgv1);\x0d\n  setupTraceCategoryState();\x0d\n  setupPerfHooks();\x0d\n  setupInspectorHooks();\x0d\n  setupWarningHandler();\x0d\n  setupFetch();\x0d\n  setupWebCrypto();\x0d\n  setupCustomEvent();\x0d\n\x0d\n  // Resolve the coverage directory to an absolute path\x2C and\x0d\n  // overwrite process.env so that the original path gets passed\x0d\n  // to child processes even when they switch cwd.\x0d\n  if (process.env.NODE_V8_COVERAGE) {\x0d\n    process.env.NODE_V8_COVERAGE =\x0d\n      setupCoverageHooks(process.env.NODE_V8_COVERAGE);\x0d\n  }\x0d\n\x0d\n  setupDebugEnv();\x0d\n\x0d\n  // Print stack trace on `SIGINT` if option `--trace-sigint` presents.\x0d\n  setupStacktracePrinterOnSigint();\x0d\n\x0d\n  // Process initial diagnostic reporting configuration\x2C if present.\x0d\n  initializeReport();\x0d\n  initializeReportSignalHandlers();  // Main-thread-only.\x0d\n\x0d\n  initializeHeapSnapshotSignalHandlers();\x0d\n\x0d\n  // If the process is spawned with env NODE_CHANNEL_FD\x2C it's probably\x0d\n  // spawned by our child_process module\x2C then initialize IPC.\x0d\n  // This attaches some internal event listeners and creates:\x0d\n  // process.send()\x2C process.channel\x2C process.connected\x2C\x0d\n  // process.disconnect().\x0d\n  setupChildProcessIpcChannel();\x0d\n\x0d\n  // Load policy from disk and parse it.\x0d\n  initializePolicy();\x0d\n\x0d\n  // If this is a worker in cluster mode\x2C start up the communication\x0d\n  // channel. This needs to be done before any user code gets executed\x0d\n  // (including preload modules).\x0d\n  initializeClusterIPC();\x0d\n\x0d\n  initializeSourceMapsHandlers();\x0d\n  initializeDeprecations();\x0d\n  initializeWASI();\x0d\n\x0d\n  require('internal/v8/startup_snapshot').runDeserializeCallbacks();\x0d\n\x0d\n  if (!initialzeModules) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  initializeCJSLoader();\x0d\n  initializeESMLoader();\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  assert(!CJSLoader.hasLoadedAnyUserCJSModule);\x0d\n  loadPreloadModules();\x0d\n  initializeFrozenIntrinsics();\x0d\n}\x0d\n\x0d\nfunction refreshRuntimeOptions() {\x0d\n  refreshOptions();\x0d\n}\x0d\n\x0d\nfunction patchProcessObject(expandArgv1) {\x0d\n  const binding = internalBinding('process_methods');\x0d\n  binding.patchProcessObject(process);\x0d\n\x0d\n  require('internal/process/per_thread').refreshHrtimeBuffer();\x0d\n\x0d\n  ObjectDefineProperty(process\x2C 'argv0'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: true\x2C\x0d\n    // Only set it to true during snapshot building.\x0d\n    configurable: getOptionValue('--build-snapshot')\x2C\x0d\n    value: process.argv[0]\x0d\n  });\x0d\n\x0d\n  process.exitCode = undefined;\x0d\n  process._exiting = false;\x0d\n  process.argv[0] = process.execPath;\x0d\n\x0d\n  if (expandArgv1 && process.argv[1] &&\x0d\n      !StringPrototypeStartsWith(process.argv[1]\x2C '-')) {\x0d\n    // Expand process.argv[1] into a full path.\x0d\n    const path = require('path');\x0d\n    try {\x0d\n      process.argv[1] = path.resolve(process.argv[1]);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // We need to initialize the global console here again with process.stdout\x0d\n  // and friends for snapshot deserialization.\x0d\n  const globalConsole = require('internal/console/global');\x0d\n  const { initializeGlobalConsole } = require('internal/console/constructor');\x0d\n  initializeGlobalConsole(globalConsole);\x0d\n\x0d\n  // TODO(joyeecheung): most of these should be deprecated and removed\x2C\x0d\n  // except some that we need to be able to mutate during run time.\x0d\n  addReadOnlyProcessAlias('_eval'\x2C '--eval');\x0d\n  addReadOnlyProcessAlias('_print_eval'\x2C '--print');\x0d\n  addReadOnlyProcessAlias('_syntax_check_only'\x2C '--check');\x0d\n  addReadOnlyProcessAlias('_forceRepl'\x2C '--interactive');\x0d\n  addReadOnlyProcessAlias('_preload_modules'\x2C '--require');\x0d\n  addReadOnlyProcessAlias('noDeprecation'\x2C '--no-deprecation');\x0d\n  addReadOnlyProcessAlias('noProcessWarnings'\x2C '--no-warnings');\x0d\n  addReadOnlyProcessAlias('traceProcessWarnings'\x2C '--trace-warnings');\x0d\n  addReadOnlyProcessAlias('throwDeprecation'\x2C '--throw-deprecation');\x0d\n  addReadOnlyProcessAlias('profProcess'\x2C '--prof-process');\x0d\n  addReadOnlyProcessAlias('traceDeprecation'\x2C '--trace-deprecation');\x0d\n  addReadOnlyProcessAlias('_breakFirstLine'\x2C '--inspect-brk'\x2C false);\x0d\n  addReadOnlyProcessAlias('_breakNodeFirstLine'\x2C '--inspect-brk-node'\x2C false);\x0d\n}\x0d\n\x0d\nfunction addReadOnlyProcessAlias(name\x2C option\x2C enumerable = true) {\x0d\n  const value = getOptionValue(option);\x0d\n  if (value) {\x0d\n    ObjectDefineProperty(process\x2C name\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable\x2C\x0d\n      value\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction setupWarningHandler() {\x0d\n  const {\x0d\n    onWarning\x0d\n  } = require('internal/process/warning');\x0d\n  if (getOptionValue('--warnings') &&\x0d\n    process.env.NODE_NO_WARNINGS !== '1') {\x0d\n    process.on('warning'\x2C onWarning);\x0d\n  }\x0d\n}\x0d\n\x0d\n// https://fetch.spec.whatwg.org/\x0d\nfunction setupFetch() {\x0d\n  if (!getOptionValue('--experimental-fetch')) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  emitExperimentalWarning('Fetch');\x0d\n\x0d\n  const undici = require('internal/deps/undici/undici');\x0d\n  defineOperation(globalThis\x2C 'fetch'\x2C undici.fetch);\x0d\n  exposeInterface(globalThis\x2C 'FormData'\x2C undici.FormData);\x0d\n  exposeInterface(globalThis\x2C 'Headers'\x2C undici.Headers);\x0d\n  exposeInterface(globalThis\x2C 'Request'\x2C undici.Request);\x0d\n  exposeInterface(globalThis\x2C 'Response'\x2C undici.Response);\x0d\n}\x0d\n\x0d\n// TODO(aduh95): move this to internal/bootstrap/browser when the CLI flag is\x0d\n//               removed.\x0d\nfunction setupWebCrypto() {\x0d\n  if (process.config.variables.node_no_browser_globals ||\x0d\n      !getOptionValue('--experimental-global-webcrypto')) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  let webcrypto;\x0d\n  ObjectDefineProperty(globalThis\x2C 'crypto'\x2C\x0d\n                       { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor({\x0d\n                         get crypto() {\x0d\n                           webcrypto ??= require('internal/crypto/webcrypto');\x0d\n                           return webcrypto.crypto;\x0d\n                         }\x0d\n                       }\x2C 'crypto') });\x0d\n  if (internalBinding('config').hasOpenSSL) {\x0d\n    webcrypto ??= require('internal/crypto/webcrypto');\x0d\n    ObjectDefineProperty(globalThis\x2C 'Crypto'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.Crypto\x0d\n    });\x0d\n    ObjectDefineProperty(globalThis\x2C 'CryptoKey'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.CryptoKey\x0d\n    });\x0d\n    ObjectDefineProperty(globalThis\x2C 'SubtleCrypto'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: webcrypto.SubtleCrypto\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// TODO(daeyeon): move this to internal/bootstrap/browser when the CLI flag is\x0d\n//                removed.\x0d\nfunction setupCustomEvent() {\x0d\n  if (process.config.variables.node_no_browser_globals ||\x0d\n      !getOptionValue('--experimental-global-customevent')) {\x0d\n    return;\x0d\n  }\x0d\n  const { CustomEvent } = require('internal/event_target');\x0d\n  exposeInterface(globalThis\x2C 'CustomEvent'\x2C CustomEvent);\x0d\n}\x0d\n\x0d\n// Setup User-facing NODE_V8_COVERAGE environment variable that writes\x0d\n// ScriptCoverage to a specified file.\x0d\nfunction setupCoverageHooks(dir) {\x0d\n  const cwd = require('internal/process/execution').tryGetCwd();\x0d\n  const { resolve } = require('path');\x0d\n  const coverageDirectory = resolve(cwd\x2C dir);\x0d\n  const { sourceMapCacheToObject } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n\x0d\n  if (process.features.inspector) {\x0d\n    internalBinding('profiler').setCoverageDirectory(coverageDirectory);\x0d\n    internalBinding('profiler').setSourceMapCacheGetter(sourceMapCacheToObject);\x0d\n  } else {\x0d\n    process.emitWarning('The inspector is disabled\x2C ' +\x0d\n                        'coverage could not be collected'\x2C\x0d\n                        'Warning');\x0d\n    return '';\x0d\n  }\x0d\n  return coverageDirectory;\x0d\n}\x0d\n\x0d\nfunction setupStacktracePrinterOnSigint() {\x0d\n  if (!getOptionValue('--trace-sigint')) {\x0d\n    return;\x0d\n  }\x0d\n  const { SigintWatchdog } = require('internal/watchdog');\x0d\n\x0d\n  const watchdog = new SigintWatchdog();\x0d\n  watchdog.start();\x0d\n}\x0d\n\x0d\nfunction initializeReport() {\x0d\n  const { report } = require('internal/process/report');\x0d\n  ObjectDefineProperty(process\x2C 'report'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    get() {\x0d\n      return report;\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupDebugEnv() {\x0d\n  require('internal/util/debuglog').initializeDebugEnv(process.env.NODE_DEBUG);\x0d\n  if (getOptionValue('--expose-internals')) {\x0d\n    require('internal/bootstrap/loaders').BuiltinModule.exposeInternals();\x0d\n  }\x0d\n}\x0d\n\x0d\n// This has to be called after initializeReport() is called\x0d\nfunction initializeReportSignalHandlers() {\x0d\n  const { addSignalHandler } = require('internal/process/report');\x0d\n\x0d\n  addSignalHandler();\x0d\n}\x0d\n\x0d\nfunction initializeHeapSnapshotSignalHandlers() {\x0d\n  const signal = getOptionValue('--heapsnapshot-signal');\x0d\n\x0d\n  if (!signal)\x0d\n    return;\x0d\n\x0d\n  require('internal/validators').validateSignalName(signal);\x0d\n  const { writeHeapSnapshot } = require('v8');\x0d\n\x0d\n  process.on(signal\x2C () => {\x0d\n    writeHeapSnapshot();\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupTraceCategoryState() {\x0d\n  const { isTraceCategoryEnabled } = internalBinding('trace_events');\x0d\n  const { toggleTraceCategoryState } = require('internal/process/per_thread');\x0d\n  toggleTraceCategoryState(isTraceCategoryEnabled('node.async_hooks'));\x0d\n}\x0d\n\x0d\nfunction setupPerfHooks() {\x0d\n  require('internal/perf/performance').refreshTimeOrigin();\x0d\n  require('internal/perf/utils').refreshTimeOrigin();\x0d\n}\x0d\n\x0d\nfunction setupInspectorHooks() {\x0d\n  // If Debugger.setAsyncCallStackDepth is sent during bootstrap\x2C\x0d\n  // we cannot immediately call into JS to enable the hooks\x2C which could\x0d\n  // interrupt the JS execution of bootstrap. So instead we save the\x0d\n  // notification in the inspector agent if it's sent in the middle of\x0d\n  // bootstrap\x2C and process the notification later here.\x0d\n  if (internalBinding('config').hasInspector) {\x0d\n    const {\x0d\n      enable\x2C\x0d\n      disable\x0d\n    } = require('internal/inspector_async_hook');\x0d\n    internalBinding('inspector').registerAsyncHook(enable\x2C disable);\x0d\n  }\x0d\n}\x0d\n\x0d\n// In general deprecations are initialized wherever the APIs are implemented\x2C\x0d\n// this is used to deprecate APIs implemented in C++ where the deprecation\x0d\n// utilities are not easily accessible.\x0d\nfunction initializeDeprecations() {\x0d\n  const { deprecate } = require('internal/util');\x0d\n  const pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\n  // DEP0103: access to `process.binding('util').isX` type checkers\x0d\n  // TODO(addaleax): Turn into a full runtime deprecation.\x0d\n  const utilBinding = internalBinding('util');\x0d\n  const types = require('internal/util/types');\x0d\n  for (const name of [\x0d\n    'isArrayBuffer'\x2C\x0d\n    'isArrayBufferView'\x2C\x0d\n    'isAsyncFunction'\x2C\x0d\n    'isDataView'\x2C\x0d\n    'isDate'\x2C\x0d\n    'isExternal'\x2C\x0d\n    'isMap'\x2C\x0d\n    'isMapIterator'\x2C\x0d\n    'isNativeError'\x2C\x0d\n    'isPromise'\x2C\x0d\n    'isRegExp'\x2C\x0d\n    'isSet'\x2C\x0d\n    'isSetIterator'\x2C\x0d\n    'isTypedArray'\x2C\x0d\n    'isUint8Array'\x2C\x0d\n    'isAnyArrayBuffer'\x2C\x0d\n  ]) {\x0d\n    utilBinding[name] = pendingDeprecation ?\x0d\n      deprecate(types[name]\x2C\x0d\n                'Accessing native typechecking bindings of Node ' +\x0d\n                'directly is deprecated. ' +\x0d\n                `Please use \\`util.types.${name}\\` instead.`\x2C\x0d\n                'DEP0103') :\x0d\n      types[name];\x0d\n  }\x0d\n\x0d\n  // TODO(joyeecheung): this is a legacy property exposed to process.\x0d\n  // Now that we use the config binding to carry this information\x2C remove\x0d\n  // it from the process. We may consider exposing it properly in\x0d\n  // process.features.\x0d\n  const { noBrowserGlobals } = internalBinding('config');\x0d\n  if (noBrowserGlobals) {\x0d\n    ObjectDefineProperty(process\x2C '_noBrowserGlobals'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: false\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: noBrowserGlobals\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (pendingDeprecation) {\x0d\n    process.binding = deprecate(process.binding\x2C\x0d\n                                'process.binding() is deprecated. ' +\x0d\n                                'Please use public APIs instead.'\x2C 'DEP0111');\x0d\n\x0d\n    process._tickCallback = deprecate(process._tickCallback\x2C\x0d\n                                      'process._tickCallback() is deprecated'\x2C\x0d\n                                      'DEP0134');\x0d\n  }\x0d\n\x0d\n  // Create global.process and global.Buffer as getters so that we have a\x0d\n  // deprecation path for these in ES Modules.\x0d\n  // See https://github.com/nodejs/node/pull/26334.\x0d\n  let _process = process;\x0d\n  ObjectDefineProperty(globalThis\x2C 'process'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return _process;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _process = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n\x0d\n  let _Buffer = Buffer;\x0d\n  ObjectDefineProperty(globalThis\x2C 'Buffer'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return _Buffer;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      _Buffer = value;\x0d\n    }\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupChildProcessIpcChannel() {\x0d\n  if (process.env.NODE_CHANNEL_FD) {\x0d\n    const assert = require('internal/assert');\x0d\n\x0d\n    const fd = NumberParseInt(process.env.NODE_CHANNEL_FD\x2C 10);\x0d\n    assert(fd >= 0);\x0d\n\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_CHANNEL_FD;\x0d\n\x0d\n    const serializationMode =\x0d\n      process.env.NODE_CHANNEL_SERIALIZATION_MODE || 'json';\x0d\n    delete process.env.NODE_CHANNEL_SERIALIZATION_MODE;\x0d\n\x0d\n    require('child_process')._forkChild(fd\x2C serializationMode);\x0d\n    assert(process.send);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeClusterIPC() {\x0d\n  if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\x0d\n    const cluster = require('cluster');\x0d\n    cluster._setupWorker();\x0d\n    // Make sure it's not accidentally inherited by child processes.\x0d\n    delete process.env.NODE_UNIQUE_ID;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializePolicy() {\x0d\n  const experimentalPolicy = getOptionValue('--experimental-policy');\x0d\n  if (experimentalPolicy) {\x0d\n    process.emitWarning('Policies are experimental.'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    const { pathToFileURL\x2C URL } = require('internal/url');\x0d\n    // URL here as it is slightly different parsing\x0d\n    // no bare specifiers for now\x0d\n    let manifestURL;\x0d\n    if (require('path').isAbsolute(experimentalPolicy)) {\x0d\n      manifestURL = new URL(`file://${experimentalPolicy}`);\x0d\n    } else {\x0d\n      const cwdURL = pathToFileURL(process.cwd());\x0d\n      cwdURL.pathname += '/';\x0d\n      manifestURL = new URL(experimentalPolicy\x2C cwdURL);\x0d\n    }\x0d\n    const fs = require('fs');\x0d\n    const src = fs.readFileSync(manifestURL\x2C 'utf8');\x0d\n    const experimentalPolicyIntegrity = getOptionValue('--policy-integrity');\x0d\n    if (experimentalPolicyIntegrity) {\x0d\n      const SRI = require('internal/policy/sri');\x0d\n      const { createHash\x2C timingSafeEqual } = require('crypto');\x0d\n      const realIntegrities = new SafeMap();\x0d\n      const integrityEntries = SRI.parse(experimentalPolicyIntegrity);\x0d\n      let foundMatch = false;\x0d\n      for (let i = 0; i < integrityEntries.length; i++) {\x0d\n        const {\x0d\n          algorithm\x2C\x0d\n          value: expected\x0d\n        } = integrityEntries[i];\x0d\n        const hash = createHash(algorithm);\x0d\n        hash.update(src);\x0d\n        const digest = hash.digest();\x0d\n        if (digest.length === expected.length &&\x0d\n          timingSafeEqual(digest\x2C expected)) {\x0d\n          foundMatch = true;\x0d\n          break;\x0d\n        }\x0d\n        realIntegrities.set(algorithm\x2C digest.toString('base64'));\x0d\n      }\x0d\n      if (!foundMatch) {\x0d\n        throw new ERR_MANIFEST_ASSERT_INTEGRITY(manifestURL\x2C realIntegrities);\x0d\n      }\x0d\n    }\x0d\n    require('internal/process/policy')\x0d\n      .setup(src\x2C manifestURL.href);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeWASI() {\x0d\n  const { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\n  const mod = BuiltinModule.map.get('wasi');\x0d\n  mod.canBeRequiredByUsers =\x0d\n    getOptionValue('--experimental-wasi-unstable-preview1');\x0d\n}\x0d\n\x0d\nfunction initializeCJSLoader() {\x0d\n  const CJSLoader = require('internal/modules/cjs/loader');\x0d\n  if (!getEmbedderOptions().noGlobalSearchPaths) {\x0d\n    CJSLoader.Module._initPaths();\x0d\n  }\x0d\n  // TODO(joyeecheung): deprecate this in favor of a proper hook?\x0d\n  CJSLoader.Module.runMain =\x0d\n    require('internal/modules/run_main').executeUserEntryPoint;\x0d\n}\x0d\n\x0d\nfunction initializeESMLoader() {\x0d\n  // Create this WeakMap in js-land because V8 has no C++ API for WeakMap.\x0d\n  internalBinding('module_wrap').callbackMap = new SafeWeakMap();\x0d\n\x0d\n  if (getEmbedderOptions().shouldNotRegisterESMLoader) return;\x0d\n\x0d\n  const {\x0d\n    setImportModuleDynamicallyCallback\x2C\x0d\n    setInitializeImportMetaObjectCallback\x0d\n  } = internalBinding('module_wrap');\x0d\n  const esm = require('internal/process/esm_loader');\x0d\n  // Setup per-isolate callbacks that locate data or callbacks that we keep\x0d\n  // track of for different ESM modules.\x0d\n  setInitializeImportMetaObjectCallback(esm.initializeImportMetaObject);\x0d\n  setImportModuleDynamicallyCallback(esm.importModuleDynamicallyCallback);\x0d\n\x0d\n  // Patch the vm module when --experimental-vm-modules is on.\x0d\n  // Please update the comments in vm.js when this block changes.\x0d\n  if (getOptionValue('--experimental-vm-modules')) {\x0d\n    const {\x0d\n      Module\x2C SourceTextModule\x2C SyntheticModule\x2C\x0d\n    } = require('internal/vm/module');\x0d\n    const vm = require('vm');\x0d\n    vm.Module = Module;\x0d\n    vm.SourceTextModule = SourceTextModule;\x0d\n    vm.SyntheticModule = SyntheticModule;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initializeSourceMapsHandlers() {\x0d\n  const { setSourceMapsEnabled } =\x0d\n    require('internal/source_map/source_map_cache');\x0d\n  process.setSourceMapsEnabled = setSourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction initializeFrozenIntrinsics() {\x0d\n  if (getOptionValue('--frozen-intrinsics')) {\x0d\n    process.emitWarning('The --frozen-intrinsics flag is experimental'\x2C\x0d\n                        'ExperimentalWarning');\x0d\n    require('internal/freeze_intrinsics')();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction loadPreloadModules() {\x0d\n  // For user code\x2C we preload modules if `-r` is passed\x0d\n  const preloadModules = getOptionValue('--require');\x0d\n  if (preloadModules && preloadModules.length > 0) {\x0d\n    const {\x0d\n      Module: {\x0d\n        _preloadModules\x0d\n      }\x2C\x0d\n    } = require('internal/modules/cjs/loader');\x0d\n    _preloadModules(preloadModules);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  refreshRuntimeOptions\x2C\x0d\n  patchProcessObject\x2C\x0d\n  setupCoverageHooks\x2C\x0d\n  setupWarningHandler\x2C\x0d\n  setupFetch\x2C\x0d\n  setupWebCrypto\x2C\x0d\n  setupCustomEvent\x2C\x0d\n  setupDebugEnv\x2C\x0d\n  setupPerfHooks\x2C\x0d\n  prepareMainThreadExecution\x2C\x0d\n  initializeDeprecations\x2C\x0d\n  initializeESMLoader\x2C\x0d\n  initializeFrozenIntrinsics\x2C\x0d\n  initializeSourceMapsHandlers\x2C\x0d\n  loadPreloadModules\x2C\x0d\n  setupTraceCategoryState\x2C\x0d\n  setupInspectorHooks\x2C\x0d\n  initializeReport\x2C\x0d\n  initializeCJSLoader\x2C\x0d\n  initializeWASI\x0d\n};\x0d\n
code-source-info,0x2f2f3a0d93e,100,0,19722,C0O0C4O19722,,
code-creation,Function,10,319133,0x2f2f3a0e656,530, node:internal/bootstrap/pre_execution:1:1,0x2f2f3a0d8b8,~
code-source-info,0x2f2f3a0e656,100,0,19722,C0O0C229O28C235O47C241O72C247O107C253O119C259O135C265O165C271O272C277O272C282O209C288O228C294O251C300O338C306O338C311O310C317O448C323O448C328O378C334O398C340O426C346O496C352O496C357O485C363O558C369O558C374O584C379O524C385O608C391O608C395O608C397O19226C404O19248C410O19274C416O19297C422O19320C428O19344C434O19359C440O19378C446O19399C452O19417C458O19436C464O19467C470O19494C476O19518C482O19549C488O19582C494O19605C500O19633C506O19657C512O19678C518O19702C524O19241C529O19721,,
code-creation,LazyCompile,10,319577,0x2f2f3a1013e,273,prepareMainThreadExecution node:internal/bootstrap/pre_execution:29:36,0x2f2f3a0d970,~
code-source-info,0x2f2f3a1013e
code-creation,LazyCompile,10,319733,0x2f2f3a116fe,10,refreshRuntimeOptions node:internal/bootstrap/pre_execution:99:31,0x2f2f3a0d9c0,~
code-source-info,0x2f2f3a116fe,100,2925,2953,C0O2933C5O2933C9O2952,,
code-creation,LazyCompile,10,319808,0x2f2f3a117e6,22,refreshOptions node:internal/options:39:24,0x6414eb3758,~
script-source,92,node:internal/options,'use strict';\x0d\n\x0d\nconst {\x0d\n  getCLIOptions\x2C\x0d\n  getEmbedderOptions: getEmbedderOptionsFromBinding\x2C\x0d\n} = internalBinding('options');\x0d\n\x0d\nlet warnOnAllowUnauthorized = true;\x0d\n\x0d\nlet optionsMap;\x0d\nlet aliasesMap;\x0d\nlet embedderOptions;\x0d\n\x0d\n// getCLIOptions() would serialize the option values from C++ land.\x0d\n// It would error if the values are queried before bootstrap is\x0d\n// complete so that we don't accidentally include runtime-dependent\x0d\n// states into a runtime-independent snapshot.\x0d\nfunction getCLIOptionsFromBinding() {\x0d\n  if (!optionsMap) {\x0d\n    ({ options: optionsMap } = getCLIOptions());\x0d\n  }\x0d\n  return optionsMap;\x0d\n}\x0d\n\x0d\nfunction getAliasesFromBinding() {\x0d\n  if (!aliasesMap) {\x0d\n    ({ aliases: aliasesMap } = getCLIOptions());\x0d\n  }\x0d\n  return aliasesMap;\x0d\n}\x0d\n\x0d\nfunction getEmbedderOptions() {\x0d\n  if (!embedderOptions) {\x0d\n    embedderOptions = getEmbedderOptionsFromBinding();\x0d\n  }\x0d\n  return embedderOptions;\x0d\n}\x0d\n\x0d\nfunction refreshOptions() {\x0d\n  optionsMap = undefined;\x0d\n  aliasesMap = undefined;\x0d\n}\x0d\n\x0d\nfunction getOptionValue(optionName) {\x0d\n  const options = getCLIOptionsFromBinding();\x0d\n  if (optionName.startsWith('--no-')) {\x0d\n    const option = options.get('--' + optionName.slice(5));\x0d\n    return option && !option.value;\x0d\n  }\x0d\n  return options.get(optionName)?.value;\x0d\n}\x0d\n\x0d\nfunction getAllowUnauthorized() {\x0d\n  const allowUnauthorized = process.env.NODE_TLS_REJECT_UNAUTHORIZED === '0';\x0d\n\x0d\n  if (allowUnauthorized && warnOnAllowUnauthorized) {\x0d\n    warnOnAllowUnauthorized = false;\x0d\n    process.emitWarning(\x0d\n      'Setting the NODE_TLS_REJECT_UNAUTHORIZED ' +\x0d\n      'environment variable to \\'0\\' makes TLS connections ' +\x0d\n      'and HTTPS requests insecure by disabling ' +\x0d\n      'certificate verification.');\x0d\n  }\x0d\n  return allowUnauthorized;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  get options() {\x0d\n    return getCLIOptionsFromBinding();\x0d\n  }\x2C\x0d\n  get aliases() {\x0d\n    return getAliasesFromBinding();\x0d\n  }\x2C\x0d\n  getOptionValue\x2C\x0d\n  getAllowUnauthorized\x2C\x0d\n  getEmbedderOptions\x2C\x0d\n  refreshOptions\x0d\n};\x0d\n
code-source-info,0x2f2f3a117e6,92,940,1001,C0O948C4O959C10O975C14O986C21O1000,,
code-creation,LazyCompile,10,320098,0x2f2f3a11b4e,19,reconnectZeroFillToggle node:internal/buffer:1072:33,0xb0b6e8bdb8,~
script-source,25,node:internal/buffer,'use strict';\x0d\n\x0d\nconst {\x0d\n  BigInt\x2C\x0d\n  Float32Array\x2C\x0d\n  Float64Array\x2C\x0d\n  MathFloor\x2C\x0d\n  Number\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x0d\n} = require('internal/errors').codes;\x0d\nconst { validateNumber } = require('internal/validators');\x0d\nconst {\x0d\n  asciiSlice\x2C\x0d\n  base64Slice\x2C\x0d\n  base64urlSlice\x2C\x0d\n  latin1Slice\x2C\x0d\n  hexSlice\x2C\x0d\n  ucs2Slice\x2C\x0d\n  utf8Slice\x2C\x0d\n  asciiWrite\x2C\x0d\n  base64Write\x2C\x0d\n  base64urlWrite\x2C\x0d\n  latin1Write\x2C\x0d\n  hexWrite\x2C\x0d\n  ucs2Write\x2C\x0d\n  utf8Write\x2C\x0d\n  getZeroFillToggle\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  untransferable_object_private_symbol\x2C\x0d\n  setHiddenValue\x2C\x0d\n} = internalBinding('util');\x0d\n\x0d\n// Temporary buffers to convert numbers.\x0d\nconst float32Array = new Float32Array(1);\x0d\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer);\x0d\nconst float64Array = new Float64Array(1);\x0d\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer);\x0d\n\x0d\n// Check endianness.\x0d\nfloat32Array[0] = -1; // 0xBF800000\x0d\n// Either it is [0\x2C 0\x2C 128\x2C 191] or [191\x2C 128\x2C 0\x2C 0]. It is not possible to\x0d\n// check this with `os.endianness()` because that is determined at compile time.\x0d\nconst bigEndian = uInt8Float32Array[3] === 0;\x0d\n\x0d\nfunction checkBounds(buf\x2C offset\x2C byteLength) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined)\x0d\n    boundsError(offset\x2C buf.length - (byteLength + 1));\x0d\n}\x0d\n\x0d\nfunction checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C byteLength) {\x0d\n  if (value > max || value < min) {\x0d\n    const n = typeof min === 'bigint' ? 'n' : '';\x0d\n    let range;\x0d\n    if (byteLength > 3) {\x0d\n      if (min === 0 || min === 0n) {\x0d\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\x0d\n      } else {\x0d\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and ` +\x0d\n                `< 2${n} ** ${(byteLength + 1) * 8 - 1}${n}`;\x0d\n      }\x0d\n    } else {\x0d\n      range = `>= ${min}${n} and <= ${max}${n}`;\x0d\n    }\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C range\x2C value);\x0d\n  }\x0d\n  checkBounds(buf\x2C offset\x2C byteLength);\x0d\n}\x0d\n\x0d\nfunction boundsError(value\x2C length\x2C type) {\x0d\n  if (MathFloor(value) !== value) {\x0d\n    validateNumber(value\x2C type);\x0d\n    throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C 'an integer'\x2C value);\x0d\n  }\x0d\n\x0d\n  if (length < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n  throw new ERR_OUT_OF_RANGE(type || 'offset'\x2C\x0d\n                             `>= ${type ? 1 : 0} and <= ${length}`\x2C\x0d\n                             value);\x0d\n}\x0d\n\x0d\n// Read integers.\x0d\nfunction readBigUInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const lo = first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24;\x0d\n\x0d\n  const hi = this[++offset] +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n\x0d\n  return BigInt(lo) + (BigInt(hi) << 32n);\x0d\n}\x0d\n\x0d\nfunction readBigUInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const hi = first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n\x0d\n  const lo = this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n\x0d\n  return (BigInt(hi) << 32n) + BigInt(lo);\x0d\n}\x0d\n\x0d\nfunction readBigInt64LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = this[offset + 4] +\x0d\n    this[offset + 5] * 2 ** 8 +\x0d\n    this[offset + 6] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 24);\x0d\n}\x0d\n\x0d\nfunction readBigInt64BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  const val = (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset];\x0d\n  return (BigInt(val) << 32n) +\x0d\n    BigInt(this[++offset] * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last);\x0d\n}\x0d\n\x0d\nfunction readUIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    (buf[++offset] + last * 2 ** 8) * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    last * 2 ** 32;\x0d\n}\x0d\n\x0d\nfunction readUInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    last * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readUInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n}\x0d\n\x0d\nfunction readUInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first + last * 2 ** 8;\x0d\n}\x0d\n\x0d\nfunction readUInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val;\x0d\n}\x0d\n\x0d\nfunction readUIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readUInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readUInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readUInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readUInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readUInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readUInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readUInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return first * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first * 2 ** 24 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readUInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readUInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  return first * 2 ** 8 + last;\x0d\n}\x0d\n\x0d\nfunction readIntLE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48LE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40LE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24LE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32LE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16LE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[offset + 4] + last * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt40LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (last | (last & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    first +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 24;\x0d\n}\x0d\n\x0d\nfunction readInt32LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return first +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    (last << 24); // Overflow\x0d\n}\x0d\n\x0d\nfunction readInt24LE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16LE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first + last * 2 ** 8;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\nfunction readInt8(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const val = this[offset];\x0d\n  if (val === undefined)\x0d\n    boundsError(offset\x2C this.length - 1);\x0d\n\x0d\n  return val | (val & 2 ** 7) * 0x1fffffe;\x0d\n}\x0d\n\x0d\nfunction readIntBE(offset\x2C byteLength) {\x0d\n  if (offset === undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE('offset'\x2C 'number'\x2C offset);\x0d\n  if (byteLength === 6)\x0d\n    return readInt48BE(this\x2C offset);\x0d\n  if (byteLength === 5)\x0d\n    return readInt40BE(this\x2C offset);\x0d\n  if (byteLength === 3)\x0d\n    return readInt24BE(this\x2C offset);\x0d\n  if (byteLength === 4)\x0d\n    return this.readInt32BE(offset);\x0d\n  if (byteLength === 2)\x0d\n    return this.readInt16BE(offset);\x0d\n  if (byteLength === 1)\x0d\n    return this.readInt8(offset);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction readInt48BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 5];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 6);\x0d\n\x0d\n  const val = buf[++offset] + first * 2 ** 8;\x0d\n  return (val | (val & 2 ** 15) * 0x1fffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt40BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 4];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 5);\x0d\n\x0d\n  return (first | (first & 2 ** 7) * 0x1fffffe) * 2 ** 32 +\x0d\n    buf[++offset] * 2 ** 24 +\x0d\n    buf[++offset] * 2 ** 16 +\x0d\n    buf[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt32BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  return (first << 24) + // Overflow\x0d\n    this[++offset] * 2 ** 16 +\x0d\n    this[++offset] * 2 ** 8 +\x0d\n    last;\x0d\n}\x0d\n\x0d\nfunction readInt24BE(buf\x2C offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = buf[offset];\x0d\n  const last = buf[offset + 2];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C buf.length - 3);\x0d\n\x0d\n  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 23) * 0x1fe;\x0d\n}\x0d\n\x0d\nfunction readInt16BE(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 1];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 2);\x0d\n\x0d\n  const val = first * 2 ** 8 + last;\x0d\n  return val | (val & 2 ** 15) * 0x1fffe;\x0d\n}\x0d\n\x0d\n// Read floats\x0d\nfunction readFloatBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[3] = first;\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[0] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readFloatForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 3];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 4);\x0d\n\x0d\n  uInt8Float32Array[0] = first;\x0d\n  uInt8Float32Array[1] = this[++offset];\x0d\n  uInt8Float32Array[2] = this[++offset];\x0d\n  uInt8Float32Array[3] = last;\x0d\n  return float32Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleBackwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[7] = first;\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[0] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\nfunction readDoubleForwards(offset = 0) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  const first = this[offset];\x0d\n  const last = this[offset + 7];\x0d\n  if (first === undefined || last === undefined)\x0d\n    boundsError(offset\x2C this.length - 8);\x0d\n\x0d\n  uInt8Float64Array[0] = first;\x0d\n  uInt8Float64Array[1] = this[++offset];\x0d\n  uInt8Float64Array[2] = this[++offset];\x0d\n  uInt8Float64Array[3] = this[++offset];\x0d\n  uInt8Float64Array[4] = this[++offset];\x0d\n  uInt8Float64Array[5] = this[++offset];\x0d\n  uInt8Float64Array[6] = this[++offset];\x0d\n  uInt8Float64Array[7] = last;\x0d\n  return float64Array[0];\x0d\n}\x0d\n\x0d\n// Write integers.\x0d\nfunction writeBigU_Int64LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset++] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset++] = hi;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigU_Int64BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 7);\x0d\n\x0d\n  let lo = Number(value & 0xffffffffn);\x0d\n  buf[offset + 7] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 6] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 5] = lo;\x0d\n  lo = lo >> 8;\x0d\n  buf[offset + 4] = lo;\x0d\n  let hi = Number(value >> 32n & 0xffffffffn);\x0d\n  buf[offset + 3] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 2] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset + 1] = hi;\x0d\n  hi = hi >> 8;\x0d\n  buf[offset] = hi;\x0d\n  return offset + 8;\x0d\n}\x0d\n\x0d\nfunction writeBigUInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(this\x2C value\x2C offset\x2C 0n\x2C 0xffffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64LE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64LE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeBigInt64BE(value\x2C offset = 0) {\x0d\n  return writeBigU_Int64BE(\x0d\n    this\x2C value\x2C offset\x2C -0x8000000000000000n\x2C 0x7fffffffffffffffn);\x0d\n}\x0d\n\x0d\nfunction writeUIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  const newVal = value;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = MathFloor(newVal * 2 ** -32);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16LE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = value;\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int8(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  // `checkInt()` can not be used here because it checks two entries.\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  if (value > max || value < min) {\x0d\n    throw new ERR_OUT_OF_RANGE('value'\x2C `>= ${min} and <= ${max}`\x2C value);\x0d\n  }\x0d\n  if (buf[offset] === undefined)\x0d\n    boundsError(offset\x2C buf.length - 1);\x0d\n\x0d\n  buf[offset] = value;\x0d\n  return offset + 1;\x0d\n}\x0d\n\x0d\nfunction writeUInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n}\x0d\n\x0d\nfunction writeUIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C 0\x2C 0xff);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeU_Int48BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 5);\x0d\n\x0d\n  const newVal = MathFloor(value * 2 ** -32);\x0d\n  buf[offset++] = (newVal >>> 8);\x0d\n  buf[offset++] = newVal;\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int40BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 4);\x0d\n\x0d\n  buf[offset++] = MathFloor(value * 2 ** -32);\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeU_Int32BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 3);\x0d\n\x0d\n  buf[offset + 3] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 4;\x0d\n}\x0d\n\x0d\nfunction writeUInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C 0\x2C 0xffffffff);\x0d\n}\x0d\n\x0d\nfunction writeU_Int24BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 2);\x0d\n\x0d\n  buf[offset + 2] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset + 1] = value;\x0d\n  value = value >>> 8;\x0d\n  buf[offset] = value;\x0d\n  return offset + 3;\x0d\n}\x0d\n\x0d\nfunction writeU_Int16BE(buf\x2C value\x2C offset\x2C min\x2C max) {\x0d\n  value = +value;\x0d\n  checkInt(value\x2C min\x2C max\x2C buf\x2C offset\x2C 1);\x0d\n\x0d\n  buf[offset++] = (value >>> 8);\x0d\n  buf[offset++] = value;\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeUInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C 0\x2C 0xffff);\x0d\n}\x0d\n\x0d\nfunction writeIntLE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48LE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40LE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24LE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32LE(value\x2C offset = 0) {\x0d\n  return writeU_Int32LE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16LE(value\x2C offset = 0) {\x0d\n  return writeU_Int16LE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\nfunction writeInt8(value\x2C offset = 0) {\x0d\n  return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n}\x0d\n\x0d\nfunction writeIntBE(value\x2C offset\x2C byteLength) {\x0d\n  if (byteLength === 6)\x0d\n    return writeU_Int48BE(this\x2C value\x2C offset\x2C -0x800000000000\x2C 0x7fffffffffff);\x0d\n  if (byteLength === 5)\x0d\n    return writeU_Int40BE(this\x2C value\x2C offset\x2C -0x8000000000\x2C 0x7fffffffff);\x0d\n  if (byteLength === 3)\x0d\n    return writeU_Int24BE(this\x2C value\x2C offset\x2C -0x800000\x2C 0x7fffff);\x0d\n  if (byteLength === 4)\x0d\n    return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n  if (byteLength === 2)\x0d\n    return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n  if (byteLength === 1)\x0d\n    return writeU_Int8(this\x2C value\x2C offset\x2C -0x80\x2C 0x7f);\x0d\n\x0d\n  boundsError(byteLength\x2C 6\x2C 'byteLength');\x0d\n}\x0d\n\x0d\nfunction writeInt32BE(value\x2C offset = 0) {\x0d\n  return writeU_Int32BE(this\x2C value\x2C offset\x2C -0x80000000\x2C 0x7fffffff);\x0d\n}\x0d\n\x0d\nfunction writeInt16BE(value\x2C offset = 0) {\x0d\n  return writeU_Int16BE(this\x2C value\x2C offset\x2C -0x8000\x2C 0x7fff);\x0d\n}\x0d\n\x0d\n// Write floats.\x0d\nfunction writeDoubleForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeDoubleBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 7);\x0d\n\x0d\n  float64Array[0] = val;\x0d\n  this[offset++] = uInt8Float64Array[7];\x0d\n  this[offset++] = uInt8Float64Array[6];\x0d\n  this[offset++] = uInt8Float64Array[5];\x0d\n  this[offset++] = uInt8Float64Array[4];\x0d\n  this[offset++] = uInt8Float64Array[3];\x0d\n  this[offset++] = uInt8Float64Array[2];\x0d\n  this[offset++] = uInt8Float64Array[1];\x0d\n  this[offset++] = uInt8Float64Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatForwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nfunction writeFloatBackwards(val\x2C offset = 0) {\x0d\n  val = +val;\x0d\n  checkBounds(this\x2C offset\x2C 3);\x0d\n\x0d\n  float32Array[0] = val;\x0d\n  this[offset++] = uInt8Float32Array[3];\x0d\n  this[offset++] = uInt8Float32Array[2];\x0d\n  this[offset++] = uInt8Float32Array[1];\x0d\n  this[offset++] = uInt8Float32Array[0];\x0d\n  return offset;\x0d\n}\x0d\n\x0d\nclass FastBuffer extends Uint8Array {\x0d\n  // Using an explicit constructor here is necessary to avoid relying on\x0d\n  // `Array.prototype[Symbol.iterator]`\x2C which can be mutated by users.\x0d\n  // eslint-disable-next-line no-useless-constructor\x0d\n  constructor(bufferOrLength\x2C byteOffset\x2C length) {\x0d\n    super(bufferOrLength\x2C byteOffset\x2C length);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addBufferPrototypeMethods(proto) {\x0d\n  proto.readBigUInt64LE = readBigUInt64LE;\x0d\n  proto.readBigUInt64BE = readBigUInt64BE;\x0d\n  proto.readBigUint64LE = readBigUInt64LE;\x0d\n  proto.readBigUint64BE = readBigUInt64BE;\x0d\n  proto.readBigInt64LE = readBigInt64LE;\x0d\n  proto.readBigInt64BE = readBigInt64BE;\x0d\n  proto.writeBigUInt64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUInt64BE = writeBigUInt64BE;\x0d\n  proto.writeBigUint64LE = writeBigUInt64LE;\x0d\n  proto.writeBigUint64BE = writeBigUInt64BE;\x0d\n  proto.writeBigInt64LE = writeBigInt64LE;\x0d\n  proto.writeBigInt64BE = writeBigInt64BE;\x0d\n\x0d\n  proto.readUIntLE = readUIntLE;\x0d\n  proto.readUInt32LE = readUInt32LE;\x0d\n  proto.readUInt16LE = readUInt16LE;\x0d\n  proto.readUInt8 = readUInt8;\x0d\n  proto.readUIntBE = readUIntBE;\x0d\n  proto.readUInt32BE = readUInt32BE;\x0d\n  proto.readUInt16BE = readUInt16BE;\x0d\n  proto.readUintLE = readUIntLE;\x0d\n  proto.readUint32LE = readUInt32LE;\x0d\n  proto.readUint16LE = readUInt16LE;\x0d\n  proto.readUint8 = readUInt8;\x0d\n  proto.readUintBE = readUIntBE;\x0d\n  proto.readUint32BE = readUInt32BE;\x0d\n  proto.readUint16BE = readUInt16BE;\x0d\n  proto.readIntLE = readIntLE;\x0d\n  proto.readInt32LE = readInt32LE;\x0d\n  proto.readInt16LE = readInt16LE;\x0d\n  proto.readInt8 = readInt8;\x0d\n  proto.readIntBE = readIntBE;\x0d\n  proto.readInt32BE = readInt32BE;\x0d\n  proto.readInt16BE = readInt16BE;\x0d\n\x0d\n  proto.writeUIntLE = writeUIntLE;\x0d\n  proto.writeUInt32LE = writeUInt32LE;\x0d\n  proto.writeUInt16LE = writeUInt16LE;\x0d\n  proto.writeUInt8 = writeUInt8;\x0d\n  proto.writeUIntBE = writeUIntBE;\x0d\n  proto.writeUInt32BE = writeUInt32BE;\x0d\n  proto.writeUInt16BE = writeUInt16BE;\x0d\n  proto.writeUintLE = writeUIntLE;\x0d\n  proto.writeUint32LE = writeUInt32LE;\x0d\n  proto.writeUint16LE = writeUInt16LE;\x0d\n  proto.writeUint8 = writeUInt8;\x0d\n  proto.writeUintBE = writeUIntBE;\x0d\n  proto.writeUint32BE = writeUInt32BE;\x0d\n  proto.writeUint16BE = writeUInt16BE;\x0d\n  proto.writeIntLE = writeIntLE;\x0d\n  proto.writeInt32LE = writeInt32LE;\x0d\n  proto.writeInt16LE = writeInt16LE;\x0d\n  proto.writeInt8 = writeInt8;\x0d\n  proto.writeIntBE = writeIntBE;\x0d\n  proto.writeInt32BE = writeInt32BE;\x0d\n  proto.writeInt16BE = writeInt16BE;\x0d\n\x0d\n  proto.readFloatLE = bigEndian ? readFloatBackwards : readFloatForwards;\x0d\n  proto.readFloatBE = bigEndian ? readFloatForwards : readFloatBackwards;\x0d\n  proto.readDoubleLE = bigEndian ? readDoubleBackwards : readDoubleForwards;\x0d\n  proto.readDoubleBE = bigEndian ? readDoubleForwards : readDoubleBackwards;\x0d\n  proto.writeFloatLE = bigEndian ? writeFloatBackwards : writeFloatForwards;\x0d\n  proto.writeFloatBE = bigEndian ? writeFloatForwards : writeFloatBackwards;\x0d\n  proto.writeDoubleLE = bigEndian ? writeDoubleBackwards : writeDoubleForwards;\x0d\n  proto.writeDoubleBE = bigEndian ? writeDoubleForwards : writeDoubleBackwards;\x0d\n\x0d\n  proto.asciiSlice = asciiSlice;\x0d\n  proto.base64Slice = base64Slice;\x0d\n  proto.base64urlSlice = base64urlSlice;\x0d\n  proto.latin1Slice = latin1Slice;\x0d\n  proto.hexSlice = hexSlice;\x0d\n  proto.ucs2Slice = ucs2Slice;\x0d\n  proto.utf8Slice = utf8Slice;\x0d\n  proto.asciiWrite = asciiWrite;\x0d\n  proto.base64Write = base64Write;\x0d\n  proto.base64urlWrite = base64urlWrite;\x0d\n  proto.latin1Write = latin1Write;\x0d\n  proto.hexWrite = hexWrite;\x0d\n  proto.ucs2Write = ucs2Write;\x0d\n  proto.utf8Write = utf8Write;\x0d\n}\x0d\n\x0d\n// This would better be placed in internal/worker/io.js\x2C but that doesn't work\x0d\n// because Buffer needs this and that would introduce a cyclic dependency.\x0d\nfunction markAsUntransferable(obj) {\x0d\n  if ((typeof obj !== 'object' && typeof obj !== 'function') || obj === null)\x0d\n    return;  // This object is a primitive and therefore already untransferable.\x0d\n  setHiddenValue(obj\x2C untransferable_object_private_symbol\x2C true);\x0d\n}\x0d\n\x0d\n// A toggle used to access the zero fill setting of the array buffer allocator\x0d\n// in C++.\x0d\n// |zeroFill| can be undefined when running inside an isolate where we\x0d\n// do not own the ArrayBuffer allocator.  Zero fill is always on in that case.\x0d\nlet zeroFill = getZeroFillToggle();\x0d\nfunction createUnsafeBuffer(size) {\x0d\n  zeroFill[0] = 0;\x0d\n  try {\x0d\n    return new FastBuffer(size);\x0d\n  } finally {\x0d\n    zeroFill[0] = 1;\x0d\n  }\x0d\n}\x0d\n\x0d\n// The connection between the JS land zero fill toggle and the\x0d\n// C++ one in the NodeArrayBufferAllocator gets lost if the toggle\x0d\n// is deserialized from the snapshot\x2C because V8 owns the underlying\x0d\n// memory of this toggle. This resets the connection.\x0d\nfunction reconnectZeroFillToggle() {\x0d\n  zeroFill = getZeroFillToggle();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  FastBuffer\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  createUnsafeBuffer\x2C\x0d\n  readUInt16BE\x2C\x0d\n  readUInt32BE\x2C\x0d\n  reconnectZeroFillToggle\x0d\n};\x0d\n
code-source-info,0x2f2f3a11b4e,25,31788,31830,C0O31796C5O31807C11O31805C18O31829,,
code-creation,LazyCompile,10,323086,0x2f2f3a1443e,460,patchProcessObject node:internal/bootstrap/pre_execution:103:28,0x2f2f3a0da10,~
code-source-info,0x2f2f3a1443e,100,2984,5117,C0O3019C6O3019C11O3066C19O3066C24O3100C30O3100C35O3138C40O3139C44O3167C55O3188C62O3326C68O3326C79O3382C85O3386C92O3167C97O3402C101O3419C105O3435C109O3452C113O3464C116O3472C126O3490C130O3480C134O3505C141O3532C148O3536C155O3551C161O3585C168O3589C175O3551C182O3669C188O3669C196O3704C199O3712C207O3727C215O3743C222O3747C226O3727C231O3720C241O3973C247O3973C252O4048C258O4048C263O4020C268O4092C272O4279C281O4279C286O4326C295O4326C300O4380C309O4380C314O4441C323O4441C328O4500C337O4500C342O4561C351O4561C356O4626C365O4626C370O4692C379O4692C384O4764C393O4764C398O4835C407O4835C412O4896C421O4896C426O4967C437O4967C442O5038C453O5038C459O5116,,
code-creation,LazyCompile,10,323289,0x2f2f3a147ce,69,internalBinding node:internal/bootstrap/loaders:171:45,0x39b87d06a8,~
code-source-info,0x2f2f3a147ce,9,5434,5679,C0O5460C7O5470C11O5485C15O5523C25O5550C30O5548C37O5585C48O5604C56O5640C61O5585C66O5663C68O5674,,
code-creation,LazyCompile,10,323516,0x2f2f3a14a86,69,refreshHrtimeBuffer node:internal/process/per_thread:67:29,0xb0b6e98930,~
script-source,30,node:internal/process/per_thread,'use strict';\x0d\n\x0d\n// This files contains process bootstrappers that can be\x0d\n// run when setting up each thread\x2C including the main\x0d\n// thread and the worker threads.\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeEvery\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  BigUint64Array\x2C\x0d\n  Float64Array\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  Set\x2C\x0d\n  SetPrototypeEntries\x2C\x0d\n  SetPrototypeValues\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  Uint32Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n  codes: {\x0d\n    ERR_ASSERTION\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst format = require('internal/util/inspect').format;\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\nconst constants = internalBinding('constants').os.signals;\x0d\n\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nconst kInternal = Symbol('internal properties');\x0d\n\x0d\nfunction assert(x\x2C msg) {\x0d\n  if (!x) throw new ERR_ASSERTION(msg || 'assertion error');\x0d\n}\x0d\n\x0d\nconst binding = internalBinding('process_methods');\x0d\n\x0d\nlet hrValues;\x0d\nlet hrBigintValues;\x0d\n\x0d\nfunction refreshHrtimeBuffer() {\x0d\n  // The 3 entries filled in by the original process.hrtime contains\x0d\n  // the upper/lower 32 bits of the second part of the value\x2C\x0d\n  // and the remaining nanoseconds of the value.\x0d\n  hrValues = new Uint32Array(binding.hrtimeBuffer);\x0d\n  // Use a BigUint64Array in the closure because this is actually a bit\x0d\n  // faster than simply returning a BigInt from C++ in V8 7.1.\x0d\n  hrBigintValues = new BigUint64Array(binding.hrtimeBuffer\x2C 0\x2C 1);\x0d\n}\x0d\n\x0d\n// Create the buffers.\x0d\nrefreshHrtimeBuffer();\x0d\n\x0d\nfunction hrtime(time) {\x0d\n  binding.hrtime();\x0d\n\x0d\n  if (time !== undefined) {\x0d\n    validateArray(time\x2C 'time');\x0d\n    if (time.length !== 2) {\x0d\n      throw new ERR_OUT_OF_RANGE('time'\x2C 2\x2C time.length);\x0d\n    }\x0d\n\x0d\n    const sec = (hrValues[0] * 0x100000000 + hrValues[1]) - time[0];\x0d\n    const nsec = hrValues[2] - time[1];\x0d\n    const needsBorrow = nsec < 0;\x0d\n    return [needsBorrow ? sec - 1 : sec\x2C needsBorrow ? nsec + 1e9 : nsec];\x0d\n  }\x0d\n\x0d\n  return [\x0d\n    hrValues[0] * 0x100000000 + hrValues[1]\x2C\x0d\n    hrValues[2]\x2C\x0d\n  ];\x0d\n}\x0d\n\x0d\nfunction hrtimeBigInt() {\x0d\n  binding.hrtimeBigInt();\x0d\n  return hrBigintValues[0];\x0d\n}\x0d\n\x0d\n// The execution of this function itself should not cause any side effects.\x0d\nfunction wrapProcessMethods(binding) {\x0d\n  const {\x0d\n    cpuUsage: _cpuUsage\x2C\x0d\n    memoryUsage: _memoryUsage\x2C\x0d\n    rss\x2C\x0d\n    resourceUsage: _resourceUsage\x0d\n  } = binding;\x0d\n\x0d\n  function _rawDebug(...args) {\x0d\n    binding._rawDebug(ReflectApply(format\x2C null\x2C args));\x0d\n  }\x0d\n\x0d\n  // Create the argument array that will be passed to the native function.\x0d\n  const cpuValues = new Float64Array(2);\x0d\n\x0d\n  // Replace the native function with the JS version that calls the native\x0d\n  // function.\x0d\n  function cpuUsage(prevValue) {\x0d\n    // If a previous value was passed in\x2C ensure it has the correct shape.\x0d\n    if (prevValue) {\x0d\n      if (!previousValueIsValid(prevValue.user)) {\x0d\n        validateObject(prevValue\x2C 'prevValue');\x0d\n\x0d\n        validateNumber(prevValue.user\x2C 'prevValue.user');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.user'\x2C\x0d\n                                                   prevValue.user);\x0d\n      }\x0d\n\x0d\n      if (!previousValueIsValid(prevValue.system)) {\x0d\n        validateNumber(prevValue.system\x2C 'prevValue.system');\x0d\n        throw new ERR_INVALID_ARG_VALUE.RangeError('prevValue.system'\x2C\x0d\n                                                   prevValue.system);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Call the native function to get the current values.\x0d\n    _cpuUsage(cpuValues);\x0d\n\x0d\n    // If a previous value was passed in\x2C return diff of current from previous.\x0d\n    if (prevValue) {\x0d\n      return {\x0d\n        user: cpuValues[0] - prevValue.user\x2C\x0d\n        system: cpuValues[1] - prevValue.system\x0d\n      };\x0d\n    }\x0d\n\x0d\n    // If no previous value passed in\x2C return current value.\x0d\n    return {\x0d\n      user: cpuValues[0]\x2C\x0d\n      system: cpuValues[1]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // Ensure that a previously passed in value is valid. Currently\x2C the native\x0d\n  // implementation always returns numbers <= Number.MAX_SAFE_INTEGER.\x0d\n  function previousValueIsValid(num) {\x0d\n    return typeof num === 'number' &&\x0d\n        num <= NumberMAX_SAFE_INTEGER &&\x0d\n        num >= 0;\x0d\n  }\x0d\n\x0d\n  const memValues = new Float64Array(5);\x0d\n  function memoryUsage() {\x0d\n    _memoryUsage(memValues);\x0d\n    return {\x0d\n      rss: memValues[0]\x2C\x0d\n      heapTotal: memValues[1]\x2C\x0d\n      heapUsed: memValues[2]\x2C\x0d\n      external: memValues[3]\x2C\x0d\n      arrayBuffers: memValues[4]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  memoryUsage.rss = rss;\x0d\n\x0d\n  function exit(code) {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n\x0d\n    if (code || code === 0)\x0d\n      process.exitCode = code;\x0d\n\x0d\n    if (!process._exiting) {\x0d\n      process._exiting = true;\x0d\n      process.emit('exit'\x2C process.exitCode || 0);\x0d\n    }\x0d\n    // FIXME(joyeecheung): This is an undocumented API that gets monkey-patched\x0d\n    // in the user land. Either document it\x2C or deprecate it in favor of a\x0d\n    // better public alternative.\x0d\n    process.reallyExit(process.exitCode || 0);\x0d\n  }\x0d\n\x0d\n  function kill(pid\x2C sig) {\x0d\n    let err;\x0d\n\x0d\n    // eslint-disable-next-line eqeqeq\x0d\n    if (pid != (pid | 0)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('pid'\x2C 'number'\x2C pid);\x0d\n    }\x0d\n\x0d\n    // Preserve null signal\x0d\n    if (sig === (sig | 0)) {\x0d\n      // XXX(joyeecheung): we have to use process._kill here because\x0d\n      // it's monkey-patched by tests.\x0d\n      err = process._kill(pid\x2C sig);\x0d\n    } else {\x0d\n      sig = sig || 'SIGTERM';\x0d\n      if (constants[sig]) {\x0d\n        err = process._kill(pid\x2C constants[sig]);\x0d\n      } else {\x0d\n        throw new ERR_UNKNOWN_SIGNAL(sig);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'kill');\x0d\n\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  const resourceValues = new Float64Array(16);\x0d\n  function resourceUsage() {\x0d\n    _resourceUsage(resourceValues);\x0d\n    return {\x0d\n      userCPUTime: resourceValues[0]\x2C\x0d\n      systemCPUTime: resourceValues[1]\x2C\x0d\n      maxRSS: resourceValues[2]\x2C\x0d\n      sharedMemorySize: resourceValues[3]\x2C\x0d\n      unsharedDataSize: resourceValues[4]\x2C\x0d\n      unsharedStackSize: resourceValues[5]\x2C\x0d\n      minorPageFault: resourceValues[6]\x2C\x0d\n      majorPageFault: resourceValues[7]\x2C\x0d\n      swappedOut: resourceValues[8]\x2C\x0d\n      fsRead: resourceValues[9]\x2C\x0d\n      fsWrite: resourceValues[10]\x2C\x0d\n      ipcSent: resourceValues[11]\x2C\x0d\n      ipcReceived: resourceValues[12]\x2C\x0d\n      signalsCount: resourceValues[13]\x2C\x0d\n      voluntaryContextSwitches: resourceValues[14]\x2C\x0d\n      involuntaryContextSwitches: resourceValues[15]\x0d\n    };\x0d\n  }\x0d\n\x0d\n\x0d\n  return {\x0d\n    _rawDebug\x2C\x0d\n    cpuUsage\x2C\x0d\n    resourceUsage\x2C\x0d\n    memoryUsage\x2C\x0d\n    kill\x2C\x0d\n    exit\x0d\n  };\x0d\n}\x0d\n\x0d\nconst replaceUnderscoresRegex = /_/g;\x0d\nconst leadingDashesRegex = /^--?/;\x0d\nconst trailingValuesRegex = /=.*$/;\x0d\n\x0d\n// This builds the initial process.allowedNodeEnvironmentFlags\x0d\n// from data in the config binding.\x0d\nfunction buildAllowedFlags() {\x0d\n  const {\x0d\n    envSettings: { kAllowedInEnvironment }\x2C\x0d\n    types: { kBoolean }\x2C\x0d\n  } = internalBinding('options');\x0d\n  const { options\x2C aliases } = require('internal/options');\x0d\n\x0d\n  const allowedNodeEnvironmentFlags = [];\x0d\n  for (const { 0: name\x2C 1: info } of options) {\x0d\n    if (info.envVarSettings === kAllowedInEnvironment) {\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C name);\x0d\n      if (info.type === kBoolean) {\x0d\n        const negatedName = `--no-${name.slice(2)}`;\x0d\n        ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C negatedName);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function isAccepted(to) {\x0d\n    if (!StringPrototypeStartsWith(to\x2C '-') || to === '--') return true;\x0d\n    const recursiveExpansion = aliases.get(to);\x0d\n    if (recursiveExpansion) {\x0d\n      if (recursiveExpansion[0] === to)\x0d\n        ArrayPrototypeSplice(recursiveExpansion\x2C 0\x2C 1);\x0d\n      return ArrayPrototypeEvery(recursiveExpansion\x2C isAccepted);\x0d\n    }\x0d\n    return options.get(to).envVarSettings === kAllowedInEnvironment;\x0d\n  }\x0d\n  for (const { 0: from\x2C 1: expansion } of aliases) {\x0d\n    if (ArrayPrototypeEvery(expansion\x2C isAccepted)) {\x0d\n      let canonical = from;\x0d\n      if (StringPrototypeEndsWith(canonical\x2C '='))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 1);\x0d\n      if (StringPrototypeEndsWith(canonical\x2C ' <arg>'))\x0d\n        canonical = StringPrototypeSlice(canonical\x2C 0\x2C canonical.length - 4);\x0d\n      ArrayPrototypePush(allowedNodeEnvironmentFlags\x2C canonical);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const trimLeadingDashes =\x0d\n    (flag) => StringPrototypeReplace(flag\x2C leadingDashesRegex\x2C '');\x0d\n\x0d\n  // Save these for comparison against flags provided to\x0d\n  // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\x0d\n  const nodeFlags = ArrayPrototypeMap(allowedNodeEnvironmentFlags\x2C\x0d\n                                      trimLeadingDashes);\x0d\n\x0d\n  class NodeEnvironmentFlagsSet extends Set {\x0d\n    constructor(array) {\x0d\n      super();\x0d\n      this[kInternal] = { array };\x0d\n    }\x0d\n\x0d\n    add() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    delete() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    clear() {\x0d\n      // No-op\x2C `Set` API compatible\x0d\n    }\x0d\n\x0d\n    has(key) {\x0d\n      // This will return `true` based on various possible\x0d\n      // permutations of a flag\x2C including present/missing leading\x0d\n      // dash(es) and/or underscores-for-dashes.\x0d\n      // Strips any values after `=`\x2C inclusive.\x0d\n      // TODO(addaleax): It might be more flexible to run the option parser\x0d\n      // on a dummy option set and see whether it rejects the argument or\x0d\n      // not.\x0d\n      if (typeof key === 'string') {\x0d\n        key = StringPrototypeReplace(key\x2C replaceUnderscoresRegex\x2C '-');\x0d\n        if (RegExpPrototypeExec(leadingDashesRegex\x2C key) !== null) {\x0d\n          key = StringPrototypeReplace(key\x2C trailingValuesRegex\x2C '');\x0d\n          return ArrayPrototypeIncludes(this[kInternal].array\x2C key);\x0d\n        }\x0d\n        return ArrayPrototypeIncludes(nodeFlags\x2C key);\x0d\n      }\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    entries() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeEntries(this[kInternal].set);\x0d\n    }\x0d\n\x0d\n    forEach(callback\x2C thisArg = undefined) {\x0d\n      ArrayPrototypeForEach(\x0d\n        this[kInternal].array\x2C\x0d\n        (v) => ReflectApply(callback\x2C thisArg\x2C [v\x2C v\x2C this])\x0d\n      );\x0d\n    }\x0d\n\x0d\n    get size() {\x0d\n      return this[kInternal].array.length;\x0d\n    }\x0d\n\x0d\n    values() {\x0d\n      this[kInternal].set ??=\x0d\n        new Set(new SafeArrayIterator(this[kInternal].array));\x0d\n      return SetPrototypeValues(this[kInternal].set);\x0d\n    }\x0d\n  }\x0d\n  const flagSetValues = NodeEnvironmentFlagsSet.prototype.values;\x0d\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype\x2C SymbolIterator\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: flagSetValues\x2C\x0d\n  });\x0d\n  ObjectDefineProperty(NodeEnvironmentFlagsSet.prototype\x2C 'keys'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: flagSetValues\x2C\x0d\n  });\x0d\n\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype.constructor);\x0d\n  ObjectFreeze(NodeEnvironmentFlagsSet.prototype);\x0d\n\x0d\n  return ObjectFreeze(new NodeEnvironmentFlagsSet(\x0d\n    allowedNodeEnvironmentFlags\x0d\n  ));\x0d\n}\x0d\n\x0d\n// Lazy load internal/trace_events_async_hooks only if the async_hooks\x0d\n// trace event category is enabled.\x0d\nlet traceEventsAsyncHook;\x0d\n// Dynamically enable/disable the traceEventsAsyncHook\x0d\nfunction toggleTraceCategoryState(asyncHooksEnabled) {\x0d\n  if (asyncHooksEnabled) {\x0d\n    if (!traceEventsAsyncHook) {\x0d\n      traceEventsAsyncHook =\x0d\n        require('internal/trace_events_async_hooks').createHook();\x0d\n    }\x0d\n    traceEventsAsyncHook.enable();\x0d\n  } else if (traceEventsAsyncHook) {\x0d\n    traceEventsAsyncHook.disable();\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  toggleTraceCategoryState\x2C\x0d\n  assert\x2C\x0d\n  buildAllowedFlags\x2C\x0d\n  wrapProcessMethods\x2C\x0d\n  hrtime\x2C\x0d\n  hrtimeBigInt\x2C\x0d\n  refreshHrtimeBuffer\x2C\x0d\n};\x0d\n
code-source-info,0x2f2f3a14a86,30,1502,1950,C0O1693C7O1720C10O1728C17O1704C25O1702C31O1883C38O1919C41O1927C53O1900C61O1898C68O1949,,
code-creation,LazyCompile,10,324516,0x2f2f3a1594e,82,getOptionValue node:internal/options:44:24,0x6414eb37c8,~
code-source-info,0x2f2f3a1594e,92,1028,1278,C0O1062C3O1062C7O1108C15O1108C22O1159C30O1181C38O1181C43O1168C47O1159C53O1197C55O1222C60O1228C61O1252C66O1252C74O1267C81O1275,,
code-creation,LazyCompile,10,324613,0x2f2f3a15aa6,33,getCLIOptionsFromBinding node:internal/options:18:34,0x6414eb3460,~
code-source-info,0x2f2f3a15aa6,92,514,620,C0O522C6O546C11O573C15O558C28O599C32O617,,
code-creation,LazyCompile,10,325200,0x2f2f3a15be6,22,set node:internal/bootstrap/node:95:8,0x39b87d5f78,~
script-source,10,node:internal/bootstrap/node,// Hello\x2C and welcome to hacking node.js!\x0d\n//\x0d\n// This file is invoked by `Realm::BootstrapNode()` in `src/node_realm.cc`\x2C\x0d\n// and is responsible for setting up Node.js core before main scripts\x0d\n// under `lib/internal/main/` are executed.\x0d\n//\x0d\n// By default\x2C Node.js binaries come with an embedded V8 startup snapshot\x0d\n// that is generated at build-time with a `node_mksnapshot` executable.\x0d\n// The snapshot generation code can be found in `SnapshotBuilder::Generate()`\x0d\n// from `src/node_snapshotable.cc`.\x0d\n// This snapshot captures the V8 heap initialized by scripts under\x0d\n// `lib/internal/bootstrap/`\x2C including this file. When initializing the main\x0d\n// thread\x2C Node.js deserializes the heap from the snapshot\x2C instead of actually\x0d\n// running this script and others in `lib/internal/bootstrap/`. To disable this\x0d\n// behavior\x2C pass `--no-node-snapshot` when starting the process so that\x0d\n// Node.js actually runs this script to initialize the heap.\x0d\n//\x0d\n// This script is expected not to perform any asynchronous operations itself\x0d\n// when being executed - those should be done in either\x0d\n// `lib/internal/process/pre_execution.js` or in main scripts. It should not\x0d\n// query any run-time states (e.g. command line arguments\x2C environment\x0d\n// variables) when being executed - functions in this script that are invoked\x0d\n// at a later time can\x2C however\x2C query those states lazily.\x0d\n// The majority of the code here focuses on setting up the global object and\x0d\n// the process object in a synchronous\x2C environment-independent manner.\x0d\n//\x0d\n// Scripts run before this file:\x0d\n// - `lib/internal/per_context/primordials.js`: this saves copies of JavaScript\x0d\n//   builtins that won't be affected by user land monkey-patching for internal\x0d\n//   modules to use.\x0d\n// - `lib/internal/per_context/domexception.js`: implementation of the\x0d\n//   `DOMException` class.\x0d\n// - `lib/internal/per_context/messageport.js`: JS-side components of the\x0d\n//   `MessagePort` implementation.\x0d\n// - `lib/internal/bootstrap/loaders.js`: this sets up internal binding and\x0d\n//   module loaders\x2C including `process.binding()`\x2C `process._linkedBinding()`\x2C\x0d\n//   `internalBinding()` and `BuiltinModule`.\x0d\n//\x0d\n// The initialization done in this script is included in both the main thread\x0d\n// and the worker threads. After this\x2C further initialization is done based\x0d\n// on the configuration of the Node.js instance by executing the scripts in\x0d\n// `lib/internal/bootstrap/switches/`.\x0d\n//\x0d\n// Then\x2C depending on how the Node.js instance is launched\x2C one of the main\x0d\n// scripts in `lib/internal/main` will be selected by C++ to start the actual\x0d\n// execution. They may run additional setups exported by\x0d\n// `lib/internal/process/pre_execution.js` depending on the run-time states.\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// This file is compiled as if it's wrapped in a function with arguments\x0d\n// passed by `BuiltinLoader::CompileAndCall()`.\x0d\n/* global process\x2C require\x2C internalBinding\x2C primordials */\x0d\n\x0d\nsetupPrepareStackTrace();\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeFill\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectPreventExtensions\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectGet\x2C\x0d\n  ReflectSet\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\nconst config = internalBinding('config');\x0d\nconst internalTimers = require('internal/timers');\x0d\nconst { deprecate } = require('internal/util');\x0d\nconst {\x0d\n  exiting_aliased_Uint32Array\x2C\x0d\n  getHiddenValue\x2C\x0d\n} = internalBinding('util');\x0d\n\x0d\nsetupProcessObject();\x0d\n\x0d\nsetupGlobalProxy();\x0d\nsetupBuffer();\x0d\n\x0d\nprocess.domain = null;\x0d\n{\x0d\n  const exitingAliasedUint32Array =\x0d\n    getHiddenValue(process\x2C exiting_aliased_Uint32Array);\x0d\n  ObjectDefineProperty(process\x2C '_exiting'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return exitingAliasedUint32Array[0] === 1;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      exitingAliasedUint32Array[0] = value ? 1 : 0;\x0d\n    }\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n  });\x0d\n}\x0d\nprocess._exiting = false;\x0d\n\x0d\n// process.config is serialized config.gypi\x0d\nconst nativeModule = internalBinding('builtins');\x0d\n\x0d\n// TODO(@jasnell): Once this has gone through one full major\x0d\n// release cycle\x2C remove the Proxy and setter and update the\x0d\n// getter to either return a read-only object or always return\x0d\n// a freshly parsed version of nativeModule.config.\x0d\n\x0d\nconst deprecationHandler = {\x0d\n  warned: false\x2C\x0d\n  message: 'Setting process.config is deprecated. ' +\x0d\n           'In the future the property will be read-only.'\x2C\x0d\n  code: 'DEP0150'\x2C\x0d\n  maybeWarn() {\x0d\n    if (!this.warned) {\x0d\n      process.emitWarning(this.message\x2C {\x0d\n        type: 'DeprecationWarning'\x2C\x0d\n        code: this.code\x0d\n      });\x0d\n      this.warned = true;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  defineProperty(target\x2C key\x2C descriptor) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectDefineProperty(target\x2C key\x2C descriptor);\x0d\n  }\x2C\x0d\n\x0d\n  deleteProperty(target\x2C key) {\x0d\n    this.maybeWarn();\x0d\n    delete target[key];\x0d\n  }\x2C\x0d\n\x0d\n  preventExtensions(target) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectPreventExtensions(target);\x0d\n  }\x2C\x0d\n\x0d\n  set(target\x2C key\x2C value) {\x0d\n    this.maybeWarn();\x0d\n    return ReflectSet(target\x2C key\x2C value);\x0d\n  }\x2C\x0d\n\x0d\n  get(target\x2C key\x2C receiver) {\x0d\n    const val = ReflectGet(target\x2C key\x2C receiver);\x0d\n    if (val != null && typeof val === 'object') {\x0d\n      // eslint-disable-next-line node-core/prefer-primordials\x0d\n      return new Proxy(val\x2C deprecationHandler);\x0d\n    }\x0d\n    return val;\x0d\n  }\x2C\x0d\n\x0d\n  setPrototypeOf(target\x2C proto) {\x0d\n    this.maybeWarn();\x0d\n    return ObjectSetPrototypeOf(target\x2C proto);\x0d\n  }\x0d\n};\x0d\n\x0d\n// eslint-disable-next-line node-core/prefer-primordials\x0d\nlet processConfig = new Proxy(\x0d\n  JSONParse(nativeModule.config)\x2C\x0d\n  deprecationHandler);\x0d\n\x0d\nObjectDefineProperty(process\x2C 'config'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  configurable: true\x2C\x0d\n  get() { return processConfig; }\x2C\x0d\n  set(value) {\x0d\n    deprecationHandler.maybeWarn();\x0d\n    processConfig = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nrequire('internal/worker/js_transferable').setup();\x0d\n\x0d\n// Bootstrappers for all threads\x2C including worker threads and main thread\x0d\nconst perThreadSetup = require('internal/process/per_thread');\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\n\x0d\n// Set up methods on the process object for all threads\x0d\n{\x0d\n  process.dlopen = rawMethods.dlopen;\x0d\n  process.uptime = rawMethods.uptime;\x0d\n\x0d\n  // TODO(joyeecheung): either remove them or make them public\x0d\n  process._getActiveRequests = rawMethods._getActiveRequests;\x0d\n  process._getActiveHandles = rawMethods._getActiveHandles;\x0d\n\x0d\n  process.getActiveResourcesInfo = function() {\x0d\n    const timerCounts = internalTimers.getTimerCounts();\x0d\n    return ArrayPrototypeConcat(\x0d\n      rawMethods._getActiveRequestsInfo()\x2C\x0d\n      rawMethods._getActiveHandlesInfo()\x2C\x0d\n      ArrayPrototypeFill(new Array(timerCounts.timeoutCount)\x2C 'Timeout')\x2C\x0d\n      ArrayPrototypeFill(new Array(timerCounts.immediateCount)\x2C 'Immediate'));\x0d\n  };\x0d\n\x0d\n  // TODO(joyeecheung): remove these\x0d\n  process.reallyExit = rawMethods.reallyExit;\x0d\n  process._kill = rawMethods._kill;\x0d\n\x0d\n  const wrapped = perThreadSetup.wrapProcessMethods(rawMethods);\x0d\n  process._rawDebug = wrapped._rawDebug;\x0d\n  process.cpuUsage = wrapped.cpuUsage;\x0d\n  process.resourceUsage = wrapped.resourceUsage;\x0d\n  process.memoryUsage = wrapped.memoryUsage;\x0d\n  process.kill = wrapped.kill;\x0d\n  process.exit = wrapped.exit;\x0d\n\x0d\n  process.hrtime = perThreadSetup.hrtime;\x0d\n  process.hrtime.bigint = perThreadSetup.hrtimeBigInt;\x0d\n\x0d\n  process.openStdin = function() {\x0d\n    process.stdin.resume();\x0d\n    return process.stdin;\x0d\n  };\x0d\n}\x0d\n\x0d\nconst credentials = internalBinding('credentials');\x0d\nif (credentials.implementsPosixCredentials) {\x0d\n  process.getuid = credentials.getuid;\x0d\n  process.geteuid = credentials.geteuid;\x0d\n  process.getgid = credentials.getgid;\x0d\n  process.getegid = credentials.getegid;\x0d\n  process.getgroups = credentials.getgroups;\x0d\n}\x0d\n\x0d\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\x0d\n// process. They use the same functions as the JS embedder API. These callbacks\x0d\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\x0d\n// and the cost of doing so is negligible.\x0d\nconst { nativeHooks } = require('internal/async_hooks');\x0d\ninternalBinding('async_wrap').setupHooks(nativeHooks);\x0d\n\x0d\nconst {\x0d\n  setupTaskQueue\x2C\x0d\n  queueMicrotask\x0d\n} = require('internal/process/task_queues');\x0d\n\x0d\nif (!config.noBrowserGlobals) {\x0d\n  // Override global console from the one provided by the VM\x0d\n  // to the one implemented by Node.js\x0d\n  // https://console.spec.whatwg.org/#console-namespace\x0d\n  exposeNamespace(globalThis\x2C 'console'\x2C\x0d\n                  createGlobalConsole(globalThis.console));\x0d\n\x0d\n  const { URL\x2C URLSearchParams } = require('internal/url');\x0d\n  // https://url.spec.whatwg.org/#url\x0d\n  exposeInterface(globalThis\x2C 'URL'\x2C URL);\x0d\n  // https://url.spec.whatwg.org/#urlsearchparams\x0d\n  exposeInterface(globalThis\x2C 'URLSearchParams'\x2C URLSearchParams);\x0d\n\x0d\n  const {\x0d\n    TextEncoder\x2C TextDecoder\x0d\n  } = require('internal/encoding');\x0d\n  // https://encoding.spec.whatwg.org/#textencoder\x0d\n  exposeInterface(globalThis\x2C 'TextEncoder'\x2C TextEncoder);\x0d\n  // https://encoding.spec.whatwg.org/#textdecoder\x0d\n  exposeInterface(globalThis\x2C 'TextDecoder'\x2C TextDecoder);\x0d\n\x0d\n  const {\x0d\n    AbortController\x2C\x0d\n    AbortSignal\x2C\x0d\n  } = require('internal/abort_controller');\x0d\n  exposeInterface(globalThis\x2C 'AbortController'\x2C AbortController);\x0d\n  exposeInterface(globalThis\x2C 'AbortSignal'\x2C AbortSignal);\x0d\n\x0d\n  const {\x0d\n    EventTarget\x2C\x0d\n    Event\x2C\x0d\n  } = require('internal/event_target');\x0d\n  exposeInterface(globalThis\x2C 'EventTarget'\x2C EventTarget);\x0d\n  exposeInterface(globalThis\x2C 'Event'\x2C Event);\x0d\n  const {\x0d\n    MessageChannel\x2C\x0d\n    MessagePort\x2C\x0d\n    MessageEvent\x2C\x0d\n  } = require('internal/worker/io');\x0d\n  exposeInterface(globalThis\x2C 'MessageChannel'\x2C MessageChannel);\x0d\n  exposeInterface(globalThis\x2C 'MessagePort'\x2C MessagePort);\x0d\n  exposeInterface(globalThis\x2C 'MessageEvent'\x2C MessageEvent);\x0d\n\x0d\n  // https://html.spec.whatwg.org/multipage/webappapis.html#windoworworkerglobalscope\x0d\n  const timers = require('timers');\x0d\n  defineOperation(globalThis\x2C 'clearInterval'\x2C timers.clearInterval);\x0d\n  defineOperation(globalThis\x2C 'clearTimeout'\x2C timers.clearTimeout);\x0d\n  defineOperation(globalThis\x2C 'setInterval'\x2C timers.setInterval);\x0d\n  defineOperation(globalThis\x2C 'setTimeout'\x2C timers.setTimeout);\x0d\n\x0d\n  defineOperation(globalThis\x2C 'queueMicrotask'\x2C queueMicrotask);\x0d\n\x0d\n  // https://www.w3.org/TR/hr-time-2/#the-performance-attribute\x0d\n  defineReplacableAttribute(globalThis\x2C 'performance'\x2C\x0d\n                            require('perf_hooks').performance);\x0d\n\x0d\n  // Non-standard extensions:\x0d\n  defineOperation(globalThis\x2C 'clearImmediate'\x2C timers.clearImmediate);\x0d\n  defineOperation(globalThis\x2C 'setImmediate'\x2C timers.setImmediate);\x0d\n}\x0d\n\x0d\n// Set the per-Environment callback that will be called\x0d\n// when the TrackingTraceStateObserver updates trace state.\x0d\n// Note that when NODE_USE_V8_PLATFORM is true\x2C the observer is\x0d\n// attached to the per-process TracingController.\x0d\nconst { setTraceCategoryStateUpdateHandler } = internalBinding('trace_events');\x0d\nsetTraceCategoryStateUpdateHandler(perThreadSetup.toggleTraceCategoryState);\x0d\n\x0d\n// process.allowedNodeEnvironmentFlags\x0d\nObjectDefineProperty(process\x2C 'allowedNodeEnvironmentFlags'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    const flags = perThreadSetup.buildAllowedFlags();\x0d\n    process.allowedNodeEnvironmentFlags = flags;\x0d\n    return process.allowedNodeEnvironmentFlags;\x0d\n  }\x2C\x0d\n  // If the user tries to set this to another value\x2C override\x0d\n  // this completely to that value.\x0d\n  set(value) {\x0d\n    ObjectDefineProperty(this\x2C 'allowedNodeEnvironmentFlags'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable: true\x2C\x0d\n      writable: true\x0d\n    });\x0d\n  }\x2C\x0d\n  enumerable: true\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\n// process.assert\x0d\nprocess.assert = deprecate(\x0d\n  perThreadSetup.assert\x2C\x0d\n  'process.assert() is deprecated. Please use the `assert` module instead.'\x2C\x0d\n  'DEP0100');\x0d\n\x0d\n// TODO(joyeecheung): this property has not been well-maintained\x2C should we\x0d\n// deprecate it in favor of a better API?\x0d\nconst { isDebugBuild\x2C hasOpenSSL\x2C hasInspector } = config;\x0d\nconst features = {\x0d\n  inspector: hasInspector\x2C\x0d\n  debug: isDebugBuild\x2C\x0d\n  uv: true\x2C\x0d\n  ipv6: true\x2C  // TODO(bnoordhuis) ping libuv\x0d\n  tls_alpn: hasOpenSSL\x2C\x0d\n  tls_sni: hasOpenSSL\x2C\x0d\n  tls_ocsp: hasOpenSSL\x2C\x0d\n  tls: hasOpenSSL\x2C\x0d\n  // This needs to be dynamic because snapshot is built without code cache.\x0d\n  // TODO(joyeecheung): https://github.com/nodejs/node/issues/31074\x0d\n  // Make it possible to build snapshot with code cache\x0d\n  get cached_builtins() {\x0d\n    return nativeModule.hasCachedBuiltins();\x0d\n  }\x0d\n};\x0d\n\x0d\nObjectDefineProperty(process\x2C 'features'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  writable: false\x2C\x0d\n  configurable: false\x2C\x0d\n  value: features\x0d\n});\x0d\n\x0d\n{\x0d\n  const {\x0d\n    onGlobalUncaughtException\x2C\x0d\n    setUncaughtExceptionCaptureCallback\x2C\x0d\n    hasUncaughtExceptionCaptureCallback\x0d\n  } = require('internal/process/execution');\x0d\n\x0d\n  // For legacy reasons this is still called `_fatalException`\x2C even\x0d\n  // though it is now a global uncaught exception handler.\x0d\n  // The C++ land node::errors::TriggerUncaughtException grabs it\x0d\n  // from the process object because it has been monkey-patchable.\x0d\n  // TODO(joyeecheung): investigate whether process._fatalException\x0d\n  // can be deprecated.\x0d\n  process._fatalException = onGlobalUncaughtException;\x0d\n  process.setUncaughtExceptionCaptureCallback =\x0d\n    setUncaughtExceptionCaptureCallback;\x0d\n  process.hasUncaughtExceptionCaptureCallback =\x0d\n    hasUncaughtExceptionCaptureCallback;\x0d\n}\x0d\n\x0d\nconst { emitWarning } = require('internal/process/warning');\x0d\nprocess.emitWarning = emitWarning;\x0d\n\x0d\n// We initialize the tick callbacks and the timer callbacks last during\x0d\n// bootstrap to make sure that any operation done before this are synchronous.\x0d\n// If any ticks or timers are scheduled before this they are unlikely to work.\x0d\n{\x0d\n  const { nextTick\x2C runNextTicks } = setupTaskQueue();\x0d\n  process.nextTick = nextTick;\x0d\n  // Used to emulate a tick manually in the JS land.\x0d\n  // A better name for this function would be `runNextTicks` but\x0d\n  // it has been exposed to the process object so we keep this legacy name\x0d\n  // TODO(joyeecheung): either remove it or make it public\x0d\n  process._tickCallback = runNextTicks;\x0d\n\x0d\n  const { setupTimers } = internalBinding('timers');\x0d\n  const {\x0d\n    processImmediate\x2C\x0d\n    processTimers\x2C\x0d\n  } = internalTimers.getTimerCallbacks(runNextTicks);\x0d\n  // Sets two per-Environment callbacks that will be run from libuv:\x0d\n  // - processImmediate will be run in the callback of the per-Environment\x0d\n  //   check handle.\x0d\n  // - processTimers will be run in the callback of the per-Environment timer.\x0d\n  setupTimers(processImmediate\x2C processTimers);\x0d\n  // Note: only after this point are the timers effective\x0d\n}\x0d\n\x0d\n// Preload modules so that they are included in the builtin snapshot.\x0d\nrequire('fs');\x0d\nrequire('v8');\x0d\nrequire('vm');\x0d\nrequire('url');\x0d\nrequire('internal/options');\x0d\n\x0d\nfunction setupPrepareStackTrace() {\x0d\n  const {\x0d\n    setEnhanceStackForFatalException\x2C\x0d\n    setPrepareStackTraceCallback\x0d\n  } = internalBinding('errors');\x0d\n  const {\x0d\n    prepareStackTrace\x2C\x0d\n    fatalExceptionStackEnhancers: {\x0d\n      beforeInspector\x2C\x0d\n      afterInspector\x0d\n    }\x0d\n  } = require('internal/errors');\x0d\n  // Tell our PrepareStackTraceCallback passed to the V8 API\x0d\n  // to call prepareStackTrace().\x0d\n  setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  // Set the function used to enhance the error stack for printing\x0d\n  setEnhanceStackForFatalException(beforeInspector\x2C afterInspector);\x0d\n}\x0d\n\x0d\nfunction setupProcessObject() {\x0d\n  const EventEmitter = require('events');\x0d\n  const origProcProto = ObjectGetPrototypeOf(process);\x0d\n  ObjectSetPrototypeOf(origProcProto\x2C EventEmitter.prototype);\x0d\n  FunctionPrototypeCall(EventEmitter\x2C process);\x0d\n  ObjectDefineProperty(process\x2C SymbolToStringTag\x2C {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: false\x2C\x0d\n    value: 'process'\x0d\n  });\x0d\n  // Make process globally available to users by putting it on the global proxy\x0d\n  ObjectDefineProperty(globalThis\x2C 'process'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: process\x2C\x0d\n    enumerable: false\x2C\x0d\n    writable: true\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction setupGlobalProxy() {\x0d\n  ObjectDefineProperty(globalThis\x2C SymbolToStringTag\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: 'global'\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x0d\n  });\x0d\n  globalThis.global = globalThis;\x0d\n}\x0d\n\x0d\nfunction setupBuffer() {\x0d\n  const {\x0d\n    Buffer\x2C\x0d\n    atob\x2C\x0d\n    btoa\x2C\x0d\n  } = require('buffer');\x0d\n  const bufferBinding = internalBinding('buffer');\x0d\n\x0d\n  // Only after this point can C++ use Buffer::New()\x0d\n  bufferBinding.setBufferPrototype(Buffer.prototype);\x0d\n  delete bufferBinding.setBufferPrototype;\x0d\n  delete bufferBinding.zeroFill;\x0d\n\x0d\n  ObjectDefineProperties(globalThis\x2C {\x0d\n    'Buffer': {\x0d\n      __proto__: null\x2C\x0d\n      value: Buffer\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n    'atob': {\x0d\n      __proto__: null\x2C\x0d\n      value: atob\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n    'btoa': {\x0d\n      __proto__: null\x2C\x0d\n      value: btoa\x2C\x0d\n      enumerable: false\x2C\x0d\n      writable: true\x2C\x0d\n      configurable: true\x2C\x0d\n    }\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction createGlobalConsole(consoleFromVM) {\x0d\n  const consoleFromNode =\x0d\n    require('internal/console/global');\x0d\n  if (config.hasInspector) {\x0d\n    const inspector = require('internal/util/inspector');\x0d\n    // This will be exposed by `require('inspector').console` later.\x0d\n    inspector.consoleFromVM = consoleFromVM;\x0d\n    // TODO(joyeecheung): postpone this until the first time inspector\x0d\n    // is activated.\x0d\n    inspector.wrapConsole(consoleFromNode\x2C consoleFromVM);\x0d\n    const { setConsoleExtensionInstaller } = internalBinding('inspector');\x0d\n    // Setup inspector command line API.\x0d\n    setConsoleExtensionInstaller(inspector.installConsoleExtensions);\x0d\n  }\x0d\n  return consoleFromNode;\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-namespaces\x0d\nfunction exposeNamespace(target\x2C name\x2C namespaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: namespaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-interfaces\x0d\nfunction exposeInterface(target\x2C name\x2C interfaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: interfaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#define-the-operations\x0d\nfunction defineOperation(target\x2C name\x2C method) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value: method\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#Replaceable\x0d\nfunction defineReplacableAttribute(target\x2C name\x2C value) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value\x2C\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x2f2f3a15be6,10,3869,3938,C0O3886C9O3917C16O3915C21O3937,,
code-creation,LazyCompile,10,326938,0x2f2f3a1708e,832,resolve node:path:158:10,0x32ebb7cd4f0,~
script-source,41,node:path,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  CHAR_UPPERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_UPPERCASE_Z\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_DOT\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x2C\x0d\n  CHAR_QUESTION_MARK\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst platformIsWin32 = (process.platform === 'win32');\x0d\n\x0d\nfunction isPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isPosixPathSeparator(code) {\x0d\n  return code === CHAR_FORWARD_SLASH;\x0d\n}\x0d\n\x0d\nfunction isWindowsDeviceRoot(code) {\x0d\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\x0d\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\x0d\n}\x0d\n\x0d\n// Resolves . and .. elements in a path with directory names\x0d\nfunction normalizeString(path\x2C allowAboveRoot\x2C separator\x2C isPathSeparator) {\x0d\n  let res = '';\x0d\n  let lastSegmentLength = 0;\x0d\n  let lastSlash = -1;\x0d\n  let dots = 0;\x0d\n  let code = 0;\x0d\n  for (let i = 0; i <= path.length; ++i) {\x0d\n    if (i < path.length)\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n    else if (isPathSeparator(code))\x0d\n      break;\x0d\n    else\x0d\n      code = CHAR_FORWARD_SLASH;\x0d\n\x0d\n    if (isPathSeparator(code)) {\x0d\n      if (lastSlash === i - 1 || dots === 1) {\x0d\n        // NOOP\x0d\n      } else if (dots === 2) {\x0d\n        if (res.length < 2 || lastSegmentLength !== 2 ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 1) !== CHAR_DOT ||\x0d\n            StringPrototypeCharCodeAt(res\x2C res.length - 2) !== CHAR_DOT) {\x0d\n          if (res.length > 2) {\x0d\n            const lastSlashIndex = StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            if (lastSlashIndex === -1) {\x0d\n              res = '';\x0d\n              lastSegmentLength = 0;\x0d\n            } else {\x0d\n              res = StringPrototypeSlice(res\x2C 0\x2C lastSlashIndex);\x0d\n              lastSegmentLength =\x0d\n                res.length - 1 - StringPrototypeLastIndexOf(res\x2C separator);\x0d\n            }\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          } else if (res.length !== 0) {\x0d\n            res = '';\x0d\n            lastSegmentLength = 0;\x0d\n            lastSlash = i;\x0d\n            dots = 0;\x0d\n            continue;\x0d\n          }\x0d\n        }\x0d\n        if (allowAboveRoot) {\x0d\n          res += res.length > 0 ? `${separator}..` : '..';\x0d\n          lastSegmentLength = 2;\x0d\n        }\x0d\n      } else {\x0d\n        if (res.length > 0)\x0d\n          res += `${separator}${StringPrototypeSlice(path\x2C lastSlash + 1\x2C i)}`;\x0d\n        else\x0d\n          res = StringPrototypeSlice(path\x2C lastSlash + 1\x2C i);\x0d\n        lastSegmentLength = i - lastSlash - 1;\x0d\n      }\x0d\n      lastSlash = i;\x0d\n      dots = 0;\x0d\n    } else if (code === CHAR_DOT && dots !== -1) {\x0d\n      ++dots;\x0d\n    } else {\x0d\n      dots = -1;\x0d\n    }\x0d\n  }\x0d\n  return res;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} sep\x0d\n * @param {{\x0d\n *  dir?: string;\x0d\n *  root?: string;\x0d\n *  base?: string;\x0d\n *  name?: string;\x0d\n *  ext?: string;\x0d\n *  }} pathObject\x0d\n * @returns {string}\x0d\n */\x0d\nfunction _format(sep\x2C pathObject) {\x0d\n  validateObject(pathObject\x2C 'pathObject');\x0d\n  const dir = pathObject.dir || pathObject.root;\x0d\n  const base = pathObject.base ||\x0d\n    `${pathObject.name || ''}${pathObject.ext || ''}`;\x0d\n  if (!dir) {\x0d\n    return base;\x0d\n  }\x0d\n  return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\x0d\n}\x0d\n\x0d\nconst win32 = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedDevice = '';\x0d\n    let resolvedTail = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1; i--) {\x0d\n      let path;\x0d\n      if (i >= 0) {\x0d\n        path = args[i];\x0d\n        validateString(path\x2C 'path');\x0d\n\x0d\n        // Skip empty entries\x0d\n        if (path.length === 0) {\x0d\n          continue;\x0d\n        }\x0d\n      } else if (resolvedDevice.length === 0) {\x0d\n        path = process.cwd();\x0d\n      } else {\x0d\n        // Windows has the concept of drive-specific current working\x0d\n        // directories. If we've resolved a drive letter but not yet an\x0d\n        // absolute path\x2C get cwd for that drive\x2C or the process cwd if\x0d\n        // the drive cwd is not available. We're sure the device is not\x0d\n        // a UNC path at this points\x2C because UNC paths are always absolute.\x0d\n        path = process.env[`=${resolvedDevice}`] || process.cwd();\x0d\n\x0d\n        // Verify that a cwd was found and that it actually points\x0d\n        // to our drive. If not\x2C default to the drive's root.\x0d\n        if (path === undefined ||\x0d\n            (StringPrototypeToLowerCase(StringPrototypeSlice(path\x2C 0\x2C 2)) !==\x0d\n            StringPrototypeToLowerCase(resolvedDevice) &&\x0d\n            StringPrototypeCharCodeAt(path\x2C 2) === CHAR_BACKWARD_SLASH)) {\x0d\n          path = `${resolvedDevice}\\\\`;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      const len = path.length;\x0d\n      let rootEnd = 0;\x0d\n      let device = '';\x0d\n      let isAbsolute = false;\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n      // Try to match a root\x0d\n      if (len === 1) {\x0d\n        if (isPathSeparator(code)) {\x0d\n          // `path` contains just a path separator\x0d\n          rootEnd = 1;\x0d\n          isAbsolute = true;\x0d\n        }\x0d\n      } else if (isPathSeparator(code)) {\x0d\n        // Possible UNC root\x0d\n\x0d\n        // If we started with a separator\x2C we know we at least have an\x0d\n        // absolute path of some kind (UNC or otherwise)\x0d\n        isAbsolute = true;\x0d\n\x0d\n        if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n          // Matched double path separator at beginning\x0d\n          let j = 2;\x0d\n          let last = j;\x0d\n          // Match 1 or more non-path separators\x0d\n          while (j < len &&\x0d\n                 !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more path separators\x0d\n            while (j < len &&\x0d\n                   isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j < len && j !== last) {\x0d\n              // Matched!\x0d\n              last = j;\x0d\n              // Match 1 or more non-path separators\x0d\n              while (j < len &&\x0d\n                     !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n                j++;\x0d\n              }\x0d\n              if (j === len || j !== last) {\x0d\n                // We matched a UNC root\x0d\n                device =\x0d\n                  `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n                rootEnd = j;\x0d\n              }\x0d\n            }\x0d\n          }\x0d\n        } else {\x0d\n          rootEnd = 1;\x0d\n        }\x0d\n      } else if (isWindowsDeviceRoot(code) &&\x0d\n                  StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n        // Possible device root\x0d\n        device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n        rootEnd = 2;\x0d\n        if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n          // Treat separator following drive name as an absolute path\x0d\n          // indicator\x0d\n          isAbsolute = true;\x0d\n          rootEnd = 3;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (device.length > 0) {\x0d\n        if (resolvedDevice.length > 0) {\x0d\n          if (StringPrototypeToLowerCase(device) !==\x0d\n              StringPrototypeToLowerCase(resolvedDevice))\x0d\n            // This path points to another device so it is not applicable\x0d\n            continue;\x0d\n        } else {\x0d\n          resolvedDevice = device;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (resolvedAbsolute) {\x0d\n        if (resolvedDevice.length > 0)\x0d\n          break;\x0d\n      } else {\x0d\n        resolvedTail =\x0d\n          `${StringPrototypeSlice(path\x2C rootEnd)}\\\\${resolvedTail}`;\x0d\n        resolvedAbsolute = isAbsolute;\x0d\n        if (isAbsolute && resolvedDevice.length > 0) {\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C\x0d\n    // but handle relative paths to be safe (might happen when process.cwd()\x0d\n    // fails)\x0d\n\x0d\n    // Normalize the tail path\x0d\n    resolvedTail = normalizeString(resolvedTail\x2C !resolvedAbsolute\x2C '\\\\'\x2C\x0d\n                                   isPathSeparator);\x0d\n\x0d\n    return resolvedAbsolute ?\x0d\n      `${resolvedDevice}\\\\${resolvedTail}` :\x0d\n      `${resolvedDevice}${resolvedTail}` || '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = 0;\x0d\n    let device;\x0d\n    let isAbsolute = false;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    // Try to match a root\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a single char\x2C exit early to avoid\x0d\n      // unnecessary work\x0d\n      return isPosixPathSeparator(code) ? '\\\\' : path;\x0d\n    }\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      // If we started with a separator\x2C we know we at least have an absolute\x0d\n      // path of some kind (UNC or otherwise)\x0d\n      isAbsolute = true;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          const firstPart = StringPrototypeSlice(path\x2C last\x2C j);\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              // Return the normalized version of the UNC root since there\x0d\n              // is nothing left to process\x0d\n              return `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last)}\\\\`;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              device =\x0d\n                `\\\\\\\\${firstPart}\\\\${StringPrototypeSlice(path\x2C last\x2C j)}`;\x0d\n              rootEnd = j;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      } else {\x0d\n        rootEnd = 1;\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      device = StringPrototypeSlice(path\x2C 0\x2C 2);\x0d\n      rootEnd = 2;\x0d\n      if (len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        // Treat separator following drive name as an absolute path\x0d\n        // indicator\x0d\n        isAbsolute = true;\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let tail = rootEnd < len ?\x0d\n      normalizeString(StringPrototypeSlice(path\x2C rootEnd)\x2C\x0d\n                      !isAbsolute\x2C '\\\\'\x2C isPathSeparator) :\x0d\n      '';\x0d\n    if (tail.length === 0 && !isAbsolute)\x0d\n      tail = '.';\x0d\n    if (tail.length > 0 &&\x0d\n        isPathSeparator(StringPrototypeCharCodeAt(path\x2C len - 1)))\x0d\n      tail += '\\\\';\x0d\n    if (device === undefined) {\x0d\n      return isAbsolute ? `\\\\${tail}` : tail;\x0d\n    }\x0d\n    return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return false;\x0d\n\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n    return isPathSeparator(code) ||\x0d\n      // Possible device root\x0d\n      (len > 2 &&\x0d\n      isWindowsDeviceRoot(code) &&\x0d\n      StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n      isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)));\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    let joined;\x0d\n    let firstPart;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = firstPart = arg;\x0d\n        else\x0d\n          joined += `\\\\${arg}`;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n\x0d\n    // Make sure that the joined path doesn't start with two slashes\x2C because\x0d\n    // normalize() will mistake it for a UNC path then.\x0d\n    //\x0d\n    // This step is skipped when it is very clear that the user actually\x0d\n    // intended to point at a UNC path. This is assumed when the first\x0d\n    // non-empty string arguments starts with exactly two slashes followed by\x0d\n    // at least one more non-slash character.\x0d\n    //\x0d\n    // Note that for normalize() to treat a path as a UNC path it needs to\x0d\n    // have at least 2 components\x2C so we don't filter for that here.\x0d\n    // This means that the user can use join to construct UNC paths from\x0d\n    // a server name and a share name; for example:\x0d\n    //   path.join('//server'\x2C 'share') -> '\\\\\\\\server\\\\share\\\\')\x0d\n    let needsReplace = true;\x0d\n    let slashCount = 0;\x0d\n    if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 0))) {\x0d\n      ++slashCount;\x0d\n      const firstLen = firstPart.length;\x0d\n      if (firstLen > 1 &&\x0d\n          isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 1))) {\x0d\n        ++slashCount;\x0d\n        if (firstLen > 2) {\x0d\n          if (isPathSeparator(StringPrototypeCharCodeAt(firstPart\x2C 2)))\x0d\n            ++slashCount;\x0d\n          else {\x0d\n            // We matched a UNC path in the first part\x0d\n            needsReplace = false;\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    if (needsReplace) {\x0d\n      // Find any more consecutive slashes we need to replace\x0d\n      while (slashCount < joined.length &&\x0d\n             isPathSeparator(StringPrototypeCharCodeAt(joined\x2C slashCount))) {\x0d\n        slashCount++;\x0d\n      }\x0d\n\x0d\n      // Replace the slashes if needed\x0d\n      if (slashCount >= 2)\x0d\n        joined = `\\\\${StringPrototypeSlice(joined\x2C slashCount)}`;\x0d\n    }\x0d\n\x0d\n    return win32.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * It will solve the relative path from `from` to `to`\x2C for instance\x0d\n   * from = 'C:\\\\orandea\\\\test\\\\aaa'\x0d\n   * to = 'C:\\\\orandea\\\\impl\\\\bbb'\x0d\n   * The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromOrig = win32.resolve(from);\x0d\n    const toOrig = win32.resolve(to);\x0d\n\x0d\n    if (fromOrig === toOrig)\x0d\n      return '';\x0d\n\x0d\n    from = StringPrototypeToLowerCase(fromOrig);\x0d\n    to = StringPrototypeToLowerCase(toOrig);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let fromStart = 0;\x0d\n    while (fromStart < from.length &&\x0d\n           StringPrototypeCharCodeAt(from\x2C fromStart) === CHAR_BACKWARD_SLASH) {\x0d\n      fromStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let fromEnd = from.length;\x0d\n    while (\x0d\n      fromEnd - 1 > fromStart &&\x0d\n      StringPrototypeCharCodeAt(from\x2C fromEnd - 1) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      fromEnd--;\x0d\n    }\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n\x0d\n    // Trim any leading backslashes\x0d\n    let toStart = 0;\x0d\n    while (toStart < to.length &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toStart) === CHAR_BACKWARD_SLASH) {\x0d\n      toStart++;\x0d\n    }\x0d\n    // Trim trailing backslashes (applicable to UNC paths only)\x0d\n    let toEnd = to.length;\x0d\n    while (toEnd - 1 > toStart &&\x0d\n           StringPrototypeCharCodeAt(to\x2C toEnd - 1) === CHAR_BACKWARD_SLASH) {\x0d\n      toEnd--;\x0d\n    }\x0d\n    const toLen = toEnd - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = fromLen < toLen ? fromLen : toLen;\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_BACKWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n\x0d\n    // We found a mismatch before the first common path separator was seen\x2C so\x0d\n    // return the original `to`.\x0d\n    if (i !== length) {\x0d\n      if (lastCommonSep === -1)\x0d\n        return toOrig;\x0d\n    } else {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 2) {\x0d\n          // We get here if `from` is the device root.\x0d\n          // For example: from='C:\\\\'; to='C:\\\\foo'\x0d\n          return StringPrototypeSlice(toOrig\x2C toStart + i);\x0d\n        }\x0d\n      }\x0d\n      if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_BACKWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 2) {\x0d\n          // We get here if `to` is the device root.\x0d\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\x0d\n          lastCommonSep = 3;\x0d\n        }\x0d\n      }\x0d\n      if (lastCommonSep === -1)\x0d\n        lastCommonSep = 0;\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to` and\x0d\n    // `from`\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_BACKWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '\\\\..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    toStart += lastCommonSep;\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts\x0d\n    if (out.length > 0)\x0d\n      return `${out}${StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd)}`;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(toOrig\x2C toStart) === CHAR_BACKWARD_SLASH)\x0d\n      ++toStart;\x0d\n    return StringPrototypeSlice(toOrig\x2C toStart\x2C toEnd);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Note: this will *probably* throw somewhere.\x0d\n    if (typeof path !== 'string' || path.length === 0)\x0d\n      return path;\x0d\n\x0d\n    const resolvedPath = win32.resolve(path);\x0d\n\x0d\n    if (resolvedPath.length <= 2)\x0d\n      return path;\x0d\n\x0d\n    if (StringPrototypeCharCodeAt(resolvedPath\x2C 0) === CHAR_BACKWARD_SLASH) {\x0d\n      // Possible UNC root\x0d\n      if (StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_BACKWARD_SLASH) {\x0d\n        const code = StringPrototypeCharCodeAt(resolvedPath\x2C 2);\x0d\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\x0d\n          // Matched non-long UNC root\x2C convert the path to a long UNC path\x0d\n          return `\\\\\\\\?\\\\UNC\\\\${StringPrototypeSlice(resolvedPath\x2C 2)}`;\x0d\n        }\x0d\n      }\x0d\n    } else if (\x0d\n      isWindowsDeviceRoot(StringPrototypeCharCodeAt(resolvedPath\x2C 0)) &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 1) === CHAR_COLON &&\x0d\n      StringPrototypeCharCodeAt(resolvedPath\x2C 2) === CHAR_BACKWARD_SLASH\x0d\n    ) {\x0d\n      // Matched device root\x2C convert the path to a long UNC path\x0d\n      return `\\\\\\\\?\\\\${resolvedPath}`;\x0d\n    }\x0d\n\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    const len = path.length;\x0d\n    if (len === 0)\x0d\n      return '.';\x0d\n    let rootEnd = -1;\x0d\n    let offset = 0;\x0d\n    const code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      // `path` contains just a path separator\x2C exit early to avoid\x0d\n      // unnecessary work or a dot.\x0d\n      return isPathSeparator(code) ? path : '.';\x0d\n    }\x0d\n\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = offset = 1;\x0d\n\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              return path;\x0d\n            }\x0d\n            if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n\x0d\n              // Offset by 1 to include the separator after the UNC root to\x0d\n              // treat it as a "normal root" on top of a (UNC) root\x0d\n              rootEnd = offset = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    // Possible device root\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      rootEnd =\x0d\n        len > 2 && isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2)) ? 3 : 2;\x0d\n      offset = rootEnd;\x0d\n    }\x0d\n\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = len - 1; i >= offset; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1) {\x0d\n      if (rootEnd === -1)\x0d\n        return '.';\x0d\n\x0d\n      end = rootEnd;\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [suffix]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C suffix) {\x0d\n    if (suffix !== undefined)\x0d\n      validateString(suffix\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n    if (path.length >= 2 &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0)) &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      start = 2;\x0d\n    }\x0d\n\x0d\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\x0d\n      if (suffix === path)\x0d\n        return '';\x0d\n      let extIdx = suffix.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= start; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (isPathSeparator(code)) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(suffix\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C i))) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let start = 0;\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Check for a drive letter prefix so as not to mistake the following\x0d\n    // path separator as an extra separator at the end of the path that can be\x0d\n    // disregarded\x0d\n\x0d\n    if (path.length >= 2 &&\x0d\n        StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON &&\x0d\n        isWindowsDeviceRoot(StringPrototypeCharCodeAt(path\x2C 0))) {\x0d\n      start = startPart = 2;\x0d\n    }\x0d\n\x0d\n    for (let i = path.length - 1; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '\\\\')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *  dir: string;\x0d\n   *  root: string;\x0d\n   *  base: string;\x0d\n   *  name: string;\x0d\n   *  ext: string;\x0d\n   *  }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n\x0d\n    const len = path.length;\x0d\n    let rootEnd = 0;\x0d\n    let code = StringPrototypeCharCodeAt(path\x2C 0);\x0d\n\x0d\n    if (len === 1) {\x0d\n      if (isPathSeparator(code)) {\x0d\n        // `path` contains just a path separator\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      ret.base = ret.name = path;\x0d\n      return ret;\x0d\n    }\x0d\n    // Try to match a root\x0d\n    if (isPathSeparator(code)) {\x0d\n      // Possible UNC root\x0d\n\x0d\n      rootEnd = 1;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 1))) {\x0d\n        // Matched double path separator at beginning\x0d\n        let j = 2;\x0d\n        let last = j;\x0d\n        // Match 1 or more non-path separators\x0d\n        while (j < len &&\x0d\n               !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n          j++;\x0d\n        }\x0d\n        if (j < len && j !== last) {\x0d\n          // Matched!\x0d\n          last = j;\x0d\n          // Match 1 or more path separators\x0d\n          while (j < len &&\x0d\n                 isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n            j++;\x0d\n          }\x0d\n          if (j < len && j !== last) {\x0d\n            // Matched!\x0d\n            last = j;\x0d\n            // Match 1 or more non-path separators\x0d\n            while (j < len &&\x0d\n                   !isPathSeparator(StringPrototypeCharCodeAt(path\x2C j))) {\x0d\n              j++;\x0d\n            }\x0d\n            if (j === len) {\x0d\n              // We matched a UNC root only\x0d\n              rootEnd = j;\x0d\n            } else if (j !== last) {\x0d\n              // We matched a UNC root with leftovers\x0d\n              rootEnd = j + 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (isWindowsDeviceRoot(code) &&\x0d\n               StringPrototypeCharCodeAt(path\x2C 1) === CHAR_COLON) {\x0d\n      // Possible device root\x0d\n      if (len <= 2) {\x0d\n        // `path` contains just a drive root\x2C exit early to avoid\x0d\n        // unnecessary work\x0d\n        ret.root = ret.dir = path;\x0d\n        return ret;\x0d\n      }\x0d\n      rootEnd = 2;\x0d\n      if (isPathSeparator(StringPrototypeCharCodeAt(path\x2C 2))) {\x0d\n        if (len === 3) {\x0d\n          // `path` contains just a drive root\x2C exit early to avoid\x0d\n          // unnecessary work\x0d\n          ret.root = ret.dir = path;\x0d\n          return ret;\x0d\n        }\x0d\n        rootEnd = 3;\x0d\n      }\x0d\n    }\x0d\n    if (rootEnd > 0)\x0d\n      ret.root = StringPrototypeSlice(path\x2C 0\x2C rootEnd);\x0d\n\x0d\n    let startDot = -1;\x0d\n    let startPart = rootEnd;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= rootEnd; --i) {\x0d\n      code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (isPathSeparator(code)) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n           startDot === end - 1 &&\x0d\n           startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C startPart\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C startPart\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // If the directory is the root\x2C use the entire root as the `dir` including\x0d\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise\x2C strip out the\x0d\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\x0d\n    if (startPart > 0 && startPart !== rootEnd)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else\x0d\n      ret.dir = ret.root;\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '\\\\'\x2C\x0d\n  delimiter: ';'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nconst posixCwd = (() => {\x0d\n  if (platformIsWin32) {\x0d\n    // Converts Windows' backslash path separators to POSIX forward slashes\x0d\n    // and truncates any drive indicator\x0d\n    const regexp = /\\\\/g;\x0d\n    return () => {\x0d\n      const cwd = StringPrototypeReplace(process.cwd()\x2C regexp\x2C '/');\x0d\n      return StringPrototypeSlice(cwd\x2C StringPrototypeIndexOf(cwd\x2C '/'));\x0d\n    };\x0d\n  }\x0d\n\x0d\n  // We're already on POSIX\x2C no need for any transformations\x0d\n  return () => process.cwd();\x0d\n})();\x0d\n\x0d\nconst posix = {\x0d\n  /**\x0d\n   * path.resolve([from ...]\x2C to)\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  resolve(...args) {\x0d\n    let resolvedPath = '';\x0d\n    let resolvedAbsolute = false;\x0d\n\x0d\n    for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\x0d\n      const path = i >= 0 ? args[i] : posixCwd();\x0d\n\x0d\n      validateString(path\x2C 'path');\x0d\n\x0d\n      // Skip empty entries\x0d\n      if (path.length === 0) {\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      resolvedPath = `${path}/${resolvedPath}`;\x0d\n      resolvedAbsolute =\x0d\n        StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    }\x0d\n\x0d\n    // At this point the path should be resolved to a full absolute path\x2C but\x0d\n    // handle relative paths to be safe (might happen when process.cwd() fails)\x0d\n\x0d\n    // Normalize the path\x0d\n    resolvedPath = normalizeString(resolvedPath\x2C !resolvedAbsolute\x2C '/'\x2C\x0d\n                                   isPosixPathSeparator);\x0d\n\x0d\n    if (resolvedAbsolute) {\x0d\n      return `/${resolvedPath}`;\x0d\n    }\x0d\n    return resolvedPath.length > 0 ? resolvedPath : '.';\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  normalize(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    const trailingSeparator =\x0d\n      StringPrototypeCharCodeAt(path\x2C path.length - 1) === CHAR_FORWARD_SLASH;\x0d\n\x0d\n    // Normalize the path\x0d\n    path = normalizeString(path\x2C !isAbsolute\x2C '/'\x2C isPosixPathSeparator);\x0d\n\x0d\n    if (path.length === 0) {\x0d\n      if (isAbsolute)\x0d\n        return '/';\x0d\n      return trailingSeparator ? './' : '.';\x0d\n    }\x0d\n    if (trailingSeparator)\x0d\n      path += '/';\x0d\n\x0d\n    return isAbsolute ? `/${path}` : path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  isAbsolute(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    return path.length > 0 &&\x0d\n           StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {...string} args\x0d\n   * @returns {string}\x0d\n   */\x0d\n  join(...args) {\x0d\n    if (args.length === 0)\x0d\n      return '.';\x0d\n    let joined;\x0d\n    for (let i = 0; i < args.length; ++i) {\x0d\n      const arg = args[i];\x0d\n      validateString(arg\x2C 'path');\x0d\n      if (arg.length > 0) {\x0d\n        if (joined === undefined)\x0d\n          joined = arg;\x0d\n        else\x0d\n          joined += `/${arg}`;\x0d\n      }\x0d\n    }\x0d\n    if (joined === undefined)\x0d\n      return '.';\x0d\n    return posix.normalize(joined);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} from\x0d\n   * @param {string} to\x0d\n   * @returns {string}\x0d\n   */\x0d\n  relative(from\x2C to) {\x0d\n    validateString(from\x2C 'from');\x0d\n    validateString(to\x2C 'to');\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    // Trim leading forward slashes.\x0d\n    from = posix.resolve(from);\x0d\n    to = posix.resolve(to);\x0d\n\x0d\n    if (from === to)\x0d\n      return '';\x0d\n\x0d\n    const fromStart = 1;\x0d\n    const fromEnd = from.length;\x0d\n    const fromLen = fromEnd - fromStart;\x0d\n    const toStart = 1;\x0d\n    const toLen = to.length - toStart;\x0d\n\x0d\n    // Compare paths to find the longest common path from root\x0d\n    const length = (fromLen < toLen ? fromLen : toLen);\x0d\n    let lastCommonSep = -1;\x0d\n    let i = 0;\x0d\n    for (; i < length; i++) {\x0d\n      const fromCode = StringPrototypeCharCodeAt(from\x2C fromStart + i);\x0d\n      if (fromCode !== StringPrototypeCharCodeAt(to\x2C toStart + i))\x0d\n        break;\x0d\n      else if (fromCode === CHAR_FORWARD_SLASH)\x0d\n        lastCommonSep = i;\x0d\n    }\x0d\n    if (i === length) {\x0d\n      if (toLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(to\x2C toStart + i) === CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `from` is the exact base path for `to`.\x0d\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i + 1);\x0d\n        }\x0d\n        if (i === 0) {\x0d\n          // We get here if `from` is the root\x0d\n          // For example: from='/'; to='/foo'\x0d\n          return StringPrototypeSlice(to\x2C toStart + i);\x0d\n        }\x0d\n      } else if (fromLen > length) {\x0d\n        if (StringPrototypeCharCodeAt(from\x2C fromStart + i) ===\x0d\n            CHAR_FORWARD_SLASH) {\x0d\n          // We get here if `to` is the exact base path for `from`.\x0d\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\x0d\n          lastCommonSep = i;\x0d\n        } else if (i === 0) {\x0d\n          // We get here if `to` is the root.\x0d\n          // For example: from='/foo/bar'; to='/'\x0d\n          lastCommonSep = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let out = '';\x0d\n    // Generate the relative path based on the path difference between `to`\x0d\n    // and `from`.\x0d\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\x0d\n      if (i === fromEnd ||\x0d\n          StringPrototypeCharCodeAt(from\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        out += out.length === 0 ? '..' : '/..';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Lastly\x2C append the rest of the destination (`to`) path that comes after\x0d\n    // the common path parts.\x0d\n    return `${out}${StringPrototypeSlice(to\x2C toStart + lastCommonSep)}`;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  toNamespacedPath(path) {\x0d\n    // Non-op on posix systems\x0d\n    return path;\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  dirname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    if (path.length === 0)\x0d\n      return '.';\x0d\n    const hasRoot = StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    for (let i = path.length - 1; i >= 1; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        if (!matchedSlash) {\x0d\n          end = i;\x0d\n          break;\x0d\n        }\x0d\n      } else {\x0d\n        // We saw the first non-path separator\x0d\n        matchedSlash = false;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return hasRoot ? '/' : '.';\x0d\n    if (hasRoot && end === 1)\x0d\n      return '//';\x0d\n    return StringPrototypeSlice(path\x2C 0\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @param {string} [suffix]\x0d\n   * @returns {string}\x0d\n   */\x0d\n  basename(path\x2C suffix) {\x0d\n    if (suffix !== undefined)\x0d\n      validateString(suffix\x2C 'ext');\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    let start = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n\x0d\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\x0d\n      if (suffix === path)\x0d\n        return '';\x0d\n      let extIdx = suffix.length - 1;\x0d\n      let firstNonSlashEnd = -1;\x0d\n      for (let i = path.length - 1; i >= 0; --i) {\x0d\n        const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n        if (code === CHAR_FORWARD_SLASH) {\x0d\n          // If we reached a path separator that was not part of a set of path\x0d\n          // separators at the end of the string\x2C stop now\x0d\n          if (!matchedSlash) {\x0d\n            start = i + 1;\x0d\n            break;\x0d\n          }\x0d\n        } else {\x0d\n          if (firstNonSlashEnd === -1) {\x0d\n            // We saw the first non-path separator\x2C remember this index in case\x0d\n            // we need it if the extension ends up not matching\x0d\n            matchedSlash = false;\x0d\n            firstNonSlashEnd = i + 1;\x0d\n          }\x0d\n          if (extIdx >= 0) {\x0d\n            // Try to match the explicit extension\x0d\n            if (code === StringPrototypeCharCodeAt(suffix\x2C extIdx)) {\x0d\n              if (--extIdx === -1) {\x0d\n                // We matched the extension\x2C so mark this as the end of our path\x0d\n                // component\x0d\n                end = i;\x0d\n              }\x0d\n            } else {\x0d\n              // Extension does not match\x2C so our result is the entire path\x0d\n              // component\x0d\n              extIdx = -1;\x0d\n              end = firstNonSlashEnd;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (start === end)\x0d\n        end = firstNonSlashEnd;\x0d\n      else if (end === -1)\x0d\n        end = path.length;\x0d\n      return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n    }\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      if (StringPrototypeCharCodeAt(path\x2C i) === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          start = i + 1;\x0d\n          break;\x0d\n        }\x0d\n      } else if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // path component\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end === -1)\x0d\n      return '';\x0d\n    return StringPrototypeSlice(path\x2C start\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {string}\x0d\n   */\x0d\n  extname(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n    for (let i = path.length - 1; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startDot === -1 ||\x0d\n        end === -1 ||\x0d\n        // We saw a non-dot character immediately before the dot\x0d\n        preDotState === 0 ||\x0d\n        // The (right-most) trimmed path component is exactly '..'\x0d\n        (preDotState === 1 &&\x0d\n         startDot === end - 1 &&\x0d\n         startDot === startPart + 1)) {\x0d\n      return '';\x0d\n    }\x0d\n    return StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n  }\x2C\x0d\n\x0d\n  format: FunctionPrototypeBind(_format\x2C null\x2C '/')\x2C\x0d\n\x0d\n  /**\x0d\n   * @param {string} path\x0d\n   * @returns {{\x0d\n   *   dir: string;\x0d\n   *   root: string;\x0d\n   *   base: string;\x0d\n   *   name: string;\x0d\n   *   ext: string;\x0d\n   *   }}\x0d\n   */\x0d\n  parse(path) {\x0d\n    validateString(path\x2C 'path');\x0d\n\x0d\n    const ret = { root: ''\x2C dir: ''\x2C base: ''\x2C ext: ''\x2C name: '' };\x0d\n    if (path.length === 0)\x0d\n      return ret;\x0d\n    const isAbsolute =\x0d\n      StringPrototypeCharCodeAt(path\x2C 0) === CHAR_FORWARD_SLASH;\x0d\n    let start;\x0d\n    if (isAbsolute) {\x0d\n      ret.root = '/';\x0d\n      start = 1;\x0d\n    } else {\x0d\n      start = 0;\x0d\n    }\x0d\n    let startDot = -1;\x0d\n    let startPart = 0;\x0d\n    let end = -1;\x0d\n    let matchedSlash = true;\x0d\n    let i = path.length - 1;\x0d\n\x0d\n    // Track the state of characters (if any) we see before our first dot and\x0d\n    // after any path separator we find\x0d\n    let preDotState = 0;\x0d\n\x0d\n    // Get non-dir info\x0d\n    for (; i >= start; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(path\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        // If we reached a path separator that was not part of a set of path\x0d\n        // separators at the end of the string\x2C stop now\x0d\n        if (!matchedSlash) {\x0d\n          startPart = i + 1;\x0d\n          break;\x0d\n        }\x0d\n        continue;\x0d\n      }\x0d\n      if (end === -1) {\x0d\n        // We saw the first non-path separator\x2C mark this as the end of our\x0d\n        // extension\x0d\n        matchedSlash = false;\x0d\n        end = i + 1;\x0d\n      }\x0d\n      if (code === CHAR_DOT) {\x0d\n        // If this is our first dot\x2C mark it as the start of our extension\x0d\n        if (startDot === -1)\x0d\n          startDot = i;\x0d\n        else if (preDotState !== 1)\x0d\n          preDotState = 1;\x0d\n      } else if (startDot !== -1) {\x0d\n        // We saw a non-dot and non-path separator before our dot\x2C so we should\x0d\n        // have a good chance at having a non-empty extension\x0d\n        preDotState = -1;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (end !== -1) {\x0d\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\x0d\n      if (startDot === -1 ||\x0d\n          // We saw a non-dot character immediately before the dot\x0d\n          preDotState === 0 ||\x0d\n          // The (right-most) trimmed path component is exactly '..'\x0d\n          (preDotState === 1 &&\x0d\n          startDot === end - 1 &&\x0d\n          startDot === startPart + 1)) {\x0d\n        ret.base = ret.name = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n      } else {\x0d\n        ret.name = StringPrototypeSlice(path\x2C start\x2C startDot);\x0d\n        ret.base = StringPrototypeSlice(path\x2C start\x2C end);\x0d\n        ret.ext = StringPrototypeSlice(path\x2C startDot\x2C end);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (startPart > 0)\x0d\n      ret.dir = StringPrototypeSlice(path\x2C 0\x2C startPart - 1);\x0d\n    else if (isAbsolute)\x0d\n      ret.dir = '/';\x0d\n\x0d\n    return ret;\x0d\n  }\x2C\x0d\n\x0d\n  sep: '/'\x2C\x0d\n  delimiter: ':'\x2C\x0d\n  win32: null\x2C\x0d\n  posix: null\x0d\n};\x0d\n\x0d\nposix.win32 = win32.win32 = win32;\x0d\nposix.posix = win32.posix = posix;\x0d\n\x0d\n// Legacy internal API\x2C docs-only deprecated: DEP0080\x0d\nwin32._makeLong = win32.toNamespacedPath;\x0d\nposix._makeLong = posix.toNamespacedPath;\x0d\n\x0d\nmodule.exports = platformIsWin32 ? win32 : posix;\x0d\n
code-source-info,0x2f2f3a1708e
code-creation,LazyCompile,10,330546,0x2f2f3a1a6a6,30,validateString node:internal/validators:160:24,0x2392d4ab98,~
script-source,16,node:internal/validators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_SOCKET_BAD_PORT\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x2C\x0d\n    ERR_INVALID_CALLBACK\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { normalizeEncoding } = require('internal/util');\x0d\nconst {\x0d\n  isAsyncFunction\x2C\x0d\n  isArrayBufferView\x0d\n} = require('internal/util/types');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\n/**\x0d\n * @param {*} value\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isInt32(value) {\x0d\n  return value === (value | 0);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {*} value\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isUint32(value) {\x0d\n  return value === (value >>> 0);\x0d\n}\x0d\n\x0d\nconst octalReg = /^[0-7]+$/;\x0d\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string';\x0d\n\x0d\n/**\x0d\n * Parse and validate values that will be converted into mode_t (the S_*\x0d\n * constants). Only valid numbers and octal strings are allowed. They could be\x0d\n * converted to 32-bit unsigned integers or non-negative signed integers in the\x0d\n * C++ land\x2C but any value higher than 0o777 will result in platform-specific\x0d\n * behaviors.\x0d\n *\x0d\n * @param {*} value Values to be validated\x0d\n * @param {string} name Name of the argument\x0d\n * @param {number} [def] If specified\x2C will be returned for invalid values\x0d\n * @returns {number}\x0d\n */\x0d\nfunction parseFileMode(value\x2C name\x2C def) {\x0d\n  value ??= def;\x0d\n  if (typeof value === 'string') {\x0d\n    if (RegExpPrototypeExec(octalReg\x2C value) === null) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C modeDesc);\x0d\n    }\x0d\n    value = NumberParseInt(value\x2C 8);\x0d\n  }\x0d\n\x0d\n  validateUint32(value\x2C name);\x0d\n  return value;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateInteger\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {number} [min]\x0d\n * @param {number} [max]\x0d\n * @returns {asserts value is number}\x0d\n */\x0d\n\x0d\n/** @type {validateInteger} */\x0d\nconst validateInteger = hideStackFrames(\x0d\n  (value\x2C name\x2C min = NumberMIN_SAFE_INTEGER\x2C max = NumberMAX_SAFE_INTEGER) => {\x0d\n    if (typeof value !== 'number')\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    if (!NumberIsInteger(value))\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    if (value < min || value > max)\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n  }\x0d\n);\x0d\n\x0d\n/**\x0d\n * @callback validateInt32\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {number} [min]\x0d\n * @param {number} [max]\x0d\n * @returns {asserts value is number}\x0d\n */\x0d\n\x0d\n/** @type {validateInt32} */\x0d\nconst validateInt32 = hideStackFrames(\x0d\n  (value\x2C name\x2C min = -2147483648\x2C max = 2147483647) => {\x0d\n    // The defaults for min and max correspond to the limits of 32-bit integers.\x0d\n    if (typeof value !== 'number') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n    }\x0d\n    if (!NumberIsInteger(value)) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n    }\x0d\n    if (value < min || value > max) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\n/**\x0d\n * @callback validateUint32\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {number|boolean} [positive=false]\x0d\n * @returns {asserts value is number}\x0d\n */\x0d\n\x0d\n/** @type {validateUint32} */\x0d\nconst validateUint32 = hideStackFrames((value\x2C name\x2C positive = false) => {\x0d\n  if (typeof value !== 'number') {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n  }\x0d\n  if (!NumberIsInteger(value)) {\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C 'an integer'\x2C value);\x0d\n  }\x0d\n  const min = positive ? 1 : 0;\x0d\n  // 2 ** 32 === 4294967296\x0d\n  const max = 4_294_967_295;\x0d\n  if (value < min || value > max) {\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C `>= ${min} && <= ${max}`\x2C value);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateString\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is string}\x0d\n */\x0d\n\x0d\n/** @type {validateString} */\x0d\nfunction validateString(value\x2C name) {\x0d\n  if (typeof value !== 'string')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'string'\x2C value);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateNumber\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {number} [min]\x0d\n * @param {number} [max]\x0d\n * @returns {asserts value is number}\x0d\n */\x0d\n\x0d\n/** @type {validateNumber} */\x0d\nfunction validateNumber(value\x2C name\x2C min = undefined\x2C max) {\x0d\n  if (typeof value !== 'number')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'number'\x2C value);\x0d\n\x0d\n  if ((min != null && value < min) || (max != null && value > max) ||\x0d\n      ((min != null || max != null) && NumberIsNaN(value))) {\x0d\n    throw new ERR_OUT_OF_RANGE(\x0d\n      name\x2C\x0d\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`\x2C\x0d\n      value);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateOneOf\x0d\n * @template T\x0d\n * @param {T} value\x0d\n * @param {string} name\x0d\n * @param {T[]} oneOf\x0d\n */\x0d\n\x0d\n/** @type {validateOneOf} */\x0d\nconst validateOneOf = hideStackFrames((value\x2C name\x2C oneOf) => {\x0d\n  if (!ArrayPrototypeIncludes(oneOf\x2C value)) {\x0d\n    const allowed = ArrayPrototypeJoin(\x0d\n      ArrayPrototypeMap(oneOf\x2C (v) =>\x0d\n        (typeof v === 'string' ? `'${v}'` : String(v)))\x2C\x0d\n      '\x2C ');\x0d\n    const reason = 'must be one of: ' + allowed;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateBoolean\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is boolean}\x0d\n */\x0d\n\x0d\n/** @type {validateBoolean} */\x0d\nfunction validateBoolean(value\x2C name) {\x0d\n  if (typeof value !== 'boolean')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'boolean'\x2C value);\x0d\n}\x0d\n\x0d\nfunction getOwnPropertyValueOrDefault(options\x2C key\x2C defaultValue) {\x0d\n  return options == null || !ObjectPrototypeHasOwnProperty(options\x2C key) ?\x0d\n    defaultValue :\x0d\n    options[key];\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateObject\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {{\x0d\n *   allowArray?: boolean\x2C\x0d\n *   allowFunction?: boolean\x2C\x0d\n *   nullable?: boolean\x0d\n * }} [options]\x0d\n */\x0d\n\x0d\n/** @type {validateObject} */\x0d\nconst validateObject = hideStackFrames(\x0d\n  (value\x2C name\x2C options = null) => {\x0d\n    const allowArray = getOwnPropertyValueOrDefault(options\x2C 'allowArray'\x2C false);\x0d\n    const allowFunction = getOwnPropertyValueOrDefault(options\x2C 'allowFunction'\x2C false);\x0d\n    const nullable = getOwnPropertyValueOrDefault(options\x2C 'nullable'\x2C false);\x0d\n    if ((!nullable && value === null) ||\x0d\n        (!allowArray && ArrayIsArray(value)) ||\x0d\n        (typeof value !== 'object' && (\x0d\n          !allowFunction || typeof value !== 'function'\x0d\n        ))) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C 'Object'\x2C value);\x0d\n    }\x0d\n  });\x0d\n\x0d\n/**\x0d\n * @callback validateArray\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @param {number} [minLength]\x0d\n * @returns {asserts value is any[]}\x0d\n */\x0d\n\x0d\n/** @type {validateArray} */\x0d\nconst validateArray = hideStackFrames((value\x2C name\x2C minLength = 0) => {\x0d\n  if (!ArrayIsArray(value)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Array'\x2C value);\x0d\n  }\x0d\n  if (value.length < minLength) {\x0d\n    const reason = `must be longer than ${minLength}`;\x0d\n    throw new ERR_INVALID_ARG_VALUE(name\x2C value\x2C reason);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateStringArray\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is string[]}\x0d\n */\x0d\n\x0d\n/** @type {validateStringArray} */\x0d\nfunction validateStringArray(value\x2C name) {\x0d\n  validateArray(value\x2C name);\x0d\n  for (let i = 0; i < value.length; i++) {\x0d\n    validateString(value[i]\x2C `${name}[${i}]`);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateBooleanArray\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is boolean[]}\x0d\n */\x0d\n\x0d\n/** @type {validateBooleanArray} */\x0d\nfunction validateBooleanArray(value\x2C name) {\x0d\n  validateArray(value\x2C name);\x0d\n  for (let i = 0; i < value.length; i++) {\x0d\n    validateBoolean(value[i]\x2C `${name}[${i}]`);\x0d\n  }\x0d\n}\x0d\n\x0d\n// eslint-disable-next-line jsdoc/require-returns-check\x0d\n/**\x0d\n * @param {*} signal\x0d\n * @param {string} [name='signal']\x0d\n * @returns {asserts signal is keyof signals}\x0d\n */\x0d\nfunction validateSignalName(signal\x2C name = 'signal') {\x0d\n  validateString(signal\x2C name);\x0d\n\x0d\n  if (signals[signal] === undefined) {\x0d\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\x0d\n      throw new ERR_UNKNOWN_SIGNAL(signal +\x0d\n                                   ' (signals must use all capital letters)');\x0d\n    }\x0d\n\x0d\n    throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @callback validateBuffer\x0d\n * @param {*} buffer\x0d\n * @param {string} [name='buffer']\x0d\n * @returns {asserts buffer is ArrayBufferView}\x0d\n */\x0d\n\x0d\n/** @type {validateBuffer} */\x0d\nconst validateBuffer = hideStackFrames((buffer\x2C name = 'buffer') => {\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C\x0d\n                                   ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n                                   buffer);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * @param {string} data\x0d\n * @param {string} encoding\x0d\n */\x0d\nfunction validateEncoding(data\x2C encoding) {\x0d\n  const normalizedEncoding = normalizeEncoding(encoding);\x0d\n  const length = data.length;\x0d\n\x0d\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('encoding'\x2C encoding\x2C\x0d\n                                    `is invalid for data of length ${length}`);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Check that the port number is not NaN when coerced to a number\x2C\x0d\n * is an integer and that it falls within the legal range of port numbers.\x0d\n * @param {*} port\x0d\n * @param {string} [name='Port']\x0d\n * @param {boolean} [allowZero=true]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction validatePort(port\x2C name = 'Port'\x2C allowZero = true) {\x0d\n  if ((typeof port !== 'number' && typeof port !== 'string') ||\x0d\n      (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\x0d\n      +port !== (+port >>> 0) ||\x0d\n      port > 0xFFFF ||\x0d\n      (port === 0 && !allowZero)) {\x0d\n    throw new ERR_SOCKET_BAD_PORT(name\x2C port\x2C allowZero);\x0d\n  }\x0d\n  return port | 0;\x0d\n}\x0d\n\x0d\nconst validateCallback = hideStackFrames((callback) => {\x0d\n  if (typeof callback !== 'function')\x0d\n    throw new ERR_INVALID_CALLBACK(callback);\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateAbortSignal\x0d\n * @param {*} signal\x0d\n * @param {string} name\x0d\n */\x0d\n\x0d\n/** @type {validateAbortSignal} */\x0d\nconst validateAbortSignal = hideStackFrames((signal\x2C name) => {\x0d\n  if (signal !== undefined &&\x0d\n      (signal === null ||\x0d\n       typeof signal !== 'object' ||\x0d\n       !('aborted' in signal))) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'AbortSignal'\x2C signal);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateFunction\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is Function}\x0d\n */\x0d\n\x0d\n/** @type {validateFunction} */\x0d\nconst validateFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function')\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validatePlainFunction\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is Function}\x0d\n */\x0d\n\x0d\n/** @type {validatePlainFunction} */\x0d\nconst validatePlainFunction = hideStackFrames((value\x2C name) => {\x0d\n  if (typeof value !== 'function' || isAsyncFunction(value))\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'Function'\x2C value);\x0d\n});\x0d\n\x0d\n/**\x0d\n * @callback validateUndefined\x0d\n * @param {*} value\x0d\n * @param {string} name\x0d\n * @returns {asserts value is undefined}\x0d\n */\x0d\n\x0d\n/** @type {validateUndefined} */\x0d\nconst validateUndefined = hideStackFrames((value\x2C name) => {\x0d\n  if (value !== undefined)\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C 'undefined'\x2C value);\x0d\n});\x0d\n\x0d\n/**\x0d\n * @template T\x0d\n * @param {T} value\x0d\n * @param {string} name\x0d\n * @param {T[]} union\x0d\n */\x0d\nfunction validateUnion(value\x2C name\x2C union) {\x0d\n  if (!ArrayPrototypeIncludes(union\x2C value)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C `('${ArrayPrototypeJoin(union\x2C '|')}')`\x2C value);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  isInt32\x2C\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateStringArray\x2C\x0d\n  validateBooleanArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateCallback\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateNumber\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validatePlainFunction\x2C\x0d\n  validatePort\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n  validateUndefined\x2C\x0d\n  validateUnion\x2C\x0d\n  validateAbortSignal\x2C\x0d\n};\x0d\n
code-source-info,0x2f2f3a1a6a6,16,4261,4373,C0O4280C6O4316C22O4322C27O4316C29O4372,,
tick,0x7ff8131dfab3,331673,0,0x0,3,0x7ff6d61dcec0,0x2f2f3a170bf,0x2f2f3a14520,0x2f2f3a10163,0x2f2f3a0b862
code-creation,LazyCompile,10,331749,0x2f2f3a1b656,17,isPathSeparator node:path:52:25,0x32ebb7ccfc8,~
code-source-info,0x2f2f3a1b656,41,1794,1876,C0O1806C2O1822C4O1818C11O1853C13O1849C16O1873,,
code-creation,LazyCompile,10,331834,0x2f2f3a1b756,35,isWindowsDeviceRoot node:path:60:29,0x32ebb7cd3e8,~
code-source-info,0x2f2f3a1b756,41,1991,2136,C0O2003C2O2019C4O2016C11O2047C13O2044C20O2087C22O2084C29O2115C31O2112C34O2133,,
code-creation,LazyCompile,10,331946,0x2f2f3a1b876,40,wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20,0xb0b6ebc388,~
script-source,98,node:internal/bootstrap/switches/does_own_process_state,'use strict';\x0d\n\x0d\nconst credentials = internalBinding('credentials');\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\n\x0d\nprocess.abort = rawMethods.abort;\x0d\nprocess.umask = wrappedUmask;\x0d\nprocess.chdir = wrappedChdir;\x0d\nprocess.cwd = wrappedCwd;\x0d\n\x0d\nif (credentials.implementsPosixCredentials) {\x0d\n  const wrapped = wrapPosixCredentialSetters(credentials);\x0d\n\x0d\n  process.initgroups = wrapped.initgroups;\x0d\n  process.setgroups = wrapped.setgroups;\x0d\n  process.setegid = wrapped.setegid;\x0d\n  process.seteuid = wrapped.seteuid;\x0d\n  process.setgid = wrapped.setgid;\x0d\n  process.setuid = wrapped.setuid;\x0d\n}\x0d\n\x0d\n// ---- keep the attachment of the wrappers above so that it's easier to ----\x0d\n// ----              compare the setups side-by-side                    -----\x0d\n\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateArray\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n\x0d\nfunction wrapPosixCredentialSetters(credentials) {\x0d\n  const {\x0d\n    codes: {\x0d\n      ERR_INVALID_ARG_TYPE\x2C\x0d\n      ERR_UNKNOWN_CREDENTIAL\x0d\n    }\x0d\n  } = require('internal/errors');\x0d\n  const {\x0d\n    validateUint32\x0d\n  } = require('internal/validators');\x0d\n\x0d\n  const {\x0d\n    initgroups: _initgroups\x2C\x0d\n    setgroups: _setgroups\x2C\x0d\n    setegid: _setegid\x2C\x0d\n    seteuid: _seteuid\x2C\x0d\n    setgid: _setgid\x2C\x0d\n    setuid: _setuid\x0d\n  } = credentials;\x0d\n\x0d\n  function initgroups(user\x2C extraGroup) {\x0d\n    validateId(user\x2C 'user');\x0d\n    validateId(extraGroup\x2C 'extraGroup');\x0d\n    // Result is 0 on success\x2C 1 if user is unknown\x2C 2 if group is unknown.\x0d\n    const result = _initgroups(user\x2C extraGroup);\x0d\n    if (result === 1) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('User'\x2C user);\x0d\n    } else if (result === 2) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C extraGroup);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function setgroups(groups) {\x0d\n    validateArray(groups\x2C 'groups');\x0d\n    for (let i = 0; i < groups.length; i++) {\x0d\n      validateId(groups[i]\x2C `groups[${i}]`);\x0d\n    }\x0d\n    // Result is 0 on success. A positive integer indicates that the\x0d\n    // corresponding group was not found.\x0d\n    const result = _setgroups(groups);\x0d\n    if (result > 0) {\x0d\n      throw new ERR_UNKNOWN_CREDENTIAL('Group'\x2C groups[result - 1]);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function wrapIdSetter(type\x2C method) {\x0d\n    return function(id) {\x0d\n      validateId(id\x2C 'id');\x0d\n      if (typeof id === 'number') id |= 0;\x0d\n      // Result is 0 on success\x2C 1 if credential is unknown.\x0d\n      const result = method(id);\x0d\n      if (result === 1) {\x0d\n        throw new ERR_UNKNOWN_CREDENTIAL(type\x2C id);\x0d\n      }\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function validateId(id\x2C name) {\x0d\n    if (typeof id === 'number') {\x0d\n      validateUint32(id\x2C name);\x0d\n    } else if (typeof id !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(name\x2C ['number'\x2C 'string']\x2C id);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    initgroups\x2C\x0d\n    setgroups\x2C\x0d\n    setegid: wrapIdSetter('Group'\x2C _setegid)\x2C\x0d\n    seteuid: wrapIdSetter('User'\x2C _seteuid)\x2C\x0d\n    setgid: wrapIdSetter('Group'\x2C _setgid)\x2C\x0d\n    setuid: wrapIdSetter('User'\x2C _setuid)\x0d\n  };\x0d\n}\x0d\n\x0d\n// Cache the working directory to prevent lots of lookups. If the working\x0d\n// directory is changed by `chdir`\x2C it'll be updated.\x0d\nlet cachedCwd = '';\x0d\n\x0d\nfunction wrappedChdir(directory) {\x0d\n  validateString(directory\x2C 'directory');\x0d\n  rawMethods.chdir(directory);\x0d\n  // Mark cache that it requires an update.\x0d\n  cachedCwd = '';\x0d\n}\x0d\n\x0d\nfunction wrappedUmask(mask) {\x0d\n  if (mask !== undefined) {\x0d\n    mask = parseFileMode(mask\x2C 'mask');\x0d\n  }\x0d\n  return rawMethods.umask(mask);\x0d\n}\x0d\n\x0d\nfunction wrappedCwd() {\x0d\n  if (cachedCwd === '')\x0d\n    cachedCwd = rawMethods.cwd();\x0d\n  return cachedCwd;\x0d\n}\x0d\n
code-source-info,0x2f2f3a1b876,98,3464,3552,C0O3472C7O3486C12O3499C17O3522C22O3522C29O3509C35O3532C39O3549,,
code-creation,LazyCompile,10,332510,0x2f2f3a1bede,442,normalizeString node:path:66:25,0x32ebb7cd438,~
code-source-info,0x2f2f3a1bede
code-creation,LazyCompile,10,332844,0x2f2f3a1c596,37,initializeGlobalConsole node:internal/console/constructor:687:33,0xb0b6eaa5d8,~
script-source,37,node:internal/console/constructor,'use strict';\x0d\n\x0d\n// The Console constructor is not actually used to construct the global\x0d\n// console. It's exported for backwards compatibility.\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Boolean\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  MathFloor\x2C\x0d\n  Number\x2C\x0d\n  NumberPrototypeToFixed\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectValues\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectConstruct\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypePadStart\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolHasInstance\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { trace } = internalBinding('trace_events');\x0d\nconst {\x0d\n  isStackOverflowError\x2C\x0d\n  codes: {\x0d\n    ERR_CONSOLE_WRITABLE_STREAM\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INCOMPATIBLE_OPTION_PAIR\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\nconst { previewEntries } = internalBinding('util');\x0d\nconst { Buffer: { isBuffer } } = require('buffer');\x0d\nconst {\x0d\n  inspect\x2C\x0d\n  formatWithOptions\x0d\n} = require('internal/util/inspect');\x0d\nconst {\x0d\n  isTypedArray\x2C isSet\x2C isMap\x2C isSetIterator\x2C isMapIterator\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  CHAR_LOWERCASE_B: kTraceBegin\x2C\x0d\n  CHAR_LOWERCASE_E: kTraceEnd\x2C\x0d\n  CHAR_LOWERCASE_N: kTraceInstant\x2C\x0d\n  CHAR_UPPERCASE_C: kTraceCount\x2C\x0d\n} = require('internal/constants');\x0d\nconst kCounts = Symbol('counts');\x0d\n\x0d\nconst kTraceConsoleCategory = 'node\x2Cnode.console';\x0d\n\x0d\nconst kSecond = 1000;\x0d\nconst kMinute = 60 * kSecond;\x0d\nconst kHour = 60 * kMinute;\x0d\nconst kMaxGroupIndentation = 1000;\x0d\n\x0d\n// Lazy loaded for startup performance.\x0d\nlet cliTable;\x0d\n\x0d\n// Track amount of indentation required via `console.group()`.\x0d\nconst kGroupIndent = Symbol('kGroupIndent');\x0d\nconst kGroupIndentationWidth = Symbol('kGroupIndentWidth');\x0d\nconst kFormatForStderr = Symbol('kFormatForStderr');\x0d\nconst kFormatForStdout = Symbol('kFormatForStdout');\x0d\nconst kGetInspectOptions = Symbol('kGetInspectOptions');\x0d\nconst kColorMode = Symbol('kColorMode');\x0d\nconst kIsConsole = Symbol('kIsConsole');\x0d\nconst kWriteToConsole = Symbol('kWriteToConsole');\x0d\nconst kBindProperties = Symbol('kBindProperties');\x0d\nconst kBindStreamsEager = Symbol('kBindStreamsEager');\x0d\nconst kBindStreamsLazy = Symbol('kBindStreamsLazy');\x0d\nconst kUseStdout = Symbol('kUseStdout');\x0d\nconst kUseStderr = Symbol('kUseStderr');\x0d\n\x0d\nconst optionsMap = new SafeWeakMap();\x0d\n\x0d\nfunction Console(options /* or: stdout\x2C stderr\x2C ignoreErrors = true */) {\x0d\n  // We have to test new.target here to see if this function is called\x0d\n  // with new\x2C because we need to define a custom instanceof to accommodate\x0d\n  // the global console.\x0d\n  if (new.target === undefined) {\x0d\n    return ReflectConstruct(Console\x2C arguments);\x0d\n  }\x0d\n\x0d\n  if (!options || typeof options.write === 'function') {\x0d\n    options = {\x0d\n      stdout: options\x2C\x0d\n      stderr: arguments[1]\x2C\x0d\n      ignoreErrors: arguments[2]\x0d\n    };\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    stdout\x2C\x0d\n    stderr = stdout\x2C\x0d\n    ignoreErrors = true\x2C\x0d\n    colorMode = 'auto'\x2C\x0d\n    inspectOptions\x2C\x0d\n    groupIndentation\x2C\x0d\n  } = options;\x0d\n\x0d\n  if (!stdout || typeof stdout.write !== 'function') {\x0d\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stdout');\x0d\n  }\x0d\n  if (!stderr || typeof stderr.write !== 'function') {\x0d\n    throw new ERR_CONSOLE_WRITABLE_STREAM('stderr');\x0d\n  }\x0d\n\x0d\n  if (typeof colorMode !== 'boolean' && colorMode !== 'auto')\x0d\n    throw new ERR_INVALID_ARG_VALUE('colorMode'\x2C colorMode);\x0d\n\x0d\n  if (groupIndentation !== undefined) {\x0d\n    validateInteger(groupIndentation\x2C 'groupIndentation'\x2C\x0d\n                    0\x2C kMaxGroupIndentation);\x0d\n  }\x0d\n\x0d\n  if (inspectOptions !== undefined) {\x0d\n    validateObject(inspectOptions\x2C 'options.inspectOptions');\x0d\n\x0d\n    if (inspectOptions.colors !== undefined &&\x0d\n        options.colorMode !== undefined) {\x0d\n      throw new ERR_INCOMPATIBLE_OPTION_PAIR(\x0d\n        'options.inspectOptions.color'\x2C 'colorMode');\x0d\n    }\x0d\n    optionsMap.set(this\x2C inspectOptions);\x0d\n  }\x0d\n\x0d\n  // Bind the prototype functions to this Console instance\x0d\n  ArrayPrototypeForEach(ObjectKeys(Console.prototype)\x2C (key) => {\x0d\n    // We have to bind the methods grabbed from the instance instead of from\x0d\n    // the prototype so that users extending the Console can override them\x0d\n    // from the prototype chain of the subclass.\x0d\n    this[key] = FunctionPrototypeBind(this[key]\x2C this);\x0d\n    ObjectDefineProperty(this[key]\x2C 'name'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value: key\x0d\n    });\x0d\n  });\x0d\n\x0d\n  this[kBindStreamsEager](stdout\x2C stderr);\x0d\n  this[kBindProperties](ignoreErrors\x2C colorMode\x2C groupIndentation);\x0d\n}\x0d\n\x0d\nconst consolePropAttributes = {\x0d\n  writable: true\x2C\x0d\n  enumerable: false\x2C\x0d\n  configurable: true\x0d\n};\x0d\n\x0d\n// Fixup global.console instanceof global.console.Console\x0d\nObjectDefineProperty(Console\x2C SymbolHasInstance\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value(instance) {\x0d\n    return instance[kIsConsole];\x0d\n  }\x0d\n});\x0d\n\x0d\nconst kColorInspectOptions = { colors: true };\x0d\nconst kNoColorInspectOptions = {};\x0d\n\x0d\nObjectDefineProperties(Console.prototype\x2C {\x0d\n  [kBindStreamsEager]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    // Eager version for the Console constructor\x0d\n    value: function(stdout\x2C stderr) {\x0d\n      ObjectDefineProperties(this\x2C {\x0d\n        '_stdout': { __proto__: null\x2C ...consolePropAttributes\x2C value: stdout }\x2C\x0d\n        '_stderr': { __proto__: null\x2C ...consolePropAttributes\x2C value: stderr }\x2C\x0d\n      });\x0d\n    }\x0d\n  }\x2C\x0d\n  [kBindStreamsLazy]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    // Lazily load the stdout and stderr from an object so we don't\x0d\n    // create the stdio streams when they are not even accessed\x0d\n    value: function(object) {\x0d\n      let stdout;\x0d\n      let stderr;\x0d\n      ObjectDefineProperties(this\x2C {\x0d\n        '_stdout': {\x0d\n          __proto__: null\x2C\x0d\n          enumerable: false\x2C\x0d\n          configurable: true\x2C\x0d\n          get() {\x0d\n            if (!stdout) stdout = object.stdout;\x0d\n            return stdout;\x0d\n          }\x2C\x0d\n          set(value) { stdout = value; }\x0d\n        }\x2C\x0d\n        '_stderr': {\x0d\n          __proto__: null\x2C\x0d\n          enumerable: false\x2C\x0d\n          configurable: true\x2C\x0d\n          get() {\x0d\n            if (!stderr) { stderr = object.stderr; }\x0d\n            return stderr;\x0d\n          }\x2C\x0d\n          set(value) { stderr = value; }\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n  }\x2C\x0d\n  [kBindProperties]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    value: function(ignoreErrors\x2C colorMode\x2C groupIndentation = 2) {\x0d\n      ObjectDefineProperties(this\x2C {\x0d\n        '_stdoutErrorHandler': {\x0d\n          __proto__: null\x2C\x0d\n          ...consolePropAttributes\x2C\x0d\n          value: createWriteErrorHandler(this\x2C kUseStdout)\x0d\n        }\x2C\x0d\n        '_stderrErrorHandler': {\x0d\n          ...consolePropAttributes\x2C\x0d\n          __proto__: null\x2C\x0d\n          value: createWriteErrorHandler(this\x2C kUseStderr)\x0d\n        }\x2C\x0d\n        '_ignoreErrors': {\x0d\n          __proto__: null\x2C\x0d\n          ...consolePropAttributes\x2C\x0d\n          value: Boolean(ignoreErrors)\x0d\n        }\x2C\x0d\n        '_times': { __proto__: null\x2C ...consolePropAttributes\x2C value: new SafeMap() }\x2C\x0d\n        // Corresponds to https://console.spec.whatwg.org/#count-map\x0d\n        [kCounts]: { __proto__: null\x2C ...consolePropAttributes\x2C value: new SafeMap() }\x2C\x0d\n        [kColorMode]: { __proto__: null\x2C ...consolePropAttributes\x2C value: colorMode }\x2C\x0d\n        [kIsConsole]: { __proto__: null\x2C ...consolePropAttributes\x2C value: true }\x2C\x0d\n        [kGroupIndent]: { __proto__: null\x2C ...consolePropAttributes\x2C value: '' }\x2C\x0d\n        [kGroupIndentationWidth]: {\x0d\n          __proto__: null\x2C\x0d\n          ...consolePropAttributes\x2C\x0d\n          value: groupIndentation\x0d\n        }\x2C\x0d\n        [SymbolToStringTag]: {\x0d\n          __proto__: null\x2C\x0d\n          writable: false\x2C\x0d\n          enumerable: false\x2C\x0d\n          configurable: true\x2C\x0d\n          value: 'console'\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n  }\x2C\x0d\n  [kWriteToConsole]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    value: function(streamSymbol\x2C string) {\x0d\n      const ignoreErrors = this._ignoreErrors;\x0d\n      const groupIndent = this[kGroupIndent];\x0d\n\x0d\n      const useStdout = streamSymbol === kUseStdout;\x0d\n      const stream = useStdout ? this._stdout : this._stderr;\x0d\n      const errorHandler = useStdout ?\x0d\n        this._stdoutErrorHandler : this._stderrErrorHandler;\x0d\n\x0d\n      if (groupIndent.length !== 0) {\x0d\n        if (StringPrototypeIncludes(string\x2C '\\n')) {\x0d\n          string = RegExpPrototypeSymbolReplace(/\\n/g\x2C string\x2C `\\n${groupIndent}`);\x0d\n        }\x0d\n        string = groupIndent + string;\x0d\n      }\x0d\n      string += '\\n';\x0d\n\x0d\n      if (ignoreErrors === false) return stream.write(string);\x0d\n\x0d\n      // There may be an error occurring synchronously (e.g. for files or TTYs\x0d\n      // on POSIX systems) or asynchronously (e.g. pipes on POSIX systems)\x2C so\x0d\n      // handle both situations.\x0d\n      try {\x0d\n        // Add and later remove a noop error handler to catch synchronous\x0d\n        // errors.\x0d\n        if (stream.listenerCount('error') === 0)\x0d\n          stream.once('error'\x2C noop);\x0d\n\x0d\n        stream.write(string\x2C errorHandler);\x0d\n      } catch (e) {\x0d\n        // Console is a debugging utility\x2C so it swallowing errors is not\x0d\n        // desirable even in edge cases such as low stack space.\x0d\n        if (isStackOverflowError(e))\x0d\n          throw e;\x0d\n        // Sorry\x2C there's no proper way to pass along the error here.\x0d\n      } finally {\x0d\n        stream.removeListener('error'\x2C noop);\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n  [kGetInspectOptions]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    value: function(stream) {\x0d\n      let color = this[kColorMode];\x0d\n      if (color === 'auto') {\x0d\n        color = stream.isTTY && (\x0d\n          typeof stream.getColorDepth === 'function' ?\x0d\n            stream.getColorDepth() > 2 : true);\x0d\n      }\x0d\n\x0d\n      const options = optionsMap.get(this);\x0d\n      if (options) {\x0d\n        if (options.colors === undefined) {\x0d\n          options.colors = color;\x0d\n        }\x0d\n        return options;\x0d\n      }\x0d\n\x0d\n      return color ? kColorInspectOptions : kNoColorInspectOptions;\x0d\n    }\x0d\n  }\x2C\x0d\n  [kFormatForStdout]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    value: function(args) {\x0d\n      const opts = this[kGetInspectOptions](this._stdout);\x0d\n      ArrayPrototypeUnshift(args\x2C opts);\x0d\n      return ReflectApply(formatWithOptions\x2C null\x2C args);\x0d\n    }\x0d\n  }\x2C\x0d\n  [kFormatForStderr]: {\x0d\n    __proto__: null\x2C\x0d\n    ...consolePropAttributes\x2C\x0d\n    value: function(args) {\x0d\n      const opts = this[kGetInspectOptions](this._stderr);\x0d\n      ArrayPrototypeUnshift(args\x2C opts);\x0d\n      return ReflectApply(formatWithOptions\x2C null\x2C args);\x0d\n    }\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\n// Make a function that can serve as the callback passed to `stream.write()`.\x0d\nfunction createWriteErrorHandler(instance\x2C streamSymbol) {\x0d\n  return (err) => {\x0d\n    // This conditional evaluates to true if and only if there was an error\x0d\n    // that was not already emitted (which happens when the _write callback\x0d\n    // is invoked asynchronously).\x0d\n    const stream = streamSymbol === kUseStdout ?\x0d\n      instance._stdout : instance._stderr;\x0d\n    if (err !== null && !stream._writableState.errorEmitted) {\x0d\n      // If there was an error\x2C it will be emitted on `stream` as\x0d\n      // an `error` event. Adding a `once` listener will keep that error\x0d\n      // from becoming an uncaught exception\x2C but since the handler is\x0d\n      // removed after the event\x2C non-console.* writes won't be affected.\x0d\n      // we are only adding noop if there is no one else listening for 'error'\x0d\n      if (stream.listenerCount('error') === 0) {\x0d\n        stream.once('error'\x2C noop);\x0d\n      }\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\nconst consoleMethods = {\x0d\n  log(...args) {\x0d\n    this[kWriteToConsole](kUseStdout\x2C this[kFormatForStdout](args));\x0d\n  }\x2C\x0d\n\x0d\n\x0d\n  warn(...args) {\x0d\n    this[kWriteToConsole](kUseStderr\x2C this[kFormatForStderr](args));\x0d\n  }\x2C\x0d\n\x0d\n\x0d\n  dir(object\x2C options) {\x0d\n    this[kWriteToConsole](kUseStdout\x2C inspect(object\x2C {\x0d\n      customInspect: false\x2C\x0d\n      ...this[kGetInspectOptions](this._stdout)\x2C\x0d\n      ...options\x0d\n    }));\x0d\n  }\x2C\x0d\n\x0d\n  time(label = 'default') {\x0d\n    // Coerces everything other than Symbol to a string\x0d\n    label = `${label}`;\x0d\n    if (this._times.has(label)) {\x0d\n      process.emitWarning(`Label '${label}' already exists for console.time()`);\x0d\n      return;\x0d\n    }\x0d\n    trace(kTraceBegin\x2C kTraceConsoleCategory\x2C `time::${label}`\x2C 0);\x0d\n    this._times.set(label\x2C process.hrtime());\x0d\n  }\x2C\x0d\n\x0d\n  timeEnd(label = 'default') {\x0d\n    // Coerces everything other than Symbol to a string\x0d\n    label = `${label}`;\x0d\n    const found = timeLogImpl(this\x2C 'timeEnd'\x2C label);\x0d\n    trace(kTraceEnd\x2C kTraceConsoleCategory\x2C `time::${label}`\x2C 0);\x0d\n    if (found) {\x0d\n      this._times.delete(label);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  timeLog(label = 'default'\x2C ...data) {\x0d\n    // Coerces everything other than Symbol to a string\x0d\n    label = `${label}`;\x0d\n    timeLogImpl(this\x2C 'timeLog'\x2C label\x2C data);\x0d\n    trace(kTraceInstant\x2C kTraceConsoleCategory\x2C `time::${label}`\x2C 0);\x0d\n  }\x2C\x0d\n\x0d\n  trace: function trace(...args) {\x0d\n    const err = {\x0d\n      name: 'Trace'\x2C\x0d\n      message: this[kFormatForStderr](args)\x0d\n    };\x0d\n    ErrorCaptureStackTrace(err\x2C trace);\x0d\n    this.error(err.stack);\x0d\n  }\x2C\x0d\n\x0d\n  assert(expression\x2C ...args) {\x0d\n    if (!expression) {\x0d\n      args[0] = `Assertion failed${args.length === 0 ? '' : `: ${args[0]}`}`;\x0d\n      // The arguments will be formatted in warn() again\x0d\n      ReflectApply(this.warn\x2C this\x2C args);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  // Defined by: https://console.spec.whatwg.org/#clear\x0d\n  clear() {\x0d\n    // It only makes sense to clear if _stdout is a TTY.\x0d\n    // Otherwise\x2C do nothing.\x0d\n    if (this._stdout.isTTY && process.env.TERM !== 'dumb') {\x0d\n      // The require is here intentionally to avoid readline being\x0d\n      // required too early when console is first loaded.\x0d\n      const {\x0d\n        cursorTo\x2C\x0d\n        clearScreenDown\x2C\x0d\n      } = require('internal/readline/callbacks');\x0d\n      cursorTo(this._stdout\x2C 0\x2C 0);\x0d\n      clearScreenDown(this._stdout);\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  // Defined by: https://console.spec.whatwg.org/#count\x0d\n  count(label = 'default') {\x0d\n    // Ensures that label is a string\x2C and only things that can be\x0d\n    // coerced to strings. e.g. Symbol is not allowed\x0d\n    label = `${label}`;\x0d\n    const counts = this[kCounts];\x0d\n    let count = counts.get(label);\x0d\n    if (count === undefined)\x0d\n      count = 1;\x0d\n    else\x0d\n      count++;\x0d\n    counts.set(label\x2C count);\x0d\n    trace(kTraceCount\x2C kTraceConsoleCategory\x2C `count::${label}`\x2C 0\x2C count);\x0d\n    this.log(`${label}: ${count}`);\x0d\n  }\x2C\x0d\n\x0d\n  // Defined by: https://console.spec.whatwg.org/#countreset\x0d\n  countReset(label = 'default') {\x0d\n    const counts = this[kCounts];\x0d\n    if (!counts.has(label)) {\x0d\n      process.emitWarning(`Count for '${label}' does not exist`);\x0d\n      return;\x0d\n    }\x0d\n    trace(kTraceCount\x2C kTraceConsoleCategory\x2C `count::${label}`\x2C 0\x2C 0);\x0d\n    counts.delete(`${label}`);\x0d\n  }\x2C\x0d\n\x0d\n  group(...data) {\x0d\n    if (data.length > 0) {\x0d\n      ReflectApply(this.log\x2C this\x2C data);\x0d\n    }\x0d\n    this[kGroupIndent] +=\x0d\n      StringPrototypeRepeat(' '\x2C this[kGroupIndentationWidth]);\x0d\n  }\x2C\x0d\n\x0d\n  groupEnd() {\x0d\n    this[kGroupIndent] = StringPrototypeSlice(\x0d\n      this[kGroupIndent]\x2C\x0d\n      0\x2C\x0d\n      this[kGroupIndent].length - this[kGroupIndentationWidth]\x0d\n    );\x0d\n  }\x2C\x0d\n\x0d\n  // https://console.spec.whatwg.org/#table\x0d\n  table(tabularData\x2C properties) {\x0d\n    if (properties !== undefined)\x0d\n      validateArray(properties\x2C 'properties');\x0d\n\x0d\n    if (tabularData === null || typeof tabularData !== 'object')\x0d\n      return this.log(tabularData);\x0d\n\x0d\n    cliTable ??= require('internal/cli_table');\x0d\n    const final = (k\x2C v) => this.log(cliTable(k\x2C v));\x0d\n\x0d\n    const _inspect = (v) => {\x0d\n      const depth = v !== null &&\x0d\n                    typeof v === 'object' &&\x0d\n                    !isArray(v) &&\x0d\n                    ObjectKeys(v).length > 2 ? -1 : 0;\x0d\n      const opt = {\x0d\n        depth\x2C\x0d\n        maxArrayLength: 3\x2C\x0d\n        breakLength: Infinity\x2C\x0d\n        ...this[kGetInspectOptions](this._stdout)\x0d\n      };\x0d\n      return inspect(v\x2C opt);\x0d\n    };\x0d\n    const getIndexArray = (length) => ArrayFrom(\x0d\n      { length }\x2C (_\x2C i) => _inspect(i));\x0d\n\x0d\n    const mapIter = isMapIterator(tabularData);\x0d\n    let isKeyValue = false;\x0d\n    let i = 0;\x0d\n    if (mapIter) {\x0d\n      const res = previewEntries(tabularData\x2C true);\x0d\n      tabularData = res[0];\x0d\n      isKeyValue = res[1];\x0d\n    }\x0d\n\x0d\n    if (isKeyValue || isMap(tabularData)) {\x0d\n      const keys = [];\x0d\n      const values = [];\x0d\n      let length = 0;\x0d\n      if (mapIter) {\x0d\n        for (; i < tabularData.length / 2; ++i) {\x0d\n          ArrayPrototypePush(keys\x2C _inspect(tabularData[i * 2]));\x0d\n          ArrayPrototypePush(values\x2C _inspect(tabularData[i * 2 + 1]));\x0d\n          length++;\x0d\n        }\x0d\n      } else {\x0d\n        for (const { 0: k\x2C 1: v } of tabularData) {\x0d\n          ArrayPrototypePush(keys\x2C _inspect(k));\x0d\n          ArrayPrototypePush(values\x2C _inspect(v));\x0d\n          length++;\x0d\n        }\x0d\n      }\x0d\n      return final([\x0d\n        iterKey\x2C keyKey\x2C valuesKey\x2C\x0d\n      ]\x2C [\x0d\n        getIndexArray(length)\x2C\x0d\n        keys\x2C\x0d\n        values\x2C\x0d\n      ]);\x0d\n    }\x0d\n\x0d\n    const setIter = isSetIterator(tabularData);\x0d\n    if (setIter)\x0d\n      tabularData = previewEntries(tabularData);\x0d\n\x0d\n    const setlike = setIter || mapIter || isSet(tabularData);\x0d\n    if (setlike) {\x0d\n      const values = [];\x0d\n      let length = 0;\x0d\n      for (const v of tabularData) {\x0d\n        ArrayPrototypePush(values\x2C _inspect(v));\x0d\n        length++;\x0d\n      }\x0d\n      return final([iterKey\x2C valuesKey]\x2C [getIndexArray(length)\x2C values]);\x0d\n    }\x0d\n\x0d\n    const map = ObjectCreate(null);\x0d\n    let hasPrimitives = false;\x0d\n    const valuesKeyArray = [];\x0d\n    const indexKeyArray = ObjectKeys(tabularData);\x0d\n\x0d\n    for (; i < indexKeyArray.length; i++) {\x0d\n      const item = tabularData[indexKeyArray[i]];\x0d\n      const primitive = item === null ||\x0d\n          (typeof item !== 'function' && typeof item !== 'object');\x0d\n      if (properties === undefined && primitive) {\x0d\n        hasPrimitives = true;\x0d\n        valuesKeyArray[i] = _inspect(item);\x0d\n      } else {\x0d\n        const keys = properties || ObjectKeys(item);\x0d\n        for (const key of keys) {\x0d\n          map[key] ??= [];\x0d\n          if ((primitive && properties) ||\x0d\n               !ObjectPrototypeHasOwnProperty(item\x2C key))\x0d\n            map[key][i] = '';\x0d\n          else\x0d\n            map[key][i] = _inspect(item[key]);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    const keys = ObjectKeys(map);\x0d\n    const values = ObjectValues(map);\x0d\n    if (hasPrimitives) {\x0d\n      ArrayPrototypePush(keys\x2C valuesKey);\x0d\n      ArrayPrototypePush(values\x2C valuesKeyArray);\x0d\n    }\x0d\n    ArrayPrototypeUnshift(keys\x2C indexKey);\x0d\n    ArrayPrototypeUnshift(values\x2C indexKeyArray);\x0d\n\x0d\n    return final(keys\x2C values);\x0d\n  }\x2C\x0d\n};\x0d\n\x0d\n// Returns true if label was found\x0d\nfunction timeLogImpl(self\x2C name\x2C label\x2C data) {\x0d\n  const time = self._times.get(label);\x0d\n  if (time === undefined) {\x0d\n    process.emitWarning(`No such label '${label}' for console.${name}()`);\x0d\n    return false;\x0d\n  }\x0d\n  const duration = process.hrtime(time);\x0d\n  const ms = duration[0] * 1000 + duration[1] / 1e6;\x0d\n\x0d\n  const formatted = formatTime(ms);\x0d\n\x0d\n  if (data === undefined) {\x0d\n    self.log('%s: %s'\x2C label\x2C formatted);\x0d\n  } else {\x0d\n    self.log('%s: %s'\x2C label\x2C formatted\x2C ...new SafeArrayIterator(data));\x0d\n  }\x0d\n  return true;\x0d\n}\x0d\n\x0d\nfunction pad(value) {\x0d\n  return StringPrototypePadStart(`${value}`\x2C 2\x2C '0');\x0d\n}\x0d\n\x0d\nfunction formatTime(ms) {\x0d\n  let hours = 0;\x0d\n  let minutes = 0;\x0d\n  let seconds = 0;\x0d\n\x0d\n  if (ms >= kSecond) {\x0d\n    if (ms >= kMinute) {\x0d\n      if (ms >= kHour) {\x0d\n        hours = MathFloor(ms / kHour);\x0d\n        ms = ms % kHour;\x0d\n      }\x0d\n      minutes = MathFloor(ms / kMinute);\x0d\n      ms = ms % kMinute;\x0d\n    }\x0d\n    seconds = ms / kSecond;\x0d\n  }\x0d\n\x0d\n  if (hours !== 0 || minutes !== 0) {\x0d\n    ({ 0: seconds\x2C 1: ms } = StringPrototypeSplit(\x0d\n      NumberPrototypeToFixed(seconds\x2C 3)\x2C\x0d\n      '.'\x0d\n    ));\x0d\n    const res = hours !== 0 ? `${hours}:${pad(minutes)}` : minutes;\x0d\n    return `${res}:${pad(seconds)}.${ms} (${hours !== 0 ? 'h:m' : ''}m:ss.mmm)`;\x0d\n  }\x0d\n\x0d\n  if (seconds !== 0) {\x0d\n    return `${NumberPrototypeToFixed(seconds\x2C 3)}s`;\x0d\n  }\x0d\n\x0d\n  return `${Number(NumberPrototypeToFixed(ms\x2C 3))}ms`;\x0d\n}\x0d\n\x0d\nconst keyKey = 'Key';\x0d\nconst valuesKey = 'Values';\x0d\nconst indexKey = '(index)';\x0d\nconst iterKey = '(iteration index)';\x0d\n\x0d\nconst isArray = (v) => ArrayIsArray(v) || isTypedArray(v) || isBuffer(v);\x0d\n\x0d\nfunction noop() {}\x0d\n\x0d\nfor (const method of ReflectOwnKeys(consoleMethods))\x0d\n  Console.prototype[method] = consoleMethods[method];\x0d\n\x0d\nConsole.prototype.debug = Console.prototype.log;\x0d\nConsole.prototype.info = Console.prototype.log;\x0d\nConsole.prototype.dirxml = Console.prototype.log;\x0d\nConsole.prototype.error = Console.prototype.warn;\x0d\nConsole.prototype.groupCollapsed = Console.prototype.group;\x0d\n\x0d\nfunction initializeGlobalConsole(globalConsole) {\x0d\n  globalConsole[kBindStreamsLazy](process);\x0d\n  globalConsole[kBindProperties](true\x2C 'auto');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Console\x2C\x0d\n  kBindStreamsLazy\x2C\x0d\n  kBindProperties\x2C\x0d\n  initializeGlobalConsole\x2C\x0d\n  formatTime // exported for tests\x0d\n};\x0d\n
code-source-info,0x2f2f3a1c596,37,21084,21198,C0O21105C2O21119C4O21118C11O21136C16O21150C18O21164C20O21163C29O21180C36O21197,,
code-creation,LazyCompile,10,334720,0x2f2f3a1df76,94,value node:internal/console/constructor:200:20,0xb0b6ea9b58,~
code-source-info,0x2f2f3a1df76,37,5921,6580,C0O5921C15O5943C16O5943C18O5962C19O5962C21O5977C33O6028C38O6130C46O6241C60O6304C65O6406C73O6521C87O5977C93O6579,,
code-creation,LazyCompile,10,334938,0x2f2f3a1e5c6,414,value node:internal/console/constructor:230:20,0xb0b6ea9be0,~
code-source-info,0x2f2f3a1e5c6,37,6684,8114,C17O6741C27O6804C34O6848C52O6919C55O6889C73O6991C86O7090C89O7060C104O7140C111O7184C126O7225C129O7225C144O7278C151O7300C166O7334C169O7330C187O7427C191O7437C198O7459C213O7493C216O7489C235O7516C239O7529C246O7551C261O7581C275O7604C279O7617C286O7639C300O7669C314O7687C318O7702C325O7724C340O7754C354O7770C358O7795C365O7839C380O7880C394O7919C398O7939C407O6741C413O8113,,
code-creation,LazyCompile,10,335107,0x2f2f3a1ea26,18,createWriteErrorHandler node:internal/console/constructor:354:33,0xb0b6ea9e88,~
code-source-info,0x2f2f3a1ea26,37,10994,11869,C0O10994C13O11024C17O11866,,
code-creation,LazyCompile,10,335273,0x2f2f3a1ec06,27,SafeMap node:internal/per_context/primordials:366:16,0x39b87ca9b8,~
script-source,6,node:internal/per_context/primordials,'use strict';\x0d\n\x0d\n/* eslint-disable node-core/prefer-primordials */\x0d\n\x0d\n// This file subclasses and stores the JS builtins that come from the VM\x0d\n// so that Node.js's builtin modules do not need to later look these up from\x0d\n// the global proxy\x2C which can be mutated by users.\x0d\n\x0d\n// Use of primordials have sometimes a dramatic impact on performance\x2C please\x0d\n// benchmark all changes made in performance-sensitive areas of the codebase.\x0d\n// See: https://github.com/nodejs/node/pull/38248\x0d\n\x0d\nconst {\x0d\n  defineProperty: ReflectDefineProperty\x2C\x0d\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ownKeys: ReflectOwnKeys\x2C\x0d\n} = Reflect;\x0d\n\x0d\n// `uncurryThis` is equivalent to `func => Function.prototype.call.bind(func)`.\x0d\n// It is using `bind.bind(call)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.call` after it may have been mutated by users.\x0d\nconst { apply\x2C bind\x2C call } = Function.prototype;\x0d\nconst uncurryThis = bind.bind(call);\x0d\nprimordials.uncurryThis = uncurryThis;\x0d\n\x0d\n// `applyBind` is equivalent to `func => Function.prototype.apply.bind(func)`.\x0d\n// It is using `bind.bind(apply)` to avoid using `Function.prototype.bind`\x0d\n// and `Function.prototype.apply` after it may have been mutated by users.\x0d\nconst applyBind = bind.bind(apply);\x0d\nprimordials.applyBind = applyBind;\x0d\n\x0d\n// Methods that accept a variable number of arguments\x2C and thus it's useful to\x0d\n// also create `${prefix}${key}Apply`\x2C which uses `Function.prototype.apply`\x2C\x0d\n// instead of `Function.prototype.call`\x2C and thus doesn't require iterator\x0d\n// destructuring.\x0d\nconst varargsMethods = [\x0d\n  // 'ArrayPrototypeConcat' is omitted\x2C because it performs the spread\x0d\n  // on its own for arrays and array-likes with a truthy\x0d\n  // @@isConcatSpreadable symbol property.\x0d\n  'ArrayOf'\x2C\x0d\n  'ArrayPrototypePush'\x2C\x0d\n  'ArrayPrototypeUnshift'\x2C\x0d\n  // 'FunctionPrototypeCall' is omitted\x2C since there's 'ReflectApply'\x0d\n  // and 'FunctionPrototypeApply'.\x0d\n  'MathHypot'\x2C\x0d\n  'MathMax'\x2C\x0d\n  'MathMin'\x2C\x0d\n  'StringPrototypeConcat'\x2C\x0d\n  'TypedArrayOf'\x2C\x0d\n];\x0d\n\x0d\nfunction getNewKey(key) {\x0d\n  return typeof key === 'symbol' ?\x0d\n    `Symbol${key.description[7].toUpperCase()}${key.description.slice(8)}` :\x0d\n    `${key[0].toUpperCase()}${key.slice(1)}`;\x0d\n}\x0d\n\x0d\nfunction copyAccessor(dest\x2C prefix\x2C key\x2C { enumerable\x2C get\x2C set }) {\x0d\n  ReflectDefineProperty(dest\x2C `${prefix}Get${key}`\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: uncurryThis(get)\x2C\x0d\n    enumerable\x0d\n  });\x0d\n  if (set !== undefined) {\x0d\n    ReflectDefineProperty(dest\x2C `${prefix}Set${key}`\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value: uncurryThis(set)\x2C\x0d\n      enumerable\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamed(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C { __proto__: null\x2C ...desc });\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          __proto__: null\x2C\x0d\n          // `src` is bound as the `this` so that the static `this` points\x0d\n          // to the object it was defined on\x2C\x0d\n          // e.g.: `ArrayOfApply` gets a `this` of `Array`:\x0d\n          value: applyBind(desc.value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPropsRenamedBound(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = value.bind(src);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C { __proto__: null\x2C ...desc });\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          __proto__: null\x2C\x0d\n          value: applyBind(value\x2C src)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction copyPrototype(src\x2C dest\x2C prefix) {\x0d\n  for (const key of ReflectOwnKeys(src)) {\x0d\n    const newKey = getNewKey(key);\x0d\n    const desc = ReflectGetOwnPropertyDescriptor(src\x2C key);\x0d\n    if ('get' in desc) {\x0d\n      copyAccessor(dest\x2C prefix\x2C newKey\x2C desc);\x0d\n    } else {\x0d\n      const { value } = desc;\x0d\n      if (typeof value === 'function') {\x0d\n        desc.value = uncurryThis(value);\x0d\n      }\x0d\n\x0d\n      const name = `${prefix}${newKey}`;\x0d\n      ReflectDefineProperty(dest\x2C name\x2C { __proto__: null\x2C ...desc });\x0d\n      if (varargsMethods.includes(name)) {\x0d\n        ReflectDefineProperty(dest\x2C `${name}Apply`\x2C {\x0d\n          __proto__: null\x2C\x0d\n          value: applyBind(value)\x2C\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Create copies of configurable value properties of the global object\x0d\n[\x0d\n  'Proxy'\x2C\x0d\n  'globalThis'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  primordials[name] = globalThis[name];\x0d\n});\x0d\n\x0d\n// Create copies of URI handling functions\x0d\n[\x0d\n  decodeURI\x2C\x0d\n  decodeURIComponent\x2C\x0d\n  encodeURI\x2C\x0d\n  encodeURIComponent\x2C\x0d\n].forEach((fn) => {\x0d\n  primordials[fn.name] = fn;\x0d\n});\x0d\n\x0d\n// Create copies of legacy functions\x0d\n[\x0d\n  escape\x2C\x0d\n  eval\x2C\x0d\n  unescape\x2C\x0d\n].forEach((fn) => {\x0d\n  primordials[fn.name] = fn;\x0d\n});\x0d\n\x0d\n// Create copies of the namespace objects\x0d\n[\x0d\n  'JSON'\x2C\x0d\n  'Math'\x2C\x0d\n  'Proxy'\x2C\x0d\n  'Reflect'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  copyPropsRenamed(globalThis[name]\x2C primordials\x2C name);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects\x0d\n[\x0d\n  'AggregateError'\x2C\x0d\n  'Array'\x2C\x0d\n  'ArrayBuffer'\x2C\x0d\n  'BigInt'\x2C\x0d\n  'BigInt64Array'\x2C\x0d\n  'BigUint64Array'\x2C\x0d\n  'Boolean'\x2C\x0d\n  'DataView'\x2C\x0d\n  'Date'\x2C\x0d\n  'Error'\x2C\x0d\n  'EvalError'\x2C\x0d\n  'FinalizationRegistry'\x2C\x0d\n  'Float32Array'\x2C\x0d\n  'Float64Array'\x2C\x0d\n  'Function'\x2C\x0d\n  'Int16Array'\x2C\x0d\n  'Int32Array'\x2C\x0d\n  'Int8Array'\x2C\x0d\n  'Map'\x2C\x0d\n  'Number'\x2C\x0d\n  'Object'\x2C\x0d\n  'RangeError'\x2C\x0d\n  'ReferenceError'\x2C\x0d\n  'RegExp'\x2C\x0d\n  'Set'\x2C\x0d\n  'String'\x2C\x0d\n  'Symbol'\x2C\x0d\n  'SyntaxError'\x2C\x0d\n  'TypeError'\x2C\x0d\n  'URIError'\x2C\x0d\n  'Uint16Array'\x2C\x0d\n  'Uint32Array'\x2C\x0d\n  'Uint8Array'\x2C\x0d\n  'Uint8ClampedArray'\x2C\x0d\n  'WeakMap'\x2C\x0d\n  'WeakRef'\x2C\x0d\n  'WeakSet'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = globalThis[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamed(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of intrinsic objects that require a valid `this` to call\x0d\n// static methods.\x0d\n// Refs: https://www.ecma-international.org/ecma-262/#sec-promise.all\x0d\n[\x0d\n  'Promise'\x2C\x0d\n].forEach((name) => {\x0d\n  // eslint-disable-next-line no-restricted-globals\x0d\n  const original = globalThis[name];\x0d\n  primordials[name] = original;\x0d\n  copyPropsRenamedBound(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n// Create copies of abstract intrinsic objects that are not directly exposed\x0d\n// on the global object.\x0d\n// Refs: https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object\x0d\n[\x0d\n  { name: 'TypedArray'\x2C original: Reflect.getPrototypeOf(Uint8Array) }\x2C\x0d\n  { name: 'ArrayIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(Array.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n  { name: 'StringIterator'\x2C original: {\x0d\n    prototype: Reflect.getPrototypeOf(String.prototype[Symbol.iterator]())\x2C\x0d\n  } }\x2C\x0d\n].forEach(({ name\x2C original }) => {\x0d\n  primordials[name] = original;\x0d\n  // The static %TypedArray% methods require a valid `this`\x2C but can't be bound\x2C\x0d\n  // as they need a subclass constructor as the receiver:\x0d\n  copyPrototype(original\x2C primordials\x2C name);\x0d\n  copyPrototype(original.prototype\x2C primordials\x2C `${name}Prototype`);\x0d\n});\x0d\n\x0d\n/* eslint-enable node-core/prefer-primordials */\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  FinalizationRegistry\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Map\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  Set\x2C\x0d\n  SymbolIterator\x2C\x0d\n  WeakMap\x2C\x0d\n  WeakRef\x2C\x0d\n  WeakSet\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Because these functions are used by `makeSafe`\x2C which is exposed\x0d\n// on the `primordials` object\x2C it's important to use const references\x0d\n// to the primordials that they use:\x0d\nconst createSafeIterator = (factory\x2C next) => {\x0d\n  class SafeIterator {\x0d\n    constructor(iterable) {\x0d\n      this._iterator = factory(iterable);\x0d\n    }\x0d\n    next() {\x0d\n      return next(this._iterator);\x0d\n    }\x0d\n    [SymbolIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x0d\n  ObjectSetPrototypeOf(SafeIterator.prototype\x2C null);\x0d\n  ObjectFreeze(SafeIterator.prototype);\x0d\n  ObjectFreeze(SafeIterator);\x0d\n  return SafeIterator;\x0d\n};\x0d\n\x0d\nprimordials.SafeArrayIterator = createSafeIterator(\x0d\n  primordials.ArrayPrototypeSymbolIterator\x2C\x0d\n  primordials.ArrayIteratorPrototypeNext\x0d\n);\x0d\nprimordials.SafeStringIterator = createSafeIterator(\x0d\n  primordials.StringPrototypeSymbolIterator\x2C\x0d\n  primordials.StringIteratorPrototypeNext\x0d\n);\x0d\n\x0d\nconst copyProps = (src\x2C dest) => {\x0d\n  ArrayPrototypeForEach(ReflectOwnKeys(src)\x2C (key) => {\x0d\n    if (!ReflectGetOwnPropertyDescriptor(dest\x2C key)) {\x0d\n      ReflectDefineProperty(\x0d\n        dest\x2C\x0d\n        key\x2C\x0d\n        { __proto__: null\x2C ...ReflectGetOwnPropertyDescriptor(src\x2C key) });\x0d\n    }\x0d\n  });\x0d\n};\x0d\n\x0d\n/**\x0d\n * @type {typeof primordials.makeSafe}\x0d\n */\x0d\nconst makeSafe = (unsafe\x2C safe) => {\x0d\n  if (SymbolIterator in unsafe.prototype) {\x0d\n    const dummy = new unsafe();\x0d\n    let next; // We can reuse the same `next` method.\x0d\n\x0d\n    ArrayPrototypeForEach(ReflectOwnKeys(unsafe.prototype)\x2C (key) => {\x0d\n      if (!ReflectGetOwnPropertyDescriptor(safe.prototype\x2C key)) {\x0d\n        const desc = ReflectGetOwnPropertyDescriptor(unsafe.prototype\x2C key);\x0d\n        if (\x0d\n          typeof desc.value === 'function' &&\x0d\n          desc.value.length === 0 &&\x0d\n          SymbolIterator in (FunctionPrototypeCall(desc.value\x2C dummy) ?? {})\x0d\n        ) {\x0d\n          const createIterator = uncurryThis(desc.value);\x0d\n          next ??= uncurryThis(createIterator(dummy).next);\x0d\n          const SafeIterator = createSafeIterator(createIterator\x2C next);\x0d\n          desc.value = function() {\x0d\n            return new SafeIterator(this);\x0d\n          };\x0d\n        }\x0d\n        ReflectDefineProperty(safe.prototype\x2C key\x2C { __proto__: null\x2C ...desc });\x0d\n      }\x0d\n    });\x0d\n  } else {\x0d\n    copyProps(unsafe.prototype\x2C safe.prototype);\x0d\n  }\x0d\n  copyProps(unsafe\x2C safe);\x0d\n\x0d\n  ObjectSetPrototypeOf(safe.prototype\x2C null);\x0d\n  ObjectFreeze(safe.prototype);\x0d\n  ObjectFreeze(safe);\x0d\n  return safe;\x0d\n};\x0d\nprimordials.makeSafe = makeSafe;\x0d\n\x0d\n// Subclass the constructors because we need to use their prototype\x0d\n// methods later.\x0d\n// Defining the `constructor` is necessary here to avoid the default\x0d\n// constructor which uses the user-mutable `%ArrayIteratorPrototype%.next`.\x0d\nprimordials.SafeMap = makeSafe(\x0d\n  Map\x2C\x0d\n  class SafeMap extends Map {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakMap = makeSafe(\x0d\n  WeakMap\x2C\x0d\n  class SafeWeakMap extends WeakMap {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeSet = makeSafe(\x0d\n  Set\x2C\x0d\n  class SafeSet extends Set {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakSet = makeSafe(\x0d\n  WeakSet\x2C\x0d\n  class SafeWeakSet extends WeakSet {\x0d\n    constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  }\x0d\n);\x0d\n\x0d\nprimordials.SafeFinalizationRegistry = makeSafe(\x0d\n  FinalizationRegistry\x2C\x0d\n  class SafeFinalizationRegistry extends FinalizationRegistry {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(cleanupCallback) { super(cleanupCallback); }\x0d\n  }\x0d\n);\x0d\nprimordials.SafeWeakRef = makeSafe(\x0d\n  WeakRef\x2C\x0d\n  class SafeWeakRef extends WeakRef {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(target) { super(target); }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst SafePromise = makeSafe(\x0d\n  Promise\x2C\x0d\n  class SafePromise extends Promise {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(executor) { super(executor); }\x0d\n  }\x0d\n);\x0d\n\x0d\n/**\x0d\n * Attaches a callback that is invoked when the Promise is settled (fulfilled or\x0d\n * rejected). The resolved value cannot be modified from the callback.\x0d\n * Prefer using async functions when possible.\x0d\n * @param {Promise<any>} thisPromise\x0d\n * @param {() => void) | undefined | null} onFinally The callback to execute\x0d\n *        when the Promise is settled (fulfilled or rejected).\x0d\n * @returns {Promise} A Promise for the completion of the callback.\x0d\n */\x0d\nprimordials.SafePromisePrototypeFinally = (thisPromise\x2C onFinally) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    new SafePromise((a\x2C b) => PromisePrototypeThen(thisPromise\x2C a\x2C b))\x0d\n      .finally(onFinally)\x0d\n      .then(a\x2C b)\x0d\n  );\x0d\n\x0d\nprimordials.AsyncIteratorPrototype =\x0d\n  primordials.ReflectGetPrototypeOf(\x0d\n    primordials.ReflectGetPrototypeOf(\x0d\n      async function* () {}).prototype);\x0d\n\x0d\nconst arrayToSafePromiseIterable = (promises\x2C mapFn) =>\x0d\n  new primordials.SafeArrayIterator(\x0d\n    ArrayPrototypeMap(\x0d\n      promises\x2C\x0d\n      (promise\x2C i) =>\x0d\n        new SafePromise((a\x2C b) => PromisePrototypeThen(mapFn == null ? promise : mapFn(promise\x2C i)\x2C a\x2C b))\x0d\n    )\x0d\n  );\x0d\n\x0d\n/**\x0d\n * @param {Promise<any>[]} promises\x0d\n * @param {(v: Promise<any>\x2C k: number) => Promise<any>} [mapFn]\x0d\n * @returns {Promise<any[]>}\x0d\n */\x0d\nprimordials.SafePromiseAll = (promises\x2C mapFn) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    SafePromise.all(arrayToSafePromiseIterable(promises\x2C mapFn)).then(a\x2C b)\x0d\n  );\x0d\n\x0d\n/**\x0d\n * @param {Promise<any>[]} promises\x0d\n * @param {(v: Promise<any>\x2C k: number) => Promise<any>} [mapFn]\x0d\n * @returns {Promise<PromiseSettledResult<any>[]>}\x0d\n */\x0d\nprimordials.SafePromiseAllSettled = (promises\x2C mapFn) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    SafePromise.allSettled(arrayToSafePromiseIterable(promises\x2C mapFn)).then(a\x2C b)\x0d\n  );\x0d\n\x0d\n/**\x0d\n * @param {Promise<any>[]} promises\x0d\n * @param {(v: Promise<any>\x2C k: number) => Promise<any>} [mapFn]\x0d\n * @returns {Promise<any>}\x0d\n */\x0d\nprimordials.SafePromiseAny = (promises\x2C mapFn) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    SafePromise.any(arrayToSafePromiseIterable(promises\x2C mapFn)).then(a\x2C b)\x0d\n  );\x0d\n\x0d\n/**\x0d\n * @param {Promise<any>[]} promises\x0d\n * @param {(v: Promise<any>\x2C k: number) => Promise<any>} [mapFn]\x0d\n * @returns {Promise<any>}\x0d\n */\x0d\nprimordials.SafePromiseRace = (promises\x2C mapFn) =>\x0d\n  // Wrapping on a new Promise is necessary to not expose the SafePromise\x0d\n  // prototype to user-land.\x0d\n  new Promise((a\x2C b) =>\x0d\n    SafePromise.race(arrayToSafePromiseIterable(promises\x2C mapFn)).then(a\x2C b)\x0d\n  );\x0d\n\x0d\n\x0d\nObjectSetPrototypeOf(primordials\x2C null);\x0d\nObjectFreeze(primordials);\x0d\n
code-source-info,0x2f2f3a1ec06,6,10966,10983,C3O10972C7O10978C11O10972C26O10982,,
code-creation,LazyCompile,10,336499,0x2f2f3a1fcfe,63,addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:155:33,0x2f2f3a0da60,~
code-source-info,0x2f2f3a1fcfe,100,5153,5412,C16O5206C21O5206C26O5233C28O5251C36O5281C43O5371C49O5390C56O5251C62O5411,,
code-creation,LazyCompile,10,336618,0x2f2f3a1fe66,46,setupTraceCategoryState node:internal/bootstrap/pre_execution:318:33,0x2f2f3a0de20,~
code-source-info,0x2f2f3a1fe66,100,10054,10285,C0O10097C6O10097C11O10070C16O10170C22O10170C27O10141C32O10213C35O10238C40O10213C45O10284,,
code-creation,LazyCompile,10,336734,0x2f2f3a1fffe,77,toggleTraceCategoryState node:internal/process/per_thread:397:34,0xb0b6e99050,~
code-source-info,0x2f2f3a1fffe,30,11761,12068,C0O11786C4O11816C10O11852C16O11884C21O11928C26O11929C33O11873C39O11955C44O11976C49O11976C55O11996C61O12029C66O12050C71O12050C76O12067,,
code-creation,LazyCompile,10,336827,0x2f2f3a201ae,42,setupPerfHooks node:internal/bootstrap/pre_execution:324:24,0x2f2f3a0de70,~
code-source-info,0x2f2f3a201ae,100,10312,10435,C0O10320C6O10320C11O10356C16O10357C20O10381C26O10381C31O10411C36O10412C41O10434,,
code-creation,LazyCompile,10,336930,0x2f2f3a2032e,42,refreshTimeOrigin node:internal/perf/performance:217:27,0x1b7857ae900,~
script-source,76,node:internal/perf/performance,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ILLEGAL_CONSTRUCTOR\x2C\x0d\n    ERR_MISSING_ARGS\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  EventTarget\x2C\x0d\n} = require('internal/event_target');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\nconst { markResourceTiming } = require('internal/perf/resource_timing');\x0d\n\x0d\nconst {\x0d\n  mark\x2C\x0d\n  measure\x2C\x0d\n  clearMarkTimings\x2C\x0d\n} = require('internal/perf/usertiming');\x0d\nconst {\x0d\n  clearEntriesFromBuffer\x2C\x0d\n  filterBufferMapByNameAndType\x2C\x0d\n} = require('internal/perf/observe');\x0d\n\x0d\nconst eventLoopUtilization = require('internal/perf/event_loop_utilization');\x0d\nconst nodeTiming = require('internal/perf/nodetiming');\x0d\nconst timerify = require('internal/perf/timerify');\x0d\nconst { customInspectSymbol: kInspect } = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst {\x0d\n  getTimeOriginTimestamp\x0d\n} = internalBinding('performance');\x0d\n\x0d\nclass Performance extends EventTarget {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0) return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `Performance ${inspect({\x0d\n      nodeTiming: this.nodeTiming\x2C\x0d\n      timeOrigin: this.timeOrigin\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction toJSON() {\x0d\n  return {\x0d\n    nodeTiming: this.nodeTiming\x2C\x0d\n    timeOrigin: this.timeOrigin\x2C\x0d\n    eventLoopUtilization: this.eventLoopUtilization()\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction clearMarks(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearMarkTimings(name);\x0d\n  clearEntriesFromBuffer('mark'\x2C name);\x0d\n}\x0d\n\x0d\nfunction clearMeasures(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearEntriesFromBuffer('measure'\x2C name);\x0d\n}\x0d\n\x0d\nfunction clearResourceTimings(name) {\x0d\n  if (name !== undefined) {\x0d\n    name = `${name}`;\x0d\n  }\x0d\n  clearEntriesFromBuffer('resource'\x2C name);\x0d\n}\x0d\n\x0d\nfunction getEntries() {\x0d\n  return filterBufferMapByNameAndType();\x0d\n}\x0d\n\x0d\nfunction getEntriesByName(name) {\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('name');\x0d\n  }\x0d\n  name = `${name}`;\x0d\n  return filterBufferMapByNameAndType(name\x2C undefined);\x0d\n}\x0d\n\x0d\nfunction getEntriesByType(type) {\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('type');\x0d\n  }\x0d\n  type = `${type}`;\x0d\n  return filterBufferMapByNameAndType(undefined\x2C type);\x0d\n}\x0d\n\x0d\nclass InternalPerformance extends EventTarget {}\x0d\nInternalPerformance.prototype.constructor = Performance.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalPerformance.prototype\x2C Performance.prototype);\x0d\n\x0d\nObjectDefineProperties(Performance.prototype\x2C {\x0d\n  clearMarks: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMarks\x2C\x0d\n  }\x2C\x0d\n  clearMeasures: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearMeasures\x2C\x0d\n  }\x2C\x0d\n  clearResourceTimings: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: clearResourceTimings\x2C\x0d\n  }\x2C\x0d\n  eventLoopUtilization: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: eventLoopUtilization\x2C\x0d\n  }\x2C\x0d\n  getEntries: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntries\x2C\x0d\n  }\x2C\x0d\n  getEntriesByName: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByName\x2C\x0d\n  }\x2C\x0d\n  getEntriesByType: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: getEntriesByType\x2C\x0d\n  }\x2C\x0d\n  mark: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: mark\x2C\x0d\n  }\x2C\x0d\n  measure: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: measure\x2C\x0d\n  }\x2C\x0d\n  nodeTiming: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: nodeTiming\x2C\x0d\n  }\x2C\x0d\n  // In the browser\x2C this function is not public.  However\x2C it must be used inside fetch\x0d\n  // which is a Node.js dependency\x2C not a internal module\x0d\n  markResourceTiming: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: markResourceTiming\x2C\x0d\n  }\x2C\x0d\n  now: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: now\x2C\x0d\n  }\x2C\x0d\n  timerify: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: timerify\x2C\x0d\n  }\x2C\x0d\n  // This would be updated during pre-execution in case\x0d\n  // the process is launched from a snapshot.\x0d\n  // TODO(joyeecheung): we may want to warn about access to\x0d\n  // this during snapshot building.\x0d\n  timeOrigin: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  }\x2C\x0d\n  toJSON: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: toJSON\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  ObjectDefineProperty(Performance.prototype\x2C 'timeOrigin'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: getTimeOriginTimestamp()\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  InternalPerformance\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2f2f3a2032e,76,4969,5154,C0O4977C7O4998C10O5010C25O5119C28O5119C35O4977C41O5153,,
code-creation,LazyCompile,10,337447,0x2f2f3a20b7e,19,refreshTimeOrigin node:internal/perf/utils:25:27,0x32ebb7e9238,~
script-source,48,node:internal/perf/utils,'use strict';\x0d\n\x0d\nconst binding = internalBinding('performance');\x0d\nconst {\x0d\n  milestones\x2C\x0d\n  getTimeOrigin\x2C\x0d\n} = binding;\x0d\n\x0d\n// TODO(joyeecheung): we may want to warn about access to\x0d\n// this during snapshot building.\x0d\nlet timeOrigin = getTimeOrigin();\x0d\n\x0d\nfunction now() {\x0d\n  const hr = process.hrtime();\x0d\n  return (hr[0] * 1000 + hr[1] / 1e6) - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction getMilestoneTimestamp(milestoneIdx) {\x0d\n  const ns = milestones[milestoneIdx];\x0d\n  if (ns === -1)\x0d\n    return ns;\x0d\n  return ns / 1e6 - timeOrigin;\x0d\n}\x0d\n\x0d\nfunction refreshTimeOrigin() {\x0d\n  timeOrigin = getTimeOrigin();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  now\x2C\x0d\n  getMilestoneTimestamp\x2C\x0d\n  refreshTimeOrigin\x0d\n};\x0d\n
code-source-info,0x2f2f3a20b7e,48,549,589,C0O557C5O570C11O568C18O588,,
code-creation,LazyCompile,10,337608,0x2f2f3a20dee,62,setupInspectorHooks node:internal/bootstrap/pre_execution:329:29,0x2f2f3a0dec0,~
code-source-info,0x2f2f3a20dee,100,10467,11033,C0O10816C6O10820C11O10845C17O10914C23O10914C28O10882C33O10897C38O10961C44O10961C49O10989C54O10990C61O11032,,
code-creation,Eval,10,337944,0x2f2f3a21186,5, node:internal/inspector_async_hook:1:1,0x2f2f3a20fd0,~
script-source,101,node:internal/inspector_async_hook,'use strict';\x0d\n\x0d\nlet hook;\x0d\nlet config;\x0d\n\x0d\nconst {\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction lazyHookCreation() {\x0d\n  const inspector = internalBinding('inspector');\x0d\n  const { createHook } = require('async_hooks');\x0d\n  config = internalBinding('config');\x0d\n\x0d\n  hook = createHook({\x0d\n    init(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n    // It's difficult to tell which tasks will be recurring and which won't\x2C\x0d\n    // therefore we mark all tasks as recurring. Based on the discussion\x0d\n    // in https://github.com/nodejs/node/pull/13870#discussion_r124515293\x2C\x0d\n    // this should be fine as long as we call asyncTaskCanceled() too.\x0d\n      const recurring = true;\x0d\n      if (type === 'PROMISE')\x0d\n        this.promiseIds.add(asyncId);\x0d\n      else\x0d\n        inspector.asyncTaskScheduled(type\x2C asyncId\x2C recurring);\x0d\n    }\x2C\x0d\n\x0d\n    before(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskStarted(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    after(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return;\x0d\n      inspector.asyncTaskFinished(asyncId);\x0d\n    }\x2C\x0d\n\x0d\n    destroy(asyncId) {\x0d\n      if (this.promiseIds.has(asyncId))\x0d\n        return this.promiseIds.delete(asyncId);\x0d\n      inspector.asyncTaskCanceled(asyncId);\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  hook.promiseIds = new SafeSet();\x0d\n}\x0d\n\x0d\nfunction enable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  if (config.bits < 64) {\x0d\n    // V8 Inspector stores task ids as (void*) pointers.\x0d\n    // async_hooks store ids as 64bit numbers.\x0d\n    // As a result\x2C we cannot reliably translate async_hook ids to V8 async_task\x0d\n    // ids on 32bit platforms.\x0d\n    process.emitWarning(\x0d\n      'Warning: Async stack traces in debugger are not available ' +\x0d\n      `on ${config.bits}bit platforms. The feature is disabled.`\x2C\x0d\n      {\x0d\n        code: 'INSPECTOR_ASYNC_STACK_TRACES_NOT_AVAILABLE'\x2C\x0d\n      });\x0d\n  } else {\x0d\n    hook.enable();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction disable() {\x0d\n  if (hook === undefined) lazyHookCreation();\x0d\n  hook.disable();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  enable\x2C\x0d\n  disable\x0d\n};\x0d\n
code-source-info,0x2f2f3a21186,101,0,2048,C0O0C4O2048,,
code-creation,Function,10,338161,0x2f2f3a213a6,79, node:internal/inspector_async_hook:1:1,0x2f2f3a21100,~
code-source-info,0x2f2f3a213a6,101,0,2048,C0O0C42O21C43O21C45O32C46O32C48O54C54O2002C61O2024C67O2035C73O2017C78O2047,,
new,MemoryChunk,0x246eeec0000,262144
code-creation,Function,11,338509,0x246eeec3060,664,nativeModuleRequire node:internal/bootstrap/loaders:353:29,0x39b87d0d20,^
code-source-info,0x246eeec3060,9,11379,11733,,,
code-creation,Function,11,338576,0x246eeec3360,216,isPathSeparator node:path:52:25,0x32ebb7ccfc8,^
code-source-info,0x246eeec3360,41,1794,1876,,,
code-creation,Function,11,338673,0x246eeec34a0,3076,normalizeString node:path:66:25,0x32ebb7cd438,^
code-source-info,0x246eeec34a0,41,2226,4212,,,
code-creation,LazyCompile,10,338797,0x2f2f3a21ba6,69,setupWarningHandler node:internal/bootstrap/pre_execution:168:29,0x2f2f3a0dab0,~
code-source-info,0x2f2f3a21ba6,100,5444,5649,C0O5482C6O5482C11O5465C16O5522C24O5526C33O5571C38O5575C45O5592C50O5608C53O5616C61O5616C68O5648,,
code-creation,LazyCompile,10,339013,0x2f2f3a21e1e,20,addListener node:events:604:58,0x2392d71bf8,~
script-source,23,node:events,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  PromiseReject\x2C\x0d\n  PromiseResolve\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolAsyncIterator\x2C\x0d\n} = primordials;\x0d\nconst kRejection = SymbolFor('nodejs.rejection');\x0d\n\x0d\nconst { kEmptyObject } = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  inspect\x2C\x0d\n  identicalSequenceRange\x2C\x0d\n} = require('internal/util/inspect');\x0d\n\x0d\nlet spliceOne;\x0d\n\x0d\nconst {\x0d\n  AbortError\x2C\x0d\n  kEnhanceStackBeforeInspector\x2C\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_UNHANDLED_ERROR\x0d\n  }\x2C\x0d\n  genericNodeError\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst kCapture = Symbol('kCapture');\x0d\nconst kErrorMonitor = Symbol('events.errorMonitor');\x0d\nconst kMaxEventTargetListeners = Symbol('events.maxEventTargetListeners');\x0d\nconst kMaxEventTargetListenersWarned =\x0d\n  Symbol('events.maxEventTargetListenersWarned');\x0d\n\x0d\nlet EventEmitterAsyncResource;\x0d\n// The EventEmitterAsyncResource has to be initialized lazily because event.js\x0d\n// is loaded so early in the bootstrap process\x2C before async_hooks is available.\x0d\n//\x0d\n// This implementation was adapted straight from addaleax's\x0d\n// eventemitter-asyncresource MIT-licensed userland module.\x0d\n// https://github.com/addaleax/eventemitter-asyncresource\x0d\nfunction lazyEventEmitterAsyncResource() {\x0d\n  if (EventEmitterAsyncResource === undefined) {\x0d\n    const {\x0d\n      AsyncResource\x0d\n    } = require('async_hooks');\x0d\n\x0d\n    const kEventEmitter = Symbol('kEventEmitter');\x0d\n    const kAsyncResource = Symbol('kAsyncResource');\x0d\n    class EventEmitterReferencingAsyncResource extends AsyncResource {\x0d\n      /**\x0d\n       * @param {EventEmitter} ee\x0d\n       * @param {string} [type]\x0d\n       * @param {{\x0d\n       *   triggerAsyncId?: number\x2C\x0d\n       *   requireManualDestroy?: boolean\x2C\x0d\n       * }} [options]\x0d\n       */\x0d\n      constructor(ee\x2C type\x2C options) {\x0d\n        super(type\x2C options);\x0d\n        this[kEventEmitter] = ee;\x0d\n      }\x0d\n\x0d\n      /**\x0d\n       * @type {EventEmitter}\x0d\n       */\x0d\n      get eventEmitter() {\x0d\n        if (this[kEventEmitter] === undefined)\x0d\n          throw new ERR_INVALID_THIS('EventEmitterReferencingAsyncResource');\x0d\n        return this[kEventEmitter];\x0d\n      }\x0d\n    }\x0d\n\x0d\n    EventEmitterAsyncResource =\x0d\n      class EventEmitterAsyncResource extends EventEmitter {\x0d\n        /**\x0d\n         * @param {{\x0d\n         *   name?: string\x2C\x0d\n         *   triggerAsyncId?: number\x2C\x0d\n         *   requireManualDestroy?: boolean\x2C\x0d\n         * }} [options]\x0d\n         */\x0d\n        constructor(options = undefined) {\x0d\n          let name;\x0d\n          if (typeof options === 'string') {\x0d\n            name = options;\x0d\n            options = undefined;\x0d\n          } else {\x0d\n            if (new.target === EventEmitterAsyncResource) {\x0d\n              validateString(options?.name\x2C 'options.name');\x0d\n            }\x0d\n            name = options?.name || new.target.name;\x0d\n          }\x0d\n          super(options);\x0d\n\x0d\n          this[kAsyncResource] =\x0d\n            new EventEmitterReferencingAsyncResource(this\x2C name\x2C options);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @param {symbol\x2Cstring} event\x0d\n         * @param  {...any} args\x0d\n         * @returns {boolean}\x0d\n         */\x0d\n        emit(event\x2C ...args) {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          const { asyncResource } = this;\x0d\n          ArrayPrototypeUnshift(args\x2C super.emit\x2C this\x2C event);\x0d\n          return ReflectApply(asyncResource.runInAsyncScope\x2C asyncResource\x2C\x0d\n                              args);\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @returns {void}\x0d\n         */\x0d\n        emitDestroy() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          this.asyncResource.emitDestroy();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get asyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.asyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {number}\x0d\n         */\x0d\n        get triggerAsyncId() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this.asyncResource.triggerAsyncId();\x0d\n        }\x0d\n\x0d\n        /**\x0d\n         * @type {EventEmitterReferencingAsyncResource}\x0d\n         */\x0d\n        get asyncResource() {\x0d\n          if (this[kAsyncResource] === undefined)\x0d\n            throw new ERR_INVALID_THIS('EventEmitterAsyncResource');\x0d\n          return this[kAsyncResource];\x0d\n        }\x0d\n      };\x0d\n  }\x0d\n  return EventEmitterAsyncResource;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new `EventEmitter` instance.\x0d\n * @param {{ captureRejections?: boolean; }} [opts]\x0d\n * @constructs {EventEmitter}\x0d\n */\x0d\nfunction EventEmitter(opts) {\x0d\n  EventEmitter.init.call(this\x2C opts);\x0d\n}\x0d\nmodule.exports = EventEmitter;\x0d\nmodule.exports.once = once;\x0d\nmodule.exports.on = on;\x0d\nmodule.exports.getEventListeners = getEventListeners;\x0d\n// Backwards-compat with node 0.10.x\x0d\nEventEmitter.EventEmitter = EventEmitter;\x0d\n\x0d\nEventEmitter.usingDomains = false;\x0d\n\x0d\nEventEmitter.captureRejectionSymbol = kRejection;\x0d\nObjectDefineProperty(EventEmitter\x2C 'captureRejections'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return EventEmitter.prototype[kCapture];\x0d\n  }\x2C\x0d\n  set(value) {\x0d\n    validateBoolean(value\x2C 'EventEmitter.captureRejections');\x0d\n\x0d\n    EventEmitter.prototype[kCapture] = value;\x0d\n  }\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'EventEmitterAsyncResource'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  get: lazyEventEmitterAsyncResource\x2C\x0d\n  set: undefined\x2C\x0d\n  configurable: true\x2C\x0d\n});\x0d\n\x0d\nEventEmitter.errorMonitor = kErrorMonitor;\x0d\n\x0d\n// The default for captureRejections is false\x0d\nObjectDefineProperty(EventEmitter.prototype\x2C kCapture\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: false\x2C\x0d\n  writable: true\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\nEventEmitter.prototype._events = undefined;\x0d\nEventEmitter.prototype._eventsCount = 0;\x0d\nEventEmitter.prototype._maxListeners = undefined;\x0d\n\x0d\n// By default EventEmitters will print a warning if more than 10 listeners are\x0d\n// added to it. This is a useful default which helps finding memory leaks.\x0d\nlet defaultMaxListeners = 10;\x0d\nlet isEventTarget;\x0d\n\x0d\nfunction checkListener(listener) {\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n}\x0d\n\x0d\nObjectDefineProperty(EventEmitter\x2C 'defaultMaxListeners'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  get: function() {\x0d\n    return defaultMaxListeners;\x0d\n  }\x2C\x0d\n  set: function(arg) {\x0d\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\x0d\n      throw new ERR_OUT_OF_RANGE('defaultMaxListeners'\x2C\x0d\n                                 'a non-negative number'\x2C\x0d\n                                 arg);\x0d\n    }\x0d\n    defaultMaxListeners = arg;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperties(EventEmitter\x2C {\x0d\n  kMaxEventTargetListeners: {\x0d\n    __proto__: null\x2C\x0d\n    value: kMaxEventTargetListeners\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x2C\x0d\n  kMaxEventTargetListenersWarned: {\x0d\n    __proto__: null\x2C\x0d\n    value: kMaxEventTargetListenersWarned\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: false\x2C\x0d\n    writable: false\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Sets the max listeners.\x0d\n * @param {number} n\x0d\n * @param {EventTarget[] | EventEmitter[]} [eventTargets]\x0d\n * @returns {void}\x0d\n */\x0d\nEventEmitter.setMaxListeners =\x0d\n  function(n = defaultMaxListeners\x2C ...eventTargets) {\x0d\n    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n))\x0d\n      throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n    if (eventTargets.length === 0) {\x0d\n      defaultMaxListeners = n;\x0d\n    } else {\x0d\n      if (isEventTarget === undefined)\x0d\n        isEventTarget = require('internal/event_target').isEventTarget;\x0d\n\x0d\n      for (let i = 0; i < eventTargets.length; i++) {\x0d\n        const target = eventTargets[i];\x0d\n        if (isEventTarget(target)) {\x0d\n          target[kMaxEventTargetListeners] = n;\x0d\n          target[kMaxEventTargetListenersWarned] = false;\x0d\n        } else if (typeof target.setMaxListeners === 'function') {\x0d\n          target.setMaxListeners(n);\x0d\n        } else {\x0d\n          throw new ERR_INVALID_ARG_TYPE(\x0d\n            'eventTargets'\x2C\x0d\n            ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n            target);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  };\x0d\n\x0d\n// If you're updating this function definition\x2C please also update any\x0d\n// re-definitions\x2C such as the one in the Domain module (lib/domain.js).\x0d\nEventEmitter.init = function(opts) {\x0d\n\x0d\n  if (this._events === undefined ||\x0d\n      this._events === ObjectGetPrototypeOf(this)._events) {\x0d\n    this._events = ObjectCreate(null);\x0d\n    this._eventsCount = 0;\x0d\n  }\x0d\n\x0d\n  this._maxListeners = this._maxListeners || undefined;\x0d\n\x0d\n\x0d\n  if (opts?.captureRejections) {\x0d\n    validateBoolean(opts.captureRejections\x2C 'options.captureRejections');\x0d\n    this[kCapture] = Boolean(opts.captureRejections);\x0d\n  } else {\x0d\n    // Assigning the kCapture property directly saves an expensive\x0d\n    // prototype lookup in a very sensitive hot path.\x0d\n    this[kCapture] = EventEmitter.prototype[kCapture];\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addCatch(that\x2C promise\x2C type\x2C args) {\x0d\n  if (!that[kCapture]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Handle Promises/A+ spec\x2C then could be a getter\x0d\n  // that throws on second use.\x0d\n  try {\x0d\n    const then = promise.then;\x0d\n\x0d\n    if (typeof then === 'function') {\x0d\n      then.call(promise\x2C undefined\x2C function(err) {\x0d\n        // The callback is called with nextTick to avoid a follow-up\x0d\n        // rejection from this promise.\x0d\n        process.nextTick(emitUnhandledRejectionOrErr\x2C that\x2C err\x2C type\x2C args);\x0d\n      });\x0d\n    }\x0d\n  } catch (err) {\x0d\n    that.emit('error'\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUnhandledRejectionOrErr(ee\x2C err\x2C type\x2C args) {\x0d\n  if (typeof ee[kRejection] === 'function') {\x0d\n    ee[kRejection](err\x2C type\x2C ...args);\x0d\n  } else {\x0d\n    // We have to disable the capture rejections mechanism\x2C otherwise\x0d\n    // we might end up in an infinite loop.\x0d\n    const prev = ee[kCapture];\x0d\n\x0d\n    // If the error handler throws\x2C it is not catchable and it\x0d\n    // will end up in 'uncaughtException'. We restore the previous\x0d\n    // value of kCapture in case the uncaughtException is present\x0d\n    // and the exception is handled.\x0d\n    try {\x0d\n      ee[kCapture] = false;\x0d\n      ee.emit('error'\x2C err);\x0d\n    } finally {\x0d\n      ee[kCapture] = prev;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Increases the max listeners of the event emitter.\x0d\n * @param {number} n\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\x0d\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\x0d\n    throw new ERR_OUT_OF_RANGE('n'\x2C 'a non-negative number'\x2C n);\x0d\n  }\x0d\n  this._maxListeners = n;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction _getMaxListeners(that) {\x0d\n  if (that._maxListeners === undefined)\x0d\n    return EventEmitter.defaultMaxListeners;\x0d\n  return that._maxListeners;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the current max listener value for the event emitter.\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\x0d\n  return _getMaxListeners(this);\x0d\n};\x0d\n\x0d\nfunction enhanceStackTrace(err\x2C own) {\x0d\n  let ctorInfo = '';\x0d\n  try {\x0d\n    const { name } = this.constructor;\x0d\n    if (name !== 'EventEmitter')\x0d\n      ctorInfo = ` on ${name} instance`;\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n  const sep = `\\nEmitted 'error' event${ctorInfo} at:\\n`;\x0d\n\x0d\n  const errStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(err.stack\x2C '\\n')\x2C 1);\x0d\n  const ownStack = ArrayPrototypeSlice(\x0d\n    StringPrototypeSplit(own.stack\x2C '\\n')\x2C 1);\x0d\n\x0d\n  const { len\x2C offset } = identicalSequenceRange(ownStack\x2C errStack);\x0d\n  if (len > 0) {\x0d\n    ArrayPrototypeSplice(ownStack\x2C offset + 1\x2C len - 2\x2C\x0d\n                         '    [... lines matching original stack trace ...]');\x0d\n  }\x0d\n\x0d\n  return err.stack + sep + ArrayPrototypeJoin(ownStack\x2C '\\n');\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously calls each of the listeners registered\x0d\n * for the event.\x0d\n * @param {string | symbol} type\x0d\n * @param {...any} [args]\x0d\n * @returns {boolean}\x0d\n */\x0d\nEventEmitter.prototype.emit = function emit(type\x2C ...args) {\x0d\n  let doError = (type === 'error');\x0d\n\x0d\n  const events = this._events;\x0d\n  if (events !== undefined) {\x0d\n    if (doError && events[kErrorMonitor] !== undefined)\x0d\n      this.emit(kErrorMonitor\x2C ...args);\x0d\n    doError = (doError && events.error === undefined);\x0d\n  } else if (!doError)\x0d\n    return false;\x0d\n\x0d\n  // If there is no 'error' event listener then throw.\x0d\n  if (doError) {\x0d\n    let er;\x0d\n    if (args.length > 0)\x0d\n      er = args[0];\x0d\n    if (er instanceof Error) {\x0d\n      try {\x0d\n        const capture = {};\x0d\n        ErrorCaptureStackTrace(capture\x2C EventEmitter.prototype.emit);\x0d\n        ObjectDefineProperty(er\x2C kEnhanceStackBeforeInspector\x2C {\x0d\n          __proto__: null\x2C\x0d\n          value: FunctionPrototypeBind(enhanceStackTrace\x2C this\x2C er\x2C capture)\x2C\x0d\n          configurable: true\x0d\n        });\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n\x0d\n      // Note: The comments on the `throw` lines are intentional\x2C they show\x0d\n      // up in Node's output if this results in an unhandled exception.\x0d\n      throw er; // Unhandled 'error' event\x0d\n    }\x0d\n\x0d\n    let stringifiedEr;\x0d\n    try {\x0d\n      stringifiedEr = inspect(er);\x0d\n    } catch {\x0d\n      stringifiedEr = er;\x0d\n    }\x0d\n\x0d\n    // At least give some kind of context to the user\x0d\n    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);\x0d\n    err.context = er;\x0d\n    throw err; // Unhandled 'error' event\x0d\n  }\x0d\n\x0d\n  const handler = events[type];\x0d\n\x0d\n  if (handler === undefined)\x0d\n    return false;\x0d\n\x0d\n  if (typeof handler === 'function') {\x0d\n    const result = handler.apply(this\x2C args);\x0d\n\x0d\n    // We check if result is undefined first because that\x0d\n    // is the most common case so we do not pay any perf\x0d\n    // penalty\x0d\n    if (result !== undefined && result !== null) {\x0d\n      addCatch(this\x2C result\x2C type\x2C args);\x0d\n    }\x0d\n  } else {\x0d\n    const len = handler.length;\x0d\n    const listeners = arrayClone(handler);\x0d\n    for (let i = 0; i < len; ++i) {\x0d\n      const result = listeners[i].apply(this\x2C args);\x0d\n\x0d\n      // We check if result is undefined first because that\x0d\n      // is the most common case so we do not pay any perf\x0d\n      // penalty.\x0d\n      // This code is duplicated because extracting it away\x0d\n      // would make it non-inlineable.\x0d\n      if (result !== undefined && result !== null) {\x0d\n        addCatch(this\x2C result\x2C type\x2C args);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return true;\x0d\n};\x0d\n\x0d\nfunction _addListener(target\x2C type\x2C listener\x2C prepend) {\x0d\n  let m;\x0d\n  let events;\x0d\n  let existing;\x0d\n\x0d\n  checkListener(listener);\x0d\n\x0d\n  events = target._events;\x0d\n  if (events === undefined) {\x0d\n    events = target._events = ObjectCreate(null);\x0d\n    target._eventsCount = 0;\x0d\n  } else {\x0d\n    // To avoid recursion in the case that type === "newListener"! Before\x0d\n    // adding it to the listeners\x2C first emit "newListener".\x0d\n    if (events.newListener !== undefined) {\x0d\n      target.emit('newListener'\x2C type\x2C\x0d\n                  listener.listener ?? listener);\x0d\n\x0d\n      // Re-assign `events` because a newListener handler could have caused the\x0d\n      // this._events to be assigned to a new object\x0d\n      events = target._events;\x0d\n    }\x0d\n    existing = events[type];\x0d\n  }\x0d\n\x0d\n  if (existing === undefined) {\x0d\n    // Optimize the case of one listener. Don't need the extra array object.\x0d\n    events[type] = listener;\x0d\n    ++target._eventsCount;\x0d\n  } else {\x0d\n    if (typeof existing === 'function') {\x0d\n      // Adding the second element\x2C need to change to array.\x0d\n      existing = events[type] =\x0d\n        prepend ? [listener\x2C existing] : [existing\x2C listener];\x0d\n      // If we've already got an array\x2C just append.\x0d\n    } else if (prepend) {\x0d\n      existing.unshift(listener);\x0d\n    } else {\x0d\n      existing.push(listener);\x0d\n    }\x0d\n\x0d\n    // Check for listener leak\x0d\n    m = _getMaxListeners(target);\x0d\n    if (m > 0 && existing.length > m && !existing.warned) {\x0d\n      existing.warned = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      const w = genericNodeError(\x0d\n        `Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners ` +\x0d\n        `added to ${inspect(target\x2C { depth: -1 })}. Use emitter.setMaxListeners() to increase limit`\x2C\x0d\n        { name: 'MaxListenersExceededWarning'\x2C emitter: target\x2C type: type\x2C count: existing.length });\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return target;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a listener to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.addListener = function addListener(type\x2C listener) {\x0d\n  return _addListener(this\x2C type\x2C listener\x2C false);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\x0d\n\x0d\n/**\x0d\n * Adds the `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependListener =\x0d\n    function prependListener(type\x2C listener) {\x0d\n      return _addListener(this\x2C type\x2C listener\x2C true);\x0d\n    };\x0d\n\x0d\nfunction onceWrapper() {\x0d\n  if (!this.fired) {\x0d\n    this.target.removeListener(this.type\x2C this.wrapFn);\x0d\n    this.fired = true;\x0d\n    if (arguments.length === 0)\x0d\n      return this.listener.call(this.target);\x0d\n    return this.listener.apply(this.target\x2C arguments);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction _onceWrap(target\x2C type\x2C listener) {\x0d\n  const state = { fired: false\x2C wrapFn: undefined\x2C target\x2C type\x2C listener };\x0d\n  const wrapped = onceWrapper.bind(state);\x0d\n  wrapped.listener = listener;\x0d\n  state.wrapFn = wrapped;\x0d\n  return wrapped;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the event emitter.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.once = function once(type\x2C listener) {\x0d\n  checkListener(listener);\x0d\n\x0d\n  this.on(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n  return this;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Adds a one-time `listener` function to the beginning of\x0d\n * the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.prependOnceListener =\x0d\n    function prependOnceListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      this.prependListener(type\x2C _onceWrap(this\x2C type\x2C listener));\x0d\n      return this;\x0d\n    };\x0d\n\x0d\n/**\x0d\n * Removes the specified `listener` from the listeners array.\x0d\n * @param {string | symbol} type\x0d\n * @param {Function} listener\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeListener =\x0d\n    function removeListener(type\x2C listener) {\x0d\n      checkListener(listener);\x0d\n\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      const list = events[type];\x0d\n      if (list === undefined)\x0d\n        return this;\x0d\n\x0d\n      if (list === listener || list.listener === listener) {\x0d\n        if (--this._eventsCount === 0)\x0d\n          this._events = ObjectCreate(null);\x0d\n        else {\x0d\n          delete events[type];\x0d\n          if (events.removeListener)\x0d\n            this.emit('removeListener'\x2C type\x2C list.listener || listener);\x0d\n        }\x0d\n      } else if (typeof list !== 'function') {\x0d\n        let position = -1;\x0d\n\x0d\n        for (let i = list.length - 1; i >= 0; i--) {\x0d\n          if (list[i] === listener || list[i].listener === listener) {\x0d\n            position = i;\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (position < 0)\x0d\n          return this;\x0d\n\x0d\n        if (position === 0)\x0d\n          list.shift();\x0d\n        else {\x0d\n          if (spliceOne === undefined)\x0d\n            spliceOne = require('internal/util').spliceOne;\x0d\n          spliceOne(list\x2C position);\x0d\n        }\x0d\n\x0d\n        if (list.length === 1)\x0d\n          events[type] = list[0];\x0d\n\x0d\n        if (events.removeListener !== undefined)\x0d\n          this.emit('removeListener'\x2C type\x2C listener);\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\x0d\n\x0d\n/**\x0d\n * Removes all listeners from the event emitter. (Only\x0d\n * removes listeners for a specific event name if specified\x0d\n * as `type`).\x0d\n * @param {string | symbol} [type]\x0d\n * @returns {EventEmitter}\x0d\n */\x0d\nEventEmitter.prototype.removeAllListeners =\x0d\n    function removeAllListeners(type) {\x0d\n      const events = this._events;\x0d\n      if (events === undefined)\x0d\n        return this;\x0d\n\x0d\n      // Not listening for removeListener\x2C no need to emit\x0d\n      if (events.removeListener === undefined) {\x0d\n        if (arguments.length === 0) {\x0d\n          this._events = ObjectCreate(null);\x0d\n          this._eventsCount = 0;\x0d\n        } else if (events[type] !== undefined) {\x0d\n          if (--this._eventsCount === 0)\x0d\n            this._events = ObjectCreate(null);\x0d\n          else\x0d\n            delete events[type];\x0d\n        }\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      // Emit removeListener for all listeners on all events\x0d\n      if (arguments.length === 0) {\x0d\n        for (const key of ReflectOwnKeys(events)) {\x0d\n          if (key === 'removeListener') continue;\x0d\n          this.removeAllListeners(key);\x0d\n        }\x0d\n        this.removeAllListeners('removeListener');\x0d\n        this._events = ObjectCreate(null);\x0d\n        this._eventsCount = 0;\x0d\n        return this;\x0d\n      }\x0d\n\x0d\n      const listeners = events[type];\x0d\n\x0d\n      if (typeof listeners === 'function') {\x0d\n        this.removeListener(type\x2C listeners);\x0d\n      } else if (listeners !== undefined) {\x0d\n        // LIFO order\x0d\n        for (let i = listeners.length - 1; i >= 0; i--) {\x0d\n          this.removeListener(type\x2C listeners[i]);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return this;\x0d\n    };\x0d\n\x0d\nfunction _listeners(target\x2C type\x2C unwrap) {\x0d\n  const events = target._events;\x0d\n\x0d\n  if (events === undefined)\x0d\n    return [];\x0d\n\x0d\n  const evlistener = events[type];\x0d\n  if (evlistener === undefined)\x0d\n    return [];\x0d\n\x0d\n  if (typeof evlistener === 'function')\x0d\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\x0d\n\x0d\n  return unwrap ?\x0d\n    unwrapListeners(evlistener) : arrayClone(evlistener);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.listeners = function listeners(type) {\x0d\n  return _listeners(this\x2C type\x2C true);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners and wrappers for\x0d\n * the event name specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\x0d\n  return _listeners(this\x2C type\x2C false);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to the event name\x0d\n * specified as `type`.\x0d\n * @deprecated since v3.2.0\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nEventEmitter.listenerCount = function(emitter\x2C type) {\x0d\n  if (typeof emitter.listenerCount === 'function') {\x0d\n    return emitter.listenerCount(type);\x0d\n  }\x0d\n  return FunctionPrototypeCall(listenerCount\x2C emitter\x2C type);\x0d\n};\x0d\n\x0d\nEventEmitter.prototype.listenerCount = listenerCount;\x0d\n\x0d\n/**\x0d\n * Returns the number of listeners listening to event name\x0d\n * specified as `type`.\x0d\n * @param {string | symbol} type\x0d\n * @returns {number}\x0d\n */\x0d\nfunction listenerCount(type) {\x0d\n  const events = this._events;\x0d\n\x0d\n  if (events !== undefined) {\x0d\n    const evlistener = events[type];\x0d\n\x0d\n    if (typeof evlistener === 'function') {\x0d\n      return 1;\x0d\n    } else if (evlistener !== undefined) {\x0d\n      return evlistener.length;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an array listing the events for which\x0d\n * the emitter has registered listeners.\x0d\n * @returns {any[]}\x0d\n */\x0d\nEventEmitter.prototype.eventNames = function eventNames() {\x0d\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\x0d\n};\x0d\n\x0d\nfunction arrayClone(arr) {\x0d\n  // At least since V8 8.3\x2C this implementation is faster than the previous\x0d\n  // which always used a simple for-loop\x0d\n  switch (arr.length) {\x0d\n    case 2: return [arr[0]\x2C arr[1]];\x0d\n    case 3: return [arr[0]\x2C arr[1]\x2C arr[2]];\x0d\n    case 4: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]];\x0d\n    case 5: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]];\x0d\n    case 6: return [arr[0]\x2C arr[1]\x2C arr[2]\x2C arr[3]\x2C arr[4]\x2C arr[5]];\x0d\n  }\x0d\n  return ArrayPrototypeSlice(arr);\x0d\n}\x0d\n\x0d\nfunction unwrapListeners(arr) {\x0d\n  const ret = arrayClone(arr);\x0d\n  for (let i = 0; i < ret.length; ++i) {\x0d\n    const orig = ret[i].listener;\x0d\n    if (typeof orig === 'function')\x0d\n      ret[i] = orig;\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns a copy of the array of listeners for the event name\x0d\n * specified as `type`.\x0d\n * @param {EventEmitter | EventTarget} emitterOrTarget\x0d\n * @param {string | symbol} type\x0d\n * @returns {Function[]}\x0d\n */\x0d\nfunction getEventListeners(emitterOrTarget\x2C type) {\x0d\n  // First check if EventEmitter\x0d\n  if (typeof emitterOrTarget.listeners === 'function') {\x0d\n    return emitterOrTarget.listeners(type);\x0d\n  }\x0d\n  // Require event target lazily to avoid always loading it\x0d\n  const { isEventTarget\x2C kEvents } = require('internal/event_target');\x0d\n  if (isEventTarget(emitterOrTarget)) {\x0d\n    const root = emitterOrTarget[kEvents].get(type);\x0d\n    const listeners = [];\x0d\n    let handler = root?.next;\x0d\n    while (handler?.listener !== undefined) {\x0d\n      const listener = handler.listener?.deref ?\x0d\n        handler.listener.deref() : handler.listener;\x0d\n      listeners.push(listener);\x0d\n      handler = handler.next;\x0d\n    }\x0d\n    return listeners;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE('emitter'\x2C\x0d\n                                 ['EventEmitter'\x2C 'EventTarget']\x2C\x0d\n                                 emitterOrTarget);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a `Promise` that is fulfilled when the emitter\x0d\n * emits the given event.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string} name\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {Promise}\x0d\n */\x0d\nasync function once(emitter\x2C name\x2C options = kEmptyObject) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError(undefined\x2C { cause: signal?.reason });\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    const errorListener = (err) => {\x0d\n      emitter.removeListener(name\x2C resolver);\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      reject(err);\x0d\n    };\x0d\n    const resolver = (...args) => {\x0d\n      if (typeof emitter.removeListener === 'function') {\x0d\n        emitter.removeListener('error'\x2C errorListener);\x0d\n      }\x0d\n      if (signal != null) {\x0d\n        eventTargetAgnosticRemoveListener(signal\x2C 'abort'\x2C abortListener);\x0d\n      }\x0d\n      resolve(args);\x0d\n    };\x0d\n    eventTargetAgnosticAddListener(emitter\x2C name\x2C resolver\x2C { once: true });\x0d\n    if (name !== 'error' && typeof emitter.once === 'function') {\x0d\n      // EventTarget does not have `error` event semantics like Node\x0d\n      // EventEmitters\x2C we listen to `error` events only on EventEmitters.\x0d\n      emitter.once('error'\x2C errorListener);\x0d\n    }\x0d\n    function abortListener() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C name\x2C resolver);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorListener);\x0d\n      reject(new AbortError(undefined\x2C { cause: signal?.reason }));\x0d\n    }\x0d\n    if (signal != null) {\x0d\n      eventTargetAgnosticAddListener(\x0d\n        signal\x2C 'abort'\x2C abortListener\x2C { once: true });\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nconst AsyncIteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf(async function* () {}).prototype);\x0d\n\x0d\nfunction createIterResult(value\x2C done) {\x0d\n  return { value\x2C done };\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticRemoveListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.removeListener === 'function') {\x0d\n    emitter.removeListener(name\x2C listener);\x0d\n  } else if (typeof emitter.removeEventListener === 'function') {\x0d\n    emitter.removeEventListener(name\x2C listener\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction eventTargetAgnosticAddListener(emitter\x2C name\x2C listener\x2C flags) {\x0d\n  if (typeof emitter.on === 'function') {\x0d\n    if (flags?.once) {\x0d\n      emitter.once(name\x2C listener);\x0d\n    } else {\x0d\n      emitter.on(name\x2C listener);\x0d\n    }\x0d\n  } else if (typeof emitter.addEventListener === 'function') {\x0d\n    emitter.addEventListener(name\x2C listener\x2C flags);\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('emitter'\x2C 'EventEmitter'\x2C emitter);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an `AsyncIterator` that iterates `event` events.\x0d\n * @param {EventEmitter} emitter\x0d\n * @param {string | symbol} event\x0d\n * @param {{ signal: AbortSignal; }} [options]\x0d\n * @returns {AsyncIterator}\x0d\n */\x0d\nfunction on(emitter\x2C event\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n  validateAbortSignal(signal\x2C 'options.signal');\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError(undefined\x2C { cause: signal?.reason });\x0d\n\x0d\n  const unconsumedEvents = [];\x0d\n  const unconsumedPromises = [];\x0d\n  let error = null;\x0d\n  let finished = false;\x0d\n\x0d\n  const iterator = ObjectSetPrototypeOf({\x0d\n    next() {\x0d\n      // First\x2C we consume all unread events\x0d\n      const value = unconsumedEvents.shift();\x0d\n      if (value) {\x0d\n        return PromiseResolve(createIterResult(value\x2C false));\x0d\n      }\x0d\n\x0d\n      // Then we error\x2C if an error happened\x0d\n      // This happens one time if at all\x2C because after 'error'\x0d\n      // we stop listening\x0d\n      if (error) {\x0d\n        const p = PromiseReject(error);\x0d\n        // Only the first element errors\x0d\n        error = null;\x0d\n        return p;\x0d\n      }\x0d\n\x0d\n      // If the iterator is finished\x2C resolve to done\x0d\n      if (finished) {\x0d\n        return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      // Wait until an event happens\x0d\n      return new Promise(function(resolve\x2C reject) {\x0d\n        unconsumedPromises.push({ resolve\x2C reject });\x0d\n      });\x0d\n    }\x2C\x0d\n\x0d\n    return() {\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n\x0d\n      if (signal) {\x0d\n        eventTargetAgnosticRemoveListener(\x0d\n          signal\x2C\x0d\n          'abort'\x2C\x0d\n          abortListener\x2C\x0d\n          { once: true });\x0d\n      }\x0d\n\x0d\n      finished = true;\x0d\n\x0d\n      for (const promise of unconsumedPromises) {\x0d\n        promise.resolve(createIterResult(undefined\x2C true));\x0d\n      }\x0d\n\x0d\n      return PromiseResolve(createIterResult(undefined\x2C true));\x0d\n    }\x2C\x0d\n\x0d\n    throw(err) {\x0d\n      if (!err || !(err instanceof Error)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('EventEmitter.AsyncIterator'\x2C\x0d\n                                       'Error'\x2C err);\x0d\n      }\x0d\n      error = err;\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C event\x2C eventHandler);\x0d\n      eventTargetAgnosticRemoveListener(emitter\x2C 'error'\x2C errorHandler);\x0d\n    }\x2C\x0d\n\x0d\n    [SymbolAsyncIterator]() {\x0d\n      return this;\x0d\n    }\x0d\n  }\x2C AsyncIteratorPrototype);\x0d\n\x0d\n  eventTargetAgnosticAddListener(emitter\x2C event\x2C eventHandler);\x0d\n  if (event !== 'error' && typeof emitter.on === 'function') {\x0d\n    emitter.on('error'\x2C errorHandler);\x0d\n  }\x0d\n\x0d\n  if (signal) {\x0d\n    eventTargetAgnosticAddListener(\x0d\n      signal\x2C\x0d\n      'abort'\x2C\x0d\n      abortListener\x2C\x0d\n      { once: true });\x0d\n  }\x0d\n\x0d\n  return iterator;\x0d\n\x0d\n  function abortListener() {\x0d\n    errorHandler(new AbortError(undefined\x2C { cause: signal?.reason }));\x0d\n  }\x0d\n\x0d\n  function eventHandler(...args) {\x0d\n    const promise = ArrayPrototypeShift(unconsumedPromises);\x0d\n    if (promise) {\x0d\n      promise.resolve(createIterResult(args\x2C false));\x0d\n    } else {\x0d\n      unconsumedEvents.push(args);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function errorHandler(err) {\x0d\n    finished = true;\x0d\n\x0d\n    const toError = ArrayPrototypeShift(unconsumedPromises);\x0d\n\x0d\n    if (toError) {\x0d\n      toError.reject(err);\x0d\n    } else {\x0d\n      // The next time we call next()\x0d\n      error = err;\x0d\n    }\x0d\n\x0d\n    iterator.return();\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x2f2f3a21e1e,23,18313,18387,C0O18335C14O18342C19O18384,,
code-creation,LazyCompile,10,341546,0x2f2f3a24476,378,_addListener node:events:541:22,0x2392d71b58,~
code-source-info,0x2f2f3a
code-creation,LazyCompile,10,341703,0x2f2f3a24786,15,checkListener node:events:265:23,0x2392d71508,~
code-source-info,0x2f2f3a24786,23,7994,8052,C0O8010C8O8010C14O8051,,
code-creation,LazyCompile,10,341780,0x2f2f3a24876,30, node:internal/validators:399:42,0x2392d4b150,~
code-source-info,0x2f2f3a24876,16,11012,11131,C0O11034C6O11072C22O11078C27O11072C29O11130,,
code-creation,LazyCompile,10,341983,0x2f2f3a24ac6,380,emit node:events:460:44,0x2392d71a98,~
code-source-info,0x2f2f3a24ac
code-creation,LazyCompile,10,342221,0x2f2f3a24e6e,172,startListeningIfSignal node:internal/process/signal:22:32,0x39b87ffda8,~
script-source,97,node:internal/process/signal,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeBind\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  errnoException\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { signals } = internalBinding('constants').os;\x0d\n\x0d\nlet Signal;\x0d\nconst signalWraps = new SafeMap();\x0d\n\x0d\nfunction isSignal(event) {\x0d\n  return typeof event === 'string' && signals[event] !== undefined;\x0d\n}\x0d\n\x0d\n// Detect presence of a listener for the special signal types\x0d\nfunction startListeningIfSignal(type) {\x0d\n  if (isSignal(type) && !signalWraps.has(type)) {\x0d\n    if (Signal === undefined)\x0d\n      Signal = internalBinding('signal_wrap').Signal;\x0d\n    const wrap = new Signal();\x0d\n\x0d\n    wrap.unref();\x0d\n\x0d\n    wrap.onsignal = FunctionPrototypeBind(process.emit\x2C process\x2C type\x2C type);\x0d\n\x0d\n    const signum = signals[type];\x0d\n    const err = wrap.start(signum);\x0d\n    if (err) {\x0d\n      wrap.close();\x0d\n      throw errnoException(err\x2C 'uv_signal_start');\x0d\n    }\x0d\n\x0d\n    signalWraps.set(type\x2C wrap);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction stopListeningIfSignal(type) {\x0d\n  const wrap = signalWraps.get(type);\x0d\n  if (wrap !== undefined && process.listenerCount(type) === 0) {\x0d\n    wrap.close();\x0d\n    signalWraps.delete(type);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  startListeningIfSignal\x2C\x0d\n  stopListeningIfSignal\x0d\n};\x0d\n
code-source-info,0x2f2f3a24e6e,97,450,944,C0O462C3O466C11O485C14O497C19O497C26O515C32O548C38O557C43O587C50O555C56O614C61O614C67O640C72O640C76O656C78O672C84O702C98O672C103O670C107O752C114O759C118O789C123O789C129O809C131O832C136O832C140O848C148O854C153O848C154O908C159O920C164O920C171O943,,
code-creation,LazyCompile,10,342439,0x2f2f3a2522e,19,isSignal node:internal/process/signal:17:18,0x39b87ffbf0,~
code-source-info,0x2f2f3a2522e,97,271,352,C0O284C8O320C13O327C17O335C18O349,,
code-creation,LazyCompile,10,342544,0x2f2f3a25466,156,setupFetch node:internal/bootstrap/pre_execution:179:20,0x2f2f3a0db00,~
code-source-info,0x2f2f3a25466,100,5707,6176,C0O5715C8O5720C14O5767C15O5774C16O5785C24O5785C28O5839C34O5839C39O5882C46O5898C52O5926C57O5882C62O5937C69O5953C75O5984C80O5937C85O5998C92O6014C98O6044C103O5998C108O6057C115O6073C121O6103C126O6057C131O6116C138O6132C144O6163C149O6116C155O6175,,
code-creation,LazyCompile,10,342727,0x2f2f3a25996,280,setupWebCrypto node:internal/bootstrap/pre_execution:196:24,0x2f2f3a0db50,~
code-source-info,0x2f2f3a25996,100,6309,7539,C0O6309C8O6317C13O6329C18O6336C23O6346C33O6381C39O6381C45O6439C46O6446C47O6461C48O6461C50O6475C61O6496C76O6564C107O6564C120O6475C125O6843C133O6847C138O6872C144O6892C158O6906C162O6902C164O6949C175O6970C189O7118C197O6949C202O7139C213O7160C227O7311C235O7139C240O7335C251O7356C265O7510C273O7335C279O7538,,
code-creation,LazyCompile,10,342840,0x2f2f3a25c1e,5,get node:internal/bootstrap/node:171:6,0x39b87d6268,~
code-source-info,0x2f2f3a25c1e,10,5850,5878,C0O5855C4O5876,,
code-creation,LazyCompile,10,342934,0x2f2f3a25d1e,52,get node:internal/bootstrap/node:147:6,0x39b87d61c8,~
code-source-info,0x2f2f3a25d1e,10,5193,5464,C0O5236C14O5236C20O5276C29O5393C35O5415C43O5400C48O5435C49O5448C51O5459,,
code-creation,LazyCompile,10,343056,0x2f2f3a25ede,74,setupCustomEvent node:internal/bootstrap/pre_execution:238:26,0x2f2f3a0dbc8,~
code-source-info,0x2f2f3a25ede,100,7676,7944,C0O7684C3O7696C8O7703C13O7713C21O7748C27O7748C33O7808C34O7815C35O7848C41O7848C46O7832C51O7885C58O7901C67O7885C73O7943,,
code-creation,LazyCompile,10,343192,0x2f2f3a260ce,75,setupDebugEnv node:internal/bootstrap/pre_execution:290:23,0x2f2f3a0dd30,~
code-source-info,0x2f2f3a260ce,100,9275,9491,C0O9283C6O9283C11O9316C19O9344C24O9348C29O9317C34O9364C42O9368C48O9413C54O9413C59O9450C64O9464C69O9465C74O9490,,
code-creation,LazyCompile,10,343339,0x2f2f3a2644e,159,initializeDebugEnv node:internal/util/debuglog:22:28,0x2392d67d88,~
script-source,22,node:internal/util/debuglog,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect\x2C format\x2C formatWithOptions } = require('internal/util/inspect');\x0d\n\x0d\n// `debugImpls` and `testEnabled` are deliberately not initialized so any call\x0d\n// to `debuglog()` before `initializeDebugEnv()` is called will throw.\x0d\nlet debugImpls;\x0d\nlet testEnabled;\x0d\n\x0d\n\x0d\n// `debugEnv` is initial value of process.env.NODE_DEBUG\x0d\nfunction initializeDebugEnv(debugEnv) {\x0d\n  debugImpls = ObjectCreate(null);\x0d\n  if (debugEnv) {\x0d\n    // This is run before any user code\x2C it's OK not to use primordials.\x0d\n    debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g\x2C '\\\\$&')\x0d\n      .replaceAll('*'\x2C '.*')\x0d\n      .replaceAll('\x2C'\x2C '$|^');\x0d\n    const debugEnvRegex = new RegExp(`^${debugEnv}$`\x2C 'i');\x0d\n    testEnabled = (str) => RegExpPrototypeExec(debugEnvRegex\x2C str) !== null;\x0d\n  } else {\x0d\n    testEnabled = () => false;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Emits warning when user sets\x0d\n// NODE_DEBUG=http or NODE_DEBUG=http2.\x0d\nfunction emitWarningIfNeeded(set) {\x0d\n  if ('HTTP' === set || 'HTTP2' === set) {\x0d\n    process.emitWarning('Setting the NODE_DEBUG environment variable ' +\x0d\n      'to \\'' + StringPrototypeToLowerCase(set) + '\\' can expose sensitive ' +\x0d\n      'data (such as passwords\x2C tokens and authentication headers) ' +\x0d\n      'in the resulting log.');\x0d\n  }\x0d\n}\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nfunction debuglogImpl(enabled\x2C set) {\x0d\n  if (debugImpls[set] === undefined) {\x0d\n    if (enabled) {\x0d\n      const pid = process.pid;\x0d\n      emitWarningIfNeeded(set);\x0d\n      debugImpls[set] = function debug(...args) {\x0d\n        const colors = process.stderr.hasColors && process.stderr.hasColors();\x0d\n        const msg = formatWithOptions({ colors }\x2C ...args);\x0d\n        const coloredPID = inspect(pid\x2C { colors });\x0d\n        process.stderr.write(format('%s %s: %s\\n'\x2C set\x2C coloredPID\x2C msg));\x0d\n      };\x0d\n    } else {\x0d\n      debugImpls[set] = noop;\x0d\n    }\x0d\n  }\x0d\n  return debugImpls[set];\x0d\n}\x0d\n\x0d\n// debuglogImpl depends on process.pid and process.env.NODE_DEBUG\x2C\x0d\n// so it needs to be called lazily in top scopes of internal modules\x0d\n// that may be loaded before these run time states are allowed to\x0d\n// be accessed.\x0d\nfunction debuglog(set\x2C cb) {\x0d\n  function init() {\x0d\n    set = StringPrototypeToUpperCase(set);\x0d\n    enabled = testEnabled(set);\x0d\n  }\x0d\n  let debug = (...args) => {\x0d\n    init();\x0d\n    // Only invokes debuglogImpl() when the debug function is\x0d\n    // called for the first time.\x0d\n    debug = debuglogImpl(enabled\x2C set);\x0d\n    if (typeof cb === 'function')\x0d\n      cb(debug);\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  let enabled;\x0d\n  let test = () => {\x0d\n    init();\x0d\n    test = () => enabled;\x0d\n    return enabled;\x0d\n  };\x0d\n  const logger = (...args) => {\x0d\n    switch (args.length) {\x0d\n      case 1: return debug(args[0]);\x0d\n      case 2: return debug(args[0]\x2C args[1]);\x0d\n      default: return debug(...new SafeArrayIterator(args));\x0d\n    }\x0d\n  };\x0d\n  ObjectDefineProperty(logger\x2C 'enabled'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return test();\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n  return logger;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  debuglog\x2C\x0d\n  initializeDebugEnv\x0d\n};\x0d\n
code-source-info,0x2f2f3a2644e,22,567,1024,C0O583C7O596C14O594C20O619C31O734C44O734C51O779C62O780C69O809C80O810C88O861C100O876C116O861C121O861C123O900C132O912C144O990C151O1002C158O1023,,
code-creation,LazyCompile,10,343688,0x2f2f3a26a5e,49,setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:268:40,0x2f2f3a0dc68,~
code-source-info,0x2f2f3a26a5e,100,8797,8991,C0O8805C8O8810C14O8851C15O8858C16O8894C22O8894C27O8875C32O8946C38O8980C43O8980C48O8990,,
code-creation,LazyCompile,10,343787,0x2f2f3a26c76,62,initializeReport node:internal/bootstrap/pre_execution:278:26,0x2f2f3a0dcb8,~
code-source-info,0x2f2f3a26c76,100,9020,9249,C0O9020C8O9047C16O9047C21O9036C27O9086C42O9107C47O9203C55O9086C61O9248,,
code-creation,Eval,10,344060,0x2f2f3a271e6,5, node:internal/process/report:1:1,0x2f2f3a26ff0,~
script-source,102,node:internal/process/report,'use strict';\x0d\nconst {\x0d\n  ERR_SYNTHETIC\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateSignalName\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst nr = internalBinding('report');\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n} = primordials;\x0d\nconst report = {\x0d\n  writeReport(file\x2C err) {\x0d\n    if (typeof file === 'object' && file !== null) {\x0d\n      err = file;\x0d\n      file = undefined;\x0d\n    } else if (file !== undefined) {\x0d\n      validateString(file\x2C 'file');\x0d\n    }\x0d\n\x0d\n    if (err === undefined) {\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    } else {\x0d\n      validateObject(err\x2C 'err');\x0d\n    }\x0d\n\x0d\n    return nr.writeReport('JavaScript API'\x2C 'API'\x2C file\x2C err);\x0d\n  }\x2C\x0d\n  getReport(err) {\x0d\n    if (err === undefined)\x0d\n      err = new ERR_SYNTHETIC();\x0d\n    else\x0d\n      validateObject(err\x2C 'err');\x0d\n\x0d\n    return JSONParse(nr.getReport(err));\x0d\n  }\x2C\x0d\n  get directory() {\x0d\n    return nr.getDirectory();\x0d\n  }\x2C\x0d\n  set directory(dir) {\x0d\n    validateString(dir\x2C 'directory');\x0d\n    nr.setDirectory(dir);\x0d\n  }\x2C\x0d\n  get filename() {\x0d\n    return nr.getFilename();\x0d\n  }\x2C\x0d\n  set filename(name) {\x0d\n    validateString(name\x2C 'filename');\x0d\n    nr.setFilename(name);\x0d\n  }\x2C\x0d\n  get compact() {\x0d\n    return nr.getCompact();\x0d\n  }\x2C\x0d\n  set compact(b) {\x0d\n    validateBoolean(b\x2C 'compact');\x0d\n    nr.setCompact(b);\x0d\n  }\x2C\x0d\n  get signal() {\x0d\n    return nr.getSignal();\x0d\n  }\x2C\x0d\n  set signal(sig) {\x0d\n    validateSignalName(sig\x2C 'signal');\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler(sig);\x0d\n    nr.setSignal(sig);\x0d\n  }\x2C\x0d\n  get reportOnFatalError() {\x0d\n    return nr.shouldReportOnFatalError();\x0d\n  }\x2C\x0d\n  set reportOnFatalError(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnFatalError(trigger);\x0d\n  }\x2C\x0d\n  get reportOnSignal() {\x0d\n    return nr.shouldReportOnSignal();\x0d\n  }\x2C\x0d\n  set reportOnSignal(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnSignal(trigger);\x0d\n    removeSignalHandler();\x0d\n    addSignalHandler();\x0d\n  }\x2C\x0d\n  get reportOnUncaughtException() {\x0d\n    return nr.shouldReportOnUncaughtException();\x0d\n  }\x2C\x0d\n  set reportOnUncaughtException(trigger) {\x0d\n    validateBoolean(trigger\x2C 'trigger');\x0d\n\x0d\n    nr.setReportOnUncaughtException(trigger);\x0d\n  }\x0d\n};\x0d\n\x0d\nfunction addSignalHandler(sig) {\x0d\n  if (nr.shouldReportOnSignal()) {\x0d\n    if (typeof sig !== 'string')\x0d\n      sig = nr.getSignal();\x0d\n\x0d\n    process.on(sig\x2C signalHandler);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction removeSignalHandler() {\x0d\n  const sig = nr.getSignal();\x0d\n\x0d\n  if (sig)\x0d\n    process.removeListener(sig\x2C signalHandler);\x0d\n}\x0d\n\x0d\nfunction signalHandler(sig) {\x0d\n  nr.writeReport(sig\x2C 'Signal'\x2C null\x2C '');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addSignalHandler\x2C\x0d\n  report\x0d\n};\x0d\n
code-source-info,0x2f2f3a271e6,102,0,2666,C0O0C4O2666,,
code-creation,Function,10,344331,0x2f2f3a27cf6,306, node:internal/process/report:1:1,0x2f2f3a27160,~
code-source-info,0x2f2f3a27cf6,102,0,2666,C0O0C48O45C51O45C56O71C61O26C67O174C70O174C75O91C81O111C87O130C93O153C99O218C102O218C106O218C108O257C114O302C119O307C127O709C281O2611C288O2633C294O2654C300O2626C305O2665,,
code-creation,LazyCompile,10,344662,0x2f2f3a29b5e,21,initializeReportSignalHandlers node:internal/bootstrap/pre_execution:298:40,0x2f2f3a0dd80,~
code-source-info,0x2f2f3a29b5e,100,9595,9695,C0O9632C6O9632C11O9611C16O9673C20O9694,,
code-creation,LazyCompile,10,344765,0x2f2f3a29c66,57,addSignalHandler node:internal/process/report:98:26,0x2f2f3a27218,~
code-source-info,0x2f2f3a29c66,102,2241,2394,C0O2252C5O2259C10O2259C16O2290C22O2326C27O2335C32O2335C38O2355C41O2363C49O2363C56O2393,,
code-creation,LazyCompile,10,344868,0x2f2f3a2a22e,92,initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:304:46,0x2f2f3a0ddd0,~
code-source-info,0x2f2f3a2a22e,100,9744,10018,C0O9744C8O9767C18O9767C23O9813C25O9831C26O9838C27O9844C35O9844C40O9874C45O9875C50O9936C58O9936C63O9914C69O9956C74O9964C79O9967C84O9964C91O10017,,
code-creation,LazyCompile,10,344990,0x2f2f3a2a4be,138,setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:437:37,0x2f2f3a0dfa0,~
code-source-info,0x2f2f3a2a4be,100,13956,14502,C0O13964C3O13976C8O13980C14O14019C20O14019C25O14065C33O14088C38O14092C46O14065C52O14119C53O14129C57O14119C61O14213C64O14228C73O14289C76O14297C81O14301C90O14349C93O14364C102O14408C108O14408C113O14432C118O14433C124O14473C127O14488C132O14473C137O14501,,
code-creation,LazyCompile,10,345235,0x2f2f3a2a8b6,455,initializePolicy node:internal/bootstrap/pre_execution:465:26,0x2f2f3a0e040,~
code-source-info,0x2f2f3a2a8b
code-creation,LazyCompile,10,345418,0x2f2f3a2aca6,63,initializeClusterIPC node:internal/bootstrap/pre_execution:456:30,0x2f2f3a0dff0,~
code-source-info,0x2f2f3a2aca6,100,14535,14783,C0O14543C3O14555C10O14559C18O14574C23O14578C29O14617C35O14617C40O14650C45O14650C49O14741C52O14756C62O14782,,
code-creation,LazyCompile,10,345515,0x2f2f3a2ae16,27,initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:560:38,0x2f2f3a0e180,~
code-source-info,0x2f2f3a2ae16,100,18440,18593,C0O18486C6O18486C11O18456C16O18538C21O18567C26O18592,,
code-creation,Eval,10,346385,0x2f2f3a2b8b6,5, node:internal/source_map/source_map_cache:1:1,0x2f2f3a2b520,~
script-source,103,node:internal/source_map/source_map_cache,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolSplit\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction ObjectGetValueSafe(obj\x2C key) {\x0d\n  const desc = ObjectGetOwnPropertyDescriptor(obj\x2C key);\x0d\n  return ObjectPrototypeHasOwnProperty(desc\x2C 'value') ? desc.value : undefined;\x0d\n}\x0d\n\x0d\n// See https://sourcemaps.info/spec.html for SourceMap V3 specification.\x0d\nconst { Buffer } = require('buffer');\x0d\nlet debug = require('internal/util/debuglog').debuglog('source_map'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst fs = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { IterableWeakMap } = require('internal/util/iterable_weak_map');\x0d\nconst {\x0d\n  normalizeReferrerURL\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { validateBoolean } = require('internal/validators');\x0d\nconst { setMaybeCacheGeneratedSourceMap } = internalBinding('errors');\x0d\n\x0d\n// Since the CJS module cache is mutable\x2C which leads to memory leaks when\x0d\n// modules are deleted\x2C we use a WeakMap so that the source map cache will\x0d\n// be purged automatically:\x0d\nconst cjsSourceMapCache = new IterableWeakMap();\x0d\n// The esm cache is not mutable\x2C so we can use a Map without memory concerns:\x0d\nconst esmSourceMapCache = new SafeMap();\x0d\n// The generated sources is not mutable\x2C so we can use a Map without memory concerns:\x0d\nconst generatedSourceMapCache = new SafeMap();\x0d\nconst kLeadingProtocol = /^\\w+:\\/\\//;\x0d\n\x0d\nconst { fileURLToPath\x2C pathToFileURL\x2C URL } = require('internal/url');\x0d\nlet SourceMap;\x0d\n\x0d\nlet sourceMapsEnabled;\x0d\nfunction getSourceMapsEnabled() {\x0d\n  if (sourceMapsEnabled === undefined) {\x0d\n    setSourceMapsEnabled(getOptionValue('--enable-source-maps'));\x0d\n  }\x0d\n  return sourceMapsEnabled;\x0d\n}\x0d\n\x0d\nfunction setSourceMapsEnabled(val) {\x0d\n  validateBoolean(val\x2C 'val');\x0d\n\x0d\n  const {\x0d\n    setSourceMapsEnabled\x2C\x0d\n    setPrepareStackTraceCallback\x0d\n  } = internalBinding('errors');\x0d\n  setSourceMapsEnabled(val);\x0d\n  if (val) {\x0d\n    const {\x0d\n      prepareStackTrace\x0d\n    } = require('internal/source_map/prepare_stack_trace');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  } else if (sourceMapsEnabled !== undefined) {\x0d\n    // Reset prepare stack trace callback only when disabling source maps.\x0d\n    const {\x0d\n      prepareStackTrace\x2C\x0d\n    } = require('internal/errors');\x0d\n    setPrepareStackTraceCallback(prepareStackTrace);\x0d\n  }\x0d\n\x0d\n  sourceMapsEnabled = val;\x0d\n}\x0d\n\x0d\nfunction maybeCacheSourceMap(filename\x2C content\x2C cjsModuleInstance\x2C isGeneratedSource) {\x0d\n  const sourceMapsEnabled = getSourceMapsEnabled();\x0d\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\x0d\n  try {\x0d\n    filename = normalizeReferrerURL(filename);\x0d\n  } catch (err) {\x0d\n    // This is most likely an invalid filename in sourceURL of [eval]-wrapper.\x0d\n    debug(err);\x0d\n    return;\x0d\n  }\x0d\n  const match = RegExpPrototypeExec(\x0d\n    /\\/[*/]#\\s+sourceMappingURL=(?<sourceMappingURL>[^\\s]+)/\x2C\x0d\n    content\x2C\x0d\n  );\x0d\n  if (match) {\x0d\n    const data = dataFromUrl(filename\x2C match.groups.sourceMappingURL);\x0d\n    const url = data ? null : match.groups.sourceMappingURL;\x0d\n    if (cjsModuleInstance) {\x0d\n      cjsSourceMapCache.set(cjsModuleInstance\x2C {\x0d\n        filename\x2C\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    } else if (isGeneratedSource) {\x0d\n      generatedSourceMapCache.set(filename\x2C {\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    } else {\x0d\n      // If there is no cjsModuleInstance and is not generated source assume we are in a\x0d\n      // "modules/esm" context.\x0d\n      esmSourceMapCache.set(filename\x2C {\x0d\n        lineLengths: lineLengths(content)\x2C\x0d\n        data\x2C\x0d\n        url\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeCacheGeneratedSourceMap(content) {\x0d\n  const sourceMapsEnabled = getSourceMapsEnabled();\x0d\n  if (!(process.env.NODE_V8_COVERAGE || sourceMapsEnabled)) return;\x0d\n\x0d\n  const matchSourceURL = RegExpPrototypeExec(\x0d\n    /\\/[*/]#\\s+sourceURL=(?<sourceURL>[^\\s]+)/\x2C\x0d\n    content\x0d\n  );\x0d\n  if (matchSourceURL == null) {\x0d\n    return;\x0d\n  }\x0d\n  let sourceURL = matchSourceURL.groups.sourceURL;\x0d\n  if (RegExpPrototypeExec(kLeadingProtocol\x2C sourceURL) === null) {\x0d\n    sourceURL = pathToFileURL(sourceURL).href;\x0d\n  }\x0d\n  try {\x0d\n    maybeCacheSourceMap(sourceURL\x2C content\x2C null\x2C true);\x0d\n  } catch (err) {\x0d\n    // This can happen if the filename is not a valid URL.\x0d\n    // If we fail to cache the source map\x2C we should not fail the whole process.\x0d\n    debug(err);\x0d\n  }\x0d\n}\x0d\nsetMaybeCacheGeneratedSourceMap(maybeCacheGeneratedSourceMap);\x0d\n\x0d\nfunction dataFromUrl(sourceURL\x2C sourceMappingURL) {\x0d\n  try {\x0d\n    const url = new URL(sourceMappingURL);\x0d\n    switch (url.protocol) {\x0d\n      case 'data:':\x0d\n        return sourceMapFromDataUrl(sourceURL\x2C url.pathname);\x0d\n      default:\x0d\n        debug(`unknown protocol ${url.protocol}`);\x0d\n        return null;\x0d\n    }\x0d\n  } catch (err) {\x0d\n    debug(err);\x0d\n    // If no scheme is present\x2C we assume we are dealing with a file path.\x0d\n    const mapURL = new URL(sourceMappingURL\x2C sourceURL).href;\x0d\n    return sourceMapFromFile(mapURL);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Cache the length of each line in the file that a source map was extracted\x0d\n// from. This allows translation from byte offset V8 coverage reports\x2C\x0d\n// to line/column offset Source Map V3.\x0d\nfunction lineLengths(content) {\x0d\n  // We purposefully keep \\r as part of the line-length calculation\x2C in\x0d\n  // cases where there is a \\r\\n separator\x2C so that this can be taken into\x0d\n  // account in coverage calculations.\x0d\n  return ArrayPrototypeMap(RegExpPrototypeSymbolSplit(/\\n|\\u2028|\\u2029/\x2C content)\x2C (line) => {\x0d\n    return line.length;\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction sourceMapFromFile(mapURL) {\x0d\n  try {\x0d\n    const content = fs.readFileSync(fileURLToPath(mapURL)\x2C 'utf8');\x0d\n    const data = JSONParse(content);\x0d\n    return sourcesToAbsolute(mapURL\x2C data);\x0d\n  } catch (err) {\x0d\n    debug(err);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// data:[<mediatype>][;base64]\x2C<data> see:\x0d\n// https://tools.ietf.org/html/rfc2397#section-2\x0d\nfunction sourceMapFromDataUrl(sourceURL\x2C url) {\x0d\n  const { 0: format\x2C 1: data } = StringPrototypeSplit(url\x2C '\x2C');\x0d\n  const splitFormat = StringPrototypeSplit(format\x2C ';');\x0d\n  const contentType = splitFormat[0];\x0d\n  const base64 = splitFormat[splitFormat.length - 1] === 'base64';\x0d\n  if (contentType === 'application/json') {\x0d\n    const decodedData = base64 ?\x0d\n      Buffer.from(data\x2C 'base64').toString('utf8') : data;\x0d\n    try {\x0d\n      const parsedData = JSONParse(decodedData);\x0d\n      return sourcesToAbsolute(sourceURL\x2C parsedData);\x0d\n    } catch (err) {\x0d\n      debug(err);\x0d\n      return null;\x0d\n    }\x0d\n  } else {\x0d\n    debug(`unknown content-type ${contentType}`);\x0d\n    return null;\x0d\n  }\x0d\n}\x0d\n\x0d\n// If the sources are not absolute URLs after prepending of the "sourceRoot"\x2C\x0d\n// the sources are resolved relative to the SourceMap (like resolving script\x0d\n// src in a html document).\x0d\nfunction sourcesToAbsolute(baseURL\x2C data) {\x0d\n  data.sources = data.sources.map((source) => {\x0d\n    source = (data.sourceRoot || '') + source;\x0d\n    return new URL(source\x2C baseURL).href;\x0d\n  });\x0d\n  // The sources array is now resolved to absolute URLs\x2C sourceRoot should\x0d\n  // be updated to noop.\x0d\n  data.sourceRoot = '';\x0d\n  return data;\x0d\n}\x0d\n\x0d\n// WARNING: The `sourceMapCacheToObject` and `appendCJSCache` run during\x0d\n// shutdown. In particular\x2C they also run when Workers are terminated\x2C making\x0d\n// it important that they do not call out to any user-provided code\x2C including\x0d\n// built-in prototypes that might have been tampered with.\x0d\n\x0d\n// Get serialized representation of source-map cache\x2C this is used\x0d\n// to persist a cache of source-maps to disk when NODE_V8_COVERAGE is enabled.\x0d\nfunction sourceMapCacheToObject() {\x0d\n  const obj = ObjectCreate(null);\x0d\n\x0d\n  for (const { 0: k\x2C 1: v } of esmSourceMapCache) {\x0d\n    obj[k] = v;\x0d\n  }\x0d\n\x0d\n  appendCJSCache(obj);\x0d\n\x0d\n  if (ObjectKeys(obj).length === 0) {\x0d\n    return undefined;\x0d\n  }\x0d\n  return obj;\x0d\n}\x0d\n\x0d\nfunction appendCJSCache(obj) {\x0d\n  for (const value of cjsSourceMapCache) {\x0d\n    obj[ObjectGetValueSafe(value\x2C 'filename')] = {\x0d\n      lineLengths: ObjectGetValueSafe(value\x2C 'lineLengths')\x2C\x0d\n      data: ObjectGetValueSafe(value\x2C 'data')\x2C\x0d\n      url: ObjectGetValueSafe(value\x2C 'url')\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction findSourceMap(sourceURL\x2C isGenerated) {\x0d\n  if (RegExpPrototypeExec(kLeadingProtocol\x2C sourceURL) === null) {\x0d\n    sourceURL = pathToFileURL(sourceURL).href;\x0d\n  }\x0d\n  if (!SourceMap) {\x0d\n    SourceMap = require('internal/source_map/source_map').SourceMap;\x0d\n  }\x0d\n  let sourceMap;\x0d\n  if (isGenerated) {\x0d\n    sourceMap = generatedSourceMapCache.get(sourceURL);\x0d\n  } else {\x0d\n    sourceMap = esmSourceMapCache.get(sourceURL);\x0d\n    if (sourceMap === undefined) {\x0d\n      for (const value of cjsSourceMapCache) {\x0d\n        const filename = ObjectGetValueSafe(value\x2C 'filename');\x0d\n        if (sourceURL === filename) {\x0d\n          sourceMap = {\x0d\n            data: ObjectGetValueSafe(value\x2C 'data')\x0d\n          };\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (sourceMap && sourceMap.data) {\x0d\n    return new SourceMap(sourceMap.data);\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  findSourceMap\x2C\x0d\n  getSourceMapsEnabled\x2C\x0d\n  setSourceMapsEnabled\x2C\x0d\n  maybeCacheSourceMap\x2C\x0d\n  sourceMapCacheToObject\x2C\x0d\n};\x0d\n
code-source-info,0x2f2f3a2b8b6,103,0,9338,C0O0C4O9338,,
code-creation,Function,10,347062,0x2f2f3a2bf9e,482, node:internal/source_map/source_map_cache:1:1,0x2f2f3a2b830,~
code-source-info,0x2f2f3a2bf9e,103,0,9338,C0O0C164O28C170O50C176O64C182O81C188O96C194O131C200O165C206O189C212O220C217O232C223O553C229O553C234O542C240O585C246O585C251O618C264O619C270O585C272O684C278O684C282O684C284O727C290O727C295O708C301O785C307O785C312O765C317O868C323O868C328O841C334O938C340O938C345O918C351O1015C357O1015C362O979C367O1252C369O1252C374O1252C376O1381C378O1381C383O1381C385O1516C387O1516C392O1516C394O1557C398O1557C400O1619C406O1619C411O1581C417O1596C423O1611C429O1649C430O1649C432O1667C433O1667C435O4606C439O9195C446O9217C452O9235C458O9260C464O9285C470O9309C476O9210C481O9337,,
tick,0x7ff6d5b33b55,347379,1,0x7ff6d5c66a70,3,0x7ff6d65ae370,0x2f2f3a0c8dc,0x246eeec32e5,0x2f2f3a2ae1c,0x2f2f3a101f2,0x2f2f3a0b862
code-creation,LazyCompile,10,347567,0x2f2f3a2cf26,82,debuglog node:internal/util/debuglog:71:18,0x2392d680d8,~
code-source-info,0x2f2f3a2cf26,22,2302,3350,C0O2302C28O2432C32O2432C34O2847C35O2847C37O2870C41O2870C43O2963C48O3169C58O3190C63O3238C74O3169C79O3333C81O3347,,
code-creation,Eval,10,348216,0x2f2f3a2d4a6,5, node:internal/util/iterable_weak_map:1:1,0x2f2f3a2d258,~
script-source,104,node:internal/util/iterable_weak_map,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectFreeze\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeSet\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SymbolIterator\x2C\x0d\n} = primordials;\x0d\n\x0d\n// This class is modified from the example code in the WeakRefs specification:\x0d\n// https://github.com/tc39/proposal-weakrefs\x0d\n// Licensed under ECMA's MIT-style license\x2C see:\x0d\n// https://github.com/tc39/ecma262/blob/HEAD/LICENSE.md\x0d\nclass IterableWeakMap {\x0d\n  #weakMap = new SafeWeakMap();\x0d\n  #refSet = new SafeSet();\x0d\n  #finalizationGroup = new SafeFinalizationRegistry(cleanup);\x0d\n\x0d\n  set(key\x2C value) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (entry) {\x0d\n      // If there's already an entry for the object represented by "key"\x2C\x0d\n      // the value can be updated without creating a new WeakRef:\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref: entry.ref });\x0d\n    } else {\x0d\n      const ref = new SafeWeakRef(key);\x0d\n      this.#weakMap.set(key\x2C { value\x2C ref });\x0d\n      this.#refSet.add(ref);\x0d\n      this.#finalizationGroup.register(key\x2C {\x0d\n        set: this.#refSet\x2C\x0d\n        ref\x0d\n      }\x2C ref);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  get(key) {\x0d\n    return this.#weakMap.get(key)?.value;\x0d\n  }\x0d\n\x0d\n  has(key) {\x0d\n    return this.#weakMap.has(key);\x0d\n  }\x0d\n\x0d\n  delete(key) {\x0d\n    const entry = this.#weakMap.get(key);\x0d\n    if (!entry) {\x0d\n      return false;\x0d\n    }\x0d\n    this.#weakMap.delete(key);\x0d\n    this.#refSet.delete(entry.ref);\x0d\n    this.#finalizationGroup.unregister(entry.ref);\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  [SymbolIterator]() {\x0d\n    const iterator = this.#refSet[SymbolIterator]();\x0d\n\x0d\n    const next = () => {\x0d\n      const result = iterator.next();\x0d\n      if (result.done) return result;\x0d\n      const key = result.value.deref();\x0d\n      if (key == null) return next();\x0d\n      const { value } = this.#weakMap.get(key);\x0d\n      return { done: false\x2C value };\x0d\n    };\x0d\n\x0d\n    return {\x0d\n      [SymbolIterator]() { return this; }\x2C\x0d\n      next\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction cleanup({ set\x2C ref }) {\x0d\n  set.delete(ref);\x0d\n}\x0d\n\x0d\nObjectFreeze(IterableWeakMap.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  IterableWeakMap\x2C\x0d\n};\x0d\n
code-source-info,0x2f2f3a2d4a6,104,0,2042,C0O0C4O2042,,
code-creation,Function,10,348508,0x2f2f3a2dc06,196, node:internal/util/iterable_weak_map:1:1,0x2f2f3a2d420,~
code-source-info,0x2f2f3a2dc06,104,0,2042,C0O0C26O28C31O45C37O74C43O86C49O102C55O118C134O1448C168O1983C173O1954C177O1998C184O2020C190O2013C195O2041,,
code-creation,Function,10,348561,0x2f2f3a2dd86,75,<instance_members_initializer> node:internal/util/iterable_weak_map:17:3,0x2f2f3a2d730,~
code-source-info,0x2f2f3a2dd86,104,415,534,C3O426C10O426C27O458C34O458C48O497C62O497C74O534,,
code-creation,Eval,10,349069,0x2f2f3a2ea7e,5, node:internal/modules/cjs/helpers:1:1,0x2f2f3a2e7a8,~
script-source,105,node:internal/modules/cjs/helpers,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst {\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x0d\n} = require('internal/errors').codes;\x0d\nconst { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\n\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst path = require('path');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C URL } = require('internal/url');\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { setOwnProperty } = require('internal/util');\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\n\x0d\nconst {\x0d\n  require_private_symbol\x2C\x0d\n} = internalBinding('util');\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\n// TODO: Use this set when resolving pkg#exports conditions in loader.js.\x0d\nconst cjsConditions = new SafeSet([\x0d\n  'require'\x2C\x0d\n  'node'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nfunction loadBuiltinModule(filename\x2C request) {\x0d\n  const mod = BuiltinModule.map.get(filename);\x0d\n  if (mod?.canBeRequiredByUsers) {\x0d\n    debug('load built-in module %s'\x2C request);\x0d\n    // compileForPublicLoader() throws if mod.canBeRequiredByUsers is false:\x0d\n    mod.compileForPublicLoader();\x0d\n    return mod;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Invoke with makeRequireFunction(module) where |module| is the Module object\x0d\n// to use as the context for the require() function.\x0d\n// Use redirects to set up a mapping from a policy and restrict dependencies\x0d\nconst urlToFileCache = new SafeMap();\x0d\nfunction makeRequireFunction(mod\x2C redirects) {\x0d\n  const Module = mod.constructor;\x0d\n\x0d\n  let require;\x0d\n  if (redirects) {\x0d\n    const id = mod.filename || mod.id;\x0d\n    const conditions = cjsConditions;\x0d\n    const { resolve\x2C reaction } = redirects;\x0d\n    require = function require(specifier) {\x0d\n      let missing = true;\x0d\n      const destination = resolve(specifier\x2C conditions);\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        if (destination.protocol === 'node:') {\x0d\n          const specifier = destination.pathname;\x0d\n          const mod = loadBuiltinModule(specifier\x2C href);\x0d\n          if (mod && mod.canBeRequiredByUsers) {\x0d\n            return mod.exports;\x0d\n          }\x0d\n          throw new ERR_UNKNOWN_BUILTIN_MODULE(specifier);\x0d\n        } else if (destination.protocol === 'file:') {\x0d\n          let filepath;\x0d\n          if (urlToFileCache.has(href)) {\x0d\n            filepath = urlToFileCache.get(href);\x0d\n          } else {\x0d\n            filepath = fileURLToPath(destination);\x0d\n            urlToFileCache.set(href\x2C filepath);\x0d\n          }\x0d\n          return mod[require_private_symbol](mod\x2C filepath);\x0d\n        }\x0d\n      }\x0d\n      if (missing) {\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          id\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C ')\x0d\n        ));\x0d\n      }\x0d\n      return mod[require_private_symbol](mod\x2C specifier);\x0d\n    };\x0d\n  } else {\x0d\n    require = function require(path) {\x0d\n      // When no policy manifest\x2C the original prototype.require is sustained\x0d\n      return mod.require(path);\x0d\n    };\x0d\n  }\x0d\n\x0d\n  function resolve(request\x2C options) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveFilename(request\x2C mod\x2C false\x2C options);\x0d\n  }\x0d\n\x0d\n  require.resolve = resolve;\x0d\n\x0d\n  function paths(request) {\x0d\n    validateString(request\x2C 'request');\x0d\n    return Module._resolveLookupPaths(request\x2C mod);\x0d\n  }\x0d\n\x0d\n  resolve.paths = paths;\x0d\n\x0d\n  setOwnProperty(require\x2C 'main'\x2C process.mainModule);\x0d\n\x0d\n  // Enable support to add extra extension types.\x0d\n  require.extensions = Module._extensions;\x0d\n\x0d\n  require.cache = Module._cache;\x0d\n\x0d\n  return require;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\x0d\n * because the buffer-to-string conversion in `fs.readFileSync()`\x0d\n * translates it to FEFF\x2C the UTF-16 BOM.\x0d\n */\x0d\nfunction stripBOM(content) {\x0d\n  if (StringPrototypeCharCodeAt(content) === 0xFEFF) {\x0d\n    content = StringPrototypeSlice(content\x2C 1);\x0d\n  }\x0d\n  return content;\x0d\n}\x0d\n\x0d\nfunction addBuiltinLibsToObject(object\x2C dummyModuleName) {\x0d\n  // Make built-in modules available directly (loaded lazily).\x0d\n  const Module = require('internal/modules/cjs/loader').Module;\x0d\n  const { builtinModules } = Module;\x0d\n\x0d\n  // To require built-in modules in user-land and ignore modules whose\x0d\n  // `canBeRequiredByUsers` is false. So we create a dummy module object and not\x0d\n  // use `require()` directly.\x0d\n  const dummyModule = new Module(dummyModuleName);\x0d\n\x0d\n  ArrayPrototypeForEach(builtinModules\x2C (name) => {\x0d\n    // Neither add underscored modules\x2C nor ones that contain slashes (e.g.\x2C\x0d\n    // 'fs/promises') or ones that are already defined.\x0d\n    if (StringPrototypeStartsWith(name\x2C '_') ||\x0d\n        StringPrototypeIncludes(name\x2C '/') ||\x0d\n        ObjectPrototypeHasOwnProperty(object\x2C name)) {\x0d\n      return;\x0d\n    }\x0d\n    // Goals of this mechanism are:\x0d\n    // - Lazy loading of built-in modules\x0d\n    // - Having all built-in modules available as non-enumerable properties\x0d\n    // - Allowing the user to re-assign these variables as if there were no\x0d\n    //   pre-existing globals with the same name.\x0d\n\x0d\n    const setReal = (val) => {\x0d\n      // Deleting the property before re-assigning it disables the\x0d\n      // getter/setter mechanism.\x0d\n      delete object[name];\x0d\n      object[name] = val;\x0d\n    };\x0d\n\x0d\n    ObjectDefineProperty(object\x2C name\x2C {\x0d\n      __proto__: null\x2C\x0d\n      get: () => {\x0d\n        const lib = dummyModule.require(name);\x0d\n\x0d\n        // Disable the current getter/setter and set up a new\x0d\n        // non-enumerable property.\x0d\n        delete object[name];\x0d\n        ObjectDefineProperty(object\x2C name\x2C {\x0d\n          __proto__: null\x2C\x0d\n          get: () => lib\x2C\x0d\n          set: setReal\x2C\x0d\n          configurable: true\x2C\x0d\n          enumerable: false\x0d\n        });\x0d\n\x0d\n        return lib;\x0d\n      }\x2C\x0d\n      set: setReal\x2C\x0d\n      configurable: true\x2C\x0d\n      enumerable: false\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string | URL} referrer\x0d\n * @returns {string}\x0d\n */\x0d\nfunction normalizeReferrerURL(referrer) {\x0d\n  if (typeof referrer === 'string' && path.isAbsolute(referrer)) {\x0d\n    return pathToFileURL(referrer).href;\x0d\n  }\x0d\n  return new URL(referrer).href;\x0d\n}\x0d\n\x0d\n// For error messages only - used to check if ESM syntax is in use.\x0d\nfunction hasEsmSyntax(code) {\x0d\n  debug('Checking for ESM syntax');\x0d\n  const parser = require('internal/deps/acorn/acorn/dist/acorn').Parser;\x0d\n  let root;\x0d\n  try {\x0d\n    root = parser.parse(code\x2C { sourceType: 'module'\x2C ecmaVersion: 'latest' });\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  return ArrayPrototypeSome(root.body\x2C (stmt) =>\x0d\n    stmt.type === 'ExportDefaultDeclaration' ||\x0d\n    stmt.type === 'ExportNamedDeclaration' ||\x0d\n    stmt.type === 'ImportDeclaration' ||\x0d\n    stmt.type === 'ExportAllDeclaration');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  addBuiltinLibsToObject\x2C\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadBuiltinModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n};\x0d\n
code-source-info,0x2f2f3a2ea7e,105,0,7366,C0O0C4O7366,,
code-creation,Function,10,349758,0x2f2f3a2f01e,573, node:internal/modules/cjs/helpers:1:1,0x2f2f3a2e9f8,~
code-source-info,0x2f2f3a2f01e,105,0,7366,C0O0C110O28C116O54C122O77C128O100C134O125C140O159C145O171C150O183C156O213C162O241C168O266C174O391C180O391C185O417C190O323C196O359C202O452C208O452C213O434C219O521C225O521C230O502C236O567C242O567C246O567C248O631C254O631C259O593C265O608C271O623C277O686C283O686C288O667C293O743C299O743C304O724C310O793C313O793C318O868C321O868C326O839C332O908C338O908C343O941C356O942C362O908C364O1011C367O1011C372O1067C383O1200C390O1245C391O1245C447O1268C502O1200C507O1200C509O1848C511O1848C516O1848C518O7196C525O7218C531O7245C537O7263C543O7280C549O7302C555O7326C561O7351C567O7211C572O7365,,
code-creation,LazyCompile,10,350053,0x2f2f3a2fd4e,27,SafeSet node:internal/per_context/primordials:379:16,0x39b87cab40,~
code-source-info,0x2f2f3a2fd4e,6,11306,11323,C3O11312C7O11318C11O11312C26O11322,,
code-creation,LazyCompile,10,350189,0x2f2f3a2ff16,16,IterableWeakMap node:internal/util/iterable_weak_map:16:1,0x2f2f3a2d528,~
code-source-info,0x2f2f3a2ff16,104,388,388,C0O388C15O388,,
code-creation,LazyCompile,10,350268,0x2f2f3a3029e,27,SafeWeakMap node:internal/per_context/primordials:372:16,0x39b87caa78,~
code-source-info,0x2f2f3a3029e,6,11143,11160,C3O11149C7O11155C11O11149C26O11159,,
code-creation,LazyCompile,10,350357,0x2f2f3a303a6,27,SafeFinalizationRegistry node:internal/per_context/primordials:393:16,0x39b87cacc8,~
code-source-info,0x2f2f3a303a6,6,11770,11815,C3O11790C7O11796C11O11790C26O11814,,
code-creation,LazyCompile,10,350655,0x2f2f3a30c1e,492,initializeDeprecations node:internal/bootstrap/pre_execution:347:32,0x2f2f3a0df10,~
code-source-info,0x2f2f3a30c1e
code-creation,LazyCompile,10,350864,0x2f2f3a31136,53,initializeWASI node:internal/bootstrap/pre_execution:514:24,0x2f2f3a0e090,~
code-source-info,0x2f2f3a31136,100,16684,16897,C0O16718C6O16718C11O16700C16O16786C21O16790C29O16790C35O16806C37O16838C43O16838C47O16831C52O16896,,
code-creation,LazyCompile,10,350982,0x2f2f3a31286,53,runDeserializeCallbacks node:internal/v8/startup_snapshot:31:33,0x6414eafad0,~
script-source,89,node:internal/v8/startup_snapshot,'use strict';\x0d\n\x0d\nconst {\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\nconst {\x0d\n  ERR_NOT_BUILDING_SNAPSHOT\x2C\x0d\n  ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  setSerializeCallback\x2C\x0d\n  setDeserializeCallback\x2C\x0d\n  setDeserializeMainFunction: _setDeserializeMainFunction\x2C\x0d\n  markBootstrapComplete\x0d\n} = internalBinding('mksnapshot');\x0d\n\x0d\nfunction isBuildingSnapshot() {\x0d\n  // For now this is the only way to build a snapshot.\x0d\n  return require('internal/options').getOptionValue('--build-snapshot');\x0d\n}\x0d\n\x0d\nfunction throwIfNotBuildingSnapshot() {\x0d\n  if (!isBuildingSnapshot()) {\x0d\n    throw new ERR_NOT_BUILDING_SNAPSHOT();\x0d\n  }\x0d\n}\x0d\n\x0d\nconst deserializeCallbacks = [];\x0d\nlet deserializeCallbackIsSet = false;\x0d\nfunction runDeserializeCallbacks() {\x0d\n  while (deserializeCallbacks.length > 0) {\x0d\n    const { 0: callback\x2C 1: data } = deserializeCallbacks.shift();\x0d\n    callback(data);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addDeserializeCallback(callback\x2C data) {\x0d\n  throwIfNotBuildingSnapshot();\x0d\n  validateFunction(callback\x2C 'callback');\x0d\n  if (!deserializeCallbackIsSet) {\x0d\n    // TODO(joyeecheung): when the main function handling is done in JS\x2C\x0d\n    // the deserialize callbacks can always be invoked. For now only\x0d\n    // store it in C++ when it's actually used to avoid unnecessary\x0d\n    // C++ -> JS costs.\x0d\n    setDeserializeCallback(runDeserializeCallbacks);\x0d\n    deserializeCallbackIsSet = true;\x0d\n  }\x0d\n  deserializeCallbacks.push([callback\x2C data]);\x0d\n}\x0d\n\x0d\nconst serializeCallbacks = [];\x0d\nfunction runSerializeCallbacks() {\x0d\n  while (serializeCallbacks.length > 0) {\x0d\n    const { 0: callback\x2C 1: data } = serializeCallbacks.shift();\x0d\n    callback(data);\x0d\n  }\x0d\n  // Remove the hooks from the snapshot.\x0d\n  require('v8').startupSnapshot = undefined;\x0d\n}\x0d\n\x0d\nfunction addSerializeCallback(callback\x2C data) {\x0d\n  throwIfNotBuildingSnapshot();\x0d\n  validateFunction(callback\x2C 'callback');\x0d\n  serializeCallbacks.push([callback\x2C data]);\x0d\n}\x0d\n\x0d\nfunction initializeCallbacks() {\x0d\n  // Only run the serialize callbacks in snapshot building mode\x2C otherwise\x0d\n  // they throw.\x0d\n  if (isBuildingSnapshot()) {\x0d\n    setSerializeCallback(runSerializeCallbacks);\x0d\n  }\x0d\n}\x0d\n\x0d\nlet deserializeMainIsSet = false;\x0d\nfunction setDeserializeMainFunction(callback\x2C data) {\x0d\n  throwIfNotBuildingSnapshot();\x0d\n  // TODO(joyeecheung): In lib/internal/bootstrap/node.js\x2C create a default\x0d\n  // main function to run the lib/internal/main scripts and make sure that\x0d\n  // the main function set in the snapshot building process takes precedence.\x0d\n  validateFunction(callback\x2C 'callback');\x0d\n  if (deserializeMainIsSet) {\x0d\n    throw new ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION();\x0d\n  }\x0d\n  deserializeMainIsSet = true;\x0d\n\x0d\n  _setDeserializeMainFunction(function deserializeMain() {\x0d\n    const {\x0d\n      prepareMainThreadExecution\x0d\n    } = require('internal/bootstrap/pre_execution');\x0d\n\x0d\n    // This should be in sync with run_main_module.js until we make that\x0d\n    // a built-in main function.\x0d\n    prepareMainThreadExecution(true);\x0d\n    markBootstrapComplete();\x0d\n    callback(data);\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  initializeCallbacks\x2C\x0d\n  runDeserializeCallbacks\x2C\x0d\n  // Exposed to require('v8').startupSnapshot\x0d\n  namespace: {\x0d\n    addDeserializeCallback\x2C\x0d\n    addSerializeCallback\x2C\x0d\n    setDeserializeMainFunction\x2C\x0d\n    isBuildingSnapshot\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x2f2f3a31286,89,790,936,C0O833C5O826C11O833C16O878C21O899C26O899C31O856C37O869C44O913C48O798C52O935,,
code-creation,LazyCompile,10,351348,0x2f2f3a31816,66,initializeCJSLoader node:internal/bootstrap/pre_execution:521:29,0x2f2f3a0e0e0,~
code-source-info,0x2f2f3a31816,100,16929,17252,C0O16955C6O16955C11O16998C16O17003C20O17023C26O17062C31O17069C36O17069C40O17168C51O17190C56O17226C60O17183C65O17251,,
code-creation,Eval,10,352952,0x2f2f3a339e6,5, node:internal/modules/cjs/loader:1:1,0x2f2f3a33090,~
script-source,106,node:internal/modules/cjs/loader,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  ArrayPrototypeUnshiftApply\x2C\x0d\n  ArrayPrototypeFlatMap\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototype\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Proxy\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectSet\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharAt\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\n// Map used to store CJS parsing data.\x0d\nconst cjsParseCache = new SafeWeakMap();\x0d\n\x0d\n// Set first due to cycle with ESM loader functions.\x0d\nmodule.exports = {\x0d\n  wrapSafe\x2C Module\x2C toRealPath\x2C readPackageScope\x2C cjsParseCache\x2C\x0d\n  get hasLoadedAnyUserCJSModule() { return hasLoadedAnyUserCJSModule; }\x0d\n};\x0d\n\x0d\nconst { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  maybeCacheSourceMap\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst { pathToFileURL\x2C fileURLToPath\x2C isURLInstance } = require('internal/url');\x0d\nconst {\x0d\n  deprecate\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  kEmptyObject\x2C\x0d\n  filterOwnProperties\x2C\x0d\n  setOwnProperty\x2C\x0d\n} = require('internal/util');\x0d\nconst vm = require('vm');\x0d\nconst assert = require('internal/assert');\x0d\nconst fs = require('fs');\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst path = require('path');\x0d\nconst { sep } = path;\x0d\nconst { internalModuleStat } = internalBinding('fs');\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst { safeGetenv } = internalBinding('credentials');\x0d\nconst {\x0d\n  require_private_symbol\x2C\x0d\n} = internalBinding('util');\x0d\nconst {\x0d\n  cjsConditions\x2C\x0d\n  hasEsmSyntax\x2C\x0d\n  loadBuiltinModule\x2C\x0d\n  makeRequireFunction\x2C\x0d\n  normalizeReferrerURL\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\nconst shouldReportRequiredModules = process.env.WATCH_REPORT_DEPENDENCIES;\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\n\x0d\n// Whether any user-provided CJS modules had been loaded (executed).\x0d\n// Used for internal assertions.\x0d\nlet hasLoadedAnyUserCJSModule = false;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n    ERR_REQUIRE_ESM\x2C\x0d\n    ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  }\x2C\x0d\n  setArrowMessage\x2C\x0d\n} = require('internal/errors');\x0d\nconst { validateString } = require('internal/validators');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_COLON\x0d\n} = require('internal/constants');\x0d\n\x0d\nconst {\x0d\n  isProxy\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { enrichCJSError } = require('internal/modules/esm/translators');\x0d\nconst { kEvaluated } = internalBinding('module_wrap');\x0d\nconst {\x0d\n  encodedSepRegEx\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x0d\n} = require('internal/modules/esm/resolve');\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst relativeResolveCache = ObjectCreate(null);\x0d\n\x0d\nlet requireDepth = 0;\x0d\nlet statCache = null;\x0d\nlet isPreloading = false;\x0d\n\x0d\nfunction internalRequire(module\x2C id) {\x0d\n  validateString(id\x2C 'id');\x0d\n  if (id === '') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('id'\x2C id\x2C\x0d\n                                    'must be a non-empty string');\x0d\n  }\x0d\n  requireDepth++;\x0d\n  try {\x0d\n    return Module._load(id\x2C module\x2C /* isMain */ false);\x0d\n  } finally {\x0d\n    requireDepth--;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction stat(filename) {\x0d\n  filename = path.toNamespacedPath(filename);\x0d\n  if (statCache !== null) {\x0d\n    const result = statCache.get(filename);\x0d\n    if (result !== undefined) return result;\x0d\n  }\x0d\n  const result = internalModuleStat(filename);\x0d\n  if (statCache !== null && result >= 0) {\x0d\n    // Only set cache when `internalModuleStat(filename)` succeeds.\x0d\n    statCache.set(filename\x2C result);\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\nlet _stat = stat;\x0d\nObjectDefineProperty(Module\x2C '_stat'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return _stat; }\x2C\x0d\n  set(stat) {\x0d\n    emitExperimentalWarning('Module._stat');\x0d\n    _stat = stat;\x0d\n    return true;\x0d\n  }\x2C\x0d\n  configurable: true\x2C\x0d\n});\x0d\n\x0d\nfunction updateChildren(parent\x2C child\x2C scan) {\x0d\n  const children = parent?.children;\x0d\n  if (children && !(scan && ArrayPrototypeIncludes(children\x2C child)))\x0d\n    ArrayPrototypePush(children\x2C child);\x0d\n}\x0d\n\x0d\nfunction reportModuleToWatchMode(filename) {\x0d\n  if (shouldReportRequiredModules && process.send) {\x0d\n    process.send({ 'watch:require': filename });\x0d\n  }\x0d\n}\x0d\n\x0d\nconst moduleParentCache = new SafeWeakMap();\x0d\nfunction Module(id = ''\x2C parent) {\x0d\n  this.id = id;\x0d\n  this.path = path.dirname(id);\x0d\n  setOwnProperty(this\x2C 'exports'\x2C {});\x0d\n  moduleParentCache.set(this\x2C parent);\x0d\n  updateChildren(parent\x2C this\x2C false);\x0d\n  this.filename = null;\x0d\n  this.loaded = false;\x0d\n  this.children = [];\x0d\n  let redirects;\x0d\n  if (policy?.manifest) {\x0d\n    const moduleURL = pathToFileURL(id);\x0d\n    redirects = policy.manifest.getDependencyMapper(moduleURL);\x0d\n    // TODO(rafaelgss): remove the necessity of this branch\x0d\n    setOwnProperty(this\x2C 'require'\x2C makeRequireFunction(this\x2C redirects));\x0d\n  }\x0d\n  this[require_private_symbol] = internalRequire;\x0d\n}\x0d\n\x0d\nconst builtinModules = [];\x0d\nfor (const { 0: id\x2C 1: mod } of BuiltinModule.map) {\x0d\n  if (mod.canBeRequiredByUsers &&\x0d\n    BuiltinModule.canBeRequiredWithoutScheme(id)) {\x0d\n    ArrayPrototypePush(builtinModules\x2C id);\x0d\n  }\x0d\n}\x0d\n\x0d\nconst allBuiltins = new SafeSet(\x0d\n  ArrayPrototypeFlatMap(builtinModules\x2C (bm) => [bm\x2C `node:${bm}`])\x0d\n);\x0d\nBuiltinModule.getSchemeOnlyModuleNames().forEach((builtin) => allBuiltins.add(`node:${builtin}`));\x0d\n\x0d\nObjectFreeze(builtinModules);\x0d\nModule.builtinModules = builtinModules;\x0d\n\x0d\nModule._cache = ObjectCreate(null);\x0d\nModule._pathCache = ObjectCreate(null);\x0d\nModule._extensions = ObjectCreate(null);\x0d\nlet modulePaths = [];\x0d\nModule.globalPaths = [];\x0d\n\x0d\nlet patched = false;\x0d\n\x0d\n// eslint-disable-next-line func-style\x0d\nlet wrap = function(script) {\x0d\n  return Module.wrapper[0] + script + Module.wrapper[1];\x0d\n};\x0d\n\x0d\nconst wrapper = [\x0d\n  '(function (exports\x2C require\x2C module\x2C __filename\x2C __dirname) { '\x2C\x0d\n  '\\n});'\x2C\x0d\n];\x0d\n\x0d\nlet wrapperProxy = new Proxy(wrapper\x2C {\x0d\n  __proto__: null\x2C\x0d\n\x0d\n  set(target\x2C property\x2C value\x2C receiver) {\x0d\n    patched = true;\x0d\n    return ReflectSet(target\x2C property\x2C value\x2C receiver);\x0d\n  }\x2C\x0d\n\x0d\n  defineProperty(target\x2C property\x2C descriptor) {\x0d\n    patched = true;\x0d\n    return ObjectDefineProperty(target\x2C property\x2C descriptor);\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrap'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return wrap;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrap = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Module\x2C 'wrapper'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return wrapperProxy;\x0d\n  }\x2C\x0d\n\x0d\n  set(value) {\x0d\n    patched = true;\x0d\n    wrapperProxy = value;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst isPreloadingDesc = { get() { return isPreloading; } };\x0d\nObjectDefineProperty(Module.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\nObjectDefineProperty(BuiltinModule.prototype\x2C 'isPreloading'\x2C isPreloadingDesc);\x0d\n\x0d\nfunction getModuleParent() {\x0d\n  return moduleParentCache.get(this);\x0d\n}\x0d\n\x0d\nfunction setModuleParent(value) {\x0d\n  moduleParentCache.set(this\x2C value);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Module.prototype\x2C 'parent'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: pendingDeprecation ? deprecate(\x0d\n    getModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : getModuleParent\x2C\x0d\n  set: pendingDeprecation ? deprecate(\x0d\n    setModuleParent\x2C\x0d\n    'module.parent is deprecated due to accuracy issues. Please use ' +\x0d\n      'require.main to find program entry point instead.'\x2C\x0d\n    'DEP0144'\x0d\n  ) : setModuleParent\x2C\x0d\n});\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('module'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nModule._debug = deprecate(debug\x2C 'Module._debug is deprecated.'\x2C 'DEP0077');\x0d\n\x0d\n// Given a module name\x2C and a list of paths to test\x2C returns the first\x0d\n// matching file in the following precedence.\x0d\n//\x0d\n// require("a.<ext>")\x0d\n//   -> a.<ext>\x0d\n//\x0d\n// require("a")\x0d\n//   -> a\x0d\n//   -> a.<ext>\x0d\n//   -> a/index.<ext>\x0d\n\x0d\nconst packageJsonCache = new SafeMap();\x0d\n\x0d\nfunction readPackage(requestPath) {\x0d\n  const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n\x0d\n  const existing = packageJsonCache.get(jsonPath);\x0d\n  if (existing !== undefined) return existing;\x0d\n\x0d\n  const result = packageJsonReader.read(jsonPath);\x0d\n  const json = result.containsKeys === false ? '{}' : result.string;\x0d\n  if (json === undefined) {\x0d\n    packageJsonCache.set(jsonPath\x2C false);\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    const filtered = filterOwnProperties(JSONParse(json)\x2C [\x0d\n      'name'\x2C\x0d\n      'main'\x2C\x0d\n      'exports'\x2C\x0d\n      'imports'\x2C\x0d\n      'type'\x2C\x0d\n    ]);\x0d\n    packageJsonCache.set(jsonPath\x2C filtered);\x0d\n    return filtered;\x0d\n  } catch (e) {\x0d\n    e.path = jsonPath;\x0d\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\nlet _readPackage = readPackage;\x0d\nObjectDefineProperty(Module\x2C '_readPackage'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return _readPackage; }\x2C\x0d\n  set(readPackage) {\x0d\n    emitExperimentalWarning('Module._readPackage');\x0d\n    _readPackage = readPackage;\x0d\n    return true;\x0d\n  }\x2C\x0d\n  configurable: true\x2C\x0d\n});\x0d\n\x0d\nfunction readPackageScope(checkPath) {\x0d\n  const rootSeparatorIndex = StringPrototypeIndexOf(checkPath\x2C sep);\x0d\n  let separatorIndex;\x0d\n  do {\x0d\n    separatorIndex = StringPrototypeLastIndexOf(checkPath\x2C sep);\x0d\n    checkPath = StringPrototypeSlice(checkPath\x2C 0\x2C separatorIndex);\x0d\n    if (StringPrototypeEndsWith(checkPath\x2C sep + 'node_modules'))\x0d\n      return false;\x0d\n    const pjson = _readPackage(checkPath + sep);\x0d\n    if (pjson) return {\x0d\n      data: pjson\x2C\x0d\n      path: checkPath\x2C\x0d\n    };\x0d\n  } while (separatorIndex > rootSeparatorIndex);\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction tryPackage(requestPath\x2C exts\x2C isMain\x2C originalPath) {\x0d\n  const pkg = _readPackage(requestPath)?.main;\x0d\n\x0d\n  if (!pkg) {\x0d\n    return tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n  }\x0d\n\x0d\n  const filename = path.resolve(requestPath\x2C pkg);\x0d\n  let actual = tryFile(filename\x2C isMain) ||\x0d\n    tryExtensions(filename\x2C exts\x2C isMain) ||\x0d\n    tryExtensions(path.resolve(filename\x2C 'index')\x2C exts\x2C isMain);\x0d\n  if (actual === false) {\x0d\n    actual = tryExtensions(path.resolve(requestPath\x2C 'index')\x2C exts\x2C isMain);\x0d\n    if (!actual) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const err = new Error(\x0d\n        `Cannot find module '${filename}'. ` +\x0d\n        'Please verify that the package.json has a valid "main" entry'\x0d\n      );\x0d\n      err.code = 'MODULE_NOT_FOUND';\x0d\n      err.path = path.resolve(requestPath\x2C 'package.json');\x0d\n      err.requestPath = originalPath;\x0d\n      // TODO(BridgeAR): Add the requireStack as well.\x0d\n      throw err;\x0d\n    } else {\x0d\n      const jsonPath = path.resolve(requestPath\x2C 'package.json');\x0d\n      process.emitWarning(\x0d\n        `Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` +\x0d\n          'Please either fix that or report it to the module author'\x2C\x0d\n        'DeprecationWarning'\x2C\x0d\n        'DEP0128'\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n  return actual;\x0d\n}\x0d\n\x0d\n// In order to minimize unnecessary lstat() calls\x2C\x0d\n// this cache is a list of known-real paths.\x0d\n// Set to an empty Map to reset.\x0d\nconst realpathCache = new SafeMap();\x0d\n\x0d\n// Check if the file exists and is not a directory\x0d\n// if using --preserve-symlinks and isMain is false\x2C\x0d\n// keep symlinks intact\x2C otherwise resolve to the\x0d\n// absolute realpath.\x0d\nfunction tryFile(requestPath\x2C isMain) {\x0d\n  const rc = _stat(requestPath);\x0d\n  if (rc !== 0) return;\x0d\n  if (preserveSymlinks && !isMain) {\x0d\n    return path.resolve(requestPath);\x0d\n  }\x0d\n  return toRealPath(requestPath);\x0d\n}\x0d\n\x0d\nfunction toRealPath(requestPath) {\x0d\n  return fs.realpathSync(requestPath\x2C {\x0d\n    [internalFS.realpathCacheKey]: realpathCache\x0d\n  });\x0d\n}\x0d\n\x0d\n// Given a path\x2C check if the file exists with any of the set extensions\x0d\nfunction tryExtensions(p\x2C exts\x2C isMain) {\x0d\n  for (let i = 0; i < exts.length; i++) {\x0d\n    const filename = tryFile(p + exts[i]\x2C isMain);\x0d\n\x0d\n    if (filename) {\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n// Find the longest (possibly multi-dot) extension registered in\x0d\n// Module._extensions\x0d\nfunction findLongestRegisteredExtension(filename) {\x0d\n  const name = path.basename(filename);\x0d\n  let currentExtension;\x0d\n  let index;\x0d\n  let startIndex = 0;\x0d\n  while ((index = StringPrototypeIndexOf(name\x2C '.'\x2C startIndex)) !== -1) {\x0d\n    startIndex = index + 1;\x0d\n    if (index === 0) continue; // Skip dotfiles like .gitignore\x0d\n    currentExtension = StringPrototypeSlice(name\x2C index);\x0d\n    if (Module._extensions[currentExtension]) return currentExtension;\x0d\n  }\x0d\n  return '.js';\x0d\n}\x0d\n\x0d\nfunction trySelfParentPath(parent) {\x0d\n  if (!parent) return false;\x0d\n\x0d\n  if (parent.filename) {\x0d\n    return parent.filename;\x0d\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\x0d\n    try {\x0d\n      return process.cwd() + path.sep;\x0d\n    } catch {\x0d\n      return false;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction trySelf(parentPath\x2C request) {\x0d\n  if (!parentPath) return false;\x0d\n\x0d\n  const { data: pkg\x2C path: pkgPath } = readPackageScope(parentPath) || {};\x0d\n  if (!pkg || pkg.exports === undefined) return false;\x0d\n  if (typeof pkg.name !== 'string') return false;\x0d\n\x0d\n  let expansion;\x0d\n  if (request === pkg.name) {\x0d\n    expansion = '.';\x0d\n  } else if (StringPrototypeStartsWith(request\x2C `${pkg.name}/`)) {\x0d\n    expansion = '.' + StringPrototypeSlice(request\x2C pkg.name.length);\x0d\n  } else {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    return finalizeEsmResolution(packageExportsResolve(\x0d\n      pathToFileURL(pkgPath + '/package.json')\x2C expansion\x2C pkg\x2C\x0d\n      pathToFileURL(parentPath)\x2C cjsConditions)\x2C request\x2C parentPath\x2C pkgPath);\x0d\n  } catch (e) {\x0d\n    if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n      throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n    throw e;\x0d\n  }\x0d\n}\x0d\n\x0d\n// This only applies to requests of a specific form:\x0d\n// 1. name/.*\x0d\n// 2. @scope/name/.*\x0d\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\x0d\nfunction resolveExports(nmPath\x2C request) {\x0d\n  // The implementation's behavior is meant to mirror resolution in ESM.\x0d\n  const { 1: name\x2C 2: expansion = '' } =\x0d\n    RegExpPrototypeExec(EXPORTS_PATTERN\x2C request) || kEmptyObject;\x0d\n  if (!name)\x0d\n    return;\x0d\n  const pkgPath = path.resolve(nmPath\x2C name);\x0d\n  const pkg = _readPackage(pkgPath);\x0d\n  if (pkg?.exports != null) {\x0d\n    try {\x0d\n      return finalizeEsmResolution(packageExportsResolve(\x0d\n        pathToFileURL(pkgPath + '/package.json')\x2C '.' + expansion\x2C pkg\x2C null\x2C\x0d\n        cjsConditions)\x2C request\x2C null\x2C pkgPath);\x0d\n    } catch (e) {\x0d\n      if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n        throw createEsmNotFoundErr(request\x2C pkgPath + '/package.json');\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nconst trailingSlashRegex = /(?:^|\\/)\\.?\\.$/;\x0d\nModule._findPath = function(request\x2C paths\x2C isMain) {\x0d\n  const absoluteRequest = path.isAbsolute(request);\x0d\n  if (absoluteRequest) {\x0d\n    paths = [''];\x0d\n  } else if (!paths || paths.length === 0) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths\x2C '\\x00');\x0d\n  const entry = Module._pathCache[cacheKey];\x0d\n  if (entry)\x0d\n    return entry;\x0d\n\x0d\n  let exts;\x0d\n  let trailingSlash = request.length > 0 &&\x0d\n    StringPrototypeCharCodeAt(request\x2C request.length - 1) ===\x0d\n    CHAR_FORWARD_SLASH;\x0d\n  if (!trailingSlash) {\x0d\n    trailingSlash = RegExpPrototypeExec(trailingSlashRegex\x2C request) !== null;\x0d\n  }\x0d\n\x0d\n  // For each path\x0d\n  for (let i = 0; i < paths.length; i++) {\x0d\n    // Don't search further if path doesn't exist\x0d\n    const curPath = paths[i];\x0d\n    if (curPath && _stat(curPath) < 1) continue;\x0d\n\x0d\n    if (!absoluteRequest) {\x0d\n      const exportsResolved = resolveExports(curPath\x2C request);\x0d\n      if (exportsResolved)\x0d\n        return exportsResolved;\x0d\n    }\x0d\n\x0d\n    const basePath = path.resolve(curPath\x2C request);\x0d\n    let filename;\x0d\n\x0d\n    const rc = _stat(basePath);\x0d\n    if (!trailingSlash) {\x0d\n      if (rc === 0) {  // File.\x0d\n        if (!isMain) {\x0d\n          if (preserveSymlinks) {\x0d\n            filename = path.resolve(basePath);\x0d\n          } else {\x0d\n            filename = toRealPath(basePath);\x0d\n          }\x0d\n        } else if (preserveSymlinksMain) {\x0d\n          // For the main module\x2C we use the preserveSymlinksMain flag instead\x0d\n          // mainly for backward compatibility\x2C as the preserveSymlinks flag\x0d\n          // historically has not applied to the main module.  Most likely this\x0d\n          // was intended to keep .bin/ binaries working\x2C as following those\x0d\n          // symlinks is usually required for the imports in the corresponding\x0d\n          // files to resolve; that said\x2C in some use cases following symlinks\x0d\n          // causes bigger problems which is why the preserveSymlinksMain option\x0d\n          // is needed.\x0d\n          filename = path.resolve(basePath);\x0d\n        } else {\x0d\n          filename = toRealPath(basePath);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (!filename) {\x0d\n        // Try it with each of the extensions\x0d\n        if (exts === undefined)\x0d\n          exts = ObjectKeys(Module._extensions);\x0d\n        filename = tryExtensions(basePath\x2C exts\x2C isMain);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (!filename && rc === 1) {  // Directory.\x0d\n      // try it with each of the extensions at "index"\x0d\n      if (exts === undefined)\x0d\n        exts = ObjectKeys(Module._extensions);\x0d\n      filename = tryPackage(basePath\x2C exts\x2C isMain\x2C request);\x0d\n    }\x0d\n\x0d\n    if (filename) {\x0d\n      Module._pathCache[cacheKey] = filename;\x0d\n      return filename;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n};\x0d\n\x0d\n// 'node_modules' character codes reversed\x0d\nconst nmChars = [ 115\x2C 101\x2C 108\x2C 117\x2C 100\x2C 111\x2C 109\x2C 95\x2C 101\x2C 100\x2C 111\x2C 110 ];\x0d\nconst nmLen = nmChars.length;\x0d\nif (isWindows) {\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n\x0d\n    // return root node_modules when path is 'D:\\\\'.\x0d\n    // path.resolve will make sure from.length >=3 in Windows.\x0d\n    if (StringPrototypeCharCodeAt(from\x2C from.length - 1) ===\x0d\n          CHAR_BACKWARD_SLASH &&\x0d\n        StringPrototypeCharCodeAt(from\x2C from.length - 2) === CHAR_COLON)\x0d\n      return [from + 'node_modules'];\x0d\n\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      // The path segment separator check ('\\' and '/') was used to get\x0d\n      // node_modules path for every path segment.\x0d\n      // Use colon as an extra condition since we can get node_modules\x0d\n      // path for drive root like 'C:\\node_modules' and don't need to\x0d\n      // parse drive name.\x0d\n      if (code === CHAR_BACKWARD_SLASH ||\x0d\n          code === CHAR_FORWARD_SLASH ||\x0d\n          code === CHAR_COLON) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '\\\\node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n} else { // posix\x0d\n  // 'from' is the __dirname of the module.\x0d\n  Module._nodeModulePaths = function(from) {\x0d\n    // Guarantee that 'from' is absolute.\x0d\n    from = path.resolve(from);\x0d\n    // Return early not only to avoid unnecessary work\x2C but to *avoid* returning\x0d\n    // an array of two items for a root: [ '//node_modules'\x2C '/node_modules' ]\x0d\n    if (from === '/')\x0d\n      return ['/node_modules'];\x0d\n\x0d\n    // note: this approach *only* works when the path is guaranteed\x0d\n    // to be absolute.  Doing a fully-edge-case-correct path.split\x0d\n    // that works on both Windows and Posix is non-trivial.\x0d\n    const paths = [];\x0d\n    for (let i = from.length - 1\x2C p = 0\x2C last = from.length; i >= 0; --i) {\x0d\n      const code = StringPrototypeCharCodeAt(from\x2C i);\x0d\n      if (code === CHAR_FORWARD_SLASH) {\x0d\n        if (p !== nmLen)\x0d\n          ArrayPrototypePush(\x0d\n            paths\x2C\x0d\n            StringPrototypeSlice(from\x2C 0\x2C last) + '/node_modules'\x0d\n          );\x0d\n        last = i;\x0d\n        p = 0;\x0d\n      } else if (p !== -1) {\x0d\n        if (nmChars[p] === code) {\x0d\n          ++p;\x0d\n        } else {\x0d\n          p = -1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Append /node_modules to handle root paths.\x0d\n    ArrayPrototypePush(paths\x2C '/node_modules');\x0d\n\x0d\n    return paths;\x0d\n  };\x0d\n}\x0d\n\x0d\nModule._resolveLookupPaths = function(request\x2C parent) {\x0d\n  if (BuiltinModule.canBeRequiredByUsers(request) &&\x0d\n      BuiltinModule.canBeRequiredWithoutScheme(request)) {\x0d\n    debug('looking for %j in []'\x2C request);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  // Check for node modules paths.\x0d\n  if (StringPrototypeCharAt(request\x2C 0) !== '.' ||\x0d\n      (request.length > 1 &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '.' &&\x0d\n      StringPrototypeCharAt(request\x2C 1) !== '/' &&\x0d\n      (!isWindows || StringPrototypeCharAt(request\x2C 1) !== '\\\\'))) {\x0d\n\x0d\n    let paths = modulePaths;\x0d\n    if (parent?.paths?.length) {\x0d\n      paths = ArrayPrototypeConcat(parent.paths\x2C paths);\x0d\n    }\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C paths);\x0d\n    return paths.length > 0 ? paths : null;\x0d\n  }\x0d\n\x0d\n  // In REPL\x2C parent.filename is null.\x0d\n  if (!parent || !parent.id || !parent.filename) {\x0d\n    // Make require('./path/to/foo') work - normally the path is taken\x0d\n    // from realpath(__filename) but in REPL there is no filename\x0d\n    const mainPaths = ['.'];\x0d\n\x0d\n    debug('looking for %j in %j'\x2C request\x2C mainPaths);\x0d\n    return mainPaths;\x0d\n  }\x0d\n\x0d\n  debug('RELATIVE: requested: %s from parent.id %s'\x2C request\x2C parent.id);\x0d\n\x0d\n  const parentDir = [path.dirname(parent.filename)];\x0d\n  debug('looking for %j'\x2C parentDir);\x0d\n  return parentDir;\x0d\n};\x0d\n\x0d\nfunction emitCircularRequireWarning(prop) {\x0d\n  process.emitWarning(\x0d\n    `Accessing non-existent property '${String(prop)}' of module exports ` +\x0d\n    'inside circular dependency'\x0d\n  );\x0d\n}\x0d\n\x0d\n// A Proxy that can be used as the prototype of a module.exports object and\x0d\n// warns when non-existent properties are accessed.\x0d\nconst CircularRequirePrototypeWarningProxy = new Proxy({}\x2C {\x0d\n  __proto__: null\x2C\x0d\n\x0d\n  get(target\x2C prop) {\x0d\n    // Allow __esModule access in any case because it is used in the output\x0d\n    // of transpiled code to determine whether something comes from an\x0d\n    // ES module\x2C and is not used as a regular key of `module.exports`.\x0d\n    if (prop in target || prop === '__esModule') return target[prop];\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x2C\x0d\n\x0d\n  getOwnPropertyDescriptor(target\x2C prop) {\x0d\n    if (ObjectPrototypeHasOwnProperty(target\x2C prop) || prop === '__esModule')\x0d\n      return ObjectGetOwnPropertyDescriptor(target\x2C prop);\x0d\n    emitCircularRequireWarning(prop);\x0d\n    return undefined;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction getExportsForCircularRequire(module) {\x0d\n  if (module.exports &&\x0d\n      !isProxy(module.exports) &&\x0d\n      ObjectGetPrototypeOf(module.exports) === ObjectPrototype &&\x0d\n      // Exclude transpiled ES6 modules / TypeScript code because those may\x0d\n      // employ unusual patterns for accessing 'module.exports'. That should\x0d\n      // be okay because ES6 modules have a different approach to circular\x0d\n      // dependencies anyway.\x0d\n      !module.exports.__esModule) {\x0d\n    // This is later unset once the module is done loading.\x0d\n    ObjectSetPrototypeOf(\x0d\n      module.exports\x2C CircularRequirePrototypeWarningProxy);\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n}\x0d\n\x0d\n// Check the cache for the requested file.\x0d\n// 1. If a module already exists in the cache: return its exports object.\x0d\n// 2. If the module is native: call\x0d\n//    `BuiltinModule.prototype.compileForPublicLoader()` and return the exports.\x0d\n// 3. Otherwise\x2C create a new module for the file and save it to the cache.\x0d\n//    Then have it load  the file contents before returning its exports\x0d\n//    object.\x0d\nModule._load = function(request\x2C parent\x2C isMain) {\x0d\n  let relResolveCacheIdentifier;\x0d\n  if (parent) {\x0d\n    debug('Module._load REQUEST %s parent: %s'\x2C request\x2C parent.id);\x0d\n    // Fast path for (lazy loaded) modules in the same directory. The indirect\x0d\n    // caching is required to allow cache invalidation without changing the old\x0d\n    // cache key names.\x0d\n    relResolveCacheIdentifier = `${parent.path}\\x00${request}`;\x0d\n    const filename = relativeResolveCache[relResolveCacheIdentifier];\x0d\n    reportModuleToWatchMode(filename);\x0d\n    if (filename !== undefined) {\x0d\n      const cachedModule = Module._cache[filename];\x0d\n      if (cachedModule !== undefined) {\x0d\n        updateChildren(parent\x2C cachedModule\x2C true);\x0d\n        if (!cachedModule.loaded)\x0d\n          return getExportsForCircularRequire(cachedModule);\x0d\n        return cachedModule.exports;\x0d\n      }\x0d\n      delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (StringPrototypeStartsWith(request\x2C 'node:')) {\x0d\n    // Slice 'node:' prefix\x0d\n    const id = StringPrototypeSlice(request\x2C 5);\x0d\n\x0d\n    const module = loadBuiltinModule(id\x2C request);\x0d\n    if (!module?.canBeRequiredByUsers) {\x0d\n      throw new ERR_UNKNOWN_BUILTIN_MODULE(request);\x0d\n    }\x0d\n\x0d\n    return module.exports;\x0d\n  }\x0d\n\x0d\n  const filename = Module._resolveFilename(request\x2C parent\x2C isMain);\x0d\n  const cachedModule = Module._cache[filename];\x0d\n  if (cachedModule !== undefined) {\x0d\n    updateChildren(parent\x2C cachedModule\x2C true);\x0d\n    if (!cachedModule.loaded) {\x0d\n      const parseCachedModule = cjsParseCache.get(cachedModule);\x0d\n      if (!parseCachedModule || parseCachedModule.loaded)\x0d\n        return getExportsForCircularRequire(cachedModule);\x0d\n      parseCachedModule.loaded = true;\x0d\n    } else {\x0d\n      return cachedModule.exports;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const mod = loadBuiltinModule(filename\x2C request);\x0d\n  if (mod?.canBeRequiredByUsers &&\x0d\n      BuiltinModule.canBeRequiredWithoutScheme(filename)) {\x0d\n    return mod.exports;\x0d\n  }\x0d\n\x0d\n  // Don't call updateChildren()\x2C Module constructor already does.\x0d\n  const module = cachedModule || new Module(filename\x2C parent);\x0d\n\x0d\n  if (isMain) {\x0d\n    process.mainModule = module;\x0d\n    setOwnProperty(module.require\x2C 'main'\x2C process.mainModule);\x0d\n    module.id = '.';\x0d\n  }\x0d\n\x0d\n  reportModuleToWatchMode(filename);\x0d\n\x0d\n  Module._cache[filename] = module;\x0d\n  if (parent !== undefined) {\x0d\n    relativeResolveCache[relResolveCacheIdentifier] = filename;\x0d\n  }\x0d\n\x0d\n  let threw = true;\x0d\n  try {\x0d\n    module.load(filename);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw) {\x0d\n      delete Module._cache[filename];\x0d\n      if (parent !== undefined) {\x0d\n        delete relativeResolveCache[relResolveCacheIdentifier];\x0d\n        const children = parent?.children;\x0d\n        if (ArrayIsArray(children)) {\x0d\n          const index = ArrayPrototypeIndexOf(children\x2C module);\x0d\n          if (index !== -1) {\x0d\n            ArrayPrototypeSplice(children\x2C index\x2C 1);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (module.exports &&\x0d\n               !isProxy(module.exports) &&\x0d\n               ObjectGetPrototypeOf(module.exports) ===\x0d\n                 CircularRequirePrototypeWarningProxy) {\x0d\n      ObjectSetPrototypeOf(module.exports\x2C ObjectPrototype);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return module.exports;\x0d\n};\x0d\n\x0d\nModule._resolveFilename = function(request\x2C parent\x2C isMain\x2C options) {\x0d\n  if (\x0d\n    (\x0d\n      StringPrototypeStartsWith(request\x2C 'node:') &&\x0d\n      BuiltinModule.canBeRequiredByUsers(StringPrototypeSlice(request\x2C 5))\x0d\n    ) || (\x0d\n      BuiltinModule.canBeRequiredByUsers(request) &&\x0d\n      BuiltinModule.canBeRequiredWithoutScheme(request)\x0d\n    )\x0d\n  ) {\x0d\n    return request;\x0d\n  }\x0d\n\x0d\n  let paths;\x0d\n\x0d\n  if (typeof options === 'object' && options !== null) {\x0d\n    if (ArrayIsArray(options.paths)) {\x0d\n      const isRelative = StringPrototypeStartsWith(request\x2C './') ||\x0d\n          StringPrototypeStartsWith(request\x2C '../') ||\x0d\n          ((isWindows && StringPrototypeStartsWith(request\x2C '.\\\\')) ||\x0d\n          StringPrototypeStartsWith(request\x2C '..\\\\'));\x0d\n\x0d\n      if (isRelative) {\x0d\n        paths = options.paths;\x0d\n      } else {\x0d\n        const fakeParent = new Module(''\x2C null);\x0d\n\x0d\n        paths = [];\x0d\n\x0d\n        for (let i = 0; i < options.paths.length; i++) {\x0d\n          const path = options.paths[i];\x0d\n          fakeParent.paths = Module._nodeModulePaths(path);\x0d\n          const lookupPaths = Module._resolveLookupPaths(request\x2C fakeParent);\x0d\n\x0d\n          for (let j = 0; j < lookupPaths.length; j++) {\x0d\n            if (!ArrayPrototypeIncludes(paths\x2C lookupPaths[j]))\x0d\n              ArrayPrototypePush(paths\x2C lookupPaths[j]);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else if (options.paths === undefined) {\x0d\n      paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n    } else {\x0d\n      throw new ERR_INVALID_ARG_VALUE('options.paths'\x2C options.paths);\x0d\n    }\x0d\n  } else {\x0d\n    paths = Module._resolveLookupPaths(request\x2C parent);\x0d\n  }\x0d\n\x0d\n  if (request[0] === '#' && (parent?.filename || parent?.id === '<repl>')) {\x0d\n    const parentPath = parent?.filename ?? process.cwd() + path.sep;\x0d\n    const pkg = readPackageScope(parentPath) || {};\x0d\n    if (pkg.data?.imports != null) {\x0d\n      try {\x0d\n        return finalizeEsmResolution(\x0d\n          packageImportsResolve(request\x2C pathToFileURL(parentPath)\x2C\x0d\n                                cjsConditions)\x2C parentPath\x2C request\x2C\x0d\n          pkg.path);\x0d\n      } catch (e) {\x0d\n        if (e.code === 'ERR_MODULE_NOT_FOUND')\x0d\n          throw createEsmNotFoundErr(request);\x0d\n        throw e;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Try module self resolution first\x0d\n  const parentPath = trySelfParentPath(parent);\x0d\n  const selfResolved = trySelf(parentPath\x2C request);\x0d\n  if (selfResolved) {\x0d\n    const cacheKey = request + '\\x00' +\x0d\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths\x2C '\\x00'));\x0d\n    Module._pathCache[cacheKey] = selfResolved;\x0d\n    return selfResolved;\x0d\n  }\x0d\n\x0d\n  // Look up the filename first\x2C since that's the cache key.\x0d\n  const filename = Module._findPath(request\x2C paths\x2C isMain\x2C false);\x0d\n  if (filename) return filename;\x0d\n  const requireStack = [];\x0d\n  for (let cursor = parent;\x0d\n    cursor;\x0d\n    cursor = moduleParentCache.get(cursor)) {\x0d\n    ArrayPrototypePush(requireStack\x2C cursor.filename || cursor.id);\x0d\n  }\x0d\n  let message = `Cannot find module '${request}'`;\x0d\n  if (requireStack.length > 0) {\x0d\n    message = message + '\\nRequire stack:\\n- ' +\x0d\n              ArrayPrototypeJoin(requireStack\x2C '\\n- ');\x0d\n  }\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  err.requireStack = requireStack;\x0d\n  throw err;\x0d\n};\x0d\n\x0d\nfunction finalizeEsmResolution(match\x2C request\x2C parentPath\x2C pkgPath) {\x0d\n  const { resolved\x2C exact } = match;\x0d\n  if (RegExpPrototypeExec(encodedSepRegEx\x2C resolved) !== null)\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved\x2C 'must not include encoded "/" or "\\\\" characters'\x2C parentPath);\x0d\n  const filename = fileURLToPath(resolved);\x0d\n  let actual = tryFile(filename);\x0d\n  if (!exact && !actual) {\x0d\n    const exts = ObjectKeys(Module._extensions);\x0d\n    actual = tryExtensions(filename\x2C exts\x2C false) ||\x0d\n      tryPackage(filename\x2C exts\x2C false\x2C request);\x0d\n  }\x0d\n  if (actual)\x0d\n    return actual;\x0d\n  const err = createEsmNotFoundErr(filename\x2C\x0d\n                                   path.resolve(pkgPath\x2C 'package.json'));\x0d\n  throw err;\x0d\n}\x0d\n\x0d\nfunction createEsmNotFoundErr(request\x2C path) {\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(`Cannot find module '${request}'`);\x0d\n  err.code = 'MODULE_NOT_FOUND';\x0d\n  if (path)\x0d\n    err.path = path;\x0d\n  // TODO(BridgeAR): Add the requireStack as well.\x0d\n  return err;\x0d\n}\x0d\n\x0d\n// Given a file name\x2C pass it to the proper extension handler.\x0d\nModule.prototype.load = function(filename) {\x0d\n  debug('load %j for module %j'\x2C filename\x2C this.id);\x0d\n\x0d\n  assert(!this.loaded);\x0d\n  this.filename = filename;\x0d\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\x0d\n\x0d\n  const extension = findLongestRegisteredExtension(filename);\x0d\n  // allow .mjs to be overridden\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.mjs') && !Module._extensions['.mjs'])\x0d\n    throw new ERR_REQUIRE_ESM(filename\x2C true);\x0d\n\x0d\n  Module._extensions[extension](this\x2C filename);\x0d\n  this.loaded = true;\x0d\n\x0d\n  const esmLoader = asyncESM.esmLoader;\x0d\n  // Create module entry at load time to snapshot exports correctly\x0d\n  const exports = this.exports;\x0d\n  // Preemptively cache\x0d\n  if ((module?.module === undefined ||\x0d\n       module.module.getStatus() < kEvaluated) &&\x0d\n      !esmLoader.cjsCache.has(this))\x0d\n    esmLoader.cjsCache.set(this\x2C exports);\x0d\n};\x0d\n\x0d\n// Loads a module at the given file path. Returns that module's\x0d\n// `exports` property.\x0d\n// Note: when using the experimental policy mechanism this function is overridden\x0d\nModule.prototype.require = function(id) {\x0d\n  validateString(id\x2C 'id');\x0d\n  if (id === '') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('id'\x2C id\x2C\x0d\n                                    'must be a non-empty string');\x0d\n  }\x0d\n  requireDepth++;\x0d\n  try {\x0d\n    return Module._load(id\x2C this\x2C /* isMain */ false);\x0d\n  } finally {\x0d\n    requireDepth--;\x0d\n  }\x0d\n};\x0d\n\x0d\n// Resolved path to process.argv[1] will be lazily placed here\x0d\n// (needed for setting breakpoint when called with --inspect-brk)\x0d\nlet resolvedArgv;\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nfunction wrapSafe(filename\x2C content\x2C cjsModuleInstance) {\x0d\n  if (patched) {\x0d\n    const wrapper = Module.wrap(content);\x0d\n    return vm.runInThisContext(wrapper\x2C {\x0d\n      filename\x2C\x0d\n      lineOffset: 0\x2C\x0d\n      displayErrors: true\x2C\x0d\n      importModuleDynamically: async (specifier\x2C _\x2C importAssertions) => {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C normalizeReferrerURL(filename)\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  }\x0d\n  try {\x0d\n    return vm.compileFunction(content\x2C [\x0d\n      'exports'\x2C\x0d\n      'require'\x2C\x0d\n      'module'\x2C\x0d\n      '__filename'\x2C\x0d\n      '__dirname'\x2C\x0d\n    ]\x2C {\x0d\n      filename\x2C\x0d\n      importModuleDynamically(specifier\x2C _\x2C importAssertions) {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C normalizeReferrerURL(filename)\x2C\x0d\n                             importAssertions);\x0d\n      }\x2C\x0d\n    });\x0d\n  } catch (err) {\x0d\n    if (process.mainModule === cjsModuleInstance)\x0d\n      enrichCJSError(err\x2C content);\x0d\n    throw err;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Run the file contents in the correct scope or sandbox. Expose\x0d\n// the correct helper variables (require\x2C module\x2C exports) to\x0d\n// the file.\x0d\n// Returns exception\x2C if any.\x0d\nModule.prototype._compile = function(content\x2C filename) {\x0d\n  let moduleURL;\x0d\n  let redirects;\x0d\n  const manifest = policy?.manifest;\x0d\n  if (manifest) {\x0d\n    moduleURL = pathToFileURL(filename);\x0d\n    redirects = manifest.getDependencyMapper(moduleURL);\x0d\n    manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  maybeCacheSourceMap(filename\x2C content\x2C this);\x0d\n  const compiledWrapper = wrapSafe(filename\x2C content\x2C this);\x0d\n\x0d\n  let inspectorWrapper = null;\x0d\n  if (getOptionValue('--inspect-brk') && process._eval == null) {\x0d\n    if (!resolvedArgv) {\x0d\n      // We enter the repl if we're not given a filename argument.\x0d\n      if (process.argv[1]) {\x0d\n        try {\x0d\n          resolvedArgv = Module._resolveFilename(process.argv[1]\x2C null\x2C false);\x0d\n        } catch {\x0d\n          // We only expect this codepath to be reached in the case of a\x0d\n          // preloaded module (it will fail earlier with the main entry)\x0d\n          assert(ArrayIsArray(getOptionValue('--require')));\x0d\n        }\x0d\n      } else {\x0d\n        resolvedArgv = 'repl';\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Set breakpoint on module start\x0d\n    if (resolvedArgv && !hasPausedEntry && filename === resolvedArgv) {\x0d\n      hasPausedEntry = true;\x0d\n      inspectorWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n    }\x0d\n  }\x0d\n  const dirname = path.dirname(filename);\x0d\n  const require = makeRequireFunction(this\x2C redirects);\x0d\n  let result;\x0d\n  const exports = this.exports;\x0d\n  const thisValue = exports;\x0d\n  const module = this;\x0d\n  if (requireDepth === 0) statCache = new SafeMap();\x0d\n  if (inspectorWrapper) {\x0d\n    result = inspectorWrapper(compiledWrapper\x2C thisValue\x2C exports\x2C\x0d\n                              require\x2C module\x2C filename\x2C dirname);\x0d\n  } else {\x0d\n    result = ReflectApply(compiledWrapper\x2C thisValue\x2C\x0d\n                          [exports\x2C require\x2C module\x2C filename\x2C dirname]);\x0d\n  }\x0d\n  hasLoadedAnyUserCJSModule = true;\x0d\n  if (requireDepth === 0) statCache = null;\x0d\n  return result;\x0d\n};\x0d\n\x0d\n// Native extension for .js\x0d\nModule._extensions['.js'] = function(module\x2C filename) {\x0d\n  // If already analyzed the source\x2C then it will be cached.\x0d\n  const cached = cjsParseCache.get(module);\x0d\n  let content;\x0d\n  if (cached?.source) {\x0d\n    content = cached.source;\x0d\n    cached.source = undefined;\x0d\n  } else {\x0d\n    content = fs.readFileSync(filename\x2C 'utf8');\x0d\n  }\x0d\n  if (StringPrototypeEndsWith(filename\x2C '.js')) {\x0d\n    const pkg = readPackageScope(filename);\x0d\n    // Function require shouldn't be used in ES modules.\x0d\n    if (pkg?.data?.type === 'module') {\x0d\n      const parent = moduleParentCache.get(module);\x0d\n      const parentPath = parent?.filename;\x0d\n      const packageJsonPath = path.resolve(pkg.path\x2C 'package.json');\x0d\n      const usesEsm = hasEsmSyntax(content);\x0d\n      const err = new ERR_REQUIRE_ESM(filename\x2C usesEsm\x2C parentPath\x2C\x0d\n                                      packageJsonPath);\x0d\n      // Attempt to reconstruct the parent require frame.\x0d\n      if (Module._cache[parentPath]) {\x0d\n        let parentSource;\x0d\n        try {\x0d\n          parentSource = fs.readFileSync(parentPath\x2C 'utf8');\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n        if (parentSource) {\x0d\n          const errLine = StringPrototypeSplit(\x0d\n            StringPrototypeSlice(err.stack\x2C StringPrototypeIndexOf(\x0d\n              err.stack\x2C '    at '))\x2C '\\n'\x2C 1)[0];\x0d\n          const { 1: line\x2C 2: col } =\x0d\n              RegExpPrototypeExec(/(\\d+):(\\d+)\\)/\x2C errLine) || [];\x0d\n          if (line && col) {\x0d\n            const srcLine = StringPrototypeSplit(parentSource\x2C '\\n')[line - 1];\x0d\n            const frame = `${parentPath}:${line}\\n${srcLine}\\n${\x0d\n              StringPrototypeRepeat(' '\x2C col - 1)}^\\n`;\x0d\n            setArrowMessage(err\x2C frame);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n      throw err;\x0d\n    }\x0d\n  }\x0d\n  module._compile(content\x2C filename);\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .json\x0d\nModule._extensions['.json'] = function(module\x2C filename) {\x0d\n  const content = fs.readFileSync(filename\x2C 'utf8');\x0d\n\x0d\n  if (policy?.manifest) {\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    setOwnProperty(module\x2C 'exports'\x2C JSONParse(stripBOM(content)));\x0d\n  } catch (err) {\x0d\n    err.message = filename + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Native extension for .node\x0d\nModule._extensions['.node'] = function(module\x2C filename) {\x0d\n  if (policy?.manifest) {\x0d\n    const content = fs.readFileSync(filename);\x0d\n    const moduleURL = pathToFileURL(filename);\x0d\n    policy.manifest.assertIntegrity(moduleURL\x2C content);\x0d\n  }\x0d\n  // Be aware this doesn't use `content`\x0d\n  return process.dlopen(module\x2C path.toNamespacedPath(filename));\x0d\n};\x0d\n\x0d\nfunction createRequireFromPath(filename) {\x0d\n  // Allow a directory to be passed as the filename\x0d\n  const trailingSlash =\x0d\n    StringPrototypeEndsWith(filename\x2C '/') ||\x0d\n    (isWindows && StringPrototypeEndsWith(filename\x2C '\\\\'));\x0d\n\x0d\n  const proxyPath = trailingSlash ?\x0d\n    path.join(filename\x2C 'noop.js') :\x0d\n    filename;\x0d\n\x0d\n  const m = new Module(proxyPath);\x0d\n  m.filename = proxyPath;\x0d\n\x0d\n  m.paths = Module._nodeModulePaths(m.path);\x0d\n  return makeRequireFunction(m\x2C null);\x0d\n}\x0d\n\x0d\nconst createRequireError = 'must be a file URL object\x2C file URL string\x2C or ' +\x0d\n  'absolute path string';\x0d\n\x0d\nfunction createRequire(filename) {\x0d\n  let filepath;\x0d\n\x0d\n  if (isURLInstance(filename) ||\x0d\n      (typeof filename === 'string' && !path.isAbsolute(filename))) {\x0d\n    try {\x0d\n      filepath = fileURLToPath(filename);\x0d\n    } catch {\x0d\n      throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C\x0d\n                                      createRequireError);\x0d\n    }\x0d\n  } else if (typeof filename !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_VALUE('filename'\x2C filename\x2C createRequireError);\x0d\n  } else {\x0d\n    filepath = filename;\x0d\n  }\x0d\n  return createRequireFromPath(filepath);\x0d\n}\x0d\n\x0d\nModule.createRequire = createRequire;\x0d\n\x0d\nModule._initPaths = function() {\x0d\n  const homeDir = isWindows ? process.env.USERPROFILE : safeGetenv('HOME');\x0d\n  const nodePath = isWindows ? process.env.NODE_PATH : safeGetenv('NODE_PATH');\x0d\n\x0d\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\x0d\n  // $PREFIX\\node.exe where $PREFIX is the root of the Node.js installation.\x0d\n  const prefixDir = isWindows ?\x0d\n    path.resolve(process.execPath\x2C '..') :\x0d\n    path.resolve(process.execPath\x2C '..'\x2C '..');\x0d\n\x0d\n  const paths = [path.resolve(prefixDir\x2C 'lib'\x2C 'node')];\x0d\n\x0d\n  if (homeDir) {\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_libraries'));\x0d\n    ArrayPrototypeUnshift(paths\x2C path.resolve(homeDir\x2C '.node_modules'));\x0d\n  }\x0d\n\x0d\n  if (nodePath) {\x0d\n    ArrayPrototypeUnshiftApply(paths\x2C ArrayPrototypeFilter(\x0d\n      StringPrototypeSplit(nodePath\x2C path.delimiter)\x2C\x0d\n      Boolean\x0d\n    ));\x0d\n  }\x0d\n\x0d\n  modulePaths = paths;\x0d\n\x0d\n  // Clone as a shallow copy\x2C for introspection.\x0d\n  Module.globalPaths = ArrayPrototypeSlice(modulePaths);\x0d\n};\x0d\n\x0d\nModule._preloadModules = function(requests) {\x0d\n  if (!ArrayIsArray(requests))\x0d\n    return;\x0d\n\x0d\n  isPreloading = true;\x0d\n\x0d\n  // Preloaded modules have a dummy parent module which is deemed to exist\x0d\n  // in the current working directory. This seeds the search path for\x0d\n  // preloaded modules.\x0d\n  const parent = new Module('internal/preload'\x2C null);\x0d\n  try {\x0d\n    parent.paths = Module._nodeModulePaths(process.cwd());\x0d\n  } catch (e) {\x0d\n    if (e.code !== 'ENOENT') {\x0d\n      isPreloading = false;\x0d\n      throw e;\x0d\n    }\x0d\n  }\x0d\n  for (let n = 0; n < requests.length; n++)\x0d\n    internalRequire(parent\x2C requests[n]);\x0d\n  isPreloading = false;\x0d\n};\x0d\n\x0d\nModule.syncBuiltinESMExports = function syncBuiltinESMExports() {\x0d\n  for (const mod of BuiltinModule.map.values()) {\x0d\n    if (mod.canBeRequiredByUsers &&\x0d\n        BuiltinModule.canBeRequiredWithoutScheme(mod.id)) {\x0d\n      mod.syncExports();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nModule.isBuiltin = function isBuiltin(moduleName) {\x0d\n  return allBuiltins.has(moduleName);\x0d\n};\x0d\n\x0d\n// Backwards compatibility\x0d\nModule.Module = Module;\x0d\n
code-source-info,0x2f2f3a339e6,106,0,44413,C0O0C4O44413,,
code-creation,Function,10,356234,0x2f2f3a35bae,2911, node:internal/modules/cjs/loader:1:1,0x2f2f3a33960,~
code-source-info,0x2f2f3a35bae
code-creation,Eval,10,357162,0x2f2f3a3a1e6,5, node:internal/modules/package_json_reader:1:1,0x2f2f3a3a040,~
script-source,107,node:internal/modules/package_json_reader,'use strict';\x0d\n\x0d\nconst { SafeMap } = primordials;\x0d\nconst { internalModuleReadJSON } = internalBinding('fs');\x0d\nconst { pathToFileURL } = require('url');\x0d\nconst { toNamespacedPath } = require('path');\x0d\n\x0d\nconst cache = new SafeMap();\x0d\n\x0d\nlet manifest;\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string} jsonPath\x0d\n */\x0d\nfunction read(jsonPath) {\x0d\n  if (cache.has(jsonPath)) {\x0d\n    return cache.get(jsonPath);\x0d\n  }\x0d\n\x0d\n  const { 0: string\x2C 1: containsKeys } = internalModuleReadJSON(\x0d\n    toNamespacedPath(jsonPath)\x0d\n  );\x0d\n  const result = { string\x2C containsKeys };\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (string !== undefined) {\x0d\n    if (manifest === undefined) {\x0d\n      manifest = getOptionValue('--experimental-policy') ?\x0d\n        require('internal/process/policy').manifest :\x0d\n        null;\x0d\n    }\x0d\n    if (manifest !== null) {\x0d\n      const jsonURL = pathToFileURL(jsonPath);\x0d\n      manifest.assertIntegrity(jsonURL\x2C string);\x0d\n    }\x0d\n  }\x0d\n  cache.set(jsonPath\x2C result);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = { read };\x0d\n
code-source-info,0x2f2f3a3a1e6,107,0,1024,C0O0C4O1024,,
code-creation,Function,10,357298,0x2f2f3a3a336,113, node:internal/modules/package_json_reader:1:1,0x2f2f3a3a160,~
code-source-info,0x2f2f3a3a336,107,0,1024,C0O0C29O25C34O86C37O86C42O59C48O136C54O136C59O118C65O182C71O182C76O161C82O216C84O216C89O216C91O238C92O238C94O996C101O1015C107O1011C112O1023,,
code-creation,Eval,10,358036,0x2f2f3a3ac06,5, node:internal/process/esm_loader:1:1,0x2f2f3a3aa00,~
script-source,108,node:internal/process/esm_loader,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { ESMLoader } = require('internal/modules/esm/loader');\x0d\nconst {\x0d\n  hasUncaughtExceptionCaptureCallback\x2C\x0d\n} = require('internal/process/execution');\x0d\nconst { pathToFileURL } = require('internal/url');\x0d\nconst {\x0d\n  getModuleFromWrap\x2C\x0d\n} = require('internal/vm/module');\x0d\n\x0d\nexports.initializeImportMetaObject = function(wrap\x2C meta) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { initializeImportMeta } = callbackMap.get(wrap);\x0d\n    if (initializeImportMeta !== undefined) {\x0d\n      initializeImportMeta(meta\x2C getModuleFromWrap(wrap) || wrap);\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nexports.importModuleDynamicallyCallback =\x0d\nasync function importModuleDynamicallyCallback(wrap\x2C specifier\x2C assertions) {\x0d\n  const { callbackMap } = internalBinding('module_wrap');\x0d\n  if (callbackMap.has(wrap)) {\x0d\n    const { importModuleDynamically } = callbackMap.get(wrap);\x0d\n    if (importModuleDynamically !== undefined) {\x0d\n      return importModuleDynamically(\x0d\n        specifier\x2C getModuleFromWrap(wrap) || wrap\x2C assertions);\x0d\n    }\x0d\n  }\x0d\n  throw new ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING();\x0d\n};\x0d\n\x0d\nconst esmLoader = new ESMLoader();\x0d\nexports.esmLoader = esmLoader;\x0d\n\x0d\n// Module.runMain() causes loadESM() to re-run (which it should do); however\x2C this should NOT cause\x0d\n// ESM to be re-initialised; doing so causes duplicate custom loaders to be added to the public\x0d\n// esmLoader.\x0d\nlet isESMInitialized = false;\x0d\n\x0d\n/**\x0d\n * Causes side-effects: user-defined loader hooks are added to esmLoader.\x0d\n * @returns {void}\x0d\n */\x0d\nasync function initializeLoader() {\x0d\n  if (isESMInitialized) { return; }\x0d\n\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  const customLoaders = getOptionValue('--experimental-loader');\x0d\n\x0d\n  if (customLoaders.length === 0) return;\x0d\n\x0d\n  let cwd;\x0d\n  try {\x0d\n    cwd = process.cwd() + '/';\x0d\n  } catch {\x0d\n    cwd = 'file:///';\x0d\n  }\x0d\n\x0d\n  // A separate loader instance is necessary to avoid cross-contamination\x0d\n  // between internal Node.js and userland. For example\x2C a module with internal\x0d\n  // state (such as a counter) should be independent.\x0d\n  const internalEsmLoader = new ESMLoader();\x0d\n\x0d\n  // Importation must be handled by internal loader to avoid poluting userland\x0d\n  const keyedExportsList = await internalEsmLoader.import(\x0d\n    customLoaders\x2C\x0d\n    pathToFileURL(cwd).href\x2C\x0d\n    ObjectCreate(null)\x2C\x0d\n  );\x0d\n\x0d\n  // Hooks must then be added to external/public loader\x0d\n  // (so they're triggered in userland)\x0d\n  await esmLoader.addCustomLoaders(keyedExportsList);\x0d\n\x0d\n  isESMInitialized = true;\x0d\n}\x0d\n\x0d\nexports.loadESM = async function loadESM(callback) {\x0d\n  try {\x0d\n    await initializeLoader();\x0d\n    await callback(esmLoader);\x0d\n  } catch (err) {\x0d\n    if (hasUncaughtExceptionCaptureCallback()) {\x0d\n      process._fatalException(err);\x0d\n      return;\x0d\n    }\x0d\n    internalBinding('errors').triggerUncaughtException(\x0d\n      err\x2C\x0d\n      true /* fromPromise */\x0d\n    );\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x2f2f3a3ac06,108,0,3087,C0O0C4O3087,,
code-creation,Function,10,358311,0x2f2f3a3aea6,188, node:internal/process/esm_loader:1:1,0x2f2f3a3ab80,~
code-source-info,0x2f2f3a3aea6,108,0,3087,C0O0C47O28C53O119C59O119C64O145C69O74C75O176C81O176C86O162C92O270C98O270C103O228C109O336C115O336C120O318C126O397C132O397C137O373C143O431C147O466C151O777C155O817C159O1300C162O1300C167O1300C169O1318C171O1336C175O1588C176O1588C178O2717C182O2733C187O3086,,
code-creation,Eval,10,359925,0x2f2f3a3c43e,5, node:internal/modules/esm/loader:1:1,0x2f2f3a3bf80,~
script-source,109,node:internal/modules/esm/loader,'use strict';\x0d\n\x0d\n// This is needed to avoid cycles in esm/resolve <-> cjs/loader\x0d\nrequire('internal/modules/cjs/loader');\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafePromiseAll\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\nconst { MessageChannel } = require('internal/worker/io');\x0d\n\x0d\nconst {\x0d\n  ERR_LOADER_CHAIN_INCOMPLETE\x2C\x0d\n  ERR_INTERNAL_ASSERTION\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x2C\x0d\n  ERR_INVALID_RETURN_VALUE\x2C\x0d\n  ERR_UNKNOWN_MODULE_FORMAT\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { pathToFileURL\x2C isURLInstance\x2C URL } = require('internal/url');\x0d\nconst { emitExperimentalWarning } = require('internal/util');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst ModuleMap = require('internal/modules/esm/module_map');\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\n\x0d\nconst {\x0d\n  defaultResolve\x2C\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n} = require('internal/modules/esm/resolve');\x0d\nconst {\x0d\n  initializeImportMeta\x0d\n} = require('internal/modules/esm/initialize_import_meta');\x0d\nconst { defaultLoad } = require('internal/modules/esm/load');\x0d\nconst { translators } = require(\x0d\n  'internal/modules/esm/translators');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\n/**\x0d\n * @typedef {object} ExportedHooks\x0d\n * @property {Function} globalPreload\x0d\n * @property {Function} resolve\x0d\n * @property {Function} load\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {Record<string\x2C any>} ModuleExports\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {object} KeyedExports\x0d\n * @property {ModuleExports} exports\x0d\n * @property {URL['href']} url\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {object} KeyedHook\x0d\n * @property {Function} fn\x0d\n * @property {URL['href']} url\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {'builtin'|'commonjs'|'json'|'module'|'wasm'} ModuleFormat\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {ArrayBuffer|TypedArray|string} ModuleSource\x0d\n */\x0d\n\x0d\n// [2] `validate...()`s throw the wrong error\x0d\n\x0d\nlet emittedSpecifierResolutionWarning = false;\x0d\n\x0d\n/**\x0d\n * A utility function to iterate through a hook chain\x2C track advancement in the\x0d\n * chain\x2C and generate and supply the `next<HookName>` argument to the custom\x0d\n * hook.\x0d\n * @param {KeyedHook[]} chain The whole hook chain.\x0d\n * @param {object} meta Properties that change as the current hook advances\x0d\n * along the chain.\x0d\n * @param {boolean} meta.chainFinished Whether the end of the chain has been\x0d\n * reached AND invoked.\x0d\n * @param {string} meta.hookErrIdentifier A user-facing identifier to help\x0d\n *  pinpoint where an error occurred. Ex "file:///foo.mjs 'resolve'".\x0d\n * @param {number} meta.hookIndex A non-negative integer tracking the current\x0d\n * position in the hook chain.\x0d\n * @param {string} meta.hookName The kind of hook the chain is (ex 'resolve')\x0d\n * @param {boolean} meta.shortCircuited Whether a hook signaled a short-circuit.\x0d\n * @param {(hookErrIdentifier\x2C hookArgs) => void} validate A wrapper function\x0d\n *  containing all validation of a custom loader hook's intermediary output. Any\x0d\n *  validation within MUST throw.\x0d\n * @returns {function next<HookName>(...hookArgs)} The next hook in the chain.\x0d\n */\x0d\nfunction nextHookFactory(chain\x2C meta\x2C { validateArgs\x2C validateOutput }) {\x0d\n  // First\x2C prepare the current\x0d\n  const { hookName } = meta;\x0d\n  const {\x0d\n    fn: hook\x2C\x0d\n    url: hookFilePath\x2C\x0d\n  } = chain[meta.hookIndex];\x0d\n\x0d\n  // ex 'nextResolve'\x0d\n  const nextHookName = `next${\x0d\n    StringPrototypeToUpperCase(hookName[0]) +\x0d\n    StringPrototypeSlice(hookName\x2C 1)\x0d\n  }`;\x0d\n\x0d\n  // When hookIndex is 0\x2C it's reached the default\x2C which does not call next()\x0d\n  // so feed it a noop that blows up if called\x2C so the problem is obvious.\x0d\n  const generatedHookIndex = meta.hookIndex;\x0d\n  let nextNextHook;\x0d\n  if (meta.hookIndex > 0) {\x0d\n    // Now\x2C prepare the next: decrement the pointer so the next call to the\x0d\n    // factory generates the next link in the chain.\x0d\n    meta.hookIndex--;\x0d\n\x0d\n    nextNextHook = nextHookFactory(chain\x2C meta\x2C { validateArgs\x2C validateOutput });\x0d\n  } else {\x0d\n    // eslint-disable-next-line func-name-matching\x0d\n    nextNextHook = function chainAdvancedTooFar() {\x0d\n      throw new ERR_INTERNAL_ASSERTION(\x0d\n        `ESM custom loader '${hookName}' advanced beyond the end of the chain.`\x0d\n      );\x0d\n    };\x0d\n  }\x0d\n\x0d\n  return ObjectDefineProperty(\x0d\n    async (arg0 = undefined\x2C context) => {\x0d\n      // Update only when hook is invoked to avoid fingering the wrong filePath\x0d\n      meta.hookErrIdentifier = `${hookFilePath} '${hookName}'`;\x0d\n\x0d\n      validateArgs(`${meta.hookErrIdentifier} hook's ${nextHookName}()`\x2C arg0\x2C context);\x0d\n\x0d\n      const outputErrIdentifier = `${chain[generatedHookIndex].url} '${hookName}' hook's ${nextHookName}()`;\x0d\n\x0d\n      // Set when next<HookName> is actually called\x2C not just generated.\x0d\n      if (generatedHookIndex === 0) { meta.chainFinished = true; }\x0d\n\x0d\n      if (context) { // `context` has already been validated\x2C so no fancy check needed.\x0d\n        ObjectAssign(meta.context\x2C context);\x0d\n      }\x0d\n\x0d\n      const output = await hook(arg0\x2C meta.context\x2C nextNextHook);\x0d\n\x0d\n      validateOutput(outputErrIdentifier\x2C output);\x0d\n\x0d\n      if (output?.shortCircuit === true) { meta.shortCircuited = true; }\x0d\n      return output;\x0d\n\x0d\n    }\x2C\x0d\n    'name'\x2C\x0d\n    { __proto__: null\x2C value: nextHookName }\x2C\x0d\n  );\x0d\n}\x0d\n\x0d\n/**\x0d\n * An ESMLoader instance is used as the main entry point for loading ES modules.\x0d\n * Currently\x2C this is a singleton -- there is only one used for loading\x0d\n * the main module and everything in its dependency graph.\x0d\n */\x0d\nclass ESMLoader {\x0d\n  #hooks = {\x0d\n    /**\x0d\n     * Prior to ESM loading. These are called once before any modules are started.\x0d\n     * @private\x0d\n     * @property {KeyedHook[]} globalPreload Last-in-first-out list of preload hooks.\x0d\n     */\x0d\n    globalPreload: []\x2C\x0d\n\x0d\n    /**\x0d\n     * Phase 2 of 2 in ESM loading (phase 1 is below).\x0d\n     * @private\x0d\n     * @property {KeyedHook[]} load Last-in-first-out collection of loader hooks.\x0d\n     */\x0d\n    load: [\x0d\n      {\x0d\n        fn: defaultLoad\x2C\x0d\n        url: 'node:internal/modules/esm/load'\x2C\x0d\n      }\x2C\x0d\n    ]\x2C\x0d\n\x0d\n    /**\x0d\n     * Phase 1 of 2 in ESM loading.\x0d\n     * @private\x0d\n     * @property {KeyedHook[]} resolve Last-in-first-out collection of resolve hooks.\x0d\n     */\x0d\n    resolve: [\x0d\n      {\x0d\n        fn: defaultResolve\x2C\x0d\n        url: 'node:internal/modules/esm/resolve'\x2C\x0d\n      }\x2C\x0d\n    ]\x2C\x0d\n  };\x0d\n\x0d\n  #importMetaInitializer = initializeImportMeta;\x0d\n\x0d\n  /**\x0d\n   * Map of already-loaded CJS modules to use\x0d\n   */\x0d\n  cjsCache = new SafeWeakMap();\x0d\n\x0d\n  /**\x0d\n   * The index for assigning unique URLs to anonymous module evaluation\x0d\n   */\x0d\n  evalIndex = 0;\x0d\n\x0d\n  /**\x0d\n   * Registry of loaded modules\x2C akin to `require.cache`\x0d\n   */\x0d\n  moduleMap = new ModuleMap();\x0d\n\x0d\n  /**\x0d\n   * Methods which translate input code or other information into ES modules\x0d\n   */\x0d\n  translators = translators;\x0d\n\x0d\n  constructor() {\x0d\n    if (getOptionValue('--experimental-loader').length > 0) {\x0d\n      emitExperimentalWarning('Custom ESM Loaders');\x0d\n    }\x0d\n    if (getOptionValue('--experimental-network-imports')) {\x0d\n      emitExperimentalWarning('Network Imports');\x0d\n    }\x0d\n    if (\x0d\n      !emittedSpecifierResolutionWarning &&\x0d\n      getOptionValue('--experimental-specifier-resolution') === 'node'\x0d\n    ) {\x0d\n      process.emitWarning(\x0d\n        'The Node.js specifier resolution flag is experimental. It could change or be removed at any time.'\x2C\x0d\n        'ExperimentalWarning'\x0d\n      );\x0d\n      emittedSpecifierResolutionWarning = true;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   *\x0d\n   * @param {ModuleExports} exports\x0d\n   * @returns {ExportedHooks}\x0d\n   */\x0d\n  static pluckHooks({\x0d\n    globalPreload\x2C\x0d\n    resolve\x2C\x0d\n    load\x2C\x0d\n    // obsolete hooks:\x0d\n    dynamicInstantiate\x2C\x0d\n    getFormat\x2C\x0d\n    getGlobalPreloadCode\x2C\x0d\n    getSource\x2C\x0d\n    transformSource\x2C\x0d\n  }) {\x0d\n    const obsoleteHooks = [];\x0d\n    const acceptedHooks = ObjectCreate(null);\x0d\n\x0d\n    if (getGlobalPreloadCode) {\x0d\n      globalPreload ??= getGlobalPreloadCode;\x0d\n\x0d\n      process.emitWarning(\x0d\n        'Loader hook "getGlobalPreloadCode" has been renamed to "globalPreload"'\x0d\n      );\x0d\n    }\x0d\n    if (dynamicInstantiate) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'dynamicInstantiate'\x0d\n    );\x0d\n    if (getFormat) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getFormat'\x2C\x0d\n    );\x0d\n    if (getSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'getSource'\x2C\x0d\n    );\x0d\n    if (transformSource) ArrayPrototypePush(\x0d\n      obsoleteHooks\x2C\x0d\n      'transformSource'\x2C\x0d\n    );\x0d\n\x0d\n    if (obsoleteHooks.length) process.emitWarning(\x0d\n      `Obsolete loader hook(s) supplied and will be ignored: ${\x0d\n        ArrayPrototypeJoin(obsoleteHooks\x2C '\x2C ')\x0d\n      }`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n    );\x0d\n\x0d\n    if (globalPreload) {\x0d\n      acceptedHooks.globalPreload = globalPreload;\x0d\n    }\x0d\n    if (resolve) {\x0d\n      acceptedHooks.resolve = resolve;\x0d\n    }\x0d\n    if (load) {\x0d\n      acceptedHooks.load = load;\x0d\n    }\x0d\n\x0d\n    return acceptedHooks;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Collect custom/user-defined hook(s). After all hooks have been collected\x2C\x0d\n   * calls global preload hook(s).\x0d\n   * @param {KeyedExports} customLoaders\x0d\n   *  A list of exports from user-defined loaders (as returned by\x0d\n   *  ESMLoader.import()).\x0d\n   */\x0d\n  addCustomLoaders(\x0d\n    customLoaders = []\x2C\x0d\n  ) {\x0d\n    for (let i = 0; i < customLoaders.length; i++) {\x0d\n      const {\x0d\n        exports\x2C\x0d\n        url\x2C\x0d\n      } = customLoaders[i];\x0d\n      const {\x0d\n        globalPreload\x2C\x0d\n        resolve\x2C\x0d\n        load\x2C\x0d\n      } = ESMLoader.pluckHooks(exports);\x0d\n\x0d\n      if (globalPreload) {\x0d\n        ArrayPrototypePush(\x0d\n          this.#hooks.globalPreload\x2C\x0d\n          {\x0d\n            fn: globalPreload\x2C\x0d\n            url\x2C\x0d\n          }\x2C\x0d\n        );\x0d\n      }\x0d\n      if (resolve) {\x0d\n        ArrayPrototypePush(\x0d\n          this.#hooks.resolve\x2C\x0d\n          {\x0d\n            fn: resolve\x2C\x0d\n            url\x2C\x0d\n          }\x2C\x0d\n        );\x0d\n      }\x0d\n      if (load) {\x0d\n        ArrayPrototypePush(\x0d\n          this.#hooks.load\x2C\x0d\n          {\x0d\n            fn: load\x2C\x0d\n            url\x2C\x0d\n          }\x2C\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n\x0d\n    this.preload();\x0d\n  }\x0d\n\x0d\n  async eval(\x0d\n    source\x2C\x0d\n    url = pathToFileURL(`${process.cwd()}/[eval${++this.evalIndex}]`).href\x0d\n  ) {\x0d\n    const evalInstance = (url) => {\x0d\n      const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n      const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n      callbackMap.set(module\x2C {\x0d\n        importModuleDynamically: (specifier\x2C { url }\x2C importAssertions) => {\x0d\n          return this.import(specifier\x2C url\x2C importAssertions);\x0d\n        }\x0d\n      });\x0d\n\x0d\n      return module;\x0d\n    };\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C url\x2C undefined\x2C evalInstance\x2C false\x2C false);\x0d\n    this.moduleMap.set(url\x2C undefined\x2C job);\x0d\n    const { module } = await job.run();\x0d\n\x0d\n    return {\x0d\n      namespace: module.getNamespace()\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Get a (possibly still pending) module job from the cache\x2C\x0d\n   * or create one and return its Promise.\x0d\n   * @param {string} specifier The string after `from` in an `import` statement\x2C\x0d\n   *                           or the first parameter of an `import()`\x0d\n   *                           expression\x0d\n   * @param {string | undefined} parentURL The URL of the module importing this\x0d\n   *                                     one\x2C unless this is the Node.js entry\x0d\n   *                                     point.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  async getModuleJob(specifier\x2C parentURL\x2C importAssertions) {\x0d\n    let importAssertionsForResolve;\x0d\n\x0d\n    // By default\x2C `this.#hooks.load` contains just the Node default load hook\x0d\n    if (this.#hooks.load.length !== 1) {\x0d\n      // We can skip cloning if there are no user-provided loaders because\x0d\n      // the Node.js default resolve hook does not use import assertions.\x0d\n      importAssertionsForResolve = {\x0d\n        __proto__: null\x2C\x0d\n        ...importAssertions\x2C\x0d\n      };\x0d\n    }\x0d\n\x0d\n    const { format\x2C url } =\x0d\n      await this.resolve(specifier\x2C parentURL\x2C importAssertionsForResolve);\x0d\n\x0d\n    let job = this.moduleMap.get(url\x2C importAssertions.type);\x0d\n\x0d\n    // CommonJS will set functions for lazy job evaluation.\x0d\n    if (typeof job === 'function') {\x0d\n      this.moduleMap.set(url\x2C undefined\x2C job = job());\x0d\n    }\x0d\n\x0d\n    if (job === undefined) {\x0d\n      job = this.#createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format);\x0d\n    }\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Create and cache an object representing a loaded module.\x0d\n   * @param {string} url The absolute URL that was resolved for this module\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @param {string} [parentURL] The absolute URL of the module importing this\x0d\n   *                             one\x2C unless this is the Node.js entry point\x0d\n   * @param {string} [format] The format hint possibly returned by the\x0d\n   *                          `resolve` hook\x0d\n   * @returns {Promise<ModuleJob>} The (possibly pending) module job\x0d\n   */\x0d\n  #createModuleJob(url\x2C importAssertions\x2C parentURL\x2C format) {\x0d\n    const moduleProvider = async (url\x2C isMain) => {\x0d\n      const {\x0d\n        format: finalFormat\x2C\x0d\n        responseURL\x2C\x0d\n        source\x2C\x0d\n      } = await this.load(url\x2C {\x0d\n        format\x2C\x0d\n        importAssertions\x2C\x0d\n      });\x0d\n\x0d\n      const translator = translators.get(finalFormat);\x0d\n\x0d\n      if (!translator) {\x0d\n        throw new ERR_UNKNOWN_MODULE_FORMAT(finalFormat\x2C responseURL);\x0d\n      }\x0d\n\x0d\n      return FunctionPrototypeCall(translator\x2C this\x2C responseURL\x2C source\x2C isMain);\x0d\n    };\x0d\n\x0d\n    const inspectBrk = (\x0d\n      parentURL === undefined &&\x0d\n      getOptionValue('--inspect-brk')\x0d\n    );\x0d\n\x0d\n    if (process.env.WATCH_REPORT_DEPENDENCIES && process.send) {\x0d\n      process.send({ 'watch:import': url });\x0d\n    }\x0d\n\x0d\n    const job = new ModuleJob(\x0d\n      this\x2C\x0d\n      url\x2C\x0d\n      importAssertions\x2C\x0d\n      moduleProvider\x2C\x0d\n      parentURL === undefined\x2C\x0d\n      inspectBrk\x0d\n    );\x0d\n\x0d\n    this.moduleMap.set(url\x2C importAssertions.type\x2C job);\x0d\n\x0d\n    return job;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * This method is usually called indirectly as part of the loading processes.\x0d\n   * Internally\x2C it is used directly to add loaders. Use directly with caution.\x0d\n   *\x0d\n   * This method must NOT be renamed: it functions as a dynamic import on a\x0d\n   * loader module.\x0d\n   *\x0d\n   * @param {string | string[]} specifiers Path(s) to the module.\x0d\n   * @param {string} parentURL Path of the parent importing the module.\x0d\n   * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n   *                                                  module import.\x0d\n   * @returns {Promise<ExportedHooks | KeyedExports[]>}\x0d\n   *  A collection of module export(s) or a list of collections of module\x0d\n   *  export(s).\x0d\n   */\x0d\n  async import(specifiers\x2C parentURL\x2C importAssertions) {\x0d\n    // For loaders\x2C `import` is passed multiple things to process\x2C it returns a\x0d\n    // list pairing the url and exports collected. This is especially useful for\x0d\n    // error messaging\x2C to identity from where an export came. But\x2C in most\x0d\n    // cases\x2C only a single url is being "imported" (ex `import()`)\x2C so there is\x0d\n    // only 1 possible url from which the exports were collected and it is\x0d\n    // already known to the caller. Nesting that in a list would only ever\x0d\n    // create redundant work for the caller\x2C so it is later popped off the\x0d\n    // internal list.\x0d\n    const wasArr = ArrayIsArray(specifiers);\x0d\n    if (!wasArr) { specifiers = [specifiers]; }\x0d\n\x0d\n    const count = specifiers.length;\x0d\n    const jobs = new Array(count);\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      jobs[i] = this.getModuleJob(specifiers[i]\x2C parentURL\x2C importAssertions)\x0d\n        .then((job) => job.run())\x0d\n        .then(({ module }) => module.getNamespace());\x0d\n    }\x0d\n\x0d\n    const namespaces = await SafePromiseAll(jobs);\x0d\n\x0d\n    if (!wasArr) { return namespaces[0]; } // We can skip the pairing below\x0d\n\x0d\n    for (let i = 0; i < count; i++) {\x0d\n      namespaces[i] = {\x0d\n        __proto__: null\x2C\x0d\n        url: specifiers[i]\x2C\x0d\n        exports: namespaces[i]\x2C\x0d\n      };\x0d\n    }\x0d\n\x0d\n    return namespaces;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Provide source that is understood by one of Node's translators.\x0d\n   *\x0d\n   * Internally\x2C this behaves like a backwards iterator\x2C wherein the stack of\x0d\n   * hooks starts at the top and each call to `nextLoad()` moves down 1 step\x0d\n   * until it reaches the bottom or short-circuits.\x0d\n   *\x0d\n   * @param {URL['href']} url The URL/path of the module to be loaded\x0d\n   * @param {object} context Metadata about the module\x0d\n   * @returns {{ format: ModuleFormat\x2C source: ModuleSource }}\x0d\n   */\x0d\n  async load(url\x2C context = {}) {\x0d\n    const chain = this.#hooks.load;\x0d\n    const meta = {\x0d\n      chainFinished: null\x2C\x0d\n      context\x2C\x0d\n      hookErrIdentifier: ''\x2C\x0d\n      hookIndex: chain.length - 1\x2C\x0d\n      hookName: 'load'\x2C\x0d\n      shortCircuited: false\x2C\x0d\n    };\x0d\n\x0d\n    const validateArgs = (hookErrIdentifier\x2C nextUrl\x2C ctx) => {\x0d\n      if (typeof nextUrl !== 'string') {\x0d\n        // non-strings can be coerced to a url string\x0d\n        // validateString() throws a less-specific error\x0d\n        throw new ERR_INVALID_ARG_TYPE(\x0d\n          `${hookErrIdentifier} url`\x2C\x0d\n          'a url string'\x2C\x0d\n          nextUrl\x2C\x0d\n        );\x0d\n      }\x0d\n\x0d\n      // Try to avoid expensive URL instantiation for known-good urls\x0d\n      if (!this.moduleMap.has(nextUrl)) {\x0d\n        try {\x0d\n          new URL(nextUrl);\x0d\n        } catch {\x0d\n          throw new ERR_INVALID_ARG_VALUE(\x0d\n            `${hookErrIdentifier} url`\x2C\x0d\n            nextUrl\x2C\x0d\n            'should be a url string'\x2C\x0d\n          );\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (ctx) validateObject(ctx\x2C `${hookErrIdentifier} context`);\x0d\n    };\x0d\n    const validateOutput = (hookErrIdentifier\x2C output) => {\x0d\n      if (typeof output !== 'object' || output === null) { // [2]\x0d\n        throw new ERR_INVALID_RETURN_VALUE(\x0d\n          'an object'\x2C\x0d\n          hookErrIdentifier\x2C\x0d\n          output\x2C\x0d\n        );\x0d\n      }\x0d\n    };\x0d\n\x0d\n    const nextLoad = nextHookFactory(chain\x2C meta\x2C { validateArgs\x2C validateOutput });\x0d\n\x0d\n    const loaded = await nextLoad(url\x2C context);\x0d\n    const { hookErrIdentifier } = meta; // Retrieve the value after all settled\x0d\n\x0d\n    validateOutput(hookErrIdentifier\x2C loaded);\x0d\n\x0d\n    if (loaded?.shortCircuit === true) { meta.shortCircuited = true; }\x0d\n\x0d\n    if (!meta.chainFinished && !meta.shortCircuited) {\x0d\n      throw new ERR_LOADER_CHAIN_INCOMPLETE(hookErrIdentifier);\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      format\x2C\x0d\n      source\x2C\x0d\n    } = loaded;\x0d\n    let responseURL = loaded.responseURL;\x0d\n\x0d\n    if (responseURL === undefined) {\x0d\n      responseURL = url;\x0d\n    }\x0d\n\x0d\n    let responseURLObj;\x0d\n    if (typeof responseURL === 'string') {\x0d\n      try {\x0d\n        responseURLObj = new URL(responseURL);\x0d\n      } catch {\x0d\n        // responseURLObj not defined will throw in next branch.\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (responseURLObj?.href !== responseURL) {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'undefined or a fully resolved URL string'\x2C\x0d\n        hookErrIdentifier\x2C\x0d\n        'responseURL'\x2C\x0d\n        responseURL\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (format == null) {\x0d\n      const dataUrl = RegExpPrototypeExec(\x0d\n        /^data:([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n\x0d\n      throw new ERR_UNKNOWN_MODULE_FORMAT(\x0d\n        dataUrl ? dataUrl[1] : format\x2C\x0d\n        url);\x0d\n    }\x0d\n\x0d\n    if (typeof format !== 'string') { // [2]\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'a string'\x2C\x0d\n        hookErrIdentifier\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (\x0d\n      source != null &&\x0d\n      typeof source !== 'string' &&\x0d\n      !isAnyArrayBuffer(source) &&\x0d\n      !isArrayBufferView(source)\x0d\n    ) {\x0d\n      throw ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'a string\x2C an ArrayBuffer\x2C or a TypedArray'\x2C\x0d\n        hookErrIdentifier\x2C\x0d\n        'source'\x2C\x0d\n        source\x0d\n      );\x0d\n    }\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      responseURL\x2C\x0d\n      source\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  preload() {\x0d\n    for (let i = this.#hooks.globalPreload.length - 1; i >= 0; i--) {\x0d\n      const channel = new MessageChannel();\x0d\n      const {\x0d\n        port1: insidePreload\x2C\x0d\n        port2: insideLoader\x2C\x0d\n      } = channel;\x0d\n\x0d\n      insidePreload.unref();\x0d\n      insideLoader.unref();\x0d\n\x0d\n      const {\x0d\n        fn: preload\x2C\x0d\n        url: specifier\x2C\x0d\n      } = this.#hooks.globalPreload[i];\x0d\n\x0d\n      const preloaded = preload({\x0d\n        port: insideLoader\x2C\x0d\n      });\x0d\n\x0d\n      if (preloaded == null) { return; }\x0d\n\x0d\n      const hookErrIdentifier = `${specifier} globalPreload`;\x0d\n\x0d\n      if (typeof preloaded !== 'string') { // [2]\x0d\n        throw new ERR_INVALID_RETURN_VALUE(\x0d\n          'a string'\x2C\x0d\n          hookErrIdentifier\x2C\x0d\n          preload\x2C\x0d\n        );\x0d\n      }\x0d\n      const { compileFunction } = require('vm');\x0d\n      const preloadInit = compileFunction(\x0d\n        preloaded\x2C\x0d\n        ['getBuiltin'\x2C 'port'\x2C 'setImportMetaCallback']\x2C\x0d\n        {\x0d\n          filename: '<preload>'\x2C\x0d\n        }\x0d\n      );\x0d\n      const { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\n      // We only allow replacing the importMetaInitializer during preload\x2C\x0d\n      // after preload is finished\x2C we disable the ability to replace it\x0d\n      //\x0d\n      // This exposes accidentally setting the initializer too late by\x0d\n      // throwing an error.\x0d\n      let finished = false;\x0d\n      let replacedImportMetaInitializer = false;\x0d\n      let next = this.#importMetaInitializer;\x0d\n      try {\x0d\n        // Calls the compiled preload source text gotten from the hook\x0d\n        // Since the parameters are named we use positional parameters\x0d\n        // see compileFunction above to cross reference the names\x0d\n        FunctionPrototypeCall(\x0d\n          preloadInit\x2C\x0d\n          globalThis\x2C\x0d\n          // Param getBuiltin\x0d\n          (builtinName) => {\x0d\n            if (BuiltinModule.canBeRequiredByUsers(builtinName) &&\x0d\n                BuiltinModule.canBeRequiredWithoutScheme(builtinName)) {\x0d\n              return require(builtinName);\x0d\n            }\x0d\n            throw new ERR_INVALID_ARG_VALUE('builtinName'\x2C builtinName);\x0d\n          }\x2C\x0d\n          // Param port\x0d\n          insidePreload\x2C\x0d\n          // Param setImportMetaCallback\x0d\n          (fn) => {\x0d\n            if (finished || typeof fn !== 'function') {\x0d\n              throw new ERR_INVALID_ARG_TYPE('fn'\x2C fn);\x0d\n            }\x0d\n            replacedImportMetaInitializer = true;\x0d\n            const parent = next;\x0d\n            next = (meta\x2C context) => {\x0d\n              return fn(meta\x2C context\x2C parent);\x0d\n            };\x0d\n          });\x0d\n      } finally {\x0d\n        finished = true;\x0d\n        if (replacedImportMetaInitializer) {\x0d\n          this.#importMetaInitializer = next;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  importMetaInitialize(meta\x2C context) {\x0d\n    this.#importMetaInitializer(meta\x2C context);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * Resolve the location of the module.\x0d\n   *\x0d\n   * Internally\x2C this behaves like a backwards iterator\x2C wherein the stack of\x0d\n   * hooks starts at the top and each call to `nextResolve()` moves down 1 step\x0d\n   * until it reaches the bottom or short-circuits.\x0d\n   *\x0d\n   * @param {string} originalSpecifier The specified URL path of the module to\x0d\n   *                                   be resolved.\x0d\n   * @param {string} [parentURL] The URL path of the module's parent.\x0d\n   * @param {ImportAssertions} [importAssertions] Assertions from the import\x0d\n   *                                              statement or expression.\x0d\n   * @returns {{ format: string\x2C url: URL['href'] }}\x0d\n   */\x0d\n  async resolve(\x0d\n    originalSpecifier\x2C\x0d\n    parentURL\x2C\x0d\n    importAssertions = ObjectCreate(null)\x2C\x0d\n  ) {\x0d\n    const isMain = parentURL === undefined;\x0d\n\x0d\n    if (\x0d\n      !isMain &&\x0d\n      typeof parentURL !== 'string' &&\x0d\n      !isURLInstance(parentURL)\x0d\n    ) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'parentURL'\x2C\x0d\n        ['string'\x2C 'URL']\x2C\x0d\n        parentURL\x2C\x0d\n      );\x0d\n    }\x0d\n    const chain = this.#hooks.resolve;\x0d\n    const context = {\x0d\n      conditions: DEFAULT_CONDITIONS\x2C\x0d\n      importAssertions\x2C\x0d\n      parentURL\x2C\x0d\n    };\x0d\n    const meta = {\x0d\n      chainFinished: null\x2C\x0d\n      context\x2C\x0d\n      hookErrIdentifier: ''\x2C\x0d\n      hookIndex: chain.length - 1\x2C\x0d\n      hookName: 'resolve'\x2C\x0d\n      shortCircuited: false\x2C\x0d\n    };\x0d\n\x0d\n    const validateArgs = (hookErrIdentifier\x2C suppliedSpecifier\x2C ctx) => {\x0d\n      validateString(\x0d\n        suppliedSpecifier\x2C\x0d\n        `${hookErrIdentifier} specifier`\x2C\x0d\n      ); // non-strings can be coerced to a url string\x0d\n\x0d\n      if (ctx) validateObject(ctx\x2C `${hookErrIdentifier} context`);\x0d\n    };\x0d\n    const validateOutput = (hookErrIdentifier\x2C output) => {\x0d\n      if (typeof output !== 'object' || output === null) { // [2]\x0d\n        throw new ERR_INVALID_RETURN_VALUE(\x0d\n          'an object'\x2C\x0d\n          hookErrIdentifier\x2C\x0d\n          output\x2C\x0d\n        );\x0d\n      }\x0d\n    };\x0d\n\x0d\n    const nextResolve = nextHookFactory(chain\x2C meta\x2C { validateArgs\x2C validateOutput });\x0d\n\x0d\n    const resolution = await nextResolve(originalSpecifier\x2C context);\x0d\n    const { hookErrIdentifier } = meta; // Retrieve the value after all settled\x0d\n\x0d\n    validateOutput(hookErrIdentifier\x2C resolution);\x0d\n\x0d\n    if (resolution?.shortCircuit === true) { meta.shortCircuited = true; }\x0d\n\x0d\n    if (!meta.chainFinished && !meta.shortCircuited) {\x0d\n      throw new ERR_LOADER_CHAIN_INCOMPLETE(hookErrIdentifier);\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      format\x2C\x0d\n      url\x2C\x0d\n    } = resolution;\x0d\n\x0d\n    if (\x0d\n      format != null &&\x0d\n      typeof format !== 'string' // [2]\x0d\n    ) {\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'a string'\x2C\x0d\n        hookErrIdentifier\x2C\x0d\n        'format'\x2C\x0d\n        format\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    if (typeof url !== 'string') {\x0d\n      // non-strings can be coerced to a url string\x0d\n      // validateString() throws a less-specific error\x0d\n      throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n        'a url string'\x2C\x0d\n        hookErrIdentifier\x2C\x0d\n        'url'\x2C\x0d\n        url\x2C\x0d\n      );\x0d\n    }\x0d\n\x0d\n    // Try to avoid expensive URL instantiation for known-good urls\x0d\n    if (!this.moduleMap.has(url)) {\x0d\n      try {\x0d\n        new URL(url);\x0d\n      } catch {\x0d\n        throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n          'a url string'\x2C\x0d\n          hookErrIdentifier\x2C\x0d\n          'url'\x2C\x0d\n          url\x2C\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n\x0d\n    return {\x0d\n      format\x2C\x0d\n      url\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(ESMLoader.prototype\x2C null);\x0d\n\x0d\nexports.ESMLoader = ESMLoader;\x0d\n
code-source-info,0x2f2f3a3c43e,109,0,26864,C0O0C4O26864,,
code-creation,Function,10,361849,0x2f2f3a3cd36,677, node:internal/modules/esm/loader:1:1,0x2f2f3a3c3b8,~
code-source-info,0x2f2f3a3cd36,109,0,26864,C0O0C140O82C146O82C150O136C156O146C162O163C168O186C174O209C180O235C186O252C192O269C198O294C203O319C209O343C215O362C221O378C227O403C233O434C239O492C245O492C250O473C256O746C262O746C267O772C272O537C278O569C284O596C290O621C296O647C302O685C308O714C314O827C320O827C325O789C331O804C337O819C343O889C349O889C354O861C360O972C366O972C371O927C377O948C383O1056C389O1056C394O1016C400O1035C406O1107C412O1107C416O1107C418O1170C424O1170C428O1170C430O1272C436O1272C441O1228C447O1247C453O1351C459O1351C464O1325C470O1432C476O1432C481O1416C487O1495C493O1495C498O1479C504O1572C510O1572C515O1553C521O2279C522O2279C657O26811C664O26780C669O26832C671O26850C676O26863,,
code-creation,Function,10,361977,0x2f2f3a3d306,171,<instance_members_initializer> node:internal/modules/esm/loader:182:3,0x2f2f3a3c860,~
code-source-info,0x2f2f3a3d306,109,5809,7113,C3O5818C8O6237C24O6261C42O6515C58O6539C90O6660C105O6759C112O6759C126O6882C136O6974C143O6974C157O7102C170O7113,,
code-creation,Eval,10,362294,0x2f2f3a3f576,5, node:internal/modules/esm/module_map:1:1,0x2f2f3a3f388,~
script-source,110,node:internal/modules/esm/module_map,'use strict';\x0d\n\x0d\nconst ModuleJob = require('internal/modules/esm/module_job');\x0d\nconst { kImplicitAssertType } = require('internal/modules/esm/assert');\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  SafeMap\x2C\x0d\n} = primordials;\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\n// Tracks the state of the loader-level module cache\x0d\nclass ModuleMap extends SafeMap {\x0d\n  constructor(i) { super(i); } // eslint-disable-line no-useless-constructor\x0d\n  get(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type];\x0d\n  }\x0d\n  set(url\x2C type = kImplicitAssertType\x2C job) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    if (job instanceof ModuleJob !== true &&\x0d\n        typeof job !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('job'\x2C 'ModuleJob'\x2C job);\x0d\n    }\x0d\n    debug(`Storing ${url} (${\x0d\n      type === kImplicitAssertType ? 'implicit type' : type\x0d\n    }) in ModuleMap`);\x0d\n    const cachedJobsForUrl = super.get(url) ?? ObjectCreate(null);\x0d\n    cachedJobsForUrl[type] = job;\x0d\n    return super.set(url\x2C cachedJobsForUrl);\x0d\n  }\x0d\n  has(url\x2C type = kImplicitAssertType) {\x0d\n    validateString(url\x2C 'url');\x0d\n    validateString(type\x2C 'type');\x0d\n    return super.get(url)?.[type] !== undefined;\x0d\n  }\x0d\n}\x0d\nmodule.exports = ModuleMap;\x0d\n
code-source-info,0x2f2f3a3f576,110,0,1487,C0O0C4O1487,,
tick,0x7ff81324d664,362605,1,0x7ff6d5c66a70,3,0x7ff6d65ae370,0x2f2f3a0c8dc,0x246eeec32e5,0x2f2f3a3ced2,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3aef7,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a360b3,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3181c,0x2f2f3a1021e,0x2f2f3a0b862
code-creation,Function,10,362666,0x2f2f3a3f9ae,175, node:internal/modules/esm/module_map:1:1,0x2f2f3a3f4f0,~
code-source-info,0x2f2f3a3f9ae,110,0,1487,C0O0C23O35C26O35C30O35C32O112C35O112C40O88C46O164C52O181C57O221C60O221C65O254C78O255C84O221C86O335C89O335C94O361C99O310C105O397C108O397C113O378C123O510C167O1458C169O1473C174O1486,,
new,MemoryChunk,0x64be900000,262144
code-creation,Eval,10,363565,0x64be9013de,5, node:internal/modules/esm/module_job:1:1,0x64be901118,~
script-source,111,node:internal/modules/esm/module_job,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  FunctionPrototype\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromiseResolve\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  SafePromiseAll\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { ModuleWrap } = internalBinding('module_wrap');\x0d\n\x0d\nconst { decorateErrorStack } = require('internal/util');\x0d\nconst {\x0d\n  getSourceMapsEnabled\x2C\x0d\n} = require('internal/source_map/source_map_cache');\x0d\nconst assert = require('internal/assert');\x0d\nconst resolvedPromise = PromiseResolve();\x0d\n\x0d\nconst noop = FunctionPrototype;\x0d\n\x0d\nlet hasPausedEntry = false;\x0d\n\x0d\nconst CJSGlobalLike = [\x0d\n  'require'\x2C\x0d\n  'module'\x2C\x0d\n  'exports'\x2C\x0d\n  '__filename'\x2C\x0d\n  '__dirname'\x2C\x0d\n];\x0d\nconst isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\x0d\n  ArrayPrototypeSome(\x0d\n    CJSGlobalLike\x2C\x0d\n    (globalLike) => errorMessage === `${globalLike} is not defined`\x0d\n  );\x0d\n\x0d\n/* A ModuleJob tracks the loading of a single Module\x2C and the ModuleJobs of\x0d\n * its dependencies\x2C over time. */\x0d\nclass ModuleJob {\x0d\n  // `loader` is the Loader instance used for loading dependencies.\x0d\n  // `moduleProvider` is a function\x0d\n  constructor(loader\x2C url\x2C importAssertions = ObjectCreate(null)\x2C\x0d\n              moduleProvider\x2C isMain\x2C inspectBrk) {\x0d\n    this.loader = loader;\x0d\n    this.importAssertions = importAssertions;\x0d\n    this.isMain = isMain;\x0d\n    this.inspectBrk = inspectBrk;\x0d\n\x0d\n    this.module = undefined;\x0d\n    // Expose the promise to the ModuleWrap directly for linking below.\x0d\n    // `this.module` is also filled in below.\x0d\n    this.modulePromise = ReflectApply(moduleProvider\x2C loader\x2C [url\x2C isMain]);\x0d\n\x0d\n    // Wait for the ModuleWrap instance being linked with all dependencies.\x0d\n    const link = async () => {\x0d\n      this.module = await this.modulePromise;\x0d\n      assert(this.module instanceof ModuleWrap);\x0d\n\x0d\n      // Explicitly keeping track of dependency jobs is needed in order\x0d\n      // to flatten out the dependency graph below in `_instantiate()`\x2C\x0d\n      // so that circular dependencies can't cause a deadlock by two of\x0d\n      // these `link` callbacks depending on each other.\x0d\n      const dependencyJobs = [];\x0d\n      const promises = this.module.link(async (specifier\x2C assertions) => {\x0d\n        const jobPromise = this.loader.getModuleJob(specifier\x2C url\x2C assertions);\x0d\n        ArrayPrototypePush(dependencyJobs\x2C jobPromise);\x0d\n        const job = await jobPromise;\x0d\n        return job.modulePromise;\x0d\n      });\x0d\n\x0d\n      if (promises !== undefined)\x0d\n        await SafePromiseAll(promises);\x0d\n\x0d\n      return SafePromiseAll(dependencyJobs);\x0d\n    };\x0d\n    // Promise for the list of all dependencyJobs.\x0d\n    this.linked = link();\x0d\n    // This promise is awaited later anyway\x2C so silence\x0d\n    // 'unhandled rejection' warnings.\x0d\n    PromisePrototypeThen(this.linked\x2C undefined\x2C noop);\x0d\n\x0d\n    // instantiated == deep dependency jobs wrappers are instantiated\x2C\x0d\n    // and module wrapper is instantiated.\x0d\n    this.instantiated = undefined;\x0d\n  }\x0d\n\x0d\n  instantiate() {\x0d\n    if (this.instantiated === undefined) {\x0d\n      this.instantiated = this._instantiate();\x0d\n    }\x0d\n    return this.instantiated;\x0d\n  }\x0d\n\x0d\n  async _instantiate() {\x0d\n    const jobsInGraph = new SafeSet();\x0d\n    const addJobsToDependencyGraph = async (moduleJob) => {\x0d\n      if (jobsInGraph.has(moduleJob)) {\x0d\n        return;\x0d\n      }\x0d\n      jobsInGraph.add(moduleJob);\x0d\n      const dependencyJobs = await moduleJob.linked;\x0d\n      return SafePromiseAll(dependencyJobs\x2C addJobsToDependencyGraph);\x0d\n    };\x0d\n    await addJobsToDependencyGraph(this);\x0d\n\x0d\n    try {\x0d\n      if (!hasPausedEntry && this.inspectBrk) {\x0d\n        hasPausedEntry = true;\x0d\n        const initWrapper = internalBinding('inspector').callAndPauseOnStart;\x0d\n        initWrapper(this.module.instantiate\x2C this.module);\x0d\n      } else {\x0d\n        this.module.instantiate();\x0d\n      }\x0d\n    } catch (e) {\x0d\n      decorateErrorStack(e);\x0d\n      // TODO(@bcoe): Add source map support to exception that occurs as result\x0d\n      // of missing named export. This is currently not possible because\x0d\n      // stack trace originates in module_job\x2C not the file itself. A hidden\x0d\n      // symbol with filename could be set in node_errors.cc to facilitate this.\x0d\n      if (!getSourceMapsEnabled() &&\x0d\n          StringPrototypeIncludes(e.message\x2C\x0d\n                                  ' does not provide an export named')) {\x0d\n        const splitStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n        const parentFileUrl = RegExpPrototypeSymbolReplace(\x0d\n          /:\\d+$/\x2C\x0d\n          splitStack[0]\x2C\x0d\n          ''\x0d\n        );\x0d\n        const { 1: childSpecifier\x2C 2: name } = RegExpPrototypeExec(\x0d\n          /module '(.*)' does not provide an export named '(.+)'/\x2C\x0d\n          e.message);\x0d\n        const { url: childFileURL } = await this.loader.resolve(\x0d\n          childSpecifier\x2C parentFileUrl\x2C\x0d\n        );\x0d\n        let format;\x0d\n        try {\x0d\n          // This might throw for non-CommonJS modules because we aren't passing\x0d\n          // in the import assertions and some formats require them; but we only\x0d\n          // care about CommonJS for the purposes of this error message.\x0d\n          ({ format } =\x0d\n            await this.loader.load(childFileURL));\x0d\n        } catch {\x0d\n          // Continue regardless of error.\x0d\n        }\x0d\n\x0d\n        if (format === 'commonjs') {\x0d\n          const importStatement = splitStack[1];\x0d\n          // TODO(@ctavan): The original error stack only provides the single\x0d\n          // line which causes the error. For multi-line import statements we\x0d\n          // cannot generate an equivalent object destructuring assignment by\x0d\n          // just parsing the error stack.\x0d\n          const oneLineNamedImports = RegExpPrototypeExec(/{.*}/\x2C importStatement);\x0d\n          const destructuringAssignment = oneLineNamedImports &&\x0d\n            RegExpPrototypeSymbolReplace(/\\s+as\\s+/g\x2C oneLineNamedImports\x2C ': ');\x0d\n          e.message = `Named export '${name}' not found. The requested module` +\x0d\n            ` '${childSpecifier}' is a CommonJS module\x2C which may not support` +\x0d\n            ' all module.exports as named exports.\\nCommonJS modules can ' +\x0d\n            'always be imported via the default export\x2C for example using:' +\x0d\n            `\\n\\nimport pkg from '${childSpecifier}';\\n${\x0d\n              destructuringAssignment ?\x0d\n                `const ${destructuringAssignment} = pkg;\\n` : ''}`;\x0d\n          const newStack = StringPrototypeSplit(e.stack\x2C '\\n');\x0d\n          newStack[3] = `SyntaxError: ${e.message}`;\x0d\n          e.stack = ArrayPrototypeJoin(newStack\x2C '\\n');\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n\x0d\n    for (const dependencyJob of jobsInGraph) {\x0d\n      // Calling `this.module.instantiate()` instantiates not only the\x0d\n      // ModuleWrap in this module\x2C but all modules in the graph.\x0d\n      dependencyJob.instantiated = resolvedPromise;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  async run() {\x0d\n    await this.instantiate();\x0d\n    const timeout = -1;\x0d\n    const breakOnSigint = false;\x0d\n    try {\x0d\n      await this.module.evaluate(timeout\x2C breakOnSigint);\x0d\n    } catch (e) {\x0d\n      if (e?.name === 'ReferenceError' &&\x0d\n          isCommonJSGlobalLikeNotDefinedError(e.message)) {\x0d\n        e.message += ' in ES module scope';\x0d\n\x0d\n        if (StringPrototypeStartsWith(e.message\x2C 'require ')) {\x0d\n          e.message += '\x2C you can use import instead';\x0d\n        }\x0d\n\x0d\n        const packageConfig =\x0d\n          StringPrototypeStartsWith(this.module.url\x2C 'file://') &&\x0d\n            RegExpPrototypeExec(/\\.js(\\?[^#]*)?(#.*)?$/\x2C this.module.url) !== null &&\x0d\n            require('internal/modules/esm/resolve')\x0d\n              .getPackageScopeConfig(this.module.url);\x0d\n        if (packageConfig.type === 'module') {\x0d\n          e.message +=\x0d\n            '\\nThis file is being treated as an ES module because it has a ' +\x0d\n            `'.js' file extension and '${packageConfig.pjsonPath}' contains ` +\x0d\n            '"type": "module". To treat it as a CommonJS script\x2C rename it ' +\x0d\n            'to use the \\'.cjs\\' file extension.';\x0d\n        }\x0d\n      }\x0d\n      throw e;\x0d\n    }\x0d\n    return { module: this.module };\x0d\n  }\x0d\n}\x0d\nObjectSetPrototypeOf(ModuleJob.prototype\x2C null);\x0d\nmodule.exports = ModuleJob;\x0d\n
code-source-info,0x64be9013de,111,0,8290,C0O0C4O8290,,
code-creation,Function,10,364189,0x64be9018be,316, node:internal/modules/esm/module_job:1:1,0x64be901358,~
code-source-info,0x64be9018be,111,0,8290,C0O0C79O28C85O51C91O74C97O97C102O119C108O136C113O161C118O180C124O205C130O222C136O246C142O279C148O298C154O310C160O338C166O363C172O434C178O434C183O419C189O500C195O500C200O477C206O565C212O565C217O538C223O630C229O630C233O630C235O683C238O683C240O717C242O717C244O760C245O760C247O792C251O792C253O917C257O917C296O8242C303O8211C308O8261C310O8276C315O8289,,
code-creation,Eval,10,364978,0x64be9034ae,5, node:internal/modules/esm/assert:1:1,0x64be9032b8,~
script-source,112,node:internal/modules/esm/assert,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectValues\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n} = primordials;\x0d\nconst { validateString } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  ERR_IMPORT_ASSERTION_TYPE_FAILED\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_MISSING\x2C\x0d\n  ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\n// The HTML spec has an implied default type of `'javascript'`.\x0d\nconst kImplicitAssertType = 'javascript';\x0d\n\x0d\n/**\x0d\n * Define a map of module formats to import assertion types (the value of\x0d\n * `type` in `assert { type: 'json' }`).\x0d\n * @type {Map<string\x2C string>}\x0d\n */\x0d\nconst formatTypeMap = {\x0d\n  '__proto__': null\x2C\x0d\n  'builtin': kImplicitAssertType\x2C\x0d\n  'commonjs': kImplicitAssertType\x2C\x0d\n  'json': 'json'\x2C\x0d\n  'module': kImplicitAssertType\x2C\x0d\n  'wasm': kImplicitAssertType\x2C // It's unclear whether the HTML spec will require an assertion type or not for Wasm; see https://github.com/WebAssembly/esm-integration/issues/42\x0d\n};\x0d\n\x0d\n/**\x0d\n * The HTML spec disallows the default type to be explicitly specified\x0d\n * (for now); so `import './file.js'` is okay but\x0d\n * `import './file.js' assert { type: 'javascript' }` throws.\x0d\n * @type {Array<string\x2C string>}\x0d\n */\x0d\nconst supportedAssertionTypes = ArrayPrototypeFilter(\x0d\n  ObjectValues(formatTypeMap)\x2C\x0d\n  (type) => type !== kImplicitAssertType);\x0d\n\x0d\n\x0d\n/**\x0d\n * Test a module's import assertions.\x0d\n * @param {string} url The URL of the imported module\x2C for error reporting.\x0d\n * @param {string} format One of Node's supported translators\x0d\n * @param {Record<string\x2C string>} importAssertions Validations for the\x0d\n *                                                  module import.\x0d\n * @returns {true}\x0d\n * @throws {TypeError} If the format and assertion type are incompatible.\x0d\n */\x0d\nfunction validateAssertions(url\x2C format\x2C\x0d\n                            importAssertions = ObjectCreate(null)) {\x0d\n  const validType = formatTypeMap[format];\x0d\n\x0d\n  switch (validType) {\x0d\n    case undefined:\x0d\n      // Ignore assertions for module formats we don't recognize\x2C to allow new\x0d\n      // formats in the future.\x0d\n      return true;\x0d\n\x0d\n    case kImplicitAssertType:\x0d\n      // This format doesn't allow an import assertion type\x2C so the property\x0d\n      // must not be set on the import assertions object.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        return true;\x0d\n      }\x0d\n      return handleInvalidType(url\x2C importAssertions.type);\x0d\n\x0d\n    case importAssertions.type:\x0d\n      // The asserted type is the valid type for this format.\x0d\n      return true;\x0d\n\x0d\n    default:\x0d\n      // There is an expected type for this format\x2C but the value of\x0d\n      // `importAssertions.type` might not have been it.\x0d\n      if (!ObjectPrototypeHasOwnProperty(importAssertions\x2C 'type')) {\x0d\n        // `type` wasn't specified at all.\x0d\n        throw new ERR_IMPORT_ASSERTION_TYPE_MISSING(url\x2C validType);\x0d\n      }\x0d\n      handleInvalidType(url\x2C importAssertions.type);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Throw the correct error depending on what's wrong with the type assertion.\x0d\n * @param {string} url The resolved URL for the module to be imported\x0d\n * @param {string} type The value of the import assertion `type` property\x0d\n */\x0d\nfunction handleInvalidType(url\x2C type) {\x0d\n  // `type` might have not been a string.\x0d\n  validateString(type\x2C 'type');\x0d\n\x0d\n  // `type` might not have been one of the types we understand.\x0d\n  if (!ArrayPrototypeIncludes(supportedAssertionTypes\x2C type)) {\x0d\n    throw new ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED(type);\x0d\n  }\x0d\n\x0d\n  // `type` was the wrong value for this format.\x0d\n  throw new ERR_IMPORT_ASSERTION_TYPE_FAILED(url\x2C type);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  kImplicitAssertType\x2C\x0d\n  validateAssertions\x2C\x0d\n};\x0d\n
code-source-info,0x64be9034ae,112,0,3734,C0O0C4O3734,,
code-creation,Function,10,365309,0x64be903786,201, node:internal/modules/esm/assert:1:1,0x64be903428,~
code-source-info,0x64be903786,112,0,3734,C0O0C46O28C51O53C57O80C63O97C68O114C74O191C77O191C82O172C88O356C91O356C96O382C101O237C107O274C113O312C119O486C121O486C123O684C130O722C136O758C142O811C148O843C154O684C156O1280C159O1305C169O1280C174O1280C176O3663C183O3685C189O3709C195O3678C200O3733,,
code-creation,LazyCompile,10,365520,0x64be903d96,9, node:internal/modules/esm/assert:43:3,0x64be903580,~
code-source-info,0x64be903d96,112,1337,1375,C0O1352C2O1356C4O1352C8O1375,,
code-creation,Eval,10,367480,0x64be90594e,5, node:internal/modules/esm/resolve:1:1,0x64be9051b0,~
script-source,113,node:internal/modules/esm/resolve,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeConcat\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectGetOwnPropertyNames\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst internalFS = require('internal/fs/utils');\x0d\nconst { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  realpathSync\x2C\x0d\n  statSync\x2C\x0d\n  Stats\x2C\x0d\n} = require('fs');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\nconst { sep\x2C relative\x2C resolve } = require('path');\x0d\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\x0d\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\nconst typeFlag = getOptionValue('--input-type');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\nconst { URL\x2C pathToFileURL\x2C fileURLToPath } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INPUT_TYPE_NOT_ALLOWED\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_INVALID_MODULE_SPECIFIER\x2C\x0d\n  ERR_INVALID_PACKAGE_CONFIG\x2C\x0d\n  ERR_INVALID_PACKAGE_TARGET\x2C\x0d\n  ERR_MANIFEST_DEPENDENCY_MISSING\x2C\x0d\n  ERR_MODULE_NOT_FOUND\x2C\x0d\n  ERR_PACKAGE_IMPORT_NOT_DEFINED\x2C\x0d\n  ERR_PACKAGE_PATH_NOT_EXPORTED\x2C\x0d\n  ERR_UNSUPPORTED_DIR_IMPORT\x2C\x0d\n  ERR_NETWORK_IMPORT_DISALLOWED\x2C\x0d\n  ERR_UNSUPPORTED_ESM_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst { Module: CJSModule } = require('internal/modules/cjs/loader');\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst { getPackageConfig\x2C getPackageScopeConfig } = require('internal/modules/esm/package_config');\x0d\n\x0d\n/**\x0d\n * @typedef {import('internal/modules/esm/package_config.js').PackageConfig} PackageConfig\x0d\n */\x0d\n\x0d\n\x0d\nconst userConditions = getOptionValue('--conditions');\x0d\nconst noAddons = getOptionValue('--no-addons');\x0d\nconst addonConditions = noAddons ? [] : ['node-addons'];\x0d\n\x0d\nconst DEFAULT_CONDITIONS = ObjectFreeze([\x0d\n  'node'\x2C\x0d\n  'import'\x2C\x0d\n  ...addonConditions\x2C\x0d\n  ...userConditions\x2C\x0d\n]);\x0d\n\x0d\nconst DEFAULT_CONDITIONS_SET = new SafeSet(DEFAULT_CONDITIONS);\x0d\n\x0d\nconst emittedPackageWarnings = new SafeSet();\x0d\n\x0d\n/**\x0d\n * @param {string} match\x0d\n * @param {URL} pjsonUrl\x0d\n * @param {boolean} isExports\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitFolderMapDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated folder mapping "${match}" in the ${isExports ?\x0d\n      '"exports"' : '"imports"'} field module resolution of the package at ${\x0d\n      pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` : ''}.\\n` +\x0d\n      `Update this package.json to use a subpath pattern like "${match}*".`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0148'\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction emitTrailingSlashPatternDeprecation(match\x2C pjsonUrl\x2C isExports\x2C base) {\x0d\n  if (!pendingDeprecation) return;\x0d\n  const pjsonPath = fileURLToPath(pjsonUrl);\x0d\n  if (emittedPackageWarnings.has(pjsonPath + '|' + match))\x0d\n    return;\x0d\n  emittedPackageWarnings.add(pjsonPath + '|' + match);\x0d\n  process.emitWarning(\x0d\n    `Use of deprecated trailing slash pattern mapping "${match}" in the ${\x0d\n      isExports ? '"exports"' : '"imports"'} field module resolution of the ` +\x0d\n      `package at ${pjsonPath}${base ? ` imported from ${fileURLToPath(base)}` :\x0d\n        ''}. Mapping specifiers ending in "/" is no longer supported.`\x2C\x0d\n    'DeprecationWarning'\x2C\x0d\n    'DEP0155'\x0d\n  );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {string} main\x0d\n * @returns {void}\x0d\n */\x0d\nfunction emitLegacyIndexDeprecation(url\x2C packageJSONUrl\x2C base\x2C main) {\x0d\n  const format = defaultGetFormatWithoutErrors(url);\x0d\n  if (format !== 'module')\x0d\n    return;\x0d\n  const path = fileURLToPath(url);\x0d\n  const pkgPath = fileURLToPath(new URL('.'\x2C packageJSONUrl));\x0d\n  const basePath = fileURLToPath(base);\x0d\n  if (main)\x0d\n    process.emitWarning(\x0d\n      `Package ${pkgPath} has a "main" field set to ${JSONStringify(main)}\x2C ` +\x0d\n      `excluding the full filename and extension to the resolved file at "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${\x0d\n        basePath}.\\n Automatic extension resolution of the "main" field is ` +\x0d\n      'deprecated for ES modules.'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n  else\x0d\n    process.emitWarning(\x0d\n      `No "main" or "exports" field defined in the package.json for ${pkgPath\x0d\n      } resolving the main entry point "${\x0d\n        StringPrototypeSlice(path\x2C pkgPath.length)}"\x2C imported from ${basePath\x0d\n      }.\\nDefault "index" lookups for the main are deprecated for ES modules.`\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0151'\x0d\n    );\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string[]} [conditions]\x0d\n * @returns {Set<string>}\x0d\n */\x0d\nfunction getConditionsSet(conditions) {\x0d\n  if (conditions !== undefined && conditions !== DEFAULT_CONDITIONS) {\x0d\n    if (!ArrayIsArray(conditions)) {\x0d\n      throw new ERR_INVALID_ARG_VALUE('conditions'\x2C conditions\x2C\x0d\n                                      'expected an array');\x0d\n    }\x0d\n    return new SafeSet(conditions);\x0d\n  }\x0d\n  return DEFAULT_CONDITIONS_SET;\x0d\n}\x0d\n\x0d\nconst realpathCache = new SafeMap();\x0d\n\x0d\n/**\x0d\n * @param {string | URL} path\x0d\n * @returns {import('fs').Stats}\x0d\n */\x0d\nconst tryStatSync =\x0d\n  (path) => statSync(path\x2C { throwIfNoEntry: false }) ?? new Stats();\x0d\n\x0d\n/**\x0d\n * @param {string | URL} url\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction fileExists(url) {\x0d\n  return statSync(url\x2C { throwIfNoEntry: false })?.isFile() ?? false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Legacy CommonJS main resolution:\x0d\n * 1. let M = pkg_url + (json main field)\x0d\n * 2. TRY(M\x2C M.js\x2C M.json\x2C M.node)\x0d\n * 3. TRY(M/index.js\x2C M/index.json\x2C M/index.node)\x0d\n * 4. TRY(pkg_url/index.js\x2C pkg_url/index.json\x2C pkg_url/index.node)\x0d\n * 5. NOT_FOUND\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction legacyMainResolve(packageJSONUrl\x2C packageConfig\x2C base) {\x0d\n  let guess;\x0d\n  if (packageConfig.main !== undefined) {\x0d\n    // Note: fs check redundances will be handled by Descriptor cache here.\x0d\n    if (fileExists(guess = new URL(`./${packageConfig.main}`\x2C\x0d\n                                   packageJSONUrl))) {\x0d\n      return guess;\x0d\n    } else if (fileExists(guess = new URL(`./${packageConfig.main}.js`\x2C\x0d\n                                          packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.js`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.json`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else if (fileExists(guess = new URL(`./${packageConfig.main}/index.node`\x2C\x0d\n                                        packageJSONUrl)));\x0d\n    else guess = undefined;\x0d\n    if (guess) {\x0d\n      emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C\x0d\n                                 packageConfig.main);\x0d\n      return guess;\x0d\n    }\x0d\n    // Fallthrough.\x0d\n  }\x0d\n  if (fileExists(guess = new URL('./index.js'\x2C packageJSONUrl)));\x0d\n  // So fs.\x0d\n  else if (fileExists(guess = new URL('./index.json'\x2C packageJSONUrl)));\x0d\n  else if (fileExists(guess = new URL('./index.node'\x2C packageJSONUrl)));\x0d\n  else guess = undefined;\x0d\n  if (guess) {\x0d\n    emitLegacyIndexDeprecation(guess\x2C packageJSONUrl\x2C base\x2C packageConfig.main);\x0d\n    return guess;\x0d\n  }\x0d\n  // Not found.\x0d\n  throw new ERR_MODULE_NOT_FOUND(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensionsWithTryExactName(search) {\x0d\n  if (fileExists(search)) return search;\x0d\n  return resolveExtensions(search);\x0d\n}\x0d\n\x0d\nconst extensions = ['.js'\x2C '.json'\x2C '.node'\x2C '.mjs'];\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveExtensions(search) {\x0d\n  for (let i = 0; i < extensions.length; i++) {\x0d\n    const extension = extensions[i];\x0d\n    const guess = new URL(`${search.pathname}${extension}`\x2C search);\x0d\n    if (fileExists(guess)) return guess;\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} search\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction resolveDirectoryEntry(search) {\x0d\n  const dirPath = fileURLToPath(search);\x0d\n  const pkgJsonPath = resolve(dirPath\x2C 'package.json');\x0d\n  if (fileExists(pkgJsonPath)) {\x0d\n    const pkgJson = packageJsonReader.read(pkgJsonPath);\x0d\n    if (pkgJson.containsKeys) {\x0d\n      const { main } = JSONParse(pkgJson.string);\x0d\n      if (main != null) {\x0d\n        const mainUrl = pathToFileURL(resolve(dirPath\x2C main));\x0d\n        return resolveExtensionsWithTryExactName(mainUrl);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return resolveExtensions(new URL('index'\x2C search));\x0d\n}\x0d\n\x0d\nconst encodedSepRegEx = /%2F|%5C/i;\x0d\n/**\x0d\n * @param {URL} resolved\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL | undefined}\x0d\n */\x0d\nfunction finalizeResolution(resolved\x2C base\x2C preserveSymlinks) {\x0d\n  if (RegExpPrototypeExec(encodedSepRegEx\x2C resolved.pathname) !== null)\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      resolved.pathname\x2C 'must not include encoded "/" or "\\\\" characters'\x2C\x0d\n      fileURLToPath(base));\x0d\n\x0d\n  let path = fileURLToPath(resolved);\x0d\n  if (getOptionValue('--experimental-specifier-resolution') === 'node') {\x0d\n    let file = resolveExtensionsWithTryExactName(resolved);\x0d\n\x0d\n    // Directory\x0d\n    if (file === undefined) {\x0d\n      file = StringPrototypeEndsWith(path\x2C '/') ?\x0d\n        (resolveDirectoryEntry(resolved) || resolved) : resolveDirectoryEntry(new URL(`${resolved}/`));\x0d\n\x0d\n      if (file === resolved) return file;\x0d\n\x0d\n      if (file === undefined) {\x0d\n        throw new ERR_MODULE_NOT_FOUND(\x0d\n          resolved.pathname\x2C fileURLToPath(base)\x2C 'module');\x0d\n      }\x0d\n    }\x0d\n\x0d\n    path = file;\x0d\n  }\x0d\n\x0d\n  const stats = tryStatSync(StringPrototypeEndsWith(path\x2C '/') ?\x0d\n    StringPrototypeSlice(path\x2C -1) : path);\x0d\n  if (stats.isDirectory()) {\x0d\n    const err = new ERR_UNSUPPORTED_DIR_IMPORT(path\x2C fileURLToPath(base));\x0d\n    err.url = String(resolved);\x0d\n    throw err;\x0d\n  } else if (!stats.isFile()) {\x0d\n    throw new ERR_MODULE_NOT_FOUND(\x0d\n      path || resolved.pathname\x2C base && fileURLToPath(base)\x2C 'module');\x0d\n  }\x0d\n\x0d\n  if (!preserveSymlinks) {\x0d\n    const real = realpathSync(path\x2C {\x0d\n      [internalFS.realpathCacheKey]: realpathCache\x0d\n    });\x0d\n    const { search\x2C hash } = resolved;\x0d\n    resolved =\x0d\n        pathToFileURL(real + (StringPrototypeEndsWith(path\x2C sep) ? '/' : ''));\x0d\n    resolved.search = search;\x0d\n    resolved.hash = hash;\x0d\n  }\x0d\n\x0d\n  return resolved;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwImportNotDefined(specifier\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(\x0d\n    specifier\x2C packageJSONUrl && fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C\x0d\n    fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwExportsNotFound(subpath\x2C packageJSONUrl\x2C base) {\x0d\n  throw new ERR_PACKAGE_PATH_NOT_EXPORTED(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C\x0d\n    base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {string | URL} subpath\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {boolean} internal\x0d\n * @param {string | URL | undefined} base\x0d\n */\x0d\nfunction throwInvalidSubpath(subpath\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  const reason = `request is not a valid subpath for the "${internal ?\x0d\n    'imports' : 'exports'}" resolution of ${fileURLToPath(packageJSONUrl)}`;\x0d\n  throw new ERR_INVALID_MODULE_SPECIFIER(subpath\x2C reason\x2C\x0d\n                                         base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nfunction throwInvalidPackageTarget(\x0d\n  subpath\x2C target\x2C packageJSONUrl\x2C internal\x2C base) {\x0d\n  if (typeof target === 'object' && target !== null) {\x0d\n    target = JSONStringify(target\x2C null\x2C '');\x0d\n  } else {\x0d\n    target = `${target}`;\x0d\n  }\x0d\n  throw new ERR_INVALID_PACKAGE_TARGET(\x0d\n    fileURLToPath(new URL('.'\x2C packageJSONUrl))\x2C subpath\x2C target\x2C\x0d\n    internal\x2C base && fileURLToPath(base));\x0d\n}\x0d\n\x0d\nconst invalidSegmentRegEx = /(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)/i;\x0d\nconst invalidPackageNameRegEx = /^\\.|%|\\\\/;\x0d\nconst patternRegEx = /\\*/g;\x0d\n\x0d\nfunction resolvePackageTargetString(\x0d\n  target\x2C subpath\x2C match\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C conditions) {\x0d\n\x0d\n  if (subpath !== '' && !pattern && target[target.length - 1] !== '/')\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (!StringPrototypeStartsWith(target\x2C './')) {\x0d\n    if (internal && !StringPrototypeStartsWith(target\x2C '../') &&\x0d\n        !StringPrototypeStartsWith(target\x2C '/')) {\x0d\n      let isURL = false;\x0d\n      try {\x0d\n        new URL(target);\x0d\n        isURL = true;\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      if (!isURL) {\x0d\n        const exportTarget = pattern ?\x0d\n          RegExpPrototypeSymbolReplace(patternRegEx\x2C target\x2C () => subpath) :\x0d\n          target + subpath;\x0d\n        return packageResolve(\x0d\n          exportTarget\x2C packageJSONUrl\x2C conditions);\x0d\n      }\x0d\n    }\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n  }\x0d\n\x0d\n  if (RegExpPrototypeExec(invalidSegmentRegEx\x2C StringPrototypeSlice(target\x2C 2)) !== null)\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  const resolved = new URL(target\x2C packageJSONUrl);\x0d\n  const resolvedPath = resolved.pathname;\x0d\n  const packagePath = new URL('.'\x2C packageJSONUrl).pathname;\x0d\n\x0d\n  if (!StringPrototypeStartsWith(resolvedPath\x2C packagePath))\x0d\n    throwInvalidPackageTarget(match\x2C target\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n\x0d\n  if (subpath === '') return resolved;\x0d\n\x0d\n  if (RegExpPrototypeExec(invalidSegmentRegEx\x2C subpath) !== null) {\x0d\n    const request = pattern ?\x0d\n      StringPrototypeReplace(match\x2C '*'\x2C () => subpath) : match + subpath;\x0d\n    throwInvalidSubpath(request\x2C packageJSONUrl\x2C internal\x2C base);\x0d\n  }\x0d\n\x0d\n  if (pattern) {\x0d\n    return new URL(\x0d\n      RegExpPrototypeSymbolReplace(\x0d\n        patternRegEx\x2C\x0d\n        resolved.href\x2C\x0d\n        () => subpath\x0d\n      )\x0d\n    );\x0d\n  }\x0d\n\x0d\n  return new URL(subpath\x2C resolved);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} key\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isArrayIndex(key) {\x0d\n  const keyNum = +key;\x0d\n  if (`${keyNum}` !== key) return false;\x0d\n  return keyNum >= 0 && keyNum < 0xFFFF_FFFF;\x0d\n}\x0d\n\x0d\nfunction resolvePackageTarget(packageJSONUrl\x2C target\x2C subpath\x2C packageSubpath\x2C\x0d\n                              base\x2C pattern\x2C internal\x2C conditions) {\x0d\n  if (typeof target === 'string') {\x0d\n    return resolvePackageTargetString(\x0d\n      target\x2C subpath\x2C packageSubpath\x2C packageJSONUrl\x2C base\x2C pattern\x2C internal\x2C\x0d\n      conditions);\x0d\n  } else if (ArrayIsArray(target)) {\x0d\n    if (target.length === 0) {\x0d\n      return null;\x0d\n    }\x0d\n\x0d\n    let lastException;\x0d\n    for (let i = 0; i < target.length; i++) {\x0d\n      const targetItem = target[i];\x0d\n      let resolveResult;\x0d\n      try {\x0d\n        resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C targetItem\x2C subpath\x2C packageSubpath\x2C base\x2C pattern\x2C\x0d\n          internal\x2C conditions);\x0d\n      } catch (e) {\x0d\n        lastException = e;\x0d\n        if (e.code === 'ERR_INVALID_PACKAGE_TARGET') {\x0d\n          continue;\x0d\n        }\x0d\n        throw e;\x0d\n      }\x0d\n      if (resolveResult === undefined) {\x0d\n        continue;\x0d\n      }\x0d\n      if (resolveResult === null) {\x0d\n        lastException = null;\x0d\n        continue;\x0d\n      }\x0d\n      return resolveResult;\x0d\n    }\x0d\n    if (lastException === undefined || lastException === null)\x0d\n      return lastException;\x0d\n    throw lastException;\x0d\n  } else if (typeof target === 'object' && target !== null) {\x0d\n    const keys = ObjectGetOwnPropertyNames(target);\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (isArrayIndex(key)) {\x0d\n        throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n          fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n          '"exports" cannot contain numeric property keys.');\x0d\n      }\x0d\n    }\x0d\n    for (let i = 0; i < keys.length; i++) {\x0d\n      const key = keys[i];\x0d\n      if (key === 'default' || conditions.has(key)) {\x0d\n        const conditionalTarget = target[key];\x0d\n        const resolveResult = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C conditionalTarget\x2C subpath\x2C packageSubpath\x2C base\x2C\x0d\n          pattern\x2C internal\x2C conditions);\x0d\n        if (resolveResult === undefined)\x0d\n          continue;\x0d\n        return resolveResult;\x0d\n      }\x0d\n    }\x0d\n    return undefined;\x0d\n  } else if (target === null) {\x0d\n    return null;\x0d\n  }\x0d\n  throwInvalidPackageTarget(packageSubpath\x2C target\x2C packageJSONUrl\x2C internal\x2C\x0d\n                            base);\x0d\n}\x0d\n\x0d\n/**\x0d\n *\x0d\n * @param {import('internal/modules/esm/package_config.js').Exports} exports\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base) {\x0d\n  if (typeof exports === 'string' || ArrayIsArray(exports)) return true;\x0d\n  if (typeof exports !== 'object' || exports === null) return false;\x0d\n\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  let isConditionalSugar = false;\x0d\n  let i = 0;\x0d\n  for (let j = 0; j < keys.length; j++) {\x0d\n    const key = keys[j];\x0d\n    const curIsConditionalSugar = key === '' || key[0] !== '.';\x0d\n    if (i++ === 0) {\x0d\n      isConditionalSugar = curIsConditionalSugar;\x0d\n    } else if (isConditionalSugar !== curIsConditionalSugar) {\x0d\n      throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n        fileURLToPath(packageJSONUrl)\x2C base\x2C\x0d\n        '"exports" cannot contain some keys starting with \\'.\\' and some not.' +\x0d\n        ' The exports object must either be an object of package subpath keys' +\x0d\n        ' or an object of main entry condition name keys only.');\x0d\n    }\x0d\n  }\x0d\n  return isConditionalSugar;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} packageJSONUrl\x0d\n * @param {string} packageSubpath\x0d\n * @param {PackageConfig} packageConfig\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageExportsResolve(\x0d\n  packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions) {\x0d\n  let exports = packageConfig.exports;\x0d\n  if (isConditionalExportsMainSugar(exports\x2C packageJSONUrl\x2C base))\x0d\n    exports = { '.': exports };\x0d\n\x0d\n  if (ObjectPrototypeHasOwnProperty(exports\x2C packageSubpath) &&\x0d\n      !StringPrototypeIncludes(packageSubpath\x2C '*') &&\x0d\n      !StringPrototypeEndsWith(packageSubpath\x2C '/')) {\x0d\n    const target = exports[packageSubpath];\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C target\x2C ''\x2C packageSubpath\x2C base\x2C false\x2C false\x2C conditions\x0d\n    );\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: true };\x0d\n  }\x0d\n\x0d\n  let bestMatch = '';\x0d\n  let bestMatchSubpath;\x0d\n  const keys = ObjectGetOwnPropertyNames(exports);\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    const key = keys[i];\x0d\n    const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n    if (patternIndex !== -1 &&\x0d\n        StringPrototypeStartsWith(packageSubpath\x2C\x0d\n                                  StringPrototypeSlice(key\x2C 0\x2C patternIndex))) {\x0d\n      if (StringPrototypeEndsWith(packageSubpath\x2C '/'))\x0d\n        emitTrailingSlashPatternDeprecation(packageSubpath\x2C packageJSONUrl\x2C\x0d\n                                            true\x2C base);\x0d\n      const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n      if (packageSubpath.length >= key.length &&\x0d\n          StringPrototypeEndsWith(packageSubpath\x2C patternTrailer) &&\x0d\n          patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n          StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n        bestMatch = key;\x0d\n        bestMatchSubpath = StringPrototypeSlice(\x0d\n          packageSubpath\x2C patternIndex\x2C\x0d\n          packageSubpath.length - patternTrailer.length);\x0d\n      }\x0d\n    } else if (key[key.length - 1] === '/' &&\x0d\n      StringPrototypeStartsWith(packageSubpath\x2C key) &&\x0d\n      patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n      bestMatch = key;\x0d\n      bestMatchSubpath = StringPrototypeSlice(packageSubpath\x2C key.length);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (bestMatch) {\x0d\n    const target = exports[bestMatch];\x0d\n    const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n    const resolved = resolvePackageTarget(\x0d\n      packageJSONUrl\x2C\x0d\n      target\x2C\x0d\n      bestMatchSubpath\x2C\x0d\n      bestMatch\x2C\x0d\n      base\x2C\x0d\n      pattern\x2C\x0d\n      false\x2C\x0d\n      conditions);\x0d\n\x0d\n    if (resolved == null) {\x0d\n      throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n    }\x0d\n\x0d\n    if (!pattern) {\x0d\n      emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C true\x2C base);\x0d\n    }\x0d\n\x0d\n    return { resolved\x2C exact: pattern };\x0d\n  }\x0d\n\x0d\n  throwExportsNotFound(packageSubpath\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\nfunction patternKeyCompare(a\x2C b) {\x0d\n  const aPatternIndex = StringPrototypeIndexOf(a\x2C '*');\x0d\n  const bPatternIndex = StringPrototypeIndexOf(b\x2C '*');\x0d\n  const baseLenA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;\x0d\n  const baseLenB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;\x0d\n  if (baseLenA > baseLenB) return -1;\x0d\n  if (baseLenB > baseLenA) return 1;\x0d\n  if (aPatternIndex === -1) return 1;\x0d\n  if (bPatternIndex === -1) return -1;\x0d\n  if (a.length > b.length) return -1;\x0d\n  if (b.length > a.length) return 1;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} name\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageImportsResolve(name\x2C base\x2C conditions) {\x0d\n  if (name === '#' || StringPrototypeStartsWith(name\x2C '#/')) {\x0d\n    const reason = 'is not a valid internal imports specifier name';\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(name\x2C reason\x2C fileURLToPath(base));\x0d\n  }\x0d\n  let packageJSONUrl;\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    const imports = packageConfig.imports;\x0d\n    if (imports) {\x0d\n      if (ObjectPrototypeHasOwnProperty(imports\x2C name) &&\x0d\n          !StringPrototypeIncludes(name\x2C '*') &&\x0d\n          !StringPrototypeEndsWith(name\x2C '/')) {\x0d\n        const resolved = resolvePackageTarget(\x0d\n          packageJSONUrl\x2C imports[name]\x2C ''\x2C name\x2C base\x2C false\x2C true\x2C conditions\x0d\n        );\x0d\n        if (resolved != null) {\x0d\n          return { resolved\x2C exact: true };\x0d\n        }\x0d\n      } else {\x0d\n        let bestMatch = '';\x0d\n        let bestMatchSubpath;\x0d\n        const keys = ObjectGetOwnPropertyNames(imports);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const patternIndex = StringPrototypeIndexOf(key\x2C '*');\x0d\n          if (patternIndex !== -1 &&\x0d\n              StringPrototypeStartsWith(name\x2C\x0d\n                                        StringPrototypeSlice(key\x2C 0\x2C\x0d\n                                                             patternIndex))) {\x0d\n            const patternTrailer = StringPrototypeSlice(key\x2C patternIndex + 1);\x0d\n            if (name.length >= key.length &&\x0d\n                StringPrototypeEndsWith(name\x2C patternTrailer) &&\x0d\n                patternKeyCompare(bestMatch\x2C key) === 1 &&\x0d\n                StringPrototypeLastIndexOf(key\x2C '*') === patternIndex) {\x0d\n              bestMatch = key;\x0d\n              bestMatchSubpath = StringPrototypeSlice(\x0d\n                name\x2C patternIndex\x2C name.length - patternTrailer.length);\x0d\n            }\x0d\n          } else if (key[key.length - 1] === '/' &&\x0d\n            StringPrototypeStartsWith(name\x2C key) &&\x0d\n            patternKeyCompare(bestMatch\x2C key) === 1) {\x0d\n            bestMatch = key;\x0d\n            bestMatchSubpath = StringPrototypeSlice(name\x2C key.length);\x0d\n          }\x0d\n        }\x0d\n\x0d\n        if (bestMatch) {\x0d\n          const target = imports[bestMatch];\x0d\n          const pattern = StringPrototypeIncludes(bestMatch\x2C '*');\x0d\n          const resolved = resolvePackageTarget(\x0d\n            packageJSONUrl\x2C target\x2C\x0d\n            bestMatchSubpath\x2C bestMatch\x2C\x0d\n            base\x2C pattern\x2C true\x2C\x0d\n            conditions);\x0d\n          if (resolved !== null) {\x0d\n            if (!pattern)\x0d\n              emitFolderMapDeprecation(bestMatch\x2C packageJSONUrl\x2C false\x2C base);\x0d\n            return { resolved\x2C exact: pattern };\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  throwImportNotDefined(name\x2C packageJSONUrl\x2C base);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @returns {import('internal/modules/esm/package_config.js').PackageType}\x0d\n */\x0d\nfunction getPackageType(url) {\x0d\n  const packageConfig = getPackageScopeConfig(url);\x0d\n  return packageConfig.type;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {{ packageName: string\x2C packageSubpath: string\x2C isScoped: boolean }}\x0d\n */\x0d\nfunction parsePackageName(specifier\x2C base) {\x0d\n  let separatorIndex = StringPrototypeIndexOf(specifier\x2C '/');\x0d\n  let validPackageName = true;\x0d\n  let isScoped = false;\x0d\n  if (specifier[0] === '@') {\x0d\n    isScoped = true;\x0d\n    if (separatorIndex === -1 || specifier.length === 0) {\x0d\n      validPackageName = false;\x0d\n    } else {\x0d\n      separatorIndex = StringPrototypeIndexOf(\x0d\n        specifier\x2C '/'\x2C separatorIndex + 1);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const packageName = separatorIndex === -1 ?\x0d\n    specifier : StringPrototypeSlice(specifier\x2C 0\x2C separatorIndex);\x0d\n\x0d\n  // Package name cannot have leading . and cannot have percent-encoding or\x0d\n  // \\\\ separators.\x0d\n  if (RegExpPrototypeExec(invalidPackageNameRegEx\x2C packageName) !== null)\x0d\n    validPackageName = false;\x0d\n\x0d\n  if (!validPackageName) {\x0d\n    throw new ERR_INVALID_MODULE_SPECIFIER(\x0d\n      specifier\x2C 'is not a valid package name'\x2C fileURLToPath(base));\x0d\n  }\x0d\n\x0d\n  const packageSubpath = '.' + (separatorIndex === -1 ? '' :\x0d\n    StringPrototypeSlice(specifier\x2C separatorIndex));\x0d\n\x0d\n  return { packageName\x2C packageSubpath\x2C isScoped };\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction packageResolve(specifier\x2C base\x2C conditions) {\x0d\n  if (BuiltinModule.canBeRequiredByUsers(specifier) &&\x0d\n      BuiltinModule.canBeRequiredWithoutScheme(specifier)) {\x0d\n    return new URL('node:' + specifier);\x0d\n  }\x0d\n\x0d\n  const { packageName\x2C packageSubpath\x2C isScoped } =\x0d\n    parsePackageName(specifier\x2C base);\x0d\n\x0d\n  // ResolveSelf\x0d\n  const packageConfig = getPackageScopeConfig(base);\x0d\n  if (packageConfig.exists) {\x0d\n    const packageJSONUrl = pathToFileURL(packageConfig.pjsonPath);\x0d\n    if (packageConfig.name === packageName &&\x0d\n        packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let packageJSONUrl =\x0d\n    new URL('./node_modules/' + packageName + '/package.json'\x2C base);\x0d\n  let packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  let lastPath;\x0d\n  do {\x0d\n    const stat = tryStatSync(StringPrototypeSlice(packageJSONPath\x2C 0\x2C\x0d\n                                                  packageJSONPath.length - 13));\x0d\n    if (!stat.isDirectory()) {\x0d\n      lastPath = packageJSONPath;\x0d\n      packageJSONUrl = new URL((isScoped ?\x0d\n        '../../../../node_modules/' : '../../../node_modules/') +\x0d\n        packageName + '/package.json'\x2C packageJSONUrl);\x0d\n      packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Package match.\x0d\n    const packageConfig = getPackageConfig(packageJSONPath\x2C specifier\x2C base);\x0d\n    if (packageConfig.exports !== undefined && packageConfig.exports !== null) {\x0d\n      return packageExportsResolve(\x0d\n        packageJSONUrl\x2C packageSubpath\x2C packageConfig\x2C base\x2C conditions\x0d\n      ).resolved;\x0d\n    }\x0d\n\x0d\n    if (packageSubpath === '.') {\x0d\n      return legacyMainResolve(\x0d\n        packageJSONUrl\x2C\x0d\n        packageConfig\x2C\x0d\n        base\x0d\n      );\x0d\n    }\x0d\n\x0d\n    return new URL(packageSubpath\x2C packageJSONUrl);\x0d\n    // Cross-platform root check.\x0d\n  } while (packageJSONPath.length !== lastPath.length);\x0d\n\x0d\n  // eslint can't handle the above code.\x0d\n  // eslint-disable-next-line no-unreachable\x0d\n  throw new ERR_MODULE_NOT_FOUND(packageName\x2C fileURLToPath(base));\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isBareSpecifier(specifier) {\x0d\n  return specifier[0] && specifier[0] !== '/' && specifier[0] !== '.';\x0d\n}\x0d\n\x0d\nfunction isRelativeSpecifier(specifier) {\x0d\n  if (specifier[0] === '.') {\x0d\n    if (specifier.length === 1 || specifier[1] === '/') return true;\x0d\n    if (specifier[1] === '.') {\x0d\n      if (specifier.length === 2 || specifier[2] === '/') return true;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {\x0d\n  if (specifier === '') return false;\x0d\n  if (specifier[0] === '/') return true;\x0d\n  return isRelativeSpecifier(specifier);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @param {Set<string>} conditions\x0d\n * @param {boolean} preserveSymlinks\x0d\n * @returns {URL}\x0d\n */\x0d\nfunction moduleResolve(specifier\x2C base\x2C conditions\x2C preserveSymlinks) {\x0d\n  const isRemote = base.protocol === 'http:' ||\x0d\n    base.protocol === 'https:';\x0d\n  // Order swapped from spec for minor perf gain.\x0d\n  // Ok since relative URLs cannot parse as URLs.\x0d\n  let resolved;\x0d\n  if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n    resolved = new URL(specifier\x2C base);\x0d\n  } else if (!isRemote && specifier[0] === '#') {\x0d\n    ({ resolved } = packageImportsResolve(specifier\x2C base\x2C conditions));\x0d\n  } else {\x0d\n    try {\x0d\n      resolved = new URL(specifier);\x0d\n    } catch {\x0d\n      if (!isRemote) {\x0d\n        resolved = packageResolve(specifier\x2C base\x2C conditions);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (resolved.protocol !== 'file:')\x0d\n    return resolved;\x0d\n  return finalizeResolution(resolved\x2C base\x2C preserveSymlinks);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Try to resolve an import as a CommonJS module\x0d\n * @param {string} specifier\x0d\n * @param {string} parentURL\x0d\n * @returns {boolean|string}\x0d\n */\x0d\nfunction resolveAsCommonJS(specifier\x2C parentURL) {\x0d\n  try {\x0d\n    const parent = fileURLToPath(parentURL);\x0d\n    const tmpModule = new CJSModule(parent\x2C null);\x0d\n    tmpModule.paths = CJSModule._nodeModulePaths(parent);\x0d\n\x0d\n    let found = CJSModule._resolveFilename(specifier\x2C tmpModule\x2C false);\x0d\n\x0d\n    // If it is a relative specifier return the relative path\x0d\n    // to the parent\x0d\n    if (isRelativeSpecifier(specifier)) {\x0d\n      found = relative(parent\x2C found);\x0d\n      // Add '.separator if the path does not start with '..separator'\x0d\n      // This should be a safe assumption because when loading\x0d\n      // esm modules there should be always a file specified so\x0d\n      // there should not be a specifier like '..' or '.'\x0d\n      if (!StringPrototypeStartsWith(found\x2C `..${sep}`)) {\x0d\n        found = `.${sep}${found}`;\x0d\n      }\x0d\n    } else if (isBareSpecifier(specifier)) {\x0d\n      // If it is a bare specifier return the relative path within the\x0d\n      // module\x0d\n      const pkg = StringPrototypeSplit(specifier\x2C '/')[0];\x0d\n      const index = StringPrototypeIndexOf(found\x2C pkg);\x0d\n      if (index !== -1) {\x0d\n        found = StringPrototypeSlice(found\x2C index);\x0d\n      }\x0d\n    }\x0d\n    // Normalize the path separator to give a valid suggestion\x0d\n    // on Windows\x0d\n    if (process.platform === 'win32') {\x0d\n      found = RegExpPrototypeSymbolReplace(new RegExp(`\\\\${sep}`\x2C 'g')\x2C\x0d\n                                           found\x2C '/');\x0d\n    }\x0d\n    return found;\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n}\x0d\n\x0d\n// TODO(@JakobJingleheimer): de-dupe `specifier` & `parsed`\x0d\nfunction checkIfDisallowedImport(specifier\x2C parsed\x2C parsedParentURL) {\x0d\n  if (parsedParentURL) {\x0d\n    if (\x0d\n      parsedParentURL.protocol === 'http:' ||\x0d\n      parsedParentURL.protocol === 'https:'\x0d\n    ) {\x0d\n      if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n        // data: and blob: disallowed due to allowing file: access via\x0d\n        // indirection\x0d\n        if (parsed &&\x0d\n          parsed.protocol !== 'https:' &&\x0d\n          parsed.protocol !== 'http:'\x0d\n        ) {\x0d\n          throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n            specifier\x2C\x0d\n            parsedParentURL\x2C\x0d\n            'remote imports cannot import from a local location.'\x0d\n          );\x0d\n        }\x0d\n\x0d\n        return { url: parsed.href };\x0d\n      }\x0d\n      if (BuiltinModule.canBeRequiredByUsers(specifier) &&\x0d\n          BuiltinModule.canBeRequiredWithoutScheme(specifier)) {\x0d\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n          specifier\x2C\x0d\n          parsedParentURL\x2C\x0d\n          'remote imports cannot import from a local location.'\x0d\n        );\x0d\n      }\x0d\n\x0d\n      throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n        specifier\x2C\x0d\n        parsedParentURL\x2C\x0d\n        'only relative and absolute specifiers are supported.'\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction throwIfUnsupportedURLProtocol(url) {\x0d\n  if (url.protocol !== 'file:' && url.protocol !== 'data:' &&\x0d\n      url.protocol !== 'node:') {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(url);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction throwIfUnsupportedURLScheme(parsed\x2C experimentalNetworkImports) {\x0d\n  if (\x0d\n    parsed &&\x0d\n    parsed.protocol !== 'file:' &&\x0d\n    parsed.protocol !== 'data:' &&\x0d\n    (\x0d\n      !experimentalNetworkImports ||\x0d\n      (\x0d\n        parsed.protocol !== 'https:' &&\x0d\n        parsed.protocol !== 'http:'\x0d\n      )\x0d\n    )\x0d\n  ) {\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed\x2C ArrayPrototypeConcat(\x0d\n      'file'\x2C\x0d\n      'data'\x2C\x0d\n      experimentalNetworkImports ? ['https'\x2C 'http'] : []\x2C\x0d\n    ));\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function defaultResolve(specifier\x2C context = {}) {\x0d\n  let { parentURL\x2C conditions } = context;\x0d\n  if (parentURL && policy?.manifest) {\x0d\n    const redirects = policy.manifest.getDependencyMapper(parentURL);\x0d\n    if (redirects) {\x0d\n      const { resolve\x2C reaction } = redirects;\x0d\n      const destination = resolve(specifier\x2C new SafeSet(conditions));\x0d\n      let missing = true;\x0d\n      if (destination === true) {\x0d\n        missing = false;\x0d\n      } else if (destination) {\x0d\n        const href = destination.href;\x0d\n        return { url: href };\x0d\n      }\x0d\n      if (missing) {\x0d\n        // Prevent network requests from firing if resolution would be banned.\x0d\n        // Network requests can extract data by doing things like putting\x0d\n        // secrets in query params\x0d\n        reaction(new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n          parentURL\x2C\x0d\n          specifier\x2C\x0d\n          ArrayPrototypeJoin([...conditions]\x2C '\x2C '))\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let parsedParentURL;\x0d\n  if (parentURL) {\x0d\n    try {\x0d\n      parsedParentURL = new URL(parentURL);\x0d\n    } catch {\x0d\n      // Ignore exception\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let parsed;\x0d\n  try {\x0d\n    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {\x0d\n      parsed = new URL(specifier\x2C parsedParentURL);\x0d\n    } else {\x0d\n      parsed = new URL(specifier);\x0d\n    }\x0d\n\x0d\n    if (parsed.protocol === 'data:' ||\x0d\n      (experimentalNetworkImports &&\x0d\n        (\x0d\n          parsed.protocol === 'https:' ||\x0d\n          parsed.protocol === 'http:'\x0d\n        )\x0d\n      )\x0d\n    ) {\x0d\n      return { url: parsed.href };\x0d\n    }\x0d\n  } catch {\x0d\n    // Ignore exception\x0d\n  }\x0d\n\x0d\n  // There are multiple deep branches that can either throw or return; instead\x0d\n  // of duplicating that deeply nested logic for the possible returns\x2C DRY and\x0d\n  // check for a return. This seems the least gnarly.\x0d\n  const maybeReturn = checkIfDisallowedImport(\x0d\n    specifier\x2C\x0d\n    parsed\x2C\x0d\n    parsedParentURL\x2C\x0d\n  );\x0d\n\x0d\n  if (maybeReturn) return maybeReturn;\x0d\n\x0d\n  // This must come after checkIfDisallowedImport\x0d\n  if (parsed && parsed.protocol === 'node:') return { url: specifier };\x0d\n\x0d\n  throwIfUnsupportedURLScheme(parsed\x2C experimentalNetworkImports);\x0d\n\x0d\n  const isMain = parentURL === undefined;\x0d\n  if (isMain) {\x0d\n    parentURL = pathToFileURL(`${process.cwd()}/`).href;\x0d\n\x0d\n    // This is the initial entry point to the program\x2C and --input-type has\x0d\n    // been passed as an option; but --input-type can only be used with\x0d\n    // --eval\x2C --print or STDIN string input. It is not allowed with file\x0d\n    // input\x2C to avoid user confusion over how expansive the effect of the\x0d\n    // flag should be (i.e. entry point only\x2C package scope surrounding the\x0d\n    // entry point\x2C etc.).\x0d\n    if (typeFlag) throw new ERR_INPUT_TYPE_NOT_ALLOWED();\x0d\n  }\x0d\n\x0d\n  conditions = getConditionsSet(conditions);\x0d\n  let url;\x0d\n  try {\x0d\n    url = moduleResolve(specifier\x2C parentURL\x2C conditions\x2C\x0d\n                        isMain ? preserveSymlinksMain : preserveSymlinks);\x0d\n  } catch (error) {\x0d\n    // Try to give the user a hint of what would have been the\x0d\n    // resolved CommonJS module\x0d\n    if (error.code === 'ERR_MODULE_NOT_FOUND' ||\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT') {\x0d\n      if (StringPrototypeStartsWith(specifier\x2C 'file://')) {\x0d\n        specifier = fileURLToPath(specifier);\x0d\n      }\x0d\n      const found = resolveAsCommonJS(specifier\x2C parentURL);\x0d\n      if (found) {\x0d\n        // Modify the stack and message string to include the hint\x0d\n        const lines = StringPrototypeSplit(error.stack\x2C '\\n');\x0d\n        const hint = `Did you mean to import ${found}?`;\x0d\n        error.stack =\x0d\n          ArrayPrototypeShift(lines) + '\\n' +\x0d\n          hint + '\\n' +\x0d\n          ArrayPrototypeJoin(lines\x2C '\\n');\x0d\n        error.message += `\\n${hint}`;\x0d\n      }\x0d\n    }\x0d\n    throw error;\x0d\n  }\x0d\n\x0d\n  throwIfUnsupportedURLProtocol(url);\x0d\n\x0d\n  return {\x0d\n    // Do NOT cast `url` to a string: that will work even when there are real\x0d\n    // problems\x2C silencing them\x0d\n    url: url.href\x2C\x0d\n    format: defaultGetFormatWithoutErrors(url\x2C context)\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  DEFAULT_CONDITIONS\x2C\x0d\n  defaultResolve\x2C\x0d\n  encodedSepRegEx\x2C\x0d\n  getPackageScopeConfig\x2C\x0d\n  getPackageType\x2C\x0d\n  packageExportsResolve\x2C\x0d\n  packageImportsResolve\x2C\x0d\n};\x0d\n\x0d\n// cycle\x0d\nconst {\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n} = require('internal/modules/esm/get_format');\x0d\n\x0d\nif (policy) {\x0d\n  const $defaultResolve = defaultResolve;\x0d\n  module.exports.defaultResolve = async function defaultResolve(\x0d\n    specifier\x2C\x0d\n    context\x0d\n  ) {\x0d\n    const ret = await $defaultResolve(specifier\x2C context);\x0d\n    // This is a preflight check to avoid data exfiltration by query params etc.\x0d\n    policy.manifest.mightAllow(ret.url\x2C () =>\x0d\n      new ERR_MANIFEST_DEPENDENCY_MISSING(\x0d\n        context.parentURL\x2C\x0d\n        specifier\x2C\x0d\n        context.conditions\x0d\n      )\x0d\n    );\x0d\n    return ret;\x0d\n  };\x0d\n}\x0d\n
code-source-info,0x64be90594e,113,0,39376,C0O0C4O39376,,
code-creation,Function,10,370271,0x64be9069de,1187, node:internal/modules/esm/resolve:1:1,0x64be9058c8,~
code-source-info,0x64be9069de
code-creation,Eval,10,370816,0x64be909d3e,5, node:internal/modules/esm/package_config:1:1,0x64be909b58,~
script-source,114,node:internal/modules/esm/package_config,'use strict';\x0d\n\x0d\nconst {\x0d\n  JSONParse\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n} = primordials;\x0d\nconst { URL\x2C fileURLToPath } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INVALID_PACKAGE_CONFIG\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst packageJsonReader = require('internal/modules/package_json_reader');\x0d\nconst { filterOwnProperties } = require('internal/util');\x0d\n\x0d\n\x0d\n/**\x0d\n * @typedef {string | string[] | Record<string\x2C unknown>} Exports\x0d\n * @typedef {'module' | 'commonjs'} PackageType\x0d\n * @typedef {{\x0d\n *   pjsonPath: string\x2C\x0d\n *   exports?: ExportConfig\x2C\x0d\n *   name?: string\x2C\x0d\n *   main?: string\x2C\x0d\n *   type?: PackageType\x2C\x0d\n * }} PackageConfig\x0d\n */\x0d\n\x0d\n/** @type {Map<string\x2C PackageConfig>} */\x0d\nconst packageJSONCache = new SafeMap();\x0d\n\x0d\n\x0d\n/**\x0d\n * @param {string} path\x0d\n * @param {string} specifier\x0d\n * @param {string | URL | undefined} base\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageConfig(path\x2C specifier\x2C base) {\x0d\n  const existing = packageJSONCache.get(path);\x0d\n  if (existing !== undefined) {\x0d\n    return existing;\x0d\n  }\x0d\n  const source = packageJsonReader.read(path).string;\x0d\n  if (source === undefined) {\x0d\n    const packageConfig = {\x0d\n      pjsonPath: path\x2C\x0d\n      exists: false\x2C\x0d\n      main: undefined\x2C\x0d\n      name: undefined\x2C\x0d\n      type: 'none'\x2C\x0d\n      exports: undefined\x2C\x0d\n      imports: undefined\x2C\x0d\n    };\x0d\n    packageJSONCache.set(path\x2C packageConfig);\x0d\n    return packageConfig;\x0d\n  }\x0d\n\x0d\n  let packageJSON;\x0d\n  try {\x0d\n    packageJSON = JSONParse(source);\x0d\n  } catch (error) {\x0d\n    throw new ERR_INVALID_PACKAGE_CONFIG(\x0d\n      path\x2C\x0d\n      (base ? `"${specifier}" from ` : '') + fileURLToPath(base || specifier)\x2C\x0d\n      error.message\x0d\n    );\x0d\n  }\x0d\n\x0d\n  let { imports\x2C main\x2C name\x2C type } = filterOwnProperties(packageJSON\x2C ['imports'\x2C 'main'\x2C 'name'\x2C 'type']);\x0d\n  const exports = ObjectPrototypeHasOwnProperty(packageJSON\x2C 'exports') ? packageJSON.exports : undefined;\x0d\n  if (typeof imports !== 'object' || imports === null) {\x0d\n    imports = undefined;\x0d\n  }\x0d\n  if (typeof main !== 'string') {\x0d\n    main = undefined;\x0d\n  }\x0d\n  if (typeof name !== 'string') {\x0d\n    name = undefined;\x0d\n  }\x0d\n  // Ignore unknown types for forwards compatibility\x0d\n  if (type !== 'module' && type !== 'commonjs') {\x0d\n    type = 'none';\x0d\n  }\x0d\n\x0d\n  const packageConfig = {\x0d\n    pjsonPath: path\x2C\x0d\n    exists: true\x2C\x0d\n    main\x2C\x0d\n    name\x2C\x0d\n    type\x2C\x0d\n    exports\x2C\x0d\n    imports\x2C\x0d\n  };\x0d\n  packageJSONCache.set(path\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n\x0d\n/**\x0d\n * @param {URL | string} resolved\x0d\n * @returns {PackageConfig}\x0d\n */\x0d\nfunction getPackageScopeConfig(resolved) {\x0d\n  let packageJSONUrl = new URL('./package.json'\x2C resolved);\x0d\n  while (true) {\x0d\n    const packageJSONPath = packageJSONUrl.pathname;\x0d\n    if (StringPrototypeEndsWith(packageJSONPath\x2C 'node_modules/package.json')) {\x0d\n      break;\x0d\n    }\x0d\n    const packageConfig = getPackageConfig(fileURLToPath(packageJSONUrl)\x2C resolved);\x0d\n    if (packageConfig.exists) {\x0d\n      return packageConfig;\x0d\n    }\x0d\n\x0d\n    const lastPackageJSONUrl = packageJSONUrl;\x0d\n    packageJSONUrl = new URL('../package.json'\x2C packageJSONUrl);\x0d\n\x0d\n    // Terminates at root where ../package.json equals ../../package.json\x0d\n    // (can't just check "/package.json" for Windows support).\x0d\n    if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) {\x0d\n      break;\x0d\n    }\x0d\n  }\x0d\n  const packageJSONPath = fileURLToPath(packageJSONUrl);\x0d\n  const packageConfig = {\x0d\n    pjsonPath: packageJSONPath\x2C\x0d\n    exists: false\x2C\x0d\n    main: undefined\x2C\x0d\n    name: undefined\x2C\x0d\n    type: 'none'\x2C\x0d\n    exports: undefined\x2C\x0d\n    imports: undefined\x2C\x0d\n  };\x0d\n  packageJSONCache.set(packageJSONPath\x2C packageConfig);\x0d\n  return packageConfig;\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  getPackageConfig\x2C\x0d\n  getPackageScopeConfig\x2C\x0d\n};\x0d\n
code-source-info,0x64be909d3e,114,0,3771,C0O0C4O3771,,
code-creation,Function,10,371280,0x64be909f2e,162, node:internal/modules/esm/package_config:1:1,0x64be909cb8,~
code-source-info,0x64be909f2e,114,0,3771,C0O0C43O28C49O42C55O76C60O88C66O163C69O163C74O140C80O145C86O233C89O233C94O259C99O200C105O296C108O296C112O296C114O378C117O378C122O354C128O765C130O765C135O765C137O3700C144O3722C150O3743C156O3715C161O3770,,
code-creation,Eval,10,371808,0x64be90aba6,5, node:internal/modules/esm/get_format:1:1,0x64be90a920,~
script-source,115,node:internal/modules/esm/get_format,'use strict';\x0d\nconst {\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n} = primordials;\x0d\nconst { basename\x2C extname\x2C relative } = require('path');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { fetchModule } = require('internal/modules/esm/fetch_module');\x0d\nconst {\x0d\n  extensionFormatMap\x2C\x0d\n  getLegacyExtensionFormat\x2C\x0d\n  mimeToFormat\x2C\x0d\n} = require('internal/modules/esm/formats');\x0d\n\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\nconst experimentalSpecifierResolution =\x0d\n  getOptionValue('--experimental-specifier-resolution');\x0d\nconst { getPackageType\x2C getPackageScopeConfig } = require('internal/modules/esm/resolve');\x0d\nconst { URL\x2C fileURLToPath } = require('internal/url');\x0d\nconst { ERR_UNKNOWN_FILE_EXTENSION } = require('internal/errors').codes;\x0d\n\x0d\nconst protocolHandlers = {\x0d\n  '__proto__': null\x2C\x0d\n  'data:': getDataProtocolModuleFormat\x2C\x0d\n  'file:': getFileProtocolModuleFormat\x2C\x0d\n  'http:': getHttpProtocolModuleFormat\x2C\x0d\n  'https:': getHttpProtocolModuleFormat\x2C\x0d\n  'node:'() { return 'builtin'; }\x2C\x0d\n};\x0d\n\x0d\nfunction getDataProtocolModuleFormat(parsed) {\x0d\n  const { 1: mime } = RegExpPrototypeExec(\x0d\n    /^([^/]+\\/[^;\x2C]+)(?:[^\x2C]*?)(;base64)?\x2C/\x2C\x0d\n    parsed.pathname\x2C\x0d\n  ) || [ null\x2C null\x2C null ];\x0d\n\x0d\n  return mimeToFormat(mime);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @param {boolean} ignoreErrors\x0d\n * @returns {string}\x0d\n */\x0d\nfunction getFileProtocolModuleFormat(url\x2C context\x2C ignoreErrors) {\x0d\n  const filepath = fileURLToPath(url);\x0d\n  const ext = extname(filepath);\x0d\n  if (ext === '.js') {\x0d\n    return getPackageType(url) === 'module' ? 'module' : 'commonjs';\x0d\n  }\x0d\n\x0d\n  const format = extensionFormatMap[ext];\x0d\n  if (format) return format;\x0d\n\x0d\n  if (experimentalSpecifierResolution !== 'node') {\x0d\n    // Explicit undefined return indicates load hook should rerun format check\x0d\n    if (ignoreErrors) return undefined;\x0d\n    let suggestion = '';\x0d\n    if (getPackageType(url) === 'module' && ext === '') {\x0d\n      const config = getPackageScopeConfig(url);\x0d\n      const fileBasename = basename(filepath);\x0d\n      const relativePath = StringPrototypeSlice(relative(config.pjsonPath\x2C filepath)\x2C 1);\x0d\n      suggestion = 'Loading extensionless files is not supported inside of ' +\x0d\n        '"type":"module" package.json contexts. The package.json file ' +\x0d\n        `${config.pjsonPath} caused this "type":"module" context. Try ` +\x0d\n        `changing ${filepath} to have a file extension. Note the "bin" ` +\x0d\n        'field of package.json can point to a file with an extension\x2C for example ' +\x0d\n        `{"type":"module"\x2C"bin":{"${fileBasename}":"${relativePath}.js"}}`;\x0d\n    }\x0d\n    throw new ERR_UNKNOWN_FILE_EXTENSION(ext\x2C filepath\x2C suggestion);\x0d\n  }\x0d\n\x0d\n  return getLegacyExtensionFormat(ext) ?? null;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | undefined} only works when enabled\x0d\n */\x0d\nfunction getHttpProtocolModuleFormat(url\x2C context) {\x0d\n  if (experimentalNetworkImports) {\x0d\n    return PromisePrototypeThen(\x0d\n      PromiseResolve(fetchModule(url\x2C context))\x2C\x0d\n      (entry) => {\x0d\n        return mimeToFormat(entry.headers['content-type']);\x0d\n      }\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | URL['href']} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | string | undefined} only works when enabled\x0d\n */\x0d\nfunction defaultGetFormatWithoutErrors(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  if (!ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol))\x0d\n    return null;\x0d\n  return protocolHandlers[parsed.protocol](parsed\x2C context\x2C true);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL | URL['href']} url\x0d\n * @param {{parentURL: string}} context\x0d\n * @returns {Promise<string> | string | undefined} only works when enabled\x0d\n */\x0d\nfunction defaultGetFormat(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  return ObjectPrototypeHasOwnProperty(protocolHandlers\x2C parsed.protocol) ?\x0d\n    protocolHandlers[parsed.protocol](parsed\x2C context\x2C false) :\x0d\n    null;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultGetFormat\x2C\x0d\n  defaultGetFormatWithoutErrors\x2C\x0d\n  extensionFormatMap\x2C\x0d\n};\x0d\n
code-source-info,0x64be90aba6,115,0,4214,C0O0C4O4214,,
code-creation,Function,10,372154,0x64be90b016,348, node:internal/modules/esm/get_format:1:1,0x64be90ab20,~
code-source-info,0x64be90b016,115,0,4214,C0O0C90O26C96O60C102O85C108O104C114O128C120O209C123O209C128O177C134O187C140O196C146O254C149O254C154O235C159O308C162O308C167O292C173O437C176O437C181O366C187O389C193O418C199O519C202O519C206O519C208O613C211O613C215O613C217O719C220O719C225O677C231O693C237O792C240O792C245O769C251O774C257O857C260O857C265O883C270O826C276O919C283O955C289O996C295O1037C301O1079C305O1111C315O919C317O4112C324O4134C330O4155C336O4189C342O4127C347O4213,,
code-creation,Eval,10,372635,0x64be90be9e,5, node:internal/modules/esm/fetch_module:1:1,0x64be90bbb8,~
script-source,116,node:internal/modules/esm/fetch_module,'use strict';\x0d\nconst {\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n} = primordials;\x0d\nconst {\x0d\n  Buffer: { concat: BufferConcat }\x2C\x0d\n} = require('buffer');\x0d\nconst {\x0d\n  ERR_NETWORK_IMPORT_DISALLOWED\x2C\x0d\n  ERR_NETWORK_IMPORT_BAD_RESPONSE\x2C\x0d\n  ERR_MODULE_NOT_FOUND\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst { URL } = require('internal/url');\x0d\nconst net = require('net');\x0d\nconst { once } = require('events');\x0d\nconst { compose } = require('stream');\x0d\n/**\x0d\n * @typedef CacheEntry\x0d\n * @property {Promise<string> | string} resolvedHREF\x0d\n * @property {Record<string\x2C string>} headers\x0d\n * @property {Promise<Buffer> | Buffer} body\x0d\n */\x0d\n\x0d\n/**\x0d\n * Only for GET requests\x2C other requests would need new Map\x0d\n * HTTP cache semantics keep diff caches\x0d\n *\x0d\n * It caches either the promise or the cache entry since import.meta.url needs\x0d\n * the value synchronously for the response location after all redirects.\x0d\n *\x0d\n * Maps HREF to pending cache entry\x0d\n * @type {Map<string\x2C Promise<CacheEntry> | CacheEntry>}\x0d\n */\x0d\nconst cacheForGET = new SafeMap();\x0d\n\x0d\n// [1] The V8 snapshot doesn't like some C++ APIs to be loaded eagerly. Do it\x0d\n// lazily/at runtime and not top level of an internal module.\x0d\n\x0d\n// [2] Creating a new agent instead of using the gloabl agent improves\x0d\n// performance and precludes the agent becoming tainted.\x0d\n\x0d\nlet HTTPSAgent;\x0d\nfunction HTTPSGet(url\x2C opts) {\x0d\n  const https = require('https'); // [1]\x0d\n  HTTPSAgent ??= new https.Agent({ // [2]\x0d\n    keepAlive: true\x2C\x0d\n  });\x0d\n  return https.get(url\x2C {\x0d\n    agent: HTTPSAgent\x2C\x0d\n    ...opts\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nlet HTTPAgent;\x0d\nfunction HTTPGet(url\x2C opts) {\x0d\n  const http = require('http'); // [1]\x0d\n  HTTPAgent ??= new http.Agent({ // [2]\x0d\n    keepAlive: true\x2C\x0d\n  });\x0d\n  return http.get(url\x2C {\x0d\n    agent: HTTPAgent\x2C\x0d\n    ...opts\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction dnsLookup(name\x2C opts) {\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  dnsLookup = require('dns/promises').lookup;\x0d\n  return dnsLookup(name\x2C opts);\x0d\n}\x0d\n\x0d\nlet zlib;\x0d\nfunction createBrotliDecompress() {\x0d\n  zlib ??= require('zlib'); // [1]\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  createBrotliDecompress = zlib.createBrotliDecompress;\x0d\n  return createBrotliDecompress();\x0d\n}\x0d\n\x0d\nfunction createUnzip() {\x0d\n  zlib ??= require('zlib'); // [1]\x0d\n  // eslint-disable-next-line no-func-assign\x0d\n  createUnzip = zlib.createUnzip;\x0d\n  return createUnzip();\x0d\n}\x0d\n\x0d\n/**\x0d\n * Redirection status code as per section 6.4 of RFC 7231:\x0d\n * https://datatracker.ietf.org/doc/html/rfc7231#section-6.4\x0d\n * and RFC 7238:\x0d\n * https://datatracker.ietf.org/doc/html/rfc7238\x0d\n * @param {number} statusCode\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isRedirect(statusCode) {\x0d\n  switch (statusCode) {\x0d\n    case 300: // Multiple Choices\x0d\n    case 301: // Moved Permanently\x0d\n    case 302: // Found\x0d\n    case 303: // See Other\x0d\n    case 307: // Temporary Redirect\x0d\n    case 308: // Permanent Redirect\x0d\n      return true;\x0d\n    default:\x0d\n      return false;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {URL} parsed\x0d\n * @returns {Promise<CacheEntry> | CacheEntry}\x0d\n */\x0d\nfunction fetchWithRedirects(parsed) {\x0d\n  const existing = cacheForGET.get(parsed.href);\x0d\n  if (existing) {\x0d\n    return existing;\x0d\n  }\x0d\n  const handler = parsed.protocol === 'http:' ? HTTPGet : HTTPSGet;\x0d\n  const result = (async () => {\x0d\n    const req = handler(parsed\x2C {\x0d\n      headers: { Accept: '*/*' }\x2C\x0d\n    });\x0d\n    // Note that `once` is used here to handle `error` and that it hits the\x0d\n    // `finally` on network error/timeout.\x0d\n    const { 0: res } = await once(req\x2C 'response');\x0d\n    try {\x0d\n      const hasLocation = ObjectPrototypeHasOwnProperty(res.headers\x2C 'location');\x0d\n      if (isRedirect(res.statusCode) && hasLocation) {\x0d\n        const location = new URL(res.headers.location\x2C parsed);\x0d\n        if (location.protocol !== 'http:' && location.protocol !== 'https:') {\x0d\n          throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n            res.headers.location\x2C\x0d\n            parsed.href\x2C\x0d\n            'cannot redirect to non-network location'\x0d\n          );\x0d\n        }\x0d\n        const entry = await fetchWithRedirects(location);\x0d\n        cacheForGET.set(parsed.href\x2C entry);\x0d\n        return entry;\x0d\n      }\x0d\n      if (res.statusCode === 404) {\x0d\n        const err = new ERR_MODULE_NOT_FOUND(parsed.href\x2C null);\x0d\n        err.message = `Cannot find module '${parsed.href}'\x2C HTTP 404`;\x0d\n        throw err;\x0d\n      }\x0d\n      // This condition catches all unsupported status codes\x2C including\x0d\n      // 3xx redirection codes without `Location` HTTP header.\x0d\n      if (res.statusCode < 200 || res.statusCode >= 300) {\x0d\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n          res.headers.location\x2C\x0d\n          parsed.href\x2C\x0d\n          'cannot redirect to non-network location');\x0d\n      }\x0d\n      const { headers } = res;\x0d\n      const contentType = headers['content-type'];\x0d\n      if (!contentType) {\x0d\n        throw new ERR_NETWORK_IMPORT_BAD_RESPONSE(\x0d\n          parsed.href\x2C\x0d\n          "the 'Content-Type' header is required"\x0d\n        );\x0d\n      }\x0d\n      /**\x0d\n       * @type {CacheEntry}\x0d\n       */\x0d\n      const entry = {\x0d\n        resolvedHREF: parsed.href\x2C\x0d\n        headers: {\x0d\n          'content-type': res.headers['content-type']\x2C\x0d\n        }\x2C\x0d\n        body: (async () => {\x0d\n          let bodyStream = res;\x0d\n          if (res.headers['content-encoding'] === 'br') {\x0d\n            bodyStream = compose(res\x2C createBrotliDecompress());\x0d\n          } else if (\x0d\n            res.headers['content-encoding'] === 'gzip' ||\x0d\n            res.headers['content-encoding'] === 'deflate'\x0d\n          ) {\x0d\n            bodyStream = compose(res\x2C createUnzip());\x0d\n          }\x0d\n          const buffers = await bodyStream.toArray();\x0d\n          const body = BufferConcat(buffers);\x0d\n          entry.body = body;\x0d\n          return body;\x0d\n        })()\x2C\x0d\n      };\x0d\n      cacheForGET.set(parsed.href\x2C entry);\x0d\n      await entry.body;\x0d\n      return entry;\x0d\n    } finally {\x0d\n      req.destroy();\x0d\n    }\x0d\n  })();\x0d\n  cacheForGET.set(parsed.href\x2C result);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nconst allowList = new net.BlockList();\x0d\nallowList.addAddress('::1'\x2C 'ipv6');\x0d\nallowList.addRange('127.0.0.1'\x2C '127.255.255.255');\x0d\n\x0d\n/**\x0d\n * Returns if an address has local status by if it is going to a local\x0d\n * interface or is an address resolved by DNS to be a local interface\x0d\n * @param {string} hostname url.hostname to test\x0d\n * @returns {Promise<boolean>}\x0d\n */\x0d\nasync function isLocalAddress(hostname) {\x0d\n  try {\x0d\n    if (\x0d\n      StringPrototypeStartsWith(hostname\x2C '[') &&\x0d\n      StringPrototypeEndsWith(hostname\x2C ']')\x0d\n    ) {\x0d\n      hostname = StringPrototypeSlice(hostname\x2C 1\x2C -1);\x0d\n    }\x0d\n    const addr = await dnsLookup(hostname\x2C { verbatim: true });\x0d\n    const ipv = addr.family === 4 ? 'ipv4' : 'ipv6';\x0d\n    return allowList.check(addr.address\x2C ipv);\x0d\n  } catch {\x0d\n    // If it errored\x2C the answer is no.\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Fetches a location with a shared cache following redirects.\x0d\n * Does not respect HTTP cache headers.\x0d\n *\x0d\n * This splits the header and body Promises so that things only needing\x0d\n * headers don't need to wait on the body.\x0d\n *\x0d\n * In cases where the request & response have already settled\x2C this returns the\x0d\n * cache value synchronously.\x0d\n *\x0d\n * @param {URL} parsed\x0d\n * @param {ESModuleContext} context\x0d\n * @returns {ReturnType<typeof fetchWithRedirects>}\x0d\n */\x0d\nfunction fetchModule(parsed\x2C { parentURL }) {\x0d\n  const { href } = parsed;\x0d\n  const existing = cacheForGET.get(href);\x0d\n  if (existing) {\x0d\n    return existing;\x0d\n  }\x0d\n  if (parsed.protocol === 'http:') {\x0d\n    return PromisePrototypeThen(isLocalAddress(parsed.hostname)\x2C (is) => {\x0d\n      if (is !== true) {\x0d\n        throw new ERR_NETWORK_IMPORT_DISALLOWED(\x0d\n          href\x2C\x0d\n          parentURL\x2C\x0d\n          'http can only be used to load local resources (use https instead).'\x0d\n        );\x0d\n      }\x0d\n      return fetchWithRedirects(parsed);\x0d\n    });\x0d\n  }\x0d\n  return fetchWithRedirects(parsed);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  fetchModule\x2C\x0d\n};\x0d\n
code-source-info,0x64be90be9e,116,0,8018,C0O0C4O8018,,
code-creation,Function,10,373310,0x64be90c356,355, node:internal/modules/esm/fetch_module:1:1,0x64be90be18,~
code-source-info,0x64be90c356,116,0,8018,C0O0C113O26C119O60C125O85C130O97C136O125C142O150C148O246C154O246C159O246C164O225C170O374C176O374C181O400C186O277C192O311C198O347C204O425C210O425C215O417C221O463C227O463C232O497C238O497C243O488C249O537C255O537C260O525C266O1131C268O1131C273O1131C275O1429C276O1429C278O1669C279O1669C281O2066C282O2066C284O6093C289O6085C294O6085C296O6107C299O6117C310O6117C316O6145C319O6155C330O6155C336O7978C343O8000C349O7993C354O8017,,
code-creation,Eval,10,375677,0x64be90ee0e,5, node:net:1:1,0x64be90e570,~
script-source,117,node:net,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  Boolean\x2C\x0d\n  Number\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n  ObjectCreate\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst stream = require('stream');\x0d\nlet debug = require('internal/util/debuglog').debuglog('net'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  normalizedArgsSymbol\x2C\x0d\n  makeSyncWrite\x0d\n} = require('internal/net');\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  UV_EADDRINUSE\x2C\x0d\n  UV_EINVAL\x2C\x0d\n  UV_ENOTCONN\x0d\n} = internalBinding('uv');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\nconst { ShutdownWrap } = internalBinding('stream_wrap');\x0d\nconst {\x0d\n  TCP\x2C\x0d\n  TCPConnectWrap\x2C\x0d\n  constants: TCPConstants\x0d\n} = internalBinding('tcp_wrap');\x0d\nconst {\x0d\n  Pipe\x2C\x0d\n  PipeConnectWrap\x2C\x0d\n  constants: PipeConstants\x0d\n} = internalBinding('pipe_wrap');\x0d\nconst {\x0d\n  newAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  symbols: { async_id_symbol\x2C owner_symbol }\x0d\n} = require('internal/async_hooks');\x0d\nconst {\x0d\n  writevGeneric\x2C\x0d\n  writeGeneric\x2C\x0d\n  onStreamRead\x2C\x0d\n  kAfterAsyncWrite\x2C\x0d\n  kHandle\x2C\x0d\n  kUpdateTimer\x2C\x0d\n  setStreamTimeout\x2C\x0d\n  kBuffer\x2C\x0d\n  kBufferCb\x2C\x0d\n  kBufferGen\x0d\n} = require('internal/stream_base_commons');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ADDRESS_FAMILY\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FD_TYPE\x2C\x0d\n    ERR_INVALID_IP_ADDRESS\x2C\x0d\n    ERR_INVALID_HANDLE_TYPE\x2C\x0d\n    ERR_SERVER_ALREADY_LISTEN\x2C\x0d\n    ERR_SERVER_NOT_RUNNING\x2C\x0d\n    ERR_SOCKET_CLOSED\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n  }\x2C\x0d\n  errnoException\x2C\x0d\n  exceptionWithHostPort\x2C\x0d\n  genericNodeError\x2C\x0d\n  uvExceptionWithHostPort\x2C\x0d\n} = require('internal/errors');\x0d\nconst { isUint8Array } = require('internal/util/types');\x0d\nconst { queueMicrotask } = require('internal/process/task_queues');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateNumber\x2C\x0d\n  validatePort\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\nconst kLastWriteQueueSize = Symbol('lastWriteQueueSize');\x0d\nconst {\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n} = require('internal/dtrace');\x0d\n\x0d\n// Lazy loaded to improve startup performance.\x0d\nlet cluster;\x0d\nlet dns;\x0d\nlet BlockList;\x0d\nlet SocketAddress;\x0d\n\x0d\nconst { clearTimeout } = require('timers');\x0d\nconst { kTimeout } = require('internal/timers');\x0d\n\x0d\nconst DEFAULT_IPV4_ADDR = '0.0.0.0';\x0d\nconst DEFAULT_IPV6_ADDR = '::';\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst noop = () => {};\x0d\n\x0d\nconst kPerfHooksNetConnectContext = Symbol('kPerfHooksNetConnectContext');\x0d\n\x0d\nconst dc = require('diagnostics_channel');\x0d\nconst netClientSocketChannel = dc.channel('net.client.socket');\x0d\nconst netServerSocketChannel = dc.channel('net.server.socket');\x0d\n\x0d\nconst {\x0d\n  hasObserver\x2C\x0d\n  startPerf\x2C\x0d\n  stopPerf\x2C\x0d\n} = require('internal/perf/observe');\x0d\n\x0d\nfunction getFlags(ipv6Only) {\x0d\n  return ipv6Only === true ? TCPConstants.UV_TCP_IPV6ONLY : 0;\x0d\n}\x0d\n\x0d\nfunction createHandle(fd\x2C is_server) {\x0d\n  validateInt32(fd\x2C 'fd'\x2C 0);\x0d\n  const type = guessHandleType(fd);\x0d\n  if (type === 'PIPE') {\x0d\n    return new Pipe(\x0d\n      is_server ? PipeConstants.SERVER : PipeConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  if (type === 'TCP') {\x0d\n    return new TCP(\x0d\n      is_server ? TCPConstants.SERVER : TCPConstants.SOCKET\x0d\n    );\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_FD_TYPE(type);\x0d\n}\x0d\n\x0d\n\x0d\nfunction getNewAsyncId(handle) {\x0d\n  return (!handle || typeof handle.getAsyncId !== 'function') ?\x0d\n    newAsyncId() : handle.getAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\nfunction isPipeName(s) {\x0d\n  return typeof s === 'string' && toNumber(s) === false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new TCP or IPC server\x0d\n * @param {{\x0d\n *   allowHalfOpen?: boolean;\x0d\n *   pauseOnConnect?: boolean;\x0d\n *   }} [options]\x0d\n * @param {Function} [connectionListener]\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nfunction createServer(options\x2C connectionListener) {\x0d\n  return new Server(options\x2C connectionListener);\x0d\n}\x0d\n\x0d\n\x0d\n// Target API:\x0d\n//\x0d\n// let s = net.connect({port: 80\x2C host: 'google.com'}\x2C function() {\x0d\n//   ...\x0d\n// });\x0d\n//\x0d\n// There are various forms:\x0d\n//\x0d\n// connect(options\x2C [cb])\x0d\n// connect(port\x2C [host]\x2C [cb])\x0d\n// connect(path\x2C [cb]);\x0d\n//\x0d\nfunction connect(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  const options = normalized[0];\x0d\n  debug('createConnection'\x2C normalized);\x0d\n  const socket = new Socket(options);\x0d\n  if (netClientSocketChannel.hasSubscribers) {\x0d\n    netClientSocketChannel.publish({\x0d\n      socket\x2C\x0d\n    });\x0d\n  }\x0d\n  if (options.timeout) {\x0d\n    socket.setTimeout(options.timeout);\x0d\n  }\x0d\n\x0d\n  return socket.connect(normalized);\x0d\n}\x0d\n\x0d\n\x0d\n// Returns an array [options\x2C cb]\x2C where options is an object\x2C\x0d\n// cb is either a function or null.\x0d\n// Used to normalize arguments of Socket.prototype.connect() and\x0d\n// Server.prototype.listen(). Possible combinations of parameters:\x0d\n//   (options[...][\x2C cb])\x0d\n//   (path[...][\x2C cb])\x0d\n//   ([port][\x2C host][...][\x2C cb])\x0d\n// For Socket.prototype.connect()\x2C the [...] part is ignored\x0d\n// For Server.prototype.listen()\x2C the [...] part is [\x2C backlog]\x0d\n// but will not be handled here (handled in listen())\x0d\nfunction normalizeArgs(args) {\x0d\n  let arr;\x0d\n\x0d\n  if (args.length === 0) {\x0d\n    arr = [{}\x2C null];\x0d\n    arr[normalizedArgsSymbol] = true;\x0d\n    return arr;\x0d\n  }\x0d\n\x0d\n  const arg0 = args[0];\x0d\n  let options = {};\x0d\n  if (typeof arg0 === 'object' && arg0 !== null) {\x0d\n    // (options[...][\x2C cb])\x0d\n    options = arg0;\x0d\n  } else if (isPipeName(arg0)) {\x0d\n    // (path[...][\x2C cb])\x0d\n    options.path = arg0;\x0d\n  } else {\x0d\n    // ([port][\x2C host][...][\x2C cb])\x0d\n    options.port = arg0;\x0d\n    if (args.length > 1 && typeof args[1] === 'string') {\x0d\n      options.host = args[1];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const cb = args[args.length - 1];\x0d\n  if (typeof cb !== 'function')\x0d\n    arr = [options\x2C null];\x0d\n  else\x0d\n    arr = [options\x2C cb];\x0d\n\x0d\n  arr[normalizedArgsSymbol] = true;\x0d\n  return arr;\x0d\n}\x0d\n\x0d\n\x0d\n// Called when creating new Socket\x2C or when re-using a closed Socket\x0d\nfunction initSocketHandle(self) {\x0d\n  self._undestroy();\x0d\n  self._sockname = null;\x0d\n\x0d\n  // Handle creation may be deferred to bind() or connect() time.\x0d\n  if (self._handle) {\x0d\n    self._handle[owner_symbol] = self;\x0d\n    self._handle.onread = onStreamRead;\x0d\n    self[async_id_symbol] = getNewAsyncId(self._handle);\x0d\n\x0d\n    let userBuf = self[kBuffer];\x0d\n    if (userBuf) {\x0d\n      const bufGen = self[kBufferGen];\x0d\n      if (bufGen !== null) {\x0d\n        userBuf = bufGen();\x0d\n        if (!isUint8Array(userBuf))\x0d\n          return;\x0d\n        self[kBuffer] = userBuf;\x0d\n      }\x0d\n      self._handle.useUserBuffer(userBuf);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction closeSocketHandle(self\x2C isException\x2C isCleanupPending = false) {\x0d\n  if (self._handle) {\x0d\n    self._handle.close(() => {\x0d\n      debug('emit close');\x0d\n      self.emit('close'\x2C isException);\x0d\n      if (isCleanupPending) {\x0d\n        self._handle.onread = noop;\x0d\n        self._handle = null;\x0d\n        self._sockname = null;\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nconst kBytesRead = Symbol('kBytesRead');\x0d\nconst kBytesWritten = Symbol('kBytesWritten');\x0d\nconst kSetNoDelay = Symbol('kSetNoDelay');\x0d\nconst kSetKeepAlive = Symbol('kSetKeepAlive');\x0d\nconst kSetKeepAliveInitialDelay = Symbol('kSetKeepAliveInitialDelay');\x0d\n\x0d\nfunction Socket(options) {\x0d\n  if (!(this instanceof Socket)) return new Socket(options);\x0d\n  if (options?.objectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      'options.objectMode'\x2C\x0d\n      options.objectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  } else if (options?.readableObjectMode || options?.writableObjectMode) {\x0d\n    throw new ERR_INVALID_ARG_VALUE(\x0d\n      `options.${\x0d\n        options.readableObjectMode ? 'readableObjectMode' : 'writableObjectMode'\x0d\n      }`\x2C\x0d\n      options.readableObjectMode || options.writableObjectMode\x2C\x0d\n      'is not supported'\x0d\n    );\x0d\n  }\x0d\n  if (typeof options?.keepAliveInitialDelay !== 'undefined') {\x0d\n    validateNumber(\x0d\n      options?.keepAliveInitialDelay\x2C 'options.keepAliveInitialDelay'\x0d\n    );\x0d\n\x0d\n    if (options.keepAliveInitialDelay < 0) {\x0d\n      options.keepAliveInitialDelay = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this.connecting = false;\x0d\n  // Problem with this is that users can supply their own handle\x2C that may not\x0d\n  // have _handle.getAsyncId(). In this case an[async_id_symbol] should\x0d\n  // probably be supplied by async_hooks.\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._hadError = false;\x0d\n  this[kHandle] = null;\x0d\n  this._parent = null;\x0d\n  this._host = null;\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n  this[kTimeout] = null;\x0d\n  this[kBuffer] = null;\x0d\n  this[kBufferCb] = null;\x0d\n  this[kBufferGen] = null;\x0d\n  this._closeAfterHandlingError = false;\x0d\n\x0d\n  if (typeof options === 'number')\x0d\n    options = { fd: options }; // Legacy interface.\x0d\n  else\x0d\n    options = { ...options };\x0d\n\x0d\n  // Default to *not* allowing half open sockets.\x0d\n  options.allowHalfOpen = Boolean(options.allowHalfOpen);\x0d\n  // For backwards compat do not emit close on destroy.\x0d\n  options.emitClose = false;\x0d\n  options.autoDestroy = true;\x0d\n  // Handle strings directly.\x0d\n  options.decodeStrings = false;\x0d\n  stream.Duplex.call(this\x2C options);\x0d\n\x0d\n  if (options.handle) {\x0d\n    this._handle = options.handle; // private\x0d\n    this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  } else if (options.fd !== undefined) {\x0d\n    const { fd } = options;\x0d\n    let err;\x0d\n\x0d\n    // createHandle will throw ERR_INVALID_FD_TYPE if `fd` is not\x0d\n    // a valid `PIPE` or `TCP` descriptor\x0d\n    this._handle = createHandle(fd\x2C false);\x0d\n\x0d\n    err = this._handle.open(fd);\x0d\n\x0d\n    // While difficult to fabricate\x2C in some architectures\x0d\n    // `open` may return an error code for valid file descriptors\x0d\n    // which cannot be opened. This is difficult to test as most\x0d\n    // un-openable fds will throw on `createHandle`\x0d\n    if (err)\x0d\n      throw errnoException(err\x2C 'open');\x0d\n\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n\x0d\n    if ((fd === 1 || fd === 2) &&\x0d\n        (this._handle instanceof Pipe) && isWindows) {\x0d\n      // Make stdout and stderr blocking on Windows\x0d\n      err = this._handle.setBlocking(true);\x0d\n      if (err)\x0d\n        throw errnoException(err\x2C 'setBlocking');\x0d\n\x0d\n      this._writev = null;\x0d\n      this._write = makeSyncWrite(fd);\x0d\n      // makeSyncWrite adjusts this value like the original handle would\x2C so\x0d\n      // we need to let it do that by turning it into a writable\x2C own\x0d\n      // property.\x0d\n      ObjectDefineProperty(this._handle\x2C 'bytesWritten'\x2C {\x0d\n        __proto__: null\x2C\x0d\n        value: 0\x2C writable: true\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const onread = options.onread;\x0d\n  if (onread !== null && typeof onread === 'object' &&\x0d\n      (isUint8Array(onread.buffer) || typeof onread.buffer === 'function') &&\x0d\n      typeof onread.callback === 'function') {\x0d\n    if (typeof onread.buffer === 'function') {\x0d\n      this[kBuffer] = true;\x0d\n      this[kBufferGen] = onread.buffer;\x0d\n    } else {\x0d\n      this[kBuffer] = onread.buffer;\x0d\n    }\x0d\n    this[kBufferCb] = onread.callback;\x0d\n  }\x0d\n\x0d\n  this[kSetNoDelay] = Boolean(options.noDelay);\x0d\n  this[kSetKeepAlive] = Boolean(options.keepAlive);\x0d\n  this[kSetKeepAliveInitialDelay] = ~~(options.keepAliveInitialDelay / 1000);\x0d\n\x0d\n  // Shut down the socket when we're finished with it.\x0d\n  this.on('end'\x2C onReadableStreamEnd);\x0d\n\x0d\n  initSocketHandle(this);\x0d\n\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  // If we have a handle\x2C then start the flow of data into the\x0d\n  // buffer.  if not\x2C then this will happen when we connect\x0d\n  if (this._handle && options.readable !== false) {\x0d\n    if (options.pauseOnCreate) {\x0d\n      // Stop the handle from reading and pause the stream\x0d\n      this._handle.reading = false;\x0d\n      this._handle.readStop();\x0d\n      this.readableFlowing = false;\x0d\n    } else if (!options.manualStart) {\x0d\n      this.read(0);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Reserve properties\x0d\n  this.server = null;\x0d\n  this._server = null;\x0d\n\x0d\n  // Used after `.destroy()`\x0d\n  this[kBytesRead] = 0;\x0d\n  this[kBytesWritten] = 0;\x0d\n}\x0d\nObjectSetPrototypeOf(Socket.prototype\x2C stream.Duplex.prototype);\x0d\nObjectSetPrototypeOf(Socket\x2C stream.Duplex);\x0d\n\x0d\n// Refresh existing timeouts.\x0d\nSocket.prototype._unrefTimer = function _unrefTimer() {\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    if (s[kTimeout])\x0d\n      s[kTimeout].refresh();\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// The user has called .end()\x2C and all the bytes have been\x0d\n// sent out to the other side.\x0d\nSocket.prototype._final = function(cb) {\x0d\n  // If still connecting - defer handling `_final` until 'connect' will happen\x0d\n  if (this.pending) {\x0d\n    debug('_final: not yet connected');\x0d\n    return this.once('connect'\x2C () => this._final(cb));\x0d\n  }\x0d\n\x0d\n  if (!this._handle)\x0d\n    return cb();\x0d\n\x0d\n  debug('_final: not ended\x2C call shutdown()');\x0d\n\x0d\n  const req = new ShutdownWrap();\x0d\n  req.oncomplete = afterShutdown;\x0d\n  req.handle = this._handle;\x0d\n  req.callback = cb;\x0d\n  const err = this._handle.shutdown(req);\x0d\n\x0d\n  if (err === 1 || err === UV_ENOTCONN)  // synchronous finish\x0d\n    return cb();\x0d\n  else if (err !== 0)\x0d\n    return cb(errnoException(err\x2C 'shutdown'));\x0d\n};\x0d\n\x0d\nfunction afterShutdown() {\x0d\n  const self = this.handle[owner_symbol];\x0d\n\x0d\n  debug('afterShutdown destroyed=%j'\x2C self.destroyed\x2C\x0d\n        self._readableState);\x0d\n\x0d\n  this.callback();\x0d\n}\x0d\n\x0d\n// Provide a better error message when we call end() as a result\x0d\n// of the other side sending a FIN.  The standard 'write after end'\x0d\n// is overly vague\x2C and makes it seem like the user's code is to blame.\x0d\nfunction writeAfterFIN(chunk\x2C encoding\x2C cb) {\x0d\n  if (!this.writableEnded) {\x0d\n    return stream.Duplex.prototype.write.call(this\x2C chunk\x2C encoding\x2C cb);\x0d\n  }\x0d\n\x0d\n  if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = null;\x0d\n  }\x0d\n\x0d\n  const er = genericNodeError(\x0d\n    'This socket has been ended by the other party'\x2C\x0d\n    { code: 'EPIPE' }\x0d\n  );\x0d\n  if (typeof cb === 'function') {\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C process.nextTick\x2C cb\x2C er);\x0d\n  }\x0d\n  this.destroy(er);\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\nSocket.prototype.setTimeout = setStreamTimeout;\x0d\n\x0d\n\x0d\nSocket.prototype._onTimeout = function() {\x0d\n  const handle = this._handle;\x0d\n  const lastWriteQueueSize = this[kLastWriteQueueSize];\x0d\n  if (lastWriteQueueSize > 0 && handle) {\x0d\n    // `lastWriteQueueSize !== writeQueueSize` means there is\x0d\n    // an active write in progress\x2C so we suppress the timeout.\x0d\n    const { writeQueueSize } = handle;\x0d\n    if (lastWriteQueueSize !== writeQueueSize) {\x0d\n      this[kLastWriteQueueSize] = writeQueueSize;\x0d\n      this._unrefTimer();\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n  debug('_onTimeout');\x0d\n  this.emit('timeout');\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setNoDelay = function(enable) {\x0d\n  // Backwards compatibility: assume true when `enable` is omitted\x0d\n  enable = Boolean(enable === undefined ? true : enable);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this[kSetNoDelay] = enable;\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (this._handle.setNoDelay && enable !== this[kSetNoDelay]) {\x0d\n    this[kSetNoDelay] = enable;\x0d\n    this._handle.setNoDelay(enable);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.setKeepAlive = function(enable\x2C initialDelayMsecs) {\x0d\n  enable = Boolean(enable);\x0d\n  const initialDelay = ~~(initialDelayMsecs / 1000);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this[kSetKeepAlive] = enable;\x0d\n    this[kSetKeepAliveInitialDelay] = initialDelay;\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (!this._handle.setKeepAlive) {\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (enable !== this[kSetKeepAlive] ||\x0d\n      (\x0d\n        enable &&\x0d\n        this[kSetKeepAliveInitialDelay] !== initialDelay\x0d\n      )\x0d\n  ) {\x0d\n    this[kSetKeepAlive] = enable;\x0d\n    this[kSetKeepAliveInitialDelay] = initialDelay;\x0d\n    this._handle.setKeepAlive(enable\x2C initialDelay);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.address = function() {\x0d\n  return this._getsockname();\x0d\n};\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_connecting'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: function() {\x0d\n    return this.connecting;\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'pending'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return !this._handle || this.connecting;\x0d\n  }\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'readyState'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: function() {\x0d\n    if (this.connecting) {\x0d\n      return 'opening';\x0d\n    } else if (this.readable && this.writable) {\x0d\n      return 'open';\x0d\n    } else if (this.readable && !this.writable) {\x0d\n      return 'readOnly';\x0d\n    } else if (!this.readable && this.writable) {\x0d\n      return 'writeOnly';\x0d\n    }\x0d\n    return 'closed';\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C 'bufferSize'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: function() {\x0d\n    if (this._handle) {\x0d\n      return this.writableLength;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C kUpdateTimer\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: function() {\x0d\n    return this._unrefTimer;\x0d\n  }\x0d\n});\x0d\n\x0d\n\x0d\nfunction tryReadStart(socket) {\x0d\n  // Not already reading\x2C start the flow\x0d\n  debug('Socket._handle.readStart');\x0d\n  socket._handle.reading = true;\x0d\n  const err = socket._handle.readStart();\x0d\n  if (err)\x0d\n    socket.destroy(errnoException(err\x2C 'read'));\x0d\n}\x0d\n\x0d\n// Just call handle.readStart until we have enough in the buffer\x0d\nSocket.prototype._read = function(n) {\x0d\n  debug('_read');\x0d\n\x0d\n  if (this.connecting || !this._handle) {\x0d\n    debug('_read wait for connection');\x0d\n    this.once('connect'\x2C () => this._read(n));\x0d\n  } else if (!this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.end = function(data\x2C encoding\x2C callback) {\x0d\n  stream.Duplex.prototype.end.call(this\x2C\x0d\n                                   data\x2C encoding\x2C callback);\x0d\n  DTRACE_NET_STREAM_END(this);\x0d\n  return this;\x0d\n};\x0d\n\x0d\nSocket.prototype.resetAndDestroy = function() {\x0d\n  if (this._handle) {\x0d\n    if (!(this._handle instanceof TCP))\x0d\n      throw new ERR_INVALID_HANDLE_TYPE();\x0d\n    if (this.connecting) {\x0d\n      debug('reset wait for connection');\x0d\n      this.once('connect'\x2C () => this._reset());\x0d\n    } else {\x0d\n      this._reset();\x0d\n    }\x0d\n  } else {\x0d\n    this.destroy(new ERR_SOCKET_CLOSED());\x0d\n  }\x0d\n  return this;\x0d\n};\x0d\n\x0d\nSocket.prototype.pause = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      this._handle.reading) {\x0d\n    this._handle.reading = false;\x0d\n    if (!this.destroyed) {\x0d\n      const err = this._handle.readStop();\x0d\n      if (err)\x0d\n        this.destroy(errnoException(err\x2C 'read'));\x0d\n    }\x0d\n  }\x0d\n  return stream.Duplex.prototype.pause.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.resume = function() {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.resume.call(this);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.read = function(n) {\x0d\n  if (this[kBuffer] && !this.connecting && this._handle &&\x0d\n      !this._handle.reading) {\x0d\n    tryReadStart(this);\x0d\n  }\x0d\n  return stream.Duplex.prototype.read.call(this\x2C n);\x0d\n};\x0d\n\x0d\n\x0d\n// Called when the 'end' event is emitted.\x0d\nfunction onReadableStreamEnd() {\x0d\n  if (!this.allowHalfOpen) {\x0d\n    this.write = writeAfterFIN;\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.destroySoon = function() {\x0d\n  if (this.writable)\x0d\n    this.end();\x0d\n\x0d\n  if (this.writableFinished)\x0d\n    this.destroy();\x0d\n  else\x0d\n    this.once('finish'\x2C this.destroy);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._destroy = function(exception\x2C cb) {\x0d\n  debug('destroy');\x0d\n\x0d\n  this.connecting = false;\x0d\n\x0d\n  for (let s = this; s !== null; s = s._parent) {\x0d\n    clearTimeout(s[kTimeout]);\x0d\n  }\x0d\n\x0d\n  debug('close');\x0d\n  if (this._handle) {\x0d\n    if (this !== process.stderr)\x0d\n      debug('close handle');\x0d\n    const isException = exception ? true : false;\x0d\n    // `bytesRead` and `kBytesWritten` should be accessible after `.destroy()`\x0d\n    this[kBytesRead] = this._handle.bytesRead;\x0d\n    this[kBytesWritten] = this._handle.bytesWritten;\x0d\n\x0d\n    if (this.resetAndClosing) {\x0d\n      this.resetAndClosing = false;\x0d\n      const err = this._handle.reset(() => {\x0d\n        debug('emit close');\x0d\n        this.emit('close'\x2C isException);\x0d\n      });\x0d\n      if (err)\x0d\n        this.emit('error'\x2C errnoException(err\x2C 'reset'));\x0d\n    } else if (this._closeAfterHandlingError) {\x0d\n      // Enqueue closing the socket as a microtask\x2C so that the socket can be\x0d\n      // accessible when an `error` event is handled in the `next tick queue`.\x0d\n      queueMicrotask(() => closeSocketHandle(this\x2C isException\x2C true));\x0d\n    } else {\x0d\n      closeSocketHandle(this\x2C isException);\x0d\n    }\x0d\n\x0d\n    if (!this._closeAfterHandlingError) {\x0d\n      this._handle.onread = noop;\x0d\n      this._handle = null;\x0d\n      this._sockname = null;\x0d\n    }\x0d\n    cb(exception);\x0d\n  } else {\x0d\n    cb(exception);\x0d\n    process.nextTick(emitCloseNT\x2C this);\x0d\n  }\x0d\n\x0d\n  if (this._server) {\x0d\n    debug('has server');\x0d\n    this._server._connections--;\x0d\n    if (this._server._emitCloseIfDrained) {\x0d\n      this._server._emitCloseIfDrained();\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\nSocket.prototype._reset = function() {\x0d\n  debug('reset connection');\x0d\n  this.resetAndClosing = true;\x0d\n  return this.destroy();\x0d\n};\x0d\n\x0d\nSocket.prototype._getpeername = function() {\x0d\n  if (!this._handle || !this._handle.getpeername) {\x0d\n    return this._peername || {};\x0d\n  } else if (!this._peername) {\x0d\n    const out = {};\x0d\n    const err = this._handle.getpeername(out);\x0d\n    if (err) return out;\x0d\n    this._peername = out;\x0d\n  }\x0d\n  return this._peername;\x0d\n};\x0d\n\x0d\nfunction protoGetter(name\x2C callback) {\x0d\n  ObjectDefineProperty(Socket.prototype\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    get: callback\x0d\n  });\x0d\n}\x0d\n\x0d\nprotoGetter('bytesRead'\x2C function bytesRead() {\x0d\n  return this._handle ? this._handle.bytesRead : this[kBytesRead];\x0d\n});\x0d\n\x0d\nprotoGetter('remoteAddress'\x2C function remoteAddress() {\x0d\n  return this._getpeername().address;\x0d\n});\x0d\n\x0d\nprotoGetter('remoteFamily'\x2C function remoteFamily() {\x0d\n  return this._getpeername().family;\x0d\n});\x0d\n\x0d\nprotoGetter('remotePort'\x2C function remotePort() {\x0d\n  return this._getpeername().port;\x0d\n});\x0d\n\x0d\n\x0d\nSocket.prototype._getsockname = function() {\x0d\n  if (!this._handle || !this._handle.getsockname) {\x0d\n    return {};\x0d\n  } else if (!this._sockname) {\x0d\n    this._sockname = {};\x0d\n    // FIXME(bnoordhuis) Throw when the return value is not 0?\x0d\n    this._handle.getsockname(this._sockname);\x0d\n  }\x0d\n  return this._sockname;\x0d\n};\x0d\n\x0d\n\x0d\nprotoGetter('localAddress'\x2C function localAddress() {\x0d\n  return this._getsockname().address;\x0d\n});\x0d\n\x0d\n\x0d\nprotoGetter('localPort'\x2C function localPort() {\x0d\n  return this._getsockname().port;\x0d\n});\x0d\n\x0d\nprotoGetter('localFamily'\x2C function localFamily() {\x0d\n  return this._getsockname().family;\x0d\n});\x0d\n\x0d\nSocket.prototype[kAfterAsyncWrite] = function() {\x0d\n  this[kLastWriteQueueSize] = 0;\x0d\n};\x0d\n\x0d\nSocket.prototype._writeGeneric = function(writev\x2C data\x2C encoding\x2C cb) {\x0d\n  // If we are still connecting\x2C then buffer this for later.\x0d\n  // The Writable logic will buffer up any more writes while\x0d\n  // waiting for this one to be done.\x0d\n  if (this.connecting) {\x0d\n    this._pendingData = data;\x0d\n    this._pendingEncoding = encoding;\x0d\n    this.once('connect'\x2C function connect() {\x0d\n      this._writeGeneric(writev\x2C data\x2C encoding\x2C cb);\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n  this._pendingData = null;\x0d\n  this._pendingEncoding = '';\x0d\n\x0d\n  if (!this._handle) {\x0d\n    cb(new ERR_SOCKET_CLOSED());\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  let req;\x0d\n  if (writev)\x0d\n    req = writevGeneric(this\x2C data\x2C cb);\x0d\n  else\x0d\n    req = writeGeneric(this\x2C data\x2C encoding\x2C cb);\x0d\n  if (req.async)\x0d\n    this[kLastWriteQueueSize] = req.bytes;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._writev = function(chunks\x2C cb) {\x0d\n  this._writeGeneric(true\x2C chunks\x2C ''\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype._write = function(data\x2C encoding\x2C cb) {\x0d\n  this._writeGeneric(false\x2C data\x2C encoding\x2C cb);\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias. Having this is probably being overly cautious\x2C but it doesn't\x0d\n// really hurt anyone either. This can probably be removed safely if desired.\x0d\nprotoGetter('_bytesDispatched'\x2C function _bytesDispatched() {\x0d\n  return this._handle ? this._handle.bytesWritten : this[kBytesWritten];\x0d\n});\x0d\n\x0d\nprotoGetter('bytesWritten'\x2C function bytesWritten() {\x0d\n  let bytes = this._bytesDispatched;\x0d\n  const data = this._pendingData;\x0d\n  const encoding = this._pendingEncoding;\x0d\n  const writableBuffer = this.writableBuffer;\x0d\n\x0d\n  if (!writableBuffer)\x0d\n    return undefined;\x0d\n\x0d\n  for (const el of writableBuffer) {\x0d\n    bytes += el.chunk instanceof Buffer ?\x0d\n      el.chunk.length :\x0d\n      Buffer.byteLength(el.chunk\x2C el.encoding);\x0d\n  }\x0d\n\x0d\n  if (ArrayIsArray(data)) {\x0d\n    // Was a writev\x2C iterate over chunks to get total length\x0d\n    for (let i = 0; i < data.length; i++) {\x0d\n      const chunk = data[i];\x0d\n\x0d\n      if (data.allBuffers || chunk instanceof Buffer)\x0d\n        bytes += chunk.length;\x0d\n      else\x0d\n        bytes += Buffer.byteLength(chunk.chunk\x2C chunk.encoding);\x0d\n    }\x0d\n  } else if (data) {\x0d\n    // Writes are either a string or a Buffer.\x0d\n    if (typeof data !== 'string')\x0d\n      bytes += data.length;\x0d\n    else\x0d\n      bytes += Buffer.byteLength(data\x2C encoding);\x0d\n  }\x0d\n\x0d\n  return bytes;\x0d\n});\x0d\n\x0d\n\x0d\nfunction checkBindError(err\x2C port\x2C handle) {\x0d\n  // EADDRINUSE may not be reported until we call listen() or connect().\x0d\n  // To complicate matters\x2C a failed bind() followed by listen() or connect()\x0d\n  // will implicitly bind to a random port. Ergo\x2C check that the socket is\x0d\n  // bound to the expected port before calling listen() or connect().\x0d\n  //\x0d\n  // FIXME(bnoordhuis) Doesn't work for pipe handles\x2C they don't have a\x0d\n  // getsockname() method. Non-issue for now\x2C the cluster module doesn't\x0d\n  // really support pipes anyway.\x0d\n  if (err === 0 && port > 0 && handle.getsockname) {\x0d\n    const out = {};\x0d\n    err = handle.getsockname(out);\x0d\n    if (err === 0 && port !== out.port) {\x0d\n      debug(`checkBindError\x2C bound to ${out.port} instead of ${port}`);\x0d\n      err = UV_EADDRINUSE;\x0d\n    }\x0d\n  }\x0d\n  return err;\x0d\n}\x0d\n\x0d\n\x0d\nfunction internalConnect(\x0d\n  self\x2C address\x2C port\x2C addressType\x2C localAddress\x2C localPort\x2C flags) {\x0d\n  // TODO return promise from Socket.prototype.connect which\x0d\n  // wraps _connectReq.\x0d\n\x0d\n  assert(self.connecting);\x0d\n\x0d\n  let err;\x0d\n\x0d\n  if (localAddress || localPort) {\x0d\n    if (addressType === 4) {\x0d\n      localAddress = localAddress || DEFAULT_IPV4_ADDR;\x0d\n      err = self._handle.bind(localAddress\x2C localPort);\x0d\n    } else { // addressType === 6\x0d\n      localAddress = localAddress || DEFAULT_IPV6_ADDR;\x0d\n      err = self._handle.bind6(localAddress\x2C localPort\x2C flags);\x0d\n    }\x0d\n    debug('binding to localAddress: %s and localPort: %d (addressType: %d)'\x2C\x0d\n          localAddress\x2C localPort\x2C addressType);\x0d\n\x0d\n    err = checkBindError(err\x2C localPort\x2C self._handle);\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C localAddress\x2C localPort);\x0d\n      self.destroy(ex);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (addressType === 6 || addressType === 4) {\x0d\n    const req = new TCPConnectWrap();\x0d\n    req.oncomplete = afterConnect;\x0d\n    req.address = address;\x0d\n    req.port = port;\x0d\n    req.localAddress = localAddress;\x0d\n    req.localPort = localPort;\x0d\n\x0d\n    if (addressType === 4)\x0d\n      err = self._handle.connect(req\x2C address\x2C port);\x0d\n    else\x0d\n      err = self._handle.connect6(req\x2C address\x2C port);\x0d\n  } else {\x0d\n    const req = new PipeConnectWrap();\x0d\n    req.address = address;\x0d\n    req.oncomplete = afterConnect;\x0d\n\x0d\n    err = self._handle.connect(req\x2C address);\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    const sockname = self._getsockname();\x0d\n    let details;\x0d\n\x0d\n    if (sockname) {\x0d\n      details = sockname.address + ':' + sockname.port;\x0d\n    }\x0d\n\x0d\n    const ex = exceptionWithHostPort(err\x2C 'connect'\x2C address\x2C port\x2C details);\x0d\n    self.destroy(ex);\x0d\n  } else if ((addressType === 6 || addressType === 4) && hasObserver('net')) {\x0d\n    startPerf(self\x2C kPerfHooksNetConnectContext\x2C { type: 'net'\x2C name: 'connect'\x2C detail: { host: address\x2C port } });\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.connect = function(...args) {\x0d\n  let normalized;\x0d\n  // If passed an array\x2C it's treated as an array of arguments that have\x0d\n  // already been normalized (so we don't normalize more than once). This has\x0d\n  // been solved before in https://github.com/nodejs/node/pull/12342\x2C but was\x0d\n  // reverted as it had unintended side effects.\x0d\n  if (ArrayIsArray(args[0]) && args[0][normalizedArgsSymbol]) {\x0d\n    normalized = args[0];\x0d\n  } else {\x0d\n    normalized = normalizeArgs(args);\x0d\n  }\x0d\n  const options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  // options.port === null will be checked later.\x0d\n  if (options.port === undefined && options.path == null)\x0d\n    throw new ERR_MISSING_ARGS(['options'\x2C 'port'\x2C 'path']);\x0d\n\x0d\n  if (this.write !== Socket.prototype.write)\x0d\n    this.write = Socket.prototype.write;\x0d\n\x0d\n  if (this.destroyed) {\x0d\n    this._handle = null;\x0d\n    this._peername = null;\x0d\n    this._sockname = null;\x0d\n  }\x0d\n\x0d\n  const { path } = options;\x0d\n  const pipe = !!path;\x0d\n  debug('pipe'\x2C pipe\x2C path);\x0d\n\x0d\n  if (!this._handle) {\x0d\n    this._handle = pipe ?\x0d\n      new Pipe(PipeConstants.SOCKET) :\x0d\n      new TCP(TCPConstants.SOCKET);\x0d\n    initSocketHandle(this);\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('connect'\x2C cb);\x0d\n  }\x0d\n\x0d\n  this._unrefTimer();\x0d\n\x0d\n  this.connecting = true;\x0d\n\x0d\n  if (pipe) {\x0d\n    validateString(path\x2C 'options.path');\x0d\n    defaultTriggerAsyncIdScope(\x0d\n      this[async_id_symbol]\x2C internalConnect\x2C this\x2C path\x0d\n    );\x0d\n  } else {\x0d\n    lookupAndConnect(this\x2C options);\x0d\n  }\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction lookupAndConnect(self\x2C options) {\x0d\n  const { localAddress\x2C localPort } = options;\x0d\n  const host = options.host || 'localhost';\x0d\n  let { port } = options;\x0d\n\x0d\n  if (localAddress && !isIP(localAddress)) {\x0d\n    throw new ERR_INVALID_IP_ADDRESS(localAddress);\x0d\n  }\x0d\n\x0d\n  if (localPort) {\x0d\n    validateNumber(localPort\x2C 'options.localPort');\x0d\n  }\x0d\n\x0d\n  if (typeof port !== 'undefined') {\x0d\n    if (typeof port !== 'number' && typeof port !== 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('options.port'\x2C\x0d\n                                     ['number'\x2C 'string']\x2C port);\x0d\n    }\x0d\n    validatePort(port);\x0d\n  }\x0d\n  port |= 0;\x0d\n\x0d\n  // If host is an IP\x2C skip performing a lookup\x0d\n  const addressType = isIP(host);\x0d\n  if (addressType) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C process.nextTick\x2C () => {\x0d\n      if (self.connecting)\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C host\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n    });\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (options.lookup !== undefined)\x0d\n    validateFunction(options.lookup\x2C 'options.lookup');\x0d\n\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  const dnsopts = {\x0d\n    family: options.family\x2C\x0d\n    hints: options.hints || 0\x0d\n  };\x0d\n\x0d\n  if (!isWindows &&\x0d\n      dnsopts.family !== 4 &&\x0d\n      dnsopts.family !== 6 &&\x0d\n      dnsopts.hints === 0) {\x0d\n    dnsopts.hints = dns.ADDRCONFIG;\x0d\n  }\x0d\n\x0d\n  debug('connect: find host'\x2C host);\x0d\n  debug('connect: dns options'\x2C dnsopts);\x0d\n  self._host = host;\x0d\n  const lookup = options.lookup || dns.lookup;\x0d\n  defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C function() {\x0d\n    lookup(host\x2C dnsopts\x2C function emitLookup(err\x2C ip\x2C addressType) {\x0d\n      self.emit('lookup'\x2C err\x2C ip\x2C addressType\x2C host);\x0d\n\x0d\n      // It's possible we were destroyed while looking this up.\x0d\n      // XXX it would be great if we could cancel the promise returned by\x0d\n      // the look up.\x0d\n      if (!self.connecting) return;\x0d\n\x0d\n      if (err) {\x0d\n        // net.createConnection() creates a net.Socket object and immediately\x0d\n        // calls net.Socket.connect() on it (that's us). There are no event\x0d\n        // listeners registered yet so defer the error event to the next tick.\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (!isIP(ip)) {\x0d\n        err = new ERR_INVALID_IP_ADDRESS(ip);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else if (addressType !== 4 && addressType !== 6) {\x0d\n        err = new ERR_INVALID_ADDRESS_FAMILY(addressType\x2C\x0d\n                                             options.host\x2C\x0d\n                                             options.port);\x0d\n        process.nextTick(connectErrorNT\x2C self\x2C err);\x0d\n      } else {\x0d\n        self._unrefTimer();\x0d\n        defaultTriggerAsyncIdScope(\x0d\n          self[async_id_symbol]\x2C\x0d\n          internalConnect\x2C\x0d\n          self\x2C ip\x2C port\x2C addressType\x2C localAddress\x2C localPort\x0d\n        );\x0d\n      }\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction connectErrorNT(self\x2C err) {\x0d\n  self.destroy(err);\x0d\n}\x0d\n\x0d\n\x0d\nSocket.prototype.ref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.ref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.ref === 'function') {\x0d\n    this._handle.ref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nSocket.prototype.unref = function() {\x0d\n  if (!this._handle) {\x0d\n    this.once('connect'\x2C this.unref);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (typeof this._handle.unref === 'function') {\x0d\n    this._handle.unref();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction afterConnect(status\x2C handle\x2C req\x2C readable\x2C writable) {\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  // Callback may come after call to destroy\x0d\n  if (self.destroyed) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  debug('afterConnect');\x0d\n\x0d\n  assert(self.connecting);\x0d\n  self.connecting = false;\x0d\n  self._sockname = null;\x0d\n\x0d\n  if (status === 0) {\x0d\n    if (self.readable && !readable) {\x0d\n      self.push(null);\x0d\n      self.read();\x0d\n    }\x0d\n    if (self.writable && !writable) {\x0d\n      self.end();\x0d\n    }\x0d\n    self._unrefTimer();\x0d\n\x0d\n    if (self[kSetNoDelay] && self._handle.setNoDelay) {\x0d\n      self._handle.setNoDelay(true);\x0d\n    }\x0d\n\x0d\n    if (self[kSetKeepAlive] && self._handle.setKeepAlive) {\x0d\n      self._handle.setKeepAlive(true\x2C self[kSetKeepAliveInitialDelay]);\x0d\n    }\x0d\n\x0d\n    self.emit('connect');\x0d\n    self.emit('ready');\x0d\n\x0d\n    // Start the first read\x2C or get an immediate EOF.\x0d\n    // this doesn't actually consume any bytes\x2C because len=0.\x0d\n    if (readable && !self.isPaused())\x0d\n      self.read(0);\x0d\n    if (self[kPerfHooksNetConnectContext] && hasObserver('net')) {\x0d\n      stopPerf(self\x2C kPerfHooksNetConnectContext);\x0d\n    }\x0d\n  } else {\x0d\n    let details;\x0d\n    if (req.localAddress && req.localPort) {\x0d\n      details = req.localAddress + ':' + req.localPort;\x0d\n    }\x0d\n    const ex = exceptionWithHostPort(status\x2C\x0d\n                                     'connect'\x2C\x0d\n                                     req.address\x2C\x0d\n                                     req.port\x2C\x0d\n                                     details);\x0d\n    if (details) {\x0d\n      ex.localAddress = req.localAddress;\x0d\n      ex.localPort = req.localPort;\x0d\n    }\x0d\n    self.destroy(ex);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction addAbortSignalOption(self\x2C options) {\x0d\n  if (options?.signal === undefined) {\x0d\n    return;\x0d\n  }\x0d\n  validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  const { signal } = options;\x0d\n  const onAborted = () => {\x0d\n    self.close();\x0d\n  };\x0d\n  if (signal.aborted) {\x0d\n    process.nextTick(onAborted);\x0d\n  } else {\x0d\n    signal.addEventListener('abort'\x2C onAborted);\x0d\n    self.once('close'\x2C () => signal.removeEventListener('abort'\x2C onAborted));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction Server(options\x2C connectionListener) {\x0d\n  if (!(this instanceof Server))\x0d\n    return new Server(options\x2C connectionListener);\x0d\n\x0d\n  EventEmitter.call(this);\x0d\n\x0d\n  if (typeof options === 'function') {\x0d\n    connectionListener = options;\x0d\n    options = {};\x0d\n    this.on('connection'\x2C connectionListener);\x0d\n  } else if (options == null || typeof options === 'object') {\x0d\n    options = { ...options };\x0d\n\x0d\n    if (typeof connectionListener === 'function') {\x0d\n      this.on('connection'\x2C connectionListener);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C 'Object'\x2C options);\x0d\n  }\x0d\n  if (typeof options.keepAliveInitialDelay !== 'undefined') {\x0d\n    validateNumber(\x0d\n      options.keepAliveInitialDelay\x2C 'options.keepAliveInitialDelay'\x0d\n    );\x0d\n\x0d\n    if (options.keepAliveInitialDelay < 0) {\x0d\n      options.keepAliveInitialDelay = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  this._connections = 0;\x0d\n\x0d\n  this[async_id_symbol] = -1;\x0d\n  this._handle = null;\x0d\n  this._usingWorkers = false;\x0d\n  this._workers = [];\x0d\n  this._unref = false;\x0d\n\x0d\n  this.allowHalfOpen = options.allowHalfOpen || false;\x0d\n  this.pauseOnConnect = !!options.pauseOnConnect;\x0d\n  this.noDelay = Boolean(options.noDelay);\x0d\n  this.keepAlive = Boolean(options.keepAlive);\x0d\n  this.keepAliveInitialDelay = ~~(options.keepAliveInitialDelay / 1000);\x0d\n}\x0d\nObjectSetPrototypeOf(Server.prototype\x2C EventEmitter.prototype);\x0d\nObjectSetPrototypeOf(Server\x2C EventEmitter);\x0d\n\x0d\n\x0d\nfunction toNumber(x) { return (x = Number(x)) >= 0 ? x : false; }\x0d\n\x0d\n// Returns handle if it can be created\x2C or error code if it can't\x0d\nfunction createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags) {\x0d\n  let err = 0;\x0d\n  // Assign handle in listen\x2C and clean up if bind or listen fails\x0d\n  let handle;\x0d\n\x0d\n  let isTCP = false;\x0d\n  if (typeof fd === 'number' && fd >= 0) {\x0d\n    try {\x0d\n      handle = createHandle(fd\x2C true);\x0d\n    } catch (e) {\x0d\n      // Not a fd we can listen on.  This will trigger an error.\x0d\n      debug('listen invalid fd=%d:'\x2C fd\x2C e.message);\x0d\n      return UV_EINVAL;\x0d\n    }\x0d\n\x0d\n    err = handle.open(fd);\x0d\n    if (err)\x0d\n      return err;\x0d\n\x0d\n    assert(!address && !port);\x0d\n  } else if (port === -1 && addressType === -1) {\x0d\n    handle = new Pipe(PipeConstants.SERVER);\x0d\n    if (isWindows) {\x0d\n      const instances = NumberParseInt(process.env.NODE_PENDING_PIPE_INSTANCES);\x0d\n      if (!NumberIsNaN(instances)) {\x0d\n        handle.setPendingInstances(instances);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    handle = new TCP(TCPConstants.SERVER);\x0d\n    isTCP = true;\x0d\n  }\x0d\n\x0d\n  if (address || port || isTCP) {\x0d\n    debug('bind to'\x2C address || 'any');\x0d\n    if (!address) {\x0d\n      // Try binding to ipv6 first\x0d\n      err = handle.bind6(DEFAULT_IPV6_ADDR\x2C port\x2C flags);\x0d\n      if (err) {\x0d\n        handle.close();\x0d\n        // Fallback to ipv4\x0d\n        return createServerHandle(DEFAULT_IPV4_ADDR\x2C port);\x0d\n      }\x0d\n    } else if (addressType === 6) {\x0d\n      err = handle.bind6(address\x2C port\x2C flags);\x0d\n    } else {\x0d\n      err = handle.bind(address\x2C port);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    handle.close();\x0d\n    return err;\x0d\n  }\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\nfunction setupListenHandle(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags) {\x0d\n  debug('setupListenHandle'\x2C address\x2C port\x2C addressType\x2C backlog\x2C fd);\x0d\n\x0d\n  // If there is not yet a handle\x2C we need to create one and bind.\x0d\n  // In the case of a server sent via IPC\x2C we don't need to do this.\x0d\n  if (this._handle) {\x0d\n    debug('setupListenHandle: have a handle already');\x0d\n  } else {\x0d\n    debug('setupListenHandle: create a handle');\x0d\n\x0d\n    let rval = null;\x0d\n\x0d\n    // Try to bind to the unspecified IPv6 address\x2C see if IPv6 is available\x0d\n    if (!address && typeof fd !== 'number') {\x0d\n      rval = createServerHandle(DEFAULT_IPV6_ADDR\x2C port\x2C 6\x2C fd\x2C flags);\x0d\n\x0d\n      if (typeof rval === 'number') {\x0d\n        rval = null;\x0d\n        address = DEFAULT_IPV4_ADDR;\x0d\n        addressType = 4;\x0d\n      } else {\x0d\n        address = DEFAULT_IPV6_ADDR;\x0d\n        addressType = 6;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (rval === null)\x0d\n      rval = createServerHandle(address\x2C port\x2C addressType\x2C fd\x2C flags);\x0d\n\x0d\n    if (typeof rval === 'number') {\x0d\n      const error = uvExceptionWithHostPort(rval\x2C 'listen'\x2C address\x2C port);\x0d\n      process.nextTick(emitErrorNT\x2C this\x2C error);\x0d\n      return;\x0d\n    }\x0d\n    this._handle = rval;\x0d\n  }\x0d\n\x0d\n  this[async_id_symbol] = getNewAsyncId(this._handle);\x0d\n  this._handle.onconnection = onconnection;\x0d\n  this._handle[owner_symbol] = this;\x0d\n\x0d\n  // Use a backlog of 512 entries. We pass 511 to the listen() call because\x0d\n  // the kernel does: backlogsize = roundup_pow_of_two(backlogsize + 1);\x0d\n  // which will thus give us a backlog of 512 entries.\x0d\n  const err = this._handle.listen(backlog || 511);\x0d\n\x0d\n  if (err) {\x0d\n    const ex = uvExceptionWithHostPort(err\x2C 'listen'\x2C address\x2C port);\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n    defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               emitErrorNT\x2C\x0d\n                               this\x2C\x0d\n                               ex);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Generate connection key\x2C this should be unique to the connection\x0d\n  this._connectionKey = addressType + ':' + address + ':' + port;\x0d\n\x0d\n  // Unref the handle if the server was unref'ed prior to listening\x0d\n  if (this._unref)\x0d\n    this.unref();\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitListeningNT\x2C\x0d\n                             this);\x0d\n}\x0d\n\x0d\nServer.prototype._listen2 = setupListenHandle;  // legacy alias\x0d\n\x0d\nfunction emitErrorNT(self\x2C err) {\x0d\n  self.emit('error'\x2C err);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitListeningNT(self) {\x0d\n  // Ensure handle hasn't closed\x0d\n  if (self._handle)\x0d\n    self.emit('listening');\x0d\n}\x0d\n\x0d\n\x0d\nfunction listenInCluster(server\x2C address\x2C port\x2C addressType\x2C\x0d\n                         backlog\x2C fd\x2C exclusive\x2C flags\x2C options) {\x0d\n  exclusive = !!exclusive;\x0d\n\x0d\n  if (cluster === undefined) cluster = require('cluster');\x0d\n\x0d\n  if (cluster.isPrimary || exclusive) {\x0d\n    // Will create a new handle\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const serverQuery = {\x0d\n    address: address\x2C\x0d\n    port: port\x2C\x0d\n    addressType: addressType\x2C\x0d\n    fd: fd\x2C\x0d\n    flags\x2C\x0d\n    backlog\x2C\x0d\n    ...options\x2C\x0d\n  };\x0d\n  // Get the primary's server handle\x2C and listen on it\x0d\n  cluster._getServer(server\x2C serverQuery\x2C listenOnPrimaryHandle);\x0d\n\x0d\n  function listenOnPrimaryHandle(err\x2C handle) {\x0d\n    err = checkBindError(err\x2C port\x2C handle);\x0d\n\x0d\n    if (err) {\x0d\n      const ex = exceptionWithHostPort(err\x2C 'bind'\x2C address\x2C port);\x0d\n      return server.emit('error'\x2C ex);\x0d\n    }\x0d\n\x0d\n    // Reuse primary's server handle\x0d\n    server._handle = handle;\x0d\n    // _listen2 sets up the listened handle\x2C it is still named like this\x0d\n    // to avoid breaking code that wraps this method\x0d\n    server._listen2(address\x2C port\x2C addressType\x2C backlog\x2C fd\x2C flags);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype.listen = function(...args) {\x0d\n  const normalized = normalizeArgs(args);\x0d\n  let options = normalized[0];\x0d\n  const cb = normalized[1];\x0d\n\x0d\n  if (this._handle) {\x0d\n    throw new ERR_SERVER_ALREADY_LISTEN();\x0d\n  }\x0d\n\x0d\n  if (cb !== null) {\x0d\n    this.once('listening'\x2C cb);\x0d\n  }\x0d\n  const backlogFromArgs =\x0d\n    // (handle\x2C backlog) or (path\x2C backlog) or (port\x2C backlog)\x0d\n    toNumber(args.length > 1 && args[1]) ||\x0d\n    toNumber(args.length > 2 && args[2]);  // (port\x2C host\x2C backlog)\x0d\n\x0d\n  options = options._handle || options.handle || options;\x0d\n  const flags = getFlags(options.ipv6Only);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a handle\x0d\n  if (options instanceof TCP) {\x0d\n    this._handle = options;\x0d\n    this[async_id_symbol] = this._handle.getAsyncId();\x0d\n    listenInCluster(this\x2C null\x2C -1\x2C -1\x2C backlogFromArgs);\x0d\n    return this;\x0d\n  }\x0d\n  addAbortSignalOption(this\x2C options);\x0d\n  // (handle[\x2C backlog][\x2C cb]) where handle is an object with a fd\x0d\n  if (typeof options.fd === 'number' && options.fd >= 0) {\x0d\n    listenInCluster(this\x2C null\x2C null\x2C null\x2C backlogFromArgs\x2C options.fd);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is omitted\x2C\x0d\n  // that is\x2C listen()\x2C listen(null)\x2C listen(cb)\x2C or listen(null\x2C cb)\x0d\n  // or (options[\x2C cb]) where options.port is explicitly set as undefined or\x0d\n  // null\x2C bind to an arbitrary unused port\x0d\n  if (args.length === 0 || typeof args[0] === 'function' ||\x0d\n      (typeof options.port === 'undefined' && 'port' in options) ||\x0d\n      options.port === null) {\x0d\n    options.port = 0;\x0d\n  }\x0d\n  // ([port][\x2C host][\x2C backlog][\x2C cb]) where port is specified\x0d\n  // or (options[\x2C cb]) where options.port is specified\x0d\n  // or if options.port is normalized as 0 before\x0d\n  let backlog;\x0d\n  if (typeof options.port === 'number' || typeof options.port === 'string') {\x0d\n    validatePort(options.port\x2C 'options.port');\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    // start TCP server listening on host:port\x0d\n    if (options.host) {\x0d\n      lookupAndListen(this\x2C options.port | 0\x2C options.host\x2C backlog\x2C\x0d\n                      options.exclusive\x2C flags);\x0d\n    } else { // Undefined host\x2C listens on unspecified address\x0d\n      // Default addressType 4 will be used to search for primary server\x0d\n      listenInCluster(this\x2C null\x2C options.port | 0\x2C 4\x2C\x0d\n                      backlog\x2C undefined\x2C options.exclusive);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // (path[\x2C backlog][\x2C cb]) or (options[\x2C cb])\x0d\n  // where path or options.path is a UNIX domain socket or Windows pipe\x0d\n  if (options.path && isPipeName(options.path)) {\x0d\n    const pipeName = this._pipeName = options.path;\x0d\n    backlog = options.backlog || backlogFromArgs;\x0d\n    listenInCluster(this\x2C\x0d\n                    pipeName\x2C\x0d\n                    -1\x2C\x0d\n                    -1\x2C\x0d\n                    backlog\x2C\x0d\n                    undefined\x2C\x0d\n                    options.exclusive\x2C\x0d\n                    undefined\x2C\x0d\n                    {\x0d\n                      readableAll: options.readableAll\x2C\x0d\n                      writableAll: options.writableAll\x2C\x0d\n                    });\x0d\n\x0d\n    if (!this._handle) {\x0d\n      // Failed and an error shall be emitted in the next tick.\x0d\n      // Therefore\x2C we directly return.\x0d\n      return this;\x0d\n    }\x0d\n\x0d\n    let mode = 0;\x0d\n    if (options.readableAll === true)\x0d\n      mode |= PipeConstants.UV_READABLE;\x0d\n    if (options.writableAll === true)\x0d\n      mode |= PipeConstants.UV_WRITABLE;\x0d\n    if (mode !== 0) {\x0d\n      const err = this._handle.fchmod(mode);\x0d\n      if (err) {\x0d\n        this._handle.close();\x0d\n        this._handle = null;\x0d\n        throw errnoException(err\x2C 'uv_pipe_chmod');\x0d\n      }\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (!(('port' in options) || ('path' in options))) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options'\x2C options\x2C\x0d\n                                    'must have the property "port" or "path"');\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('options'\x2C options);\x0d\n};\x0d\n\x0d\nfunction lookupAndListen(self\x2C port\x2C address\x2C backlog\x2C exclusive\x2C flags) {\x0d\n  if (dns === undefined) dns = require('dns');\x0d\n  dns.lookup(address\x2C function doListen(err\x2C ip\x2C addressType) {\x0d\n    if (err) {\x0d\n      self.emit('error'\x2C err);\x0d\n    } else {\x0d\n      addressType = ip ? addressType : 4;\x0d\n      listenInCluster(self\x2C ip\x2C port\x2C addressType\x2C\x0d\n                      backlog\x2C undefined\x2C exclusive\x2C flags);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Server.prototype\x2C 'listening'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get: function() {\x0d\n    return !!this._handle;\x0d\n  }\x2C\x0d\n  configurable: true\x2C\x0d\n  enumerable: true\x0d\n});\x0d\n\x0d\nServer.prototype.address = function() {\x0d\n  if (this._handle && this._handle.getsockname) {\x0d\n    const out = {};\x0d\n    const err = this._handle.getsockname(out);\x0d\n    if (err) {\x0d\n      throw errnoException(err\x2C 'address');\x0d\n    }\x0d\n    return out;\x0d\n  } else if (this._pipeName) {\x0d\n    return this._pipeName;\x0d\n  }\x0d\n  return null;\x0d\n};\x0d\n\x0d\nfunction onconnection(err\x2C clientHandle) {\x0d\n  const handle = this;\x0d\n  const self = handle[owner_symbol];\x0d\n\x0d\n  debug('onconnection');\x0d\n\x0d\n  if (err) {\x0d\n    self.emit('error'\x2C errnoException(err\x2C 'accept'));\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (self.maxConnections && self._connections >= self.maxConnections) {\x0d\n    if (clientHandle.getsockname || clientHandle.getpeername) {\x0d\n      const data = ObjectCreate(null);\x0d\n      if (clientHandle.getsockname) {\x0d\n        const localInfo = ObjectCreate(null);\x0d\n        clientHandle.getsockname(localInfo);\x0d\n        data.localAddress = localInfo.address;\x0d\n        data.localPort = localInfo.port;\x0d\n        data.localFamily = localInfo.family;\x0d\n      }\x0d\n      if (clientHandle.getpeername) {\x0d\n        const remoteInfo = ObjectCreate(null);\x0d\n        clientHandle.getpeername(remoteInfo);\x0d\n        data.remoteAddress = remoteInfo.address;\x0d\n        data.remotePort = remoteInfo.port;\x0d\n        data.remoteFamily = remoteInfo.family;\x0d\n      }\x0d\n      self.emit('drop'\x2C data);\x0d\n    } else {\x0d\n      self.emit('drop');\x0d\n    }\x0d\n    clientHandle.close();\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const socket = new Socket({\x0d\n    handle: clientHandle\x2C\x0d\n    allowHalfOpen: self.allowHalfOpen\x2C\x0d\n    pauseOnCreate: self.pauseOnConnect\x2C\x0d\n    readable: true\x2C\x0d\n    writable: true\x0d\n  });\x0d\n\x0d\n  if (self.noDelay && clientHandle.setNoDelay) {\x0d\n    socket[kSetNoDelay] = true;\x0d\n    clientHandle.setNoDelay(true);\x0d\n  }\x0d\n  if (self.keepAlive && clientHandle.setKeepAlive) {\x0d\n    socket[kSetKeepAlive] = true;\x0d\n    socket[kSetKeepAliveInitialDelay] = self.keepAliveInitialDelay;\x0d\n    clientHandle.setKeepAlive(true\x2C self.keepAliveInitialDelay);\x0d\n  }\x0d\n\x0d\n  self._connections++;\x0d\n  socket.server = self;\x0d\n  socket._server = self;\x0d\n\x0d\n  DTRACE_NET_SERVER_CONNECTION(socket);\x0d\n  self.emit('connection'\x2C socket);\x0d\n  if (netServerSocketChannel.hasSubscribers) {\x0d\n    netServerSocketChannel.publish({\x0d\n      socket\x2C\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Gets the number of concurrent connections on the server\x0d\n * @param {Function} cb\x0d\n * @returns {Server}\x0d\n */\x0d\n\x0d\nServer.prototype.getConnections = function(cb) {\x0d\n  const self = this;\x0d\n\x0d\n  function end(err\x2C connections) {\x0d\n    defaultTriggerAsyncIdScope(self[async_id_symbol]\x2C\x0d\n                               process.nextTick\x2C\x0d\n                               cb\x2C\x0d\n                               err\x2C\x0d\n                               connections);\x0d\n  }\x0d\n\x0d\n  if (!this._usingWorkers) {\x0d\n    end(null\x2C this._connections);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Poll workers\x0d\n  let left = this._workers.length;\x0d\n  let total = this._connections;\x0d\n\x0d\n  function oncount(err\x2C count) {\x0d\n    if (err) {\x0d\n      left = -1;\x0d\n      return end(err);\x0d\n    }\x0d\n\x0d\n    total += count;\x0d\n    if (--left === 0) return end(null\x2C total);\x0d\n  }\x0d\n\x0d\n  for (let n = 0; n < this._workers.length; n++) {\x0d\n    this._workers[n].getConnections(oncount);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nServer.prototype.close = function(cb) {\x0d\n  if (typeof cb === 'function') {\x0d\n    if (!this._handle) {\x0d\n      this.once('close'\x2C function close() {\x0d\n        cb(new ERR_SERVER_NOT_RUNNING());\x0d\n      });\x0d\n    } else {\x0d\n      this.once('close'\x2C cb);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (this._handle) {\x0d\n    this._handle.close();\x0d\n    this._handle = null;\x0d\n  }\x0d\n\x0d\n  if (this._usingWorkers) {\x0d\n    let left = this._workers.length;\x0d\n    const onWorkerClose = () => {\x0d\n      if (--left !== 0) return;\x0d\n\x0d\n      this._connections = 0;\x0d\n      this._emitCloseIfDrained();\x0d\n    };\x0d\n\x0d\n    // Increment connections to be sure that\x2C even if all sockets will be closed\x0d\n    // during polling of workers\x2C `close` event will be emitted only once.\x0d\n    this._connections++;\x0d\n\x0d\n    // Poll workers\x0d\n    for (let n = 0; n < this._workers.length; n++)\x0d\n      this._workers[n].close(onWorkerClose);\x0d\n  } else {\x0d\n    this._emitCloseIfDrained();\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype._emitCloseIfDrained = function() {\x0d\n  debug('SERVER _emitCloseIfDrained');\x0d\n\x0d\n  if (this._handle || this._connections) {\x0d\n    debug('SERVER handle? %j   connections? %d'\x2C\x0d\n          !!this._handle\x2C this._connections);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  defaultTriggerAsyncIdScope(this[async_id_symbol]\x2C\x0d\n                             process.nextTick\x2C\x0d\n                             emitCloseNT\x2C\x0d\n                             this);\x0d\n};\x0d\n\x0d\n\x0d\nfunction emitCloseNT(self) {\x0d\n  debug('SERVER: emit close');\x0d\n  self.emit('close');\x0d\n}\x0d\n\x0d\n\x0d\nServer.prototype[EventEmitter.captureRejectionSymbol] = function(\x0d\n  err\x2C event\x2C sock) {\x0d\n\x0d\n  switch (event) {\x0d\n    case 'connection':\x0d\n      sock.destroy(err);\x0d\n      break;\x0d\n    default:\x0d\n      this.emit('error'\x2C err);\x0d\n  }\x0d\n};\x0d\n\x0d\n\x0d\n// Legacy alias on the C++ wrapper object. This is not public API\x2C so we may\x0d\n// want to runtime-deprecate it at some point. There's no hurry\x2C though.\x0d\nObjectDefineProperty(TCP.prototype\x2C 'owner'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return this[owner_symbol]; }\x2C\x0d\n  set(v) { return this[owner_symbol] = v; }\x0d\n});\x0d\n\x0d\nObjectDefineProperty(Socket.prototype\x2C '_handle'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return this[kHandle]; }\x2C\x0d\n  set(v) { return this[kHandle] = v; }\x0d\n});\x0d\n\x0d\nServer.prototype._setupWorker = function(socketList) {\x0d\n  this._usingWorkers = true;\x0d\n  this._workers.push(socketList);\x0d\n  socketList.once('exit'\x2C (socketList) => {\x0d\n    const index = ArrayPrototypeIndexOf(this._workers\x2C socketList);\x0d\n    this._workers.splice(index\x2C 1);\x0d\n  });\x0d\n};\x0d\n\x0d\nServer.prototype.ref = function() {\x0d\n  this._unref = false;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.ref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nServer.prototype.unref = function() {\x0d\n  this._unref = true;\x0d\n\x0d\n  if (this._handle)\x0d\n    this._handle.unref();\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nlet _setSimultaneousAccepts;\x0d\nlet warnSimultaneousAccepts = true;\x0d\n\x0d\nif (isWindows) {\x0d\n  let simultaneousAccepts;\x0d\n\x0d\n  _setSimultaneousAccepts = function(handle) {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n    if (handle === undefined) {\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    if (simultaneousAccepts === undefined) {\x0d\n      simultaneousAccepts = (process.env.NODE_MANY_ACCEPTS &&\x0d\n                             process.env.NODE_MANY_ACCEPTS !== '0');\x0d\n    }\x0d\n\x0d\n    if (handle._simultaneousAccepts !== simultaneousAccepts) {\x0d\n      handle.setSimultaneousAccepts(!!simultaneousAccepts);\x0d\n      handle._simultaneousAccepts = simultaneousAccepts;\x0d\n    }\x0d\n  };\x0d\n} else {\x0d\n  _setSimultaneousAccepts = function() {\x0d\n    if (warnSimultaneousAccepts) {\x0d\n      process.emitWarning(\x0d\n        'net._setSimultaneousAccepts() is deprecated and will be removed.'\x2C\x0d\n        'DeprecationWarning'\x2C 'DEP0121');\x0d\n      warnSimultaneousAccepts = false;\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  _createServerHandle: createServerHandle\x2C\x0d\n  _normalizeArgs: normalizeArgs\x2C\x0d\n  _setSimultaneousAccepts\x2C\x0d\n  get BlockList() {\x0d\n    BlockList ??= require('internal/blocklist').BlockList;\x0d\n    return BlockList;\x0d\n  }\x2C\x0d\n  get SocketAddress() {\x0d\n    SocketAddress ??= require('internal/socketaddress').SocketAddress;\x0d\n    return SocketAddress;\x0d\n  }\x2C\x0d\n  connect\x2C\x0d\n  createConnection: connect\x2C\x0d\n  createServer\x2C\x0d\n  isIP: isIP\x2C\x0d\n  isIPv4: isIPv4\x2C\x0d\n  isIPv6: isIPv6\x2C\x0d\n  Server\x2C\x0d\n  Socket\x2C\x0d\n  Stream: Socket\x2C // Legacy naming\x0d\n};\x0d\n
code-source-info,0x64be90ee0e,117,0,55158,C0O0C4O55158,,
code-creation,Function,10,379886,0x64be911f46,2843, node:net:1:1,0x64be90ed88,~
code-source-info,0x64be911f46,117,0,55158,C0O0C450O1183C456O1200C462O1226C468O1238C474O1249C480O1265C486O1284C492O1309C497O1334C502O1345C508O1401C514O1401C518O1401C520O1436C526O1436C530O1436C532O1468C539O1468C544O1501C559O1502C565O1468C567O1635C573O1635C578O1560C584O1569C589O1580C594O1591C600O1616C606O1676C612O1676C616O1676C618O1765C621O1765C626O1716C632O1734C638O1748C644O1810C650O1810C655O1799C661O1858C664O1858C669O1838C675O1909C678O1909C683O1892C689O2009C692O2009C697O1953C703O1961C709O1991C715O2109C718O2109C723O2050C729O2059C735O2090C741O2245C747O2245C752O2151C758O2166C769O2208C775O2225C781O2455C787O2455C792O2290C798O2308C804O2325C810O2342C815O2363C821O2375C826O2392C831O2413C837O2425C843O2439C849O2903C855O2903C860O2903C865O2522C871O2555C877O2582C883O2610C889O2636C895O2665C901O2695C907O2727C913O2756C919O2780C925O2807C931O2826C937O2852C943O2873C949O2957C955O2957C960O2940C966O3017C972O3017C977O2998C983O3189C989O3189C994O3070C1000O3094C1006O3115C1012O3133C1018O3152C1024O3169C1030O3250C1033O3250C1037O3250C1039O3352C1045O3352C1050O3292C1056O3325C1062O3435C1063O3435C1065O3449C1066O3449C1068O3459C1069O3459C1071O3475C1072O3475C1074O3518C1080O3518C1085O3501C1091O3559C1097O3559C1102O3546C1108O3616C1110O3616C1112O3654C1114O3654C1116O3681C1119O3689C1126O3698C1129O3681C1131O3727C1135O3727C1137O3776C1140O3776C1144O3776C1146O3829C1152O3829C1157O3896C1166O3896C1171O3893C1173O3961C1182O3961C1187O3958C1189O4050C1195O4050C1200O4005C1206O4021C1212O4035C1218O8141C1221O8141C1225O8141C1227O8186C1230O8186C1234O8186C1236O8232C1239O8232C1243O8232C1245O8278C1248O8278C1252O8278C1254O8338C1257O8338C1261O8338C1263O13062C1266O13090C1275O13108C1281O13115C1287O13062C1292O13128C1299O13164C1305O13128C1310O13207C1313O13214C1322O13236C1326O13472C1329O13479C1338O13496C1342O15066C1345O15073C1352O15094C1356O15119C1359O15126C1368O15147C1372O15675C1375O15682C1384O15703C1388O16104C1391O16111C1400O16134C1404O16775C1407O16782C1416O16800C1420O16855C1426O16883C1441O16939C1449O16855C1454O16994C1460O17022C1475O17069C1483O16994C1488O17161C1494O17189C1509O17244C1517O17161C1522O17581C1528O17609C1543O17664C1551O17581C1561O17757C1567O17785C1572O17796C1581O17840C1596O17757C1606O18221C1609O18228C1618O18244C1626O18491C1629O18498C1638O18512C1646O18711C1649O18718C1658O18744C1666O19115C1669O19122C1678O19138C1686O19492C1689O19499C1698O19516C1706O19715C1709O19722C1718O19737C1726O20091C1729O20098C1738O20120C1746O20284C1749O20291C1758O20310C1766O21879C1769O21886C1778O21903C1786O22013C1789O22020C1798O22043C1806O22530C1815O22530C1825O22654C1834O22654C1844O22757C1853O22757C1863O22857C1872O22857C1882O22953C1885O22960C1894O22983C1902O23277C1911O23277C1921O23380C1930O23380C1940O23472C1949O23472C1959O23570C1962O23577C1967O23587C1971O23605C1979O23661C1982O23668C1991O23692C1999O24491C2002O24498C2011O24516C2019O24595C2022O24602C2031O24619C2039O24870C2048O24870C2058O25014C2067O25014C2077O28790C2080O28797C2089O28815C2097O33370C2100O33377C2109O33391C2117O33598C2120O33605C2129O33621C2137O37241C2140O37269C2153O37293C2163O37241C2173O37306C2180O37306C2190O41427C2193O41434C2204O41453C2212O42995C2215O43002C2228O43019C2236O47386C2242O47414C2264O47468C2276O47386C2286O47566C2289O47573C2302O47591C2310O49929C2313O49936C2326O49961C2334O50758C2337O50765C2350O50781C2358O51692C2361O51699C2374O51729C2382O52229C2385O52236C2397O52259C2410O52283C2418O52616C2424O52641C2446O52686C2458O52727C2470O52616C2480O52777C2486O52805C2504O52852C2516O52888C2528O52777C2538O52933C2541O52940C2554O52963C2562O53218C2565O53225C2578O53239C2586O53351C2589O53358C2602O53374C2610O53491C2612O53547C2613O53547C2615O53556C2626O53580C2627O53580C2629O53606C2643O54336C2648O54618C2658O54661C2668O54700C2678O54718C2688O54986C2698O55016C2708O55028C2718O55051C2728O55068C2738O55087C2748O55098C2758O55109C2768O55128C2833O54633C2842O55157,,
tick,0x7ff6d5b18c00,380460,1,0x7ff6d5c66a70,3,0x7ff6d65ae370,0x2f2f3a0c8dc,0x246eeec32e5,0x64be90c439,0x2f2f3a0c8fd,0x246eeec32e5,0x64be90b0b8,0x2f2f3a0c8fd,0x246eeec32e5,0x64be906e56,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3ceea,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3aef7,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a360b3,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3181c,0x2f2f3a1021e,0x2f2f3a0b862
code-creation,Eval,10,380962,0x64be917eee,5, node:internal/net:1:1,0x64be917d28,~
script-source,118,node:internal/net,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeTest\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst Buffer = require('buffer').Buffer;\x0d\nconst { writeBuffer } = internalBinding('fs');\x0d\nconst errors = require('internal/errors');\x0d\n\x0d\n// IPv4 Segment\x0d\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\x0d\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\x0d\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\x0d\n\x0d\n// IPv6 Segment\x0d\nconst v6Seg = '(?:[0-9a-fA-F]{1\x2C4})';\x0d\nconst IPv6Reg = new RegExp('^(' +\x0d\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\x0d\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1\x2C2}|:)|` +\x0d\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0\x2C1}:${v4Str}|(:${v6Seg}){1\x2C3}|:)|` +\x0d\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0\x2C2}:${v4Str}|(:${v6Seg}){1\x2C4}|:)|` +\x0d\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0\x2C3}:${v4Str}|(:${v6Seg}){1\x2C5}|:)|` +\x0d\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0\x2C4}:${v4Str}|(:${v6Seg}){1\x2C6}|:)|` +\x0d\n  `(?::((?::${v6Seg}){0\x2C5}:${v4Str}|(?::${v6Seg}){1\x2C7}|:))` +\x0d\n')(%[0-9a-zA-Z-.:]{1\x2C})?$');\x0d\n\x0d\nfunction isIPv4(s) {\x0d\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\x0d\n  // no longer creates a perf regression in the dns benchmark.\x0d\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\x0d\n  return RegExpPrototypeTest(IPv4Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIPv6(s) {\x0d\n  // TODO(aduh95): Replace RegExpPrototypeTest with RegExpPrototypeExec when it\x0d\n  // no longer creates a perf regression in the dns benchmark.\x0d\n  // eslint-disable-next-line node-core/avoid-prototype-pollution\x0d\n  return RegExpPrototypeTest(IPv6Reg\x2C s);\x0d\n}\x0d\n\x0d\nfunction isIP(s) {\x0d\n  if (isIPv4(s)) return 4;\x0d\n  if (isIPv6(s)) return 6;\x0d\n  return 0;\x0d\n}\x0d\n\x0d\nfunction makeSyncWrite(fd) {\x0d\n  return function(chunk\x2C enc\x2C cb) {\x0d\n    if (enc !== 'buffer')\x0d\n      chunk = Buffer.from(chunk\x2C enc);\x0d\n\x0d\n    this._handle.bytesWritten += chunk.length;\x0d\n\x0d\n    const ctx = {};\x0d\n    writeBuffer(fd\x2C chunk\x2C 0\x2C chunk.length\x2C null\x2C undefined\x2C ctx);\x0d\n    if (ctx.errno !== undefined) {\x0d\n      const ex = errors.uvException(ctx);\x0d\n      ex.errno = ctx.errno;\x0d\n      return cb(ex);\x0d\n    }\x0d\n    cb();\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  isIP\x2C\x0d\n  isIPv4\x2C\x0d\n  isIPv6\x2C\x0d\n  makeSyncWrite\x2C\x0d\n  normalizedArgsSymbol: Symbol('normalizedArgs')\x0d\n};\x0d\n
code-source-info,0x64be917eee,118,0,2242,C0O0C4O2242,,
code-creation,Function,10,381173,0x64be9182de,617, node:internal/net:1:1,0x64be917e68,~
code-source-info,0x64be9182de,118,0,2242,C0O0C45O28C50O39C56O63C61O107C64O107C69O124C73O107C75O158C78O158C83O142C89O197C92O197C96O197C98O259C101O330C106O334C119O349C124O375C129O390C142O375C147O375C149O435C152O476C160O503C173O519C183O492C192O542C205O558C218O568C228O531C237O591C250O608C263O619C273O580C282O648C295O666C308O681C321O692C331O637C340O721C353O739C366O754C379O765C389O710C398O794C411O812C424O827C437O838C447O783C456O867C469O885C482O900C495O911C505O856C514O946C527O961C540O974C550O929C556O992C562O476C567O476C569O2119C576O2141C582O2150C588O2161C594O2172C601O2212C611O2134C616O2241,,
code-creation,Eval,10,382165,0x64be91b92e,5, node:internal/dtrace:1:1,0x64be91b7e8,~
script-source,119,node:internal/dtrace,'use strict';\x0d\n\x0d\nconst config = internalBinding('config');\x0d\n\x0d\nconst {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST = () => {}\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE = () => {}\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION = () => {}\x2C\x0d\n  DTRACE_NET_STREAM_END = () => {}\x0d\n} = (config.hasDtrace ? internalBinding('dtrace') : {});\x0d\n\x0d\nmodule.exports = {\x0d\n  DTRACE_HTTP_CLIENT_REQUEST\x2C\x0d\n  DTRACE_HTTP_CLIENT_RESPONSE\x2C\x0d\n  DTRACE_HTTP_SERVER_REQUEST\x2C\x0d\n  DTRACE_HTTP_SERVER_RESPONSE\x2C\x0d\n  DTRACE_NET_SERVER_CONNECTION\x2C\x0d\n  DTRACE_NET_STREAM_END\x0d\n};\x0d\n
code-source-info,0x64be91b92e,119,0,589,C0O0C4O589,,
code-creation,Function,10,382280,0x64be91be06,140, node:internal/dtrace:1:1,0x64be91b8a8,~
code-source-info,0x64be91be06,119,0,589,C0O32C3O32C8O333C17O345C25O73C36O115C47O158C58O200C69O243C80O287C91O381C98O403C104O434C110O466C116O497C122O529C128O562C134O396C139O588,,
code-creation,Eval,10,382739,0x64be91cbee,5, node:diagnostics_channel:1:1,0x64be91c990,~
script-source,120,node:diagnostics_channel,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  SymbolHasInstance\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateFunction\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { triggerUncaughtException } = internalBinding('errors');\x0d\n\x0d\nconst { WeakReference } = internalBinding('util');\x0d\n\x0d\n// TODO(qard): should there be a C++ channel interface?\x0d\nclass ActiveChannel {\x0d\n  subscribe(subscription) {\x0d\n    validateFunction(subscription\x2C 'subscription');\x0d\n    ArrayPrototypePush(this._subscribers\x2C subscription);\x0d\n  }\x0d\n\x0d\n  unsubscribe(subscription) {\x0d\n    const index = ArrayPrototypeIndexOf(this._subscribers\x2C subscription);\x0d\n    if (index === -1) return false;\x0d\n\x0d\n    ArrayPrototypeSplice(this._subscribers\x2C index\x2C 1);\x0d\n\x0d\n    // When there are no more active subscribers\x2C restore to fast prototype.\x0d\n    if (!this._subscribers.length) {\x0d\n      // eslint-disable-next-line no-use-before-define\x0d\n      ObjectSetPrototypeOf(this\x2C Channel.prototype);\x0d\n    }\x0d\n\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  get hasSubscribers() {\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  publish(data) {\x0d\n    for (let i = 0; i < this._subscribers.length; i++) {\x0d\n      try {\x0d\n        const onMessage = this._subscribers[i];\x0d\n        onMessage(data\x2C this.name);\x0d\n      } catch (err) {\x0d\n        process.nextTick(() => {\x0d\n          triggerUncaughtException(err\x2C false);\x0d\n        });\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nclass Channel {\x0d\n  constructor(name) {\x0d\n    this._subscribers = undefined;\x0d\n    this.name = name;\x0d\n  }\x0d\n\x0d\n  static [SymbolHasInstance](instance) {\x0d\n    const prototype = ObjectGetPrototypeOf(instance);\x0d\n    return prototype === Channel.prototype ||\x0d\n           prototype === ActiveChannel.prototype;\x0d\n  }\x0d\n\x0d\n  subscribe(subscription) {\x0d\n    ObjectSetPrototypeOf(this\x2C ActiveChannel.prototype);\x0d\n    this._subscribers = [];\x0d\n    this.subscribe(subscription);\x0d\n  }\x0d\n\x0d\n  unsubscribe() {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  get hasSubscribers() {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  publish() {}\x0d\n}\x0d\n\x0d\nconst channels = ObjectCreate(null);\x0d\n\x0d\nfunction channel(name) {\x0d\n  let channel;\x0d\n  const ref = channels[name];\x0d\n  if (ref) channel = ref.get();\x0d\n  if (channel) return channel;\x0d\n\x0d\n  if (typeof name !== 'string' && typeof name !== 'symbol') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('channel'\x2C ['string'\x2C 'symbol']\x2C name);\x0d\n  }\x0d\n\x0d\n  channel = new Channel(name);\x0d\n  channels[name] = new WeakReference(channel);\x0d\n  return channel;\x0d\n}\x0d\n\x0d\nfunction subscribe(name\x2C subscription) {\x0d\n  const chan = channel(name);\x0d\n  channels[name].incRef();\x0d\n  chan.subscribe(subscription);\x0d\n}\x0d\n\x0d\nfunction unsubscribe(name\x2C subscription) {\x0d\n  const chan = channel(name);\x0d\n  if (!chan.unsubscribe(subscription)) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  channels[name].decRef();\x0d\n  return true;\x0d\n}\x0d\n\x0d\nfunction hasSubscribers(name) {\x0d\n  let channel;\x0d\n  const ref = channels[name];\x0d\n  if (ref) channel = ref.get();\x0d\n  if (!channel) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  return channel.hasSubscribers;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  channel\x2C\x0d\n  hasSubscribers\x2C\x0d\n  subscribe\x2C\x0d\n  unsubscribe\x2C\x0d\n  Channel\x0d\n};\x0d\n
code-source-info,0x64be91cbee,120,0,3185,C0O0C4O3185,,
code-creation,Function,10,383033,0x64be91d83e,337, node:diagnostics_channel:1:1,0x64be91cb68,~
code-source-info,0x64be91d83e,120,0,3185,C0O0C66O28C72O54C78O77C84O102C89O119C95O144C101O169C106O266C109O266C114O266C119O234C125O329C128O329C133O306C139O401C142O401C147O372C153O457C156O457C161O439C208O542C226O1663C284O1547C286O2148C288O2148C292O2148C294O3089C301O3111C307O3123C313O3142C319O3156C325O3172C331O3104C336O3184,,
code-creation,LazyCompile,10,383321,0x64be91e2e6,105,channel node:diagnostics_channel:97:17,0x64be91cc20,~
code-source-info,0x64be91e2e6,120,2187,2557,C0O2203C2O2227C9O2235C13O2246C15O2269C20O2269C25O2279C29O2292C31O2307C32O2313C44O2378C62O2384C67O2378C68O2459C75O2469C81O2491C88O2512C93O2508C98O2506C102O2539C104O2554,,
code-creation,LazyCompile,10,383421,0x64be91e91e,13,Channel node:diagnostics_channel:67:14,0x64be91cf18,~
code-source-info,0x64be91e91e,120,1577,1649,C0O1591C1O1609C5O1627C7O1637C12O1648,,
code-creation,LazyCompile,10,383716,0x64be91ef9e,34,protoGetter node:net:824:21,0x64be90f2a0,~
code-source-info,0x64be91ef9e,117,22358,22526,C0O22380C8O22408C13O22419C20O22508C27O22380C33O22525,,
code-creation,Function,11,383877,0x246eeec4120,272,protoGetter node:net:824:21,0x64be90f2a0,^
code-source-info,0x246eeec4120,117,22358,22526,,,
code-creation,Function,11,383935,0x246eeec42a0,572,getOptionValue node:internal/options:44:24,0x6414eb37c8,^
code-source-info,0x246eeec42a0,92,1028,1278,,,
code-creation,Function,11,383993,0x246eeec4540,432,getCLIOptionsFromBinding node:internal/options:18:34,0x6414eb3460,^
code-source-info,0x246eeec4540,92,514,620,,,
code-creation,Function,11,384064,0x246eeec4760,1252,compileForInternalLoader node:internal/bootstrap/loaders:316:27,0x39b87d0c50,^
code-source-info,0x246eeec4760,9,10312,11141,,,
code-creation,Function,11,384118,0x246eeec4cc0,548,internalBinding node:internal/bootstrap/loaders:171:45,0x39b87d06a8,^
code-source-info,0x246eeec4cc0,9,5434,5679,,,
code-creation,LazyCompile,10,384299,0x64be9237ae,37,get BlockList node:net:1957:16,0x64be911338,~
code-source-info,0x64be9237ae,117,54759,54851,C0O54769C14O54783C19O54812C26O54779C32O54829C36O54846,,
code-creation,Eval,10,384606,0x64be923cb6,5, node:internal/blocklist:1:1,0x64be923ad0,~
script-source,121,node:internal/blocklist,'use strict';\x0d\n\x0d\nconst {\x0d\n  Boolean\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  BlockList: BlockListHandle\x2C\x0d\n} = internalBinding('block_list');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  SocketAddress\x2C\x0d\n  kHandle: kSocketAddressHandle\x2C\x0d\n} = require('internal/socketaddress');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst { owner_symbol } = internalBinding('symbols');\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst { validateInt32\x2C validateString } = require('internal/validators');\x0d\n\x0d\nclass BlockList extends JSTransferable {\x0d\n  constructor() {\x0d\n    super();\x0d\n    this[kHandle] = new BlockListHandle();\x0d\n    this[kHandle][owner_symbol] = this;\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `BlockList ${inspect({\x0d\n      rules: this.rules\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  addAddress(address\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(address)) {\x0d\n      validateString(address\x2C 'address');\x0d\n      validateString(family\x2C 'family');\x0d\n      address = new SocketAddress({\x0d\n        address\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    this[kHandle].addAddress(address[kSocketAddressHandle]);\x0d\n  }\x0d\n\x0d\n  addRange(start\x2C end\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(start)) {\x0d\n      validateString(start\x2C 'start');\x0d\n      validateString(family\x2C 'family');\x0d\n      start = new SocketAddress({\x0d\n        address: start\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    if (!SocketAddress.isSocketAddress(end)) {\x0d\n      validateString(end\x2C 'end');\x0d\n      validateString(family\x2C 'family');\x0d\n      end = new SocketAddress({\x0d\n        address: end\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    const ret = this[kHandle].addRange(\x0d\n      start[kSocketAddressHandle]\x2C\x0d\n      end[kSocketAddressHandle]);\x0d\n    if (ret === false)\x0d\n      throw new ERR_INVALID_ARG_VALUE('start'\x2C start\x2C 'must come before end');\x0d\n  }\x0d\n\x0d\n  addSubnet(network\x2C prefix\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(network)) {\x0d\n      validateString(network\x2C 'network');\x0d\n      validateString(family\x2C 'family');\x0d\n      network = new SocketAddress({\x0d\n        address: network\x2C\x0d\n        family\x2C\x0d\n      });\x0d\n    }\x0d\n    switch (network.family) {\x0d\n      case 'ipv4':\x0d\n        validateInt32(prefix\x2C 'prefix'\x2C 0\x2C 32);\x0d\n        break;\x0d\n      case 'ipv6':\x0d\n        validateInt32(prefix\x2C 'prefix'\x2C 0\x2C 128);\x0d\n        break;\x0d\n    }\x0d\n    this[kHandle].addSubnet(network[kSocketAddressHandle]\x2C prefix);\x0d\n  }\x0d\n\x0d\n  check(address\x2C family = 'ipv4') {\x0d\n    if (!SocketAddress.isSocketAddress(address)) {\x0d\n      validateString(address\x2C 'address');\x0d\n      validateString(family\x2C 'family');\x0d\n      try {\x0d\n        address = new SocketAddress({\x0d\n          address\x2C\x0d\n          family\x2C\x0d\n        });\x0d\n      } catch {\x0d\n        // Ignore the error. If it's not a valid address\x2C return false.\x0d\n        return false;\x0d\n      }\x0d\n    }\x0d\n    return Boolean(this[kHandle].check(address[kSocketAddressHandle]));\x0d\n  }\x0d\n\x0d\n  get rules() {\x0d\n    return this[kHandle].getRules();\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const handle = this[kHandle];\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/blocklist:InternalBlockList'\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kHandle][owner_symbol] = this;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass InternalBlockList extends JSTransferable {\x0d\n  constructor(handle) {\x0d\n    super();\x0d\n    this[kHandle] = handle;\x0d\n    if (handle !== undefined)\x0d\n      handle[owner_symbol] = this;\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalBlockList.prototype.constructor = BlockList.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalBlockList.prototype\x2C BlockList.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  BlockList\x2C\x0d\n  InternalBlockList\x2C\x0d\n};\x0d\n
code-source-info,0x64be923cb6,121,0,4043,C0O0C4O4043,,
code-creation,Function,10,384953,0x64be9246be,359, node:internal/blocklist:1:1,0x64be923c30,~
code-source-info,0x64be9246be,121,0,4043,C0O0C35O28C41O40C46O65C51O137C54O137C59O115C65O218C68O218C73O203C78O312C81O312C86O258C92O285C98O410C101O410C106O361C111O380C116O391C121O477C124O477C129O465C135O530C138O530C142O530C144O575C147O575C152O558C158O645C161O645C166O671C171O617C177O724C180O724C185O690C191O705C197O783C204O929C241O3359C251O3528C278O3669C301O3850C306O3884C311O3894C315O3872C319O3947C324O3968C329O3908C334O3983C341O4005C347O4019C353O3998C358O4042,,
code-creation,Eval,10,385847,0x64be925fa6,5, node:internal/socketaddress:1:1,0x64be925db0,~
script-source,122,node:internal/socketaddress,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  SocketAddress: _SocketAddress\x2C\x0d\n  AF_INET\x2C\x0d\n  AF_INET6\x2C\x0d\n} = internalBinding('block_list');\x0d\n\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n  validatePort\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kDetail = Symbol('kDetail');\x0d\n\x0d\nclass SocketAddress extends JSTransferable {\x0d\n  static isSocketAddress(value) {\x0d\n    return value?.[kHandle] !== undefined;\x0d\n  }\x0d\n\x0d\n  constructor(options = {}) {\x0d\n    super();\x0d\n    validateObject(options\x2C 'options');\x0d\n    let { family = 'ipv4' } = options;\x0d\n    const {\x0d\n      address = (family === 'ipv4' ? '127.0.0.1' : '::')\x2C\x0d\n      port = 0\x2C\x0d\n      flowlabel = 0\x2C\x0d\n    } = options;\x0d\n\x0d\n    let type;\x0d\n    if (typeof family?.toLowerCase === 'function')\x0d\n      family = family.toLowerCase();\x0d\n    switch (family) {\x0d\n      case 'ipv4':\x0d\n        type = AF_INET;\x0d\n        break;\x0d\n      case 'ipv6':\x0d\n        type = AF_INET6;\x0d\n        break;\x0d\n      default:\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.family'\x2C options.family);\x0d\n    }\x0d\n\x0d\n    validateString(address\x2C 'options.address');\x0d\n    validatePort(port\x2C 'options.port');\x0d\n    validateUint32(flowlabel\x2C 'options.flowlabel'\x2C false);\x0d\n\x0d\n    this[kHandle] = new _SocketAddress(address\x2C port\x2C type\x2C flowlabel);\x0d\n    this[kDetail] = this[kHandle].detail({\x0d\n      address: undefined\x2C\x0d\n      port: undefined\x2C\x0d\n      family: undefined\x2C\x0d\n      flowlabel: undefined\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  get address() {\x0d\n    return this[kDetail].address;\x0d\n  }\x0d\n\x0d\n  get port() {\x0d\n    return this[kDetail].port;\x0d\n  }\x0d\n\x0d\n  get family() {\x0d\n    return this[kDetail].family === AF_INET ? 'ipv4' : 'ipv6';\x0d\n  }\x0d\n\x0d\n  get flowlabel() {\x0d\n    // The flow label can be changed internally.\x0d\n    return this[kHandle].flowlabel();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `SocketAddress ${inspect(this.toJSON()\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const handle = this[kHandle];\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/socketaddress:InternalSocketAddress'\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kDetail] = handle.detail({\x0d\n      address: undefined\x2C\x0d\n      port: undefined\x2C\x0d\n      family: undefined\x2C\x0d\n      flowlabel: undefined\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  toJSON() {\x0d\n    return {\x0d\n      address: this.address\x2C\x0d\n      port: this.port\x2C\x0d\n      family: this.family\x2C\x0d\n      flowlabel: this.flowlabel\x2C\x0d\n    };\x0d\n  }\x0d\n}\x0d\n\x0d\nclass InternalSocketAddress extends JSTransferable {\x0d\n  constructor(handle) {\x0d\n    super();\x0d\n    this[kHandle] = handle;\x0d\n    this[kDetail] = this[kHandle]?.detail({\x0d\n      address: undefined\x2C\x0d\n      port: undefined\x2C\x0d\n      family: undefined\x2C\x0d\n      flowlabel: undefined\x2C\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalSocketAddress.prototype.constructor =\x0d\n  SocketAddress.prototype.constructor;\x0d\nObjectSetPrototypeOf(InternalSocketAddress.prototype\x2C SocketAddress.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  SocketAddress\x2C\x0d\n  InternalSocketAddress\x2C\x0d\n  kHandle\x2C\x0d\n};\x0d\n
code-source-info,0x64be925fa6,122,0,3523,C0O0C4O3523,,
code-creation,Function,10,386178,0x64be926ace,366, node:internal/socketaddress:1:1,0x64be925f20,~
code-source-info,0x64be926ace,122,0,3523,C0O0C38O28C43O53C48O154C51O154C56O108C62O127C68O139C74O275C77O275C82O199C88O218C94O237C100O254C106O369C109O369C114O369C119O335C125O447C128O447C133O432C138O496C141O496C146O484C152O593C155O593C160O544C165O563C170O574C175O656C178O656C182O656C184O692C187O692C191O692C193O742C226O2171C236O2425C246O2602C279O3017C302O3295C307O3336C312O3346C316O3317C320O3403C325O3428C330O3360C335O3443C342O3465C348O3483C354O3509C360O3458C365O3522,,
code-creation,LazyCompile,10,386476,0x64be92789e,72,BlockList node:internal/blocklist:40:14,0x64be923ce8,~
code-source-info,0x64be92789e,121,814,922,C3O824C11O824C23O838C28O843C33O858C36O854C41O852C45O882C50O887C52O886C58O896C64O910C71O921,,
code-creation,LazyCompile,10,386629,0x64be928046,115,addAddress node:internal/blocklist:60:13,0x64be923d88,~
code-source-info,0x64be928046,121,1208,1529,C14O1242C19O1261C24O1261C31O1296C39O1296C44O1339C52O1339C57O1380C69O1419C75O1437C81O1390C87O1468C89O1473C91O1472C95O1482C102O1501C104O1500C108O1482C114O1528,,
code-creation,LazyCompile,10,386741,0x64be9281c6,20,isSocketAddress node:internal/socketaddress:43:25,0x64be926028,~
code-source-info,0x64be9281c6,122,784,842,C0O799C9O814C11O813C18O823C19O837,,
code-creation,LazyCompile,10,386907,0x64be92898e,323,SocketAddress node:internal/socketaddress:47:14,0x64be925fd8,~
code-source-info,0x64be92898e,122,859,1842,C7O859C13O881C21O881C33O895C41O895C46O942C58O991C69O1009C81O1050C89O1067C97O1111C99O1122C106O1139C117O1192C122O1192C127O1212C146O1259C151O1284C153O1320C158O1346C160O1378C168O1436C175O1384C180O1378C181O1459C189O1459C194O1508C202O1508C207O1549C220O1549C225O1611C230O1616C235O1631C252O1627C257O1625C261O1684C266O1689C274O1705C276O1704C280O1714C291O1739C296O1763C301O1789C306O1818C310O1714C315O1698C322O1841,,
code-creation,LazyCompile,10,387075,0x64be928cb6,128, node:internal/validators:240:3,0x2392d4ad78,~
code-source-info,0x64be928cb6,16,6377,6943,C16O6436C27O6436C33O6523C44O6523C50O6608C61O6608C67O6671C75O6719C79O6733C82O6733C96O6810C104O6877C120O6883C125O6877C127O6942,,
code-creation,LazyCompile,10,387169,0x64be928e4e,27,getOwnPropertyValueOrDefault node:internal/validators:221:38,0x2392d4ad28,~
code-source-info,0x64be928e4e,16,5949,6097,C0O5983C7O6010C10O6010C23O6088C26O6094,,
code-creation,LazyCompile,10,387298,0x64be928f96,129,validatePort node:internal/validators:359:22,0x2392d4b040,~
code-source-info,0x64be928f96,16,9883,10250,C24O9928C44O10026C47O10026C52O10051C58O10059C65O10076C70O10087C72O10093C75O10082C86O10115C92O10140C99O10150C101O10169C117O10175C122O10169C123O10231C125O10243C128O10247,,
code-creation,LazyCompile,10,387431,0x64be9291c6,148, node:internal/validators:137:40,0x2392d4ab48,~
code-source-info,0x64be9291c6,16,3630,4075,C16O3670C22O3708C38O3714C43O3708C44O3771C49O3776C55O3807C71O3813C76O3807C77O3882C87O3944C90O3962C92O3972C99O3987C104O4001C114O4040C127O4053C140O4007C145O4001C147O4074,,
code-creation,LazyCompile,10,387640,0x64be9294b6,229,addRange node:internal/blocklist:72:11,0x64be923dd8,~
code-source-info,0x64be9294b6,121,1543,2235,C17O1580C22O1599C27O1599C34O1632C42O1632C47O1671C55O1671C60O1712C72O1758C78O1774C84O1720C90O1805C95O1824C100O1824C107O1855C115O1855C120O1890C128O1890C133O1931C145O1975C151O1989C157O1937C163O2032C165O2037C167O2036C171O2046C178O2069C180O2068C186O2103C188O2102C192O2046C199O2132C200O2140C205O2158C221O2164C226O2158C228O2234,,
code-creation,Eval,10,388114,0x64be929a16,5, node:internal/modules/esm/formats:1:1,0x64be9298a0,~
script-source,123,node:internal/modules/esm/formats,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExpPrototypeExec\x2C\x0d\n} = primordials;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\n\x0d\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\x0d\n\x0d\nconst extensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'module'\x2C\x0d\n  '.json': 'json'\x2C\x0d\n  '.mjs': 'module'\x2C\x0d\n};\x0d\n\x0d\nconst legacyExtensionFormatMap = {\x0d\n  '__proto__': null\x2C\x0d\n  '.cjs': 'commonjs'\x2C\x0d\n  '.js': 'commonjs'\x2C\x0d\n  '.json': 'commonjs'\x2C\x0d\n  '.mjs': 'module'\x2C\x0d\n  '.node': 'commonjs'\x2C\x0d\n};\x0d\n\x0d\nif (experimentalWasmModules) {\x0d\n  extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} mime\x0d\n * @returns {string | null}\x0d\n */\x0d\nfunction mimeToFormat(mime) {\x0d\n  if (\x0d\n    RegExpPrototypeExec(\x0d\n      /\\s*(text|application)\\/javascript\\s*(;\\s*charset=utf-?8\\s*)?/i\x2C\x0d\n      mime\x0d\n    ) !== null\x0d\n  ) return 'module';\x0d\n  if (mime === 'application/json') return 'json';\x0d\n  if (experimentalWasmModules && mime === 'application/wasm') return 'wasm';\x0d\n  return null;\x0d\n}\x0d\n\x0d\nfunction getLegacyExtensionFormat(ext) {\x0d\n  return legacyExtensionFormatMap[ext];\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  extensionFormatMap\x2C\x0d\n  getLegacyExtensionFormat\x2C\x0d\n  legacyExtensionFormatMap\x2C\x0d\n  mimeToFormat\x2C\x0d\n};\x0d\n
code-source-info,0x64be929a16,123,0,1256,C0O0C4O1256,,
code-creation,Function,10,388282,0x64be929cce,120, node:internal/modules/esm/formats:1:1,0x64be929990,~
code-source-info,0x64be929cce,123,0,1256,C0O0C24O28C30O95C33O95C38O76C43O161C46O161C50O161C52O238C57O386C61O386C63O531C67O565C73O629C79O593C83O1134C90O1156C96O1179C102O1208C108O1237C114O1149C119O1255,,
code-creation,Eval,10,388580,0x64be92a356,5, node:internal/modules/esm/initialize_import_meta:1:1,0x64be92a1c0,~
script-source,124,node:internal/modules/esm/initialize_import_meta,'use strict';\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst experimentalImportMetaResolve =\x0d\n  getOptionValue('--experimental-import-meta-resolve');\x0d\nconst {\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseReject\x2C\x0d\n} = primordials;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\n\x0d\nfunction createImportMetaResolve(defaultParentUrl) {\x0d\n  return async function resolve(specifier\x2C parentUrl = defaultParentUrl) {\x0d\n    return PromisePrototypeThen(\x0d\n      asyncESM.esmLoader.resolve(specifier\x2C parentUrl)\x2C\x0d\n      ({ url }) => url\x2C\x0d\n      (error) => (\x0d\n        error.code === 'ERR_UNSUPPORTED_DIR_IMPORT' ?\x0d\n          error.url : PromiseReject(error))\x0d\n    );\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {object} meta\x0d\n * @param {{url: string}} context\x0d\n */\x0d\nfunction initializeImportMeta(meta\x2C context) {\x0d\n  const { url } = context;\x0d\n\x0d\n  // Alphabetical\x0d\n  if (experimentalImportMetaResolve) {\x0d\n    meta.resolve = createImportMetaResolve(url);\x0d\n  }\x0d\n\x0d\n  meta.url = url;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  initializeImportMeta\x0d\n};\x0d\n
code-source-info,0x64be92a356,124,0,1021,C0O0C4O1021,,
code-creation,Function,10,388731,0x64be92a51e,90, node:internal/modules/esm/initialize_import_meta:1:1,0x64be92a2d0,~
code-source-info,0x64be92a51e,124,0,1021,C0O0C28O44C31O44C36O25C41O115C44O115C48O115C50O181C56O206C62O257C65O257C69O257C71O973C78O995C84O988C89O1020,,
code-creation,Eval,10,389027,0x64be92ab86,5, node:internal/modules/esm/load:1:1,0x64be92a950,~
script-source,125,node:internal/modules/esm/load,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { defaultGetFormat } = require('internal/modules/esm/get_format');\x0d\nconst { validateAssertions } = require('internal/modules/esm/assert');\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst { fetchModule } = require('internal/modules/esm/fetch_module');\x0d\n\x0d\n// Do not eagerly grab .manifest\x2C it may be in TDZ\x0d\nconst policy = getOptionValue('--experimental-policy') ?\x0d\n  require('internal/process/policy') :\x0d\n  null;\x0d\nconst experimentalNetworkImports =\x0d\n  getOptionValue('--experimental-network-imports');\x0d\n\x0d\nconst { Buffer: { from: BufferFrom } } = require('buffer');\x0d\n\x0d\nconst { readFile: readFileAsync } = require('internal/fs/promises').exports;\x0d\nconst { URL } = require('internal/url');\x0d\nconst {\x0d\n  ERR_INVALID_URL\x2C\x0d\n  ERR_UNSUPPORTED_ESM_URL_SCHEME\x2C\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst DATA_URL_PATTERN = /^[^/]+\\/[^\x2C;]+(?:[^\x2C]*?)(;base64)?\x2C([\\s\\S]*)$/;\x0d\n\x0d\nasync function getSource(url\x2C context) {\x0d\n  const parsed = new URL(url);\x0d\n  let responseURL = url;\x0d\n  let source;\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    source = await readFileAsync(parsed);\x0d\n  } else if (parsed.protocol === 'data:') {\x0d\n    const match = RegExpPrototypeExec(DATA_URL_PATTERN\x2C parsed.pathname);\x0d\n    if (!match) {\x0d\n      throw new ERR_INVALID_URL(url);\x0d\n    }\x0d\n    const { 1: base64\x2C 2: body } = match;\x0d\n    source = BufferFrom(decodeURIComponent(body)\x2C base64 ? 'base64' : 'utf8');\x0d\n  } else if (experimentalNetworkImports && (\x0d\n    parsed.protocol === 'https:' ||\x0d\n    parsed.protocol === 'http:'\x0d\n  )) {\x0d\n    const res = await fetchModule(parsed\x2C context);\x0d\n    source = await res.body;\x0d\n    responseURL = res.resolvedHREF;\x0d\n  } else {\x0d\n    const supportedSchemes = ['file'\x2C 'data'];\x0d\n    if (experimentalNetworkImports) {\x0d\n      ArrayPrototypePush(supportedSchemes\x2C 'http'\x2C 'https');\x0d\n    }\x0d\n    throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed\x2C supportedSchemes);\x0d\n  }\x0d\n  if (policy?.manifest) {\x0d\n    policy.manifest.assertIntegrity(parsed\x2C source);\x0d\n  }\x0d\n  return { responseURL\x2C source };\x0d\n}\x0d\n\x0d\n\x0d\n/**\x0d\n * Node.js default load hook.\x0d\n * @param {string} url\x0d\n * @param {object} context\x0d\n * @returns {object}\x0d\n */\x0d\nasync function defaultLoad(url\x2C context) {\x0d\n  let responseURL = url;\x0d\n  const { importAssertions } = context;\x0d\n  let {\x0d\n    format\x2C\x0d\n    source\x2C\x0d\n  } = context;\x0d\n\x0d\n  if (format == null) {\x0d\n    format = await defaultGetFormat(url\x2C context);\x0d\n  }\x0d\n\x0d\n  validateAssertions(url\x2C format\x2C importAssertions);\x0d\n\x0d\n  if (\x0d\n    format === 'builtin' ||\x0d\n    format === 'commonjs'\x0d\n  ) {\x0d\n    source = null;\x0d\n  } else if (source == null) {\x0d\n    ({ responseURL\x2C source } = await getSource(url\x2C context));\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    format\x2C\x0d\n    responseURL\x2C\x0d\n    source\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  defaultLoad\x2C\x0d\n};\x0d\n
code-source-info,0x64be92ab86,125,0,2849,C0O0C4O2849,,
code-creation,Function,10,389282,0x64be92adc6,263, node:internal/modules/esm/load:1:1,0x64be92ab00,~
code-source-info,0x64be92adc6,125,0,2849,C0O0C58O28C64O51C70O75C76O145C79O145C84O124C90O221C93O221C98O198C104O289C107O289C112O270C117O343C120O343C125O327C131O459C134O459C143O504C150O459C152O589C155O589C159O589C161O683C164O683C169O683C174O666C180O741C183O741C188O772C193O723C199O799C202O799C207O791C213O893C216O893C221O919C226O836C232O856C238O955C242O955C244O2809C251O2831C257O2824C262O2848,,
code-creation,Eval,10,390848,0x64be92c37e,5, node:internal/fs/promises:1:1,0x64be92bbd0,~
script-source,126,node:internal/fs/promises,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  Error\x2C\x0d\n  MathMax\x2C\x0d\n  MathMin\x2C\x0d\n  NumberIsSafeInteger\x2C\x0d\n  Promise\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  PromiseResolve\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafePromisePrototypeFinally\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { fs: constants } = internalBinding('constants');\x0d\nconst {\x0d\n  F_OK\x2C\x0d\n  O_SYMLINK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x0d\n} = constants;\x0d\n\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n} = require('internal/errors');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\nconst { rimrafPromises } = require('internal/fs/rimraf');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validatePrimitiveStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x2C\x0d\n} = require('internal/fs/utils');\x0d\nconst { opendir } = require('internal/fs/dir');\x0d\nconst {\x0d\n  parseFileMode\x2C\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst {\x0d\n  kEmptyObject\x2C\x0d\n  lazyDOMException\x2C\x0d\n  promisify\x2C\x0d\n} = require('internal/util');\x0d\nconst { EventEmitterMixin } = require('internal/event_target');\x0d\nconst { watch } = require('internal/fs/watchers');\x0d\nconst { isIterable } = require('internal/streams/utils');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kFd = Symbol('kFd');\x0d\nconst kRefs = Symbol('kRefs');\x0d\nconst kClosePromise = Symbol('kClosePromise');\x0d\nconst kCloseResolve = Symbol('kCloseResolve');\x0d\nconst kCloseReject = Symbol('kCloseReject');\x0d\nconst kRef = Symbol('kRef');\x0d\nconst kUnref = Symbol('kUnref');\x0d\n\x0d\nconst { kUsePromises } = binding;\x0d\nconst {\x0d\n  JSTransferable\x2C kDeserialize\x2C kTransfer\x2C kTransferList\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst getDirectoryEntriesPromise = promisify(getDirents);\x0d\nconst validateRmOptionsPromise = promisify(validateRmOptions);\x0d\n\x0d\nlet cpPromises;\x0d\nfunction lazyLoadCpPromises() {\x0d\n  return cpPromises ??= require('internal/fs/cp/cp').cpFn;\x0d\n}\x0d\n\x0d\n// Lazy loaded to avoid circular dependency.\x0d\nlet fsStreams;\x0d\nfunction lazyFsStreams() {\x0d\n  return fsStreams ??= require('internal/fs/streams');\x0d\n}\x0d\n\x0d\nclass FileHandle extends EventEmitterMixin(JSTransferable) {\x0d\n  /**\x0d\n   * @param {InternalFSBinding.FileHandle | undefined} filehandle\x0d\n   */\x0d\n  constructor(filehandle) {\x0d\n    super();\x0d\n    this[kHandle] = filehandle;\x0d\n    this[kFd] = filehandle ? filehandle.fd : -1;\x0d\n\x0d\n    this[kRefs] = 1;\x0d\n    this[kClosePromise] = null;\x0d\n  }\x0d\n\x0d\n  getAsyncId() {\x0d\n    return this[kHandle].getAsyncId();\x0d\n  }\x0d\n\x0d\n  get fd() {\x0d\n    return this[kFd];\x0d\n  }\x0d\n\x0d\n  appendFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  chmod(mode) {\x0d\n    return fsCall(fchmod\x2C this\x2C mode);\x0d\n  }\x0d\n\x0d\n  chown(uid\x2C gid) {\x0d\n    return fsCall(fchown\x2C this\x2C uid\x2C gid);\x0d\n  }\x0d\n\x0d\n  datasync() {\x0d\n    return fsCall(fdatasync\x2C this);\x0d\n  }\x0d\n\x0d\n  sync() {\x0d\n    return fsCall(fsync\x2C this);\x0d\n  }\x0d\n\x0d\n  read(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(read\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  readv(buffers\x2C position) {\x0d\n    return fsCall(readv\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  readFile(options) {\x0d\n    return fsCall(readFile\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  stat(options) {\x0d\n    return fsCall(fstat\x2C this\x2C options);\x0d\n  }\x0d\n\x0d\n  truncate(len = 0) {\x0d\n    return fsCall(ftruncate\x2C this\x2C len);\x0d\n  }\x0d\n\x0d\n  utimes(atime\x2C mtime) {\x0d\n    return fsCall(futimes\x2C this\x2C atime\x2C mtime);\x0d\n  }\x0d\n\x0d\n  write(buffer\x2C offset\x2C length\x2C position) {\x0d\n    return fsCall(write\x2C this\x2C buffer\x2C offset\x2C length\x2C position);\x0d\n  }\x0d\n\x0d\n  writev(buffers\x2C position) {\x0d\n    return fsCall(writev\x2C this\x2C buffers\x2C position);\x0d\n  }\x0d\n\x0d\n  writeFile(data\x2C options) {\x0d\n    return fsCall(writeFile\x2C this\x2C data\x2C options);\x0d\n  }\x0d\n\x0d\n  close = () => {\x0d\n    if (this[kFd] === -1) {\x0d\n      return PromiseResolve();\x0d\n    }\x0d\n\x0d\n    if (this[kClosePromise]) {\x0d\n      return this[kClosePromise];\x0d\n    }\x0d\n\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        this[kHandle].close()\x2C\x0d\n        () => { this[kClosePromise] = undefined; }\x0d\n      );\x0d\n    } else {\x0d\n      this[kClosePromise] = SafePromisePrototypeFinally(\x0d\n        new Promise((resolve\x2C reject) => {\x0d\n          this[kCloseResolve] = resolve;\x0d\n          this[kCloseReject] = reject;\x0d\n        })\x2C () => {\x0d\n          this[kClosePromise] = undefined;\x0d\n          this[kCloseReject] = undefined;\x0d\n          this[kCloseResolve] = undefined;\x0d\n        }\x0d\n      );\x0d\n    }\x0d\n\x0d\n    this.emit('close');\x0d\n    return this[kClosePromise];\x0d\n  };\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').ReadStream\x0d\n   * } ReadStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   end?: number;\x0d\n   *   highWaterMark?: number;\x0d\n   *   }} [options]\x0d\n   * @returns {ReadStream}\x0d\n   */\x0d\n  createReadStream(options = undefined) {\x0d\n    const { ReadStream } = lazyFsStreams();\x0d\n    return new ReadStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @typedef {import('./streams').WriteStream\x0d\n   * } WriteStream\x0d\n   * @param {{\x0d\n   *   encoding?: string;\x0d\n   *   autoClose?: boolean;\x0d\n   *   emitClose?: boolean;\x0d\n   *   start: number;\x0d\n   *   }} [options]\x0d\n   * @returns {WriteStream}\x0d\n   */\x0d\n  createWriteStream(options = undefined) {\x0d\n    const { WriteStream } = lazyFsStreams();\x0d\n    return new WriteStream(undefined\x2C { ...options\x2C fd: this });\x0d\n  }\x0d\n\x0d\n  [kTransfer]() {\x0d\n    if (this[kClosePromise] || this[kRefs] > 1) {\x0d\n      throw lazyDOMException('Cannot transfer FileHandle while in use'\x2C\x0d\n                             'DataCloneError');\x0d\n    }\x0d\n\x0d\n    const handle = this[kHandle];\x0d\n    this[kFd] = -1;\x0d\n    this[kHandle] = null;\x0d\n    this[kRefs] = 0;\x0d\n\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/fs/promises:FileHandle'\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kTransferList]() {\x0d\n    return [ this[kHandle] ];\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n    this[kFd] = handle.fd;\x0d\n  }\x0d\n\x0d\n  [kRef]() {\x0d\n    this[kRefs]++;\x0d\n  }\x0d\n\x0d\n  [kUnref]() {\x0d\n    this[kRefs]--;\x0d\n    if (this[kRefs] === 0) {\x0d\n      this[kFd] = -1;\x0d\n      PromisePrototypeThen(\x0d\n        this[kHandle].close()\x2C\x0d\n        this[kCloseResolve]\x2C\x0d\n        this[kCloseReject]\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function fsCall(fn\x2C handle\x2C ...args) {\x0d\n  assert(handle[kRefs] !== undefined\x2C\x0d\n         'handle must be an instance of FileHandle');\x0d\n\x0d\n  if (handle.fd === -1) {\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const err = new Error('file closed');\x0d\n    err.code = 'EBADF';\x0d\n    err.syscall = fn.name;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    handle[kRef]();\x0d\n    return await fn(handle\x2C ...new SafeArrayIterator(args));\x0d\n  } finally {\x0d\n    handle[kUnref]();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal) {\x0d\n  if (signal?.aborted)\x0d\n    throw new AbortError(undefined\x2C { cause: signal?.reason });\x0d\n}\x0d\n\x0d\nasync function writeFileHandle(filehandle\x2C data\x2C signal\x2C encoding) {\x0d\n  checkAborted(signal);\x0d\n  if (isCustomIterable(data)) {\x0d\n    for await (const buf of data) {\x0d\n      checkAborted(signal);\x0d\n      const toWrite =\x0d\n        isArrayBufferView(buf) ? buf : Buffer.from(buf\x2C encoding || 'utf8');\x0d\n      let remaining = toWrite.byteLength;\x0d\n      while (remaining > 0) {\x0d\n        const writeSize = MathMin(kWriteFileMaxChunkSize\x2C remaining);\x0d\n        const { bytesWritten } = await write(\x0d\n          filehandle\x2C toWrite\x2C toWrite.byteLength - remaining\x2C writeSize);\x0d\n        remaining -= bytesWritten;\x0d\n        checkAborted(signal);\x0d\n      }\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  data = new Uint8Array(data.buffer\x2C data.byteOffset\x2C data.byteLength);\x0d\n  let remaining = data.byteLength;\x0d\n  if (remaining === 0) return;\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    const { bytesWritten } =\x0d\n      await write(filehandle\x2C data\x2C 0\x2C\x0d\n                  MathMin(kWriteFileMaxChunkSize\x2C data.byteLength));\x0d\n    remaining -= bytesWritten;\x0d\n    data = new Uint8Array(\x0d\n      data.buffer\x2C\x0d\n      data.byteOffset + bytesWritten\x2C\x0d\n      data.byteLength - bytesWritten\x0d\n    );\x0d\n  } while (remaining > 0);\x0d\n}\x0d\n\x0d\nasync function readFileHandle(filehandle\x2C options) {\x0d\n  const signal = options?.signal;\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  const statFields = await binding.fstat(filehandle.fd\x2C false\x2C kUsePromises);\x0d\n\x0d\n  checkAborted(signal);\x0d\n\x0d\n  let size;\x0d\n  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\x0d\n    size = statFields[8/* size */];\x0d\n  } else {\x0d\n    size = 0;\x0d\n  }\x0d\n\x0d\n  if (size > kIoMaxLength)\x0d\n    throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n\x0d\n  let endOfFile = false;\x0d\n  let totalRead = 0;\x0d\n  const noSize = size === 0;\x0d\n  const buffers = [];\x0d\n  const fullBuffer = noSize ? undefined : Buffer.allocUnsafeSlow(size);\x0d\n  do {\x0d\n    checkAborted(signal);\x0d\n    let buffer;\x0d\n    let offset;\x0d\n    let length;\x0d\n    if (noSize) {\x0d\n      buffer = Buffer.allocUnsafeSlow(kReadFileUnknownBufferLength);\x0d\n      offset = 0;\x0d\n      length = kReadFileUnknownBufferLength;\x0d\n    } else {\x0d\n      buffer = fullBuffer;\x0d\n      offset = totalRead;\x0d\n      length = MathMin(size - totalRead\x2C kReadFileBufferLength);\x0d\n    }\x0d\n\x0d\n    const bytesRead = (await binding.read(filehandle.fd\x2C buffer\x2C offset\x2C\x0d\n                                          length\x2C -1\x2C kUsePromises)) || 0;\x0d\n    totalRead += bytesRead;\x0d\n    endOfFile = bytesRead === 0 || totalRead === size;\x0d\n    if (noSize && bytesRead > 0) {\x0d\n      const isBufferFull = bytesRead === kReadFileUnknownBufferLength;\x0d\n      const chunkBuffer = isBufferFull ? buffer : buffer.slice(0\x2C bytesRead);\x0d\n      ArrayPrototypePush(buffers\x2C chunkBuffer);\x0d\n    }\x0d\n  } while (!endOfFile);\x0d\n\x0d\n  let result;\x0d\n  if (size > 0) {\x0d\n    result = totalRead === size ? fullBuffer : fullBuffer.slice(0\x2C totalRead);\x0d\n  } else {\x0d\n    result = buffers.length === 1 ? buffers[0] : Buffer.concat(buffers\x2C\x0d\n                                                               totalRead);\x0d\n  }\x0d\n\x0d\n  return options.encoding ? result.toString(options.encoding) : result;\x0d\n}\x0d\n\x0d\n// All of the functions are defined as async in order to ensure that errors\x0d\n// thrown cause promise rejections rather than being thrown synchronously.\x0d\nasync function access(path\x2C mode = F_OK) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  return binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function cp(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  return lazyLoadCpPromises()(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nasync function copyFile(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  return binding.copyFile(pathModule.toNamespacedPath(src)\x2C\x0d\n                          pathModule.toNamespacedPath(dest)\x2C\x0d\n                          mode\x2C\x0d\n                          kUsePromises);\x0d\n}\x0d\n\x0d\n// Note that unlike fs.open() which uses numeric file descriptors\x2C\x0d\n// fsPromises.open() uses the fs.FileHandle class.\x0d\nasync function open(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  return new FileHandle(\x0d\n    await binding.openFileHandle(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 flagsNumber\x2C mode\x2C kUsePromises));\x0d\n}\x0d\n\x0d\nasync function read(handle\x2C bufferOrParams\x2C offset\x2C length\x2C position) {\x0d\n  let buffer = bufferOrParams;\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    // This is fh.read(params)\x0d\n    ({\x0d\n      buffer = Buffer.alloc(16384)\x2C\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x2C\x0d\n    } = bufferOrParams ?? kEmptyObject);\x0d\n\x0d\n    validateBuffer(buffer);\x0d\n  }\x0d\n\x0d\n  if (offset !== null && typeof offset === 'object') {\x0d\n    // This is fh.read(buffer\x2C options)\x0d\n    ({\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x2C\x0d\n    } = offset);\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0)\x0d\n    return { bytesRead: length\x2C buffer };\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (!NumberIsSafeInteger(position))\x0d\n    position = -1;\x0d\n\x0d\n  const bytesRead = (await binding.read(handle.fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                        position\x2C kUsePromises)) || 0;\x0d\n\x0d\n  return { bytesRead\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function readv(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const bytesRead = (await binding.readBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                               kUsePromises)) || 0;\x0d\n  return { bytesRead\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function write(handle\x2C buffer\x2C offsetOrOptions\x2C length\x2C position) {\x0d\n  if (buffer?.byteLength === 0)\x0d\n    return { bytesWritten: 0\x2C buffer };\x0d\n\x0d\n  let offset = offsetOrOptions;\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (typeof offset === 'object') {\x0d\n      ({\x0d\n        offset = 0\x2C\x0d\n        length = buffer.byteLength - offset\x2C\x0d\n        position = null\x2C\x0d\n      } = offsetOrOptions ?? kEmptyObject);\x0d\n    }\x0d\n\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    const bytesWritten =\x0d\n      (await binding.writeBuffer(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                 length\x2C position\x2C kUsePromises)) || 0;\x0d\n    return { bytesWritten\x2C buffer };\x0d\n  }\x0d\n\x0d\n  validatePrimitiveStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n  validateEncoding(buffer\x2C length);\x0d\n  const bytesWritten = (await binding.writeString(handle.fd\x2C buffer\x2C offset\x2C\x0d\n                                                  length\x2C kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffer };\x0d\n}\x0d\n\x0d\nasync function writev(handle\x2C buffers\x2C position) {\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    return { bytesWritten: 0\x2C buffers };\x0d\n  }\x0d\n\x0d\n  const bytesWritten = (await binding.writeBuffers(handle.fd\x2C buffers\x2C position\x2C\x0d\n                                                   kUsePromises)) || 0;\x0d\n  return { bytesWritten\x2C buffers };\x0d\n}\x0d\n\x0d\nasync function rename(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                        pathModule.toNamespacedPath(newPath)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function truncate(path\x2C len = 0) {\x0d\n  const fd = await open(path\x2C 'r+');\x0d\n  return SafePromisePrototypeFinally(ftruncate(fd\x2C len)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function ftruncate(handle\x2C len = 0) {\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  return binding.ftruncate(handle.fd\x2C len\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function rm(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = await validateRmOptionsPromise(path\x2C options\x2C false);\x0d\n  return rimrafPromises(path\x2C options);\x0d\n}\x0d\n\x0d\nasync function rmdir(path\x2C options) {\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n  options = validateRmdirOptions(options);\x0d\n\x0d\n  if (options.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    const stats = await stat(path);\x0d\n    if (stats.isDirectory()) {\x0d\n      return rimrafPromises(path\x2C options);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return binding.rmdir(path\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fdatasync(handle) {\x0d\n  return binding.fdatasync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fsync(handle) {\x0d\n  return binding.fsync(handle.fd\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdir(path\x2C options) {\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    options = { mode: options };\x0d\n  }\x0d\n  const {\x0d\n    recursive = false\x2C\x0d\n    mode = 0o777\x0d\n  } = options || kEmptyObject;\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  return binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                       parseFileMode(mode\x2C 'mode'\x2C 0o777)\x2C recursive\x2C\x0d\n                       kUsePromises);\x0d\n}\x0d\n\x0d\nasync function readdir(path\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                       options.encoding\x2C\x0d\n                                       !!options.withFileTypes\x2C\x0d\n                                       kUsePromises);\x0d\n  return options.withFileTypes ?\x0d\n    getDirectoryEntriesPromise(path\x2C result) :\x0d\n    result;\x0d\n}\x0d\n\x0d\nasync function readlink(path\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  return binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                          options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function symlink(target\x2C path\x2C type_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                         pathModule.toNamespacedPath(path)\x2C\x0d\n                         stringToSymlinkType(type)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fstat(handle\x2C options = { bigint: false }) {\x0d\n  const result = await binding.fstat(handle.fd\x2C options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function lstat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                     options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function stat(path\x2C options = { bigint: false }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const result = await binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                                    options.bigint\x2C kUsePromises);\x0d\n  return getStatsFromBinding(result);\x0d\n}\x0d\n\x0d\nasync function link(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  return binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                      pathModule.toNamespacedPath(newPath)\x2C\x0d\n                      kUsePromises);\x0d\n}\x0d\n\x0d\nasync function unlink(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.unlink(pathModule.toNamespacedPath(path)\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchmod(handle\x2C mode) {\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.fchmod(handle.fd\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chmod(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  return binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lchmod(path\x2C mode) {\x0d\n  if (O_SYMLINK === undefined)\x0d\n    throw new ERR_METHOD_NOT_IMPLEMENTED('lchmod()');\x0d\n\x0d\n  const fd = await open(path\x2C O_WRONLY | O_SYMLINK);\x0d\n  return SafePromisePrototypeFinally(fchmod(fd\x2C mode)\x2C fd.close);\x0d\n}\x0d\n\x0d\nasync function lchown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.lchown(pathModule.toNamespacedPath(path)\x2C\x0d\n                        uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function fchown(handle\x2C uid\x2C gid) {\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.fchown(handle.fd\x2C uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function chown(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  return binding.chown(pathModule.toNamespacedPath(path)\x2C\x0d\n                       uid\x2C gid\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function utimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                        toUnixTimestamp(atime)\x2C\x0d\n                        toUnixTimestamp(mtime)\x2C\x0d\n                        kUsePromises);\x0d\n}\x0d\n\x0d\nasync function futimes(handle\x2C atime\x2C mtime) {\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  return binding.futimes(handle.fd\x2C atime\x2C mtime\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function lutimes(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                         toUnixTimestamp(atime)\x2C\x0d\n                         toUnixTimestamp(mtime)\x2C\x0d\n                         kUsePromises);\x0d\n}\x0d\n\x0d\nasync function realpath(path\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n  return binding.realpath(path\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function mkdtemp(prefix\x2C options) {\x0d\n  options = getOptions(options);\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix);\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  return binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C kUsePromises);\x0d\n}\x0d\n\x0d\nasync function writeFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data) && !isCustomIterable(data)) {\x0d\n    validatePrimitiveStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(data\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  validateAbortSignal(options.signal);\x0d\n  if (path instanceof FileHandle)\x0d\n    return writeFileHandle(path\x2C data\x2C options.signal\x2C options.encoding);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C options.mode);\x0d\n  return SafePromisePrototypeFinally(\x0d\n    writeFileHandle(fd\x2C data\x2C options.signal\x2C options.encoding)\x2C fd.close);\x0d\n}\x0d\n\x0d\nfunction isCustomIterable(obj) {\x0d\n  return isIterable(obj) && !isArrayBufferView(obj) && typeof obj !== 'string';\x0d\n}\x0d\n\x0d\nasync function appendFile(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n  options = copyObject(options);\x0d\n  options.flag = options.flag || 'a';\x0d\n  return writeFile(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\nasync function readFile(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const flag = options.flag || 'r';\x0d\n\x0d\n  if (path instanceof FileHandle)\x0d\n    return readFileHandle(path\x2C options);\x0d\n\x0d\n  checkAborted(options.signal);\x0d\n\x0d\n  const fd = await open(path\x2C flag\x2C 0o666);\x0d\n  return SafePromisePrototypeFinally(readFileHandle(fd\x2C options)\x2C fd.close);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  exports: {\x0d\n    access\x2C\x0d\n    copyFile\x2C\x0d\n    cp\x2C\x0d\n    open\x2C\x0d\n    opendir: promisify(opendir)\x2C\x0d\n    rename\x2C\x0d\n    truncate\x2C\x0d\n    rm\x2C\x0d\n    rmdir\x2C\x0d\n    mkdir\x2C\x0d\n    readdir\x2C\x0d\n    readlink\x2C\x0d\n    symlink\x2C\x0d\n    lstat\x2C\x0d\n    stat\x2C\x0d\n    link\x2C\x0d\n    unlink\x2C\x0d\n    chmod\x2C\x0d\n    lchmod\x2C\x0d\n    lchown\x2C\x0d\n    chown\x2C\x0d\n    utimes\x2C\x0d\n    lutimes\x2C\x0d\n    realpath\x2C\x0d\n    mkdtemp\x2C\x0d\n    writeFile\x2C\x0d\n    appendFile\x2C\x0d\n    readFile\x2C\x0d\n    watch\x2C\x0d\n    constants\x2C\x0d\n  }\x2C\x0d\n\x0d\n  FileHandle\x2C\x0d\n  kRef\x2C\x0d\n  kUnref\x2C\x0d\n};\x0d\n
code-source-info,0x64be92c37e,126,0,24252,C0O0C4O24252,,
code-creation,Function,10,392824,0x64be92eace,1682, node:internal/fs/promises:1:1,0x64be92c2f8,~
code-source-info,0x64be92eace
code-creation,Function,10,393101,0x64be92f48e,27,<instance_members_initializer> node:internal/fs/promises:195:3,0x64be92d958,~
code-source-info,0x64be92f48e,126,4461,5290,C0O4461C12O4469C26O5290,,
tick,0x7ff6d6185717,393845,1,0x7ff6d5c66a70,2,0x7ff6d65ae370,0x246eeec499b,0x246eeec32e5,0x64be92ed96,0x246eeec4a63,0x246eeec32e5,0x64be92ae7d,0x246eeec4a63,0x246eeec32e5,0x2f2f3a3cf12,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3aef7,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a360b3,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3181c,0x2f2f3a1021e,0x2f2f3a0b862
code-creation,Eval,10,394207,0x64be931ffe,5, node:internal/fs/rimraf:1:1,0x64be931c98,~
script-source,127,node:internal/fs/rimraf,// This file is a modified version of the rimraf module on npm. It has been\x0d\n// modified in the following ways:\x0d\n// - Use of the assert module has been replaced with core's error system.\x0d\n// - All code related to the glob dependency has been removed.\x0d\n// - Bring your own custom fs module is not currently supported.\x0d\n// - Some basic code cleanup.\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst fs = require('fs');\x0d\nconst {\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x0d\n} = fs;\x0d\nconst { sep } = require('path');\x0d\nconst { setTimeout } = require('timers');\x0d\nconst { sleep } = require('internal/util');\x0d\nconst notEmptyErrorCodes = new SafeSet(['ENOTEMPTY'\x2C 'EEXIST'\x2C 'EPERM']);\x0d\nconst retryErrorCodes = new SafeSet(\x0d\n  ['EBUSY'\x2C 'EMFILE'\x2C 'ENFILE'\x2C 'ENOTEMPTY'\x2C 'EPERM']);\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst epermHandler = isWindows ? fixWinEPERM : _rmdir;\x0d\nconst epermHandlerSync = isWindows ? fixWinEPERMSync : _rmdirSync;\x0d\nconst readdirEncoding = 'buffer';\x0d\nconst separator = Buffer.from(sep);\x0d\n\x0d\n\x0d\nfunction rimraf(path\x2C options\x2C callback) {\x0d\n  let retries = 0;\x0d\n\x0d\n  _rimraf(path\x2C options\x2C function CB(err) {\x0d\n    if (err) {\x0d\n      if (retryErrorCodes.has(err.code) && retries < options.maxRetries) {\x0d\n        retries++;\x0d\n        const delay = retries * options.retryDelay;\x0d\n        return setTimeout(_rimraf\x2C delay\x2C path\x2C options\x2C CB);\x0d\n      }\x0d\n\x0d\n      // The file is already gone.\x0d\n      if (err.code === 'ENOENT')\x0d\n        err = null;\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rimraf(path\x2C options\x2C callback) {\x0d\n  // SunOS lets the root user unlink directories. Use lstat here to make sure\x0d\n  // it's not a directory.\x0d\n  lstat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (err.code === 'ENOENT')\x0d\n        return callback(null);\x0d\n\x0d\n      // Windows can EPERM on stat.\x0d\n      if (isWindows && err.code === 'EPERM')\x0d\n        return fixWinEPERM(path\x2C options\x2C err\x2C callback);\x0d\n    } else if (stats.isDirectory()) {\x0d\n      return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n    }\x0d\n\x0d\n    unlink(path\x2C (err) => {\x0d\n      if (err) {\x0d\n        if (err.code === 'ENOENT')\x0d\n          return callback(null);\x0d\n        if (err.code === 'EISDIR')\x0d\n          return _rmdir(path\x2C options\x2C err\x2C callback);\x0d\n        if (err.code === 'EPERM') {\x0d\n          return epermHandler(path\x2C options\x2C err\x2C callback);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return callback(err);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERM(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  chmod(path\x2C 0o666\x2C (err) => {\x0d\n    if (err)\x0d\n      return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n    stat(path\x2C (err\x2C stats) => {\x0d\n      if (err)\x0d\n        return callback(err.code === 'ENOENT' ? null : originalErr);\x0d\n\x0d\n      if (stats.isDirectory())\x0d\n        _rmdir(path\x2C options\x2C originalErr\x2C callback);\x0d\n      else\x0d\n        unlink(path\x2C callback);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdir(path\x2C options\x2C originalErr\x2C callback) {\x0d\n  rmdir(path\x2C (err) => {\x0d\n    if (err) {\x0d\n      if (notEmptyErrorCodes.has(err.code))\x0d\n        return _rmchildren(path\x2C options\x2C callback);\x0d\n      if (err.code === 'ENOTDIR')\x0d\n        return callback(originalErr);\x0d\n    }\x0d\n\x0d\n    callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmchildren(path\x2C options\x2C callback) {\x0d\n  const pathBuf = Buffer.from(path);\x0d\n\x0d\n  readdir(pathBuf\x2C readdirEncoding\x2C (err\x2C files) => {\x0d\n    if (err)\x0d\n      return callback(err);\x0d\n\x0d\n    let numFiles = files.length;\x0d\n\x0d\n    if (numFiles === 0)\x0d\n      return rmdir(path\x2C callback);\x0d\n\x0d\n    let done = false;\x0d\n\x0d\n    ArrayPrototypeForEach(files\x2C (child) => {\x0d\n      const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n      rimraf(childPath\x2C options\x2C (err) => {\x0d\n        if (done)\x0d\n          return;\x0d\n\x0d\n        if (err) {\x0d\n          done = true;\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        numFiles--;\x0d\n        if (numFiles === 0)\x0d\n          rmdir(path\x2C callback);\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafPromises(path\x2C options) {\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    rimraf(path\x2C options\x2C (err) => {\x0d\n      if (err)\x0d\n        return reject(err);\x0d\n\x0d\n      resolve();\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction rimrafSync(path\x2C options) {\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = lstatSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    // Windows can EPERM on stat.\x0d\n    if (isWindows && err.code === 'EPERM')\x0d\n      fixWinEPERMSync(path\x2C options\x2C err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    // SunOS lets the root user unlink directories.\x0d\n    if (stats?.isDirectory())\x0d\n      _rmdirSync(path\x2C options\x2C null);\x0d\n    else\x0d\n      _unlinkSync(path\x2C options);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'EPERM')\x0d\n      return epermHandlerSync(path\x2C options\x2C err);\x0d\n    if (err.code !== 'EISDIR')\x0d\n      throw err;\x0d\n\x0d\n    _rmdirSync(path\x2C options\x2C err);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _unlinkSync(path\x2C options) {\x0d\n  const tries = options.maxRetries + 1;\x0d\n\x0d\n  for (let i = 1; i <= tries; i++) {\x0d\n    try {\x0d\n      return unlinkSync(path);\x0d\n    } catch (err) {\x0d\n      // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n      // than zero\x2C and an error was encountered that warrants a retry.\x0d\n      if (retryErrorCodes.has(err.code) &&\x0d\n          i < tries &&\x0d\n          options.retryDelay > 0) {\x0d\n        sleep(i * options.retryDelay);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction _rmdirSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    rmdirSync(path);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n    if (err.code === 'ENOTDIR')\x0d\n      throw originalErr;\x0d\n\x0d\n    if (notEmptyErrorCodes.has(err.code)) {\x0d\n      // Removing failed. Try removing all children and then retrying the\x0d\n      // original removal. Windows has a habit of not closing handles promptly\x0d\n      // when files are deleted\x2C resulting in spurious ENOTEMPTY failures. Work\x0d\n      // around that issue by retrying on Windows.\x0d\n      const pathBuf = Buffer.from(path);\x0d\n\x0d\n      ArrayPrototypeForEach(readdirSync(pathBuf\x2C readdirEncoding)\x2C (child) => {\x0d\n        const childPath = Buffer.concat([pathBuf\x2C separator\x2C child]);\x0d\n\x0d\n        rimrafSync(childPath\x2C options);\x0d\n      });\x0d\n\x0d\n      const tries = options.maxRetries + 1;\x0d\n\x0d\n      for (let i = 1; i <= tries; i++) {\x0d\n        try {\x0d\n          return fs.rmdirSync(path);\x0d\n        } catch (err) {\x0d\n          // Only sleep if this is not the last try\x2C and the delay is greater\x0d\n          // than zero\x2C and an error was encountered that warrants a retry.\x0d\n          if (retryErrorCodes.has(err.code) &&\x0d\n              i < tries &&\x0d\n              options.retryDelay > 0) {\x0d\n            sleep(i * options.retryDelay);\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction fixWinEPERMSync(path\x2C options\x2C originalErr) {\x0d\n  try {\x0d\n    chmodSync(path\x2C 0o666);\x0d\n  } catch (err) {\x0d\n    if (err.code === 'ENOENT')\x0d\n      return;\x0d\n\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  let stats;\x0d\n\x0d\n  try {\x0d\n    stats = statSync(path\x2C { throwIfNoEntry: false });\x0d\n  } catch {\x0d\n    throw originalErr;\x0d\n  }\x0d\n\x0d\n  if (stats === undefined) return;\x0d\n\x0d\n  if (stats.isDirectory())\x0d\n    _rmdirSync(path\x2C options\x2C originalErr);\x0d\n  else\x0d\n    _unlinkSync(path\x2C options);\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = { rimraf\x2C rimrafPromises\x2C rimrafSync };\x0d\n
code-source-info,0x64be931ffe,127,0,7392,C0O0C4O7392,,
code-creation,Function,10,394822,0x64be9325fe,409, node:internal/fs/rimraf:1:1,0x64be931f78,~
code-source-info,0x64be9325fe,127,0,7392,C0O0C139O377C145O403C151O415C156O464C159O464C164O453C170O495C173O495C177O495C179O671C182O522C188O532C194O546C200O556C206O570C212O582C218O598C224O608C230O622C236O631C242O644C248O655C254O692C257O692C262O684C267O733C270O733C275O718C281O771C284O771C289O761C295O825C302O825C307O825C309O897C316O897C321O897C323O994C330O1003C333O986C335O1038C345O1038C347O1098C357O1098C359O1165C361O1165C363O1194C366O1201C371O1201C376O1194C378O7334C385O7353C391O7361C397O7377C403O7349C408O7391,,
code-creation,LazyCompile,10,395204,0x64be933496,188,from node:buffer:301:28,0x2392d7d658,~
script-source,24,node:buffer,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  MathFloor\x2C\x0d\n  MathMin\x2C\x0d\n  MathTrunc\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberMAX_SAFE_INTEGER\x2C\x0d\n  NumberMIN_SAFE_INTEGER\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n  SymbolSpecies\x2C\x0d\n  SymbolToPrimitive\x2C\x0d\n  TypedArrayPrototypeGetByteLength\x2C\x0d\n  TypedArrayPrototypeFill\x2C\x0d\n  TypedArrayPrototypeSet\x2C\x0d\n  Uint8Array\x2C\x0d\n  Uint8ArrayPrototype\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  byteLengthUtf8\x2C\x0d\n  compare: _compare\x2C\x0d\n  compareOffset\x2C\x0d\n  createFromString\x2C\x0d\n  fill: bindingFill\x2C\x0d\n  indexOfBuffer\x2C\x0d\n  indexOfNumber\x2C\x0d\n  indexOfString\x2C\x0d\n  swap16: _swap16\x2C\x0d\n  swap32: _swap32\x2C\x0d\n  swap64: _swap64\x2C\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x0d\n} = internalBinding('buffer');\x0d\nconst {\x0d\n  getOwnNonIndexProperties\x2C\x0d\n  propertyFilter: {\x0d\n    ALL_PROPERTIES\x2C\x0d\n    ONLY_ENUMERABLE\x0d\n  }\x2C\x0d\n} = internalBinding('util');\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  kIsEncodingSymbol\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  inspect: utilInspect\x0d\n} = require('internal/util/inspect');\x0d\nconst { encodings } = internalBinding('string_decoder');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_BUFFER_OUT_OF_BOUNDS\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_BUFFER_SIZE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_UNKNOWN_ENCODING\x0d\n  }\x2C\x0d\n  genericNodeError\x2C\x0d\n  hideStackFrames\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateNumber\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n// Provide validateInteger() but with kMaxLength as the default maximum value.\x0d\nconst validateOffset = (value\x2C name\x2C min = 0\x2C max = kMaxLength) =>\x0d\n  validateInteger(value\x2C name\x2C min\x2C max);\x0d\n\x0d\nconst {\x0d\n  FastBuffer\x2C\x0d\n  markAsUntransferable\x2C\x0d\n  addBufferPrototypeMethods\x2C\x0d\n  createUnsafeBuffer\x0d\n} = require('internal/buffer');\x0d\n\x0d\nconst {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n} = require('internal/blob');\x0d\n\x0d\nFastBuffer.prototype.constructor = Buffer;\x0d\nBuffer.prototype = FastBuffer.prototype;\x0d\naddBufferPrototypeMethods(Buffer.prototype);\x0d\n\x0d\nconst constants = ObjectDefineProperties({}\x2C {\x0d\n  MAX_LENGTH: {\x0d\n    __proto__: null\x2C\x0d\n    value: kMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x2C\x0d\n  MAX_STRING_LENGTH: {\x0d\n    __proto__: null\x2C\x0d\n    value: kStringMaxLength\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: true\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.poolSize = 8 * 1024;\x0d\nlet poolSize\x2C poolOffset\x2C allocPool;\x0d\n\x0d\nconst encodingsMap = ObjectCreate(null);\x0d\nfor (let i = 0; i < encodings.length; ++i)\x0d\n  encodingsMap[encodings[i]] = i;\x0d\n\x0d\nfunction createPool() {\x0d\n  poolSize = Buffer.poolSize;\x0d\n  allocPool = createUnsafeBuffer(poolSize).buffer;\x0d\n  markAsUntransferable(allocPool);\x0d\n  poolOffset = 0;\x0d\n}\x0d\ncreatePool();\x0d\n\x0d\nfunction alignPool() {\x0d\n  // Ensure aligned slices\x0d\n  if (poolOffset & 0x7) {\x0d\n    poolOffset |= 0x7;\x0d\n    poolOffset++;\x0d\n  }\x0d\n}\x0d\n\x0d\nlet bufferWarningAlreadyEmitted = false;\x0d\nlet nodeModulesCheckCounter = 0;\x0d\nconst bufferWarning = 'Buffer() is deprecated due to security and usability ' +\x0d\n                      'issues. Please use the Buffer.alloc()\x2C ' +\x0d\n                      'Buffer.allocUnsafe()\x2C or Buffer.from() methods instead.';\x0d\n\x0d\nfunction showFlaggedDeprecation() {\x0d\n  if (bufferWarningAlreadyEmitted ||\x0d\n      ++nodeModulesCheckCounter > 10000 ||\x0d\n      (!require('internal/options').getOptionValue('--pending-deprecation') &&\x0d\n       isInsideNodeModules())) {\x0d\n    // We don't emit a warning\x2C because we either:\x0d\n    // - Already did so\x2C or\x0d\n    // - Already checked too many times whether a call is coming\x0d\n    //   from node_modules and want to stop slowing down things\x2C or\x0d\n    // - We aren't running with `--pending-deprecation` enabled\x2C\x0d\n    //   and the code is inside `node_modules`.\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  process.emitWarning(bufferWarning\x2C 'DeprecationWarning'\x2C 'DEP0005');\x0d\n  bufferWarningAlreadyEmitted = true;\x0d\n}\x0d\n\x0d\nfunction toInteger(n\x2C defaultVal) {\x0d\n  n = +n;\x0d\n  if (!NumberIsNaN(n) &&\x0d\n      n >= NumberMIN_SAFE_INTEGER &&\x0d\n      n <= NumberMAX_SAFE_INTEGER) {\x0d\n    return ((n % 1) === 0 ? n : MathFloor(n));\x0d\n  }\x0d\n  return defaultVal;\x0d\n}\x0d\n\x0d\nfunction _copy(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (!isUint8Array(source))\x0d\n    throw new ERR_INVALID_ARG_TYPE('source'\x2C ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n  if (!isUint8Array(target))\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n\x0d\n  if (targetStart === undefined) {\x0d\n    targetStart = 0;\x0d\n  } else {\x0d\n    targetStart = toInteger(targetStart\x2C 0);\x0d\n    if (targetStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('targetStart'\x2C '>= 0'\x2C targetStart);\x0d\n  }\x0d\n\x0d\n  if (sourceStart === undefined) {\x0d\n    sourceStart = 0;\x0d\n  } else {\x0d\n    sourceStart = toInteger(sourceStart\x2C 0);\x0d\n    if (sourceStart < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceStart'\x2C '>= 0'\x2C sourceStart);\x0d\n  }\x0d\n\x0d\n  if (sourceEnd === undefined) {\x0d\n    sourceEnd = source.length;\x0d\n  } else {\x0d\n    sourceEnd = toInteger(sourceEnd\x2C 0);\x0d\n    if (sourceEnd < 0)\x0d\n      throw new ERR_OUT_OF_RANGE('sourceEnd'\x2C '>= 0'\x2C sourceEnd);\x0d\n  }\x0d\n\x0d\n  if (targetStart >= target.length || sourceStart >= sourceEnd)\x0d\n    return 0;\x0d\n\x0d\n  if (sourceStart > source.length) {\x0d\n    throw new ERR_OUT_OF_RANGE('sourceStart'\x2C\x0d\n                               `<= ${source.length}`\x2C\x0d\n                               sourceStart);\x0d\n  }\x0d\n\x0d\n  return _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n}\x0d\n\x0d\nfunction _copyActual(source\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n  if (sourceEnd - sourceStart > target.length - targetStart)\x0d\n    sourceEnd = sourceStart + target.length - targetStart;\x0d\n\x0d\n  let nb = sourceEnd - sourceStart;\x0d\n  const sourceLen = source.length - sourceStart;\x0d\n  if (nb > sourceLen)\x0d\n    nb = sourceLen;\x0d\n\x0d\n  if (sourceStart !== 0 || sourceEnd < source.length)\x0d\n    source = new Uint8Array(source.buffer\x2C source.byteOffset + sourceStart\x2C nb);\x0d\n\x0d\n  TypedArrayPrototypeSet(target\x2C source\x2C targetStart);\x0d\n\x0d\n  return nb;\x0d\n}\x0d\n\x0d\n/**\x0d\n * The Buffer() constructor is deprecated in documentation and should not be\x0d\n * used moving forward. Rather\x2C developers should use one of the three new\x0d\n * factory APIs: Buffer.from()\x2C Buffer.allocUnsafe() or Buffer.alloc() based on\x0d\n * their specific needs. There is no runtime deprecation because of the extent\x0d\n * to which the Buffer constructor is used in the ecosystem currently -- a\x0d\n * runtime deprecation would introduce too much breakage at this time. It's not\x0d\n * likely that the Buffer constructors would ever actually be removed.\x0d\n * Deprecation Code: DEP0005\x0d\n */\x0d\nfunction Buffer(arg\x2C encodingOrOffset\x2C length) {\x0d\n  showFlaggedDeprecation();\x0d\n  // Common case.\x0d\n  if (typeof arg === 'number') {\x0d\n    if (typeof encodingOrOffset === 'string') {\x0d\n      throw new ERR_INVALID_ARG_TYPE('string'\x2C 'string'\x2C arg);\x0d\n    }\x0d\n    return Buffer.alloc(arg);\x0d\n  }\x0d\n  return Buffer.from(arg\x2C encodingOrOffset\x2C length);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Buffer\x2C SymbolSpecies\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: false\x2C\x0d\n  configurable: true\x2C\x0d\n  get() { return FastBuffer; }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Functionally equivalent to Buffer(arg\x2C encoding) but throws a TypeError\x0d\n * if value is a number.\x0d\n * Buffer.from(str[\x2C encoding])\x0d\n * Buffer.from(array)\x0d\n * Buffer.from(buffer)\x0d\n * Buffer.from(arrayBuffer[\x2C byteOffset[\x2C length]])\x0d\n */\x0d\nBuffer.from = function from(value\x2C encodingOrOffset\x2C length) {\x0d\n  if (typeof value === 'string')\x0d\n    return fromString(value\x2C encodingOrOffset);\x0d\n\x0d\n  if (typeof value === 'object' && value !== null) {\x0d\n    if (isAnyArrayBuffer(value))\x0d\n      return fromArrayBuffer(value\x2C encodingOrOffset\x2C length);\x0d\n\x0d\n    const valueOf = value.valueOf && value.valueOf();\x0d\n    if (valueOf != null &&\x0d\n        valueOf !== value &&\x0d\n        (typeof valueOf === 'string' || typeof valueOf === 'object')) {\x0d\n      return from(valueOf\x2C encodingOrOffset\x2C length);\x0d\n    }\x0d\n\x0d\n    const b = fromObject(value);\x0d\n    if (b)\x0d\n      return b;\x0d\n\x0d\n    if (typeof value[SymbolToPrimitive] === 'function') {\x0d\n      const primitive = value[SymbolToPrimitive]('string');\x0d\n      if (typeof primitive === 'string') {\x0d\n        return fromString(primitive\x2C encodingOrOffset);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'first argument'\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'ArrayBuffer'\x2C 'Array'\x2C 'Array-like Object']\x2C\x0d\n    value\x0d\n  );\x0d\n};\x0d\n\x0d\n// Identical to the built-in %TypedArray%.of()\x2C but avoids using the deprecated\x0d\n// Buffer() constructor. Must use arrow function syntax to avoid automatically\x0d\n// adding a `prototype` property and making the function a constructor.\x0d\n//\x0d\n// Refs: https://tc39.github.io/ecma262/#sec-%typedarray%.of\x0d\n// Refs: https://esdiscuss.org/topic/isconstructor#content-11\x0d\nconst of = (...items) => {\x0d\n  const newObj = createUnsafeBuffer(items.length);\x0d\n  for (let k = 0; k < items.length; k++)\x0d\n    newObj[k] = items[k];\x0d\n  return newObj;\x0d\n};\x0d\nBuffer.of = of;\x0d\n\x0d\nObjectSetPrototypeOf(Buffer\x2C Uint8Array);\x0d\n\x0d\n// The 'assertSize' method will remove itself from the callstack when an error\x0d\n// occurs. This is done simply to keep the internal details of the\x0d\n// implementation from bleeding out to users.\x0d\nconst assertSize = hideStackFrames((size) => {\x0d\n  validateNumber(size\x2C 'size');\x0d\n  if (!(size >= 0 && size <= kMaxLength)) {\x0d\n    throw new ERR_INVALID_ARG_VALUE.RangeError('size'\x2C size);\x0d\n  }\x0d\n});\x0d\n\x0d\n/**\x0d\n * Creates a new filled Buffer instance.\x0d\n * alloc(size[\x2C fill[\x2C encoding]])\x0d\n */\x0d\nBuffer.alloc = function alloc(size\x2C fill\x2C encoding) {\x0d\n  assertSize(size);\x0d\n  if (fill !== undefined && fill !== 0 && size > 0) {\x0d\n    const buf = createUnsafeBuffer(size);\x0d\n    return _fill(buf\x2C fill\x2C 0\x2C buf.length\x2C encoding);\x0d\n  }\x0d\n  return new FastBuffer(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to Buffer(num)\x2C by default creates a non-zero-filled Buffer\x0d\n * instance. If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafe = function allocUnsafe(size) {\x0d\n  assertSize(size);\x0d\n  return allocate(size);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Equivalent to SlowBuffer(num)\x2C by default creates a non-zero-filled\x0d\n * Buffer instance that is not allocated off the pre-initialized pool.\x0d\n * If `--zero-fill-buffers` is set\x2C will zero-fill the buffer.\x0d\n */\x0d\nBuffer.allocUnsafeSlow = function allocUnsafeSlow(size) {\x0d\n  assertSize(size);\x0d\n  return createUnsafeBuffer(size);\x0d\n};\x0d\n\x0d\n// If --zero-fill-buffers command line argument is set\x2C a zero-filled\x0d\n// buffer is returned.\x0d\nfunction SlowBuffer(length) {\x0d\n  assertSize(length);\x0d\n  return createUnsafeBuffer(length);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(SlowBuffer.prototype\x2C Uint8ArrayPrototype);\x0d\nObjectSetPrototypeOf(SlowBuffer\x2C Uint8Array);\x0d\n\x0d\nfunction allocate(size) {\x0d\n  if (size <= 0) {\x0d\n    return new FastBuffer();\x0d\n  }\x0d\n  if (size < (Buffer.poolSize >>> 1)) {\x0d\n    if (size > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C size);\x0d\n    poolOffset += size;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return createUnsafeBuffer(size);\x0d\n}\x0d\n\x0d\nfunction fromStringFast(string\x2C ops) {\x0d\n  const length = ops.byteLength(string);\x0d\n\x0d\n  if (length >= (Buffer.poolSize >>> 1))\x0d\n    return createFromString(string\x2C ops.encodingVal);\x0d\n\x0d\n  if (length > (poolSize - poolOffset))\x0d\n    createPool();\x0d\n  let b = new FastBuffer(allocPool\x2C poolOffset\x2C length);\x0d\n  const actual = ops.write(b\x2C string\x2C 0\x2C length);\x0d\n  if (actual !== length) {\x0d\n    // byteLength() may overestimate. That's a rare case\x2C though.\x0d\n    b = new FastBuffer(allocPool\x2C poolOffset\x2C actual);\x0d\n  }\x0d\n  poolOffset += actual;\x0d\n  alignPool();\x0d\n  return b;\x0d\n}\x0d\n\x0d\nfunction fromString(string\x2C encoding) {\x0d\n  let ops;\x0d\n  if (typeof encoding !== 'string' || encoding.length === 0) {\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n    ops = encodingOps.utf8;\x0d\n    encoding = undefined;\x0d\n  } else {\x0d\n    ops = getEncodingOps(encoding);\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    if (string.length === 0)\x0d\n      return new FastBuffer();\x0d\n  }\x0d\n  return fromStringFast(string\x2C ops);\x0d\n}\x0d\n\x0d\nfunction fromArrayBuffer(obj\x2C byteOffset\x2C length) {\x0d\n  // Convert byteOffset to integer\x0d\n  if (byteOffset === undefined) {\x0d\n    byteOffset = 0;\x0d\n  } else {\x0d\n    byteOffset = +byteOffset;\x0d\n    if (NumberIsNaN(byteOffset))\x0d\n      byteOffset = 0;\x0d\n  }\x0d\n\x0d\n  const maxLength = obj.byteLength - byteOffset;\x0d\n\x0d\n  if (maxLength < 0)\x0d\n    throw new ERR_BUFFER_OUT_OF_BOUNDS('offset');\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = maxLength;\x0d\n  } else {\x0d\n    // Convert length to non-negative integer.\x0d\n    length = +length;\x0d\n    if (length > 0) {\x0d\n      if (length > maxLength)\x0d\n        throw new ERR_BUFFER_OUT_OF_BOUNDS('length');\x0d\n    } else {\x0d\n      length = 0;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return new FastBuffer(obj\x2C byteOffset\x2C length);\x0d\n}\x0d\n\x0d\nfunction fromArrayLike(obj) {\x0d\n  if (obj.length <= 0)\x0d\n    return new FastBuffer();\x0d\n  if (obj.length < (Buffer.poolSize >>> 1)) {\x0d\n    if (obj.length > (poolSize - poolOffset))\x0d\n      createPool();\x0d\n    const b = new FastBuffer(allocPool\x2C poolOffset\x2C obj.length);\x0d\n    TypedArrayPrototypeSet(b\x2C obj\x2C 0);\x0d\n    poolOffset += obj.length;\x0d\n    alignPool();\x0d\n    return b;\x0d\n  }\x0d\n  return new FastBuffer(obj);\x0d\n}\x0d\n\x0d\nfunction fromObject(obj) {\x0d\n  if (obj.length !== undefined || isAnyArrayBuffer(obj.buffer)) {\x0d\n    if (typeof obj.length !== 'number') {\x0d\n      return new FastBuffer();\x0d\n    }\x0d\n    return fromArrayLike(obj);\x0d\n  }\x0d\n\x0d\n  if (obj.type === 'Buffer' && ArrayIsArray(obj.data)) {\x0d\n    return fromArrayLike(obj.data);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Static methods\x0d\n\x0d\nBuffer.isBuffer = function isBuffer(b) {\x0d\n  return b instanceof Buffer;\x0d\n};\x0d\n\x0d\nBuffer.compare = function compare(buf1\x2C buf2) {\x0d\n  if (!isUint8Array(buf1)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf1'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf1);\x0d\n  }\x0d\n\x0d\n  if (!isUint8Array(buf2)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('buf2'\x2C ['Buffer'\x2C 'Uint8Array']\x2C buf2);\x0d\n  }\x0d\n\x0d\n  if (buf1 === buf2) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  return _compare(buf1\x2C buf2);\x0d\n};\x0d\n\x0d\nBuffer.isEncoding = function isEncoding(encoding) {\x0d\n  return typeof encoding === 'string' && encoding.length !== 0 &&\x0d\n         normalizeEncoding(encoding) !== undefined;\x0d\n};\x0d\nBuffer[kIsEncodingSymbol] = Buffer.isEncoding;\x0d\n\x0d\nBuffer.concat = function concat(list\x2C length) {\x0d\n  validateArray(list\x2C 'list');\x0d\n\x0d\n  if (list.length === 0)\x0d\n    return new FastBuffer();\x0d\n\x0d\n  if (length === undefined) {\x0d\n    length = 0;\x0d\n    for (let i = 0; i < list.length; i++) {\x0d\n      if (list[i].length) {\x0d\n        length += list[i].length;\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    validateOffset(length\x2C 'length');\x0d\n  }\x0d\n\x0d\n  const buffer = Buffer.allocUnsafe(length);\x0d\n  let pos = 0;\x0d\n  for (let i = 0; i < list.length; i++) {\x0d\n    const buf = list[i];\x0d\n    if (!isUint8Array(buf)) {\x0d\n      // TODO(BridgeAR): This should not be of type ERR_INVALID_ARG_TYPE.\x0d\n      // Instead\x2C find the proper error code for this.\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        `list[${i}]`\x2C ['Buffer'\x2C 'Uint8Array']\x2C list[i]);\x0d\n    }\x0d\n    pos += _copyActual(buf\x2C buffer\x2C pos\x2C 0\x2C buf.length);\x0d\n  }\x0d\n\x0d\n  // Note: `length` is always equal to `buffer.length` at this point\x0d\n  if (pos < length) {\x0d\n    // Zero-fill the remaining bytes if the specified `length` was more than\x0d\n    // the actual total length\x2C i.e. if we have some remaining allocated bytes\x0d\n    // there were not initialized.\x0d\n    TypedArrayPrototypeFill(buffer\x2C 0\x2C pos\x2C length);\x0d\n  }\x0d\n\x0d\n  return buffer;\x0d\n};\x0d\n\x0d\nfunction base64ByteLength(str\x2C bytes) {\x0d\n  // Handle padding\x0d\n  if (StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n  if (bytes > 1 && StringPrototypeCharCodeAt(str\x2C bytes - 1) === 0x3D)\x0d\n    bytes--;\x0d\n\x0d\n  // Base64 ratio: 3/4\x0d\n  return (bytes * 3) >>> 2;\x0d\n}\x0d\n\x0d\nconst encodingOps = {\x0d\n  utf8: {\x0d\n    encoding: 'utf8'\x2C\x0d\n    encodingVal: encodingsMap.utf8\x2C\x0d\n    byteLength: byteLengthUtf8\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.utf8Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.utf8Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf8\x2C dir)\x0d\n  }\x2C\x0d\n  ucs2: {\x0d\n    encoding: 'ucs2'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  utf16le: {\x0d\n    encoding: 'utf16le'\x2C\x0d\n    encodingVal: encodingsMap.utf16le\x2C\x0d\n    byteLength: (string) => string.length * 2\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.ucs2Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.ucs2Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.utf16le\x2C dir)\x0d\n  }\x2C\x0d\n  latin1: {\x0d\n    encoding: 'latin1'\x2C\x0d\n    encodingVal: encodingsMap.latin1\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.latin1Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.latin1Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfString(buf\x2C val\x2C byteOffset\x2C encodingsMap.latin1\x2C dir)\x0d\n  }\x2C\x0d\n  ascii: {\x0d\n    encoding: 'ascii'\x2C\x0d\n    encodingVal: encodingsMap.ascii\x2C\x0d\n    byteLength: (string) => string.length\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.asciiWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.asciiSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.ascii)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.ascii\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64: {\x0d\n    encoding: 'base64'\x2C\x0d\n    encodingVal: encodingsMap.base64\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.base64Write(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64Slice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  base64url: {\x0d\n    encoding: 'base64url'\x2C\x0d\n    encodingVal: encodingsMap.base64url\x2C\x0d\n    byteLength: (string) => base64ByteLength(string\x2C string.length)\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) =>\x0d\n      buf.base64urlWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.base64urlSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.base64url)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.base64url\x2C\x0d\n                    dir)\x0d\n  }\x2C\x0d\n  hex: {\x0d\n    encoding: 'hex'\x2C\x0d\n    encodingVal: encodingsMap.hex\x2C\x0d\n    byteLength: (string) => string.length >>> 1\x2C\x0d\n    write: (buf\x2C string\x2C offset\x2C len) => buf.hexWrite(string\x2C offset\x2C len)\x2C\x0d\n    slice: (buf\x2C start\x2C end) => buf.hexSlice(start\x2C end)\x2C\x0d\n    indexOf: (buf\x2C val\x2C byteOffset\x2C dir) =>\x0d\n      indexOfBuffer(buf\x2C\x0d\n                    fromStringFast(val\x2C encodingOps.hex)\x2C\x0d\n                    byteOffset\x2C\x0d\n                    encodingsMap.hex\x2C\x0d\n                    dir)\x0d\n  }\x0d\n};\x0d\nfunction getEncodingOps(encoding) {\x0d\n  encoding += '';\x0d\n  switch (encoding.length) {\x0d\n    case 4:\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf8') return encodingOps.utf8;\x0d\n      if (encoding === 'ucs2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 5:\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'utf-8') return encodingOps.utf8;\x0d\n      if (encoding === 'ascii') return encodingOps.ascii;\x0d\n      if (encoding === 'ucs-2') return encodingOps.ucs2;\x0d\n      break;\x0d\n    case 7:\x0d\n      if (encoding === 'utf16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 8:\x0d\n      if (encoding === 'utf-16le' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'utf-16le')\x0d\n        return encodingOps.utf16le;\x0d\n      break;\x0d\n    case 6:\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      encoding = StringPrototypeToLowerCase(encoding);\x0d\n      if (encoding === 'latin1' || encoding === 'binary')\x0d\n        return encodingOps.latin1;\x0d\n      if (encoding === 'base64') return encodingOps.base64;\x0d\n      break;\x0d\n    case 3:\x0d\n      if (encoding === 'hex' || StringPrototypeToLowerCase(encoding) === 'hex')\x0d\n        return encodingOps.hex;\x0d\n      break;\x0d\n    case 9:\x0d\n      if (encoding === 'base64url' ||\x0d\n          StringPrototypeToLowerCase(encoding) === 'base64url')\x0d\n        return encodingOps.base64url;\x0d\n      break;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction byteLength(string\x2C encoding) {\x0d\n  if (typeof string !== 'string') {\x0d\n    if (isArrayBufferView(string) || isAnyArrayBuffer(string)) {\x0d\n      return string.byteLength;\x0d\n    }\x0d\n\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'string'\x2C ['string'\x2C 'Buffer'\x2C 'ArrayBuffer']\x2C string\x0d\n    );\x0d\n  }\x0d\n\x0d\n  const len = string.length;\x0d\n  const mustMatch = (arguments.length > 2 && arguments[2] === true);\x0d\n  if (!mustMatch && len === 0)\x0d\n    return 0;\x0d\n\x0d\n  if (!encoding)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    return (mustMatch ? -1 : byteLengthUtf8(string));\x0d\n  return ops.byteLength(string);\x0d\n}\x0d\n\x0d\nBuffer.byteLength = byteLength;\x0d\n\x0d\n// For backwards compatibility.\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'parent'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.buffer;\x0d\n  }\x0d\n});\x0d\nObjectDefineProperty(Buffer.prototype\x2C 'offset'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  enumerable: true\x2C\x0d\n  get() {\x0d\n    if (!(this instanceof Buffer))\x0d\n      return undefined;\x0d\n    return this.byteOffset;\x0d\n  }\x0d\n});\x0d\n\x0d\nBuffer.prototype.copy =\x0d\n  function copy(target\x2C targetStart\x2C sourceStart\x2C sourceEnd) {\x0d\n    return _copy(this\x2C target\x2C targetStart\x2C sourceStart\x2C sourceEnd);\x0d\n  };\x0d\n\x0d\n// No need to verify that "buf.length <= MAX_UINT32" since it's a read-only\x0d\n// property of a typed array.\x0d\n// This behaves neither like String nor Uint8Array in that we set start/end\x0d\n// to their upper/lower bounds if the value passed is out of range.\x0d\nBuffer.prototype.toString = function toString(encoding\x2C start\x2C end) {\x0d\n  if (arguments.length === 0) {\x0d\n    return this.utf8Slice(0\x2C this.length);\x0d\n  }\x0d\n\x0d\n  const len = this.length;\x0d\n\x0d\n  if (start <= 0)\x0d\n    start = 0;\x0d\n  else if (start >= len)\x0d\n    return '';\x0d\n  else\x0d\n    start |= 0;\x0d\n\x0d\n  if (end === undefined || end > len)\x0d\n    end = len;\x0d\n  else\x0d\n    end |= 0;\x0d\n\x0d\n  if (end <= start)\x0d\n    return '';\x0d\n\x0d\n  if (encoding === undefined)\x0d\n    return this.utf8Slice(start\x2C end);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n\x0d\n  return ops.slice(this\x2C start\x2C end);\x0d\n};\x0d\n\x0d\nBuffer.prototype.equals = function equals(otherBuffer) {\x0d\n  if (!isUint8Array(otherBuffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'otherBuffer'\x2C ['Buffer'\x2C 'Uint8Array']\x2C otherBuffer);\x0d\n  }\x0d\n\x0d\n  if (this === otherBuffer)\x0d\n    return true;\x0d\n\x0d\n  if (this.byteLength !== otherBuffer.byteLength)\x0d\n    return false;\x0d\n\x0d\n  return this.byteLength === 0 || _compare(this\x2C otherBuffer) === 0;\x0d\n};\x0d\n\x0d\nlet INSPECT_MAX_BYTES = 50;\x0d\n// Override how buffers are presented by util.inspect().\x0d\nBuffer.prototype[customInspectSymbol] = function inspect(recurseTimes\x2C ctx) {\x0d\n  const max = INSPECT_MAX_BYTES;\x0d\n  const actualMax = MathMin(max\x2C this.length);\x0d\n  const remaining = this.length - max;\x0d\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\x0d\n    /(.{2})/g\x2C this.hexSlice(0\x2C actualMax)\x2C '$1 '));\x0d\n  if (remaining > 0)\x0d\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\x0d\n  // Inspect special properties as well\x2C if possible.\x0d\n  if (ctx) {\x0d\n    let extras = false;\x0d\n    const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\x0d\n    const obj = ObjectCreate(null);\x0d\n    ArrayPrototypeForEach(getOwnNonIndexProperties(this\x2C filter)\x2C\x0d\n                          (key) => {\x0d\n                            extras = true;\x0d\n                            obj[key] = this[key];\x0d\n                          });\x0d\n    if (extras) {\x0d\n      if (this.length !== 0)\x0d\n        str += '\x2C ';\x0d\n      // '[Object: null prototype] {'.length === 26\x0d\n      // This is guarded with a test.\x0d\n      str += StringPrototypeSlice(utilInspect(obj\x2C {\x0d\n        ...ctx\x2C\x0d\n        breakLength: Infinity\x2C\x0d\n        compact: true\x0d\n      })\x2C 27\x2C -2);\x0d\n    }\x0d\n  }\x0d\n  return `<${this.constructor.name} ${str}>`;\x0d\n};\x0d\nBuffer.prototype.inspect = Buffer.prototype[customInspectSymbol];\x0d\n\x0d\nBuffer.prototype.compare = function compare(target\x2C\x0d\n                                            targetStart\x2C\x0d\n                                            targetEnd\x2C\x0d\n                                            sourceStart\x2C\x0d\n                                            sourceEnd) {\x0d\n  if (!isUint8Array(target)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('target'\x2C ['Buffer'\x2C 'Uint8Array']\x2C target);\x0d\n  }\x0d\n  if (arguments.length === 1)\x0d\n    return _compare(this\x2C target);\x0d\n\x0d\n  if (targetStart === undefined)\x0d\n    targetStart = 0;\x0d\n  else\x0d\n    validateOffset(targetStart\x2C 'targetStart');\x0d\n\x0d\n  if (targetEnd === undefined)\x0d\n    targetEnd = target.length;\x0d\n  else\x0d\n    validateOffset(targetEnd\x2C 'targetEnd'\x2C 0\x2C target.length);\x0d\n\x0d\n  if (sourceStart === undefined)\x0d\n    sourceStart = 0;\x0d\n  else\x0d\n    validateOffset(sourceStart\x2C 'sourceStart');\x0d\n\x0d\n  if (sourceEnd === undefined)\x0d\n    sourceEnd = this.length;\x0d\n  else\x0d\n    validateOffset(sourceEnd\x2C 'sourceEnd'\x2C 0\x2C this.length);\x0d\n\x0d\n  if (sourceStart >= sourceEnd)\x0d\n    return (targetStart >= targetEnd ? 0 : -1);\x0d\n  if (targetStart >= targetEnd)\x0d\n    return 1;\x0d\n\x0d\n  return compareOffset(this\x2C target\x2C targetStart\x2C sourceStart\x2C targetEnd\x2C\x0d\n                       sourceEnd);\x0d\n};\x0d\n\x0d\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`\x2C\x0d\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\x0d\n//\x0d\n// Arguments:\x0d\n// - buffer - a Buffer to search\x0d\n// - val - a string\x2C Buffer\x2C or number\x0d\n// - byteOffset - an index into `buffer`; will be clamped to an int32\x0d\n// - encoding - an optional encoding\x2C relevant if val is a string\x0d\n// - dir - true for indexOf\x2C false for lastIndexOf\x0d\nfunction bidirectionalIndexOf(buffer\x2C val\x2C byteOffset\x2C encoding\x2C dir) {\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (typeof byteOffset === 'string') {\x0d\n    encoding = byteOffset;\x0d\n    byteOffset = undefined;\x0d\n  } else if (byteOffset > 0x7fffffff) {\x0d\n    byteOffset = 0x7fffffff;\x0d\n  } else if (byteOffset < -0x80000000) {\x0d\n    byteOffset = -0x80000000;\x0d\n  }\x0d\n  // Coerce to Number. Values like null and [] become 0.\x0d\n  byteOffset = +byteOffset;\x0d\n  // If the offset is undefined\x2C "foo"\x2C {}\x2C coerces to NaN\x2C search whole buffer.\x0d\n  if (NumberIsNaN(byteOffset)) {\x0d\n    byteOffset = dir ? 0 : (buffer.length || buffer.byteLength);\x0d\n  }\x0d\n  dir = !!dir;  // Cast to bool.\x0d\n\x0d\n  if (typeof val === 'number')\x0d\n    return indexOfNumber(buffer\x2C val >>> 0\x2C byteOffset\x2C dir);\x0d\n\x0d\n  let ops;\x0d\n  if (encoding === undefined)\x0d\n    ops = encodingOps.utf8;\x0d\n  else\x0d\n    ops = getEncodingOps(encoding);\x0d\n\x0d\n  if (typeof val === 'string') {\x0d\n    if (ops === undefined)\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    return ops.indexOf(buffer\x2C val\x2C byteOffset\x2C dir);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(val)) {\x0d\n    const encodingVal =\x0d\n      (ops === undefined ? encodingsMap.utf8 : ops.encodingVal);\x0d\n    return indexOfBuffer(buffer\x2C val\x2C byteOffset\x2C encodingVal\x2C dir);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'value'\x2C ['number'\x2C 'string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C val\x0d\n  );\x0d\n}\x0d\n\x0d\nBuffer.prototype.indexOf = function indexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C true);\x0d\n};\x0d\n\x0d\nBuffer.prototype.lastIndexOf = function lastIndexOf(val\x2C byteOffset\x2C encoding) {\x0d\n  return bidirectionalIndexOf(this\x2C val\x2C byteOffset\x2C encoding\x2C false);\x0d\n};\x0d\n\x0d\nBuffer.prototype.includes = function includes(val\x2C byteOffset\x2C encoding) {\x0d\n  return this.indexOf(val\x2C byteOffset\x2C encoding) !== -1;\x0d\n};\x0d\n\x0d\n// Usage:\x0d\n//    buffer.fill(number[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(buffer[\x2C offset[\x2C end]])\x0d\n//    buffer.fill(string[\x2C offset[\x2C end]][\x2C encoding])\x0d\nBuffer.prototype.fill = function fill(value\x2C offset\x2C end\x2C encoding) {\x0d\n  return _fill(this\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n};\x0d\n\x0d\nfunction _fill(buf\x2C value\x2C offset\x2C end\x2C encoding) {\x0d\n  if (typeof value === 'string') {\x0d\n    if (offset === undefined || typeof offset === 'string') {\x0d\n      encoding = offset;\x0d\n      offset = 0;\x0d\n      end = buf.length;\x0d\n    } else if (typeof end === 'string') {\x0d\n      encoding = end;\x0d\n      end = buf.length;\x0d\n    }\x0d\n\x0d\n    const normalizedEncoding = normalizeEncoding(encoding);\x0d\n    if (normalizedEncoding === undefined) {\x0d\n      validateString(encoding\x2C 'encoding');\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    }\x0d\n\x0d\n    if (value.length === 0) {\x0d\n      // If value === '' default to zero.\x0d\n      value = 0;\x0d\n    } else if (value.length === 1) {\x0d\n      // Fast path: If `value` fits into a single byte\x2C use that numeric value.\x0d\n      if (normalizedEncoding === 'utf8') {\x0d\n        const code = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n        if (code < 128) {\x0d\n          value = code;\x0d\n        }\x0d\n      } else if (normalizedEncoding === 'latin1') {\x0d\n        value = StringPrototypeCharCodeAt(value\x2C 0);\x0d\n      }\x0d\n    }\x0d\n  } else {\x0d\n    encoding = undefined;\x0d\n  }\x0d\n\x0d\n  if (offset === undefined) {\x0d\n    offset = 0;\x0d\n    end = buf.length;\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset');\x0d\n    // Invalid ranges are not set to a default\x2C so can range check early.\x0d\n    if (end === undefined) {\x0d\n      end = buf.length;\x0d\n    } else {\x0d\n      validateOffset(end\x2C 'end'\x2C 0\x2C buf.length);\x0d\n    }\x0d\n    if (offset >= end)\x0d\n      return buf;\x0d\n  }\x0d\n\x0d\n\x0d\n  if (typeof value === 'number') {\x0d\n    // OOB check\x0d\n    const byteLen = TypedArrayPrototypeGetByteLength(buf);\x0d\n    const fillLength = end - offset;\x0d\n    if (offset > end || fillLength + offset > byteLen)\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n\x0d\n    TypedArrayPrototypeFill(buf\x2C value\x2C offset\x2C end);\x0d\n  } else {\x0d\n    const res = bindingFill(buf\x2C value\x2C offset\x2C end\x2C encoding);\x0d\n    if (res < 0) {\x0d\n      if (res === -1)\x0d\n        throw new ERR_INVALID_ARG_VALUE('value'\x2C value);\x0d\n      throw new ERR_BUFFER_OUT_OF_BOUNDS();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return buf;\x0d\n}\x0d\n\x0d\nBuffer.prototype.write = function write(string\x2C offset\x2C length\x2C encoding) {\x0d\n  // Buffer#write(string);\x0d\n  if (offset === undefined) {\x0d\n    return this.utf8Write(string\x2C 0\x2C this.length);\x0d\n  }\x0d\n  // Buffer#write(string\x2C encoding)\x0d\n  if (length === undefined && typeof offset === 'string') {\x0d\n    encoding = offset;\x0d\n    length = this.length;\x0d\n    offset = 0;\x0d\n\x0d\n  // Buffer#write(string\x2C offset[\x2C length][\x2C encoding])\x0d\n  } else {\x0d\n    validateOffset(offset\x2C 'offset'\x2C 0\x2C this.length);\x0d\n\x0d\n    const remaining = this.length - offset;\x0d\n\x0d\n    if (length === undefined) {\x0d\n      length = remaining;\x0d\n    } else if (typeof length === 'string') {\x0d\n      encoding = length;\x0d\n      length = remaining;\x0d\n    } else {\x0d\n      validateOffset(length\x2C 'length'\x2C 0\x2C this.length);\x0d\n      if (length > remaining)\x0d\n        length = remaining;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (!encoding)\x0d\n    return this.utf8Write(string\x2C offset\x2C length);\x0d\n\x0d\n  const ops = getEncodingOps(encoding);\x0d\n  if (ops === undefined)\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n  return ops.write(this\x2C string\x2C offset\x2C length);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toJSON = function toJSON() {\x0d\n  if (this.length > 0) {\x0d\n    const data = new Array(this.length);\x0d\n    for (let i = 0; i < this.length; ++i)\x0d\n      data[i] = this[i];\x0d\n    return { type: 'Buffer'\x2C data };\x0d\n  }\x0d\n  return { type: 'Buffer'\x2C data: [] };\x0d\n};\x0d\n\x0d\nfunction adjustOffset(offset\x2C length) {\x0d\n  // Use Math.trunc() to convert offset to an integer value that can be larger\x0d\n  // than an Int32. Hence\x2C don't use offset | 0 or similar techniques.\x0d\n  offset = MathTrunc(offset);\x0d\n  if (offset === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n  if (offset < 0) {\x0d\n    offset += length;\x0d\n    return offset > 0 ? offset : 0;\x0d\n  }\x0d\n  if (offset < length) {\x0d\n    return offset;\x0d\n  }\x0d\n  return NumberIsNaN(offset) ? 0 : length;\x0d\n}\x0d\n\x0d\nBuffer.prototype.subarray = function subarray(start\x2C end) {\x0d\n  const srcLength = this.length;\x0d\n  start = adjustOffset(start\x2C srcLength);\x0d\n  end = end !== undefined ? adjustOffset(end\x2C srcLength) : srcLength;\x0d\n  const newLength = end > start ? end - start : 0;\x0d\n  return new FastBuffer(this.buffer\x2C this.byteOffset + start\x2C newLength);\x0d\n};\x0d\n\x0d\nBuffer.prototype.slice = function slice(start\x2C end) {\x0d\n  return this.subarray(start\x2C end);\x0d\n};\x0d\n\x0d\nfunction swap(b\x2C n\x2C m) {\x0d\n  const i = b[n];\x0d\n  b[n] = b[m];\x0d\n  b[m] = i;\x0d\n}\x0d\n\x0d\nBuffer.prototype.swap16 = function swap16() {\x0d\n  // For Buffer.length < 128\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 2 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('16-bits');\x0d\n  if (len < 128) {\x0d\n    for (let i = 0; i < len; i += 2)\x0d\n      swap(this\x2C i\x2C i + 1);\x0d\n    return this;\x0d\n  }\x0d\n  return _swap16(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap32 = function swap32() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 4 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('32-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 4) {\x0d\n      swap(this\x2C i\x2C i + 3);\x0d\n      swap(this\x2C i + 1\x2C i + 2);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap32(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.swap64 = function swap64() {\x0d\n  // For Buffer.length < 192\x2C it's generally faster to\x0d\n  // do the swap in javascript. For larger buffers\x2C\x0d\n  // dropping down to the native code is faster.\x0d\n  const len = this.length;\x0d\n  if (len % 8 !== 0)\x0d\n    throw new ERR_INVALID_BUFFER_SIZE('64-bits');\x0d\n  if (len < 192) {\x0d\n    for (let i = 0; i < len; i += 8) {\x0d\n      swap(this\x2C i\x2C i + 7);\x0d\n      swap(this\x2C i + 1\x2C i + 6);\x0d\n      swap(this\x2C i + 2\x2C i + 5);\x0d\n      swap(this\x2C i + 3\x2C i + 4);\x0d\n    }\x0d\n    return this;\x0d\n  }\x0d\n  return _swap64(this);\x0d\n};\x0d\n\x0d\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\x0d\n\x0d\nlet transcode;\x0d\nif (internalBinding('config').hasIntl) {\x0d\n  const {\x0d\n    icuErrName\x2C\x0d\n    transcode: _transcode\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  // Transcodes the Buffer from one encoding to another\x2C returning a new\x0d\n  // Buffer instance.\x0d\n  transcode = function transcode(source\x2C fromEncoding\x2C toEncoding) {\x0d\n    if (!isUint8Array(source)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('source'\x2C\x0d\n                                     ['Buffer'\x2C 'Uint8Array']\x2C source);\x0d\n    }\x0d\n    if (source.length === 0) return Buffer.alloc(0);\x0d\n\x0d\n    fromEncoding = normalizeEncoding(fromEncoding) || fromEncoding;\x0d\n    toEncoding = normalizeEncoding(toEncoding) || toEncoding;\x0d\n    const result = _transcode(source\x2C fromEncoding\x2C toEncoding);\x0d\n    if (typeof result !== 'number')\x0d\n      return result;\x0d\n\x0d\n    const code = icuErrName(result);\x0d\n    const err = genericNodeError(\x0d\n      `Unable to transcode Buffer [${code}]`\x2C\x0d\n      { code: code\x2C errno: result }\x0d\n    );\x0d\n    throw err;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction btoa(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n  input = `${input}`;\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    if (input[n].charCodeAt(0) > 0xff)\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n  }\x0d\n  const buf = Buffer.from(input\x2C 'latin1');\x0d\n  return buf.toString('base64');\x0d\n}\x0d\n\x0d\n// Refs: https://infra.spec.whatwg.org/#forgiving-base64-decode\x0d\nconst kForgivingBase64AllowedChars = [\x0d\n  // ASCII whitespace\x0d\n  // Refs: https://infra.spec.whatwg.org/#ascii-whitespace\x0d\n  0x09\x2C 0x0A\x2C 0x0C\x2C 0x0D\x2C 0x20\x2C\x0d\n\x0d\n  // Uppercase letters\x0d\n  ...ArrayFrom({ length: 26 }\x2C (_\x2C i) => StringPrototypeCharCodeAt('A') + i)\x2C\x0d\n\x0d\n  // Lowercase letters\x0d\n  ...ArrayFrom({ length: 26 }\x2C (_\x2C i) => StringPrototypeCharCodeAt('a') + i)\x2C\x0d\n\x0d\n  // Decimal digits\x0d\n  ...ArrayFrom({ length: 10 }\x2C (_\x2C i) => StringPrototypeCharCodeAt('0') + i)\x2C\x0d\n\x0d\n  0x2B\x2C // +\x0d\n  0x2F\x2C // /\x0d\n  0x3D\x2C // =\x0d\n];\x0d\n\x0d\nfunction atob(input) {\x0d\n  // The implementation here has not been performance optimized in any way and\x0d\n  // should not be.\x0d\n  // Refs: https://github.com/nodejs/node/pull/38433#issuecomment-828426932\x0d\n  if (arguments.length === 0) {\x0d\n    throw new ERR_MISSING_ARGS('input');\x0d\n  }\x0d\n\x0d\n  input = `${input}`;\x0d\n  let nonAsciiWhitespaceCharCount = 0;\x0d\n\x0d\n  for (let n = 0; n < input.length; n++) {\x0d\n    const index = ArrayPrototypeIndexOf(\x0d\n      kForgivingBase64AllowedChars\x2C\x0d\n      StringPrototypeCharCodeAt(input\x2C n));\x0d\n\x0d\n    if (index > 4) {\x0d\n      // The first 5 elements of `kForgivingBase64AllowedChars` are\x0d\n      // ASCII whitespace char codes.\x0d\n      nonAsciiWhitespaceCharCount++;\x0d\n    } else if (index === -1) {\x0d\n      throw lazyDOMException('Invalid character'\x2C 'InvalidCharacterError');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // See #3 - https://infra.spec.whatwg.org/#forgiving-base64\x0d\n  if (nonAsciiWhitespaceCharCount % 4 === 1) {\x0d\n    throw lazyDOMException(\x0d\n      'The string to be decoded is not correctly encoded.'\x2C\x0d\n      'InvalidCharacterError');\x0d\n  }\x0d\n\x0d\n  return Buffer.from(input\x2C 'base64').toString('latin1');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Blob\x2C\x0d\n  resolveObjectURL\x2C\x0d\n  Buffer\x2C\x0d\n  SlowBuffer\x2C\x0d\n  transcode\x2C\x0d\n  // Legacy\x0d\n  kMaxLength\x2C\x0d\n  kStringMaxLength\x2C\x0d\n  btoa\x2C\x0d\n  atob\x2C\x0d\n};\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  constants: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  INSPECT_MAX_BYTES: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() { return INSPECT_MAX_BYTES; }\x2C\x0d\n    set(val) { INSPECT_MAX_BYTES = val; }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x64be933496,24,8845,9828,C3O8884C9O8920C12O8927C17O8963C18O8969C28O9025C33O9029C39O9061C51O9068C56O9117C57O9147C63O9164C68O9164C73O9180C78O9220C95O9313C104O9320C109O9360C110O9385C113O9385C118O9409C120O9423C122O9432C123O9440C125O9457C127O9456C134O9519C136O9525C138O9524C145O9543C151O9562C155O9608C158O9615C163O9655C164O9682C182O9688C187O9682,,
code-creation,LazyCompile,10,398179,0x64be936036,110,fromString node:buffer:437:20,0x2392d7da40,~
code-source-info,0x64be936036,24,13032,13481,C0O13060C2O13068C8O13113C14O13120C19O13145C25O13152C30O13166C35O13173C40O13190C41O13196C46O13214C51O13225C56O13264C59O13270C64O13301C66O13331C73O13337C78O13331C79O13389C85O13396C90O13410C95O13417C100O13434C101O13443C104O13450C109O13478,,
code-creation,LazyCompile,10,398329,0x64be9361ee,177,fromStringFast node:buffer:418:24,0x2392d7d9a0,~
code-source-info,0x64be9361ee,24,12469,13009,C0O12507C5O12507C11O12532C14O12554C18O12563C21O12543C26O12576C31O12612C36O12583C41O12625C42O12631C44O12645C49O12656C51O12654C54O12642C59O12674C62O12674C65O12699C72O12714C77O12725C85O12699C91O12768C110O12768C116O12800C118O12811C123O12897C130O12916C135O12927C143O12901C149O12956C156O12970C162O12967C168O12981C171O12981C174O12997C176O13006,,
code-creation,LazyCompile,10,398460,0x64be9363de,36,FastBuffer node:internal/buffer:958:14,0xb0b6e8bb00,~
code-source-info,0x64be9363de,25,27321,27412,C3O27365C7O27399C20O27365C35O27411,,
code-creation,LazyCompile,10,398540,0x64be9364de,23,write node:buffer:598:12,0x2392d7ddb0,~
code-source-info,0x64be9364de,24,17261,17325,C0O17295C17O17295C22O17325,,
code-creation,LazyCompile,10,398640,0x64be9365ce,42,alignPool node:buffer:163:19,0x2392d7d3d8,~
code-source-info,0x64be9365ce,24,4280,4390,C0O4316C4O4331C9O4345C19O4356C25O4369C34O4379C41O4389,,
code-creation,LazyCompile,10,398909,0x64be9369de,302,promisify node:internal/util:327:19,0x2392d46ac8,~
script-source,15,node:internal/util,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectFreeze\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ObjectValues\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectConstruct\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeToUpperCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n    ERR_UNKNOWN_SIGNAL\x0d\n  }\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  overrideStackTrace\x2C\x0d\n} = require('internal/errors');\x0d\nconst { signals } = internalBinding('constants').os;\x0d\nconst {\x0d\n  getHiddenValue\x2C\x0d\n  setHiddenValue\x2C\x0d\n  arrow_message_private_symbol: kArrowMessagePrivateSymbolIndex\x2C\x0d\n  decorated_private_symbol: kDecoratedPrivateSymbolIndex\x2C\x0d\n  sleep: _sleep\x2C\x0d\n  toUSVString: _toUSVString\x2C\x0d\n} = internalBinding('util');\x0d\nconst { isNativeError } = internalBinding('types');\x0d\n\x0d\nconst noCrypto = !process.versions.openssl;\x0d\n\x0d\nconst experimentalWarnings = new SafeSet();\x0d\n\x0d\nconst colorRegExp = /\\u001b\\[\\d\\d?m/g; // eslint-disable-line no-control-regex\x0d\n\x0d\nconst unpairedSurrogateRe =\x0d\n  /(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])/;\x0d\nfunction toUSVString(val) {\x0d\n  const str = `${val}`;\x0d\n  // As of V8 5.5\x2C `str.search()` (and `unpairedSurrogateRe[@@search]()`) are\x0d\n  // slower than `unpairedSurrogateRe.exec()`.\x0d\n  const match = RegExpPrototypeExec(unpairedSurrogateRe\x2C str);\x0d\n  if (!match)\x0d\n    return str;\x0d\n  return _toUSVString(str\x2C match.index);\x0d\n}\x0d\n\x0d\nlet uvBinding;\x0d\n\x0d\nfunction lazyUv() {\x0d\n  uvBinding ??= internalBinding('uv');\x0d\n  return uvBinding;\x0d\n}\x0d\n\x0d\nfunction removeColors(str) {\x0d\n  return StringPrototypeReplace(str\x2C colorRegExp\x2C '');\x0d\n}\x0d\n\x0d\nfunction isError(e) {\x0d\n  // An error could be an instance of Error while not being a native error\x0d\n  // or could be from a different realm and not be instance of Error but still\x0d\n  // be a native error.\x0d\n  return isNativeError(e) || e instanceof Error;\x0d\n}\x0d\n\x0d\n// Keep a list of deprecation codes that have been warned on so we only warn on\x0d\n// each one once.\x0d\nconst codesWarned = new SafeSet();\x0d\n\x0d\nlet validateString;\x0d\n\x0d\n// Mark that a method should not be used.\x0d\n// Returns a modified function which warns once by default.\x0d\n// If --no-deprecation is set\x2C then it is a no-op.\x0d\nfunction deprecate(fn\x2C msg\x2C code) {\x0d\n  if (process.noDeprecation === true) {\x0d\n    return fn;\x0d\n  }\x0d\n\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateString === undefined)\x0d\n    ({ validateString } = require('internal/validators'));\x0d\n\x0d\n  if (code !== undefined)\x0d\n    validateString(code\x2C 'code');\x0d\n\x0d\n  let warned = false;\x0d\n  function deprecated(...args) {\x0d\n    if (!warned) {\x0d\n      warned = true;\x0d\n      if (code !== undefined) {\x0d\n        if (!codesWarned.has(code)) {\x0d\n          process.emitWarning(msg\x2C 'DeprecationWarning'\x2C code\x2C deprecated);\x0d\n          codesWarned.add(code);\x0d\n        }\x0d\n      } else {\x0d\n        process.emitWarning(msg\x2C 'DeprecationWarning'\x2C deprecated);\x0d\n      }\x0d\n    }\x0d\n    if (new.target) {\x0d\n      return ReflectConstruct(fn\x2C args\x2C new.target);\x0d\n    }\x0d\n    return ReflectApply(fn\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\x0d\n  ObjectSetPrototypeOf(deprecated\x2C fn);\x0d\n  if (fn.prototype) {\x0d\n    // Setting this (rather than using Object.setPrototype\x2C as above) ensures\x0d\n    // that calling the unwrapped constructor gives an instanceof the wrapped\x0d\n    // constructor.\x0d\n    deprecated.prototype = fn.prototype;\x0d\n  }\x0d\n\x0d\n  return deprecated;\x0d\n}\x0d\n\x0d\nfunction decorateErrorStack(err) {\x0d\n  if (!(isError(err) && err.stack) ||\x0d\n      getHiddenValue(err\x2C kDecoratedPrivateSymbolIndex) === true)\x0d\n    return;\x0d\n\x0d\n  const arrow = getHiddenValue(err\x2C kArrowMessagePrivateSymbolIndex);\x0d\n\x0d\n  if (arrow) {\x0d\n    err.stack = arrow + err.stack;\x0d\n    setHiddenValue(err\x2C kDecoratedPrivateSymbolIndex\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction assertCrypto() {\x0d\n  if (noCrypto)\x0d\n    throw new ERR_NO_CRYPTO();\x0d\n}\x0d\n\x0d\n// Return undefined if there is no match.\x0d\n// Move the "slow cases" to a separate function to make sure this function gets\x0d\n// inlined properly. That prioritizes the common case.\x0d\nfunction normalizeEncoding(enc) {\x0d\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\x0d\n  return slowCases(enc);\x0d\n}\x0d\n\x0d\nfunction slowCases(enc) {\x0d\n  switch (enc.length) {\x0d\n    case 4:\x0d\n      if (enc === 'UTF8') return 'utf8';\x0d\n      if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf8') return 'utf8';\x0d\n      if (enc === 'ucs2') return 'utf16le';\x0d\n      break;\x0d\n    case 3:\x0d\n      if (enc === 'hex' || enc === 'HEX' ||\x0d\n          `${enc}`.toLowerCase() === 'hex')\x0d\n        return 'hex';\x0d\n      break;\x0d\n    case 5:\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      if (enc === 'UTF-8') return 'utf8';\x0d\n      if (enc === 'ASCII') return 'ascii';\x0d\n      if (enc === 'UCS-2') return 'utf16le';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'utf-8') return 'utf8';\x0d\n      if (enc === 'ascii') return 'ascii';\x0d\n      if (enc === 'ucs-2') return 'utf16le';\x0d\n      break;\x0d\n    case 6:\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      if (enc === 'BASE64') return 'base64';\x0d\n      if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\x0d\n      enc = `${enc}`.toLowerCase();\x0d\n      if (enc === 'base64') return 'base64';\x0d\n      if (enc === 'latin1' || enc === 'binary') return 'latin1';\x0d\n      break;\x0d\n    case 7:\x0d\n      if (enc === 'utf16le' || enc === 'UTF16LE' ||\x0d\n          `${enc}`.toLowerCase() === 'utf16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 8:\x0d\n      if (enc === 'utf-16le' || enc === 'UTF-16LE' ||\x0d\n        `${enc}`.toLowerCase() === 'utf-16le')\x0d\n        return 'utf16le';\x0d\n      break;\x0d\n    case 9:\x0d\n      if (enc === 'base64url' || enc === 'BASE64URL' ||\x0d\n          `${enc}`.toLowerCase() === 'base64url')\x0d\n        return 'base64url';\x0d\n      break;\x0d\n    default:\x0d\n      if (enc === '') return 'utf8';\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitExperimentalWarning(feature) {\x0d\n  if (experimentalWarnings.has(feature)) return;\x0d\n  const msg = `${feature} is an experimental feature. This feature could ` +\x0d\n       'change at any time';\x0d\n  experimentalWarnings.add(feature);\x0d\n  process.emitWarning(msg\x2C 'ExperimentalWarning');\x0d\n}\x0d\n\x0d\nfunction filterDuplicateStrings(items\x2C low) {\x0d\n  const map = new SafeMap();\x0d\n  for (let i = 0; i < items.length; i++) {\x0d\n    const item = items[i];\x0d\n    const key = StringPrototypeToLowerCase(item);\x0d\n    if (low) {\x0d\n      map.set(key\x2C key);\x0d\n    } else {\x0d\n      map.set(key\x2C item);\x0d\n    }\x0d\n  }\x0d\n  return ArrayPrototypeSort(ArrayFrom(map.values()));\x0d\n}\x0d\n\x0d\nfunction cachedResult(fn) {\x0d\n  let result;\x0d\n  return () => {\x0d\n    if (result === undefined)\x0d\n      result = fn();\x0d\n    return ArrayPrototypeSlice(result);\x0d\n  };\x0d\n}\x0d\n\x0d\n// Useful for Wrapping an ES6 Class with a constructor Function that\x0d\n// does not require the new keyword. For instance:\x0d\n//   class A { constructor(x) {this.x = x;}}\x0d\n//   const B = createClassWrapper(A);\x0d\n//   B() instanceof A // true\x0d\n//   B() instanceof B // true\x0d\nfunction createClassWrapper(type) {\x0d\n  function fn(...args) {\x0d\n    return ReflectConstruct(type\x2C args\x2C new.target || type);\x0d\n  }\x0d\n  // Mask the wrapper function name and length values\x0d\n  ObjectDefineProperties(fn\x2C {\x0d\n    name: { __proto__: null\x2C value: type.name }\x2C\x0d\n    length: { __proto__: null\x2C value: type.length }\x2C\x0d\n  });\x0d\n  ObjectSetPrototypeOf(fn\x2C type);\x0d\n  fn.prototype = type.prototype;\x0d\n  return fn;\x0d\n}\x0d\n\x0d\nlet signalsToNamesMapping;\x0d\nfunction getSignalsToNamesMapping() {\x0d\n  if (signalsToNamesMapping !== undefined)\x0d\n    return signalsToNamesMapping;\x0d\n\x0d\n  signalsToNamesMapping = ObjectCreate(null);\x0d\n  for (const key in signals) {\x0d\n    signalsToNamesMapping[signals[key]] = key;\x0d\n  }\x0d\n\x0d\n  return signalsToNamesMapping;\x0d\n}\x0d\n\x0d\nfunction convertToValidSignal(signal) {\x0d\n  if (typeof signal === 'number' && getSignalsToNamesMapping()[signal])\x0d\n    return signal;\x0d\n\x0d\n  if (typeof signal === 'string') {\x0d\n    const signalName = signals[StringPrototypeToUpperCase(signal)];\x0d\n    if (signalName) return signalName;\x0d\n  }\x0d\n\x0d\n  throw new ERR_UNKNOWN_SIGNAL(signal);\x0d\n}\x0d\n\x0d\nfunction getConstructorOf(obj) {\x0d\n  while (obj) {\x0d\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj\x2C 'constructor');\x0d\n    if (descriptor !== undefined &&\x0d\n        typeof descriptor.value === 'function' &&\x0d\n        descriptor.value.name !== '') {\x0d\n      return descriptor.value;\x0d\n    }\x0d\n\x0d\n    obj = ObjectGetPrototypeOf(obj);\x0d\n  }\x0d\n\x0d\n  return null;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorName(err) {\x0d\n  const entry = uvErrmapGet(err);\x0d\n  return entry ? entry[0] : `Unknown system error ${err}`;\x0d\n}\x0d\n\x0d\nfunction getSystemErrorMap() {\x0d\n  return lazyUv().getErrorMap();\x0d\n}\x0d\n\x0d\nconst kCustomPromisifiedSymbol = SymbolFor('nodejs.util.promisify.custom');\x0d\nconst kCustomPromisifyArgsSymbol = Symbol('customPromisifyArgs');\x0d\n\x0d\nlet validateFunction;\x0d\n\x0d\nfunction promisify(original) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateFunction === undefined)\x0d\n    ({ validateFunction } = require('internal/validators'));\x0d\n\x0d\n  validateFunction(original\x2C 'original');\x0d\n\x0d\n  if (original[kCustomPromisifiedSymbol]) {\x0d\n    const fn = original[kCustomPromisifiedSymbol];\x0d\n\x0d\n    validateFunction(fn\x2C 'util.promisify.custom');\x0d\n\x0d\n    return ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n    });\x0d\n  }\x0d\n\x0d\n  // Names to create an object from in case the callback receives multiple\x0d\n  // arguments\x2C e.g. ['bytesRead'\x2C 'buffer'] for fs.read.\x0d\n  const argumentNames = original[kCustomPromisifyArgsSymbol];\x0d\n\x0d\n  function fn(...args) {\x0d\n    return new Promise((resolve\x2C reject) => {\x0d\n      ArrayPrototypePush(args\x2C (err\x2C ...values) => {\x0d\n        if (err) {\x0d\n          return reject(err);\x0d\n        }\x0d\n        if (argumentNames !== undefined && values.length > 1) {\x0d\n          const obj = {};\x0d\n          for (let i = 0; i < argumentNames.length; i++)\x0d\n            obj[argumentNames[i]] = values[i];\x0d\n          resolve(obj);\x0d\n        } else {\x0d\n          resolve(values[0]);\x0d\n        }\x0d\n      });\x0d\n      ReflectApply(original\x2C this\x2C args);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  ObjectSetPrototypeOf(fn\x2C ObjectGetPrototypeOf(original));\x0d\n\x0d\n  ObjectDefineProperty(fn\x2C kCustomPromisifiedSymbol\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: fn\x2C enumerable: false\x2C writable: false\x2C configurable: true\x0d\n  });\x0d\n\x0d\n  const descriptors = ObjectGetOwnPropertyDescriptors(original);\x0d\n  const propertiesValues = ObjectValues(descriptors);\x0d\n  for (let i = 0; i < propertiesValues.length; i++) {\x0d\n    // We want to use null-prototype objects to not rely on globally mutable\x0d\n    // %Object.prototype%.\x0d\n    ObjectSetPrototypeOf(propertiesValues[i]\x2C null);\x0d\n  }\x0d\n  return ObjectDefineProperties(fn\x2C descriptors);\x0d\n}\x0d\n\x0d\npromisify.custom = kCustomPromisifiedSymbol;\x0d\n\x0d\n// The built-in Array#join is slower in v8 6.0\x0d\nfunction join(output\x2C separator) {\x0d\n  let str = '';\x0d\n  if (output.length !== 0) {\x0d\n    const lastIndex = output.length - 1;\x0d\n    for (let i = 0; i < lastIndex; i++) {\x0d\n      // It is faster not to use a template string here\x0d\n      str += output[i];\x0d\n      str += separator;\x0d\n    }\x0d\n    str += output[lastIndex];\x0d\n  }\x0d\n  return str;\x0d\n}\x0d\n\x0d\n// As of V8 6.6\x2C depending on the size of the array\x2C this is anywhere\x0d\n// between 1.5-10x faster than the two-arg version of Array#splice()\x0d\nfunction spliceOne(list\x2C index) {\x0d\n  for (; index + 1 < list.length; index++)\x0d\n    list[index] = list[index + 1];\x0d\n  list.pop();\x0d\n}\x0d\n\x0d\nconst kNodeModulesRE = /^(.*)[\\\\/]node_modules[\\\\/]/;\x0d\n\x0d\nlet getStructuredStack;\x0d\n\x0d\nfunction isInsideNodeModules() {\x0d\n  if (getStructuredStack === undefined) {\x0d\n    // Lazy-load to avoid a circular dependency.\x0d\n    const { runInNewContext } = require('vm');\x0d\n    // Use `runInNewContext()` to get something tamper-proof and\x0d\n    // side-effect-free. Since this is currently only used for a deprecated API\x2C\x0d\n    // the perf implications should be okay.\x0d\n    getStructuredStack = runInNewContext(`(function() {\x0d\n      try { Error.stackTraceLimit = Infinity; } catch {}\x0d\n      return function structuredStack() {\x0d\n        const e = new Error();\x0d\n        overrideStackTrace.set(e\x2C (err\x2C trace) => trace);\x0d\n        return e.stack;\x0d\n      };\x0d\n    })()`\x2C { overrideStackTrace }\x2C { filename: 'structured-stack' });\x0d\n  }\x0d\n\x0d\n  const stack = getStructuredStack();\x0d\n\x0d\n  // Iterate over all stack frames and look for the first one not coming\x0d\n  // from inside Node.js itself:\x0d\n  if (ArrayIsArray(stack)) {\x0d\n    for (const frame of stack) {\x0d\n      const filename = frame.getFileName();\x0d\n      // If a filename does not start with / or contain \\\x2C\x0d\n      // it's likely from Node.js core.\x0d\n      if (RegExpPrototypeExec(/^\\/|\\\\/\x2C filename) === null)\x0d\n        continue;\x0d\n      return RegExpPrototypeExec(kNodeModulesRE\x2C filename) !== null;\x0d\n    }\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction once(callback) {\x0d\n  let called = false;\x0d\n  return function(...args) {\x0d\n    if (called) return;\x0d\n    called = true;\x0d\n    ReflectApply(callback\x2C this\x2C args);\x0d\n  };\x0d\n}\x0d\n\x0d\nlet validateUint32;\x0d\n\x0d\nfunction sleep(msec) {\x0d\n  // Lazy-load to avoid a circular dependency.\x0d\n  if (validateUint32 === undefined)\x0d\n    ({ validateUint32 } = require('internal/validators'));\x0d\n\x0d\n  validateUint32(msec\x2C 'msec');\x0d\n  _sleep(msec);\x0d\n}\x0d\n\x0d\nfunction createDeferredPromise() {\x0d\n  let resolve;\x0d\n  let reject;\x0d\n  const promise = new Promise((res\x2C rej) => {\x0d\n    resolve = res;\x0d\n    reject = rej;\x0d\n  });\x0d\n\x0d\n  return { promise\x2C resolve\x2C reject };\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#define-the-operations\x0d\nfunction defineOperation(target\x2C name\x2C method) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    configurable: true\x2C\x0d\n    value: method\x0d\n  });\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#es-interfaces\x0d\nfunction exposeInterface(target\x2C name\x2C interfaceObject) {\x0d\n  ObjectDefineProperty(target\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: true\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: interfaceObject\x0d\n  });\x0d\n}\x0d\n\x0d\nlet DOMException;\x0d\nconst lazyDOMException = hideStackFrames((message\x2C name) => {\x0d\n  if (DOMException === undefined)\x0d\n    DOMException = internalBinding('messaging').DOMException;\x0d\n  return new DOMException(message\x2C name);\x0d\n});\x0d\n\x0d\nfunction structuredClone(value) {\x0d\n  const {\x0d\n    DefaultSerializer\x2C\x0d\n    DefaultDeserializer\x2C\x0d\n  } = require('v8');\x0d\n  const ser = new DefaultSerializer();\x0d\n  ser._getDataCloneError = hideStackFrames((message) =>\x0d\n    lazyDOMException(message\x2C 'DataCloneError'));\x0d\n  ser.writeValue(value);\x0d\n  const serialized = ser.releaseBuffer();\x0d\n\x0d\n  const des = new DefaultDeserializer(serialized);\x0d\n  return des.readValue();\x0d\n}\x0d\n\x0d\nconst kEnumerableProperty = ObjectCreate(null);\x0d\nkEnumerableProperty.enumerable = true;\x0d\nObjectFreeze(kEnumerableProperty);\x0d\n\x0d\nconst kEmptyObject = ObjectFreeze(ObjectCreate(null));\x0d\n\x0d\nfunction filterOwnProperties(source\x2C keys) {\x0d\n  const filtered = ObjectCreate(null);\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    const key = keys[i];\x0d\n    if (ObjectPrototypeHasOwnProperty(source\x2C key)) {\x0d\n      filtered[key] = source[key];\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return filtered;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Mimics `obj[key] = value` but ignoring potential prototype inheritance.\x0d\n * @param {any} obj\x0d\n * @param {string} key\x0d\n * @param {any} value\x0d\n * @returns {any}\x0d\n */\x0d\nfunction setOwnProperty(obj\x2C key\x2C value) {\x0d\n  return ObjectDefineProperty(obj\x2C key\x2C {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    value\x2C\x0d\n    writable: true\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nlet internalGlobal;\x0d\nfunction getInternalGlobal() {\x0d\n  if (internalGlobal == null) {\x0d\n    // Lazy-load to avoid a circular dependency.\x0d\n    const { runInNewContext } = require('vm');\x0d\n    internalGlobal = runInNewContext('this'\x2C undefined\x2C { contextName: 'internal' });\x0d\n  }\x0d\n  return internalGlobal;\x0d\n}\x0d\n\x0d\nfunction SideEffectFreeRegExpPrototypeExec(regex\x2C string) {\x0d\n  const { RegExp: RegExpFromAnotherRealm } = getInternalGlobal();\x0d\n  return FunctionPrototypeCall(RegExpFromAnotherRealm.prototype.exec\x2C regex\x2C string);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  assertCrypto\x2C\x0d\n  cachedResult\x2C\x0d\n  convertToValidSignal\x2C\x0d\n  createClassWrapper\x2C\x0d\n  createDeferredPromise\x2C\x0d\n  decorateErrorStack\x2C\x0d\n  defineOperation\x2C\x0d\n  deprecate\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  exposeInterface\x2C\x0d\n  filterDuplicateStrings\x2C\x0d\n  filterOwnProperties\x2C\x0d\n  getConstructorOf\x2C\x0d\n  getInternalGlobal\x2C\x0d\n  getSystemErrorMap\x2C\x0d\n  getSystemErrorName\x2C\x0d\n  isError\x2C\x0d\n  isInsideNodeModules\x2C\x0d\n  join\x2C\x0d\n  lazyDOMException\x2C\x0d\n  normalizeEncoding\x2C\x0d\n  once\x2C\x0d\n  promisify\x2C\x0d\n  SideEffectFreeRegExpPrototypeExec\x2C\x0d\n  sleep\x2C\x0d\n  spliceOne\x2C\x0d\n  structuredClone\x2C\x0d\n  toUSVString\x2C\x0d\n  removeColors\x2C\x0d\n\x0d\n  // Symbol used to customize promisify conversion\x0d\n  customPromisifyArgs: kCustomPromisifyArgsSymbol\x2C\x0d\n\x0d\n  // Symbol used to provide a custom inspect function for an object as an\x0d\n  // alternative to using 'inspect'\x0d\n  customInspectSymbol: SymbolFor('nodejs.util.inspect.custom')\x2C\x0d\n\x0d\n  // Used by the buffer module to capture an internal reference to the\x0d\n  // default isEncoding implementation\x2C just in case userland overrides it.\x0d\n  kIsEncodingSymbol: Symbol('kIsEncodingSymbol')\x2C\x0d\n  kVmBreakFirstLineSymbol: Symbol('kVmBreakFirstLineSymbol')\x2C\x0d\n\x0d\n  kEmptyObject\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n  setOwnProperty\x2C\x0d\n};\x0d\n
code-source-info,0x64be9369de,15,9273,11170,C0O9273C17O9337C25O9378C33O9402C38O9381C55O9440C68O9440C73O9485C80O9498C82O9497C87O9543C94O9552C96O9551C100O9586C110O9586C115O9640C126O9672C136O9738C143O9647C148O9805C149O9973C156O9982C158O9981C161O9973C163O10558C174O10583C180O10583C185O10558C190O10621C201O10646C211O10708C218O10621C223O10799C233O10799C238O10870C245O10870C250O10913C252O10937C256O10918C261O11063C270O11100C276O11063C281O10946C286O10900C289O11120C296O11127C301O11167,,
code-creation,LazyCompile,10,400575,0x64be938626,112,EventEmitterMixin node:internal/event_target:1062:27,0x32ebb7df410,~
script-source,44,node:internal/event_target,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  Boolean\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ObjectValues\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeFinalizationRegistry\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  SafeWeakRef\x2C\x0d\n  SafeWeakSet\x2C\x0d\n  String\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_EVENT_RECURSION\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\nconst { validateObject\x2C validateString } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  kEmptyObject\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n} = require('internal/util');\x0d\nconst { inspect } = require('util');\x0d\n\x0d\nconst kIsEventTarget = SymbolFor('nodejs.event_target');\x0d\nconst kIsNodeEventTarget = Symbol('kIsNodeEventTarget');\x0d\n\x0d\nconst EventEmitter = require('events');\x0d\nconst {\x0d\n  kMaxEventTargetListeners\x2C\x0d\n  kMaxEventTargetListenersWarned\x2C\x0d\n} = EventEmitter;\x0d\n\x0d\nconst kEvents = Symbol('kEvents');\x0d\nconst kIsBeingDispatched = Symbol('kIsBeingDispatched');\x0d\nconst kStop = Symbol('kStop');\x0d\nconst kTarget = Symbol('kTarget');\x0d\nconst kHandlers = Symbol('khandlers');\x0d\nconst kWeakHandler = Symbol('kWeak');\x0d\n\x0d\nconst kHybridDispatch = SymbolFor('nodejs.internal.kHybridDispatch');\x0d\nconst kCreateEvent = Symbol('kCreateEvent');\x0d\nconst kNewListener = Symbol('kNewListener');\x0d\nconst kRemoveListener = Symbol('kRemoveListener');\x0d\nconst kIsNodeStyleListener = Symbol('kIsNodeStyleListener');\x0d\nconst kTrustEvent = Symbol('kTrustEvent');\x0d\n\x0d\nconst { now } = require('internal/perf/utils');\x0d\n\x0d\n// TODO(joyeecheung): V8 snapshot does not support instance member\x0d\n// initializers for now:\x0d\n// https://bugs.chromium.org/p/v8/issues/detail?id=10704\x0d\nconst kType = Symbol('type');\x0d\nconst kDefaultPrevented = Symbol('defaultPrevented');\x0d\nconst kCancelable = Symbol('cancelable');\x0d\nconst kTimestamp = Symbol('timestamp');\x0d\nconst kBubbles = Symbol('bubbles');\x0d\nconst kComposed = Symbol('composed');\x0d\nconst kPropagationStopped = Symbol('propagationStopped');\x0d\nconst kDetail = Symbol('detail');\x0d\n\x0d\nconst isTrustedSet = new SafeWeakSet();\x0d\nconst isTrusted = ObjectGetOwnPropertyDescriptor({\x0d\n  get isTrusted() {\x0d\n    return isTrustedSet.has(this);\x0d\n  }\x0d\n}\x2C 'isTrusted').get;\x0d\n\x0d\nfunction isEvent(value) {\x0d\n  return typeof value?.[kType] === 'string';\x0d\n}\x0d\n\x0d\nclass Event {\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {{\x0d\n   *   bubbles?: boolean\x2C\x0d\n   *   cancelable?: boolean\x2C\x0d\n   *   composed?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  constructor(type\x2C options = kEmptyObject) {\x0d\n    if (arguments.length === 0)\x0d\n      throw new ERR_MISSING_ARGS('type');\x0d\n    validateObject(options\x2C 'options');\x0d\n    const { bubbles\x2C cancelable\x2C composed } = options;\x0d\n    this[kCancelable] = !!cancelable;\x0d\n    this[kBubbles] = !!bubbles;\x0d\n    this[kComposed] = !!composed;\x0d\n\x0d\n    this[kType] = `${type}`;\x0d\n    this[kDefaultPrevented] = false;\x0d\n    this[kTimestamp] = now();\x0d\n    this[kPropagationStopped] = false;\x0d\n    if (options?.[kTrustEvent]) {\x0d\n      isTrustedSet.add(this);\x0d\n    }\x0d\n\x0d\n    // isTrusted is special (LegacyUnforgeable)\x0d\n    ObjectDefineProperty(this\x2C 'isTrusted'\x2C {\x0d\n      __proto__: null\x2C\x0d\n      get: isTrusted\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: false\x0d\n    });\x0d\n    this[kTarget] = null;\x0d\n    this[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({\x0d\n      type: this[kType]\x2C\x0d\n      defaultPrevented: this[kDefaultPrevented]\x2C\x0d\n      cancelable: this[kCancelable]\x2C\x0d\n      timeStamp: this[kTimestamp]\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  stopImmediatePropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kStop] = true;\x0d\n  }\x0d\n\x0d\n  preventDefault() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kDefaultPrevented] = true;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get target() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get currentTarget() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {EventTarget}\x0d\n   */\x0d\n  get srcElement() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTarget];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {string}\x0d\n   */\x0d\n  get type() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kType];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelable() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get defaultPrevented() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kCancelable] && this[kDefaultPrevented];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get timeStamp() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kTimestamp];\x0d\n  }\x0d\n\x0d\n\x0d\n  // The following are non-op and unused properties/methods from Web API Event.\x0d\n  // These are not supported in Node.js and are provided purely for\x0d\n  // API completeness.\x0d\n  /**\x0d\n   * @returns {EventTarget[]}\x0d\n   */\x0d\n  composedPath() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? [this[kTarget]] : [];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get returnValue() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return !this.defaultPrevented;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get bubbles() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kBubbles];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get composed() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kComposed];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {number}\x0d\n   */\x0d\n  get eventPhase() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kIsBeingDispatched] ? Event.AT_TARGET : Event.NONE;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  get cancelBubble() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    return this[kPropagationStopped];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {boolean}\x0d\n   */\x0d\n  set cancelBubble(value) {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    if (value) {\x0d\n      this.stopPropagation();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  stopPropagation() {\x0d\n    if (!isEvent(this))\x0d\n      throw new ERR_INVALID_THIS('Event');\x0d\n    this[kPropagationStopped] = true;\x0d\n  }\x0d\n\x0d\n  static NONE = 0;\x0d\n  static CAPTURING_PHASE = 1;\x0d\n  static AT_TARGET = 2;\x0d\n  static BUBBLING_PHASE = 3;\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  Event.prototype\x2C {\x0d\n    [SymbolToStringTag]: {\x0d\n      __proto__: null\x2C\x0d\n      writable: false\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: 'Event'\x2C\x0d\n    }\x2C\x0d\n    stopImmediatePropagation: kEnumerableProperty\x2C\x0d\n    preventDefault: kEnumerableProperty\x2C\x0d\n    target: kEnumerableProperty\x2C\x0d\n    currentTarget: kEnumerableProperty\x2C\x0d\n    srcElement: kEnumerableProperty\x2C\x0d\n    type: kEnumerableProperty\x2C\x0d\n    cancelable: kEnumerableProperty\x2C\x0d\n    defaultPrevented: kEnumerableProperty\x2C\x0d\n    timeStamp: kEnumerableProperty\x2C\x0d\n    composedPath: kEnumerableProperty\x2C\x0d\n    returnValue: kEnumerableProperty\x2C\x0d\n    bubbles: kEnumerableProperty\x2C\x0d\n    composed: kEnumerableProperty\x2C\x0d\n    eventPhase: kEnumerableProperty\x2C\x0d\n    cancelBubble: kEnumerableProperty\x2C\x0d\n    stopPropagation: kEnumerableProperty\x2C\x0d\n  });\x0d\n\x0d\nfunction isCustomEvent(value) {\x0d\n  return isEvent(value) && (value?.[kDetail] !== undefined);\x0d\n}\x0d\n\x0d\nclass CustomEvent extends Event {\x0d\n  /**\x0d\n   * @constructor\x0d\n   * @param {string} type\x0d\n   * @param {{\x0d\n   *   bubbles?: boolean\x2C\x0d\n   *   cancelable?: boolean\x2C\x0d\n   *   composed?: boolean\x2C\x0d\n   *   detail?: any\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  constructor(type\x2C options = kEmptyObject) {\x0d\n    if (arguments.length === 0)\x0d\n      throw new ERR_MISSING_ARGS('type');\x0d\n    super(type\x2C options);\x0d\n    this[kDetail] = options?.detail ?? null;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @type {any}\x0d\n   */\x0d\n  get detail() {\x0d\n    if (!isCustomEvent(this))\x0d\n      throw new ERR_INVALID_THIS('CustomEvent');\x0d\n    return this[kDetail];\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(CustomEvent.prototype\x2C {\x0d\n  [SymbolToStringTag]: {\x0d\n    __proto__: null\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: 'CustomEvent'\x2C\x0d\n  }\x2C\x0d\n  detail: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\nclass NodeCustomEvent extends Event {\x0d\n  constructor(type\x2C options) {\x0d\n    super(type\x2C options);\x0d\n    if (options?.detail) {\x0d\n      this.detail = options.detail;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Weak listener cleanup\x0d\n// This has to be lazy for snapshots to work\x0d\nlet weakListenersState = null;\x0d\n// The resource needs to retain the callback so that it doesn't\x0d\n// get garbage collected now that it's weak.\x0d\nlet objectToWeakListenerMap = null;\x0d\nfunction weakListeners() {\x0d\n  weakListenersState ??= new SafeFinalizationRegistry(\x0d\n    (listener) => listener.remove()\x0d\n  );\x0d\n  objectToWeakListenerMap ??= new SafeWeakMap();\x0d\n  return { registry: weakListenersState\x2C map: objectToWeakListenerMap };\x0d\n}\x0d\n\x0d\nconst kFlagOnce = 1 << 0;\x0d\nconst kFlagCapture = 1 << 1;\x0d\nconst kFlagPassive = 1 << 2;\x0d\nconst kFlagNodeStyle = 1 << 3;\x0d\nconst kFlagWeak = 1 << 4;\x0d\nconst kFlagRemoved = 1 << 5;\x0d\n\x0d\n// The listeners for an EventTarget are maintained as a linked list.\x0d\n// Unfortunately\x2C the way EventTarget is defined\x2C listeners are accounted\x0d\n// using the tuple [handler\x2Ccapture]\x2C and even if we don't actually make\x0d\n// use of capture or bubbling\x2C in order to be spec compliant we have to\x0d\n// take on the additional complexity of supporting it. Fortunately\x2C using\x0d\n// the linked list makes dispatching faster\x2C even if adding/removing is\x0d\n// slower.\x0d\nclass Listener {\x0d\n  constructor(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n              isNodeStyleListener\x2C weak) {\x0d\n    this.next = undefined;\x0d\n    if (previous !== undefined)\x0d\n      previous.next = this;\x0d\n    this.previous = previous;\x0d\n    this.listener = listener;\x0d\n\x0d\n    let flags = 0b0;\x0d\n    if (once)\x0d\n      flags |= kFlagOnce;\x0d\n    if (capture)\x0d\n      flags |= kFlagCapture;\x0d\n    if (passive)\x0d\n      flags |= kFlagPassive;\x0d\n    if (isNodeStyleListener)\x0d\n      flags |= kFlagNodeStyle;\x0d\n    if (weak)\x0d\n      flags |= kFlagWeak;\x0d\n    this.flags = flags;\x0d\n\x0d\n    this.removed = false;\x0d\n\x0d\n    if (this.weak) {\x0d\n      this.callback = new SafeWeakRef(listener);\x0d\n      weakListeners().registry.register(listener\x2C this\x2C this);\x0d\n      // Make the retainer retain the listener in a WeakMap\x0d\n      weakListeners().map.set(weak\x2C listener);\x0d\n      this.listener = this.callback;\x0d\n    } else if (typeof listener === 'function') {\x0d\n      this.callback = listener;\x0d\n      this.listener = listener;\x0d\n    } else {\x0d\n      this.callback = async (...args) => {\x0d\n        if (listener.handleEvent)\x0d\n          await ReflectApply(listener.handleEvent\x2C listener\x2C args);\x0d\n      };\x0d\n      this.listener = listener;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  get once() {\x0d\n    return Boolean(this.flags & kFlagOnce);\x0d\n  }\x0d\n  get capture() {\x0d\n    return Boolean(this.flags & kFlagCapture);\x0d\n  }\x0d\n  get passive() {\x0d\n    return Boolean(this.flags & kFlagPassive);\x0d\n  }\x0d\n  get isNodeStyleListener() {\x0d\n    return Boolean(this.flags & kFlagNodeStyle);\x0d\n  }\x0d\n  get weak() {\x0d\n    return Boolean(this.flags & kFlagWeak);\x0d\n  }\x0d\n  get removed() {\x0d\n    return Boolean(this.flags & kFlagRemoved);\x0d\n  }\x0d\n  set removed(value) {\x0d\n    if (value)\x0d\n      this.flags |= kFlagRemoved;\x0d\n    else\x0d\n      this.flags &= ~kFlagRemoved;\x0d\n  }\x0d\n\x0d\n  same(listener\x2C capture) {\x0d\n    const myListener = this.weak ? this.listener.deref() : this.listener;\x0d\n    return myListener === listener && this.capture === capture;\x0d\n  }\x0d\n\x0d\n  remove() {\x0d\n    if (this.previous !== undefined)\x0d\n      this.previous.next = this.next;\x0d\n    if (this.next !== undefined)\x0d\n      this.next.previous = this.previous;\x0d\n    this.removed = true;\x0d\n    if (this.weak)\x0d\n      weakListeners().registry.unregister(this);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initEventTarget(self) {\x0d\n  self[kEvents] = new SafeMap();\x0d\n  self[kMaxEventTargetListeners] = EventEmitter.defaultMaxListeners;\x0d\n  self[kMaxEventTargetListenersWarned] = false;\x0d\n}\x0d\n\x0d\nclass EventTarget {\x0d\n  // Used in checking whether an object is an EventTarget. This is a well-known\x0d\n  // symbol as EventTarget may be used cross-realm.\x0d\n  // Ref: https://github.com/nodejs/node/pull/33661\x0d\n  static [kIsEventTarget] = true;\x0d\n\x0d\n  constructor() {\x0d\n    initEventTarget(this);\x0d\n  }\x0d\n\x0d\n  [kNewListener](size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak) {\x0d\n    if (this[kMaxEventTargetListeners] > 0 &&\x0d\n        size > this[kMaxEventTargetListeners] &&\x0d\n        !this[kMaxEventTargetListenersWarned]) {\x0d\n      this[kMaxEventTargetListenersWarned] = true;\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error('Possible EventTarget memory leak detected. ' +\x0d\n                          `${size} ${type} listeners ` +\x0d\n                          `added to ${inspect(this\x2C { depth: -1 })}. Use ` +\x0d\n                          'events.setMaxListeners() to increase limit');\x0d\n      w.name = 'MaxListenersExceededWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      w.count = size;\x0d\n      process.emitWarning(w);\x0d\n    }\x0d\n  }\x0d\n  [kRemoveListener](size\x2C type\x2C listener\x2C capture) {}\x0d\n\x0d\n  /**\x0d\n   * @callback EventTargetCallback\x0d\n   * @param {Event} event\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @typedef {{ handleEvent: EventTargetCallback }} EventListener\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   *   once?: boolean\x2C\x0d\n   *   passive?: boolean\x2C\x0d\n   *   signal?: AbortSignal\x0d\n   * }} [options]\x0d\n   */\x0d\n  addEventListener(type\x2C listener\x2C options = kEmptyObject) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (arguments.length < 2)\x0d\n      throw new ERR_MISSING_ARGS('type'\x2C 'listener');\x0d\n\x0d\n    // We validateOptions before the validateListener check because the spec\x0d\n    // requires us to hit getters.\x0d\n    const {\x0d\n      once\x2C\x0d\n      capture\x2C\x0d\n      passive\x2C\x0d\n      signal\x2C\x0d\n      isNodeStyleListener\x2C\x0d\n      weak\x2C\x0d\n    } = validateEventListenerOptions(options);\x0d\n\x0d\n    if (!validateEventListener(listener)) {\x0d\n      // The DOM silently allows passing undefined as a second argument\x0d\n      // No error code for this since it is a Warning\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      const w = new Error(`addEventListener called with ${listener}` +\x0d\n                          ' which has no effect.');\x0d\n      w.name = 'AddEventListenerArgumentTypeWarning';\x0d\n      w.target = this;\x0d\n      w.type = type;\x0d\n      process.emitWarning(w);\x0d\n      return;\x0d\n    }\x0d\n    type = String(type);\x0d\n\x0d\n    if (signal) {\x0d\n      if (signal.aborted) {\x0d\n        return;\x0d\n      }\x0d\n      // TODO(benjamingr) make this weak somehow? ideally the signal would\x0d\n      // not prevent the event target from GC.\x0d\n      signal.addEventListener('abort'\x2C () => {\x0d\n        this.removeEventListener(type\x2C listener\x2C options);\x0d\n      }\x2C { once: true\x2C [kWeakHandler]: this });\x0d\n    }\x0d\n\x0d\n    let root = this[kEvents].get(type);\x0d\n\x0d\n    if (root === undefined) {\x0d\n      root = { size: 1\x2C next: undefined };\x0d\n      // This is the first handler in our linked list.\x0d\n      new Listener(root\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                   isNodeStyleListener\x2C weak);\x0d\n      this[kNewListener](\x0d\n        root.size\x2C\x0d\n        type\x2C\x0d\n        listener\x2C\x0d\n        once\x2C\x0d\n        capture\x2C\x0d\n        passive\x2C\x0d\n        weak);\x0d\n      this[kEvents].set(type\x2C root);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let previous = root;\x0d\n\x0d\n    // We have to walk the linked list to see if we have a match\x0d\n    while (handler !== undefined && !handler.same(listener\x2C capture)) {\x0d\n      previous = handler;\x0d\n      handler = handler.next;\x0d\n    }\x0d\n\x0d\n    if (handler !== undefined) { // Duplicate! Ignore\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    new Listener(previous\x2C listener\x2C once\x2C capture\x2C passive\x2C\x0d\n                 isNodeStyleListener\x2C weak);\x0d\n    root.size++;\x0d\n    this[kNewListener](root.size\x2C type\x2C listener\x2C once\x2C capture\x2C passive\x2C weak);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   */\x0d\n  removeEventListener(type\x2C listener\x2C options = kEmptyObject) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    if (!validateEventListener(listener))\x0d\n      return;\x0d\n\x0d\n    type = String(type);\x0d\n    const capture = options?.capture === true;\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined)\x0d\n      return;\x0d\n\x0d\n    let handler = root.next;\x0d\n    while (handler !== undefined) {\x0d\n      if (handler.same(listener\x2C capture)) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        if (root.size === 0)\x0d\n          this[kEvents].delete(type);\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n        break;\x0d\n      }\x0d\n      handler = handler.next;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {Event} event\x0d\n   */\x0d\n  dispatchEvent(event) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n\x0d\n    if (!(event instanceof Event))\x0d\n      throw new ERR_INVALID_ARG_TYPE('event'\x2C 'Event'\x2C event);\x0d\n\x0d\n    if (event[kIsBeingDispatched])\x0d\n      throw new ERR_EVENT_RECURSION(event.type);\x0d\n\x0d\n    this[kHybridDispatch](event\x2C event.type\x2C event);\x0d\n\x0d\n    return event.defaultPrevented !== true;\x0d\n  }\x0d\n\x0d\n  [kHybridDispatch](nodeValue\x2C type\x2C event) {\x0d\n    const createEvent = () => {\x0d\n      if (event === undefined) {\x0d\n        event = this[kCreateEvent](nodeValue\x2C type);\x0d\n        event[kTarget] = this;\x0d\n        event[kIsBeingDispatched] = true;\x0d\n      }\x0d\n      return event;\x0d\n    };\x0d\n    if (event !== undefined) {\x0d\n      event[kTarget] = this;\x0d\n      event[kIsBeingDispatched] = true;\x0d\n    }\x0d\n\x0d\n    const root = this[kEvents].get(type);\x0d\n    if (root === undefined || root.next === undefined) {\x0d\n      if (event !== undefined)\x0d\n        event[kIsBeingDispatched] = false;\x0d\n      return true;\x0d\n    }\x0d\n\x0d\n    let handler = root.next;\x0d\n    let next;\x0d\n\x0d\n    while (handler !== undefined &&\x0d\n           (handler.passive || event?.[kStop] !== true)) {\x0d\n      // Cache the next item in case this iteration removes the current one\x0d\n      next = handler.next;\x0d\n\x0d\n      if (handler.removed) {\x0d\n        // Deal with the case an event is removed while event handlers are\x0d\n        // Being processed (removeEventListener called from a listener)\x0d\n        handler = next;\x0d\n        continue;\x0d\n      }\x0d\n      if (handler.once) {\x0d\n        handler.remove();\x0d\n        root.size--;\x0d\n        const { listener\x2C capture } = handler;\x0d\n        this[kRemoveListener](root.size\x2C type\x2C listener\x2C capture);\x0d\n      }\x0d\n\x0d\n      try {\x0d\n        let arg;\x0d\n        if (handler.isNodeStyleListener) {\x0d\n          arg = nodeValue;\x0d\n        } else {\x0d\n          arg = createEvent();\x0d\n        }\x0d\n        const callback = handler.weak ?\x0d\n          handler.callback.deref() : handler.callback;\x0d\n        let result;\x0d\n        if (callback) {\x0d\n          result = FunctionPrototypeCall(callback\x2C this\x2C arg);\x0d\n          if (!handler.isNodeStyleListener) {\x0d\n            arg[kIsBeingDispatched] = false;\x0d\n          }\x0d\n        }\x0d\n        if (result !== undefined && result !== null)\x0d\n          addCatch(result);\x0d\n      } catch (err) {\x0d\n        emitUncaughtException(err);\x0d\n      }\x0d\n\x0d\n      handler = next;\x0d\n    }\x0d\n\x0d\n    if (event !== undefined)\x0d\n      event[kIsBeingDispatched] = false;\x0d\n  }\x0d\n\x0d\n  [kCreateEvent](nodeValue\x2C type) {\x0d\n    return new NodeCustomEvent(type\x2C { detail: nodeValue });\x0d\n  }\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (!isEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('EventTarget');\x0d\n    const name = this.constructor.name;\x0d\n    if (depth < 0)\x0d\n      return name;\x0d\n\x0d\n    const opts = ObjectAssign({}\x2C options\x2C {\x0d\n      depth: NumberIsInteger(options.depth) ? options.depth - 1 : options.depth\x0d\n    });\x0d\n\x0d\n    return `${name} ${inspect({}\x2C opts)}`;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(EventTarget.prototype\x2C {\x0d\n  addEventListener: kEnumerableProperty\x2C\x0d\n  removeEventListener: kEnumerableProperty\x2C\x0d\n  dispatchEvent: kEnumerableProperty\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    __proto__: null\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: 'EventTarget'\x2C\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction initNodeEventTarget(self) {\x0d\n  initEventTarget(self);\x0d\n}\x0d\n\x0d\nclass NodeEventTarget extends EventTarget {\x0d\n  static [kIsNodeEventTarget] = true;\x0d\n  static defaultMaxListeners = 10;\x0d\n\x0d\n  constructor() {\x0d\n    super();\x0d\n    initNodeEventTarget(this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {number} n\x0d\n   */\x0d\n  setMaxListeners(n) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    EventEmitter.setMaxListeners(n\x2C this);\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {number}\x0d\n   */\x0d\n  getMaxListeners() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return this[kMaxEventTargetListeners];\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @returns {string[]}\x0d\n   */\x0d\n  eventNames() {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    return ArrayFrom(this[kEvents].keys());\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} [type]\x0d\n   * @returns {number}\x0d\n   */\x0d\n  listenerCount(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    const root = this[kEvents].get(String(type));\x0d\n    return root !== undefined ? root.size : 0;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  off(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @param {{\x0d\n   *   capture?: boolean\x2C\x0d\n   * }} [options]\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeListener(type\x2C listener\x2C options) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.removeEventListener(type\x2C listener\x2C options);\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  on(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  addListener(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C { [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {any} arg\x0d\n   * @returns {boolean}\x0d\n   */\x0d\n  emit(type\x2C arg) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    validateString(type\x2C 'type');\x0d\n    const hadListeners = this.listenerCount(type) > 0;\x0d\n    this[kHybridDispatch](arg\x2C type);\x0d\n    return hadListeners;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @param {EventTargetCallback|EventListener} listener\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  once(type\x2C listener) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    this.addEventListener(type\x2C listener\x2C\x0d\n                          { once: true\x2C [kIsNodeStyleListener]: true });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} type\x0d\n   * @returns {NodeEventTarget}\x0d\n   */\x0d\n  removeAllListeners(type) {\x0d\n    if (!isNodeEventTarget(this))\x0d\n      throw new ERR_INVALID_THIS('NodeEventTarget');\x0d\n    if (type !== undefined) {\x0d\n      this[kEvents].delete(String(type));\x0d\n    } else {\x0d\n      this[kEvents].clear();\x0d\n    }\x0d\n\x0d\n    return this;\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(NodeEventTarget.prototype\x2C {\x0d\n  setMaxListeners: kEnumerableProperty\x2C\x0d\n  getMaxListeners: kEnumerableProperty\x2C\x0d\n  eventNames: kEnumerableProperty\x2C\x0d\n  listenerCount: kEnumerableProperty\x2C\x0d\n  off: kEnumerableProperty\x2C\x0d\n  removeListener: kEnumerableProperty\x2C\x0d\n  on: kEnumerableProperty\x2C\x0d\n  addListener: kEnumerableProperty\x2C\x0d\n  once: kEnumerableProperty\x2C\x0d\n  emit: kEnumerableProperty\x2C\x0d\n  removeAllListeners: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\n// EventTarget API\x0d\n\x0d\nfunction validateEventListener(listener) {\x0d\n  if (typeof listener === 'function' ||\x0d\n      typeof listener?.handleEvent === 'function') {\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  if (listener == null)\x0d\n    return false;\x0d\n\x0d\n  if (typeof listener === 'object') {\x0d\n    // Require `handleEvent` lazily.\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE('listener'\x2C 'EventListener'\x2C listener);\x0d\n}\x0d\n\x0d\nfunction validateEventListenerOptions(options) {\x0d\n  if (typeof options === 'boolean')\x0d\n    return { capture: options };\x0d\n\x0d\n  if (options === null)\x0d\n    return kEmptyObject;\x0d\n  validateObject(options\x2C 'options'\x2C {\x0d\n    allowArray: true\x2C allowFunction: true\x2C\x0d\n  });\x0d\n  return {\x0d\n    once: Boolean(options.once)\x2C\x0d\n    capture: Boolean(options.capture)\x2C\x0d\n    passive: Boolean(options.passive)\x2C\x0d\n    signal: options.signal\x2C\x0d\n    weak: options[kWeakHandler]\x2C\x0d\n    isNodeStyleListener: Boolean(options[kIsNodeStyleListener])\x0d\n  };\x0d\n}\x0d\n\x0d\n// Test whether the argument is an event object. This is far from a fool-proof\x0d\n// test\x2C for example this input will result in a false positive:\x0d\n// > isEventTarget({ constructor: EventTarget })\x0d\n// It stands in its current implementation as a compromise.\x0d\n// Ref: https://github.com/nodejs/node/pull/33661\x0d\nfunction isEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsEventTarget];\x0d\n}\x0d\n\x0d\nfunction isNodeEventTarget(obj) {\x0d\n  return obj?.constructor?.[kIsNodeEventTarget];\x0d\n}\x0d\n\x0d\nfunction addCatch(promise) {\x0d\n  const then = promise.then;\x0d\n  if (typeof then === 'function') {\x0d\n    FunctionPrototypeCall(then\x2C promise\x2C undefined\x2C function(err) {\x0d\n      // The callback is called with nextTick to avoid a follow-up\x0d\n      // rejection from this promise.\x0d\n      emitUncaughtException(err);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitUncaughtException(err) {\x0d\n  process.nextTick(() => { throw err; });\x0d\n}\x0d\n\x0d\nfunction makeEventHandler(handler) {\x0d\n  // Event handlers are dispatched in the order they were first set\x0d\n  // See https://github.com/nodejs/node/pull/35949#issuecomment-722496598\x0d\n  function eventHandler(...args) {\x0d\n    if (typeof eventHandler.handler !== 'function') {\x0d\n      return;\x0d\n    }\x0d\n    return ReflectApply(eventHandler.handler\x2C this\x2C args);\x0d\n  }\x0d\n  eventHandler.handler = handler;\x0d\n  return eventHandler;\x0d\n}\x0d\n\x0d\nfunction defineEventHandler(emitter\x2C name) {\x0d\n  // 8.1.5.1 Event handlers - basically `on[eventName]` attributes\x0d\n  ObjectDefineProperty(emitter\x2C `on${name}`\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this[kHandlers]?.get(name)?.handler ?? null;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      if (!this[kHandlers]) {\x0d\n        this[kHandlers] = new SafeMap();\x0d\n      }\x0d\n      let wrappedHandler = this[kHandlers]?.get(name);\x0d\n      if (wrappedHandler) {\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size--;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kRemoveListener](size\x2C name\x2C wrappedHandler.handler\x2C false);\x0d\n        }\x0d\n        wrappedHandler.handler = value;\x0d\n        if (typeof wrappedHandler.handler === 'function') {\x0d\n          this[kEvents].get(name).size++;\x0d\n          const size = this[kEvents].get(name).size;\x0d\n          this[kNewListener](size\x2C name\x2C value\x2C false\x2C false\x2C false\x2C false);\x0d\n        }\x0d\n      } else {\x0d\n        wrappedHandler = makeEventHandler(value);\x0d\n        this.addEventListener(name\x2C wrappedHandler);\x0d\n      }\x0d\n      this[kHandlers].set(name\x2C wrappedHandler);\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  });\x0d\n}\x0d\n\x0d\nconst EventEmitterMixin = (Superclass) => {\x0d\n  class MixedEventEmitter extends Superclass {\x0d\n    constructor(...args) {\x0d\n      args = new SafeArrayIterator(args);\x0d\n      super(...args);\x0d\n      FunctionPrototypeCall(EventEmitter\x2C this);\x0d\n    }\x0d\n  }\x0d\n  const protoProps = ObjectGetOwnPropertyDescriptors(EventEmitter.prototype);\x0d\n  delete protoProps.constructor;\x0d\n  const propertiesValues = ObjectValues(protoProps);\x0d\n  for (let i = 0; i < propertiesValues.length; i++) {\x0d\n    // We want to use null-prototype objects to not rely on globally mutable\x0d\n    // %Object.prototype%.\x0d\n    ObjectSetPrototypeOf(propertiesValues[i]\x2C null);\x0d\n  }\x0d\n  ObjectDefineProperties(MixedEventEmitter.prototype\x2C protoProps);\x0d\n  return MixedEventEmitter;\x0d\n};\x0d\n\x0d\nmodule.exports = {\x0d\n  Event\x2C\x0d\n  CustomEvent\x2C\x0d\n  EventEmitterMixin\x2C\x0d\n  EventTarget\x2C\x0d\n  NodeEventTarget\x2C\x0d\n  defineEventHandler\x2C\x0d\n  initEventTarget\x2C\x0d\n  initNodeEventTarget\x2C\x0d\n  kCreateEvent\x2C\x0d\n  kNewListener\x2C\x0d\n  kTrustEvent\x2C\x0d\n  kRemoveListener\x2C\x0d\n  kEvents\x2C\x0d\n  kWeakHandler\x2C\x0d\n  isEventTarget\x2C\x0d\n};\x0d\n
code-source-info,0x64be938626,44,28723,29431,C0O28776C23O28967C30O28999C33O29012C38O28967C43O29027C47O29086C52O29086C57O29128C59O29152C63O29133C68O29278C75O29315C81O29278C86O29161C91O29115C94O29335C99O29376C104O29335C109O29403C111O29428,,
code-creation,Eval,10,403927,0x64be93b386,5, node:internal/modules/esm/translators:1:1,0x64be93af30,~
script-source,128,node:internal/modules/esm/translators,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  Boolean\x2C\x0d\n  JSONParse\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectKeys\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  StringPrototypeReplaceAll\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  SyntaxErrorPrototype\x2C\x0d\n  globalThis: { WebAssembly }\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet _TYPES = null;\x0d\nfunction lazyTypes() {\x0d\n  if (_TYPES !== null) return _TYPES;\x0d\n  return _TYPES = require('internal/util/types');\x0d\n}\x0d\n\x0d\nconst { readFileSync } = require('fs');\x0d\nconst { extname\x2C isAbsolute } = require('path');\x0d\nconst {\x0d\n  hasEsmSyntax\x2C\x0d\n  loadBuiltinModule\x2C\x0d\n  stripBOM\x2C\x0d\n} = require('internal/modules/cjs/helpers');\x0d\nconst {\x0d\n  Module: CJSModule\x2C\x0d\n  cjsParseCache\x0d\n} = require('internal/modules/cjs/loader');\x0d\nconst internalURLModule = require('internal/url');\x0d\nconst createDynamicModule = require(\x0d\n  'internal/modules/esm/create_dynamic_module');\x0d\nconst { fileURLToPath\x2C URL } = require('url');\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst { emitExperimentalWarning } = require('internal/util');\x0d\nconst {\x0d\n  ERR_UNKNOWN_BUILTIN_MODULE\x2C\x0d\n  ERR_INVALID_RETURN_PROPERTY_VALUE\x0d\n} = require('internal/errors').codes;\x0d\nconst { maybeCacheSourceMap } = require('internal/source_map/source_map_cache');\x0d\nconst moduleWrap = internalBinding('module_wrap');\x0d\nconst { ModuleWrap } = moduleWrap;\x0d\nconst asyncESM = require('internal/process/esm_loader');\x0d\nconst { emitWarningSync } = require('internal/process/warning');\x0d\nconst { TextDecoder } = require('internal/encoding');\x0d\n\x0d\nlet cjsParse;\x0d\nasync function initCJSParse() {\x0d\n  if (typeof WebAssembly === 'undefined') {\x0d\n    cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;\x0d\n  } else {\x0d\n    const { parse\x2C init } =\x0d\n        require('internal/deps/cjs-module-lexer/dist/lexer');\x0d\n    try {\x0d\n      await init();\x0d\n      cjsParse = parse;\x0d\n    } catch {\x0d\n      cjsParse = require('internal/deps/cjs-module-lexer/lexer').parse;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nconst translators = new SafeMap();\x0d\nexports.translators = translators;\x0d\nexports.enrichCJSError = enrichCJSError;\x0d\n\x0d\nlet DECODER = null;\x0d\nfunction assertBufferSource(body\x2C allowString\x2C hookName) {\x0d\n  if (allowString && typeof body === 'string') {\x0d\n    return;\x0d\n  }\x0d\n  const { isArrayBufferView\x2C isAnyArrayBuffer } = lazyTypes();\x0d\n  if (isArrayBufferView(body) || isAnyArrayBuffer(body)) {\x0d\n    return;\x0d\n  }\x0d\n  throw new ERR_INVALID_RETURN_PROPERTY_VALUE(\x0d\n    `${allowString ? 'string\x2C ' : ''}array buffer\x2C or typed array`\x2C\x0d\n    hookName\x2C\x0d\n    'source'\x2C\x0d\n    body\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringify(body) {\x0d\n  if (typeof body === 'string') return body;\x0d\n  assertBufferSource(body\x2C false\x2C 'transformSource');\x0d\n  DECODER = DECODER === null ? new TextDecoder() : DECODER;\x0d\n  return DECODER.decode(body);\x0d\n}\x0d\n\x0d\nfunction errPath(url) {\x0d\n  const parsed = new URL(url);\x0d\n  if (parsed.protocol === 'file:') {\x0d\n    return fileURLToPath(parsed);\x0d\n  }\x0d\n  return url;\x0d\n}\x0d\n\x0d\nasync function importModuleDynamically(specifier\x2C { url }\x2C assertions) {\x0d\n  return asyncESM.esmLoader.import(specifier\x2C url\x2C assertions);\x0d\n}\x0d\n\x0d\n// Strategy for loading a standard JavaScript module.\x0d\ntranslators.set('module'\x2C async function moduleStrategy(url\x2C source\x2C isMain) {\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  source = stringify(source);\x0d\n  maybeCacheSourceMap(url\x2C source);\x0d\n  debug(`Translating StandardModule ${url}`);\x0d\n  const module = new ModuleWrap(url\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n  moduleWrap.callbackMap.set(module\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => this.importMetaInitialize(meta\x2C { url })\x2C\x0d\n    importModuleDynamically\x2C\x0d\n  });\x0d\n  return module;\x0d\n});\x0d\n\x0d\n/**\x0d\n * @param {Error | any} err\x0d\n * @param {string} [content] Content of the file\x2C if known.\x0d\n * @param {string} [filename] Useful only if `content` is unknown.\x0d\n */\x0d\nfunction enrichCJSError(err\x2C content\x2C filename) {\x0d\n  if (err != null && ObjectGetPrototypeOf(err) === SyntaxErrorPrototype &&\x0d\n      hasEsmSyntax(content || readFileSync(filename\x2C 'utf-8'))) {\x0d\n    // Emit the warning synchronously because we are in the middle of handling\x0d\n    // a SyntaxError that will throw and likely terminate the process before an\x0d\n    // asynchronous warning would be emitted.\x0d\n    emitWarningSync(\x0d\n      'To load an ES module\x2C set "type": "module" in the package.json or use ' +\x0d\n      'the .mjs extension.'\x0d\n    );\x0d\n  }\x0d\n}\x0d\n\x0d\n// Strategy for loading a node-style CommonJS module\x0d\nconst isWindows = process.platform === 'win32';\x0d\ntranslators.set('commonjs'\x2C async function commonjsStrategy(url\x2C source\x2C\x0d\n                                                            isMain) {\x0d\n  debug(`Translating CJSModule ${url}`);\x0d\n\x0d\n  let filename = internalURLModule.fileURLToPath(new URL(url));\x0d\n  if (isWindows)\x0d\n    filename = StringPrototypeReplaceAll(filename\x2C '/'\x2C '\\\\');\x0d\n\x0d\n  if (!cjsParse) await initCJSParse();\x0d\n  const { module\x2C exportNames } = cjsPreparseModuleExports(filename);\x0d\n  const namesWithDefault = exportNames.has('default') ?\x0d\n    [...exportNames] : ['default'\x2C ...exportNames];\x0d\n\x0d\n  return new ModuleWrap(url\x2C undefined\x2C namesWithDefault\x2C function() {\x0d\n    debug(`Loading CJSModule ${url}`);\x0d\n\x0d\n    let exports;\x0d\n    if (asyncESM.esmLoader.cjsCache.has(module)) {\x0d\n      exports = asyncESM.esmLoader.cjsCache.get(module);\x0d\n      asyncESM.esmLoader.cjsCache.delete(module);\x0d\n    } else {\x0d\n      try {\x0d\n        exports = CJSModule._load(filename\x2C undefined\x2C isMain);\x0d\n      } catch (err) {\x0d\n        enrichCJSError(err\x2C undefined\x2C filename);\x0d\n        throw err;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    for (const exportName of exportNames) {\x0d\n      if (!ObjectPrototypeHasOwnProperty(exports\x2C exportName) ||\x0d\n          exportName === 'default')\x0d\n        continue;\x0d\n      // We might trigger a getter -> dont fail.\x0d\n      let value;\x0d\n      try {\x0d\n        value = exports[exportName];\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n      this.setExport(exportName\x2C value);\x0d\n    }\x0d\n    this.setExport('default'\x2C exports);\x0d\n  });\x0d\n});\x0d\n\x0d\nfunction cjsPreparseModuleExports(filename) {\x0d\n  let module = CJSModule._cache[filename];\x0d\n  if (module) {\x0d\n    const cached = cjsParseCache.get(module);\x0d\n    if (cached)\x0d\n      return { module\x2C exportNames: cached.exportNames };\x0d\n  }\x0d\n  const loaded = Boolean(module);\x0d\n  if (!loaded) {\x0d\n    module = new CJSModule(filename);\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n    CJSModule._cache[filename] = module;\x0d\n  }\x0d\n\x0d\n  let source;\x0d\n  try {\x0d\n    source = readFileSync(filename\x2C 'utf8');\x0d\n  } catch {\x0d\n    // Continue regardless of error.\x0d\n  }\x0d\n\x0d\n  let exports\x2C reexports;\x0d\n  try {\x0d\n    ({ exports\x2C reexports } = cjsParse(source || ''));\x0d\n  } catch {\x0d\n    exports = [];\x0d\n    reexports = [];\x0d\n  }\x0d\n\x0d\n  const exportNames = new SafeSet(new SafeArrayIterator(exports));\x0d\n\x0d\n  // Set first for cycles.\x0d\n  cjsParseCache.set(module\x2C { source\x2C exportNames\x2C loaded });\x0d\n\x0d\n  if (reexports.length) {\x0d\n    module.filename = filename;\x0d\n    module.paths = CJSModule._nodeModulePaths(module.path);\x0d\n  }\x0d\n  ArrayPrototypeForEach(reexports\x2C (reexport) => {\x0d\n    let resolved;\x0d\n    try {\x0d\n      resolved = CJSModule._resolveFilename(reexport\x2C module);\x0d\n    } catch {\x0d\n      return;\x0d\n    }\x0d\n    const ext = extname(resolved);\x0d\n    if ((ext === '.js' || ext === '.cjs' || !CJSModule._extensions[ext]) &&\x0d\n        isAbsolute(resolved)) {\x0d\n      const { exportNames: reexportNames } = cjsPreparseModuleExports(resolved);\x0d\n      for (const name of reexportNames)\x0d\n        exportNames.add(name);\x0d\n    }\x0d\n  });\x0d\n\x0d\n  return { module\x2C exportNames };\x0d\n}\x0d\n\x0d\n// Strategy for loading a node builtin CommonJS module that isn't\x0d\n// through normal resolution\x0d\ntranslators.set('builtin'\x2C async function builtinStrategy(url) {\x0d\n  debug(`Translating BuiltinModule ${url}`);\x0d\n  // Slice 'node:' scheme\x0d\n  const id = StringPrototypeSlice(url\x2C 5);\x0d\n  const module = loadBuiltinModule(id\x2C url);\x0d\n  if (!StringPrototypeStartsWith(url\x2C 'node:') || !module) {\x0d\n    throw new ERR_UNKNOWN_BUILTIN_MODULE(url);\x0d\n  }\x0d\n  debug(`Loading BuiltinModule ${url}`);\x0d\n  return module.getESMFacade();\x0d\n});\x0d\n\x0d\n// Strategy for loading a JSON file\x0d\ntranslators.set('json'\x2C async function jsonStrategy(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing JSON modules');\x0d\n  assertBufferSource(source\x2C true\x2C 'load');\x0d\n  debug(`Loading JSONModule ${url}`);\x0d\n  const pathname = StringPrototypeStartsWith(url\x2C 'file:') ?\x0d\n    fileURLToPath(url) : null;\x0d\n  let modulePath;\x0d\n  let module;\x0d\n  if (pathname) {\x0d\n    modulePath = isWindows ?\x0d\n      StringPrototypeReplaceAll(pathname\x2C '/'\x2C '\\\\') : pathname;\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  source = stringify(source);\x0d\n  if (pathname) {\x0d\n    // A require call could have been called on the same file during loading and\x0d\n    // that resolves synchronously. To make sure we always return the identical\x0d\n    // export\x2C we have to check again if the module already exists or not.\x0d\n    module = CJSModule._cache[modulePath];\x0d\n    if (module && module.loaded) {\x0d\n      const exports = module.exports;\x0d\n      return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n        this.setExport('default'\x2C exports);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n  try {\x0d\n    const exports = JSONParse(stripBOM(source));\x0d\n    module = {\x0d\n      exports\x2C\x0d\n      loaded: true\x0d\n    };\x0d\n  } catch (err) {\x0d\n    // TODO (BridgeAR): We could add a NodeCore error that wraps the JSON\x0d\n    // parse error instead of just manipulating the original error message.\x0d\n    // That would allow to add further properties and maybe additional\x0d\n    // debugging information.\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n  if (pathname) {\x0d\n    CJSModule._cache[modulePath] = module;\x0d\n  }\x0d\n  return new ModuleWrap(url\x2C undefined\x2C ['default']\x2C function() {\x0d\n    debug(`Parsing JSONModule ${url}`);\x0d\n    this.setExport('default'\x2C module.exports);\x0d\n  });\x0d\n});\x0d\n\x0d\n// Strategy for loading a wasm module\x0d\ntranslators.set('wasm'\x2C async function(url\x2C source) {\x0d\n  emitExperimentalWarning('Importing WebAssembly modules');\x0d\n\x0d\n  assertBufferSource(source\x2C false\x2C 'load');\x0d\n\x0d\n  debug(`Translating WASMModule ${url}`);\x0d\n\x0d\n  let compiled;\x0d\n  try {\x0d\n    compiled = await WebAssembly.compile(source);\x0d\n  } catch (err) {\x0d\n    err.message = errPath(url) + ': ' + err.message;\x0d\n    throw err;\x0d\n  }\x0d\n\x0d\n  const imports =\x0d\n      ArrayPrototypeMap(WebAssembly.Module.imports(compiled)\x2C\x0d\n                        ({ module }) => module);\x0d\n  const exports =\x0d\n    ArrayPrototypeMap(WebAssembly.Module.exports(compiled)\x2C\x0d\n                      ({ name }) => name);\x0d\n\x0d\n  return createDynamicModule(imports\x2C exports\x2C url\x2C (reflect) => {\x0d\n    const { exports } = new WebAssembly.Instance(compiled\x2C reflect.imports);\x0d\n    for (const expt of ObjectKeys(exports))\x0d\n      reflect.exports[expt].set(exports[expt]);\x0d\n  }).module;\x0d\n});\x0d\n
code-source-info,0x64be93b386,128,0,11080,C0O0C4O11080,,
code-creation,Function,10,405012,0x64be93bb1e,706, node:internal/modules/esm/translators:1:1,0x64be93b300,~
code-source-info,0x64be93bb1e
code-creation,Eval,10,405490,0x64be93d00e,5, node:internal/modules/esm/create_dynamic_module:1:1,0x64be93ce38,~
script-source,129,node:internal/modules/esm/create_dynamic_module,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectCreate\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('esm'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\n\x0d\nfunction createImport(impt\x2C index) {\x0d\n  const imptPath = JSONStringify(impt);\x0d\n  return `import * as $import_${index} from ${imptPath};\x0d\nimport.meta.imports[${imptPath}] = $import_${index};`;\x0d\n}\x0d\n\x0d\nfunction createExport(expt) {\x0d\n  const name = `${expt}`;\x0d\n  return `let $${name};\x0d\nexport { $${name} as ${name} };\x0d\nimport.meta.exports.${name} = {\x0d\n  get: () => $${name}\x2C\x0d\n  set: (v) => $${name} = v\x2C\x0d\n};`;\x0d\n}\x0d\n\x0d\nconst createDynamicModule = (imports\x2C exports\x2C url = ''\x2C evaluate) => {\x0d\n  debug('creating ESM facade for %s with exports: %j'\x2C url\x2C exports);\x0d\n  const source = `\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(imports\x2C createImport)\x2C '\\n')}\x0d\n${ArrayPrototypeJoin(ArrayPrototypeMap(exports\x2C createExport)\x2C '\\n')}\x0d\nimport.meta.done();\x0d\n`;\x0d\n  const { ModuleWrap\x2C callbackMap } = internalBinding('module_wrap');\x0d\n  const m = new ModuleWrap(`${url}`\x2C undefined\x2C source\x2C 0\x2C 0);\x0d\n\x0d\n  const readyfns = new SafeSet();\x0d\n  const reflect = {\x0d\n    exports: ObjectCreate(null)\x2C\x0d\n    onReady: (cb) => { readyfns.add(cb); }\x2C\x0d\n  };\x0d\n\x0d\n  if (imports.length)\x0d\n    reflect.imports = ObjectCreate(null);\x0d\n\x0d\n  callbackMap.set(m\x2C {\x0d\n    initializeImportMeta: (meta\x2C wrap) => {\x0d\n      meta.exports = reflect.exports;\x0d\n      if (reflect.imports)\x0d\n        meta.imports = reflect.imports;\x0d\n      meta.done = () => {\x0d\n        evaluate(reflect);\x0d\n        reflect.onReady = (cb) => cb(reflect);\x0d\n        for (const fn of readyfns) {\x0d\n          readyfns.delete(fn);\x0d\n          fn(reflect);\x0d\n        }\x0d\n      };\x0d\n    }\x2C\x0d\n  });\x0d\n\x0d\n  return {\x0d\n    module: m\x2C\x0d\n    reflect\x2C\x0d\n  };\x0d\n};\x0d\n\x0d\nmodule.exports = createDynamicModule;\x0d\n
code-source-info,0x64be93d00e,129,0,1828,C0O0C4O1828,,
code-creation,Function,10,405688,0x64be93d236,111, node:internal/modules/esm/create_dynamic_module:1:1,0x64be93cf88,~
code-source-info,0x64be93d236,129,0,1828,C0O0C39O28C45O51C51O73C57O91C63O108C69O150C72O150C77O183C90O184C96O150C98O672C103O1789C105O1804C110O1827,,
new,MemoryChunk,0x2ade89c0000,262144
code-creation,Eval,10,406939,0x64be93e12e,5, node:internal/vm/module:1:1,0x64be93dbd8,~
script-source,130,node:internal/vm/module,'use strict';\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeSome\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafePromiseAll\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  TypeError\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { isContext } = internalBinding('contextify');\x0d\nconst {\x0d\n  isModuleNamespaceObject\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  emitExperimentalWarning\x2C\x0d\n  getConstructorOf\x2C\x0d\n  kEmptyObject\x2C\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_ARG_VALUE\x2C\x0d\n  ERR_VM_MODULE_ALREADY_LINKED\x2C\x0d\n  ERR_VM_MODULE_DIFFERENT_CONTEXT\x2C\x0d\n  ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA\x2C\x0d\n  ERR_VM_MODULE_LINK_FAILURE\x2C\x0d\n  ERR_VM_MODULE_NOT_MODULE\x2C\x0d\n  ERR_VM_MODULE_STATUS\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst binding = internalBinding('module_wrap');\x0d\nconst {\x0d\n  ModuleWrap\x2C\x0d\n  kUninstantiated\x2C\x0d\n  kInstantiating\x2C\x0d\n  kInstantiated\x2C\x0d\n  kEvaluating\x2C\x0d\n  kEvaluated\x2C\x0d\n  kErrored\x2C\x0d\n} = binding;\x0d\n\x0d\nconst STATUS_MAP = {\x0d\n  [kUninstantiated]: 'unlinked'\x2C\x0d\n  [kInstantiating]: 'linking'\x2C\x0d\n  [kInstantiated]: 'linked'\x2C\x0d\n  [kEvaluating]: 'evaluating'\x2C\x0d\n  [kEvaluated]: 'evaluated'\x2C\x0d\n  [kErrored]: 'errored'\x2C\x0d\n};\x0d\n\x0d\nlet globalModuleId = 0;\x0d\nconst defaultModuleName = 'vm:module';\x0d\nconst wrapToModuleMap = new SafeWeakMap();\x0d\n\x0d\nconst kWrap = Symbol('kWrap');\x0d\nconst kContext = Symbol('kContext');\x0d\nconst kPerContextModuleId = Symbol('kPerContextModuleId');\x0d\nconst kLink = Symbol('kLink');\x0d\n\x0d\nclass Module {\x0d\n  constructor(options) {\x0d\n    emitExperimentalWarning('VM Modules');\x0d\n\x0d\n    if (new.target === Module) {\x0d\n      // eslint-disable-next-line no-restricted-syntax\x0d\n      throw new TypeError('Module is not a constructor');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      context\x2C\x0d\n      sourceText\x2C\x0d\n      syntheticExportNames\x2C\x0d\n      syntheticEvaluationSteps\x2C\x0d\n    } = options;\x0d\n\x0d\n    if (context !== undefined) {\x0d\n      validateObject(context\x2C 'context');\x0d\n      if (!isContext(context)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('options.context'\x2C 'vm.Context'\x2C\x0d\n                                       context);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    let { identifier } = options;\x0d\n    if (identifier !== undefined) {\x0d\n      validateString(identifier\x2C 'options.identifier');\x0d\n    } else if (context === undefined) {\x0d\n      identifier = `${defaultModuleName}(${globalModuleId++})`;\x0d\n    } else if (context[kPerContextModuleId] !== undefined) {\x0d\n      const curId = context[kPerContextModuleId];\x0d\n      identifier = `${defaultModuleName}(${curId})`;\x0d\n      context[kPerContextModuleId] += 1;\x0d\n    } else {\x0d\n      identifier = `${defaultModuleName}(0)`;\x0d\n      ObjectDefineProperty(context\x2C kPerContextModuleId\x2C {\x0d\n        __proto__: null\x2C\x0d\n        value: 1\x2C\x0d\n        writable: true\x2C\x0d\n        enumerable: false\x2C\x0d\n        configurable: true\x2C\x0d\n      });\x0d\n    }\x0d\n\x0d\n    if (sourceText !== undefined) {\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C sourceText\x2C\x0d\n                                   options.lineOffset\x2C options.columnOffset\x2C\x0d\n                                   options.cachedData);\x0d\n\x0d\n      binding.callbackMap.set(this[kWrap]\x2C {\x0d\n        initializeImportMeta: options.initializeImportMeta\x2C\x0d\n        importModuleDynamically: options.importModuleDynamically ?\x0d\n          importModuleDynamicallyWrap(options.importModuleDynamically) :\x0d\n          undefined\x2C\x0d\n      });\x0d\n    } else {\x0d\n      assert(syntheticEvaluationSteps);\x0d\n      this[kWrap] = new ModuleWrap(identifier\x2C context\x2C\x0d\n                                   syntheticExportNames\x2C\x0d\n                                   syntheticEvaluationSteps);\x0d\n    }\x0d\n\x0d\n    wrapToModuleMap.set(this[kWrap]\x2C this);\x0d\n\x0d\n    this[kContext] = context;\x0d\n  }\x0d\n\x0d\n  get identifier() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kWrap].url;\x0d\n  }\x0d\n\x0d\n  get context() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return this[kContext];\x0d\n  }\x0d\n\x0d\n  get namespace() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must not be unlinked or linking');\x0d\n    }\x0d\n    return this[kWrap].getNamespace();\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    return STATUS_MAP[this[kWrap].getStatus()];\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kWrap].getStatus() !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be errored');\x0d\n    }\x0d\n    return this[kWrap].getError();\x0d\n  }\x0d\n\x0d\n  async link(linker) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateFunction(linker\x2C 'linker');\x0d\n    if (this.status === 'linked') {\x0d\n      throw new ERR_VM_MODULE_ALREADY_LINKED();\x0d\n    }\x0d\n    if (this.status !== 'unlinked') {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be unlinked');\x0d\n    }\x0d\n    await this[kLink](linker);\x0d\n    this[kWrap].instantiate();\x0d\n  }\x0d\n\x0d\n  async evaluate(options = kEmptyObject) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    let timeout = options.timeout;\x0d\n    if (timeout === undefined) {\x0d\n      timeout = -1;\x0d\n    } else {\x0d\n      validateUint32(timeout\x2C 'options.timeout'\x2C true);\x0d\n    }\x0d\n    const { breakOnSigint = false } = options;\x0d\n    validateBoolean(breakOnSigint\x2C 'options.breakOnSigint');\x0d\n    const status = this[kWrap].getStatus();\x0d\n    if (status !== kInstantiated &&\x0d\n        status !== kEvaluated &&\x0d\n        status !== kErrored) {\x0d\n      throw new ERR_VM_MODULE_STATUS(\x0d\n        'must be one of linked\x2C evaluated\x2C or errored'\x0d\n      );\x0d\n    }\x0d\n    await this[kWrap].evaluate(timeout\x2C breakOnSigint);\x0d\n  }\x0d\n\x0d\n  [customInspectSymbol](depth\x2C options) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || Module;\x0d\n    const o = ObjectCreate({ constructor });\x0d\n    o.status = this.status;\x0d\n    o.identifier = this.identifier;\x0d\n    o.context = this.context;\x0d\n\x0d\n    ObjectSetPrototypeOf(o\x2C ObjectGetPrototypeOf(this));\x0d\n    ObjectDefineProperty(o\x2C SymbolToStringTag\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value: constructor.name\x2C\x0d\n      configurable: true\x0d\n    });\x0d\n\x0d\n    // Lazy to avoid circular dependency\x0d\n    const { inspect } = require('internal/util/inspect');\x0d\n    return inspect(o\x2C { ...options\x2C customInspect: false });\x0d\n  }\x0d\n}\x0d\n\x0d\nconst kDependencySpecifiers = Symbol('kDependencySpecifiers');\x0d\nconst kNoError = Symbol('kNoError');\x0d\n\x0d\nclass SourceTextModule extends Module {\x0d\n  #error = kNoError;\x0d\n  #statusOverride;\x0d\n\x0d\n  constructor(sourceText\x2C options = kEmptyObject) {\x0d\n    validateString(sourceText\x2C 'sourceText');\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const {\x0d\n      lineOffset = 0\x2C\x0d\n      columnOffset = 0\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      cachedData\x2C\x0d\n    } = options;\x0d\n\x0d\n    validateInt32(lineOffset\x2C 'options.lineOffset');\x0d\n    validateInt32(columnOffset\x2C 'options.columnOffset');\x0d\n\x0d\n    if (initializeImportMeta !== undefined &&\x0d\n        typeof initializeImportMeta !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.initializeImportMeta'\x2C 'function'\x2C initializeImportMeta);\x0d\n    }\x0d\n\x0d\n    if (importModuleDynamically !== undefined &&\x0d\n        typeof importModuleDynamically !== 'function') {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.importModuleDynamically'\x2C 'function'\x2C\x0d\n        importModuleDynamically);\x0d\n    }\x0d\n\x0d\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.cachedData'\x2C\x0d\n        ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        cachedData\x0d\n      );\x0d\n    }\x0d\n\x0d\n    super({\x0d\n      sourceText\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n      lineOffset\x2C\x0d\n      columnOffset\x2C\x0d\n      cachedData\x2C\x0d\n      initializeImportMeta\x2C\x0d\n      importModuleDynamically\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = async (linker) => {\x0d\n      this.#statusOverride = 'linking';\x0d\n\x0d\n      const promises = this[kWrap].link(async (identifier\x2C assert) => {\x0d\n        const module = await linker(identifier\x2C this\x2C { assert });\x0d\n        if (module[kWrap] === undefined) {\x0d\n          throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n        }\x0d\n        if (module.context !== this.context) {\x0d\n          throw new ERR_VM_MODULE_DIFFERENT_CONTEXT();\x0d\n        }\x0d\n        if (module.status === 'errored') {\x0d\n          throw new ERR_VM_MODULE_LINK_FAILURE(`request for '${identifier}' resolved to an errored module`\x2C module.error);\x0d\n        }\x0d\n        if (module.status === 'unlinked') {\x0d\n          await module[kLink](linker);\x0d\n        }\x0d\n        return module[kWrap];\x0d\n      });\x0d\n\x0d\n      try {\x0d\n        if (promises !== undefined) {\x0d\n          await SafePromiseAll(promises);\x0d\n        }\x0d\n      } catch (e) {\x0d\n        this.#error = e;\x0d\n        throw e;\x0d\n      } finally {\x0d\n        this.#statusOverride = undefined;\x0d\n      }\x0d\n    };\x0d\n\x0d\n    this[kDependencySpecifiers] = undefined;\x0d\n  }\x0d\n\x0d\n  get dependencySpecifiers() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this[kDependencySpecifiers] === undefined) {\x0d\n      this[kDependencySpecifiers] = this[kWrap].getStaticDependencySpecifiers();\x0d\n    }\x0d\n    return this[kDependencySpecifiers];\x0d\n  }\x0d\n\x0d\n  get status() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return 'errored';\x0d\n    }\x0d\n    if (this.#statusOverride) {\x0d\n      return this.#statusOverride;\x0d\n    }\x0d\n    return super.status;\x0d\n  }\x0d\n\x0d\n  get error() {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (this.#error !== kNoError) {\x0d\n      return this.#error;\x0d\n    }\x0d\n    return super.error;\x0d\n  }\x0d\n\x0d\n  createCachedData() {\x0d\n    const { status } = this;\x0d\n    if (status === 'evaluating' ||\x0d\n        status === 'evaluated' ||\x0d\n        status === 'errored') {\x0d\n      throw new ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA();\x0d\n    }\x0d\n    return this[kWrap].createCachedData();\x0d\n  }\x0d\n}\x0d\n\x0d\nclass SyntheticModule extends Module {\x0d\n  constructor(exportNames\x2C evaluateCallback\x2C options = kEmptyObject) {\x0d\n    if (!ArrayIsArray(exportNames) ||\x0d\n      ArrayPrototypeSome(exportNames\x2C (e) => typeof e !== 'string')) {\x0d\n      throw new ERR_INVALID_ARG_TYPE('exportNames'\x2C\x0d\n                                     'Array of unique strings'\x2C\x0d\n                                     exportNames);\x0d\n    } else {\x0d\n      ArrayPrototypeForEach(exportNames\x2C (name\x2C i) => {\x0d\n        if (ArrayPrototypeIndexOf(exportNames\x2C name\x2C i + 1) !== -1) {\x0d\n          throw new ERR_INVALID_ARG_VALUE(`exportNames.${name}`\x2C\x0d\n                                          name\x2C\x0d\n                                          'is duplicated');\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n    validateFunction(evaluateCallback\x2C 'evaluateCallback');\x0d\n\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    const { context\x2C identifier } = options;\x0d\n\x0d\n    super({\x0d\n      syntheticExportNames: exportNames\x2C\x0d\n      syntheticEvaluationSteps: evaluateCallback\x2C\x0d\n      context\x2C\x0d\n      identifier\x2C\x0d\n    });\x0d\n\x0d\n    this[kLink] = () => this[kWrap].link(() => {\x0d\n      assert.fail('link callback should not be called');\x0d\n    });\x0d\n  }\x0d\n\x0d\n  setExport(name\x2C value) {\x0d\n    if (this[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    validateString(name\x2C 'name');\x0d\n    if (this[kWrap].getStatus() < kInstantiated) {\x0d\n      throw new ERR_VM_MODULE_STATUS('must be linked');\x0d\n    }\x0d\n    this[kWrap].setExport(name\x2C value);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction importModuleDynamicallyWrap(importModuleDynamically) {\x0d\n  const importModuleDynamicallyWrapper = async (...args) => {\x0d\n    const m = await ReflectApply(importModuleDynamically\x2C this\x2C args);\x0d\n    if (isModuleNamespaceObject(m)) {\x0d\n      return m;\x0d\n    }\x0d\n    if (!m || m[kWrap] === undefined) {\x0d\n      throw new ERR_VM_MODULE_NOT_MODULE();\x0d\n    }\x0d\n    if (m.status === 'errored') {\x0d\n      throw m.error;\x0d\n    }\x0d\n    return m.namespace;\x0d\n  };\x0d\n  return importModuleDynamicallyWrapper;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Module\x2C\x0d\n  SourceTextModule\x2C\x0d\n  SyntheticModule\x2C\x0d\n  importModuleDynamicallyWrap\x2C\x0d\n  getModuleFromWrap: (wrap) => wrapToModuleMap.get(wrap)\x2C\x0d\n};\x0d\n
code-source-info,0x64be93e12e,130,0,12831,C0O0C4O12831,,
code-creation,Function,10,408054,0x64be93f396,881, node:internal/vm/module:1:1,0x64be93e0a8,~
code-source-info,0x64be93f
code-creation,Function,10,408228,0x64be93f8de,30,<instance_members_initializer> node:internal/vm/module:259:3,0x64be93e718,~
code-source-info,0x64be93f8de,130,7129,7166,C3O7138C29O7166,,
code-creation,LazyCompile,10,408612,0x2ade89c262e,166,ESMLoader node:internal/modules/esm/loader:237:14,0x2f2f3a3c540,~
code-source-info,0x2ade89c262e,109,7131,7754,C9O7131C28O7141C38O7145C43O7184C49O7192C54O7206C64O7206C68O7265C78O7269C84O7328C94O7328C98O7384C110O7441C116O7441C123O7495C128O7522C133O7530C144O7530C150O7701C156O7735C165O7753,,
code-creation,LazyCompile,10,408762,0x2ade89c441e,27,ModuleMap node:internal/modules/esm/module_map:17:14,0x2f2f3a3f5f8,~
code-source-info,0x2ade89c441e,110,534,551,C3O540C7O546C11O540C26O550,,
code-creation,LazyCompile,10,408882,0x2ade89c46de,13,desc.value node:internal/per_context/primordials:340:32,0x39b87ca910,~
code-source-info,0x2ade89c46de,6,10212,10273,C0O10230C7O10237C12O10260,,
code-creation,LazyCompile,10,408962,0x2ade89c47e6,13,SafeIterator node:internal/per_context/primordials:285:16,0x39b87ca360,~
code-source-info,0x2ade89c47e6,6,8422,8484,C0O8442C3O8459C7O8457C12O8483,,
code-creation,LazyCompile,10,409047,0x2ade89c491e,13,next node:internal/per_context/primordials:288:9,0x39b87ca428,~
code-source-info,0x2ade89c491e,6,8494,8541,C0O8506C3O8523C8O8513C12O8534,,
code-creation,LazyCompile,10,409137,0x2ade89c4a0e,19,canBeRequiredWithoutScheme node:internal/bootstrap/loaders:254:36,0x39b87d0a00,~
code-source-info,0x2ade89c4a0e,9,8034,8087,C0O8046C7O8074C12O8074C18O8082,,
tick,0x7ff6d6700fc8,409456,0,0x0,0,0x2ade89c491e,0x2f2f3a36179,0x2f2f3a0c8fd,0x246eeec32e5,0x2f2f3a3181c,0x2f2f3a1021e,0x2f2f3a0b862
code-creation,Function,11,410025,0x246eeec4f60,29184, node:internal/modules/cjs/loader:1:1,0x2f2f3a33960,^
code-source-info,0x246eeec4f60,106,0,44413,,,
code-creation,Function,11,410095,0x246eeecc1c0,252,SafeMap node:internal/per_context/primordials:366:16,0x39b87ca9b8,^
code-source-info,0x246eeecc1c0,6,10966,10983,,,
code-creation,Function,11,410146,0x246eeecc320,104,next node:internal/per_context/primordials:288:9,0x39b87ca428,^
code-source-info,0x246eeecc320,6,8494,8541,,,
code-creation,Function,11,410194,0x246eeecc400,188,canBeRequiredWithoutScheme node:internal/bootstrap/loaders:254:36,0x39b87d0a00,^
code-source-info,0x246eeecc400,9,8034,8087,,,
code-creation,LazyCompile,10,410378,0x2ade89c8cd6,32, node:internal/modules/cjs/loader:242:41,0x2f2f3a342e8,~
code-source-info,0x2ade89c8cd6,106,7336,7362,C0O7344C9O7345C21O7357C31O7362,,
code-creation,LazyCompile,10,410607,0x2ade89c8e76,19,getSchemeOnlyModuleNames node:internal/bootstrap/loaders:258:34,0x39b87d0a80,~
code-source-info,0x2ade89c8e76,9,8124,8177,C0O8134C11O8151C14O8141C18O8172,,
code-creation,LazyCompile,10,410740,0x2ade89c8fee,26, node:internal/modules/cjs/loader:244:50,0x2f2f3a34338,~
code-source-info,0x2ade89c8fee,106,7418,7465,C0O7443C5O7443C15O7455C20O7443C25O7465,,
code-creation,LazyCompile,10,410986,0x2ade89c93f6,152,deprecate node:internal/util:99:19,0x2392d46350,~
code-source-info,0x2ade89c93f6,15,2573,3790,C0O2573C26O2594C31O2606C37O2620C42O2637C44O2647C45O2706C53O2745C61O2767C66O2748C83O2805C87O2834C100O2834C105O2882C106O2882C108O3477C121O3477C126O3518C129O3525C135O3722C141O3748C145O3743C149O3769C151O3787,,
code-creation,LazyCompile,10,411208,0x2ade89c9a8e,28,getEmbedderOptions node:internal/options:32:28,0x6414eb36e0,~
code-source-info,0x2ade89c9a8e,92,791,913,C0O799C6O828C11O846C17O844C23O887C27O910,,
code-creation,LazyCompile,10,411374,0x2ade89c9d36,315,Module._initPaths node:internal/modules/cjs/loader:1319:29,0x2f2f3a34ee8,~
code-source-info,0x2ade89c9d
code-creation,Eval,10,411796,0x2ade89ca3be,5, node:internal/modules/run_main:1:1,0x2ade89ca198,~
script-source,131,node:internal/modules/run_main,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n} = primordials;\x0d\nconst CJSLoader = require('internal/modules/cjs/loader');\x0d\nconst { Module\x2C toRealPath\x2C readPackageScope } = CJSLoader;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst path = require('path');\x0d\nconst {\x0d\n  handleProcessExit\x2C\x0d\n} = require('internal/modules/esm/handle_process_exit');\x0d\n\x0d\nfunction resolveMainPath(main) {\x0d\n  // Note extension resolution for the main entry point can be deprecated in a\x0d\n  // future major.\x0d\n  // Module._findPath is monkey-patchable here.\x0d\n  let mainPath = Module._findPath(path.resolve(main)\x2C null\x2C true);\x0d\n  if (!mainPath)\x0d\n    return;\x0d\n\x0d\n  const preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\x0d\n  if (!preserveSymlinksMain)\x0d\n    mainPath = toRealPath(mainPath);\x0d\n\x0d\n  return mainPath;\x0d\n}\x0d\n\x0d\nfunction shouldUseESMLoader(mainPath) {\x0d\n  /**\x0d\n   * @type {string[]} userLoaders A list of custom loaders registered by the user\x0d\n   * (or an empty list when none have been registered).\x0d\n   */\x0d\n  const userLoaders = getOptionValue('--experimental-loader');\x0d\n  if (userLoaders.length > 0)\x0d\n    return true;\x0d\n  const esModuleSpecifierResolution =\x0d\n    getOptionValue('--experimental-specifier-resolution');\x0d\n  if (esModuleSpecifierResolution === 'node')\x0d\n    return true;\x0d\n  // Determine the module format of the main\x0d\n  if (mainPath && StringPrototypeEndsWith(mainPath\x2C '.mjs'))\x0d\n    return true;\x0d\n  if (!mainPath || StringPrototypeEndsWith(mainPath\x2C '.cjs'))\x0d\n    return false;\x0d\n  const pkg = readPackageScope(mainPath);\x0d\n  return pkg && pkg.data.type === 'module';\x0d\n}\x0d\n\x0d\nfunction runMainESM(mainPath) {\x0d\n  const { loadESM } = require('internal/process/esm_loader');\x0d\n  const { pathToFileURL } = require('internal/url');\x0d\n\x0d\n  handleMainPromise(loadESM((esmLoader) => {\x0d\n    const main = path.isAbsolute(mainPath) ?\x0d\n      pathToFileURL(mainPath).href : mainPath;\x0d\n    return esmLoader.import(main\x2C undefined\x2C ObjectCreate(null));\x0d\n  }));\x0d\n}\x0d\n\x0d\nasync function handleMainPromise(promise) {\x0d\n  process.on('exit'\x2C handleProcessExit);\x0d\n  try {\x0d\n    return await promise;\x0d\n  } finally {\x0d\n    process.off('exit'\x2C handleProcessExit);\x0d\n  }\x0d\n}\x0d\n\x0d\n// For backwards compatibility\x2C we have to run a bunch of\x0d\n// monkey-patchable code that belongs to the CJS loader (exposed by\x0d\n// `require('module')`) even when the entry point is ESM.\x0d\nfunction executeUserEntryPoint(main = process.argv[1]) {\x0d\n  const resolvedMain = resolveMainPath(main);\x0d\n  const useESMLoader = shouldUseESMLoader(resolvedMain);\x0d\n  if (useESMLoader) {\x0d\n    runMainESM(resolvedMain || main);\x0d\n  } else {\x0d\n    // Module._load is the monkey-patchable CJS module loader.\x0d\n    Module._load(main\x2C null\x2C true);\x0d\n  }\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  executeUserEntryPoint\x2C\x0d\n  handleMainPromise\x2C\x0d\n};\x0d\n
code-source-info,0x2ade89ca3be,131,0,2788,C0O0C4O2788,,
code-creation,Function,10,412037,0x2ade89ca6a6,178, node:internal/modules/run_main:1:1,0x2ade89ca338,~
code-source-info,0x2ade89ca6a6,131,0,2788,C0O0C66O28C72O45C78O107C84O107C89O156C95O164C101O176C107O236C113O236C118O217C124O279C130O279C134O279C136O332C142O332C147O308C153O2716C160O2738C166O2764C172O2731C177O2787,,
code-creation,LazyCompile,10,412255,0x2ade89cacb6,163,initializeESMLoader node:internal/bootstrap/pre_execution:531:29,0x2f2f3a0e130,~
code-source-info,0x2ade89cacb6,100,17284,18399,C0O17368C6O17368C13O17417C16O17413C21O17411C25O17437C30O17441C34O17461C40O17490C41O17497C42O17602C48O17602C53O17516C58O17557C63O17649C69O17649C74O17853C79O17811C83O17924C88O17885C92O18094C100O18098C106O18217C112O18217C117O18165C122O18173C127O18191C132O18264C138O18264C143O18284C145O18294C149O18309C151O18329C155O18354C157O18373C162O18398,,
code-creation,LazyCompile,10,412408,0x2ade89caece,5,get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32,0x2f2f3a341f8,~
code-source-info,0x2ade89caece,106,2368,2408,C0O2373C4O2406,,
code-creation,LazyCompile,10,412498,0x2ade89caf76,21,assert node:internal/assert:11:16,0x2392d66d48,~
script-source,21,node:internal/assert,'use strict';\x0d\n\x0d\nlet error;\x0d\nfunction lazyError() {\x0d\n  if (!error) {\x0d\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\x0d\n  }\x0d\n  return error;\x0d\n}\x0d\n\x0d\nfunction assert(value\x2C message) {\x0d\n  if (!value) {\x0d\n    const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n    throw new ERR_INTERNAL_ASSERTION(message);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction fail(message) {\x0d\n  const ERR_INTERNAL_ASSERTION = lazyError();\x0d\n  throw new ERR_INTERNAL_ASSERTION(message);\x0d\n}\x0d\n\x0d\nassert.fail = fail;\x0d\n\x0d\nmodule.exports = assert;\x0d\n
code-source-info,0x2ade89caf76,21,182,322,C0O204C4O254C7O254C11O272C13O278C18O272C20O321,,
code-creation,LazyCompile,10,412642,0x2ade89cb176,53,loadPreloadModules node:internal/bootstrap/pre_execution:574:28,0x2f2f3a0e220,~
code-source-info,0x2ade89cb176,100,18891,19222,C0O18980C8O18980C13O19012C15O19049C21O19056C26O19137C32O19137C37O19137C42O19102C47O19182C52O19221,,
code-creation,LazyCompile,10,412737,0x2ade89cb366,50,initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:566:36,0x2f2f3a0e1d0,~
code-source-info,0x2ade89cb366,100,18632,18860,C0O18640C8O18644C14O18690C17O18698C28O18698C34O18812C40O18812C45O18849C49O18859,,
code-creation,LazyCompile,10,412940,0x2ade89cb48e,80,executeUserEntryPoint node:internal/modules/run_main:74:31,0x2ade89ca530,~
code-source-info,0x2ade89cb48e,131,2398,2712,C7O2414C14O2418C22O2449C25O2449C30O2496C33O2496C38O2533C40O2558C45O2569C50O2558C56O2673C61O2680C73O2680C79O2711,,
code-creation,LazyCompile,10,413046,0x2ade89cb8de,68,resolveMainPath node:internal/modules/run_main:15:25,0x2ade89ca3f0,~
code-source-info,0x2ade89cb8de,131,412,839,C0O588C5O595C12O605C15O610C20O610C30O595C36O641C38O661C39O668C40O703C48O703C53O750C55O782C60O793C65O820C67O836,,
code-creation,LazyCompile,10,413298,0x2ade89cbae6,442,Module._findPath node:internal/modules/cjs/loader:566:28,0x2f2f3a346f8,~
code-source-info,0x2ade89cbae
code-creation,LazyCompile,10,413531,0x2ade89cbe96,109,isAbsolute node:path:402:13,0x32ebb7cd5b0,~
code-source-info,0x2ade89cbe96,41,13104,13523,C0O13118C8O13118C13O13170C18O13183C19O13191C24O13205C25O13218C26O13239C33O13239C39O13280C42O13287C50O13355C58O13369C66O13405C72O13405C80O13444C82O13440C92O13481C98O13481C104O13465C108O13518,,
code-creation,LazyCompile,10,413766,0x2ade89cc166,85,stat node:internal/modules/cjs/loader:175:14,0x2f2f3a33a68,~
code-source-info,0x2ade89cc166,106,5344,5753,C0O5360C5O5376C10O5376C17O5407C23O5453C28O5463C33O5463C39O5483C41O5509C43O5523C44O5547C49O5547C54O5580C61O5613C66O5695C71O5705C76O5705C82O5736C84O5750,,
code-creation,LazyCompile,10,413912,0x2ade89cc376,232,toNamespacedPath node:path:618:19,0x32ebb7cd6d8,~
code-source-info,0x2ade89cc376,41,20086,21201,C0O20152C6O20189C12O20196C17O20210C19O20222C20O20251C25O20257C30O20257C36O20296C43O20303C48O20316C50O20328C51O20336C58O20340C66O20387C68O20383C73O20445C81O20449C89O20496C91O20492C96O20541C104O20541C110O20594C112O20607C114O20603C121O20638C123O20634C128O20738C133O20760C139O20760C148O20800C151O20833C156O20865C161O20865C167O20845C175O20919C181O20919C189O20966C191O20962C198O20987C204O20987C212O21034C214O21030C219O21137C224O21154C228O21169C229O21184C231O21196,,
code-creation,LazyCompile,10,414221,0x2ade89cc5d6,42,toRealPath node:internal/modules/cjs/loader:465:20,0x2f2f3a33d88,~
code-source-info,0x2ade89cc5d6,106,13604,13720,C0O13623C5O13633C10O13646C17O13667C20O13678C28O13697C35O13633C41O13717,,
code-creation,LazyCompile,10,414744,0x2ade89cc9fe,1079,realpathSync node:fs:2455:22,0x6414e99880,~
script-source,83,node:fs,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// Maintainers\x2C keep in mind that ES1-style octal literals (`0666`) are not\x0d\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  BigIntPrototypeToString\x2C\x0d\n  MathMax\x2C\x0d\n  Number\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Promise\x2C\x0d\n  ReflectApply\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { fs: constants } = internalBinding('constants');\x0d\nconst {\x0d\n  S_IFIFO\x2C\x0d\n  S_IFLNK\x2C\x0d\n  S_IFMT\x2C\x0d\n  S_IFREG\x2C\x0d\n  S_IFSOCK\x2C\x0d\n  F_OK\x2C\x0d\n  R_OK\x2C\x0d\n  W_OK\x2C\x0d\n  X_OK\x2C\x0d\n  O_WRONLY\x2C\x0d\n  O_SYMLINK\x0d\n} = constants;\x0d\n\x0d\nconst pathModule = require('path');\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\n\x0d\n// We need to get the statValues from the binding at the callsite since\x0d\n// it's re-initialized after deserialization.\x0d\n\x0d\nconst binding = internalBinding('fs');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  aggregateTwoErrors\x2C\x0d\n  codes: {\x0d\n    ERR_FS_FILE_TOO_LARGE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_FEATURE_UNAVAILABLE_ON_PLATFORM\x2C\x0d\n  }\x2C\x0d\n  AbortError\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { FSReqCallback } = binding;\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst {\x0d\n  customPromisifyArgs: kCustomPromisifyArgsSymbol\x2C\x0d\n  kEmptyObject\x2C\x0d\n  promisify: {\x0d\n    custom: kCustomPromisifiedSymbol\x2C\x0d\n  }\x2C\x0d\n  SideEffectFreeRegExpPrototypeExec\x2C\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n  }\x2C\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  Stats\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  realpathCacheKey\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  validatePrimitiveStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n} = require('internal/fs/utils');\x0d\nconst {\x0d\n  Dir\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x0d\n} = require('internal/fs/dir');\x0d\nconst {\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n} = require('internal/constants');\x0d\nconst {\x0d\n  isUint32\x2C\x0d\n  parseFileMode\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateCallback\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst watchers = require('internal/fs/watchers');\x0d\nconst ReadFileContext = require('internal/fs/read_file_context');\x0d\n\x0d\nlet truncateWarn = true;\x0d\nlet fs;\x0d\n\x0d\n// Lazy loaded\x0d\nlet cpFn;\x0d\nlet cpSyncFn;\x0d\nlet promises = null;\x0d\nlet ReadStream;\x0d\nlet WriteStream;\x0d\nlet rimraf;\x0d\nlet rimrafSync;\x0d\n\x0d\n// These have to be separate because of how graceful-fs happens to do it's\x0d\n// monkeypatching.\x0d\nlet FileReadStream;\x0d\nlet FileWriteStream;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\nconst isOSX = process.platform === 'darwin';\x0d\n\x0d\n\x0d\nfunction showTruncateDeprecation() {\x0d\n  if (truncateWarn) {\x0d\n    process.emitWarning(\x0d\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\x0d\n      'fs.ftruncate with a file descriptor instead.'\x2C\x0d\n      'DeprecationWarning'\x2C 'DEP0081');\x0d\n    truncateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return cb;\x0d\n}\x0d\n\x0d\n// Ensure that callbacks run in the global context. Only use this function\x0d\n// for callbacks that are passed to the binding layer\x2C callbacks that are\x0d\n// invoked from JS already run in the proper scope.\x0d\nfunction makeCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (...args) => ReflectApply(cb\x2C this\x2C args);\x0d\n}\x0d\n\x0d\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\x0d\n// an optimization\x2C since the data passed back to the callback needs to be\x0d\n// transformed anyway.\x0d\nfunction makeStatsCallback(cb) {\x0d\n  validateCallback(cb);\x0d\n\x0d\n  return (err\x2C stats) => {\x0d\n    if (err) return cb(err);\x0d\n    cb(err\x2C getStatsFromBinding(stats));\x0d\n  };\x0d\n}\x0d\n\x0d\nconst isFd = isUint32;\x0d\n\x0d\nfunction isFileType(stats\x2C fileType) {\x0d\n  // Use stats array directly to avoid creating an fs.Stats instance just for\x0d\n  // our internal use.\x0d\n  let mode = stats[1];\x0d\n  if (typeof mode === 'bigint')\x0d\n    mode = Number(mode);\x0d\n  return (mode & S_IFMT) === fileType;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests a user's permissions for the file or directory\x0d\n * specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction access(path\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = F_OK;\x0d\n  }\x0d\n\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously tests a user's permissions for the file or\x0d\n * directory specified by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction accessSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = getValidMode(mode\x2C 'access');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.access(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(exists?: boolean) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction exists(path\x2C callback) {\x0d\n  maybeCallback(callback);\x0d\n\x0d\n  function suppressedCallback(err) {\x0d\n    callback(err ? false : true);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    fs.access(path\x2C F_OK\x2C suppressedCallback);\x0d\n  } catch {\x0d\n    return callback(false);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperty(exists\x2C kCustomPromisifiedSymbol\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: function exists(path) { // eslint-disable-line func-name-matching\x0d\n    return new Promise((resolve) => fs.exists(path\x2C resolve));\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\n// fs.existsSync never throws\x2C it only returns true or false.\x0d\n// Since fs.existsSync never throws\x2C users have established\x0d\n// the expectation that passing invalid arguments to it\x2C even like\x0d\n// fs.existsSync()\x2C would only get a false in return\x2C so we cannot signal\x0d\n// validation errors to users properly out of compatibility concerns.\x0d\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\x0d\n/**\x0d\n * Synchronously tests whether or not the given path exists.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction existsSync(path) {\x0d\n  try {\x0d\n    path = getValidatedPath(path);\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n  const ctx = { path };\x0d\n  const nPath = pathModule.toNamespacedPath(path);\x0d\n  binding.access(nPath\x2C F_OK\x2C undefined\x2C ctx);\x0d\n\x0d\n  // In case of an invalid symlink\x2C `binding.access()` on win32\x0d\n  // will **not** return an error and is therefore not enough.\x0d\n  // Double check with `binding.stat()`.\x0d\n  if (isWindows && ctx.errno === undefined) {\x0d\n    binding.stat(nPath\x2C false\x2C undefined\x2C ctx);\x0d\n  }\x0d\n\x0d\n  return ctx.errno === undefined;\x0d\n}\x0d\n\x0d\nfunction readFileAfterOpen(err\x2C fd) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err) {\x0d\n    context.callback(err);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  context.fd = fd;\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = readFileAfterStat;\x0d\n  req.context = context;\x0d\n  binding.fstat(fd\x2C false\x2C req);\x0d\n}\x0d\n\x0d\nfunction readFileAfterStat(err\x2C stats) {\x0d\n  const context = this.context;\x0d\n\x0d\n  if (err)\x0d\n    return context.close(err);\x0d\n\x0d\n  const size = context.size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n\x0d\n  if (size > kIoMaxLength) {\x0d\n    err = new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    return context.close(err);\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    if (size === 0) {\x0d\n      context.buffers = [];\x0d\n    } else {\x0d\n      context.buffer = Buffer.allocUnsafeSlow(size);\x0d\n    }\x0d\n  } catch (err) {\x0d\n    return context.close(err);\x0d\n  }\x0d\n  context.read();\x0d\n}\x0d\n\x0d\nfunction checkAborted(signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    callback(new AbortError(undefined\x2C { cause: signal?.reason }));\x0d\n    return true;\x0d\n  }\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   data?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readFile(path\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const context = new ReadFileContext(callback\x2C options.encoding);\x0d\n  context.isUserFd = isFd(path); // File descriptor ownership\x0d\n\x0d\n  if (options.signal) {\x0d\n    context.signal = options.signal;\x0d\n  }\x0d\n  if (context.isUserFd) {\x0d\n    process.nextTick(function tick(context) {\x0d\n      ReflectApply(readFileAfterOpen\x2C { context }\x2C [null\x2C path]);\x0d\n    }\x2C context);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  const flagsNumber = stringToFlags(options.flag\x2C 'options.flag');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.context = context;\x0d\n  req.oncomplete = readFileAfterOpen;\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               0o666\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\nfunction tryStatSync(fd\x2C isUserFd) {\x0d\n  const ctx = {};\x0d\n  const stats = binding.fstat(fd\x2C false\x2C undefined\x2C ctx);\x0d\n  if (ctx.errno !== undefined && !isUserFd) {\x0d\n    fs.closeSync(fd);\x0d\n    throw uvException(ctx);\x0d\n  }\x0d\n  return stats;\x0d\n}\x0d\n\x0d\nfunction tryCreateBuffer(size\x2C fd\x2C isUserFd) {\x0d\n  let threw = true;\x0d\n  let buffer;\x0d\n  try {\x0d\n    if (size > kIoMaxLength) {\x0d\n      throw new ERR_FS_FILE_TOO_LARGE(size);\x0d\n    }\x0d\n    buffer = Buffer.allocUnsafe(size);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C len) {\x0d\n  let threw = true;\x0d\n  let bytesRead;\x0d\n  try {\x0d\n    bytesRead = fs.readSync(fd\x2C buffer\x2C pos\x2C len);\x0d\n    threw = false;\x0d\n  } finally {\x0d\n    if (threw && !isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n  return bytesRead;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the entire contents of a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   flag?: string;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readFileSync(path\x2C options) {\x0d\n  options = getOptions(options\x2C { flag: 'r' });\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C options.flag\x2C 0o666);\x0d\n\x0d\n  const stats = tryStatSync(fd\x2C isUserFd);\x0d\n  const size = isFileType(stats\x2C S_IFREG) ? stats[8] : 0;\x0d\n  let pos = 0;\x0d\n  let buffer; // Single buffer with file data\x0d\n  let buffers; // List for when size is unknown\x0d\n\x0d\n  if (size === 0) {\x0d\n    buffers = [];\x0d\n  } else {\x0d\n    buffer = tryCreateBuffer(size\x2C fd\x2C isUserFd);\x0d\n  }\x0d\n\x0d\n  let bytesRead;\x0d\n\x0d\n  if (size !== 0) {\x0d\n    do {\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C pos\x2C size - pos);\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0 && pos < size);\x0d\n  } else {\x0d\n    do {\x0d\n      // The kernel lies about many files.\x0d\n      // Go ahead and try to read some bytes.\x0d\n      buffer = Buffer.allocUnsafe(8192);\x0d\n      bytesRead = tryReadSync(fd\x2C isUserFd\x2C buffer\x2C 0\x2C 8192);\x0d\n      if (bytesRead !== 0) {\x0d\n        ArrayPrototypePush(buffers\x2C buffer.slice(0\x2C bytesRead));\x0d\n      }\x0d\n      pos += bytesRead;\x0d\n    } while (bytesRead !== 0);\x0d\n  }\x0d\n\x0d\n  if (!isUserFd)\x0d\n    fs.closeSync(fd);\x0d\n\x0d\n  if (size === 0) {\x0d\n    // Data was collected into the buffers list.\x0d\n    buffer = Buffer.concat(buffers\x2C pos);\x0d\n  } else if (pos < size) {\x0d\n    buffer = buffer.slice(0\x2C pos);\x0d\n  }\x0d\n\x0d\n  if (options.encoding) buffer = buffer.toString(options.encoding);\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction defaultCloseCallback(err) {\x0d\n  if (err != null) throw err;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} [callback]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction close(fd\x2C callback = defaultCloseCallback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  if (callback !== defaultCloseCallback)\x0d\n    callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.close(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously closes the file descriptor.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction closeSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.close(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   fd?: number\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction open(path\x2C flags\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  if (arguments.length < 3) {\x0d\n    callback = flags;\x0d\n    flags = 'r';\x0d\n    mode = 0o666;\x0d\n  } else if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0o666;\x0d\n  } else {\x0d\n    mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n  }\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n               flagsNumber\x2C\x0d\n               mode\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously opens a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} [flags]\x0d\n * @param {string | number} [mode]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction openSync(path\x2C flags\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  const flagsNumber = stringToFlags(flags);\x0d\n  mode = parseFileMode(mode\x2C 'mode'\x2C 0o666);\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.open(pathModule.toNamespacedPath(path)\x2C\x0d\n                              flagsNumber\x2C mode\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {number} offsetOrOptions\x0d\n * @param {number} length\x0d\n * @param {number | bigint | null} position\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffer?: Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction read(fd\x2C buffer\x2C offsetOrOptions\x2C length\x2C position\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  let offset = offsetOrOptions;\x0d\n  let params = null;\x0d\n  if (arguments.length <= 4) {\x0d\n    if (arguments.length === 4) {\x0d\n      // This is fs.read(fd\x2C buffer\x2C options\x2C callback)\x0d\n      validateObject(offsetOrOptions\x2C 'options'\x2C { nullable: true });\x0d\n      callback = length;\x0d\n      params = offsetOrOptions;\x0d\n    } else if (arguments.length === 3) {\x0d\n      // This is fs.read(fd\x2C bufferOrParams\x2C callback)\x0d\n      if (!isArrayBufferView(buffer)) {\x0d\n        // This is fs.read(fd\x2C params\x2C callback)\x0d\n        params = buffer;\x0d\n        ({ buffer = Buffer.alloc(16384) } = params ?? kEmptyObject);\x0d\n      }\x0d\n      callback = offsetOrOptions;\x0d\n    } else {\x0d\n      // This is fs.read(fd\x2C callback)\x0d\n      callback = buffer;\x0d\n      buffer = Buffer.alloc(16384);\x0d\n    }\x0d\n\x0d\n    ({\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x2C\x0d\n    } = params ?? kEmptyObject);\x0d\n  }\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n  callback = maybeCallback(callback);\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return process.nextTick(function tick() {\x0d\n      callback(null\x2C 0\x2C buffer);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  function wrapper(err\x2C bytesRead) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C bytesRead || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(read\x2C kCustomPromisifyArgsSymbol\x2C\x0d\n                     { __proto__: null\x2C value: ['bytesRead'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads the file from the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView} buffer\x0d\n * @param {{\x0d\n *   offset?: number;\x0d\n *   length?: number;\x0d\n *   position?: number | bigint | null;\x0d\n *   }} [offset]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readSync(fd\x2C buffer\x2C offset\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  validateBuffer(buffer);\x0d\n\x0d\n  if (arguments.length <= 3) {\x0d\n    // Assume fs.readSync(fd\x2C buffer\x2C options)\x0d\n    const options = offset || kEmptyObject;\x0d\n\x0d\n    ({\x0d\n      offset = 0\x2C\x0d\n      length = buffer.byteLength - offset\x2C\x0d\n      position = null\x2C\x0d\n    } = options);\x0d\n  }\x0d\n\x0d\n  if (offset == null) {\x0d\n    offset = 0;\x0d\n  } else {\x0d\n    validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n  }\x0d\n\x0d\n  length |= 0;\x0d\n\x0d\n  if (length === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  if (buffer.byteLength === 0) {\x0d\n    throw new ERR_INVALID_ARG_VALUE('buffer'\x2C buffer\x2C\x0d\n                                    'is empty and cannot be written');\x0d\n  }\x0d\n\x0d\n  validateOffsetLengthRead(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n  if (position == null)\x0d\n    position = -1;\x0d\n\x0d\n  validatePosition(position\x2C 'position');\x0d\n\x0d\n  const ctx = {};\x0d\n  const result = binding.read(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads file from the specified `fd` (file descriptor)\x0d\n * and writes to an array of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number | null} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesRead?: number\x2C\x0d\n *   buffers?: ArrayBufferView[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readv(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C read) {\x0d\n    callback(err\x2C read || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.readBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(readv\x2C kCustomPromisifyArgsSymbol\x2C\x0d\n                     { __proto__: null\x2C value: ['bytesRead'\x2C 'buffers']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously reads file from the\x0d\n * specified `fd` (file descriptor) and writes to an array\x0d\n * of `ArrayBufferView`s.\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number | null} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction readvSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.readBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes `buffer` to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string | object} buffer\x0d\n * @param {number | object} [offsetOrOptions]\x0d\n * @param {number} [length]\x0d\n * @param {number | null} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number;\x0d\n *   buffer?: Buffer | TypedArray | DataView\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction write(fd\x2C buffer\x2C offsetOrOptions\x2C length\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\x0d\n    callback(err\x2C written || 0\x2C buffer);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n\x0d\n  let offset = offsetOrOptions;\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    callback = maybeCallback(callback || position || length || offset);\x0d\n\x0d\n    if (typeof offset === 'object') {\x0d\n      ({\x0d\n        offset = 0\x2C\x0d\n        length = buffer.byteLength - offset\x2C\x0d\n        position = null\x2C\x0d\n      } = offsetOrOptions ?? kEmptyObject);\x0d\n    }\x0d\n\x0d\n    if (offset == null || typeof offset === 'function') {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    if (typeof position !== 'number')\x0d\n      position = null;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = wrapper;\x0d\n    return binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C req);\x0d\n  }\x0d\n\x0d\n  validateStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n\x0d\n  if (typeof position !== 'function') {\x0d\n    if (typeof offset === 'function') {\x0d\n      position = offset;\x0d\n      offset = null;\x0d\n    } else {\x0d\n      position = length;\x0d\n    }\x0d\n    length = 'utf8';\x0d\n  }\x0d\n\x0d\n  const str = String(buffer);\x0d\n  validateEncoding(str\x2C length);\x0d\n  callback = maybeCallback(position);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n  return binding.writeString(fd\x2C str\x2C offset\x2C length\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(write\x2C kCustomPromisifyArgsSymbol\x2C\x0d\n                     { __proto__: null\x2C value: ['bytesWritten'\x2C 'buffer']\x2C enumerable: false });\x0d\n\x0d\n/**\x0d\n * Synchronously writes `buffer` to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {Buffer | TypedArray | DataView | string} buffer\x0d\n * @param {{\x0d\n *   offset?: number;\x0d\n *   length?: number;\x0d\n *   position?: number | null;\x0d\n *   }} [offsetOrOptions]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writeSync(fd\x2C buffer\x2C offsetOrOptions\x2C length\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  let result;\x0d\n\x0d\n  let offset = offsetOrOptions;\x0d\n  if (isArrayBufferView(buffer)) {\x0d\n    if (typeof offset === 'object') {\x0d\n      ({\x0d\n        offset = 0\x2C\x0d\n        length = buffer.byteLength - offset\x2C\x0d\n        position = null\x2C\x0d\n      } = offsetOrOptions ?? kEmptyObject);\x0d\n    }\x0d\n    if (position === undefined)\x0d\n      position = null;\x0d\n    if (offset == null) {\x0d\n      offset = 0;\x0d\n    } else {\x0d\n      validateInteger(offset\x2C 'offset'\x2C 0);\x0d\n    }\x0d\n    if (typeof length !== 'number')\x0d\n      length = buffer.byteLength - offset;\x0d\n    validateOffsetLengthWrite(offset\x2C length\x2C buffer.byteLength);\x0d\n    result = binding.writeBuffer(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  } else {\x0d\n    validatePrimitiveStringAfterArrayBufferView(buffer\x2C 'buffer');\x0d\n    validateEncoding(buffer\x2C length);\x0d\n\x0d\n    if (offset === undefined)\x0d\n      offset = null;\x0d\n    result = binding.writeString(fd\x2C buffer\x2C offset\x2C length\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Writes an array of `ArrayBufferView`s to the\x0d\n * specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number | null} [position]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   bytesWritten?: number\x2C\x0d\n *   buffers?: ArrayBufferView[]\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writev(fd\x2C buffers\x2C position\x2C callback) {\x0d\n  function wrapper(err\x2C written) {\x0d\n    callback(err\x2C written || 0\x2C buffers);\x0d\n  }\x0d\n\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n  callback = maybeCallback(callback || position);\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    process.nextTick(callback\x2C null\x2C 0\x2C buffers);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = wrapper;\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  return binding.writeBuffers(fd\x2C buffers\x2C position\x2C req);\x0d\n}\x0d\n\x0d\nObjectDefineProperty(writev\x2C kCustomPromisifyArgsSymbol\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: ['bytesWritten'\x2C 'buffer']\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\n/**\x0d\n * Synchronously writes an array of `ArrayBufferView`s\x0d\n * to the specified `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {ArrayBufferView[]} buffers\x0d\n * @param {number | null} [position]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction writevSync(fd\x2C buffers\x2C position) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateBufferArray(buffers);\x0d\n\x0d\n  if (buffers.length === 0) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (typeof position !== 'number')\x0d\n    position = null;\x0d\n\x0d\n  const result = binding.writeBuffers(fd\x2C buffers\x2C position\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rename(oldPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n\x0d\n/**\x0d\n * Synchronously renames file at `oldPath` to\x0d\n * the pathname provided as `newPath`.\x0d\n * @param {string | Buffer | URL} oldPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction renameSync(oldPath\x2C newPath) {\x0d\n  oldPath = getValidatedPath(oldPath\x2C 'oldPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n  const ctx = { path: oldPath\x2C dest: newPath };\x0d\n  binding.rename(pathModule.toNamespacedPath(oldPath)\x2C\x0d\n                 pathModule.toNamespacedPath(newPath)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncate(path\x2C len\x2C callback) {\x0d\n  if (typeof path === 'number') {\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncate(path\x2C len\x2C callback);\x0d\n  }\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  } else if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = maybeCallback(callback);\x0d\n  fs.open(path\x2C 'r+'\x2C (er\x2C fd) => {\x0d\n    if (er) return callback(er);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = function oncomplete(er) {\x0d\n      fs.close(fd\x2C (er2) => {\x0d\n        callback(aggregateTwoErrors(er2\x2C er));\x0d\n      });\x0d\n    };\x0d\n    binding.ftruncate(fd\x2C len\x2C req);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction truncateSync(path\x2C len) {\x0d\n  if (typeof path === 'number') {\x0d\n    // legacy\x0d\n    showTruncateDeprecation();\x0d\n    return fs.ftruncateSync(path\x2C len);\x0d\n  }\x0d\n  if (len === undefined) {\x0d\n    len = 0;\x0d\n  }\x0d\n  // Allow error to be thrown\x2C but still close fd.\x0d\n  const fd = fs.openSync(path\x2C 'r+');\x0d\n  let ret;\x0d\n\x0d\n  try {\x0d\n    ret = fs.ftruncateSync(fd\x2C len);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncate(fd\x2C len = 0\x2C callback) {\x0d\n  if (typeof len === 'function') {\x0d\n    callback = len;\x0d\n    len = 0;\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.ftruncate(fd\x2C len\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously truncates the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {number} [len]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction ftruncateSync(fd\x2C len = 0) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(len\x2C 'len');\x0d\n  len = MathMax(0\x2C len);\x0d\n  const ctx = {};\x0d\n  binding.ftruncate(fd\x2C len\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction lazyLoadCp() {\x0d\n  if (cpFn === undefined) {\x0d\n    ({ cpFn } = require('internal/fs/cp/cp'));\x0d\n    cpFn = require('util').callbackify(cpFn);\x0d\n    ({ cpSyncFn } = require('internal/fs/cp/cp-sync'));\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction lazyLoadRimraf() {\x0d\n  if (rimraf === undefined)\x0d\n    ({ rimraf\x2C rimrafSync } = require('internal/fs/rimraf'));\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdir(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  callback = makeCallback(callback);\x0d\n  path = pathModule.toNamespacedPath(getValidatedPath(path));\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    validateRmOptions(\x0d\n      path\x2C\x0d\n      { ...options\x2C force: false }\x2C\x0d\n      true\x2C\x0d\n      (err\x2C options) => {\x0d\n        if (err === false) {\x0d\n          const req = new FSReqCallback();\x0d\n          req.oncomplete = callback;\x0d\n          return binding.rmdir(path\x2C req);\x0d\n        }\x0d\n        if (err) {\x0d\n          return callback(err);\x0d\n        }\x0d\n\x0d\n        lazyLoadRimraf();\x0d\n        rimraf(path\x2C options\x2C callback);\x0d\n      });\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n    const req = new FSReqCallback();\x0d\n    req.oncomplete = callback;\x0d\n    return binding.rmdir(path\x2C req);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmdirSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (options?.recursive) {\x0d\n    emitRecursiveRmdirWarning();\x0d\n    options = validateRmOptionsSync(path\x2C { ...options\x2C force: false }\x2C true);\x0d\n    if (options !== false) {\x0d\n      lazyLoadRimraf();\x0d\n      return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n    }\x0d\n  } else {\x0d\n    validateRmdirOptions(options);\x0d\n  }\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.rmdir(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  return handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rm(path\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateRmOptions(path\x2C options\x2C false\x2C (err\x2C options) => {\x0d\n    if (err) {\x0d\n      return callback(err);\x0d\n    }\x0d\n    lazyLoadRimraf();\x0d\n    return rimraf(pathModule.toNamespacedPath(path)\x2C options\x2C callback);\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes files and\x0d\n * directories (modeled on the standard POSIX `rm` utility).\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   force?: boolean;\x0d\n *   maxRetries?: number;\x0d\n *   recursive?: boolean;\x0d\n *   retryDelay?: number;\x0d\n *   }} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction rmSync(path\x2C options) {\x0d\n  path = getValidatedPath(path);\x0d\n  options = validateRmOptionsSync(path\x2C options\x2C false);\x0d\n\x0d\n  lazyLoadRimraf();\x0d\n  return rimrafSync(pathModule.toNamespacedPath(path)\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Forces all currently queued I/O operations associated\x0d\n * with the file to the operating system's synchronized\x0d\n * I/O completion state.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fdatasync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously forces all currently queued I/O operations\x0d\n * associated with the file to the operating\x0d\n * system's synchronized I/O completion state.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fdatasyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fdatasync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Requests for all data for the open file descriptor\x0d\n * to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsync(fd\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = makeCallback(callback);\x0d\n  binding.fsync(fd\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously requests for all data for the open\x0d\n * file descriptor to be flushed to the storage device.\x0d\n * @param {number} fd\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fsyncSync(fd) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = {};\x0d\n  binding.fsync(fd\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdir(path\x2C options\x2C callback) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n  } else if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                parseFileMode(mode\x2C 'mode')\x2C recursive\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   recursive?: boolean;\x0d\n *   mode?: string | number;\x0d\n *   } | number} [options]\x0d\n * @returns {string | void}\x0d\n */\x0d\nfunction mkdirSync(path\x2C options) {\x0d\n  let mode = 0o777;\x0d\n  let recursive = false;\x0d\n  if (typeof options === 'number' || typeof options === 'string') {\x0d\n    mode = options;\x0d\n  } else if (options) {\x0d\n    if (options.recursive !== undefined)\x0d\n      recursive = options.recursive;\x0d\n    if (options.mode !== undefined)\x0d\n      mode = options.mode;\x0d\n  }\x0d\n  path = getValidatedPath(path);\x0d\n  validateBoolean(recursive\x2C 'options.recursive');\x0d\n\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                               parseFileMode(mode\x2C 'mode')\x2C recursive\x2C\x0d\n                               undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  if (recursive) {\x0d\n    return result;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   files?: string[] | Buffer[] | Direct[];\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readdir(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  if (!options.withFileTypes) {\x0d\n    req.oncomplete = callback;\x0d\n  } else {\x0d\n    req.oncomplete = (err\x2C result) => {\x0d\n      if (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      getDirents(path\x2C result\x2C callback);\x0d\n    };\x0d\n  }\x0d\n  binding.readdir(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C\x0d\n                  !!options.withFileTypes\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a directory.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   encoding?: string;\x0d\n *   withFileTypes?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {string | Buffer[] | Dirent[]}\x0d\n */\x0d\nfunction readdirSync(path\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.readdir(pathModule.toNamespacedPath(path)\x2C\x0d\n                                 options.encoding\x2C !!options.withFileTypes\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return options.withFileTypes ? getDirents(path\x2C result) : result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Invokes the callback with the `fs.Stats`\x0d\n * for the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fstat(fd\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = kEmptyObject;\x0d\n  }\x0d\n  fd = getValidatedFd(fd);\x0d\n  callback = makeStatsCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.fstat(fd\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Retrieves the `fs.Stats` for the symbolic link\x0d\n * referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lstat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = kEmptyObject;\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.lstat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously gets the stats of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ bigint?: boolean; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   stats?: Stats\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction stat(path\x2C options = { bigint: false }\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = kEmptyObject;\x0d\n  }\x0d\n  callback = makeStatsCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback(options.bigint);\x0d\n  req.oncomplete = callback;\x0d\n  binding.stat(pathModule.toNamespacedPath(path)\x2C options.bigint\x2C req);\x0d\n}\x0d\n\x0d\nfunction hasNoEntryError(ctx) {\x0d\n  if (ctx.errno) {\x0d\n    const uvErr = uvErrmapGet(ctx.errno);\x0d\n    return uvErr?.[0] === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  if (ctx.error) {\x0d\n    return ctx.error.code === 'ENOENT';\x0d\n  }\x0d\n\x0d\n  return false;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the file descriptor.\x0d\n * @param {number} fd\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction fstatSync(fd\x2C options = { bigint: false }) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  const ctx = { fd };\x0d\n  const stats = binding.fstat(fd\x2C options.bigint\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats` for\x0d\n * the symbolic link referred to by the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction lstatSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.lstat(pathModule.toNamespacedPath(path)\x2C\x0d\n                              options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously retrieves the `fs.Stats`\x0d\n * for the `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   throwIfNoEntry?: boolean;\x0d\n *   }} [options]\x0d\n * @returns {Stats}\x0d\n */\x0d\nfunction statSync(path\x2C options = { bigint: false\x2C throwIfNoEntry: true }) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const stats = binding.stat(pathModule.toNamespacedPath(path)\x2C\x0d\n                             options.bigint\x2C undefined\x2C ctx);\x0d\n  if (options.throwIfNoEntry === false && hasNoEntryError(ctx)) {\x0d\n    return undefined;\x0d\n  }\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return getStatsFromBinding(stats);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   linkString?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction readlink(path\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.readlink(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously reads the contents of a symbolic link\x0d\n * referred to by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {{ encoding?: string; } | string} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction readlinkSync(path\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path\x2C 'oldPath');\x0d\n  const ctx = { path };\x0d\n  const result = binding.readlink(pathModule.toNamespacedPath(path)\x2C\x0d\n                                  options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates the link called `path` pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | null} [type_]\x0d\n * @param {(err?: Error) => any} callback_\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlink(target\x2C path\x2C type_\x2C callback_) {\x0d\n  const type = (typeof type_ === 'string' ? type_ : null);\x0d\n  const callback = makeCallback(arguments[arguments.length - 1]);\x0d\n\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  if (isWindows && type === null) {\x0d\n    let absoluteTarget;\x0d\n    try {\x0d\n      // Symlinks targets can be relative to the newly created path.\x0d\n      // Calculate absolute file name of the symlink target\x2C and check\x0d\n      // if it is a directory. Ignore resolve error to keep symlink\x0d\n      // errors consistent between platforms if invalid path is\x0d\n      // provided.\x0d\n      absoluteTarget = pathModule.resolve(path\x2C '..'\x2C target);\x0d\n    } catch {\x0d\n      // Continue regardless of error.\x0d\n    }\x0d\n    if (absoluteTarget !== undefined) {\x0d\n      stat(absoluteTarget\x2C (err\x2C stat) => {\x0d\n        const resolvedType = !err && stat.isDirectory() ? 'dir' : 'file';\x0d\n        const resolvedFlags = stringToSymlinkType(resolvedType);\x0d\n        const destination = preprocessSymlinkDestination(target\x2C\x0d\n                                                         resolvedType\x2C\x0d\n                                                         path);\x0d\n\x0d\n        const req = new FSReqCallback();\x0d\n        req.oncomplete = callback;\x0d\n        binding.symlink(destination\x2C\x0d\n                        pathModule.toNamespacedPath(path)\x2C resolvedFlags\x2C req);\x0d\n      });\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const destination = preprocessSymlinkDestination(target\x2C type\x2C path);\x0d\n\x0d\n  const flags = stringToSymlinkType(type);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.symlink(destination\x2C pathModule.toNamespacedPath(path)\x2C flags\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates the link called `path`\x0d\n * pointing to `target`.\x0d\n * @param {string | Buffer | URL} target\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | null} [type]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction symlinkSync(target\x2C path\x2C type) {\x0d\n  type = (typeof type === 'string' ? type : null);\x0d\n  if (isWindows && type === null) {\x0d\n    const absoluteTarget = pathModule.resolve(`${path}`\x2C '..'\x2C `${target}`);\x0d\n    if (statSync(absoluteTarget\x2C { throwIfNoEntry: false })?.isDirectory()) {\x0d\n      type = 'dir';\x0d\n    }\x0d\n  }\x0d\n  target = getValidatedPath(target\x2C 'target');\x0d\n  path = getValidatedPath(path);\x0d\n  const flags = stringToSymlinkType(type);\x0d\n\x0d\n  const ctx = { path: target\x2C dest: path };\x0d\n  binding.symlink(preprocessSymlinkDestination(target\x2C type\x2C path)\x2C\x0d\n                  pathModule.toNamespacedPath(path)\x2C flags\x2C undefined\x2C ctx);\x0d\n\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction link(existingPath\x2C newPath\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n\x0d\n  binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n               pathModule.toNamespacedPath(newPath)\x2C\x0d\n               req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a new link from the `existingPath`\x0d\n * to the `newPath`.\x0d\n * @param {string | Buffer | URL} existingPath\x0d\n * @param {string | Buffer | URL} newPath\x0d\n * @returns {void}\x0d\n */\x0d\nfunction linkSync(existingPath\x2C newPath) {\x0d\n  existingPath = getValidatedPath(existingPath\x2C 'existingPath');\x0d\n  newPath = getValidatedPath(newPath\x2C 'newPath');\x0d\n\x0d\n  const ctx = { path: existingPath\x2C dest: newPath };\x0d\n  const result = binding.link(pathModule.toNamespacedPath(existingPath)\x2C\x0d\n                              pathModule.toNamespacedPath(newPath)\x2C\x0d\n                              undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlink(path\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously removes a file or symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unlinkSync(path) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.unlink(pathModule.toNamespacedPath(path)\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmod(fd\x2C mode\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchmod(fd\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the permissions on the file.\x0d\n * @param {number} fd\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchmodSync(fd\x2C mode) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  const ctx = {};\x0d\n  binding.fchmod(fd\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmod(path\x2C mode\x2C callback) {\x0d\n  callback = maybeCallback(callback);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  fs.open(path\x2C O_WRONLY | O_SYMLINK\x2C (err\x2C fd) => {\x0d\n    if (err) {\x0d\n      callback(err);\x0d\n      return;\x0d\n    }\x0d\n    // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n    // but still try to close\x2C and report closing errors if they occur.\x0d\n    fs.fchmod(fd\x2C mode\x2C (err) => {\x0d\n      fs.close(fd\x2C (err2) => {\x0d\n        callback(aggregateTwoErrors(err2\x2C err));\x0d\n      });\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions on a symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchmodSync(path\x2C mode) {\x0d\n  const fd = fs.openSync(path\x2C O_WRONLY | O_SYMLINK);\x0d\n\x0d\n  // Prefer to return the chmod error\x2C if one occurs\x2C\x0d\n  // but still try to close\x2C and report closing errors if they occur.\x0d\n  let ret;\x0d\n  try {\x0d\n    ret = fs.fchmodSync(fd\x2C mode);\x0d\n  } finally {\x0d\n    fs.closeSync(fd);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmod(path\x2C mode\x2C callback) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the permissions of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | number} mode\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chmodSync(path\x2C mode) {\x0d\n  path = getValidatedPath(path);\x0d\n  mode = parseFileMode(mode\x2C 'mode');\x0d\n\x0d\n  const ctx = { path };\x0d\n  binding.chmod(pathModule.toNamespacedPath(path)\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the symbolic link.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lchownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.lchown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchown(fd\x2C uid\x2C gid\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously sets the owner of the file.\x0d\n * @param {number} fd\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction fchownSync(fd\x2C uid\x2C gid) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const ctx = {};\x0d\n  binding.fchown(fd\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chown(path\x2C uid\x2C gid\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the owner and group\x0d\n * of a file.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number} uid\x0d\n * @param {number} gid\x0d\n * @returns {void}\x0d\n */\x0d\nfunction chownSync(path\x2C uid\x2C gid) {\x0d\n  path = getValidatedPath(path);\x0d\n  validateInteger(uid\x2C 'uid'\x2C -1\x2C kMaxUserId);\x0d\n  validateInteger(gid\x2C 'gid'\x2C -1\x2C kMaxUserId);\x0d\n  const ctx = { path };\x0d\n  binding.chown(pathModule.toNamespacedPath(path)\x2C uid\x2C gid\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C\x0d\n                 toUnixTimestamp(mtime)\x2C\x0d\n                 req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by `path`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction utimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.utimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                 toUnixTimestamp(atime)\x2C toUnixTimestamp(mtime)\x2C\x0d\n                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the file system timestamps of the object\x0d\n * referenced by the supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimes(fd\x2C atime\x2C mtime\x2C callback) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the file system timestamps\x0d\n * of the object referenced by the\x0d\n * supplied `fd` (file descriptor).\x0d\n * @param {number} fd\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction futimesSync(fd\x2C atime\x2C mtime) {\x0d\n  fd = getValidatedFd(fd);\x0d\n  atime = toUnixTimestamp(atime\x2C 'atime');\x0d\n  mtime = toUnixTimestamp(mtime\x2C 'mtime');\x0d\n  const ctx = {};\x0d\n  binding.futimes(fd\x2C atime\x2C mtime\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Changes the access and modification times of\x0d\n * a file in the same way as `fs.utimes()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimes(path\x2C atime\x2C mtime\x2C callback) {\x0d\n  callback = makeCallback(callback);\x0d\n  path = getValidatedPath(path);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously changes the access and modification\x0d\n * times of a file in the same way as `fs.utimesSync()`.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {number | string | Date} atime\x0d\n * @param {number | string | Date} mtime\x0d\n * @returns {void}\x0d\n */\x0d\nfunction lutimesSync(path\x2C atime\x2C mtime) {\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  binding.lutimes(pathModule.toNamespacedPath(path)\x2C\x0d\n                  toUnixTimestamp(atime)\x2C\x0d\n                  toUnixTimestamp(mtime)\x2C\x0d\n                  undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\nfunction writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback) {\x0d\n  if (signal?.aborted) {\x0d\n    const abortError = new AbortError(undefined\x2C { cause: signal?.reason });\x0d\n    if (isUserFd) {\x0d\n      callback(abortError);\x0d\n    } else {\x0d\n      fs.close(fd\x2C (err) => {\x0d\n        callback(aggregateTwoErrors(err\x2C abortError));\x0d\n      });\x0d\n    }\x0d\n    return;\x0d\n  }\x0d\n  // write(fd\x2C buffer\x2C offset\x2C length\x2C position\x2C callback)\x0d\n  fs.write(fd\x2C buffer\x2C offset\x2C length\x2C null\x2C (writeErr\x2C written) => {\x0d\n    if (writeErr) {\x0d\n      if (isUserFd) {\x0d\n        callback(writeErr);\x0d\n      } else {\x0d\n        fs.close(fd\x2C (err) => {\x0d\n          callback(aggregateTwoErrors(err\x2C writeErr));\x0d\n        });\x0d\n      }\x0d\n    } else if (written === length) {\x0d\n      if (isUserFd) {\x0d\n        callback(null);\x0d\n      } else {\x0d\n        fs.close(fd\x2C callback);\x0d\n      }\x0d\n    } else {\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n      writeAll(fd\x2C isUserFd\x2C buffer\x2C offset\x2C length\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  if (isFd(path)) {\x0d\n    const isUserFd = true;\x0d\n    const signal = options.signal;\x0d\n    writeAll(path\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (checkAborted(options.signal\x2C callback))\x0d\n    return;\x0d\n\x0d\n  fs.open(path\x2C flag\x2C options.mode\x2C (openErr\x2C fd) => {\x0d\n    if (openErr) {\x0d\n      callback(openErr);\x0d\n    } else {\x0d\n      const isUserFd = false;\x0d\n      const signal = options.signal;\x0d\n      writeAll(fd\x2C isUserFd\x2C data\x2C 0\x2C data.byteLength\x2C signal\x2C callback);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously writes data to the file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer | TypedArray | DataView | object} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction writeFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'w' });\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    validateStringAfterArrayBufferView(data\x2C 'data');\x0d\n    data = Buffer.from(String(data)\x2C options.encoding || 'utf8');\x0d\n  }\x0d\n\x0d\n  const flag = options.flag || 'w';\x0d\n\x0d\n  const isUserFd = isFd(path); // File descriptor ownership\x0d\n  const fd = isUserFd ? path : fs.openSync(path\x2C flag\x2C options.mode);\x0d\n\x0d\n  let offset = 0;\x0d\n  let length = data.byteLength;\x0d\n  try {\x0d\n    while (length > 0) {\x0d\n      const written = fs.writeSync(fd\x2C data\x2C offset\x2C length);\x0d\n      offset += written;\x0d\n      length -= written;\x0d\n    }\x0d\n  } finally {\x0d\n    if (!isUserFd) fs.closeSync(fd);\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @param {(err?: Error) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFile(path\x2C data\x2C options\x2C callback) {\x0d\n  callback = maybeCallback(callback || options);\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFile(path\x2C data\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously appends data to a file.\x0d\n * @param {string | Buffer | URL | number} path\x0d\n * @param {string | Buffer} data\x0d\n * @param {{\x0d\n *   encoding?: string | null;\x0d\n *   mode?: number;\x0d\n *   flag?: string;\x0d\n *   } | string} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction appendFileSync(path\x2C data\x2C options) {\x0d\n  options = getOptions(options\x2C { encoding: 'utf8'\x2C mode: 0o666\x2C flag: 'a' });\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  // Force append behavior when using a supplied file descriptor\x0d\n  if (!options.flag || isFd(path))\x0d\n    options.flag = 'a';\x0d\n\x0d\n  fs.writeFileSync(path\x2C data\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Watches for the changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {string | {\x0d\n *   persistent?: boolean;\x0d\n *   recursive?: boolean;\x0d\n *   encoding?: string;\x0d\n *   signal?: AbortSignal;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   eventType?: string\x2C\x0d\n *   filename?: string | Buffer\x0d\n *   ) => any} [listener]\x0d\n * @returns {watchers.FSWatcher}\x0d\n */\x0d\nfunction watch(filename\x2C options\x2C listener) {\x0d\n  if (typeof options === 'function') {\x0d\n    listener = options;\x0d\n  }\x0d\n  options = getOptions(options);\x0d\n\x0d\n  // Don't make changes directly on options object\x0d\n  options = copyObject(options);\x0d\n\x0d\n  if (options.persistent === undefined) options.persistent = true;\x0d\n  if (options.recursive === undefined) options.recursive = false;\x0d\n  if (options.recursive && !(isOSX || isWindows))\x0d\n    throw new ERR_FEATURE_UNAVAILABLE_ON_PLATFORM('watch recursively');\x0d\n  const watcher = new watchers.FSWatcher();\x0d\n  watcher[watchers.kFSWatchStart](filename\x2C\x0d\n                                  options.persistent\x2C\x0d\n                                  options.recursive\x2C\x0d\n                                  options.encoding);\x0d\n\x0d\n  if (listener) {\x0d\n    watcher.addListener('change'\x2C listener);\x0d\n  }\x0d\n  if (options.signal) {\x0d\n    if (options.signal.aborted) {\x0d\n      process.nextTick(() => watcher.close());\x0d\n    } else {\x0d\n      const listener = () => watcher.close();\x0d\n      options.signal.addEventListener('abort'\x2C listener);\x0d\n      watcher.once('close'\x2C () => {\x0d\n        options.signal.removeEventListener('abort'\x2C listener);\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return watcher;\x0d\n}\x0d\n\x0d\n\x0d\nconst statWatchers = new SafeMap();\x0d\n\x0d\n/**\x0d\n * Watches for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {{\x0d\n *   bigint?: boolean;\x0d\n *   persistent?: boolean;\x0d\n *   interval?: number;\x0d\n *   }} [options]\x0d\n * @param {(\x0d\n *   current?: Stats\x2C\x0d\n *   previous?: Stats\x0d\n *   ) => any} listener\x0d\n * @returns {watchers.StatWatcher}\x0d\n */\x0d\nfunction watchFile(filename\x2C options\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  let stat;\x0d\n\x0d\n  if (options === null || typeof options !== 'object') {\x0d\n    listener = options;\x0d\n    options = null;\x0d\n  }\x0d\n\x0d\n  options = {\x0d\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\x0d\n    // a little on the slow side but let's stick with it for now to keep\x0d\n    // behavioral changes to a minimum.\x0d\n    interval: 5007\x2C\x0d\n    persistent: true\x2C\x0d\n    ...options\x0d\n  };\x0d\n\x0d\n  validateFunction(listener\x2C 'listener');\x0d\n\x0d\n  stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) {\x0d\n    stat = new watchers.StatWatcher(options.bigint);\x0d\n    stat[watchers.kFSStatWatcherStart](filename\x2C\x0d\n                                       options.persistent\x2C options.interval);\x0d\n    statWatchers.set(filename\x2C stat);\x0d\n  } else {\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('add');\x0d\n  }\x0d\n\x0d\n  stat.addListener('change'\x2C listener);\x0d\n  return stat;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Stops watching for changes on `filename`.\x0d\n * @param {string | Buffer | URL} filename\x0d\n * @param {() => any} [listener]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction unwatchFile(filename\x2C listener) {\x0d\n  filename = getValidatedPath(filename);\x0d\n  filename = pathModule.resolve(filename);\x0d\n  const stat = statWatchers.get(filename);\x0d\n\x0d\n  if (stat === undefined) return;\x0d\n\x0d\n  if (typeof listener === 'function') {\x0d\n    const beforeListenerCount = stat.listenerCount('change');\x0d\n    stat.removeListener('change'\x2C listener);\x0d\n    if (stat.listenerCount('change') < beforeListenerCount)\x0d\n      stat[watchers.kFSStatWatcherAddOrCleanRef]('clean');\x0d\n  } else {\x0d\n    stat.removeAllListeners('change');\x0d\n    stat[watchers.kFSStatWatcherAddOrCleanRef]('cleanAll');\x0d\n  }\x0d\n\x0d\n  if (stat.listenerCount('change') === 0) {\x0d\n    stat.stop();\x0d\n    statWatchers.delete(filename);\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nlet splitRoot;\x0d\nif (isWindows) {\x0d\n  // Regex to find the device root on Windows (e.g. 'c:\\\\')\x2C including trailing\x0d\n  // slash.\x0d\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    return SideEffectFreeRegExpPrototypeExec(splitRootRe\x2C str)[0];\x0d\n  };\x0d\n} else {\x0d\n  splitRoot = function splitRoot(str) {\x0d\n    for (let i = 0; i < str.length; ++i) {\x0d\n      if (StringPrototypeCharCodeAt(str\x2C i) !== CHAR_FORWARD_SLASH)\x0d\n        return StringPrototypeSlice(str\x2C 0\x2C i);\x0d\n    }\x0d\n    return str;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction encodeRealpathResult(result\x2C options) {\x0d\n  if (!options || !options.encoding || options.encoding === 'utf8')\x0d\n    return result;\x0d\n  const asBuffer = Buffer.from(result);\x0d\n  if (options.encoding === 'buffer') {\x0d\n    return asBuffer;\x0d\n  }\x0d\n  return asBuffer.toString(options.encoding);\x0d\n}\x0d\n\x0d\n// Finds the next portion of a (partial) path\x2C up to the next path delimiter\x0d\nlet nextPart;\x0d\nif (isWindows) {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    for (; i < p.length; ++i) {\x0d\n      const ch = StringPrototypeCharCodeAt(p\x2C i);\x0d\n\x0d\n      // Check for a separator character\x0d\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\x0d\n        return i;\x0d\n    }\x0d\n    return -1;\x0d\n  };\x0d\n} else {\x0d\n  nextPart = function nextPart(p\x2C i) {\x0d\n    return StringPrototypeIndexOf(p\x2C '/'\x2C i);\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string | null; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nfunction realpathSync(p\x2C options) {\x0d\n  options = getOptions(options);\x0d\n  p = toPathIfFileURL(p);\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const cache = options[realpathCacheKey];\x0d\n  const maybeCachedResult = cache?.get(p);\x0d\n  if (maybeCachedResult) {\x0d\n    return maybeCachedResult;\x0d\n  }\x0d\n\x0d\n  const seenLinks = new SafeMap();\x0d\n  const knownHard = new SafeSet();\x0d\n  const original = p;\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  // Skip over roots\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows) {\x0d\n    const ctx = { path: base };\x0d\n    binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n    handleErrorFromBinding(ctx);\x0d\n    knownHard.add(base);\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  // NB: p.length changes.\x0d\n  while (pos < p.length) {\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard.has(base) || cache?.get(base) === base) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        break;\x0d\n      }\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    let resolvedLink;\x0d\n    const maybeCachedResolved = cache?.get(base);\x0d\n    if (maybeCachedResolved) {\x0d\n      resolvedLink = maybeCachedResolved;\x0d\n    } else {\x0d\n      // Use stats array directly to avoid creating an fs.Stats instance just\x0d\n      // for our internal use.\x0d\n\x0d\n      const baseLong = pathModule.toNamespacedPath(base);\x0d\n      const ctx = { path: base };\x0d\n      const stats = binding.lstat(baseLong\x2C true\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n\x0d\n      if (!isFileType(stats\x2C S_IFLNK)) {\x0d\n        knownHard.add(base);\x0d\n        cache?.set(base\x2C base);\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      // Read the link if it wasn't read before\x0d\n      // dev/ino always return 0 on windows\x2C so skip the check.\x0d\n      let linkTarget = null;\x0d\n      let id;\x0d\n      if (!isWindows) {\x0d\n        const dev = BigIntPrototypeToString(stats[0]\x2C 32);\x0d\n        const ino = BigIntPrototypeToString(stats[7]\x2C 32);\x0d\n        id = `${dev}:${ino}`;\x0d\n        if (seenLinks.has(id)) {\x0d\n          linkTarget = seenLinks.get(id);\x0d\n        }\x0d\n      }\x0d\n      if (linkTarget === null) {\x0d\n        const ctx = { path: base };\x0d\n        binding.stat(baseLong\x2C false\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n        linkTarget = binding.readlink(baseLong\x2C undefined\x2C undefined\x2C ctx);\x0d\n        handleErrorFromBinding(ctx);\x0d\n      }\x0d\n      resolvedLink = pathModule.resolve(previous\x2C linkTarget);\x0d\n\x0d\n      cache?.set(base\x2C resolvedLink);\x0d\n      if (!isWindows) seenLinks.set(id\x2C linkTarget);\x0d\n    }\x0d\n\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n\x0d\n    // Skip over roots\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard.has(base)) {\x0d\n      const ctx = { path: base };\x0d\n      binding.lstat(pathModule.toNamespacedPath(base)\x2C false\x2C undefined\x2C ctx);\x0d\n      handleErrorFromBinding(ctx);\x0d\n      knownHard.add(base);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  cache?.set(original\x2C p);\x0d\n  return encodeRealpathResult(p\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns the resolved pathname.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string | Buffer}\x0d\n */\x0d\nrealpathSync.native = (path\x2C options) => {\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n  const ctx = { path };\x0d\n  const result = binding.realpath(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n};\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} p\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction realpath(p\x2C options\x2C callback) {\x0d\n  callback = typeof options === 'function' ? options : maybeCallback(callback);\x0d\n  options = getOptions(options);\x0d\n  p = toPathIfFileURL(p);\x0d\n\x0d\n  if (typeof p !== 'string') {\x0d\n    p += '';\x0d\n  }\x0d\n  validatePath(p);\x0d\n  p = pathModule.resolve(p);\x0d\n\x0d\n  const seenLinks = new SafeMap();\x0d\n  const knownHard = new SafeSet();\x0d\n\x0d\n  // Current character position in p\x0d\n  let pos;\x0d\n  // The partial path so far\x2C including a trailing slash if any\x0d\n  let current;\x0d\n  // The partial path without a trailing slash (except when pointing at a root)\x0d\n  let base;\x0d\n  // The partial path scanned in the previous round\x2C with slash\x0d\n  let previous;\x0d\n\x0d\n  current = base = splitRoot(p);\x0d\n  pos = current.length;\x0d\n\x0d\n  // On windows\x2C check that the root exists. On unix there is no need.\x0d\n  if (isWindows && !knownHard.has(base)) {\x0d\n    fs.lstat(base\x2C (err\x2C stats) => {\x0d\n      if (err) return callback(err);\x0d\n      knownHard.add(base);\x0d\n      LOOP();\x0d\n    });\x0d\n  } else {\x0d\n    process.nextTick(LOOP);\x0d\n  }\x0d\n\x0d\n  // Walk down the path\x2C swapping out linked path parts for their real\x0d\n  // values\x0d\n  function LOOP() {\x0d\n    // Stop if scanned past end of path\x0d\n    if (pos >= p.length) {\x0d\n      return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n    }\x0d\n\x0d\n    // find the next part\x0d\n    const result = nextPart(p\x2C pos);\x0d\n    previous = current;\x0d\n    if (result === -1) {\x0d\n      const last = StringPrototypeSlice(p\x2C pos);\x0d\n      current += last;\x0d\n      base = previous + last;\x0d\n      pos = p.length;\x0d\n    } else {\x0d\n      current += StringPrototypeSlice(p\x2C pos\x2C result + 1);\x0d\n      base = previous + StringPrototypeSlice(p\x2C pos\x2C result);\x0d\n      pos = result + 1;\x0d\n    }\x0d\n\x0d\n    // Continue if not a symlink\x2C break if a pipe/socket\x0d\n    if (knownHard.has(base)) {\x0d\n      if (isFileType(binding.statValues\x2C S_IFIFO) ||\x0d\n          isFileType(binding.statValues\x2C S_IFSOCK)) {\x0d\n        return callback(null\x2C encodeRealpathResult(p\x2C options));\x0d\n      }\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    return fs.lstat(base\x2C { bigint: true }\x2C gotStat);\x0d\n  }\x0d\n\x0d\n  function gotStat(err\x2C stats) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    // If not a symlink\x2C skip to the next path part\x0d\n    if (!stats.isSymbolicLink()) {\x0d\n      knownHard.add(base);\x0d\n      return process.nextTick(LOOP);\x0d\n    }\x0d\n\x0d\n    // Stat & read the link if not read before.\x0d\n    // Call `gotTarget()` as soon as the link target is known.\x0d\n    // `dev`/`ino` always return 0 on windows\x2C so skip the check.\x0d\n    let id;\x0d\n    if (!isWindows) {\x0d\n      const dev = BigIntPrototypeToString(stats.dev\x2C 32);\x0d\n      const ino = BigIntPrototypeToString(stats.ino\x2C 32);\x0d\n      id = `${dev}:${ino}`;\x0d\n      if (seenLinks.has(id)) {\x0d\n        return gotTarget(null\x2C seenLinks.get(id));\x0d\n      }\x0d\n    }\x0d\n    fs.stat(base\x2C (err) => {\x0d\n      if (err) return callback(err);\x0d\n\x0d\n      fs.readlink(base\x2C (err\x2C target) => {\x0d\n        if (!isWindows) seenLinks.set(id\x2C target);\x0d\n        gotTarget(err\x2C target);\x0d\n      });\x0d\n    });\x0d\n  }\x0d\n\x0d\n  function gotTarget(err\x2C target) {\x0d\n    if (err) return callback(err);\x0d\n\x0d\n    gotResolvedLink(pathModule.resolve(previous\x2C target));\x0d\n  }\x0d\n\x0d\n  function gotResolvedLink(resolvedLink) {\x0d\n    // Resolve the link\x2C then start over\x0d\n    p = pathModule.resolve(resolvedLink\x2C StringPrototypeSlice(p\x2C pos));\x0d\n    current = base = splitRoot(p);\x0d\n    pos = current.length;\x0d\n\x0d\n    // On windows\x2C check that the root exists. On unix there is no need.\x0d\n    if (isWindows && !knownHard.has(base)) {\x0d\n      fs.lstat(base\x2C (err) => {\x0d\n        if (err) return callback(err);\x0d\n        knownHard.add(base);\x0d\n        LOOP();\x0d\n      });\x0d\n    } else {\x0d\n      process.nextTick(LOOP);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously computes the canonical pathname by\x0d\n * resolving `.`\x2C `..` and symbolic links.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   resolvedPath?: string | Buffer\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nrealpath.native = (path\x2C options\x2C callback) => {\x0d\n  callback = makeCallback(callback || options);\x0d\n  options = getOptions(options);\x0d\n  path = getValidatedPath(path);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  return binding.realpath(pathModule.toNamespacedPath(path)\x2C options.encoding\x2C req);\x0d\n};\x0d\n\x0d\n/**\x0d\n * Creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @param {(\x0d\n *   err?: Error\x2C\x0d\n *   directory?: string\x0d\n *   ) => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction mkdtemp(prefix\x2C options\x2C callback) {\x0d\n  callback = makeCallback(typeof options === 'function' ? options : callback);\x0d\n  options = getOptions(options);\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.mkdtemp(`${prefix}XXXXXX`\x2C options.encoding\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously creates a unique temporary directory.\x0d\n * @param {string} prefix\x0d\n * @param {string | { encoding?: string; }} [options]\x0d\n * @returns {string}\x0d\n */\x0d\nfunction mkdtempSync(prefix\x2C options) {\x0d\n  options = getOptions(options);\x0d\n\x0d\n  validateString(prefix\x2C 'prefix');\x0d\n  nullCheck(prefix\x2C 'prefix');\x0d\n  warnOnNonPortableTemplate(prefix);\x0d\n  const path = `${prefix}XXXXXX`;\x0d\n  const ctx = { path };\x0d\n  const result = binding.mkdtemp(path\x2C options.encoding\x2C\x0d\n                                 undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFile(src\x2C dest\x2C mode\x2C callback) {\x0d\n  if (typeof mode === 'function') {\x0d\n    callback = mode;\x0d\n    mode = 0;\x0d\n  }\x0d\n\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  callback = makeCallback(callback);\x0d\n\x0d\n  const req = new FSReqCallback();\x0d\n  req.oncomplete = callback;\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C req);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. By\x0d\n * default\x2C `dest` is overwritten if it already exists.\x0d\n * @param {string | Buffer | URL} src\x0d\n * @param {string | Buffer | URL} dest\x0d\n * @param {number} [mode]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction copyFileSync(src\x2C dest\x2C mode) {\x0d\n  src = getValidatedPath(src\x2C 'src');\x0d\n  dest = getValidatedPath(dest\x2C 'dest');\x0d\n\x0d\n  const ctx = { path: src\x2C dest };  // non-prefixed\x0d\n\x0d\n  src = pathModule._makeLong(src);\x0d\n  dest = pathModule._makeLong(dest);\x0d\n  mode = getValidMode(mode\x2C 'copyFile');\x0d\n  binding.copyFile(src\x2C dest\x2C mode\x2C undefined\x2C ctx);\x0d\n  handleErrorFromBinding(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Asynchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @param {() => any} callback\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cp(src\x2C dest\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  callback = makeCallback(callback);\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpFn(src\x2C dest\x2C options\x2C callback);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Synchronously copies `src` to `dest`. `src` can be a file\x2C directory\x2C or\x0d\n * symlink. The contents of directories will be copied recursively.\x0d\n * @param {string | URL} src\x0d\n * @param {string | URL} dest\x0d\n * @param {object} [options]\x0d\n * @returns {void}\x0d\n */\x0d\nfunction cpSync(src\x2C dest\x2C options) {\x0d\n  options = validateCpOptions(options);\x0d\n  src = pathModule.toNamespacedPath(getValidatedPath(src\x2C 'src'));\x0d\n  dest = pathModule.toNamespacedPath(getValidatedPath(dest\x2C 'dest'));\x0d\n  lazyLoadCp();\x0d\n  cpSyncFn(src\x2C dest\x2C options);\x0d\n}\x0d\n\x0d\nfunction lazyLoadStreams() {\x0d\n  if (!ReadStream) {\x0d\n    ({ ReadStream\x2C WriteStream } = require('internal/fs/streams'));\x0d\n    FileReadStream = ReadStream;\x0d\n    FileWriteStream = WriteStream;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a readable stream with a default `highWaterMark`\x0d\n * of 64 KiB.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   end?: number;\x0d\n *   highWaterMark?: number;\x0d\n *   fs?: object | null;\x0d\n *   }} [options]\x0d\n * @returns {ReadStream}\x0d\n */\x0d\nfunction createReadStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new ReadStream(path\x2C options);\x0d\n}\x0d\n\x0d\n/**\x0d\n * Creates a write stream.\x0d\n * @param {string | Buffer | URL} path\x0d\n * @param {string | {\x0d\n *   flags?: string;\x0d\n *   encoding?: string;\x0d\n *   fd?: number | FileHandle;\x0d\n *   mode?: number;\x0d\n *   autoClose?: boolean;\x0d\n *   emitClose?: boolean;\x0d\n *   start: number;\x0d\n *   fs?: object | null;\x0d\n *   }} [options]\x0d\n * @returns {WriteStream}\x0d\n */\x0d\nfunction createWriteStream(path\x2C options) {\x0d\n  lazyLoadStreams();\x0d\n  return new WriteStream(path\x2C options);\x0d\n}\x0d\n\x0d\nmodule.exports = fs = {\x0d\n  appendFile\x2C\x0d\n  appendFileSync\x2C\x0d\n  access\x2C\x0d\n  accessSync\x2C\x0d\n  chown\x2C\x0d\n  chownSync\x2C\x0d\n  chmod\x2C\x0d\n  chmodSync\x2C\x0d\n  close\x2C\x0d\n  closeSync\x2C\x0d\n  copyFile\x2C\x0d\n  copyFileSync\x2C\x0d\n  cp\x2C\x0d\n  cpSync\x2C\x0d\n  createReadStream\x2C\x0d\n  createWriteStream\x2C\x0d\n  exists\x2C\x0d\n  existsSync\x2C\x0d\n  fchown\x2C\x0d\n  fchownSync\x2C\x0d\n  fchmod\x2C\x0d\n  fchmodSync\x2C\x0d\n  fdatasync\x2C\x0d\n  fdatasyncSync\x2C\x0d\n  fstat\x2C\x0d\n  fstatSync\x2C\x0d\n  fsync\x2C\x0d\n  fsyncSync\x2C\x0d\n  ftruncate\x2C\x0d\n  ftruncateSync\x2C\x0d\n  futimes\x2C\x0d\n  futimesSync\x2C\x0d\n  lchown\x2C\x0d\n  lchownSync\x2C\x0d\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined\x2C\x0d\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined\x2C\x0d\n  link\x2C\x0d\n  linkSync\x2C\x0d\n  lstat\x2C\x0d\n  lstatSync\x2C\x0d\n  lutimes\x2C\x0d\n  lutimesSync\x2C\x0d\n  mkdir\x2C\x0d\n  mkdirSync\x2C\x0d\n  mkdtemp\x2C\x0d\n  mkdtempSync\x2C\x0d\n  open\x2C\x0d\n  openSync\x2C\x0d\n  opendir\x2C\x0d\n  opendirSync\x2C\x0d\n  readdir\x2C\x0d\n  readdirSync\x2C\x0d\n  read\x2C\x0d\n  readSync\x2C\x0d\n  readv\x2C\x0d\n  readvSync\x2C\x0d\n  readFile\x2C\x0d\n  readFileSync\x2C\x0d\n  readlink\x2C\x0d\n  readlinkSync\x2C\x0d\n  realpath\x2C\x0d\n  realpathSync\x2C\x0d\n  rename\x2C\x0d\n  renameSync\x2C\x0d\n  rm\x2C\x0d\n  rmSync\x2C\x0d\n  rmdir\x2C\x0d\n  rmdirSync\x2C\x0d\n  stat\x2C\x0d\n  statSync\x2C\x0d\n  symlink\x2C\x0d\n  symlinkSync\x2C\x0d\n  truncate\x2C\x0d\n  truncateSync\x2C\x0d\n  unwatchFile\x2C\x0d\n  unlink\x2C\x0d\n  unlinkSync\x2C\x0d\n  utimes\x2C\x0d\n  utimesSync\x2C\x0d\n  watch\x2C\x0d\n  watchFile\x2C\x0d\n  writeFile\x2C\x0d\n  writeFileSync\x2C\x0d\n  write\x2C\x0d\n  writeSync\x2C\x0d\n  writev\x2C\x0d\n  writevSync\x2C\x0d\n  Dir\x2C\x0d\n  Dirent\x2C\x0d\n  Stats\x2C\x0d\n\x0d\n  get ReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return ReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set ReadStream(val) {\x0d\n    ReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get WriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return WriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set WriteStream(val) {\x0d\n    WriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // Legacy names... these have to be separate because of how graceful-fs\x0d\n  // (and possibly other) modules monkey patch the values.\x0d\n  get FileReadStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileReadStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileReadStream(val) {\x0d\n    FileReadStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  get FileWriteStream() {\x0d\n    lazyLoadStreams();\x0d\n    return FileWriteStream;\x0d\n  }\x2C\x0d\n\x0d\n  set FileWriteStream(val) {\x0d\n    FileWriteStream = val;\x0d\n  }\x2C\x0d\n\x0d\n  // For tests\x0d\n  _toUnixTimestamp: toUnixTimestamp\x0d\n};\x0d\n\x0d\nObjectDefineProperties(fs\x2C {\x0d\n  F_OK: { __proto__: null\x2C enumerable: true\x2C value: F_OK || 0 }\x2C\x0d\n  R_OK: { __proto__: null\x2C enumerable: true\x2C value: R_OK || 0 }\x2C\x0d\n  W_OK: { __proto__: null\x2C enumerable: true\x2C value: W_OK || 0 }\x2C\x0d\n  X_OK: { __proto__: null\x2C enumerable: true\x2C value: X_OK || 0 }\x2C\x0d\n  constants: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n  promises: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() {\x0d\n      promises ??= require('internal/fs/promises').exports;\x0d\n      return promises;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x2ade89cc9fe
code-creation,LazyCompile,10,421875,0x2ade89d3256,135,getOptions node:internal/fs/utils:318:20,0x6414ea2250,~
script-source,84,node:internal/fs/utils,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  BigInt\x2C\x0d\n  Date\x2C\x0d\n  DateNow\x2C\x0d\n  DatePrototypeGetTime\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Number\x2C\x0d\n  NumberIsFinite\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  MathMin\x2C\x0d\n  ObjectIs\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  Symbol\x2C\x0d\n  TypedArrayPrototypeIncludes\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_FS_EISDIR\x2C\x0d\n    ERR_FS_INVALID_SYMLINK_TYPE\x2C\x0d\n    ERR_INCOMPATIBLE_OPTION_PAIR\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x0d\n  }\x2C\x0d\n  hideStackFrames\x2C\x0d\n  uvException\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x2C\x0d\n  isDate\x2C\x0d\n  isBigUint64Array\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  kEmptyObject\x2C\x0d\n  once\x2C\x0d\n} = require('internal/util');\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst {\x0d\n  validateAbortSignal\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\nconst pathModule = require('path');\x0d\nconst kType = Symbol('type');\x0d\nconst kStats = Symbol('stats');\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst {\x0d\n  fs: {\x0d\n    F_OK = 0\x2C\x0d\n    W_OK = 0\x2C\x0d\n    R_OK = 0\x2C\x0d\n    X_OK = 0\x2C\x0d\n    COPYFILE_EXCL\x2C\x0d\n    COPYFILE_FICLONE\x2C\x0d\n    COPYFILE_FICLONE_FORCE\x2C\x0d\n    O_APPEND\x2C\x0d\n    O_CREAT\x2C\x0d\n    O_EXCL\x2C\x0d\n    O_RDONLY\x2C\x0d\n    O_RDWR\x2C\x0d\n    O_SYNC\x2C\x0d\n    O_TRUNC\x2C\x0d\n    O_WRONLY\x2C\x0d\n    S_IFBLK\x2C\x0d\n    S_IFCHR\x2C\x0d\n    S_IFDIR\x2C\x0d\n    S_IFIFO\x2C\x0d\n    S_IFLNK\x2C\x0d\n    S_IFMT\x2C\x0d\n    S_IFREG\x2C\x0d\n    S_IFSOCK\x2C\x0d\n    UV_FS_SYMLINK_DIR\x2C\x0d\n    UV_FS_SYMLINK_JUNCTION\x2C\x0d\n    UV_DIRENT_UNKNOWN\x2C\x0d\n    UV_DIRENT_FILE\x2C\x0d\n    UV_DIRENT_DIR\x2C\x0d\n    UV_DIRENT_LINK\x2C\x0d\n    UV_DIRENT_FIFO\x2C\x0d\n    UV_DIRENT_SOCKET\x2C\x0d\n    UV_DIRENT_CHAR\x2C\x0d\n    UV_DIRENT_BLOCK\x0d\n  }\x2C\x0d\n  os: {\x0d\n    errno: {\x0d\n      EISDIR\x0d\n    }\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\n// The access modes can be any of F_OK\x2C R_OK\x2C W_OK or X_OK. Some might not be\x0d\n// available on specific systems. They can be used in combination as well\x0d\n// (F_OK | R_OK | W_OK | X_OK).\x0d\nconst kMinimumAccessMode = MathMin(F_OK\x2C W_OK\x2C R_OK\x2C X_OK);\x0d\nconst kMaximumAccessMode = F_OK | W_OK | R_OK | X_OK;\x0d\n\x0d\nconst kDefaultCopyMode = 0;\x0d\n// The copy modes can be any of COPYFILE_EXCL\x2C COPYFILE_FICLONE or\x0d\n// COPYFILE_FICLONE_FORCE. They can be used in combination as well\x0d\n// (COPYFILE_EXCL | COPYFILE_FICLONE | COPYFILE_FICLONE_FORCE).\x0d\nconst kMinimumCopyMode = MathMin(\x0d\n  kDefaultCopyMode\x2C\x0d\n  COPYFILE_EXCL\x2C\x0d\n  COPYFILE_FICLONE\x2C\x0d\n  COPYFILE_FICLONE_FORCE\x0d\n);\x0d\nconst kMaximumCopyMode = COPYFILE_EXCL |\x0d\n                         COPYFILE_FICLONE |\x0d\n                         COPYFILE_FICLONE_FORCE;\x0d\n\x0d\n// Most platforms don't allow reads or writes >= 2 GiB.\x0d\n// See https://github.com/libuv/libuv/pull/1501.\x0d\nconst kIoMaxLength = 2 ** 31 - 1;\x0d\n\x0d\n// Use 64kb in case the file type is not a regular file and thus do not know the\x0d\n// actual file size. Increasing the value further results in more frequent over\x0d\n// allocation for small files and consumes CPU time and memory that should be\x0d\n// used else wise.\x0d\n// Use up to 512kb per read otherwise to partition reading big files to prevent\x0d\n// blocking other threads in case the available threads are all in use.\x0d\nconst kReadFileUnknownBufferLength = 64 * 1024;\x0d\nconst kReadFileBufferLength = 512 * 1024;\x0d\n\x0d\nconst kWriteFileMaxChunkSize = 512 * 1024;\x0d\n\x0d\nconst kMaxUserId = 2 ** 32 - 1;\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nlet fs;\x0d\nfunction lazyLoadFs() {\x0d\n  if (!fs) {\x0d\n    fs = require('fs');\x0d\n  }\x0d\n  return fs;\x0d\n}\x0d\n\x0d\nfunction assertEncoding(encoding) {\x0d\n  if (encoding && !Buffer.isEncoding(encoding)) {\x0d\n    const reason = 'is invalid encoding';\x0d\n    throw new ERR_INVALID_ARG_VALUE(encoding\x2C 'encoding'\x2C reason);\x0d\n  }\x0d\n}\x0d\n\x0d\nclass Dirent {\x0d\n  constructor(name\x2C type) {\x0d\n    this.name = name;\x0d\n    this[kType] = type;\x0d\n  }\x0d\n\x0d\n  isDirectory() {\x0d\n    return this[kType] === UV_DIRENT_DIR;\x0d\n  }\x0d\n\x0d\n  isFile() {\x0d\n    return this[kType] === UV_DIRENT_FILE;\x0d\n  }\x0d\n\x0d\n  isBlockDevice() {\x0d\n    return this[kType] === UV_DIRENT_BLOCK;\x0d\n  }\x0d\n\x0d\n  isCharacterDevice() {\x0d\n    return this[kType] === UV_DIRENT_CHAR;\x0d\n  }\x0d\n\x0d\n  isSymbolicLink() {\x0d\n    return this[kType] === UV_DIRENT_LINK;\x0d\n  }\x0d\n\x0d\n  isFIFO() {\x0d\n    return this[kType] === UV_DIRENT_FIFO;\x0d\n  }\x0d\n\x0d\n  isSocket() {\x0d\n    return this[kType] === UV_DIRENT_SOCKET;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass DirentFromStats extends Dirent {\x0d\n  constructor(name\x2C stats) {\x0d\n    super(name\x2C null);\x0d\n    this[kStats] = stats;\x0d\n  }\x0d\n}\x0d\n\x0d\nfor (const name of ReflectOwnKeys(Dirent.prototype)) {\x0d\n  if (name === 'constructor') {\x0d\n    continue;\x0d\n  }\x0d\n  DirentFromStats.prototype[name] = function() {\x0d\n    return this[kStats][name]();\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction copyObject(source) {\x0d\n  const target = {};\x0d\n  for (const key in source)\x0d\n    target[key] = source[key];\x0d\n  return target;\x0d\n}\x0d\n\x0d\nconst bufferSep = Buffer.from(pathModule.sep);\x0d\n\x0d\nfunction join(path\x2C name) {\x0d\n  if ((typeof path === 'string' || isUint8Array(path)) &&\x0d\n      name === undefined) {\x0d\n    return path;\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && isUint8Array(name)) {\x0d\n    const pathBuffer = Buffer.from(pathModule.join(path\x2C pathModule.sep));\x0d\n    return Buffer.concat([pathBuffer\x2C name]);\x0d\n  }\x0d\n\x0d\n  if (typeof path === 'string' && typeof name === 'string') {\x0d\n    return pathModule.join(path\x2C name);\x0d\n  }\x0d\n\x0d\n  if (isUint8Array(path) && isUint8Array(name)) {\x0d\n    return Buffer.concat([path\x2C bufferSep\x2C name]);\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'path'\x2C ['string'\x2C 'Buffer']\x2C path);\x0d\n}\x0d\n\x0d\nfunction getDirents(path\x2C { 0: names\x2C 1: types }\x2C callback) {\x0d\n  let i;\x0d\n  if (typeof callback === 'function') {\x0d\n    const len = names.length;\x0d\n    let toFinish = 0;\x0d\n    callback = once(callback);\x0d\n    for (i = 0; i < len; i++) {\x0d\n      const type = types[i];\x0d\n      if (type === UV_DIRENT_UNKNOWN) {\x0d\n        const name = names[i];\x0d\n        const idx = i;\x0d\n        toFinish++;\x0d\n        let filepath;\x0d\n        try {\x0d\n          filepath = join(path\x2C name);\x0d\n        } catch (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n          if (err) {\x0d\n            callback(err);\x0d\n            return;\x0d\n          }\x0d\n          names[idx] = new DirentFromStats(name\x2C stats);\x0d\n          if (--toFinish === 0) {\x0d\n            callback(null\x2C names);\x0d\n          }\x0d\n        });\x0d\n      } else {\x0d\n        names[i] = new Dirent(names[i]\x2C types[i]);\x0d\n      }\x0d\n    }\x0d\n    if (toFinish === 0) {\x0d\n      callback(null\x2C names);\x0d\n    }\x0d\n  } else {\x0d\n    const len = names.length;\x0d\n    for (i = 0; i < len; i++) {\x0d\n      names[i] = getDirent(path\x2C names[i]\x2C types[i]);\x0d\n    }\x0d\n    return names;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getDirent(path\x2C name\x2C type\x2C callback) {\x0d\n  if (typeof callback === 'function') {\x0d\n    if (type === UV_DIRENT_UNKNOWN) {\x0d\n      let filepath;\x0d\n      try {\x0d\n        filepath = join(path\x2C name);\x0d\n      } catch (err) {\x0d\n        callback(err);\x0d\n        return;\x0d\n      }\x0d\n      lazyLoadFs().lstat(filepath\x2C (err\x2C stats) => {\x0d\n        if (err) {\x0d\n          callback(err);\x0d\n          return;\x0d\n        }\x0d\n        callback(null\x2C new DirentFromStats(name\x2C stats));\x0d\n      });\x0d\n    } else {\x0d\n      callback(null\x2C new Dirent(name\x2C type));\x0d\n    }\x0d\n  } else if (type === UV_DIRENT_UNKNOWN) {\x0d\n    const stats = lazyLoadFs().lstatSync(join(path\x2C name));\x0d\n    return new DirentFromStats(name\x2C stats);\x0d\n  } else {\x0d\n    return new Dirent(name\x2C type);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getOptions(options\x2C defaultOptions = kEmptyObject) {\x0d\n  if (options == null || typeof options === 'function') {\x0d\n    return defaultOptions;\x0d\n  }\x0d\n\x0d\n  if (typeof options === 'string') {\x0d\n    defaultOptions = { ...defaultOptions };\x0d\n    defaultOptions.encoding = options;\x0d\n    options = defaultOptions;\x0d\n  } else if (typeof options !== 'object') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options'\x2C ['string'\x2C 'Object']\x2C options);\x0d\n  }\x0d\n\x0d\n  if (options.encoding !== 'buffer')\x0d\n    assertEncoding(options.encoding);\x0d\n\x0d\n  if (options.signal !== undefined) {\x0d\n    validateAbortSignal(options.signal\x2C 'options.signal');\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {InternalFSBinding.FSSyncContext} ctx\x0d\n */\x0d\nfunction handleErrorFromBinding(ctx) {\x0d\n  if (ctx.errno !== undefined) {  // libuv error numbers\x0d\n    const err = uvException(ctx);\x0d\n    ErrorCaptureStackTrace(err\x2C handleErrorFromBinding);\x0d\n    throw err;\x0d\n  }\x0d\n  if (ctx.error !== undefined) {  // Errors created in C++ land.\x0d\n    // TODO(joyeecheung): currently\x2C ctx.error are encoding errors\x0d\n    // usually caused by memory problems. We need to figure out proper error\x0d\n    // code(s) for this.\x0d\n    ErrorCaptureStackTrace(ctx.error\x2C handleErrorFromBinding);\x0d\n    throw ctx.error;\x0d\n  }\x0d\n}\x0d\n\x0d\n// Check if the path contains null types if it is a string nor Uint8Array\x2C\x0d\n// otherwise return silently.\x0d\nconst nullCheck = hideStackFrames((path\x2C propName\x2C throwError = true) => {\x0d\n  const pathIsString = typeof path === 'string';\x0d\n  const pathIsUint8Array = isUint8Array(path);\x0d\n\x0d\n  // We can only perform meaningful checks on strings and Uint8Arrays.\x0d\n  if ((!pathIsString && !pathIsUint8Array) ||\x0d\n      (pathIsString && !StringPrototypeIncludes(path\x2C '\\u0000')) ||\x0d\n      (pathIsUint8Array && !TypedArrayPrototypeIncludes(path\x2C 0))) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const err = new ERR_INVALID_ARG_VALUE(\x0d\n    propName\x2C\x0d\n    path\x2C\x0d\n    'must be a string or Uint8Array without null bytes'\x0d\n  );\x0d\n  if (throwError) {\x0d\n    throw err;\x0d\n  }\x0d\n  return err;\x0d\n});\x0d\n\x0d\nfunction preprocessSymlinkDestination(path\x2C type\x2C linkPath) {\x0d\n  if (!isWindows) {\x0d\n    // No preprocessing is needed on Unix.\x0d\n    return path;\x0d\n  }\x0d\n  path = '' + path;\x0d\n  if (type === 'junction') {\x0d\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\x0d\n    // A relative target is relative to the link's parent directory.\x0d\n    path = pathModule.resolve(linkPath\x2C '..'\x2C path);\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  if (pathModule.isAbsolute(path)) {\x0d\n    // If the path is absolute\x2C use the \\\\?\\-prefix to enable long filenames\x0d\n    return pathModule.toNamespacedPath(path);\x0d\n  }\x0d\n  // Windows symlinks don't tolerate forward slashes.\x0d\n  return RegExpPrototypeSymbolReplace(/\\//g\x2C path\x2C '\\\\');\x0d\n}\x0d\n\x0d\n// Constructor for file stats.\x0d\nfunction StatsBase(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                   ino\x2C size\x2C blocks) {\x0d\n  this.dev = dev;\x0d\n  this.mode = mode;\x0d\n  this.nlink = nlink;\x0d\n  this.uid = uid;\x0d\n  this.gid = gid;\x0d\n  this.rdev = rdev;\x0d\n  this.blksize = blksize;\x0d\n  this.ino = ino;\x0d\n  this.size = size;\x0d\n  this.blocks = blocks;\x0d\n}\x0d\n\x0d\nStatsBase.prototype.isDirectory = function() {\x0d\n  return this._checkModeProperty(S_IFDIR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFile = function() {\x0d\n  return this._checkModeProperty(S_IFREG);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isBlockDevice = function() {\x0d\n  return this._checkModeProperty(S_IFBLK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isCharacterDevice = function() {\x0d\n  return this._checkModeProperty(S_IFCHR);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSymbolicLink = function() {\x0d\n  return this._checkModeProperty(S_IFLNK);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isFIFO = function() {\x0d\n  return this._checkModeProperty(S_IFIFO);\x0d\n};\x0d\n\x0d\nStatsBase.prototype.isSocket = function() {\x0d\n  return this._checkModeProperty(S_IFSOCK);\x0d\n};\x0d\n\x0d\nconst kNsPerMsBigInt = 10n ** 6n;\x0d\nconst kNsPerSecBigInt = 10n ** 9n;\x0d\nconst kMsPerSec = 10 ** 3;\x0d\nconst kNsPerMs = 10 ** 6;\x0d\nfunction msFromTimeSpec(sec\x2C nsec) {\x0d\n  return sec * kMsPerSec + nsec / kNsPerMs;\x0d\n}\x0d\n\x0d\nfunction nsFromTimeSpecBigInt(sec\x2C nsec) {\x0d\n  return sec * kNsPerSecBigInt + nsec;\x0d\n}\x0d\n\x0d\n// The Date constructor performs Math.floor() to the timestamp.\x0d\n// https://www.ecma-international.org/ecma-262/#sec-timeclip\x0d\n// Since there may be a precision loss when the timestamp is\x0d\n// converted to a floating point number\x2C we manually round\x0d\n// the timestamp here before passing it to Date().\x0d\n// Refs: https://github.com/nodejs/node/pull/12607\x0d\nfunction dateFromMs(ms) {\x0d\n  return new Date(Number(ms) + 0.5);\x0d\n}\x0d\n\x0d\nfunction BigIntStats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                     ino\x2C size\x2C blocks\x2C\x0d\n                     atimeNs\x2C mtimeNs\x2C ctimeNs\x2C birthtimeNs) {\x0d\n  ReflectApply(StatsBase\x2C this\x2C [dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n                                 ino\x2C size\x2C blocks]);\x0d\n\x0d\n  this.atimeMs = atimeNs / kNsPerMsBigInt;\x0d\n  this.mtimeMs = mtimeNs / kNsPerMsBigInt;\x0d\n  this.ctimeMs = ctimeNs / kNsPerMsBigInt;\x0d\n  this.birthtimeMs = birthtimeNs / kNsPerMsBigInt;\x0d\n  this.atimeNs = atimeNs;\x0d\n  this.mtimeNs = mtimeNs;\x0d\n  this.ctimeNs = ctimeNs;\x0d\n  this.birthtimeNs = birthtimeNs;\x0d\n  this.atime = dateFromMs(this.atimeMs);\x0d\n  this.mtime = dateFromMs(this.mtimeMs);\x0d\n  this.ctime = dateFromMs(this.ctimeMs);\x0d\n  this.birthtime = dateFromMs(this.birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(BigIntStats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(BigIntStats\x2C StatsBase);\x0d\n\x0d\nBigIntStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & BigInt(S_IFMT)) === BigInt(property);\x0d\n};\x0d\n\x0d\nfunction Stats(dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C blksize\x2C\x0d\n               ino\x2C size\x2C blocks\x2C\x0d\n               atimeMs\x2C mtimeMs\x2C ctimeMs\x2C birthtimeMs) {\x0d\n  FunctionPrototypeCall(StatsBase\x2C this\x2C dev\x2C mode\x2C nlink\x2C uid\x2C gid\x2C rdev\x2C\x0d\n                        blksize\x2C ino\x2C size\x2C blocks);\x0d\n  this.atimeMs = atimeMs;\x0d\n  this.mtimeMs = mtimeMs;\x0d\n  this.ctimeMs = ctimeMs;\x0d\n  this.birthtimeMs = birthtimeMs;\x0d\n  this.atime = dateFromMs(atimeMs);\x0d\n  this.mtime = dateFromMs(mtimeMs);\x0d\n  this.ctime = dateFromMs(ctimeMs);\x0d\n  this.birthtime = dateFromMs(birthtimeMs);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Stats.prototype\x2C StatsBase.prototype);\x0d\nObjectSetPrototypeOf(Stats\x2C StatsBase);\x0d\n\x0d\n// HACK: Workaround for https://github.com/standard-things/esm/issues/821.\x0d\n// TODO(ronag): Remove this as soon as `esm` publishes a fixed version.\x0d\nStats.prototype.isFile = StatsBase.prototype.isFile;\x0d\n\x0d\nStats.prototype._checkModeProperty = function(property) {\x0d\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\x0d\n    property === S_IFSOCK)) {\x0d\n    return false;  // Some types are not available on Windows\x0d\n  }\x0d\n  return (this.mode & S_IFMT) === property;\x0d\n};\x0d\n\x0d\n/**\x0d\n * @param {Float64Array | BigUint64Array} stats\x0d\n * @param {number} offset\x0d\n * @returns {BigIntStats | Stats}\x0d\n */\x0d\nfunction getStatsFromBinding(stats\x2C offset = 0) {\x0d\n  if (isBigUint64Array(stats)) {\x0d\n    return new BigIntStats(\x0d\n      stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n      stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n      stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n      stats[9 + offset]\x2C\x0d\n      nsFromTimeSpecBigInt(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n      nsFromTimeSpecBigInt(stats[16 + offset]\x2C stats[17 + offset])\x0d\n    );\x0d\n  }\x0d\n  return new Stats(\x0d\n    stats[0 + offset]\x2C stats[1 + offset]\x2C stats[2 + offset]\x2C\x0d\n    stats[3 + offset]\x2C stats[4 + offset]\x2C stats[5 + offset]\x2C\x0d\n    stats[6 + offset]\x2C stats[7 + offset]\x2C stats[8 + offset]\x2C\x0d\n    stats[9 + offset]\x2C\x0d\n    msFromTimeSpec(stats[10 + offset]\x2C stats[11 + offset])\x2C\x0d\n    msFromTimeSpec(stats[12 + offset]\x2C stats[13 + offset])\x2C\x0d\n    msFromTimeSpec(stats[14 + offset]\x2C stats[15 + offset])\x2C\x0d\n    msFromTimeSpec(stats[16 + offset]\x2C stats[17 + offset])\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction stringToFlags(flags\x2C name = 'flags') {\x0d\n  if (typeof flags === 'number') {\x0d\n    validateInt32(flags\x2C name);\x0d\n    return flags;\x0d\n  }\x0d\n\x0d\n  if (flags == null) {\x0d\n    return O_RDONLY;\x0d\n  }\x0d\n\x0d\n  switch (flags) {\x0d\n    case 'r' : return O_RDONLY;\x0d\n    case 'rs' : // Fall through.\x0d\n    case 'sr' : return O_RDONLY | O_SYNC;\x0d\n    case 'r+' : return O_RDWR;\x0d\n    case 'rs+' : // Fall through.\x0d\n    case 'sr+' : return O_RDWR | O_SYNC;\x0d\n\x0d\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\x0d\n    case 'wx' : // Fall through.\x0d\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\x0d\n\x0d\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\x0d\n    case 'wx+': // Fall through.\x0d\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\x0d\n\x0d\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\x0d\n    case 'ax' : // Fall through.\x0d\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\x0d\n    case 'as' : // Fall through.\x0d\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\x0d\n\x0d\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\x0d\n    case 'ax+': // Fall through.\x0d\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\x0d\n    case 'as+': // Fall through.\x0d\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE('flags'\x2C flags);\x0d\n}\x0d\n\x0d\nconst stringToSymlinkType = hideStackFrames((type) => {\x0d\n  let flags = 0;\x0d\n  if (typeof type === 'string') {\x0d\n    switch (type) {\x0d\n      case 'dir':\x0d\n        flags |= UV_FS_SYMLINK_DIR;\x0d\n        break;\x0d\n      case 'junction':\x0d\n        flags |= UV_FS_SYMLINK_JUNCTION;\x0d\n        break;\x0d\n      case 'file':\x0d\n        break;\x0d\n      default:\x0d\n        throw new ERR_FS_INVALID_SYMLINK_TYPE(type);\x0d\n    }\x0d\n  }\x0d\n  return flags;\x0d\n});\x0d\n\x0d\n// converts Date or number to a fractional UNIX timestamp\x0d\nfunction toUnixTimestamp(time\x2C name = 'time') {\x0d\n  // eslint-disable-next-line eqeqeq\x0d\n  if (typeof time === 'string' && +time == time) {\x0d\n    return +time;\x0d\n  }\x0d\n  if (NumberIsFinite(time)) {\x0d\n    if (time < 0) {\x0d\n      return DateNow() / 1000;\x0d\n    }\x0d\n    return time;\x0d\n  }\x0d\n  if (isDate(time)) {\x0d\n    // Convert to 123.456 UNIX timestamp\x0d\n    return DatePrototypeGetTime(time) / 1000;\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE(name\x2C ['Date'\x2C 'Time in seconds']\x2C time);\x0d\n}\x0d\n\x0d\nconst validateOffsetLengthRead = hideStackFrames(\x0d\n  (offset\x2C length\x2C bufferLength) => {\x0d\n    if (offset < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C '>= 0'\x2C offset);\x0d\n    }\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n    if (offset + length > bufferLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C\x0d\n                                 `<= ${bufferLength - offset}`\x2C length);\x0d\n    }\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validateOffsetLengthWrite = hideStackFrames(\x0d\n  (offset\x2C length\x2C byteLength) => {\x0d\n    if (offset > byteLength) {\x0d\n      throw new ERR_OUT_OF_RANGE('offset'\x2C `<= ${byteLength}`\x2C offset);\x0d\n    }\x0d\n\x0d\n    if (length > byteLength - offset) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C `<= ${byteLength - offset}`\x2C length);\x0d\n    }\x0d\n\x0d\n    if (length < 0) {\x0d\n      throw new ERR_OUT_OF_RANGE('length'\x2C '>= 0'\x2C length);\x0d\n    }\x0d\n\x0d\n    validateInt32(length\x2C 'length'\x2C 0);\x0d\n  }\x0d\n);\x0d\n\x0d\nconst validatePath = hideStackFrames((path\x2C propName = 'path') => {\x0d\n  if (typeof path !== 'string' && !isUint8Array(path)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C ['string'\x2C 'Buffer'\x2C 'URL']\x2C path);\x0d\n  }\x0d\n\x0d\n  const err = nullCheck(path\x2C propName\x2C false);\x0d\n\x0d\n  if (err !== undefined) {\x0d\n    throw err;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst getValidatedPath = hideStackFrames((fileURLOrPath\x2C propName = 'path') => {\x0d\n  const path = toPathIfFileURL(fileURLOrPath);\x0d\n  validatePath(path\x2C propName);\x0d\n  return path;\x0d\n});\x0d\n\x0d\nconst getValidatedFd = hideStackFrames((fd\x2C propName = 'fd') => {\x0d\n  if (ObjectIs(fd\x2C -0)) {\x0d\n    return 0;\x0d\n  }\x0d\n\x0d\n  validateInt32(fd\x2C propName\x2C 0);\x0d\n\x0d\n  return fd;\x0d\n});\x0d\n\x0d\nconst validateBufferArray = hideStackFrames((buffers\x2C propName = 'buffers') => {\x0d\n  if (!ArrayIsArray(buffers))\x0d\n    throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n\x0d\n  for (let i = 0; i < buffers.length; i++) {\x0d\n    if (!isArrayBufferView(buffers[i]))\x0d\n      throw new ERR_INVALID_ARG_TYPE(propName\x2C 'ArrayBufferView[]'\x2C buffers);\x0d\n  }\x0d\n\x0d\n  return buffers;\x0d\n});\x0d\n\x0d\nlet nonPortableTemplateWarn = true;\x0d\n\x0d\nfunction warnOnNonPortableTemplate(template) {\x0d\n  // Template strings passed to the mkdtemp() family of functions should not\x0d\n  // end with 'X' because they are handled inconsistently across platforms.\x0d\n  if (nonPortableTemplateWarn && StringPrototypeEndsWith(template\x2C 'X')) {\x0d\n    process.emitWarning('mkdtemp() templates ending with X are not portable. ' +\x0d\n                        'For details see: https://nodejs.org/api/fs.html');\x0d\n    nonPortableTemplateWarn = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst defaultCpOptions = {\x0d\n  dereference: false\x2C\x0d\n  errorOnExist: false\x2C\x0d\n  filter: undefined\x2C\x0d\n  force: true\x2C\x0d\n  preserveTimestamps: false\x2C\x0d\n  recursive: false\x2C\x0d\n  verbatimSymlinks: false\x2C\x0d\n};\x0d\n\x0d\nconst defaultRmOptions = {\x0d\n  recursive: false\x2C\x0d\n  force: false\x2C\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x0d\n};\x0d\n\x0d\nconst defaultRmdirOptions = {\x0d\n  retryDelay: 100\x2C\x0d\n  maxRetries: 0\x2C\x0d\n  recursive: false\x2C\x0d\n};\x0d\n\x0d\nconst validateCpOptions = hideStackFrames((options) => {\x0d\n  if (options === undefined)\x0d\n    return { ...defaultCpOptions };\x0d\n  validateObject(options\x2C 'options');\x0d\n  options = { ...defaultCpOptions\x2C ...options };\x0d\n  validateBoolean(options.dereference\x2C 'options.dereference');\x0d\n  validateBoolean(options.errorOnExist\x2C 'options.errorOnExist');\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n  validateBoolean(options.preserveTimestamps\x2C 'options.preserveTimestamps');\x0d\n  validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n  validateBoolean(options.verbatimSymlinks\x2C 'options.verbatimSymlinks');\x0d\n  if (options.dereference === true && options.verbatimSymlinks === true) {\x0d\n    throw new ERR_INCOMPATIBLE_OPTION_PAIR('dereference'\x2C 'verbatimSymlinks');\x0d\n  }\x0d\n  if (options.filter !== undefined) {\x0d\n    validateFunction(options.filter\x2C 'options.filter');\x0d\n  }\x0d\n  return options;\x0d\n});\x0d\n\x0d\nconst validateRmOptions = hideStackFrames((path\x2C options\x2C expectDir\x2C cb) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  lazyLoadFs().stat(path\x2C (err\x2C stats) => {\x0d\n    if (err) {\x0d\n      if (options.force && err.code === 'ENOENT') {\x0d\n        return cb(null\x2C options);\x0d\n      }\x0d\n      return cb(err\x2C options);\x0d\n    }\x0d\n\x0d\n    if (expectDir && !stats.isDirectory()) {\x0d\n      return cb(false);\x0d\n    }\x0d\n\x0d\n    if (stats.isDirectory() && !options.recursive) {\x0d\n      return cb(new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      }));\x0d\n    }\x0d\n    return cb(null\x2C options);\x0d\n  });\x0d\n});\x0d\n\x0d\nconst validateRmOptionsSync = hideStackFrames((path\x2C options\x2C expectDir) => {\x0d\n  options = validateRmdirOptions(options\x2C defaultRmOptions);\x0d\n  validateBoolean(options.force\x2C 'options.force');\x0d\n\x0d\n  if (!options.force || expectDir || !options.recursive) {\x0d\n    const isDirectory = lazyLoadFs()\x0d\n      .statSync(path\x2C { throwIfNoEntry: !options.force })?.isDirectory();\x0d\n\x0d\n    if (expectDir && !isDirectory) {\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    if (isDirectory && !options.recursive) {\x0d\n      throw new ERR_FS_EISDIR({\x0d\n        code: 'EISDIR'\x2C\x0d\n        message: 'is a directory'\x2C\x0d\n        path\x2C\x0d\n        syscall: 'rm'\x2C\x0d\n        errno: EISDIR\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return options;\x0d\n});\x0d\n\x0d\nlet recursiveRmdirWarned = process.noDeprecation;\x0d\nfunction emitRecursiveRmdirWarning() {\x0d\n  if (!recursiveRmdirWarned) {\x0d\n    process.emitWarning(\x0d\n      'In future versions of Node.js\x2C fs.rmdir(path\x2C { recursive: true }) ' +\x0d\n      'will be removed. Use fs.rm(path\x2C { recursive: true }) instead'\x2C\x0d\n      'DeprecationWarning'\x2C\x0d\n      'DEP0147'\x0d\n    );\x0d\n    recursiveRmdirWarned = true;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateRmdirOptions = hideStackFrames(\x0d\n  (options\x2C defaults = defaultRmdirOptions) => {\x0d\n    if (options === undefined)\x0d\n      return defaults;\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n    options = { ...defaults\x2C ...options };\x0d\n\x0d\n    validateBoolean(options.recursive\x2C 'options.recursive');\x0d\n    validateInt32(options.retryDelay\x2C 'options.retryDelay'\x2C 0);\x0d\n    validateUint32(options.maxRetries\x2C 'options.maxRetries');\x0d\n\x0d\n    return options;\x0d\n  });\x0d\n\x0d\nconst getValidMode = hideStackFrames((mode\x2C type) => {\x0d\n  let min = kMinimumAccessMode;\x0d\n  let max = kMaximumAccessMode;\x0d\n  let def = F_OK;\x0d\n  if (type === 'copyFile') {\x0d\n    min = kMinimumCopyMode;\x0d\n    max = kMaximumCopyMode;\x0d\n    def = mode || kDefaultCopyMode;\x0d\n  } else {\x0d\n    assert(type === 'access');\x0d\n  }\x0d\n  if (mode == null) {\x0d\n    return def;\x0d\n  }\x0d\n  if (NumberIsInteger(mode) && mode >= min && mode <= max) {\x0d\n    return mode;\x0d\n  }\x0d\n  if (typeof mode !== 'number') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('mode'\x2C 'integer'\x2C mode);\x0d\n  }\x0d\n  throw new ERR_OUT_OF_RANGE(\x0d\n    'mode'\x2C `an integer >= ${min} && <= ${max}`\x2C mode);\x0d\n});\x0d\n\x0d\nconst validateStringAfterArrayBufferView = hideStackFrames((buffer\x2C name) => {\x0d\n  if (typeof buffer === 'string') {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    typeof buffer === 'object' &&\x0d\n    buffer !== null &&\x0d\n    typeof buffer.toString === 'function' &&\x0d\n    ObjectPrototypeHasOwnProperty(buffer\x2C 'toString')\x0d\n  ) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    name\x2C\x0d\n    ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n    buffer\x0d\n  );\x0d\n});\x0d\n\x0d\nconst validatePrimitiveStringAfterArrayBufferView = hideStackFrames((buffer\x2C name) => {\x0d\n  if (typeof buffer !== 'string') {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      name\x2C\x0d\n      ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      buffer\x0d\n    );\x0d\n  }\x0d\n});\x0d\n\x0d\nconst validatePosition = hideStackFrames((position\x2C name) => {\x0d\n  if (typeof position === 'number') {\x0d\n    validateInteger(position\x2C name);\x0d\n  } else if (typeof position === 'bigint') {\x0d\n    if (!(position >= -(2n ** 63n) && position <= 2n ** 63n - 1n)) {\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C\x0d\n                                 `>= ${-(2n ** 63n)} && <= ${2n ** 63n - 1n}`\x2C\x0d\n                                 position);\x0d\n    }\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_TYPE(name\x2C ['integer'\x2C 'bigint']\x2C position);\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  constants: {\x0d\n    kIoMaxLength\x2C\x0d\n    kMaxUserId\x2C\x0d\n    kReadFileBufferLength\x2C\x0d\n    kReadFileUnknownBufferLength\x2C\x0d\n    kWriteFileMaxChunkSize\x2C\x0d\n  }\x2C\x0d\n  assertEncoding\x2C\x0d\n  BigIntStats\x2C  // for testing\x0d\n  copyObject\x2C\x0d\n  Dirent\x2C\x0d\n  emitRecursiveRmdirWarning\x2C\x0d\n  getDirent\x2C\x0d\n  getDirents\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  getValidatedPath\x2C\x0d\n  getValidMode\x2C\x0d\n  handleErrorFromBinding\x2C\x0d\n  nullCheck\x2C\x0d\n  preprocessSymlinkDestination\x2C\x0d\n  realpathCacheKey: Symbol('realpathCacheKey')\x2C\x0d\n  getStatsFromBinding\x2C\x0d\n  stringToFlags\x2C\x0d\n  stringToSymlinkType\x2C\x0d\n  Stats\x2C\x0d\n  toUnixTimestamp\x2C\x0d\n  validateBufferArray\x2C\x0d\n  validateCpOptions\x2C\x0d\n  validateOffsetLengthRead\x2C\x0d\n  validateOffsetLengthWrite\x2C\x0d\n  validatePath\x2C\x0d\n  validatePosition\x2C\x0d\n  validateRmOptions\x2C\x0d\n  validateRmOptionsSync\x2C\x0d\n  validateRmdirOptions\x2C\x0d\n  validateStringAfterArrayBufferView\x2C\x0d\n  validatePrimitiveStringAfterArrayBufferView\x2C\x0d\n  warnOnNonPortableTemplate\x0d\n};\x0d\n
code-source-info,0x2ade89d3256,84,7595,8221,C9O7622C16O7641C27O7702C29O7724C30O7735C36O7775C41O7820C43O7844C47O7860C54O7896C60O7936C78O7942C83O7936C84O8032C91O8041C96O8060C99O8083C104O8060C108O8111C114O8140C119O8168C127O8140C132O8203C134O8218,,
code-creation,LazyCompile,10,424416,0x2ade89d523e,48,assertEncoding node:internal/fs/utils:155:24,0x6414ea1c58,~
code-source-info,0x2ade89d523e,84,3741,3923,C0O3757C6O3774C9O3781C14O3781C21O3825C24O3853C40O3859C45O3853C47O3922,,
code-creation,LazyCompile,10,424606,0x2ade89d5356,20,toPathIfFileURL node:internal/url:1512:25,0xb0b6eba188,~
script-source,39,node:internal/url,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeReduce\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Int8Array\x2C\x0d\n  Number\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertySymbols\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectGetOwnPropertyDescriptor\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeReplace\x2C\x0d\n  StringPrototypeReplaceAll\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolIterator\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  decodeURIComponent\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\nconst {\x0d\n  encodeStr\x2C\x0d\n  hexTable\x2C\x0d\n  isHexTable\x0d\n} = require('internal/querystring');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  removeColors\x2C\x0d\n  toUSVString\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ARG_NOT_ITERABLE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_INVALID_FILE_URL_HOST\x2C\x0d\n    ERR_INVALID_FILE_URL_PATH\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n    ERR_INVALID_TUPLE\x2C\x0d\n    ERR_INVALID_URL\x2C\x0d\n    ERR_INVALID_URL_SCHEME\x2C\x0d\n    ERR_MISSING_ARGS\x2C\x0d\n    ERR_NO_CRYPTO\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  CHAR_AMPERSAND\x2C\x0d\n  CHAR_BACKWARD_SLASH\x2C\x0d\n  CHAR_EQUAL\x2C\x0d\n  CHAR_FORWARD_SLASH\x2C\x0d\n  CHAR_LOWERCASE_A\x2C\x0d\n  CHAR_LOWERCASE_Z\x2C\x0d\n  CHAR_PERCENT\x2C\x0d\n  CHAR_PLUS\x0d\n} = require('internal/constants');\x0d\nconst path = require('path');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst querystring = require('querystring');\x0d\n\x0d\nconst { platform } = process;\x0d\nconst isWindows = platform === 'win32';\x0d\n\x0d\nconst {\x0d\n  domainToASCII: _domainToASCII\x2C\x0d\n  domainToUnicode: _domainToUnicode\x2C\x0d\n  encodeAuth\x2C\x0d\n  parse\x2C\x0d\n  setURLConstructor\x2C\x0d\n  URL_FLAGS_CANNOT_BE_BASE\x2C\x0d\n  URL_FLAGS_HAS_FRAGMENT\x2C\x0d\n  URL_FLAGS_HAS_HOST\x2C\x0d\n  URL_FLAGS_HAS_PASSWORD\x2C\x0d\n  URL_FLAGS_HAS_PATH\x2C\x0d\n  URL_FLAGS_HAS_QUERY\x2C\x0d\n  URL_FLAGS_HAS_USERNAME\x2C\x0d\n  URL_FLAGS_IS_DEFAULT_SCHEME_PORT\x2C\x0d\n  URL_FLAGS_SPECIAL\x2C\x0d\n  kFragment\x2C\x0d\n  kHost\x2C\x0d\n  kHostname\x2C\x0d\n  kPathStart\x2C\x0d\n  kPort\x2C\x0d\n  kQuery\x2C\x0d\n  kSchemeStart\x0d\n} = internalBinding('url');\x0d\n\x0d\nconst {\x0d\n  storeDataObject\x2C\x0d\n  revokeDataObject\x2C\x0d\n} = internalBinding('blob');\x0d\n\x0d\nconst context = Symbol('context');\x0d\nconst cannotBeBase = Symbol('cannot-be-base');\x0d\nconst cannotHaveUsernamePasswordPort =\x0d\n    Symbol('cannot-have-username-password-port');\x0d\nconst special = Symbol('special');\x0d\nconst searchParams = Symbol('query');\x0d\nconst kFormat = Symbol('format');\x0d\n\x0d\nlet blob;\x0d\nlet cryptoRandom;\x0d\n\x0d\nfunction lazyBlob() {\x0d\n  blob ??= require('internal/blob');\x0d\n  return blob;\x0d\n}\x0d\n\x0d\nfunction lazyCryptoRandom() {\x0d\n  try {\x0d\n    cryptoRandom ??= require('internal/crypto/random');\x0d\n  } catch {\x0d\n    // If Node.js built without crypto support\x2C we'll fall\x0d\n    // through here and handle it later.\x0d\n  }\x0d\n  return cryptoRandom;\x0d\n}\x0d\n\x0d\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\x0d\nconst IteratorPrototype = ObjectGetPrototypeOf(\x0d\n  ObjectGetPrototypeOf([][SymbolIterator]())\x0d\n);\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin-opaque\x0d\nconst kOpaqueOrigin = 'null';\x0d\n\x0d\n// Refs: https://html.spec.whatwg.org/multipage/browsers.html#ascii-serialisation-of-an-origin\x0d\nfunction serializeTupleOrigin(scheme\x2C host\x2C port) {\x0d\n  return `${scheme}//${host}${port === null ? '' : `:${port}`}`;\x0d\n}\x0d\n\x0d\n// This class provides the internal state of a URL object. An instance of this\x0d\n// class is stored in every URL object and is accessed internally by setters\x0d\n// and getters. It roughly corresponds to the concept of a URL record in the\x0d\n// URL Standard\x2C with a few differences. It is also the object transported to\x0d\n// the C++ binding.\x0d\n// Refs: https://url.spec.whatwg.org/#concept-url\x0d\nclass URLContext {\x0d\n  constructor() {\x0d\n    this.flags = 0;\x0d\n    this.scheme = ':';\x0d\n    this.username = '';\x0d\n    this.password = '';\x0d\n    this.host = null;\x0d\n    this.port = null;\x0d\n    this.path = [];\x0d\n    this.query = null;\x0d\n    this.fragment = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction isURLSearchParams(self) {\x0d\n  return self && self[searchParams] && !self[searchParams][searchParams];\x0d\n}\x0d\n\x0d\nclass URLSearchParams {\x0d\n  // URL Standard says the default value is ''\x2C but as undefined and '' have\x0d\n  // the same result\x2C undefined is used to prevent unnecessary parsing.\x0d\n  // Default parameter is necessary to keep URLSearchParams.length === 0 in\x0d\n  // accordance with Web IDL spec.\x0d\n  constructor(init = undefined) {\x0d\n    if (init === null || init === undefined) {\x0d\n      this[searchParams] = [];\x0d\n    } else if (typeof init === 'object' || typeof init === 'function') {\x0d\n      const method = init[SymbolIterator];\x0d\n      if (method === this[SymbolIterator]) {\x0d\n        // While the spec does not have this branch\x2C we can use it as a\x0d\n        // shortcut to avoid having to go through the costly generic iterator.\x0d\n        const childParams = init[searchParams];\x0d\n        this[searchParams] = childParams.slice();\x0d\n      } else if (method !== null && method !== undefined) {\x0d\n        if (typeof method !== 'function') {\x0d\n          throw new ERR_ARG_NOT_ITERABLE('Query pairs');\x0d\n        }\x0d\n\x0d\n        // Sequence<sequence<USVString>>\x0d\n        // Note: per spec we have to first exhaust the lists then process them\x0d\n        const pairs = [];\x0d\n        for (const pair of init) {\x0d\n          if ((typeof pair !== 'object' && typeof pair !== 'function') ||\x0d\n              pair === null ||\x0d\n              typeof pair[SymbolIterator] !== 'function') {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          const convertedPair = [];\x0d\n          for (const element of pair)\x0d\n            ArrayPrototypePush(convertedPair\x2C toUSVString(element));\x0d\n          ArrayPrototypePush(pairs\x2C convertedPair);\x0d\n        }\x0d\n\x0d\n        this[searchParams] = [];\x0d\n        for (const pair of pairs) {\x0d\n          if (pair.length !== 2) {\x0d\n            throw new ERR_INVALID_TUPLE('Each query pair'\x2C '[name\x2C value]');\x0d\n          }\x0d\n          ArrayPrototypePush(this[searchParams]\x2C pair[0]\x2C pair[1]);\x0d\n        }\x0d\n      } else {\x0d\n        // Record<USVString\x2C USVString>\x0d\n        // Need to use reflection APIs for full spec compliance.\x0d\n        const visited = {};\x0d\n        this[searchParams] = [];\x0d\n        const keys = ReflectOwnKeys(init);\x0d\n        for (let i = 0; i < keys.length; i++) {\x0d\n          const key = keys[i];\x0d\n          const desc = ReflectGetOwnPropertyDescriptor(init\x2C key);\x0d\n          if (desc !== undefined && desc.enumerable) {\x0d\n            const typedKey = toUSVString(key);\x0d\n            const typedValue = toUSVString(init[key]);\x0d\n\x0d\n            // Two different key may result same after `toUSVString()`\x2C we only\x0d\n            // leave the later one. Refers to WPT.\x0d\n            if (visited[typedKey] !== undefined) {\x0d\n              this[searchParams][visited[typedKey]] = typedValue;\x0d\n            } else {\x0d\n              visited[typedKey] = ArrayPrototypePush(this[searchParams]\x2C\x0d\n                                                     typedKey\x2C\x0d\n                                                     typedValue) - 1;\x0d\n            }\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      // USVString\x0d\n      init = toUSVString(init);\x0d\n      if (init[0] === '?') init = init.slice(1);\x0d\n      initSearchParams(this\x2C init);\x0d\n    }\x0d\n\x0d\n    // "associated url object"\x0d\n    this[context] = null;\x0d\n  }\x0d\n\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const separator = '\x2C ';\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const innerInspect = (v) => inspect(v\x2C innerOpts);\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const output = [];\x0d\n    for (let i = 0; i < list.length; i += 2)\x0d\n      ArrayPrototypePush(\x0d\n        output\x2C\x0d\n        `${innerInspect(list[i])} => ${innerInspect(list[i + 1])}`);\x0d\n\x0d\n    const length = ArrayPrototypeReduce(\x0d\n      output\x2C\x0d\n      (prev\x2C cur) => prev + removeColors(cur).length + separator.length\x2C\x0d\n      -separator.length\x0d\n    );\x0d\n    if (length > ctx.breakLength) {\x0d\n      return `${this.constructor.name} {\\n` +\x0d\n      `  ${ArrayPrototypeJoin(output\x2C '\x2C\\n  ')} }`;\x0d\n    } else if (output.length) {\x0d\n      return `${this.constructor.name} { ` +\x0d\n      `${ArrayPrototypeJoin(output\x2C separator)} }`;\x0d\n    }\x0d\n    return `${this.constructor.name} {}`;\x0d\n  }\x0d\n\x0d\n  append(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n    ArrayPrototypePush(this[searchParams]\x2C name\x2C value);\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  delete(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        list.splice(i\x2C 2);\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  get(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return list[i + 1];\x0d\n      }\x0d\n    }\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  getAll(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    const values = [];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        values.push(list[i + 1]);\x0d\n      }\x0d\n    }\x0d\n    return values;\x0d\n  }\x0d\n\x0d\n  has(name) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 1) {\x0d\n      throw new ERR_MISSING_ARGS('name');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    for (let i = 0; i < list.length; i += 2) {\x0d\n      if (list[i] === name) {\x0d\n        return true;\x0d\n      }\x0d\n    }\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  set(name\x2C value) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    if (arguments.length < 2) {\x0d\n      throw new ERR_MISSING_ARGS('name'\x2C 'value');\x0d\n    }\x0d\n\x0d\n    const list = this[searchParams];\x0d\n    name = toUSVString(name);\x0d\n    value = toUSVString(value);\x0d\n\x0d\n    // If there are any name-value pairs whose name is `name`\x2C in `list`\x2C set\x0d\n    // the value of the first such name-value pair to `value` and remove the\x0d\n    // others.\x0d\n    let found = false;\x0d\n    for (let i = 0; i < list.length;) {\x0d\n      const cur = list[i];\x0d\n      if (cur === name) {\x0d\n        if (!found) {\x0d\n          list[i + 1] = value;\x0d\n          found = true;\x0d\n          i += 2;\x0d\n        } else {\x0d\n          list.splice(i\x2C 2);\x0d\n        }\x0d\n      } else {\x0d\n        i += 2;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Otherwise\x2C append a new name-value pair whose name is `name` and value\x0d\n    // is `value`\x2C to `list`.\x0d\n    if (!found) {\x0d\n      ArrayPrototypePush(list\x2C name\x2C value);\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  sort() {\x0d\n    const a = this[searchParams];\x0d\n    const len = a.length;\x0d\n\x0d\n    if (len <= 2) {\x0d\n      // Nothing needs to be done.\x0d\n    } else if (len < 100) {\x0d\n      // 100 is found through testing.\x0d\n      // Simple stable in-place insertion sort\x0d\n      // Derived from v8/src/js/array.js\x0d\n      for (let i = 2; i < len; i += 2) {\x0d\n        const curKey = a[i];\x0d\n        const curVal = a[i + 1];\x0d\n        let j;\x0d\n        for (j = i - 2; j >= 0; j -= 2) {\x0d\n          if (a[j] > curKey) {\x0d\n            a[j + 2] = a[j];\x0d\n            a[j + 3] = a[j + 1];\x0d\n          } else {\x0d\n            break;\x0d\n          }\x0d\n        }\x0d\n        a[j + 2] = curKey;\x0d\n        a[j + 3] = curVal;\x0d\n      }\x0d\n    } else {\x0d\n      // Bottom-up iterative stable merge sort\x0d\n      const lBuffer = new Array(len);\x0d\n      const rBuffer = new Array(len);\x0d\n      for (let step = 2; step < len; step *= 2) {\x0d\n        for (let start = 0; start < len - 2; start += 2 * step) {\x0d\n          const mid = start + step;\x0d\n          let end = mid + step;\x0d\n          end = end < len ? end : len;\x0d\n          if (mid > end)\x0d\n            continue;\x0d\n          merge(a\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer);\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n\x0d\n    update(this[context]\x2C this);\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterators\x0d\n  // Define entries here rather than [Symbol.iterator] as the function name\x0d\n  // must be set to `entries`.\x0d\n  entries() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key+value');\x0d\n  }\x0d\n\x0d\n  forEach(callback\x2C thisArg = undefined) {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    validateCallback(callback);\x0d\n\x0d\n    let list = this[searchParams];\x0d\n\x0d\n    let i = 0;\x0d\n    while (i < list.length) {\x0d\n      const key = list[i];\x0d\n      const value = list[i + 1];\x0d\n      callback.call(thisArg\x2C value\x2C key\x2C this);\x0d\n      // In case the URL object's `search` is updated\x0d\n      list = this[searchParams];\x0d\n      i += 2;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable\x0d\n  keys() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'key');\x0d\n  }\x0d\n\x0d\n  values() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return createSearchParamsIterator(this\x2C 'value');\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior\x0d\n  toString() {\x0d\n    if (!isURLSearchParams(this))\x0d\n      throw new ERR_INVALID_THIS('URLSearchParams');\x0d\n\x0d\n    return serializeParams(this[searchParams]);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URLSearchParams.prototype\x2C {\x0d\n  append: kEnumerableProperty\x2C\x0d\n  delete: kEnumerableProperty\x2C\x0d\n  get: kEnumerableProperty\x2C\x0d\n  getAll: kEnumerableProperty\x2C\x0d\n  has: kEnumerableProperty\x2C\x0d\n  set: kEnumerableProperty\x2C\x0d\n  sort: kEnumerableProperty\x2C\x0d\n  entries: kEnumerableProperty\x2C\x0d\n  forEach: kEnumerableProperty\x2C\x0d\n  keys: kEnumerableProperty\x2C\x0d\n  values: kEnumerableProperty\x2C\x0d\n  toString: kEnumerableProperty\x2C\x0d\n  [SymbolToStringTag]: { __proto__: null\x2C configurable: true\x2C value: 'URLSearchParams' }\x2C\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-iterable-entries\x0d\n  [SymbolIterator]: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: URLSearchParams.prototype.entries\x2C\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\nfunction onParseComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                         host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n  if (!this[searchParams]) { // Invoked from URL constructor\x0d\n    this[searchParams] = new URLSearchParams();\x0d\n    this[searchParams][context] = this;\x0d\n  }\x0d\n  initSearchParams(this[searchParams]\x2C query);\x0d\n}\x0d\n\x0d\nfunction onParseError(input\x2C flags) {\x0d\n  throw new ERR_INVALID_URL(input);\x0d\n}\x0d\n\x0d\nfunction onParseProtocolComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_SPECIAL) !== 0) {\x0d\n    ctx.flags |= URL_FLAGS_SPECIAL;\x0d\n  } else {\x0d\n    ctx.flags &= ~URL_FLAGS_SPECIAL;\x0d\n  }\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostnameComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                                 host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  } else {\x0d\n    ctx.host = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParsePortComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].port = port;\x0d\n}\x0d\n\x0d\nfunction onParseHostComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  ReflectApply(onParseHostnameComplete\x2C this\x2C arguments);\x0d\n  if (port !== null || ((flags & URL_FLAGS_IS_DEFAULT_SCHEME_PORT) !== 0))\x0d\n    ReflectApply(onParsePortComplete\x2C this\x2C arguments);\x0d\n}\x0d\n\x0d\nfunction onParsePathComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = this[context];\x0d\n  if ((flags & URL_FLAGS_HAS_PATH) !== 0) {\x0d\n    ctx.path = path;\x0d\n    ctx.flags |= URL_FLAGS_HAS_PATH;\x0d\n  } else {\x0d\n    ctx.path = [];\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_PATH;\x0d\n  }\x0d\n\x0d\n  // The C++ binding may set host to empty string.\x0d\n  if ((flags & URL_FLAGS_HAS_HOST) !== 0) {\x0d\n    ctx.host = host;\x0d\n    ctx.flags |= URL_FLAGS_HAS_HOST;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction onParseSearchComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                               host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].query = query;\x0d\n}\x0d\n\x0d\nfunction onParseHashComplete(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                             host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  this[context].fragment = fragment;\x0d\n}\x0d\n\x0d\nclass URL {\x0d\n  constructor(input\x2C base = undefined) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    let base_context;\x0d\n    if (base !== undefined) {\x0d\n      base_context = new URL(base)[context];\x0d\n    }\x0d\n    this[context] = new URLContext();\x0d\n    parse(input\x2C -1\x2C base_context\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C\x0d\n          FunctionPrototypeBind(onParseError\x2C this\x2C input));\x0d\n  }\x0d\n\x0d\n  get [special]() {\x0d\n    return (this[context].flags & URL_FLAGS_SPECIAL) !== 0;\x0d\n  }\x0d\n\x0d\n  get [cannotBeBase]() {\x0d\n    return (this[context].flags & URL_FLAGS_CANNOT_BE_BASE) !== 0;\x0d\n  }\x0d\n\x0d\n  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port\x0d\n  get [cannotHaveUsernamePasswordPort]() {\x0d\n    const { host\x2C scheme } = this[context];\x0d\n    return ((host == null || host === '') ||\x0d\n            this[cannotBeBase] ||\x0d\n            scheme === 'file:');\x0d\n  }\x0d\n\x0d\n  [inspect.custom](depth\x2C opts) {\x0d\n    if (this == null ||\x0d\n        ObjectGetPrototypeOf(this[context]) !== URLContext.prototype) {\x0d\n      throw new ERR_INVALID_THIS('URL');\x0d\n    }\x0d\n\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const constructor = getConstructorOf(this) || URL;\x0d\n    const obj = ObjectCreate({ constructor });\x0d\n\x0d\n    obj.href = this.href;\x0d\n    obj.origin = this.origin;\x0d\n    obj.protocol = this.protocol;\x0d\n    obj.username = this.username;\x0d\n    obj.password = this.password;\x0d\n    obj.host = this.host;\x0d\n    obj.hostname = this.hostname;\x0d\n    obj.port = this.port;\x0d\n    obj.pathname = this.pathname;\x0d\n    obj.search = this.search;\x0d\n    obj.searchParams = this.searchParams;\x0d\n    obj.hash = this.hash;\x0d\n\x0d\n    if (opts.showHidden) {\x0d\n      obj.cannotBeBase = this[cannotBeBase];\x0d\n      obj.special = this[special];\x0d\n      obj[context] = this[context];\x0d\n    }\x0d\n\x0d\n    return `${constructor.name} ${inspect(obj\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kFormat](options) {\x0d\n    if (options)\x0d\n      validateObject(options\x2C 'options');\x0d\n\x0d\n    options = {\x0d\n      fragment: true\x2C\x0d\n      unicode: false\x2C\x0d\n      search: true\x2C\x0d\n      auth: true\x2C\x0d\n      ...options\x0d\n    };\x0d\n    const ctx = this[context];\x0d\n    // https://url.spec.whatwg.org/#url-serializing\x0d\n    let ret = ctx.scheme;\x0d\n    if (ctx.host !== null) {\x0d\n      ret += '//';\x0d\n      const has_username = ctx.username !== '';\x0d\n      const has_password = ctx.password !== '';\x0d\n      if (options.auth && (has_username || has_password)) {\x0d\n        if (has_username)\x0d\n          ret += ctx.username;\x0d\n        if (has_password)\x0d\n          ret += `:${ctx.password}`;\x0d\n        ret += '@';\x0d\n      }\x0d\n      ret += options.unicode ?\x0d\n        domainToUnicode(ctx.host) : ctx.host;\x0d\n      if (ctx.port !== null)\x0d\n        ret += `:${ctx.port}`;\x0d\n    }\x0d\n    if (this[cannotBeBase]) {\x0d\n      ret += ctx.path[0];\x0d\n    } else {\x0d\n      if (ctx.host === null && ctx.path.length > 1 && ctx.path[0] === '') {\x0d\n        ret += '/.';\x0d\n      }\x0d\n      if (ctx.path.length) {\x0d\n        ret += '/' + ArrayPrototypeJoin(ctx.path\x2C '/');\x0d\n      }\x0d\n    }\x0d\n    if (options.search && ctx.query !== null)\x0d\n      ret += `?${ctx.query}`;\x0d\n    if (options.fragment && ctx.fragment !== null)\x0d\n      ret += `#${ctx.fragment}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-stringifier\x0d\n  toString() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  get href() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  set href(input) {\x0d\n    // toUSVString is not needed.\x0d\n    input = `${input}`;\x0d\n    parse(input\x2C -1\x2C undefined\x2C undefined\x2C\x0d\n          FunctionPrototypeBind(onParseComplete\x2C this)\x2C\x0d\n          FunctionPrototypeBind(onParseError\x2C this\x2C input));\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get origin() {\x0d\n    // Refs: https://url.spec.whatwg.org/#concept-url-origin\x0d\n    const ctx = this[context];\x0d\n    switch (ctx.scheme) {\x0d\n      case 'blob:':\x0d\n        if (ctx.path.length > 0) {\x0d\n          try {\x0d\n            return (new URL(ctx.path[0])).origin;\x0d\n          } catch {\x0d\n            // Fall through... do nothing\x0d\n          }\x0d\n        }\x0d\n        return kOpaqueOrigin;\x0d\n      case 'ftp:':\x0d\n      case 'http:':\x0d\n      case 'https:':\x0d\n      case 'ws:':\x0d\n      case 'wss:':\x0d\n        return serializeTupleOrigin(ctx.scheme\x2C ctx.host\x2C ctx.port);\x0d\n    }\x0d\n    return kOpaqueOrigin;\x0d\n  }\x0d\n\x0d\n  get protocol() {\x0d\n    return this[context].scheme;\x0d\n  }\x0d\n\x0d\n  set protocol(scheme) {\x0d\n    // toUSVString is not needed.\x0d\n    scheme = `${scheme}`;\x0d\n    if (scheme.length === 0)\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    parse(scheme\x2C kSchemeStart\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseProtocolComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get username() {\x0d\n    return this[context].username;\x0d\n  }\x0d\n\x0d\n  set username(username) {\x0d\n    // toUSVString is not needed.\x0d\n    username = `${username}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (username === '') {\x0d\n      ctx.username = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_USERNAME;\x0d\n      return;\x0d\n    }\x0d\n    ctx.username = encodeAuth(username);\x0d\n    ctx.flags |= URL_FLAGS_HAS_USERNAME;\x0d\n  }\x0d\n\x0d\n  get password() {\x0d\n    return this[context].password;\x0d\n  }\x0d\n\x0d\n  set password(password) {\x0d\n    // toUSVString is not needed.\x0d\n    password = `${password}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (password === '') {\x0d\n      ctx.password = '';\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_PASSWORD;\x0d\n      return;\x0d\n    }\x0d\n    ctx.password = encodeAuth(password);\x0d\n    ctx.flags |= URL_FLAGS_HAS_PASSWORD;\x0d\n  }\x0d\n\x0d\n  get host() {\x0d\n    const ctx = this[context];\x0d\n    let ret = ctx.host || '';\x0d\n    if (ctx.port !== null)\x0d\n      ret += `:${ctx.port}`;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  set host(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHost\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHostComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get hostname() {\x0d\n    return this[context].host || '';\x0d\n  }\x0d\n\x0d\n  set hostname(host) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    host = `${host}`;\x0d\n    if (this[cannotBeBase]) {\x0d\n      // Cannot set the host if cannot-be-base is set\x0d\n      return;\x0d\n    }\x0d\n    parse(host\x2C kHostname\x2C null\x2C ctx\x2C onParseHostnameComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get port() {\x0d\n    const port = this[context].port;\x0d\n    return port === null ? '' : String(port);\x0d\n  }\x0d\n\x0d\n  set port(port) {\x0d\n    // toUSVString is not needed.\x0d\n    port = `${port}`;\x0d\n    if (this[cannotHaveUsernamePasswordPort])\x0d\n      return;\x0d\n    const ctx = this[context];\x0d\n    if (port === '') {\x0d\n      ctx.port = null;\x0d\n      return;\x0d\n    }\x0d\n    parse(port\x2C kPort\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParsePortComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  get pathname() {\x0d\n    const ctx = this[context];\x0d\n    if (this[cannotBeBase])\x0d\n      return ctx.path[0];\x0d\n    if (ctx.path.length === 0)\x0d\n      return '';\x0d\n    return `/${ArrayPrototypeJoin(ctx.path\x2C '/')}`;\x0d\n  }\x0d\n\x0d\n  set pathname(path) {\x0d\n    // toUSVString is not needed.\x0d\n    path = `${path}`;\x0d\n    if (this[cannotBeBase])\x0d\n      return;\x0d\n    parse(path\x2C kPathStart\x2C null\x2C this[context]\x2C\x0d\n          onParsePathComplete.bind(this));\x0d\n  }\x0d\n\x0d\n  get search() {\x0d\n    const { query } = this[context];\x0d\n    if (query === null || query === '')\x0d\n      return '';\x0d\n    return `?${query}`;\x0d\n  }\x0d\n\x0d\n  set search(search) {\x0d\n    const ctx = this[context];\x0d\n    search = toUSVString(search);\x0d\n    if (search === '') {\x0d\n      ctx.query = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n    } else {\x0d\n      if (search[0] === '?') search = StringPrototypeSlice(search\x2C 1);\x0d\n      ctx.query = '';\x0d\n      ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n      if (search) {\x0d\n        parse(search\x2C kQuery\x2C null\x2C ctx\x2C\x0d\n              FunctionPrototypeBind(onParseSearchComplete\x2C this));\x0d\n      }\x0d\n    }\x0d\n    initSearchParams(this[searchParams]\x2C search);\x0d\n  }\x0d\n\x0d\n  // readonly\x0d\n  get searchParams() {\x0d\n    return this[searchParams];\x0d\n  }\x0d\n\x0d\n  get hash() {\x0d\n    const { fragment } = this[context];\x0d\n    if (fragment === null || fragment === '')\x0d\n      return '';\x0d\n    return `#${fragment}`;\x0d\n  }\x0d\n\x0d\n  set hash(hash) {\x0d\n    const ctx = this[context];\x0d\n    // toUSVString is not needed.\x0d\n    hash = `${hash}`;\x0d\n    if (!hash) {\x0d\n      ctx.fragment = null;\x0d\n      ctx.flags &= ~URL_FLAGS_HAS_FRAGMENT;\x0d\n      return;\x0d\n    }\x0d\n    if (hash[0] === '#') hash = StringPrototypeSlice(hash\x2C 1);\x0d\n    ctx.fragment = '';\x0d\n    ctx.flags |= URL_FLAGS_HAS_FRAGMENT;\x0d\n    parse(hash\x2C kFragment\x2C null\x2C ctx\x2C\x0d\n          FunctionPrototypeBind(onParseHashComplete\x2C this));\x0d\n  }\x0d\n\x0d\n  toJSON() {\x0d\n    return this[kFormat]({});\x0d\n  }\x0d\n\x0d\n  static createObjectURL(obj) {\x0d\n    const cryptoRandom = lazyCryptoRandom();\x0d\n    if (cryptoRandom === undefined)\x0d\n      throw new ERR_NO_CRYPTO();\x0d\n\x0d\n    // Yes\x2C lazy loading is annoying but because of circular\x0d\n    // references between the url\x2C internal/blob\x2C and buffer\x0d\n    // modules\x2C lazy loading here makes sure that things work.\x0d\n    const blob = lazyBlob();\x0d\n    if (!blob.isBlob(obj))\x0d\n      throw new ERR_INVALID_ARG_TYPE('obj'\x2C 'Blob'\x2C obj);\x0d\n\x0d\n    const id = cryptoRandom.randomUUID();\x0d\n\x0d\n    storeDataObject(id\x2C obj[blob.kHandle]\x2C obj.size\x2C obj.type);\x0d\n\x0d\n    return `blob:nodedata:${id}`;\x0d\n  }\x0d\n\x0d\n  static revokeObjectURL(url) {\x0d\n    url = `${url}`;\x0d\n    try {\x0d\n      const parsed = new URL(url);\x0d\n      const split = StringPrototypeSplit(parsed.pathname\x2C ':');\x0d\n      if (split.length === 2)\x0d\n        revokeDataObject(split[1]);\x0d\n    } catch {\x0d\n      // If there's an error\x2C it's ignored.\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(URL.prototype\x2C {\x0d\n  [kFormat]: { __proto__: null\x2C configurable: false\x2C writable: false }\x2C\x0d\n  [SymbolToStringTag]: { __proto__: null\x2C configurable: true\x2C value: 'URL' }\x2C\x0d\n  toString: kEnumerableProperty\x2C\x0d\n  href: kEnumerableProperty\x2C\x0d\n  origin: kEnumerableProperty\x2C\x0d\n  protocol: kEnumerableProperty\x2C\x0d\n  username: kEnumerableProperty\x2C\x0d\n  password: kEnumerableProperty\x2C\x0d\n  host: kEnumerableProperty\x2C\x0d\n  hostname: kEnumerableProperty\x2C\x0d\n  port: kEnumerableProperty\x2C\x0d\n  pathname: kEnumerableProperty\x2C\x0d\n  search: kEnumerableProperty\x2C\x0d\n  searchParams: kEnumerableProperty\x2C\x0d\n  hash: kEnumerableProperty\x2C\x0d\n  toJSON: kEnumerableProperty\x2C\x0d\n});\x0d\n\x0d\nfunction update(url\x2C params) {\x0d\n  if (!url)\x0d\n    return;\x0d\n\x0d\n  const ctx = url[context];\x0d\n  const serializedParams = params.toString();\x0d\n  if (serializedParams) {\x0d\n    ctx.query = serializedParams;\x0d\n    ctx.flags |= URL_FLAGS_HAS_QUERY;\x0d\n  } else {\x0d\n    ctx.query = null;\x0d\n    ctx.flags &= ~URL_FLAGS_HAS_QUERY;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction initSearchParams(url\x2C init) {\x0d\n  if (!init) {\x0d\n    url[searchParams] = [];\x0d\n    return;\x0d\n  }\x0d\n  url[searchParams] = parseParams(init);\x0d\n}\x0d\n\x0d\n// application/x-www-form-urlencoded parser\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-parser\x0d\nfunction parseParams(qs) {\x0d\n  const out = [];\x0d\n  let pairStart = 0;\x0d\n  let lastPos = 0;\x0d\n  let seenSep = false;\x0d\n  let buf = '';\x0d\n  let encoded = false;\x0d\n  let encodeCheck = 0;\x0d\n  let i;\x0d\n  for (i = 0; i < qs.length; ++i) {\x0d\n    const code = StringPrototypeCharCodeAt(qs\x2C i);\x0d\n\x0d\n    // Try matching key/value pair separator\x0d\n    if (code === CHAR_AMPERSAND) {\x0d\n      if (pairStart === i) {\x0d\n        // We saw an empty substring between pair separators\x0d\n        lastPos = pairStart = i + 1;\x0d\n        continue;\x0d\n      }\x0d\n\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      // If `buf` is the key\x2C add an empty value.\x0d\n      if (!seenSep)\x0d\n        out.push('');\x0d\n\x0d\n      seenSep = false;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = pairStart = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Try matching key/value separator (e.g. '=') if we haven't already\x0d\n    if (!seenSep && code === CHAR_EQUAL) {\x0d\n      // Key/value separator match!\x0d\n      if (lastPos < i)\x0d\n        buf += qs.slice(lastPos\x2C i);\x0d\n      if (encoded)\x0d\n        buf = querystring.unescape(buf);\x0d\n      out.push(buf);\x0d\n\x0d\n      seenSep = true;\x0d\n      buf = '';\x0d\n      encoded = false;\x0d\n      encodeCheck = 0;\x0d\n      lastPos = i + 1;\x0d\n      continue;\x0d\n    }\x0d\n\x0d\n    // Handle + and percent decoding.\x0d\n    if (code === CHAR_PLUS) {\x0d\n      if (lastPos < i)\x0d\n        buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n      buf += ' ';\x0d\n      lastPos = i + 1;\x0d\n    } else if (!encoded) {\x0d\n      // Try to match an (valid) encoded byte (once) to minimize unnecessary\x0d\n      // calls to string decoding functions\x0d\n      if (code === CHAR_PERCENT) {\x0d\n        encodeCheck = 1;\x0d\n      } else if (encodeCheck > 0) {\x0d\n        if (isHexTable[code] === 1) {\x0d\n          if (++encodeCheck === 3) {\x0d\n            encoded = true;\x0d\n          }\x0d\n        } else {\x0d\n          encodeCheck = 0;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Deal with any leftover key or value data\x0d\n\x0d\n  // There is a trailing &. No more processing is needed.\x0d\n  if (pairStart === i)\x0d\n    return out;\x0d\n\x0d\n  if (lastPos < i)\x0d\n    buf += StringPrototypeSlice(qs\x2C lastPos\x2C i);\x0d\n  if (encoded)\x0d\n    buf = querystring.unescape(buf);\x0d\n  ArrayPrototypePush(out\x2C buf);\x0d\n\x0d\n  // If `buf` is the key\x2C add an empty value.\x0d\n  if (!seenSep)\x0d\n    ArrayPrototypePush(out\x2C '');\x0d\n\x0d\n  return out;\x0d\n}\x0d\n\x0d\n// Adapted from querystring's implementation.\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-byte-serializer\x0d\nconst noEscape = new Int8Array([\x0d\n/*\x0d\n  0\x2C 1\x2C 2\x2C 3\x2C 4\x2C 5\x2C 6\x2C 7\x2C 8\x2C 9\x2C A\x2C B\x2C C\x2C D\x2C E\x2C F\x0d\n*/\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x00 - 0x0F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x10 - 0x1F\x0d\n  0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C 0\x2C 0\x2C 1\x2C 1\x2C 0\x2C // 0x20 - 0x2F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C // 0x30 - 0x3F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x40 - 0x4F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 1\x2C // 0x50 - 0x5F\x0d\n  0\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C // 0x60 - 0x6F\x0d\n  1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 1\x2C 0\x2C 0\x2C 0\x2C 0\x2C 0\x2C  // 0x70 - 0x7F\x0d\n]);\x0d\n\x0d\n// Special version of hexTable that uses `+` for U+0020 SPACE.\x0d\nconst paramHexTable = hexTable.slice();\x0d\nparamHexTable[0x20] = '+';\x0d\n\x0d\n// application/x-www-form-urlencoded serializer\x0d\n// Ref: https://url.spec.whatwg.org/#concept-urlencoded-serializer\x0d\nfunction serializeParams(array) {\x0d\n  const len = array.length;\x0d\n  if (len === 0)\x0d\n    return '';\x0d\n\x0d\n  const firstEncodedParam = encodeStr(array[0]\x2C noEscape\x2C paramHexTable);\x0d\n  const firstEncodedValue = encodeStr(array[1]\x2C noEscape\x2C paramHexTable);\x0d\n  let output = `${firstEncodedParam}=${firstEncodedValue}`;\x0d\n\x0d\n  for (let i = 2; i < len; i += 2) {\x0d\n    const encodedParam = encodeStr(array[i]\x2C noEscape\x2C paramHexTable);\x0d\n    const encodedValue = encodeStr(array[i + 1]\x2C noEscape\x2C paramHexTable);\x0d\n    output += `&${encodedParam}=${encodedValue}`;\x0d\n  }\x0d\n\x0d\n  return output;\x0d\n}\x0d\n\x0d\n// Mainly to mitigate func-name-matching ESLint rule\x0d\nfunction defineIDLClass(proto\x2C classStr\x2C obj) {\x0d\n  // https://heycam.github.io/webidl/#dfn-class-string\x0d\n  ObjectDefineProperty(proto\x2C SymbolToStringTag\x2C {\x0d\n    __proto__: null\x2C\x0d\n    writable: false\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    value: classStr\x0d\n  });\x0d\n\x0d\n  // https://heycam.github.io/webidl/#es-operations\x0d\n  for (const key of ObjectKeys(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: true\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n  for (const key of ObjectGetOwnPropertySymbols(obj)) {\x0d\n    ObjectDefineProperty(proto\x2C key\x2C {\x0d\n      __proto__: null\x2C\x0d\n      writable: true\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      value: obj[key]\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// for merge sort\x0d\nfunction merge(out\x2C start\x2C mid\x2C end\x2C lBuffer\x2C rBuffer) {\x0d\n  const sizeLeft = mid - start;\x0d\n  const sizeRight = end - mid;\x0d\n  let l\x2C r\x2C o;\x0d\n\x0d\n  for (l = 0; l < sizeLeft; l++)\x0d\n    lBuffer[l] = out[start + l];\x0d\n  for (r = 0; r < sizeRight; r++)\x0d\n    rBuffer[r] = out[mid + r];\x0d\n\x0d\n  l = 0;\x0d\n  r = 0;\x0d\n  o = start;\x0d\n  while (l < sizeLeft && r < sizeRight) {\x0d\n    if (lBuffer[l] <= rBuffer[r]) {\x0d\n      out[o++] = lBuffer[l++];\x0d\n      out[o++] = lBuffer[l++];\x0d\n    } else {\x0d\n      out[o++] = rBuffer[r++];\x0d\n      out[o++] = rBuffer[r++];\x0d\n    }\x0d\n  }\x0d\n  while (l < sizeLeft)\x0d\n    out[o++] = lBuffer[l++];\x0d\n  while (r < sizeRight)\x0d\n    out[o++] = rBuffer[r++];\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-default-iterator-object\x0d\nfunction createSearchParamsIterator(target\x2C kind) {\x0d\n  const iterator = ObjectCreate(URLSearchParamsIteratorPrototype);\x0d\n  iterator[context] = {\x0d\n    target\x2C\x0d\n    kind\x2C\x0d\n    index: 0\x0d\n  };\x0d\n  return iterator;\x0d\n}\x0d\n\x0d\n// https://heycam.github.io/webidl/#dfn-iterator-prototype-object\x0d\nconst URLSearchParamsIteratorPrototype = ObjectCreate(IteratorPrototype);\x0d\n\x0d\ndefineIDLClass(URLSearchParamsIteratorPrototype\x2C 'URLSearchParams Iterator'\x2C {\x0d\n  next() {\x0d\n    if (!this ||\x0d\n        ObjectGetPrototypeOf(this) !== URLSearchParamsIteratorPrototype) {\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const values = target[searchParams];\x0d\n    const len = values.length;\x0d\n    if (index >= len) {\x0d\n      return {\x0d\n        value: undefined\x2C\x0d\n        done: true\x0d\n      };\x0d\n    }\x0d\n\x0d\n    const name = values[index];\x0d\n    const value = values[index + 1];\x0d\n    this[context].index = index + 2;\x0d\n\x0d\n    let result;\x0d\n    if (kind === 'key') {\x0d\n      result = name;\x0d\n    } else if (kind === 'value') {\x0d\n      result = value;\x0d\n    } else {\x0d\n      result = [name\x2C value];\x0d\n    }\x0d\n\x0d\n    return {\x0d\n      value: result\x2C\x0d\n      done: false\x0d\n    };\x0d\n  }\x2C\x0d\n  [inspect.custom](recurseTimes\x2C ctx) {\x0d\n    if (this == null || this[context] == null || this[context].target == null)\x0d\n      throw new ERR_INVALID_THIS('URLSearchParamsIterator');\x0d\n\x0d\n    if (typeof recurseTimes === 'number' && recurseTimes < 0)\x0d\n      return ctx.stylize('[Object]'\x2C 'special');\x0d\n\x0d\n    const innerOpts = { ...ctx };\x0d\n    if (recurseTimes !== null) {\x0d\n      innerOpts.depth = recurseTimes - 1;\x0d\n    }\x0d\n    const {\x0d\n      target\x2C\x0d\n      kind\x2C\x0d\n      index\x0d\n    } = this[context];\x0d\n    const output = ArrayPrototypeReduce(\x0d\n      ArrayPrototypeSlice(target[searchParams]\x2C index)\x2C\x0d\n      (prev\x2C cur\x2C i) => {\x0d\n        const key = i % 2 === 0;\x0d\n        if (kind === 'key' && key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C cur);\x0d\n        } else if (kind === 'key+value' && !key) {\x0d\n          ArrayPrototypePush(prev\x2C [target[searchParams][index + i - 1]\x2C cur]);\x0d\n        }\x0d\n        return prev;\x0d\n      }\x2C\x0d\n      []\x0d\n    );\x0d\n    const breakLn = inspect(output\x2C innerOpts).includes('\\n');\x0d\n    const outputStrs = ArrayPrototypeMap(output\x2C (p) => inspect(p\x2C innerOpts));\x0d\n    let outputStr;\x0d\n    if (breakLn) {\x0d\n      outputStr = `\\n  ${ArrayPrototypeJoin(outputStrs\x2C '\x2C\\n  ')}`;\x0d\n    } else {\x0d\n      outputStr = ` ${ArrayPrototypeJoin(outputStrs\x2C '\x2C ')}`;\x0d\n    }\x0d\n    return `${this[SymbolToStringTag]} {${outputStr} }`;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction domainToASCII(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToASCII(`${domain}`);\x0d\n}\x0d\n\x0d\nfunction domainToUnicode(domain) {\x0d\n  if (arguments.length < 1)\x0d\n    throw new ERR_MISSING_ARGS('domain');\x0d\n\x0d\n  // toUSVString is not needed.\x0d\n  return _domainToUnicode(`${domain}`);\x0d\n}\x0d\n\x0d\n// Utility function that converts a URL object into an ordinary\x0d\n// options object as expected by the http.request and https.request\x0d\n// APIs.\x0d\nfunction urlToHttpOptions(url) {\x0d\n  const options = {\x0d\n    protocol: url.protocol\x2C\x0d\n    hostname: typeof url.hostname === 'string' &&\x0d\n              StringPrototypeStartsWith(url.hostname\x2C '[') ?\x0d\n      StringPrototypeSlice(url.hostname\x2C 1\x2C -1) :\x0d\n      url.hostname\x2C\x0d\n    hash: url.hash\x2C\x0d\n    search: url.search\x2C\x0d\n    pathname: url.pathname\x2C\x0d\n    path: `${url.pathname || ''}${url.search || ''}`\x2C\x0d\n    href: url.href\x0d\n  };\x0d\n  if (url.port !== '') {\x0d\n    options.port = Number(url.port);\x0d\n  }\x0d\n  if (url.username || url.password) {\x0d\n    options.auth = `${decodeURIComponent(url.username)}:${decodeURIComponent(url.password)}`;\x0d\n  }\x0d\n  return options;\x0d\n}\x0d\n\x0d\nfunction getPathFromURLWin32(url) {\x0d\n  const hostname = url.hostname;\x0d\n  let pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if ((pathname[n + 1] === '2' && third === 102) || // 2f 2F /\x0d\n          (pathname[n + 1] === '5' && third === 99)) {  // 5c 5C \\\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded \\\\ or / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  pathname = StringPrototypeReplaceAll(pathname\x2C '/'\x2C '\\\\');\x0d\n  pathname = decodeURIComponent(pathname);\x0d\n  if (hostname !== '') {\x0d\n    // If hostname is set\x2C then we have a UNC path\x0d\n    // Pass the hostname through domainToUnicode just in case\x0d\n    // it is an IDN using punycode encoding. We do not need to worry\x0d\n    // about percent encoding because the URL parser will have\x0d\n    // already taken care of that for us. Note that this only\x0d\n    // causes IDNs with an appropriate `xn--` prefix to be decoded.\x0d\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\x0d\n  }\x0d\n  // Otherwise\x2C it's a local path that requires a drive letter\x0d\n  const letter = pathname.codePointAt(1) | 0x20;\x0d\n  const sep = pathname[2];\x0d\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||   // a..z A..Z\x0d\n      (sep !== ':')) {\x0d\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\x0d\n  }\x0d\n  return pathname.slice(1);\x0d\n}\x0d\n\x0d\nfunction getPathFromURLPosix(url) {\x0d\n  if (url.hostname !== '') {\x0d\n    throw new ERR_INVALID_FILE_URL_HOST(platform);\x0d\n  }\x0d\n  const pathname = url.pathname;\x0d\n  for (let n = 0; n < pathname.length; n++) {\x0d\n    if (pathname[n] === '%') {\x0d\n      const third = pathname.codePointAt(n + 2) | 0x20;\x0d\n      if (pathname[n + 1] === '2' && third === 102) {\x0d\n        throw new ERR_INVALID_FILE_URL_PATH(\x0d\n          'must not include encoded / characters'\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return decodeURIComponent(pathname);\x0d\n}\x0d\n\x0d\nfunction fileURLToPath(path) {\x0d\n  if (typeof path === 'string')\x0d\n    path = new URL(path);\x0d\n  else if (!isURLInstance(path))\x0d\n    throw new ERR_INVALID_ARG_TYPE('path'\x2C ['string'\x2C 'URL']\x2C path);\x0d\n  if (path.protocol !== 'file:')\x0d\n    throw new ERR_INVALID_URL_SCHEME('file');\x0d\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\x0d\n}\x0d\n\x0d\n// The following characters are percent-encoded when converting from file path\x0d\n// to URL:\x0d\n// - %: The percent character is the only character not encoded by the\x0d\n//        `pathname` setter.\x0d\n// - \\: Backslash is encoded on non-windows platforms since it's a valid\x0d\n//      character but the `pathname` setters replaces it by a forward slash.\x0d\n// - LF: The newline character is stripped out by the `pathname` setter.\x0d\n//       (See whatwg/url#419)\x0d\n// - CR: The carriage return character is also stripped out by the `pathname`\x0d\n//       setter.\x0d\n// - TAB: The tab character is also stripped out by the `pathname` setter.\x0d\nconst percentRegEx = /%/g;\x0d\nconst backslashRegEx = /\\\\/g;\x0d\nconst newlineRegEx = /\\n/g;\x0d\nconst carriageReturnRegEx = /\\r/g;\x0d\nconst tabRegEx = /\\t/g;\x0d\n\x0d\nfunction encodePathChars(filepath) {\x0d\n  if (StringPrototypeIncludes(filepath\x2C '%'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C percentRegEx\x2C '%25');\x0d\n  // In posix\x2C backslash is a valid character in paths:\x0d\n  if (!isWindows && StringPrototypeIncludes(filepath\x2C '\\\\'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C backslashRegEx\x2C '%5C');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\n'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C newlineRegEx\x2C '%0A');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\r'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C carriageReturnRegEx\x2C '%0D');\x0d\n  if (StringPrototypeIncludes(filepath\x2C '\\t'))\x0d\n    filepath = StringPrototypeReplace(filepath\x2C tabRegEx\x2C '%09');\x0d\n  return filepath;\x0d\n}\x0d\n\x0d\nfunction pathToFileURL(filepath) {\x0d\n  const outURL = new URL('file://');\x0d\n  if (isWindows && StringPrototypeStartsWith(filepath\x2C '\\\\\\\\')) {\x0d\n    // UNC path format: \\\\server\\share\\resource\x0d\n    const paths = StringPrototypeSplit(filepath\x2C '\\\\');\x0d\n    if (paths.length <= 3) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Missing UNC resource path'\x0d\n      );\x0d\n    }\x0d\n    const hostname = paths[2];\x0d\n    if (hostname.length === 0) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'filepath'\x2C\x0d\n        filepath\x2C\x0d\n        'Empty UNC servername'\x0d\n      );\x0d\n    }\x0d\n    outURL.hostname = domainToASCII(hostname);\x0d\n    outURL.pathname = encodePathChars(\x0d\n      ArrayPrototypeJoin(ArrayPrototypeSlice(paths\x2C 3)\x2C '/'));\x0d\n  } else {\x0d\n    let resolved = path.resolve(filepath);\x0d\n    // path.resolve strips trailing slashes so we must add them back\x0d\n    const filePathLast = StringPrototypeCharCodeAt(filepath\x2C\x0d\n                                                   filepath.length - 1);\x0d\n    if ((filePathLast === CHAR_FORWARD_SLASH ||\x0d\n         (isWindows && filePathLast === CHAR_BACKWARD_SLASH)) &&\x0d\n        resolved[resolved.length - 1] !== path.sep)\x0d\n      resolved += '/';\x0d\n    outURL.pathname = encodePathChars(resolved);\x0d\n  }\x0d\n  return outURL;\x0d\n}\x0d\n\x0d\nfunction isURLInstance(fileURLOrPath) {\x0d\n  return fileURLOrPath != null && fileURLOrPath.href && fileURLOrPath.origin;\x0d\n}\x0d\n\x0d\nfunction toPathIfFileURL(fileURLOrPath) {\x0d\n  if (!isURLInstance(fileURLOrPath))\x0d\n    return fileURLOrPath;\x0d\n  return fileURLToPath(fileURLOrPath);\x0d\n}\x0d\n\x0d\nfunction constructUrl(flags\x2C protocol\x2C username\x2C password\x2C\x0d\n                      host\x2C port\x2C path\x2C query\x2C fragment) {\x0d\n  const ctx = new URLContext();\x0d\n  ctx.flags = flags;\x0d\n  ctx.scheme = protocol;\x0d\n  ctx.username = (flags & URL_FLAGS_HAS_USERNAME) !== 0 ? username : '';\x0d\n  ctx.password = (flags & URL_FLAGS_HAS_PASSWORD) !== 0 ? password : '';\x0d\n  ctx.port = port;\x0d\n  ctx.path = (flags & URL_FLAGS_HAS_PATH) !== 0 ? path : [];\x0d\n  ctx.query = query;\x0d\n  ctx.fragment = fragment;\x0d\n  ctx.host = host;\x0d\n\x0d\n  const url = ObjectCreate(URL.prototype);\x0d\n  url[context] = ctx;\x0d\n  const params = new URLSearchParams();\x0d\n  url[searchParams] = params;\x0d\n  params[context] = url;\x0d\n  initSearchParams(params\x2C query);\x0d\n  return url;\x0d\n}\x0d\nsetURLConstructor(constructUrl);\x0d\n\x0d\nmodule.exports = {\x0d\n  toUSVString\x2C\x0d\n  fileURLToPath\x2C\x0d\n  pathToFileURL\x2C\x0d\n  toPathIfFileURL\x2C\x0d\n  isURLInstance\x2C\x0d\n  URL\x2C\x0d\n  URLSearchParams\x2C\x0d\n  domainToASCII\x2C\x0d\n  domainToUnicode\x2C\x0d\n  urlToHttpOptions\x2C\x0d\n  formatSymbol: kFormat\x2C\x0d\n  searchParamsSymbol: searchParams\x2C\x0d\n  encodeStr\x0d\n};\x0d\n
code-source-info,0x2ade89d5356,39,43659,43784,C0O43680C3O43685C9O43720C11O43741C12O43745C15O43752C19O43781,,
tick,0x7ff6d5b31e40,428408,0,0x0,3,0x7ff6d61dcec0,0x2ade89cca10,0x2ade89cc5f9,0x2ade89cbc17,0x2ade89cb8fc,0x2ade89cb4a7,0x2f2f3a0b893
code-creation,LazyCompile,10,428461,0x2ade89d8506,17,isURLInstance node:internal/url:1508:23,0xb0b6eba138,~
code-source-info,0x2ade89d8506,39,43532,43631,C0O43553C3O43574C6O43599C12O43621C16O43628,,
code-creation,LazyCompile,10,428584,0x2ade89d8666,81, node:internal/fs/utils:671:38,0x6414ea2c78,~
code-source-info,0x2ade89d8666,84,18882,19162,C14O18916C22O18949C25O18949C31O18976C36O19007C49O18982C54O18976C55O19075C68O19075C74O19114C76O19144C78O19144C80O19161,,
code-creation,LazyCompile,10,428709,0x2ade89d8876,110, node:internal/fs/utils:360:35,0x6414ea22f0,~
code-source-info,0x2ade89d8876,84,8971,9580,C16O9036C21O9090C26O9090C31O9187C37O9210C41O9239C45O9256C51O9256C60O9308C64O9329C69O9329C76O9375C77O9382C78O9405C94O9405C100O9524C104O9547C106O9547C107O9566C109O9577,,
code-creation,LazyCompile,10,428812,0x2ade89d89ee,16,isUint8Array node:internal/util/types:13:22,0x2392d4c0b8,~
script-source,17,node:internal/util/types,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayBufferIsView\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  TypedArrayPrototypeGetSymbolToStringTag\x2C\x0d\n} = primordials;\x0d\n\x0d\nfunction isTypedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\x0d\n}\x0d\n\x0d\nfunction isUint8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\x0d\n}\x0d\n\x0d\nfunction isUint8ClampedArray(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8ClampedArray';\x0d\n}\x0d\n\x0d\nfunction isUint16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint16Array';\x0d\n}\x0d\n\x0d\nfunction isUint32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint32Array';\x0d\n}\x0d\n\x0d\nfunction isInt8Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int8Array';\x0d\n}\x0d\n\x0d\nfunction isInt16Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int16Array';\x0d\n}\x0d\n\x0d\nfunction isInt32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Int32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat32Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float32Array';\x0d\n}\x0d\n\x0d\nfunction isFloat64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Float64Array';\x0d\n}\x0d\n\x0d\nfunction isBigInt64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigInt64Array';\x0d\n}\x0d\n\x0d\nfunction isBigUint64Array(value) {\x0d\n  return TypedArrayPrototypeGetSymbolToStringTag(value) === 'BigUint64Array';\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  ...internalBinding('types')\x2C\x0d\n  isArrayBufferView: ArrayBufferIsView\x2C\x0d\n  isTypedArray\x2C\x0d\n  isUint8Array\x2C\x0d\n  isUint8ClampedArray\x2C\x0d\n  isUint16Array\x2C\x0d\n  isUint32Array\x2C\x0d\n  isInt8Array\x2C\x0d\n  isInt16Array\x2C\x0d\n  isInt32Array\x2C\x0d\n  isFloat32Array\x2C\x0d\n  isFloat64Array\x2C\x0d\n  isBigInt64Array\x2C\x0d\n  isBigUint64Array\x2C\x0d\n};\x0d\n\x0d\nlet isCryptoKey;\x0d\nlet isKeyObject;\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  isKeyObject: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isKeyObject) {\x0d\n        ({ isKeyObject } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isKeyObject(obj);\x0d\n    }\x0d\n  }\x2C\x0d\n  isCryptoKey: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value(obj) {\x0d\n      if (!process.versions.openssl) {\x0d\n        return false;\x0d\n      }\x0d\n\x0d\n      if (!isCryptoKey) {\x0d\n        ({ isCryptoKey } = require('internal/crypto/keys'));\x0d\n      }\x0d\n\x0d\n      return isCryptoKey(obj);\x0d\n    }\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x2ade89d89ee,17,269,356,C0O282C5O289C12O336C15O353,,
code-creation,LazyCompile,10,429152,0x2ade89d8e66,23,splitRoot node:fs:2407:33,0x6414e99738,~
code-source-info,0x2ade89d8e66,83,66412,66492,C0O66425C9O66466C12O66432C19O66483C22O66487,,
code-creation,LazyCompile,10,429246,0x2ade89d8fb6,39,SideEffectFreeRegExpPrototypeExec node:internal/util:568:43,0x2392d47090,~
code-source-info,0x2ade89d8fb6,15,16273,16447,C0O16337C3O16337C7O16310C12O16361C17O16413C22O16423C33O16368C38O16444,,
code-creation,LazyCompile,10,429349,0x2ade89d912e,52,getInternalGlobal node:internal/util:559:27,0x2392d47040,~
code-source-info,0x2ade89d912e,15,15971,16227,C0O15979C7O16092C13O16092C18O16072C23O16112C28O16153C33O16129C41O16127C47O16202C51O16224,,
code-creation,LazyCompile,10,429511,0x2ade89d92ae,82,runInNewContext node:vm:300:25,0x6414eb7a50,~
script-source,93,node:vm,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  Symbol\x2C\x0d\n  PromiseReject\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ContextifyScript\x2C\x0d\n  MicrotaskQueue\x2C\x0d\n  makeContext\x2C\x0d\n  isContext: _isContext\x2C\x0d\n  constants\x2C\x0d\n  compileFunction: _compileFunction\x2C\x0d\n  measureMemory: _measureMemory\x2C\x0d\n} = internalBinding('contextify');\x0d\nconst {\x0d\n  ERR_CONTEXT_NOT_INITIALIZED\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateBuffer\x2C\x0d\n  validateFunction\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\nconst {\x0d\n  emitExperimentalWarning\x2C\x0d\n  kEmptyObject\x2C\x0d\n  kVmBreakFirstLineSymbol\x2C\x0d\n} = require('internal/util');\x0d\nconst kParsingContext = Symbol('script parsing context');\x0d\n\x0d\nclass Script extends ContextifyScript {\x0d\n  constructor(code\x2C options = kEmptyObject) {\x0d\n    code = `${code}`;\x0d\n    if (typeof options === 'string') {\x0d\n      options = { filename: options };\x0d\n    } else {\x0d\n      validateObject(options\x2C 'options');\x0d\n    }\x0d\n\x0d\n    const {\x0d\n      filename = 'evalmachine.<anonymous>'\x2C\x0d\n      lineOffset = 0\x2C\x0d\n      columnOffset = 0\x2C\x0d\n      cachedData\x2C\x0d\n      produceCachedData = false\x2C\x0d\n      importModuleDynamically\x2C\x0d\n      [kParsingContext]: parsingContext\x2C\x0d\n    } = options;\x0d\n\x0d\n    validateString(filename\x2C 'options.filename');\x0d\n    validateInt32(lineOffset\x2C 'options.lineOffset');\x0d\n    validateInt32(columnOffset\x2C 'options.columnOffset');\x0d\n    if (cachedData !== undefined && !isArrayBufferView(cachedData)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.cachedData'\x2C\x0d\n        ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        cachedData\x0d\n      );\x0d\n    }\x0d\n    validateBoolean(produceCachedData\x2C 'options.produceCachedData');\x0d\n\x0d\n    // Calling `ReThrow()` on a native TryCatch does not generate a new\x0d\n    // abort-on-uncaught-exception check. A dummy try/catch in JS land\x0d\n    // protects against that.\x0d\n    try { // eslint-disable-line no-useless-catch\x0d\n      super(code\x2C\x0d\n            filename\x2C\x0d\n            lineOffset\x2C\x0d\n            columnOffset\x2C\x0d\n            cachedData\x2C\x0d\n            produceCachedData\x2C\x0d\n            parsingContext);\x0d\n    } catch (e) {\x0d\n      throw e; /* node-do-not-add-exception-line */\x0d\n    }\x0d\n\x0d\n    if (importModuleDynamically !== undefined) {\x0d\n      validateFunction(importModuleDynamically\x2C\x0d\n                       'options.importModuleDynamically');\x0d\n      const { importModuleDynamicallyWrap } =\x0d\n        require('internal/vm/module');\x0d\n      const { callbackMap } = internalBinding('module_wrap');\x0d\n      callbackMap.set(this\x2C {\x0d\n        importModuleDynamically:\x0d\n          importModuleDynamicallyWrap(importModuleDynamically)\x2C\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  runInThisContext(options) {\x0d\n    const { breakOnSigint\x2C args } = getRunInContextArgs(null\x2C options);\x0d\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\x0d\n      return sigintHandlersWrap(super.runInContext\x2C this\x2C args);\x0d\n    }\x0d\n    return ReflectApply(super.runInContext\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  runInContext(contextifiedObject\x2C options) {\x0d\n    validateContext(contextifiedObject);\x0d\n    const { breakOnSigint\x2C args } = getRunInContextArgs(\x0d\n      contextifiedObject\x2C\x0d\n      options\x2C\x0d\n    );\x0d\n    if (breakOnSigint && process.listenerCount('SIGINT') > 0) {\x0d\n      return sigintHandlersWrap(super.runInContext\x2C this\x2C args);\x0d\n    }\x0d\n    return ReflectApply(super.runInContext\x2C this\x2C args);\x0d\n  }\x0d\n\x0d\n  runInNewContext(contextObject\x2C options) {\x0d\n    const context = createContext(contextObject\x2C getContextOptions(options));\x0d\n    return this.runInContext(context\x2C options);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction validateContext(contextifiedObject) {\x0d\n  if (!isContext(contextifiedObject)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('contextifiedObject'\x2C 'vm.Context'\x2C\x0d\n                                   contextifiedObject);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getRunInContextArgs(contextifiedObject\x2C options = kEmptyObject) {\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  let timeout = options.timeout;\x0d\n  if (timeout === undefined) {\x0d\n    timeout = -1;\x0d\n  } else {\x0d\n    validateUint32(timeout\x2C 'options.timeout'\x2C true);\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    displayErrors = true\x2C\x0d\n    breakOnSigint = false\x2C\x0d\n    [kVmBreakFirstLineSymbol]: breakFirstLine = false\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateBoolean(displayErrors\x2C 'options.displayErrors');\x0d\n  validateBoolean(breakOnSigint\x2C 'options.breakOnSigint');\x0d\n\x0d\n  return {\x0d\n    breakOnSigint\x2C\x0d\n    args: [\x0d\n      contextifiedObject\x2C\x0d\n      timeout\x2C\x0d\n      displayErrors\x2C\x0d\n      breakOnSigint\x2C\x0d\n      breakFirstLine\x2C\x0d\n    ]\x2C\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction getContextOptions(options) {\x0d\n  if (!options)\x0d\n    return {};\x0d\n  const contextOptions = {\x0d\n    name: options.contextName\x2C\x0d\n    origin: options.contextOrigin\x2C\x0d\n    codeGeneration: undefined\x2C\x0d\n    microtaskMode: options.microtaskMode\x2C\x0d\n  };\x0d\n  if (contextOptions.name !== undefined)\x0d\n    validateString(contextOptions.name\x2C 'options.contextName');\x0d\n  if (contextOptions.origin !== undefined)\x0d\n    validateString(contextOptions.origin\x2C 'options.contextOrigin');\x0d\n  if (options.contextCodeGeneration !== undefined) {\x0d\n    validateObject(options.contextCodeGeneration\x2C\x0d\n                   'options.contextCodeGeneration');\x0d\n    const { strings\x2C wasm } = options.contextCodeGeneration;\x0d\n    if (strings !== undefined)\x0d\n      validateBoolean(strings\x2C 'options.contextCodeGeneration.strings');\x0d\n    if (wasm !== undefined)\x0d\n      validateBoolean(wasm\x2C 'options.contextCodeGeneration.wasm');\x0d\n    contextOptions.codeGeneration = { strings\x2C wasm };\x0d\n  }\x0d\n  if (options.microtaskMode !== undefined)\x0d\n    validateString(options.microtaskMode\x2C 'options.microtaskMode');\x0d\n  return contextOptions;\x0d\n}\x0d\n\x0d\nfunction isContext(object) {\x0d\n  validateObject(object\x2C 'object'\x2C { allowArray: true });\x0d\n\x0d\n  return _isContext(object);\x0d\n}\x0d\n\x0d\nlet defaultContextNameIndex = 1;\x0d\nfunction createContext(contextObject = {}\x2C options = kEmptyObject) {\x0d\n  if (isContext(contextObject)) {\x0d\n    return contextObject;\x0d\n  }\x0d\n\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  const {\x0d\n    name = `VM Context ${defaultContextNameIndex++}`\x2C\x0d\n    origin\x2C\x0d\n    codeGeneration\x2C\x0d\n    microtaskMode\x0d\n  } = options;\x0d\n\x0d\n  validateString(name\x2C 'options.name');\x0d\n  if (origin !== undefined)\x0d\n    validateString(origin\x2C 'options.origin');\x0d\n  if (codeGeneration !== undefined)\x0d\n    validateObject(codeGeneration\x2C 'options.codeGeneration');\x0d\n\x0d\n  let strings = true;\x0d\n  let wasm = true;\x0d\n  if (codeGeneration !== undefined) {\x0d\n    ({ strings = true\x2C wasm = true } = codeGeneration);\x0d\n    validateBoolean(strings\x2C 'options.codeGeneration.strings');\x0d\n    validateBoolean(wasm\x2C 'options.codeGeneration.wasm');\x0d\n  }\x0d\n\x0d\n  let microtaskQueue = null;\x0d\n  if (microtaskMode !== undefined) {\x0d\n    validateOneOf(microtaskMode\x2C 'options.microtaskMode'\x2C\x0d\n                  ['afterEvaluate'\x2C undefined]);\x0d\n\x0d\n    if (microtaskMode === 'afterEvaluate')\x0d\n      microtaskQueue = new MicrotaskQueue();\x0d\n  }\x0d\n\x0d\n  makeContext(contextObject\x2C name\x2C origin\x2C strings\x2C wasm\x2C microtaskQueue);\x0d\n  return contextObject;\x0d\n}\x0d\n\x0d\nfunction createScript(code\x2C options) {\x0d\n  return new Script(code\x2C options);\x0d\n}\x0d\n\x0d\n// Remove all SIGINT listeners and re-attach them after the wrapped function\x0d\n// has executed\x2C so that caught SIGINT are handled by the listeners again.\x0d\nfunction sigintHandlersWrap(fn\x2C thisArg\x2C argsArray) {\x0d\n  const sigintListeners = process.rawListeners('SIGINT');\x0d\n\x0d\n  process.removeAllListeners('SIGINT');\x0d\n\x0d\n  try {\x0d\n    return ReflectApply(fn\x2C thisArg\x2C argsArray);\x0d\n  } finally {\x0d\n    // Add using the public methods so that the `newListener` handler of\x0d\n    // process can re-attach the listeners.\x0d\n    ArrayPrototypeForEach(sigintListeners\x2C (listener) => {\x0d\n      process.addListener('SIGINT'\x2C listener);\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction runInContext(code\x2C contextifiedObject\x2C options) {\x0d\n  validateContext(contextifiedObject);\x0d\n  if (typeof options === 'string') {\x0d\n    options = {\x0d\n      filename: options\x2C\x0d\n      [kParsingContext]: contextifiedObject\x0d\n    };\x0d\n  } else {\x0d\n    options = { ...options\x2C [kParsingContext]: contextifiedObject };\x0d\n  }\x0d\n  return createScript(code\x2C options)\x0d\n    .runInContext(contextifiedObject\x2C options);\x0d\n}\x0d\n\x0d\nfunction runInNewContext(code\x2C contextObject\x2C options) {\x0d\n  if (typeof options === 'string') {\x0d\n    options = { filename: options };\x0d\n  }\x0d\n  contextObject = createContext(contextObject\x2C getContextOptions(options));\x0d\n  options = { ...options\x2C [kParsingContext]: contextObject };\x0d\n  return createScript(code\x2C options).runInNewContext(contextObject\x2C options);\x0d\n}\x0d\n\x0d\nfunction runInThisContext(code\x2C options) {\x0d\n  if (typeof options === 'string') {\x0d\n    options = { filename: options };\x0d\n  }\x0d\n  return createScript(code\x2C options).runInThisContext(options);\x0d\n}\x0d\n\x0d\nfunction compileFunction(code\x2C params\x2C options = kEmptyObject) {\x0d\n  validateString(code\x2C 'code');\x0d\n  if (params !== undefined) {\x0d\n    validateArray(params\x2C 'params');\x0d\n    ArrayPrototypeForEach(params\x2C\x0d\n                          (param\x2C i) => validateString(param\x2C `params[${i}]`));\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    filename = ''\x2C\x0d\n    columnOffset = 0\x2C\x0d\n    lineOffset = 0\x2C\x0d\n    cachedData = undefined\x2C\x0d\n    produceCachedData = false\x2C\x0d\n    parsingContext = undefined\x2C\x0d\n    contextExtensions = []\x2C\x0d\n    importModuleDynamically\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateString(filename\x2C 'options.filename');\x0d\n  validateUint32(columnOffset\x2C 'options.columnOffset');\x0d\n  validateUint32(lineOffset\x2C 'options.lineOffset');\x0d\n  if (cachedData !== undefined)\x0d\n    validateBuffer(cachedData\x2C 'options.cachedData');\x0d\n  validateBoolean(produceCachedData\x2C 'options.produceCachedData');\x0d\n  if (parsingContext !== undefined) {\x0d\n    if (\x0d\n      typeof parsingContext !== 'object' ||\x0d\n      parsingContext === null ||\x0d\n      !isContext(parsingContext)\x0d\n    ) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.parsingContext'\x2C\x0d\n        'Context'\x2C\x0d\n        parsingContext\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n  validateArray(contextExtensions\x2C 'options.contextExtensions');\x0d\n  ArrayPrototypeForEach(contextExtensions\x2C (extension\x2C i) => {\x0d\n    const name = `options.contextExtensions[${i}]`;\x0d\n    validateObject(extension\x2C name\x2C { nullable: true });\x0d\n  });\x0d\n\x0d\n  const result = _compileFunction(\x0d\n    code\x2C\x0d\n    filename\x2C\x0d\n    lineOffset\x2C\x0d\n    columnOffset\x2C\x0d\n    cachedData\x2C\x0d\n    produceCachedData\x2C\x0d\n    parsingContext\x2C\x0d\n    contextExtensions\x2C\x0d\n    params\x0d\n  );\x0d\n\x0d\n  if (produceCachedData) {\x0d\n    result.function.cachedDataProduced = result.cachedDataProduced;\x0d\n  }\x0d\n\x0d\n  if (result.cachedData) {\x0d\n    result.function.cachedData = result.cachedData;\x0d\n  }\x0d\n\x0d\n  if (importModuleDynamically !== undefined) {\x0d\n    validateFunction(importModuleDynamically\x2C\x0d\n                     'options.importModuleDynamically');\x0d\n    const { importModuleDynamicallyWrap } =\x0d\n      require('internal/vm/module');\x0d\n    const { callbackMap } = internalBinding('module_wrap');\x0d\n    const wrapped = importModuleDynamicallyWrap(importModuleDynamically);\x0d\n    const func = result.function;\x0d\n    callbackMap.set(result.cacheKey\x2C {\x0d\n      importModuleDynamically: (s\x2C _k\x2C i) => wrapped(s\x2C func\x2C i)\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  return result.function;\x0d\n}\x0d\n\x0d\nconst measureMemoryModes = {\x0d\n  summary: constants.measureMemory.mode.SUMMARY\x2C\x0d\n  detailed: constants.measureMemory.mode.DETAILED\x2C\x0d\n};\x0d\n\x0d\nconst measureMemoryExecutions = {\x0d\n  default: constants.measureMemory.execution.DEFAULT\x2C\x0d\n  eager: constants.measureMemory.execution.EAGER\x2C\x0d\n};\x0d\n\x0d\nfunction measureMemory(options = kEmptyObject) {\x0d\n  emitExperimentalWarning('vm.measureMemory');\x0d\n  validateObject(options\x2C 'options');\x0d\n  const { mode = 'summary'\x2C execution = 'default' } = options;\x0d\n  validateOneOf(mode\x2C 'options.mode'\x2C ['summary'\x2C 'detailed']);\x0d\n  validateOneOf(execution\x2C 'options.execution'\x2C ['default'\x2C 'eager']);\x0d\n  const result = _measureMemory(measureMemoryModes[mode]\x2C\x0d\n                                measureMemoryExecutions[execution]);\x0d\n  if (result === undefined) {\x0d\n    return PromiseReject(new ERR_CONTEXT_NOT_INITIALIZED());\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Script\x2C\x0d\n  createContext\x2C\x0d\n  createScript\x2C\x0d\n  runInContext\x2C\x0d\n  runInNewContext\x2C\x0d\n  runInThisContext\x2C\x0d\n  isContext\x2C\x0d\n  compileFunction\x2C\x0d\n  measureMemory\x2C\x0d\n};\x0d\n\x0d\n// The vm module is patched to include vm.Module\x2C vm.SourceTextModule\x0d\n// and vm.SyntheticModule in the pre-execution phase when\x0d\n// --experimental-vm-modules is on.\x0d\n
code-source-info,0x2ade89d92ae,93,9402,9737,C0O9438C6O9478C13O9500C22O9519C28O9564C33O9535C40O9596C47O9621C53O9639C61O9659C64O9666C70O9693C75O9694C81O9734,,
code-creation,LazyCompile,10,430623,0x2ade89da49e,214,getContextOptions node:vm:188:27,0x6414eb7870,~
code-source-info,0x2ade89da49e,93,5830,6898,C0O5845C4O5864C5O5874C6O5901C11O5922C19O5956C28O5992C32O6031C43O6074C49O6099C54O6129C62O6099C67O6181C73O6208C78O6238C86O6208C91O6287C97O6331C102O6354C110O6331C115O6470C120O6444C125O6453C130O6498C134O6532C142O6532C147O6604C151O6635C159O6635C164O6701C171O6735C177O6744C183O6731C187O6772C193O6806C198O6829C206O6806C211O6873C213O6895,,
code-creation,LazyCompile,10,430843,0x2ade89da8d6,287,createContext node:vm:223:23,0x6414eb7910,~
code-source-info,0x2ade89da8d6,93,7084,8246,C4O7084C16O7115C23O7134C26O7138C32O7171C34O7192C35O7203C43O7203C48O7257C62O7264C72O7301C85O7312C90O7325C95O7346C100O7381C108O7381C113O7422C117O7453C125O7453C130O7498C134O7537C142O7537C147O7614C149O7634C151O7643C155O7687C166O7703C174O7741C182O7741C187O7806C195O7806C200O7891C202O7900C206O7940C214O7954C223O8031C233O7940C238O8051C240O8069C245O8097C250O8114C256O8146C279O8146C284O8222C286O8243,,
code-creation,LazyCompile,10,430977,0x2ade89dab86,31,isContext node:vm:216:19,0x6414eb78c0,~
code-source-info,0x2ade89dab86,93,6920,7024,C0O6934C8O6949C16O6934C21O6995C26O7002C30O7021,,
code-creation,LazyCompile,10,432053,0x2ade89f79e6,19,createScript node:vm:264:22,0x6414eb7960,~
code-source-info,0x2ade89f79e6,93,8271,8328,C0O8292C13O8299C18O8325,,
code-creation,LazyCompile,10,432233,0x2ade89f7e26,377,Script node:vm:66:14,0x6414eb7098,~
code-source-info,0x2ade89f7e26,93,2104,3969,C14O2121C21O2142C25O2165C31O2207C38O2229C49O2261C59O2261C64O2326C76O2371C84O2394C92O2419C97O2438C105O2472C110O2523C124O2564C134O2564C139O2615C149O2615C154O2669C164O2669C169O2727C177O2760C180O2760C186O2800C206O2806C211O2800C212O2952C222O2952C230O3253C234O3410C259O3253C287O3453C289O3453C290O3513C294O3565C304O3565C309O3723C317O3723C322O3682C327O3785C335O3785C340O3769C345O3836C359O3893C367O3836C376O3968,,
code-creation,LazyCompile,10,432422,0x2ade89f8186,155, node:internal/validators:114:3,0x2392d4aaf8,~
code-source-info,0x2ade89f8186,16,2907,3381,C36O3050C42O3090C58O3096C63O3090C64O3157C69O3162C75O3195C91O3201C96O3195C97O3262C99O3272C106O3287C111O3303C121O3342C134O3355C147O3309C152O3303C154O3380,,
code-creation,LazyCompile,10,432519,0x2ade89f8326,30,validateBoolean node:internal/validators:216:25,0x2392d4acd8,~
code-source-info,0x2ade89f8326,16,5794,5908,C0O5813C6O5850C22O5856C27O5850C29O5907,,
code-creation,Script,10,432624,0x2ade89f84de,5, evalmachine.<anonymous>:1:1,0x2ade89f8418,~
script-source,132,evalmachine.<anonymous>,this
code-source-info,0x2ade89f84de,132,0,4,C0O0C4O4,,
code-creation,LazyCompile,10,432718,0x2ade89f85d6,33,runInNewContext node:vm:144:18,0x6414eb7760,~
code-source-info,0x2ade89f85d6,93,4698,4857,C0O4746C10O4775C15O4746C21O4821C26O4821C32O4852,,
code-creation,LazyCompile,10,432842,0x2ade89f872e,109,runInContext node:vm:132:15,0x6414eb76f0,~
code-source-info,0x2ade89f872e,93,4294,4677,C0O4331C5O4331C9O4405C14O4405C20O4381C25O4396C30O4482C39O4511C47O4511C54O4535C59O4549C66O4581C77O4556C82O4607C83O4620C92O4646C103O4627C108O4672,,
code-creation,LazyCompile,10,432939,0x2ade89f88ce,33,validateContext node:vm:150:25,0x6414eb77d0,~
code-source-info,0x2ade89f88ce,93,4888,5088,C0O4914C3O4919C9O4957C25O4963C30O4957C32O5087,,
code-creation,LazyCompile,10,433068,0x2ade89f8b76,188,getRunInContextArgs node:vm:157:29,0x6414eb7820,~
code-source-info,0x2ade89f8b76,93,5120,5800,C9O5151C16O5170C24O5170C29O5233C34O5245C36O5279C41O5310C54O5310C59O5383C70O5410C78O5465C93O5510C101O5510C106O5570C114O5570C119O5632C126O5646C130O5672C139O5681C148O5708C157O5724C166O5746C175O5768C187O5797,,
code-creation,LazyCompile,10,433538,0x2ade89f8e26,63,handleErrorFromBinding node:internal/fs/utils:343:32,0x6414ea22a0,~
code-source-info,0x2ade89f8e26,84,8315,8826,C0O8334C6O8398C11O8398C16O8421C24O8421C29O8479C31O8479C32O8506C38O8738C43O8765C51O8738C56O8812C60O8802C62O8825,,
code-creation,LazyCompile,10,433654,0x2ade89f8f86,53,nextPart node:fs:2433:31,0x6414e99830,~
code-source-info,0x2ade89f8f86,83,67183,67434,C0O67210C4O67206C9O67243C14O67243C20O67327C22O67338C24O67334C31O67368C33O67364C38O67397C40O67406C41O67220C47O67197C50O67419C52O67429,,
code-creation,LazyCompile,10,433891,0x2ade89f910e,34,isFileType node:fs:209:20,0x6414e974d8,~
code-source-info,0x2ade89f910e,83,5460,5708,C0O5597C2O5602C6O5610C10O5645C15O5652C20O5669C22O5684C24O5682C30O5692C33O5705,,
code-creation,LazyCompile,10,434870,0x2ade89f92c6,72,encodeRealpathResult node:fs:2420:30,0x6414e997e0,~
code-source-info,0x2ade89f92c6,83,66772,67038,C0O66795C4O66820C10O66840C17O66849C22O66866C24O66880C25O66901C30O66908C35O66908C41O66937C48O66946C53O66967C55O66983C56O67008C61O67025C66O67008C71O67035,,
code-creation,Function,11,435129,0x246eeecc520,6232,resolve node:path:158:10,0x32ebb7cd4f0,^
code-source-info,0x246eeecc520,41,4875,9786,,,
code-creation,Function,11,435184,0x246eeecdde0,200, node:internal/modules/cjs/loader:242:41,0x2f2f3a342e8,^
code-source-info,0x246eeecdde0,106,7336,7362,,,
code-creation,Function,11,435239,0x246eeecdf20,412,isWindowsDeviceRoot node:path:60:29,0x32ebb7cd3e8,^
code-source-info,0x246eeecdf20,41,1991,2136,,,
code-creation,Function,11,435295,0x246eeece120,264,getOwnPropertyValueOrDefault node:internal/validators:221:38,0x2392d4ad28,^
code-source-info,0x246eeece120,16,5949,6097,,,
code-creation,Function,11,435358,0x246eeece2a0,272,validateString node:internal/validators:160:24,0x2392d4ab98,^
code-source-info,0x246eeece2a0,16,4261,4373,,,
code-creation,Function,11,435409,0x246eeece420,544,nextPart node:fs:2433:31,0x6414e99830,^
code-source-info,0x246eeece420,83,67183,67434,,,
code-creation,LazyCompile,10,435538,0x2ade89f9c6e,118,shouldUseESMLoader node:internal/modules/run_main:30:28,0x2ade89ca440,~
code-source-info,0x2ade89f9c6e,131,870,1612,C0O1060C8O1060C13O1120C19O1127C24O1137C25O1149C26O1194C34O1194C39O1252C41O1284C46O1301C47O1313C48O1363C54O1379C60O1379C67O1427C68O1439C69O1443C75O1460C81O1460C88O1508C89O1521C90O1537C95O1537C100O1568C102O1586C107O1591C114O1596C117O1609,,
code-creation,LazyCompile,10,435691,0x2ade89f9e9e,131,readPackageScope node:internal/modules/cjs/loader:393:26,0x2f2f3a33c98,~
code-source-info,0x2ade89f9e9e,106,11156,11690,C0O11200C7O11234C10O11200C16O11247C18O11276C25O11331C28O11293C34O11342C47O11354C54O11411C61O11450C66O11454C70O11415C77O11480C78O11493C79O11513C86O11538C88O11536C92O11513C97O11549C99O11560C106O11582C112O11602C118O11620C119O11648C121O11648C126O11266C129O11674C130O11687,,
code-creation,LazyCompile,10,435863,0x2ade89fa1ce,202,readPackage node:internal/modules/cjs/loader:351:21,0x2f2f3a33c48,~
code-source-info,0x2ade89fa1ce,106,10069,10829,C0O10105C5O10110C13O10110C20O10170C25O10187C30O10187C36O10205C38O10233C40O10249C41O10270C46O10288C51O10288C57O10327C63O10340C72O10366C77O10377C79O10408C84O10425C91O10425C97O10452C98O10465C102O10504C109O10524C112O10524C122O10504C128O10638C133O10655C138O10655C144O10685C146O10701C158O10724C163O10731C167O10748C175O10777C181O10788C188O10799C192O10795C195O10758C199O10813C201O10813,,
code-creation,LazyCompile,10,436081,0x2ade89fa4a6,199,read node:internal/modules/package_json_reader:16:14,0x2f2f3a3a218,~
code-source-info,0x2ade89fa4a6,107,307,992,C0O323C5O333C10O333C17O355C22O368C27O368C32O382C33O432C40O461C43O461C48O432C53O404C59O415C66O512C73O514C79O522C86O568C92O568C97O549C102O600C106O633C112O670C115O681C127O732C132O766C142O679C148O805C154O853C159O853C164O885C169O894C174O894C180O943C185O949C190O949C196O975C198O989,,
code-creation,LazyCompile,10,436703,0x2ade89fadc6,61,filterOwnProperties node:internal/util:529:29,0x2392d46f58,~
code-source-info,0x2ade89fadc6,15,15292,15545,C0O15329C7O15329C12O15365C14O15377C18O15370C23O15409C25O15413C29O15423C34O15427C41O15480C43O15502C46O15494C50O15386C55O15352C58O15526C60O15542,,
code-creation,LazyCompile,10,436850,0x2ade89fb1de,70,runMainESM node:internal/modules/run_main:51:20,0x2ade89ca490,~
code-source-info,0x2ade89fb1de,131,1635,1984,C0O1635C12O1671C20O1671C25O1659C30O1740C38O1740C43O1722C49O1770C54O1788C59O1788C64O1770C69O1983,,
code-creation,LazyCompile,10,436980,0x2ade89fb41e,222,loadESM node:internal/process/esm_loader:88:41,0x2f2f3a3ad68,~
code-source-info,0x2ade89fb41e,108,2757,3084,C10O2757C21O2784C24O2790C35O2784C58O2815C60O2830C63O2821C75O2815C113O2866C120O2870C125O2918C130O2926C138O2926C143O2955C154O2962C155O2975C163O2975C168O3000C178O3001C197O3083,,
code-creation,LazyCompile,10,437132,0x2ade89fba4e,294,initializeLoader node:internal/process/esm_loader:54:32,0x2f2f3a3ac38,~
code-source-info,0x2ade89fba4e,108,1734,2713,C10O1734C18O1742C24O1766C35O1773C36O1808C42O1808C47O1789C52O1862C55O1862C60O1926C66O1933C71O1940C82O1947C83O1957C88O1976C91O1990C96O1990C103O1996C110O1980C111O2021C114O2286C119O2286C125O2437C132O2470C135O2470C140O2488C147O2500C152O2500C163O2443C176O2413C202O2629C207O2645C212O2645C225O2629C248O2686C252O2703C269O2712,,
code-creation,LazyCompile,10,437291,0x2ade89fbd46,175,handleMainPromise node:internal/modules/run_main:62:33,0x2ade89ca4e0,~
code-source-info,0x2ade89fbd46,131,2020,2177,C10O2020C18O2035C21O2043C31O2054C34O2043C43O2088C53O2095C90O2130C93O2138C103O2150C106O2138C150O2176,,
code-creation,LazyCompile,10,437426,0x2ade89fbf06,77, node:internal/modules/run_main:55:29,0x2ade89fb118,~
code-source-info,0x2ade89fbf06,131,1796,1978,C0O1831C7O1836C15O1836C24O1866C30O1866C35O1889C44O1929C55O1953C60O1953C71O1935C76O1973,,
code-creation,LazyCompile,10,437597,0x2ade89fc186,283,pathToFileURL node:internal/url:1471:23,0xb0b6eba0c8,~
code-source-info,0x2ade89fc
code-creation,LazyCompile,10,438021,0x2ade89fc456,136,URL node:internal/url:633:14,0xb0b6eb8ee0,~
code-source-info,0x2ade89fc456,39,18158,18562,C13O18226C17O18255C19O18274C23O18307C30O18322C40O18336C42O18335C46O18358C50O18363C57O18378C60O18374C65O18372C69O18397C85O18450C93O18450C103O18507C117O18507C129O18397C135O18561,,
code-creation,LazyCompile,10,438184,0x2ade89fc636,51,URLContext node:internal/url:162:14,0xb0b6eb8680,~
code-source-info,0x2ade89fc636,39,3913,4135,C0O3923C1O3934C5O3944C7O3956C11O3968C13O3982C17O3993C19O4007C23O4018C24O4028C28O4041C29O4051C33O4064C35O4074C39O4085C40O4096C44O4109C45O4123C50O4134,,
code-creation,LazyCompile,10,438415,0x2ade89fc87e,190,onParseComplete node:internal/url:545:25,0xb0b6eb8c10,~
code-source-info,0x2ade89fc87e,39,15276,15962,C0O15392C2O15397C4O15396C8O15410C10O15420C14O15432C16O15443C20O15458C22O15482C24O15480C29O15506C43O15471C47O15532C49O15556C51O15554C56O15580C70O15545C74O15606C76O15615C80O15626C82O15646C84O15644C89O15666C101O15674C103O15635C107O15688C109O15698C113O15710C115O15723C119O15738C121O15747C125O15758C127O15768C129O15767C134O15822C136O15827C141O15847C144O15843C149O15841C153O15871C155O15876C157O15875C163O15890C168O15899C172O15915C177O15937C179O15936C183O15915C189O15961,,
code-creation,LazyCompile,10,438766,0x2ade89fcd16,934,URLSearchParams node:internal/url:184:14,0xb0b6eb8720,~
code-source-info,0x2ade89fcd
code-creation,LazyCompile,10,439010,0x2ade89fd33e,35,initSearchParams node:internal/url:1031:26,0xb0b6eb9c28,~
code-source-info,0x2ade89fd33e,39,28728,28849,C0O28745C4O28763C6O28767C11O28781C15O28792C16O28799C17O28808C19O28812C25O28828C29O28826C34O28848,,
code-creation,LazyCompile,10,439164,0x2ade89fd4ee,199,encodePathChars node:internal/url:1456:25,0xb0b6eba078,~
code-source-info,0x2ade89fd4ee,39,41511,42216,C0O41527C8O41531C15O41576C22O41620C31O41587C38O41702C46O41720C52O41720C59O41766C66O41810C75O41777C82O41837C90O41841C97O41887C104O41931C113O41898C120O41956C128O41960C135O42006C142O42050C151O42017C158O42082C166O42086C173O42132C180O42176C189O42143C196O42197C198O42213,,
code-creation,LazyCompile,10,439300,0x2ade89fd71e,70,set pathname node:internal/url:899:15,0xb0b6eb9818,~
code-source-info,0x2ade89fd71e,39,25152,25361,C0O25201C5O25224C9O25233C11O25232C16O25255C17O25262C18O25268C29O25280C38O25303C40O25302C49O25344C54O25344C63O25268C69O25360,,
code-creation,LazyCompile,10,439395,0x2ade89fd86e,31, node:internal/url:650:21,0xb0b6eb8fb8,~
code-source-info,0x2ade89fd86e,39,18675,18752,C0O18685C4O18698C6O18697C10O18707C19O18715C21O18713C26O18741C30O18747,,
code-creation,LazyCompile,10,439525,0x2ade89fd99e,108,onParsePathComplete node:internal/url:604:29,0xb0b6eb8df0,~
code-source-info,0x2ade89fd99e,39,17294,17776,C0O17414C2O17419C4O17418C8O17432C10O17445C12O17443C17O17465C22O17479C24O17488C28O17501C35O17514C40O17511C46O17551C48O17560C52O17571C59O17585C61O17584C66O17581C70O17667C72O17680C74O17678C79O17700C84O17714C86O17723C90O17736C97O17749C102O17746C107O17775,,
code-creation,LazyCompile,10,439641,0x2ade89fdb3e,18,get href node:internal/url:748:11,0xb0b6eb9148,~
code-source-info,0x2ade89fdb3e,39,21438,21478,C0O21448C4O21460C6O21459C12O21468C17O21473,,
code-creation,LazyCompile,10,439815,0x2ade89fde0e,393, node:internal/url:696:12,0xb0b6eb90a8,~
code-source-info,0x2ade89fde0e
code-creation,LazyCompile,10,440080,0x2ade89fe2e6,351,import node:internal/modules/esm/loader:509:15,0x2f2f3a3c6d0,~
code-source-info,0x2ade89fe2e6,109,15224,16563,C10O15224C18O15861C25O15861C30O15892C32O15907C41O15921C50O15968C55O15994C64O15994C70O16032C81O16227C90O16047C98O16037C100O16037C116O16075C124O16098C138O16075C145O16141C156O16142C162O16176C173O16177C178O16068C189O16019C204O16255C211O16261C223O16255C249O16290C253O16305C254O16322C267O16326C268O16382C270O16387C272O16387C277O16421C284O16478C293O16511C302O16424C306O16397C311O16369C314O16540C326O16558,,
code-creation,LazyCompile,10,440274,0x2ade89fe696,249,getModuleJob node:internal/modules/esm/loader:410:21,0x2f2f3a3c680,~
code-source-info,0x2ade89fe696,109,11865,12808,C10O11865C18O11917C20O12032C22O12041C26O12048C31O12053C38O12060C43O12227C54O12296C63O12380C80O12380C93O12369C116O12346C121O12354C126O12461C131O12471C136O12497C141O12471C148O12572C152O12617C157O12627C164O12653C174O12627C179O12675C183O12707C185O12718C206O12734C212O12792C224O12803,,
tick,0x7ff6d63c1746,440643,0,0x0,3,0x7ff6d61dcec0,0x2ade89fe6e6,0x2ade89fe370,0x2ade89fbf4d,0x2ade89fb45d,0x7ff6d6643c13
code-creation,LazyCompile,10,440708,0x2ade89fed9e,575,resolve node:internal/modules/esm/loader:788:16,0x2f2f3a3c810,~
code-source-info,0x2ade89fed9e
code-creation,LazyCompile,10,441055,0x2ade89ff59e,278,nextHookFactory node:internal/modules/esm/loader:114:25,0x2f2f3a3c470,~
code-source-info,0x2ade89ff59e,109,3442,5559,C0O3442C25O3458C31O3472C59O3549C64O3536C70O3612C80O3623C84O3617C88O3575C94O3591C100O3684C107O3697C114O3732C118O3697C127O3744C136O3744C141O3737C148O3684C150O3973C155O3978C159O3973C161O3996C162O3996C164O4013C169O4022C175O4032C180O4175C191O4189C195O4200C210O4238C219O4246C227O4260C231O4215C236O4213C240O4348C244O4361C246O4546C268O5535C272O4553C277O5556,,
code-creation,LazyCompile,10,441304,0x2ade89ff9ae,405,ObjectDefineProperty.__proto__ node:internal/modules/esm/loader:148:5,0x2ade89ff3d8,~
code-source-info,0x2ade89ff9ae,109,4580,5489,C10O4580C36O4594C62O4707C71O4735C83O4752C95O4730C99O4774C110O4790C113O4795C127O4823C146O4774C151O4894C160O4903C162O4902C166O4923C180O4931C195O4951C208O5052C214O5075C219O5084C227O5103C231O5122C235O5213C246O5226C249O5231C254O5213C259O5283C268O5300C271O5305C278O5314C284O5289C297O5283C323O5338C330O5338C335O5392C342O5402C351O5417C356O5429C364O5449C368O5466C380O5480,,
code-creation,LazyCompile,10,441450,0x2ade89ffc96,50,validateArgs node:internal/modules/esm/loader:821:26,0x2ade89fe9f0,~
code-source-info,0x2ade89ffc96,109,24721,24997,C0O24777C9O24833C17O24777C22O24929C26O24938C35O24961C43O24938C49O24996,,
new,MemoryChunk,0x65ec1c0000,262144
code-creation,LazyCompile,10,441910,0x64be93fae6,933,defaultResolve node:internal/modules/esm/resolve:1025:30,0x64be906380,~
code-source-info,0x64be93fae
code-creation,LazyCompile,10,442285,0x65ec1c36c6,31,shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:873:49,0x64be9061a0,~
code-source-info,0x65ec1c36c6,113,29736,29875,C0O29753C2O29767C7O29775C8O29788C9O29792C10O29805C16O29809C21O29818C22O29830C23O29834C26O29841C30O29872,,
code-creation,LazyCompile,10,442414,0x65ec1c37de,81,isRelativeSpecifier node:internal/modules/esm/resolve:863:29,0x64be906150,~
code-source-info,0x65ec1c37de,113,29433,29684,C0O29450C1O29463C7O29467C12O29497C19O29504C26O29522C32O29526C37O29535C38O29547C39O29553C41O29566C47O29570C52O29602C59O29609C66O29627C72O29631C77O29640C78O29652C79O29668C80O29681,,
code-creation,LazyCompile,10,442562,0x65ec1c396e,15,get protocol node:internal/url:784:15,0xb0b6eb9288,~
code-source-info,0x65ec1c396e,39,22358,22401,C0O22368C4O22380C6O22379C10O22389C14O22396,,
code-creation,LazyCompile,10,442690,0x65ec1c3b66,183,checkIfDisallowedImport node:internal/modules/esm/resolve:957:33,0x64be906290,~
code-source-info,0x65ec1c3b66,113,32614,33812,C0O32656C4O32712C11O32721C16O32759C23O32768C28O32797C31O32801C37O32960C41O32992C48O33001C53O33035C60O33044C65O33080C81O33086C86O33080C87O33278C92O33299C102O33306C103O33323C108O33341C113O33341C122O33387C125O33401C130O33401C137O33451C153O33457C158O33451C159O33637C175O33643C180O33637C182O33811,,
code-creation,LazyCompile,10,442836,0x65ec1c3dc6,104,throwIfUnsupportedURLScheme node:internal/modules/esm/resolve:1004:37,0x64be906330,~
code-source-info,0x65ec1c3dc6,113,34059,34530,C0O34101C4O34133C11O34142C16O34169C23O34178C30O34208C32O34263C39O34272C44O34304C51O34313C56O34353C63O34402C77O34461C88O34402C96O34359C101O34353C103O34529,,
code-creation,LazyCompile,10,443052,0x65ec1c3ffe,64,getConditionsSet node:internal/modules/esm/resolve:165:26,0x64be905a70,~
code-source-info,0x65ec1c3ffe,113,5474,5810,C0O5492C6O5539C8O5535C13O5566C18O5571C24O5606C40O5612C45O5606C46O5737C53O5744C58O5768C59O5777C63O5807,,
code-creation,LazyCompile,10,443194,0x65ec1c417e,171,moduleResolve node:internal/modules/esm/resolve:886:23,0x64be9061f0,~
code-source-info,0x65ec1c417e,113,30077,30868,C0O30152C7O30161C12O30186C19O30195C23O30318C25O30331C28O30335C34O30394C47O30405C55O30441C60O30467C66O30471C71O30487C83O30503C89O30490C99O30586C106O30597C115O30595C116O30639C120O30665C132O30676C138O30758C145O30767C150O30785C152O30801C153O30805C165O30812C170O30865,,
code-creation,LazyCompile,10,443478,0x65ec1c4476,454,finalizeResolution node:internal/modules/esm/resolve:297:28,0x64be905c50,~
code-source-info,0x65ec1c
code-creation,LazyCompile,10,443684,0x65ec1c4866,78,get pathname node:internal/url:890:15,0xb0b6eb97a8,~
code-source-info,0x65ec1c4866,39,24934,25134,C0O24956C4O24961C6O24960C10O24976C14O24985C16O24984C21O25018C27O25022C30O25026C31O25040C36O25045C42O25052C47O25066C49O25076C50O25082C57O25093C60O25116C68O25093C77O25129,,
code-creation,LazyCompile,10,443922,0x65ec1c4abe,106,fileURLToPath node:internal/url:1429:23,0xb0b6eba028,~
code-source-info,0x65ec1c4abe,39,40375,40708,C0O40387C6O40422C13O40429C22O40452C25O40457C31O40483C49O40489C54O40483C55O40560C62O40569C67O40587C77O40593C82O40587C83O40632C92O40651C101O40679C105O40705,,
code-creation,LazyCompile,10,444073,0x65ec1c4cf6,150,get origin node:internal/url:761:13,0xb0b6eb9218,~
code-source-info,0x65ec1c4cf6,39,21760,22340,C0O21844C4O21849C6O21848C10O21876C59O21924C64O21929C70O21936C78O21973C83O21993C89O21997C95O21981C101O22003C105O22010C110O22108C116O22129C117O22241C122O22273C127O22285C132O22295C137O22248C142O22301C143O22314C149O22335,,
code-creation,LazyCompile,10,444256,0x65ec1c4fde,261,getPathFromURLWin32 node:internal/url:1376:29,0xb0b6eb9f88,~
code-source-info,0x65ec1c4fde
code-creation,LazyCompile,10,444410,0x65ec1c5286,19,get hostname node:internal/url:856:15,0xb0b6eb95f8,~
code-source-info,0x65ec1c5286,39,24110,24157,C0O24120C4O24132C6O24131C10O24141C18O24152,,
code-creation,LazyCompile,10,444564,0x65ec1c53ae,30,tryStatSync node:internal/modules/esm/resolve:183:3,0x64be9063d0,~
code-source-info,0x65ec1c53ae,113,5952,6018,C0O6007C5O5971C10O5962C21O6011C24O6007C29O6018,,
code-creation,LazyCompile,10,444695,0x65ec1c56d6,123,statSync node:fs:1575:18,0x6414e98978,~
code-source-info,0x65ec1c56d6,83,41685,42099,C7O41685C16O41748C21O41755C26O41794C33O41796C40O41821C45O41829C52O41834C55O41845C60O41845C66O41907C76O41829C82O41947C88O41962C96O41975C102O42004C103O42021C104O42030C109O42030C113O42062C118O42069C122O42096,,
code-creation,LazyCompile,10,444804,0x65ec1c5876,37, node:internal/fs/utils:683:42,0x6414ea2cc8,~
code-source-info,0x65ec1c5876,84,19209,19348,C14O19265C19O19265C24O19300C29O19300C34O19333C36O19345,,
code-creation,LazyCompile,10,445156,0x65ec1c59b6,64,hasNoEntryError node:fs:1513:25,0x6414e98848,~
code-source-info,0x65ec1c59b6,83,40113,40315,C0O40132C6O40160C11O40176C16O40160C21O40189C27O40203C36O40207C39O40220C40O40239C46O40264C51O40270C58O40275C61O40288C62O40299C63O40312,,
code-creation,LazyCompile,10,445327,0x65ec1c5aee,576,getStatsFromBinding node:internal/fs/utils:533:29,0x6414ea2a98,~
code-source-info,0x65ec1c5aee
code-creation,LazyCompile,10,445512,0x65ec1c5f1e,16,isBigUint64Array node:internal/util/types:53:26,0x2392d4c520,~
code-source-info,0x65ec1c5f1e,17,1423,1514,C0O1436C5O1443C12O1490C15O1511,,
code-creation,LazyCompile,10,445593,0x65ec1c603e,19,msFromTimeSpec node:internal/fs/utils:449:24,0x6414ea27c0,~
code-source-info,0x65ec1c603e,84,11503,11564,C0O11520C2O11533C4O11531C10O11552C12O11550C15O11543C18O11561,,
code-creation,LazyCompile,10,445706,0x65ec1c627e,116,Stats node:internal/fs/utils:498:15,0x6414ea29b8,~
code-source-info,0x65ec1c627e,84,13295,13836,C0O13435C41O13435C46O13565C48O13578C52O13592C54O13605C58O13619C60O13632C64O13646C66O13663C70O13681C73O13694C77O13692C81O13718C84O13731C88O13729C92O13755C95O13768C99O13766C103O13792C106O13809C110O13807C115O13835,,
code-creation,LazyCompile,10,445819,0x65ec1c6456,62,StatsBase node:internal/fs/utils:403:19,0x6414ea2390,~
code-source-info,0x65ec1c6456,84,10364,10665,C0O10452C2O10461C6O10471C8O10481C12O10492C14O10503C18O10515C20O10524C24O10534C26O10543C30O10553C32O10563C36O10574C38O10587C42O10601C44O10610C48O10620C50O10630C54O10641C56O10653C61O10664,,
code-creation,LazyCompile,10,445969,0x65ec1c664e,29,dateFromMs node:internal/fs/utils:463:20,0x6414ea2860,~
code-source-info,0x65ec1c664e,84,12029,12076,C0O12039C7O12055C10O12055C17O12066C23O12046C28O12073,,
code-creation,LazyCompile,10,446075,0x65ec1c6756,16,StatsBase.isDirectory node:internal/fs/utils:417:43,0x6414ea23e0,~
code-source-info,0x65ec1c6756,84,10711,10762,C0O10731C7O10750C10O10731C15O10759,,
code-creation,LazyCompile,10,446163,0x65ec1c686e,54,Stats._checkModeProperty node:internal/fs/utils:520:46,0x6414ea2a08,~
code-source-info,0x65ec1c686e,84,14194,14422,C0O14210C8O14241C10O14237C17O14265C19O14261C26O14294C28O14290C33O14312C34O14325C35O14391C42O14398C44O14396C50O14406C53O14419,,
code-creation,LazyCompile,10,446248,0x65ec1c69a6,16,StatsBase.isFile node:internal/fs/utils:421:38,0x6414ea2470,~
code-source-info,0x65ec1c69a6,84,10804,10855,C0O10824C7O10843C10O10824C15O10852,,
code-creation,RegExp,3,446503,0x246eeece6a0,1592,^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*
code-creation,Function,11,447004,0x246eeeced40,320,isFileType node:fs:209:20,0x6414e974d8,^
code-source-info,0x246eeeced40,83,5460,5708,,,
code-creation,Function,11,447076,0x246eeeceee0,904, node:internal/validators:240:3,0x2392d4ad78,^
code-source-info,0x246eeeceee0,16,6377,6943,,,
code-creation,Function,11,447128,0x246eeecf2e0,252,SafeSet node:internal/per_context/primordials:379:16,0x39b87cab40,^
code-source-info,0x246eeecf2e0,6,11306,11323,,,
code-creation,Function,11,447202,0x246eeecf440,1936,toNamespacedPath node:path:618:19,0x32ebb7cd6d8,^
code-source-info,0x246eeecf440,41,20086,21201,,,
code-creation,LazyCompile,10,448002,0x65ec1c6f5e,37,get search node:internal/url:908:13,0xb0b6eb9888,~
code-source-info,0x65ec1c6f5e,39,25377,25508,C0O25405C4O25410C6O25409C10O25395C15O25425C19O25453C24O25468C26O25478C27O25484C32O25495C36O25503,,
code-creation,LazyCompile,10,448107,0x65ec1c70a6,37,get hash node:internal/url:938:11,0xb0b6eb99d8,~
code-source-info,0x65ec1c70a6,39,26139,26282,C0O26170C4O26175C6O26174C10O26157C15O26190C19O26224C24O26239C26O26249C27O26255C32O26266C36O26277,,
code-creation,LazyCompile,10,448318,0x65ec1c7236,181,set search node:internal/url:915:13,0xb0b6eb98f8,~
code-source-info,0x65ec1c7236,39,25524,26047,C0O25552C4O25557C6O25556C10O25572C17O25581C23O25607C25O25618C30O25635C31O25645C35O25660C44O25674C46O25673C51O25670C57O25716C58O25726C64O25730C69O25739C79O25748C86O25788C88O25798C92O25811C101O25824C106O25821C110O25852C114O25875C125O25889C134O25923C142O25923C154O25875C159O25997C168O26019C170O26018C174O25997C180O26046,,
code-creation,LazyCompile,10,448450,0x65ec1c742e,41,toUSVString node:internal/util:62:21,0x2392d458a8,~
code-source-info,0x65ec1c742e,15,1479,1779,C0O1502C4O1656C11O1676C14O1656C20O1706C22O1723C24O1734C25O1738C30O1769C35O1745C40O1776,,
code-creation,LazyCompile,10,448603,0x65ec1c75a6,144,set hash node:internal/url:945:11,0xb0b6eb9a40,~
code-source-info,0x65ec1c75a6,39,26296,26743,C0O26322C4O26327C6O26326C10O26377C15O26400C17O26420C18O26433C22O26448C31O26462C33O26461C38O26458C42O26493C43O26500C44O26513C45O26521C51O26525C56O26534C66O26541C73O26577C75O26590C79O26601C88O26614C93O26611C97O26643C108O26655C117O26688C125O26688C137O26643C143O26742,,
code-creation,LazyCompile,10,448727,0x65ec1c776e,51,throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:997:39,0x64be9062e0,~
code-source-info,0x65ec1c776e,113,33854,34019,C0O33873C7O33882C12O33901C19O33910C24O33936C31O33945C36O33965C43O33971C48O33965C50O34018,,
code-creation,LazyCompile,10,448879,0x65ec1c7906,64,defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:102:39,0x64be90acc8,~
code-source-info,0x65ec1c7906,115,3502,3713,C0O3537C7O3537C13O3554C20O3589C23O3614C28O3559C35O3630C36O3642C37O3646C42O3677C46O3669C58O3686C63O3710,,
code-creation,LazyCompile,10,448975,0x65ec1c7e3e,18,toString node:internal/url:744:11,0xb0b6eb90f8,~
code-source-info,0x65ec1c7e3e,39,21384,21424,C0O21394C4O21406C6O21405C12O21414C17O21419,,
code-creation,LazyCompile,10,449169,0x65ec1c81e6,280,getFileProtocolModuleFormat node:internal/modules/esm/get_format:50:37,0x64be90ac28,~
code-source-info,0x65ec1c81e6,115,1542,2876,C0O1593C5O1593C10O1628C15O1628C20O1650C22O1658C27O1676C32O1683C39O1703C50O1740C51O1766C58O1784C62O1794C64O1806C66O1820C67O1826C74O1862C79O1961C83O1979C84O1996C85O2019C88O2028C93O2032C100O2052C107O2072C112O2104C117O2104C122O2160C127O2160C132O2208C139O2229C142O2245C147O2229C156O2208C162O2278C167O2349C171O2445C182O2424C191O2522C201O2499C207O2575C216O2701C229O2719C239O2662C243O2753C259O2759C264O2753C265O2828C270O2835C279O2873,,
code-creation,LazyCompile,10,449462,0x65ec1c8776,275,extname node:path:836:10,0x32ebb7cd818,~
code-source-info,0x65ec1c
code-creation,LazyCompile,10,449629,0x65ec1c8a0e,15,getPackageType node:internal/modules/esm/resolve:744:24,0x64be906010,~
code-source-info,0x65ec1c8a0e,113,25551,25644,C0O25584C5O25584C10O25636C14O25641,,
code-creation,LazyCompile,10,449771,0x65ec1c8c66,173,getPackageScopeConfig node:internal/modules/esm/package_config:105:31,0x64be909dc0,~
code-source-info,0x65ec1c8c66,114,2598,3694,C0O2635C13O2635C19O2734C24O2749C32O2753C39O2833C41O2874C46O2891C49O2891C54O2874C60O2956C66O2973C68O2994C69O3036C72O3057C85O3074C91O3283C96O3315C100O3292C105O3334C107O2675C110O3380C115O3380C120O3436C127O3454C132O3502C137O3524C142O3568C147O3593C154O3613C159O3630C164O3630C170O3670C172O3691,,
code-creation,LazyCompile,10,450091,0x65ec1c95be,365,getPackageConfig node:internal/modules/esm/package_config:40:26,0x64be909d70,~
code-source-info,0x65ec1c95be
code-creation,Function,11,450370,0x246eeecfc40,1468,onParseComplete node:internal/url:545:25,0xb0b6eb8c10,^
code-source-info,0x246eeecfc40,39,15276,15962,,,
code-creation,Function,11,450426,0x246eeed0260,280, node:internal/url:650:21,0xb0b6eb8fb8,^
code-source-info,0x246eeed0260,39,18675,18752,,,
code-creation,Function,11,450472,0x246eeed03e0,156,get protocol node:internal/url:784:15,0xb0b6eb9288,^
code-source-info,0x246eeed03e0,39,22358,22401,,,
code-creation,Function,11,450544,0x246eeed04e0,1912,getPathFromURLWin32 node:internal/url:1376:29,0xb0b6eb9f88,^
code-source-info,0x246eeed04e0,39,38422,39825,,,
code-creation,Function,11,450591,0x246eeed0cc0,340,URLContext node:internal/url:162:14,0xb0b6eb8680,^
code-source-info,0x246eeed0cc0,39,3913,4135,,,
code-creation,LazyCompile,10,450842,0x65ec1c9fa6,33,primordials.SafePromiseAll node:internal/per_context/primordials:449:30,0x39b87caf68,~
code-source-info,0x65ec1c9fa6,6,13624,13856,C0O13624C13O13753C27O13753C32O13856,,
code-creation,LazyCompile,10,450938,0x65ec1ca0e6,49, node:internal/per_context/primordials:452:15,0x65ec1c9ef8,~
code-source-info,0x65ec1ca0e6,6,13765,13851,C0O13841C7O13792C16O13796C25O13796C31O13792C37O13840C42O13841C48O13851,,
code-creation,LazyCompile,10,451033,0x65ec1ca26e,45,arrayToSafePromiseIterable node:internal/per_context/primordials:435:36,0x39b87caf18,~
code-source-info,0x65ec1ca26e,6,13205,13447,C0O13205C9O13229C14O13245C23O13269C26O13295C31O13269C39O13229C44O13447,,
code-creation,LazyCompile,10,451129,0x65ec1ca42e,33, node:internal/per_context/primordials:439:7,0x65ec1ca1b8,~
code-source-info,0x65ec1ca42e,6,13312,13435,C0O13312C13O13337C27O13337C32O13435,,
code-creation,LazyCompile,10,451205,0x65ec1ca55e,27,SafePromise node:internal/per_context/primordials:408:16,0x39b87cae08,~
code-source-info,0x65ec1ca55e,6,12178,12209,C3O12191C7O12197C11O12191C26O12208,,
code-creation,LazyCompile,10,451306,0x65ec1ca656,47, node:internal/per_context/primordials:440:25,0x65ec1ca380,~
code-source-info,0x65ec1ca656,6,13353,13434,C0O13363C29O13410C41O13363C46O13434,,
code-creation,LazyCompile,10,451388,0x65ec1ca74e,3, node:internal/per_context/primordials:291:21,0x39b87ca4d0,~
code-source-info,0x65ec1ca74e,6,8563,8594,C0O8575C2O8587,,
code-creation,LazyCompile,10,451496,0x65ec1ca816,36,validateOutput node:internal/modules/esm/loader:829:28,0x2ade89fea40,~
code-source-info,0x65ec1ca816,109,25027,25272,C0O25067C10O25136C28O25142C33O25136C35O25271,,
code-creation,LazyCompile,10,451594,0x65ec1ca946,80,has node:internal/modules/esm/module_map:37:6,0x2f2f3a3f6e8,~
code-source-info,0x65ec1ca946,110,1295,1453,C11O1308C18O1336C28O1336C33O1369C43O1369C48O1404C50O1417C61O1417C71O1427C78O1434C79O1448,,
code-creation,LazyCompile,10,451738,0x65ec1caab6,78,get node:internal/modules/esm/module_map:18:6,0x2f2f3a3f648,~
code-source-info,0x65ec1caab6,110,604,748,C11O617C18O645C28O645C33O678C43O678C48O713C50O726C61O726C71O736C77O743,,
code-creation,LazyCompile,10,451887,0x65ec1cad1e,164,#createModuleJob node:internal/modules/esm/loader:451:19,0x2f2f3a3c4f0,~
code-source-info,0x65ec1cad1e,109,13475,14485,C0O13475C17O13548C22O14033C31O14076C37O14076C42O14123C47O14135C52O14139C63O14176C69O14191C74O14199C86O14222C90O14199C95O14256C123O14256C129O14409C132O14414C137O14424C145O14450C156O14424C161O14469C163O14480,,
code-creation,LazyCompile,10,452100,0x65ec1cb096,198,ModuleJob node:internal/modules/esm/module_job:53:14,0x64be901460,~
code-source-info,0x65ec1cb096,111,1307,3126,C0O1307C27O1340C32O1340C50O1418C55O1430C59O1445C64O1467C68O1492C73O1504C77O1519C82O1535C86O1556C90O1568C94O1706C101O1727C104O1756C113O1765C122O1770C135O1727C140O1725C144O1877C149O2792C152O2806C155O2804C159O2916C169O2942C180O2961C183O2916C188O3091C192O3109C197O3125,,
code-creation,LazyCompile,10,452277,0x65ec1cbaee,198,moduleProvider node:internal/modules/esm/loader:452:28,0x65ec1cabf8,~
code-source-info,0x65ec1cbaee,109,13548,14005,C10O13548C18O13668C21O13679C26O13684C33O13700C39O13717C43O13679C57O13668C80O13605C85O13627C90O13649C95O13774C102O13786C107O13786C113O13813C115O13841C130O13847C135O13841C136O13922C158O13929C173O13998,,
code-creation,LazyCompile,10,452576,0x65ec1cc15e,607,load node:internal/modules/esm/loader:556:13,0x2f2f3a3c720,~
code-source-info,0x65ec1cc15e
code-creation,LazyCompile,10,452809,0x65ec1cc616,137,validateArgs node:internal/modules/esm/loader:567:26,0x65ec1cbe30,~
code-source-info,0x65ec1cc616,109,17356,18134,C0O17402C6O17559C15O17605C31O17565C36O17559C37O17778C40O17788C45O17798C50O17798C60O17840C69O17840C78O17888C87O17937C103O17894C108O17888C109O18066C113O18075C122O18098C130O18075C136O18133,,
code-creation,LazyCompile,10,452995,0x65ec1cc89e,238,defaultLoad node:internal/modules/esm/load:72:27,0x64be92ac08,~
code-source-info,0x65ec1cc89e,125,2270,2805,C10O2270C18O2308C21O2324C26O2368C31O2381C36O2410C41O2437C46O2452C59O2446C87O2494C101O2494C106O2550C108O2567C115O2596C120O2623C124O2648C129O2675C132O2708C145O2702C168O2678C173O2691C178O2744C185O2758C191O2771C197O2789C213O2802,,
code-creation,LazyCompile,10,453138,0x65ec1cce26,150,validateAssertions node:internal/modules/esm/assert:55:28,0x64be9034e0,~
code-source-info,0x65ec1cce26,112,1835,2993,C12O1897C17O1897C26O1940C33O1953C37O1968C38O1999C48O2155C55O2505C66O2130C67O2142C68O2320C76O2325C83O2393C84O2405C85O2422C88O2469C93O2429C98O2475C99O2581C100O2593C101O2745C109O2750C116O2862C129O2868C134O2862C135O2939C138O2979C143O2939C149O2992,,
code-creation,LazyCompile,10,453355,0x65ec1cd1d6,450,getSource node:internal/modules/esm/load:32:25,0x64be92abb8,~
code-source-info,0x65ec1cd1d6,125,1031,2123,C10O1031C18O1066C25O1066C31O1101C34O1113C36O1135C43O1144C48O1164C53O1179C65O1173C95O1223C102O1232C107O1266C114O1286C117O1311C122O1266C128O1327C130O1348C137O1354C142O1348C143O1403C150O1414C157O1435C164O1455C167O1455C174O1481C183O1444C191O1520C197O1568C204O1577C209O1605C216O1614C221O1651C226O1657C239O1651C265O1711C277O1701C303O1740C310O1796C315O1819C321O1860C335O1860C340O1927C353O1933C358O1927C359O2003C366O2013C375O2032C380O2039C385O2048C390O2048C396O2089C403O2098C409O2111C425O2120,,
code-creation,LazyCompile,10,453614,0x65ec1cd5de,196,readFile node:internal/fs/promises:811:24,0x64be92d170,~
code-source-info,0x65ec1cd5de,126,23406,23752,C10O23406C18O23427C23O23448C28O23437C35O23497C44O23515C46O23535C48O23524C53O23552C56O23559C71O23589C72O23595C75O23616C80O23595C84O23641C98O23647C111O23641C137O23675C145O23710C151O23742C156O23682C171O23749,,
code-creation,LazyCompile,10,453735,0x65ec1cf2f6,56,checkAborted node:internal/fs/promises:325:22,0x64be92c4a0,~
code-source-info,0x65ec1cf2f6,126,7537,7639,C0O7551C7O7561C16O7577C23O7598C35O7624C48O7583C53O7577C55O7638,,
code-creation,LazyCompile,10,453845,0x65ec1cf4be,182,open node:internal/fs/promises:455:20,0x64be92c680,~
code-source-info,0x65ec1cf4be,126,11856,12169,C10O11856C18O11881C23O11888C29O11935C34O11935C39O11960C55O11967C62O12006C69O12040C72O12048C79O12063C82O12074C87O12074C95O12151C104O12048C117O12034C142O12013C157O12166,,
code-creation,LazyCompile,10,454072,0x65ec1cfac6,515,stringToFlags node:internal/fs/utils:558:23,0x6414ea2ae8,~
code-source-info,0x65ec1cfac
code-creation,LazyCompile,10,454289,0x65ec1cfe9e,86,parseFileMode node:internal/validators:69:23,0x2392d4aa38,~
code-source-info,0x65ec1cfe9e,16,1703,2003,C0O1727C11O1745C17O1783C24O1807C27O1787C34O1843C41O1888C52O1849C57O1843C58O1911C66O1919C73O1955C78O1955C83O1987C85O2000,,
code-creation,LazyCompile,10,455868,0x65ec1d01e6,233,link node:internal/modules/esm/module_job:66:18,0x65ec1caf18,~
code-source-info,0x65ec1d01e6,111,1877,2733,C4O1877C26O1898C36O1923C48O1912C73O1910C77O1945C89O1957C98O1975C100O1964C104O1945C108O2297C110O2297C112O2325C117O2330C122O2337C132O2337C138O2610C140O2647C147O2653C159O2647C184O2688C194O2695C208O2726,,
code-creation,LazyCompile,10,456068,0x65ec1d04ee,216,set node:internal/modules/esm/module_map:23:6,0x2f2f3a3f698,~
code-source-info,0x65ec1d04ee,110,755,1288,C11O768C21O801C31O801C36O834C46O834C51O869C55O888C57O877C62O898C73O955C91O961C96O955C97O1024C109O1041C124O1066C126O1062C137O1106C148O1024C152O1165C154O1171C165O1171C178O1183C183O1183C188O1208C190O1231C194O1243C196O1256C210O1256C215O1283,,
code-creation,LazyCompile,10,456215,0x65ec1d06ee,89,logger node:internal/util/debuglog:95:18,0x2392d68328,~
code-source-info,0x65ec1d06ee,22,2963,3164,C0O2963C3O2996C24O3021C30O3038C34O3028C38O3043C39O3059C45O3076C51O3085C55O3066C60O3090C61O3107C65O3114C72O3127C77O3123C83O3114C88O3152,,
tick,0x7ff8131db80a,456449,0,0x0,3,0x7ff6d61dcec0,0x65ec1d0710,0x65ec1d0582,0x65ec1cadba,0x2ade89fe764,0x7ff6d6643c13
code-creation,LazyCompile,10,456480,0x65ec1d0856,140,debug node:internal/util/debuglog:76:15,0x2392d68288,~
code-source-info,0x65ec1d0856,22,2432,2838,C0O2432C3O2452C6O2452C9O2563C16O2584C22O2571C30O2569C36O2604C42O2641C47O2644C50O2641C54O2670C75O2695C81O2712C85O2702C89O2717C90O2733C96O2750C102O2759C106O2740C111O2764C112O2781C116O2788C123O2801C128O2797C134O2788C139O2826,,
code-creation,LazyCompile,10,456631,0x65ec1d0a06,41,init node:internal/util/debuglog:72:16,0x2392d68238,~
code-source-info,0x65ec1d0a06,22,2330,2416,C0O2340C10O2346C14O2344C16O2384C26O2394C33O2392C40O2415,,
code-creation,LazyCompile,10,456709,0x65ec1d0af6,2,testEnabled node:internal/util/debuglog:32:19,0x2f2f3a26328,~
code-source-info,0x65ec1d0af6,22,1004,1015,C0O1010C1O1015,,
code-creation,LazyCompile,10,456839,0x65ec1d0c8e,116,debuglogImpl node:internal/util/debuglog:49:22,0x2392d68088,~
code-source-info,0x65ec1d0c8e,22,1499,2059,C0O1499C9O1519C18O1533C23O1561C34O1595C39O1603C43O1595C45O1615C55O1615C59O1648C71O1659C75O1664C83O1994C97O2012C99O2010C103O2033C112O2050C115O2056,,
code-creation,LazyCompile,10,456944,0x65ec1d0e46,10, node:internal/modules/esm/module_map:9:63,0x2f2f3a3f5a8,~
code-source-info,0x65ec1d0e46,110,271,298,C0O284C2O290C9O297,,
code-creation,LazyCompile,10,457010,0x65ec1d0ef6,2,noop node:internal/util/debuglog:47:14,0x2392d68038,~
code-source-info,0x65ec1d0ef6,22,1465,1473,C1O1472,,
code-creation,LazyCompile,10,457089,0x65ec1d0fae,10, node:internal/modules/esm/loader:526:15,0x2ade89fe108,~
code-source-info,0x65ec1d0fae,109,16147,16165,C0O16160C5O16160C9O16165,,
code-creation,LazyCompile,10,457316,0x65ec1d1406,435,run node:internal/modules/esm/module_job:188:12,0x64be901550,~
code-source-info,0x65ec1d1406,111,6993,8206,C10O6993C18O7014C23O7014C35O7003C58O7050C61O7081C66O7117C71O7124C76O7124C90O7106C128O7184C133O7189C143O7196C152O7231C158O7269C163O7231C169O7290C182O7300C186O7337C196O7369C204O7341C211O7404C224O7414C228O7504C235O7535C240O7542C248O7504C259O7574C267O7624C272O7631C277O7574C283O7636C294O7661C299O7716C304O7744C309O7751C314O7717C320O7784C327O7789C332O7816C346O7965C360O7907C366O7988C372O8068C378O7826C382O8149C384O8149C385O8170C390O8192C410O8201,,
code-creation,LazyCompile,10,457463,0x65ec1d1746,24,instantiate node:internal/modules/esm/module_job:98:14,0x64be9014b0,~
code-source-info,0x65ec1d1746,111,3143,3282,C0O3162C6O3224C11O3224C15O3217C19O3264C23O3277,,
code-creation,LazyCompile,10,457741,0x65ec1d1e36,935,_instantiate node:internal/modules/esm/module_job:105:21,0x64be901500,~
code-source-info,0x65ec1d1e
code-creation,LazyCompile,10,457973,0x65ec1d2496,152,addJobsToDependencyGraph node:internal/modules/esm/module_job:107:38,0x65ec1d1b78,~
code-source-info,0x65ec1d2496,111,3389,3646,C10O3389C18O3419C23O3435C28O3435C35O3462C46O3469C47O3486C52O3498C57O3498C62O3560C74O3544C100O3575C109O3613C112O3582C127O3639,,
tick,0x7ff813250394,471538,0,0x0,8
code-creation,LazyCompile,10,473467,0x65ec1d264e,112,FileHandle node:internal/fs/promises:122:14,0x64be92d1c0,~
code-source-info,0x65ec1d264e,126,3033,3206,C3O3053C11O3053C40O3067C45O3072C50O3081C54O3100C59O3105C67O3112C69O3136C77O3110C81O3152C86O3157C91O3164C95O3174C100O3179C104O3194C111O3205,,
code-creation,LazyCompile,10,473602,0x65ec1d27ce,63,MixedEventEmitter node:internal/event_target:1064:16,0x64be938408,~
code-source-info,0x65ec1d27ce,44,28805,28939,C0O28805C8O28824C15O28831C21O28867C25O28876C29O28867C41O28890C48O28912C54O28890C62O28938,,
code-creation,LazyCompile,10,473723,0x65ec1d2906,21,EventEmitter node:events:212:22,0x2392d713c0,~
code-source-info,0x65ec1d2906,23,6524,6574,C0O6536C3O6549C8O6554C13O6554C20O6573,,
code-creation,LazyCompile,10,473841,0x65ec1d2a4e,149,EventEmitter.init node:events:337:29,0x2392d717b8,~
code-source-info,0x65ec1d2a4e,23,10180,10788,C0O10203C6O10240C13O10252C16O10252C21O10278C25O10248C30O10295C32O10310C37O10310C41O10308C45O10335C46O10353C50O10394C60O10387C64O10429C71O10437C80O10465C85O10486C93O10465C98O10540C100O10545C105O10557C108O10570C113O10557C117O10555C123O10730C125O10735C131O10760C138O10770C140O10769C143O10745C148O10787,,
code-creation,LazyCompile,10,474186,0x65ec1d2dce,601,readFileHandle node:internal/fs/promises:365:30,0x64be92c540,~
code-source-info,0x65ec1d2dce
code-creation,LazyCompile,10,474399,0x65ec1d3216,8,get fd node:internal/fs/promises:135:9,0x64be92d278,~
code-source-info,0x65ec1d3216,126,3283,3315,C0O3293C2O3305C4O3304C7O3310,,
code-creation,LazyCompile,10,474534,0x65ec1d33b6,33,primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:421:43,0x39b87cae58,~
code-source-info,0x65ec1d33b6,6,12725,13005,C0O12725C13O12861C27O12861C32O13005,,
code-creation,LazyCompile,10,474624,0x65ec1d3546,46, node:internal/per_context/primordials:424:15,0x65ec1d3308,~
code-source-info,0x65ec1d3546,6,12873,13000,C0O12990C14O12888C20O12963C28O12970C34O12989C39O12990C45O13000,,
code-creation,LazyCompile,10,474704,0x65ec1d3686,22, node:internal/per_context/primordials:425:21,0x65ec1d3490,~
code-source-info,0x65ec1d3686,6,12904,12953,C0O12914C16O12914C21O12953,,
code-creation,LazyCompile,10,474844,0x65ec1d377e,19,allocUnsafeSlow node:buffer:388:50,0x2392d7d870,~
code-source-info,0x65ec1d377e,24,11717,11785,C0O11729C5O11729C9O11750C14O11757C18O11782,,
code-creation,LazyCompile,10,474938,0x65ec1d388e,54, node:buffer:354:36,0x2392d7d748,~
code-source-info,0x65ec1d388e,24,10661,10821,C0O10676C8O10676C13O10709C14O10720C21O10736C23O10733C28O10756C33O10788C46O10762C51O10756C53O10820,,
code-creation,LazyCompile,10,475061,0x65ec1d3a16,177,validateNumber node:internal/validators:175:24,0x2392d4ac38,~
code-source-info,0x65ec1d3a16,16,4609,5065,C19O4650C25O4686C41O4692C46O4686C47O4746C54O4772C66O4804C83O4854C86O4854C92O4882C110O4953C136O4985C151O5029C169O4888C174O4882C176O5064,,
code-creation,LazyCompile,10,475166,0x65ec1d3bf6,71,createUnsafeBuffer node:internal/buffer:1059:28,0xb0b6e8bd18,~
code-source-info,0x65ec1d3bf6,25,31379,31495,C0O31391C8O31403C15O31422C22O31429C39O31471C48O31483C70O31494,,
code-creation,LazyCompile,10,475529,0x65ec1d3ee6,248,close node:internal/fs/promises:195:11,0x64be92f3e0,~
code-source-info,0x65ec1d3ee6,126,4469,5290,C0O4482C7O4491C9O4490C15O4496C20O4513C27O4520C30O4537C31O4552C38O4561C40O4560C45O4586C52O4598C54O4597C57O4613C58O4628C65O4633C73O4639C77O4648C84O4657C86O4656C91O4664C96O4680C103O4685C108O4690C112O4703C119O4708C126O4725C136O4768C138O4767C142O4777C147O4777C157O4725C162O4723C168O4869C175O4874C182O4891C189O4933C199O4929C210O4891C215O4889C219O5233C222O5238C230O5238C235O5258C242O5270C244O5269C247O5285,,
code-creation,LazyCompile,10,475882,0x65ec1d424e,17, node:internal/fs/promises:209:9,0x65ec1d3cd0,~
code-source-info,0x65ec1d424e,126,4795,4837,C0O4803C7O4808C11O4823C16O4836,,
code-creation,LazyCompile,10,476017,0x65ec1d433e,36,validateOutput node:internal/modules/esm/loader:593:28,0x65ec1cbe80,~
code-source-info,0x65ec1d433e,109,18164,18409,C0O18204C10O18273C28O18279C33O18273C35O18408,,
code-creation,LazyCompile,10,476278,0x65ec1d46c6,200,moduleStrategy node:internal/modules/esm/translators:114:56,0x64be93b688,~
code-source-info,0x65ec1d46c6,128,3264,3694,C0O3264C27O3291C40O3291C45O3336C50O3345C56O3367C66O3367C71O3404C83O3440C88O3404C92O3466C113O3466C119O3515C126O3526C131O3538C136O3542C141O3579C153O3642C157O3538C163O3677C175O3691,,
code-creation,LazyCompile,10,476421,0x65ec1d543e,83,assertBufferSource node:internal/modules/esm/translators:78:28,0x64be93b458,~
code-source-info,0x65ec1d543e,128,2217,2624,C0O2252C10O2304C11O2311C12O2368C15O2368C19O2328C24O2347C29O2388C35O2415C41O2446C42O2453C43O2462C50O2515C77O2468C82O2462,,
code-creation,LazyCompile,10,476515,0x65ec1d5596,31,lazyTypes node:internal/modules/esm/translators:22:19,0x64be93b3b8,~
code-source-info,0x65ec1d5596,128,420,517,C0O428C6O449C10O463C11O467C17O483C24O481C30O514,,
code-creation,LazyCompile,10,476613,0x65ec1d56ae,72,stringify node:internal/modules/esm/translators:94:19,0x64be93b4a8,~
code-source-info,0x65ec1d56ae,128,2646,2851,C0O2658C6O2688C8O2700C9O2704C20O2704C25O2759C33O2792C36O2788C45O2808C50O2767C56O2820C61O2835C66O2835C71O2848,,
code-creation,LazyCompile,10,476803,0x65ec1d58a6,211,TextDecoder node:internal/encoding:383:16,0xb0b6e94140,~
script-source,27,node:internal/encoding,'use strict';\x0d\n\x0d\n// An implementation of the WHATWG Encoding Standard\x0d\n// https://encoding.spec.whatwg.org\x0d\n\x0d\nconst {\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetOwnPropertyDescriptors\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ObjectValues\x2C\x0d\n  SafeMap\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  Uint32Array\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_ENCODING_INVALID_ENCODED_DATA\x2C\x0d\n  ERR_ENCODING_NOT_SUPPORTED\x2C\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_INVALID_THIS\x2C\x0d\n  ERR_NO_ICU\x0d\n} = require('internal/errors').codes;\x0d\nconst kHandle = Symbol('handle');\x0d\nconst kFlags = Symbol('flags');\x0d\nconst kEncoding = Symbol('encoding');\x0d\nconst kDecoder = Symbol('decoder');\x0d\nconst kEncoder = Symbol('encoder');\x0d\n\x0d\nconst {\x0d\n  getConstructorOf\x2C\x0d\n  customInspectSymbol: inspect\x2C\x0d\n  kEmptyObject\x2C\x0d\n  kEnumerableProperty\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n  isUint8Array\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  validateString\x2C\x0d\n  validateObject\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  encodeInto\x2C\x0d\n  encodeUtf8String\x0d\n} = internalBinding('buffer');\x0d\n\x0d\nlet Buffer;\x0d\nfunction lazyBuffer() {\x0d\n  if (Buffer === undefined)\x0d\n    Buffer = require('buffer').Buffer;\x0d\n  return Buffer;\x0d\n}\x0d\n\x0d\nfunction validateEncoder(obj) {\x0d\n  if (obj == null || obj[kEncoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextEncoder');\x0d\n}\x0d\n\x0d\nfunction validateDecoder(obj) {\x0d\n  if (obj == null || obj[kDecoder] !== true)\x0d\n    throw new ERR_INVALID_THIS('TextDecoder');\x0d\n}\x0d\n\x0d\nconst CONVERTER_FLAGS_FLUSH = 0x1;\x0d\nconst CONVERTER_FLAGS_FATAL = 0x2;\x0d\nconst CONVERTER_FLAGS_IGNORE_BOM = 0x4;\x0d\n\x0d\nconst empty = new Uint8Array(0);\x0d\n\x0d\nconst encodings = new SafeMap([\x0d\n  ['unicode-1-1-utf-8'\x2C 'utf-8']\x2C\x0d\n  ['utf8'\x2C 'utf-8']\x2C\x0d\n  ['utf-8'\x2C 'utf-8']\x2C\x0d\n  ['866'\x2C 'ibm866']\x2C\x0d\n  ['cp866'\x2C 'ibm866']\x2C\x0d\n  ['csibm866'\x2C 'ibm866']\x2C\x0d\n  ['ibm866'\x2C 'ibm866']\x2C\x0d\n  ['csisolatin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso-ir-101'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso88592'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2'\x2C 'iso-8859-2']\x2C\x0d\n  ['iso_8859-2:1987'\x2C 'iso-8859-2']\x2C\x0d\n  ['l2'\x2C 'iso-8859-2']\x2C\x0d\n  ['latin2'\x2C 'iso-8859-2']\x2C\x0d\n  ['csisolatin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso-ir-109'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso88593'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3'\x2C 'iso-8859-3']\x2C\x0d\n  ['iso_8859-3:1988'\x2C 'iso-8859-3']\x2C\x0d\n  ['l3'\x2C 'iso-8859-3']\x2C\x0d\n  ['latin3'\x2C 'iso-8859-3']\x2C\x0d\n  ['csisolatin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso-ir-110'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso88594'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4'\x2C 'iso-8859-4']\x2C\x0d\n  ['iso_8859-4:1988'\x2C 'iso-8859-4']\x2C\x0d\n  ['l4'\x2C 'iso-8859-4']\x2C\x0d\n  ['latin4'\x2C 'iso-8859-4']\x2C\x0d\n  ['csisolatincyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['cyrillic'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso-ir-144'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso88595'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5'\x2C 'iso-8859-5']\x2C\x0d\n  ['iso_8859-5:1988'\x2C 'iso-8859-5']\x2C\x0d\n  ['arabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['asmo-708'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596e'\x2C 'iso-8859-6']\x2C\x0d\n  ['csiso88596i'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatinarabic'\x2C 'iso-8859-6']\x2C\x0d\n  ['ecma-114'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-e'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-8859-6-i'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso-ir-127'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso88596'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6'\x2C 'iso-8859-6']\x2C\x0d\n  ['iso_8859-6:1987'\x2C 'iso-8859-6']\x2C\x0d\n  ['csisolatingreek'\x2C 'iso-8859-7']\x2C\x0d\n  ['ecma-118'\x2C 'iso-8859-7']\x2C\x0d\n  ['elot_928'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['greek8'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso-ir-126'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso88597'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7'\x2C 'iso-8859-7']\x2C\x0d\n  ['iso_8859-7:1987'\x2C 'iso-8859-7']\x2C\x0d\n  ['sun_eu_greek'\x2C 'iso-8859-7']\x2C\x0d\n  ['csiso88598e'\x2C 'iso-8859-8']\x2C\x0d\n  ['csisolatinhebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['hebrew'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-8859-8-e'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso-ir-138'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso88598'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8'\x2C 'iso-8859-8']\x2C\x0d\n  ['iso_8859-8:1988'\x2C 'iso-8859-8']\x2C\x0d\n  ['visual'\x2C 'iso-8859-8']\x2C\x0d\n  ['csiso88598i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['iso-8859-8-i'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['logical'\x2C 'iso-8859-8-i']\x2C\x0d\n  ['csisolatin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-ir-157'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso8859-10'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso885910'\x2C 'iso-8859-10']\x2C\x0d\n  ['l6'\x2C 'iso-8859-10']\x2C\x0d\n  ['latin6'\x2C 'iso-8859-10']\x2C\x0d\n  ['iso-8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso8859-13'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso885913'\x2C 'iso-8859-13']\x2C\x0d\n  ['iso-8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso8859-14'\x2C 'iso-8859-14']\x2C\x0d\n  ['iso885914'\x2C 'iso-8859-14']\x2C\x0d\n  ['csisolatin9'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso-8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso885915'\x2C 'iso-8859-15']\x2C\x0d\n  ['iso_8859-15'\x2C 'iso-8859-15']\x2C\x0d\n  ['l9'\x2C 'iso-8859-15']\x2C\x0d\n  ['cskoi8r'\x2C 'koi8-r']\x2C\x0d\n  ['koi'\x2C 'koi8-r']\x2C\x0d\n  ['koi8'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8_r'\x2C 'koi8-r']\x2C\x0d\n  ['koi8-ru'\x2C 'koi8-u']\x2C\x0d\n  ['koi8-u'\x2C 'koi8-u']\x2C\x0d\n  ['csmacintosh'\x2C 'macintosh']\x2C\x0d\n  ['mac'\x2C 'macintosh']\x2C\x0d\n  ['macintosh'\x2C 'macintosh']\x2C\x0d\n  ['x-mac-roman'\x2C 'macintosh']\x2C\x0d\n  ['dos-874'\x2C 'windows-874']\x2C\x0d\n  ['iso-8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso8859-11'\x2C 'windows-874']\x2C\x0d\n  ['iso885911'\x2C 'windows-874']\x2C\x0d\n  ['tis-620'\x2C 'windows-874']\x2C\x0d\n  ['windows-874'\x2C 'windows-874']\x2C\x0d\n  ['cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['windows-1250'\x2C 'windows-1250']\x2C\x0d\n  ['x-cp1250'\x2C 'windows-1250']\x2C\x0d\n  ['cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['windows-1251'\x2C 'windows-1251']\x2C\x0d\n  ['x-cp1251'\x2C 'windows-1251']\x2C\x0d\n  ['ansi_x3.4-1968'\x2C 'windows-1252']\x2C\x0d\n  ['ascii'\x2C 'windows-1252']\x2C\x0d\n  ['cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp819'\x2C 'windows-1252']\x2C\x0d\n  ['csisolatin1'\x2C 'windows-1252']\x2C\x0d\n  ['ibm819'\x2C 'windows-1252']\x2C\x0d\n  ['iso-8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso-ir-100'\x2C 'windows-1252']\x2C\x0d\n  ['iso8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso88591'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1'\x2C 'windows-1252']\x2C\x0d\n  ['iso_8859-1:1987'\x2C 'windows-1252']\x2C\x0d\n  ['l1'\x2C 'windows-1252']\x2C\x0d\n  ['latin1'\x2C 'windows-1252']\x2C\x0d\n  ['us-ascii'\x2C 'windows-1252']\x2C\x0d\n  ['windows-1252'\x2C 'windows-1252']\x2C\x0d\n  ['x-cp1252'\x2C 'windows-1252']\x2C\x0d\n  ['cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['windows-1253'\x2C 'windows-1253']\x2C\x0d\n  ['x-cp1253'\x2C 'windows-1253']\x2C\x0d\n  ['cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['csisolatin5'\x2C 'windows-1254']\x2C\x0d\n  ['iso-8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso-ir-148'\x2C 'windows-1254']\x2C\x0d\n  ['iso8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso88599'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9'\x2C 'windows-1254']\x2C\x0d\n  ['iso_8859-9:1989'\x2C 'windows-1254']\x2C\x0d\n  ['l5'\x2C 'windows-1254']\x2C\x0d\n  ['latin5'\x2C 'windows-1254']\x2C\x0d\n  ['windows-1254'\x2C 'windows-1254']\x2C\x0d\n  ['x-cp1254'\x2C 'windows-1254']\x2C\x0d\n  ['cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['windows-1255'\x2C 'windows-1255']\x2C\x0d\n  ['x-cp1255'\x2C 'windows-1255']\x2C\x0d\n  ['cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['windows-1256'\x2C 'windows-1256']\x2C\x0d\n  ['x-cp1256'\x2C 'windows-1256']\x2C\x0d\n  ['cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['windows-1257'\x2C 'windows-1257']\x2C\x0d\n  ['x-cp1257'\x2C 'windows-1257']\x2C\x0d\n  ['cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['windows-1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-cp1258'\x2C 'windows-1258']\x2C\x0d\n  ['x-mac-cyrillic'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['x-mac-ukrainian'\x2C 'x-mac-cyrillic']\x2C\x0d\n  ['chinese'\x2C 'gbk']\x2C\x0d\n  ['csgb2312'\x2C 'gbk']\x2C\x0d\n  ['csiso58gb231280'\x2C 'gbk']\x2C\x0d\n  ['gb2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312'\x2C 'gbk']\x2C\x0d\n  ['gb_2312-80'\x2C 'gbk']\x2C\x0d\n  ['gbk'\x2C 'gbk']\x2C\x0d\n  ['iso-ir-58'\x2C 'gbk']\x2C\x0d\n  ['x-gbk'\x2C 'gbk']\x2C\x0d\n  ['gb18030'\x2C 'gb18030']\x2C\x0d\n  ['big5'\x2C 'big5']\x2C\x0d\n  ['big5-hkscs'\x2C 'big5']\x2C\x0d\n  ['cn-big5'\x2C 'big5']\x2C\x0d\n  ['csbig5'\x2C 'big5']\x2C\x0d\n  ['x-x-big5'\x2C 'big5']\x2C\x0d\n  ['cseucpkdfmtjapanese'\x2C 'euc-jp']\x2C\x0d\n  ['euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['x-euc-jp'\x2C 'euc-jp']\x2C\x0d\n  ['csiso2022jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['iso-2022-jp'\x2C 'iso-2022-jp']\x2C\x0d\n  ['csshiftjis'\x2C 'shift_jis']\x2C\x0d\n  ['ms932'\x2C 'shift_jis']\x2C\x0d\n  ['ms_kanji'\x2C 'shift_jis']\x2C\x0d\n  ['shift-jis'\x2C 'shift_jis']\x2C\x0d\n  ['shift_jis'\x2C 'shift_jis']\x2C\x0d\n  ['sjis'\x2C 'shift_jis']\x2C\x0d\n  ['windows-31j'\x2C 'shift_jis']\x2C\x0d\n  ['x-sjis'\x2C 'shift_jis']\x2C\x0d\n  ['cseuckr'\x2C 'euc-kr']\x2C\x0d\n  ['csksc56011987'\x2C 'euc-kr']\x2C\x0d\n  ['euc-kr'\x2C 'euc-kr']\x2C\x0d\n  ['iso-ir-149'\x2C 'euc-kr']\x2C\x0d\n  ['korean'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1987'\x2C 'euc-kr']\x2C\x0d\n  ['ks_c_5601-1989'\x2C 'euc-kr']\x2C\x0d\n  ['ksc5601'\x2C 'euc-kr']\x2C\x0d\n  ['ksc_5601'\x2C 'euc-kr']\x2C\x0d\n  ['windows-949'\x2C 'euc-kr']\x2C\x0d\n  ['utf-16be'\x2C 'utf-16be']\x2C\x0d\n  ['utf-16le'\x2C 'utf-16le']\x2C\x0d\n  ['utf-16'\x2C 'utf-16le']\x2C\x0d\n]);\x0d\n\x0d\n// Unfortunately\x2C String.prototype.trim also removes non-ascii whitespace\x2C\x0d\n// so we have to do this manually\x0d\nfunction trimAsciiWhitespace(label) {\x0d\n  let s = 0;\x0d\n  let e = label.length;\x0d\n  while (s < e && (\x0d\n    label[s] === '\\u0009' ||\x0d\n    label[s] === '\\u000a' ||\x0d\n    label[s] === '\\u000c' ||\x0d\n    label[s] === '\\u000d' ||\x0d\n    label[s] === '\\u0020')) {\x0d\n    s++;\x0d\n  }\x0d\n  while (e > s && (\x0d\n    label[e - 1] === '\\u0009' ||\x0d\n    label[e - 1] === '\\u000a' ||\x0d\n    label[e - 1] === '\\u000c' ||\x0d\n    label[e - 1] === '\\u000d' ||\x0d\n    label[e - 1] === '\\u0020')) {\x0d\n    e--;\x0d\n  }\x0d\n  return StringPrototypeSlice(label\x2C s\x2C e);\x0d\n}\x0d\n\x0d\nfunction getEncodingFromLabel(label) {\x0d\n  const enc = encodings.get(label);\x0d\n  if (enc !== undefined) return enc;\x0d\n  return encodings.get(trimAsciiWhitespace(label.toLowerCase()));\x0d\n}\x0d\n\x0d\nconst encodeIntoResults = new Uint32Array(2);\x0d\n\x0d\nclass TextEncoder {\x0d\n  constructor() {\x0d\n    this[kEncoder] = true;\x0d\n  }\x0d\n\x0d\n  get encoding() {\x0d\n    validateEncoder(this);\x0d\n    return 'utf-8';\x0d\n  }\x0d\n\x0d\n  encode(input = '') {\x0d\n    validateEncoder(this);\x0d\n    return encodeUtf8String(`${input}`);\x0d\n  }\x0d\n\x0d\n  encodeInto(src\x2C dest) {\x0d\n    validateEncoder(this);\x0d\n    validateString(src\x2C 'src');\x0d\n    if (!dest || !isUint8Array(dest))\x0d\n      throw new ERR_INVALID_ARG_TYPE('dest'\x2C 'Uint8Array'\x2C dest);\x0d\n    encodeInto(src\x2C dest\x2C encodeIntoResults);\x0d\n    return { read: encodeIntoResults[0]\x2C written: encodeIntoResults[1] };\x0d\n  }\x0d\n\x0d\n  [inspect](depth\x2C opts) {\x0d\n    validateEncoder(this);\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n    const ctor = getConstructorOf(this);\x0d\n    const obj = ObjectCreate({\x0d\n      constructor: ctor === null ? TextEncoder : ctor\x0d\n    });\x0d\n    obj.encoding = this.encoding;\x0d\n    // Lazy to avoid circular dependency\x0d\n    return require('internal/util/inspect').inspect(obj\x2C opts);\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  TextEncoder.prototype\x2C {\x0d\n    'encode': kEnumerableProperty\x2C\x0d\n    'encodeInto': kEnumerableProperty\x2C\x0d\n    'encoding': kEnumerableProperty\x2C\x0d\n    [SymbolToStringTag]: { __proto__: null\x2C configurable: true\x2C value: 'TextEncoder' }\x2C\x0d\n  });\x0d\n\x0d\nconst TextDecoder =\x0d\n  internalBinding('config').hasIntl ?\x0d\n    makeTextDecoderICU() :\x0d\n    makeTextDecoderJS();\x0d\n\x0d\nfunction makeTextDecoderICU() {\x0d\n  const {\x0d\n    decode: _decode\x2C\x0d\n    getConverter\x2C\x0d\n  } = internalBinding('icu');\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = kEmptyObject) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        flags |= options.fatal ? CONVERTER_FLAGS_FATAL : 0;\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      const handle = getConverter(enc\x2C flags);\x0d\n      if (handle === undefined)\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      this[kHandle] = handle;\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n    }\x0d\n\x0d\n\x0d\n    decode(input = empty\x2C options = kEmptyObject) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (!isArrayBufferView(input)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null)\x0d\n        flags |= options.stream ? 0 : CONVERTER_FLAGS_FLUSH;\x0d\n\x0d\n      const ret = _decode(this[kHandle]\x2C input\x2C flags);\x0d\n      if (typeof ret === 'number') {\x0d\n        throw new ERR_ENCODING_INVALID_ENCODED_DATA(this.encoding\x2C ret);\x0d\n      }\x0d\n      return ret.toString('ucs2');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\nfunction makeTextDecoderJS() {\x0d\n  let StringDecoder;\x0d\n  function lazyStringDecoder() {\x0d\n    if (StringDecoder === undefined)\x0d\n      ({ StringDecoder } = require('string_decoder'));\x0d\n    return StringDecoder;\x0d\n  }\x0d\n\x0d\n  const kBOMSeen = Symbol('BOM seen');\x0d\n\x0d\n  function hasConverter(encoding) {\x0d\n    return encoding === 'utf-8' || encoding === 'utf-16le';\x0d\n  }\x0d\n\x0d\n  class TextDecoder {\x0d\n    constructor(encoding = 'utf-8'\x2C options = kEmptyObject) {\x0d\n      encoding = `${encoding}`;\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      const enc = getEncodingFromLabel(encoding);\x0d\n      if (enc === undefined || !hasConverter(enc))\x0d\n        throw new ERR_ENCODING_NOT_SUPPORTED(encoding);\x0d\n\x0d\n      let flags = 0;\x0d\n      if (options !== null) {\x0d\n        if (options.fatal) {\x0d\n          throw new ERR_NO_ICU('"fatal" option');\x0d\n        }\x0d\n        flags |= options.ignoreBOM ? CONVERTER_FLAGS_IGNORE_BOM : 0;\x0d\n      }\x0d\n\x0d\n      this[kDecoder] = true;\x0d\n      // StringDecoder will normalize WHATWG encoding to Node.js encoding.\x0d\n      this[kHandle] = new (lazyStringDecoder())(enc);\x0d\n      this[kFlags] = flags;\x0d\n      this[kEncoding] = enc;\x0d\n      this[kBOMSeen] = false;\x0d\n    }\x0d\n\x0d\n    decode(input = empty\x2C options = kEmptyObject) {\x0d\n      validateDecoder(this);\x0d\n      if (isAnyArrayBuffer(input)) {\x0d\n        input = lazyBuffer().from(input);\x0d\n      } else if (isArrayBufferView(input)) {\x0d\n        input = lazyBuffer().from(input.buffer\x2C input.byteOffset\x2C\x0d\n                                  input.byteLength);\x0d\n      } else {\x0d\n        throw new ERR_INVALID_ARG_TYPE('input'\x2C\x0d\n                                       ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n                                       input);\x0d\n      }\x0d\n      validateObject(options\x2C 'options'\x2C {\x0d\n        nullable: true\x2C\x0d\n        allowArray: true\x2C\x0d\n        allowFunction: true\x2C\x0d\n      });\x0d\n\x0d\n      if (this[kFlags] & CONVERTER_FLAGS_FLUSH) {\x0d\n        this[kBOMSeen] = false;\x0d\n      }\x0d\n\x0d\n      if (options !== null && options.stream) {\x0d\n        this[kFlags] &= ~CONVERTER_FLAGS_FLUSH;\x0d\n      } else {\x0d\n        this[kFlags] |= CONVERTER_FLAGS_FLUSH;\x0d\n      }\x0d\n\x0d\n      let result = this[kFlags] & CONVERTER_FLAGS_FLUSH ?\x0d\n        this[kHandle].end(input) :\x0d\n        this[kHandle].write(input);\x0d\n\x0d\n      if (result.length > 0 &&\x0d\n          !this[kBOMSeen] &&\x0d\n          !(this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM)) {\x0d\n        // If the very first result in the stream is a BOM\x2C and we are not\x0d\n        // explicitly told to ignore it\x2C then we discard it.\x0d\n        if (result[0] === '\\ufeff') {\x0d\n          result = StringPrototypeSlice(result\x2C 1);\x0d\n        }\x0d\n        this[kBOMSeen] = true;\x0d\n      }\x0d\n\x0d\n      return result;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return TextDecoder;\x0d\n}\x0d\n\x0d\n// Mix in some shared properties.\x0d\nconst sharedProperties = ObjectGetOwnPropertyDescriptors({\x0d\n  get encoding() {\x0d\n    validateDecoder(this);\x0d\n    return this[kEncoding];\x0d\n  }\x2C\x0d\n\x0d\n  get fatal() {\x0d\n    validateDecoder(this);\x0d\n    return (this[kFlags] & CONVERTER_FLAGS_FATAL) === CONVERTER_FLAGS_FATAL;\x0d\n  }\x2C\x0d\n\x0d\n  get ignoreBOM() {\x0d\n    validateDecoder(this);\x0d\n    return (this[kFlags] & CONVERTER_FLAGS_IGNORE_BOM) ===\x0d\n              CONVERTER_FLAGS_IGNORE_BOM;\x0d\n  }\x2C\x0d\n\x0d\n  [inspect](depth\x2C opts) {\x0d\n    validateDecoder(this);\x0d\n    if (typeof depth === 'number' && depth < 0)\x0d\n      return this;\x0d\n    const constructor = getConstructorOf(this) || TextDecoder;\x0d\n    const obj = ObjectCreate({ constructor });\x0d\n    obj.encoding = this.encoding;\x0d\n    obj.fatal = this.fatal;\x0d\n    obj.ignoreBOM = this.ignoreBOM;\x0d\n    if (opts.showHidden) {\x0d\n      obj[kFlags] = this[kFlags];\x0d\n      obj[kHandle] = this[kHandle];\x0d\n    }\x0d\n    // Lazy to avoid circular dependency\x0d\n    const { inspect } = require('internal/util/inspect');\x0d\n    return `${constructor.name} ${inspect(obj)}`;\x0d\n  }\x0d\n});\x0d\nconst propertiesValues = ObjectValues(sharedProperties);\x0d\nfor (let i = 0; i < propertiesValues.length; i++) {\x0d\n  // We want to use null-prototype objects to not rely on globally mutable\x0d\n  // %Object.prototype%.\x0d\n  ObjectSetPrototypeOf(propertiesValues[i]\x2C null);\x0d\n}\x0d\nsharedProperties[inspect].enumerable = false;\x0d\n\x0d\nObjectDefineProperties(TextDecoder.prototype\x2C {\x0d\n  decode: kEnumerableProperty\x2C\x0d\n  ...sharedProperties\x2C\x0d\n  [SymbolToStringTag]: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    value: 'TextDecoder'\x0d\n  }\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  getEncodingFromLabel\x2C\x0d\n  TextDecoder\x2C\x0d\n  TextEncoder\x0d\n};\x0d\n
code-source-info,0x65ec1d58a6,27,10775,11595,C19O10806C26O10829C30O10862C40O10877C48O10862C53O11013C58O11013C63O11052C65O11084C74O11090C79O11084C80O11153C82O11163C86O11213C99O11221C108O11274C121O11286C130O11351C135O11351C141O11384C143O11419C152O11425C157O11419C158O11476C162O11481C166O11491C170O11506C174O11511C179O11520C183O11537C187O11542C192O11550C196O11566C200O11571C205O11582C210O11594,,
code-creation,LazyCompile,10,478364,0x65ec1d6d76,55,getEncodingFromLabel node:internal/encoding:317:30,0xb0b6e93e78,~
code-source-info,0x65ec1d6d76,27,9041,9195,C0O9066C5O9076C10O9076C16O9091C18O9114C20O9125C21O9129C26O9146C34O9176C39O9176C44O9150C49O9146C54O9192,,
code-creation,LazyCompile,10,479378,0x65ec1d708e,232,decode node:internal/encoding:412:11,0xb0b6e94260,~
code-source-info,0x65ec1d708e,27,11611,12467,C8O11620C23O11637C30O11660C35O11660C39O11690C46O11694C52O11730C57O11738C61O11750C66O11751C74O11778C81O11783C87O11820C107O11826C112O11820C113O12000C123O12015C131O12000C136O12151C138O12161C142O12209C158O12222C164O12266C173O12279C175O12278C185O12266C191O12311C195O12351C202O12400C212O12357C217O12351C218O12443C226O12443C231O12460,,
code-creation,LazyCompile,10,479529,0x65ec1d72b6,37,validateDecoder node:internal/encoding:68:25,0xb0b6e93dd8,~
code-source-info,0x65ec1d72b6,27,1416,1520,C0O1427C7O1450C9O1449C14O1460C19O1475C29O1481C34O1475C36O1519,,
code-creation,LazyCompile,10,480057,0x65ec1d742e,162,toString node:buffer:790:46,0x2392d7f688,~
code-source-info,0x65ec1d742e,24,24230,24822,C0O24230C2O24272C8O24279C13O24305C20O24323C25O24305C31O24331C32O24359C37O24372C38O24382C43O24393C48O24412C50O24422C55O24435C57O24445C58O24459C65O24476C71O24505C76O24517C83O24541C90O24556C92O24564C97O24579C99O24589C100O24595C104O24640C109O24640C115O24662C116O24680C119O24680C124O24709C126O24737C133O24743C138O24737C139O24795C156O24795C161O24819,,
code-creation,LazyCompile,10,480332,0x65ec1d76ee,499,getEncodingOps node:buffer:684:24,0x2392d7f4e0,~
code-source-info,0x65ec1d76ee
code-creation,LazyCompile,10,480568,0x65ec1d7ad6,12,slice node:buffer:608:12,0x2392d7e190,~
code-source-info,0x65ec1d7ad6,24,17717,17763,C0O17742C5O17742C11O17763,,
code-creation,LazyCompile,10,480769,0x65ec1d7dde,274,maybeCacheSourceMap node:internal/source_map/source_map_cache:80:29,0x2f2f3a2b9d8,~
code-source-info,0x65ec1d7dde,103,2568,3836,C0O2657C3O2657C7O2684C10O2698C15O2702C23O2722C25O2742C26O2749C30O2764C35O2775C44O2773C54O2911C64O2911C68O2928C69O2935C70O2958C80O2958C86O3065C88O3096C91O3124C96O3131C101O3096C107O3167C112O3187C117O3194C122O3217C126O3249C131O3267C136O3271C143O3301C150O3333C160O3364C166O3379C170O3267C178O3406C182O3438C187O3462C192O3466C200O3500C210O3531C216O3546C220O3462C228O3705C233O3723C238O3727C246O3761C256O3792C262O3807C266O3723C273O3835,,
code-creation,LazyCompile,10,480910,0x65ec1d89c6,31,getSourceMapsEnabled node:internal/source_map/source_map_cache:49:30,0x2f2f3a2b938,~
code-source-info,0x65ec1d89c6,103,1716,1866,C0O1724C6O1768C11O1789C17O1789C22O1768C26O1838C30O1863,,
code-creation,LazyCompile,10,481022,0x65ec1d8b3e,100,setSourceMapsEnabled node:internal/source_map/source_map_cache:56:30,0x2f2f3a2b988,~
code-source-info,0x65ec1d8b3e,103,1899,2536,C0O1910C8O1910C13O2020C19O2020C24O1957C29O1984C34O2050C38O2080C42O2138C48O2138C53O2111C58O2195C64O2254C70O2417C76O2417C81O2389C86O2450C90O2509C92O2527C99O2535,,
code-creation,LazyCompile,10,481145,0x65ec1d8cae,10, node:internal/modules/esm/translators:42:63,0x64be93b638,~
code-source-info,0x65ec1d8cae,128,1062,1089,C0O1075C2O1081C9O1088,,
code-creation,Script,10,482309,0x65ec1da15e,701, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/cli.js:1:1,0x65ec1d9458,~
script-source,133,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/cli.js,import path from 'path';\x0d\nimport buildMedia from './build-media.js';\x0d\nimport { deleteDirRecursive\x2C parseJsonFile } from '../lib/filesystem.js';\x0d\nimport readMedia from './read-media.js';\x0d\nimport buildHtml from './build-html.js';\x0d\nimport buildAssets from './build-assets.js';\x0d\nimport FileWatcher from '../lib/filewatcher.js';\x0d\nimport { Color } from '../lib/terminal.js';\x0d\nimport { inspectMediaTable } from './inspect-media.js';\x0d\nimport sortMedia from './sort-media.js';\x0d\nimport readTags from './read-tags.js';\x0d\nimport { getTagDefinitionsFromMedia } from '../lib/tag-util.js';\x0d\n\x0d\nconst pathing = Object.freeze({\x0d\n  dist: path.resolve('dist')\x2C\x0d\n  pages: path.resolve("pages")\x2C\x0d\n  cache: path.resolve(".cache")\x2C\x0d\n  pagesCache: path.resolve(".cache/pages.json")\x2C\x0d\n  layouts: path.resolve("layouts")\x2C\x0d\n  components: path.resolve("components")\x2C\x0d\n  style: path.resolve("style")\x2C\x0d\n  script: path.resolve("lib")\x2C\x0d\n  artData: path.resolve('data/media-art.json')\x2C\x0d\n  artTags: path.resolve('data/art-tags.json')\x2C\x0d\n  artImport: path.resolve("static/art")\x2C\x0d\n  artProcessed: path.resolve("dist/media/art")\x2C\x0d\n});\x0d\n\x0d\nconst resizeSet = [\x0d\n  { name: "s160p"\x2C size: 160\x2C method: "squared" }\x2C // The "s" stands for "square"\x0d\n  { name: "120p"\x2C size: 120 }\x2C\x0d\n  { name: "240p"\x2C size: 240 }\x2C\x0d\n  { name: "480p"\x2C size: 480 }\x2C\x0d\n  { name: "960p"\x2C size: 960 }\x2C\x0d\n  { name: "1440p"\x2C size: 1440 }\x2C\x0d\n];\x0d\n\x0d\nexport async function handleCommand(command\x2C ...args) {\x0d\n  switch (command) {\x0d\n    case "build":\x0d\n      await handleCommand("build:assets");\x0d\n      await handleCommand("build:html");\x0d\n      await handleCommand("build:art");\x0d\n      break;\x0d\n    case "clean":\x0d\n      deleteDirRecursive(pathing.cache);\x0d\n      deleteDirRecursive(pathing.dist);\x0d\n      break;\x0d\n    case "build:art":\x0d\n      await buildMedia({\x0d\n        dataInput: pathing.artData\x2C\x0d\n        mediaInput: pathing.artImport\x2C\x0d\n        mediaOutput: pathing.artProcessed\x2C\x0d\n        resizeSet: resizeSet\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "build:html":\x0d\n      const skippedHtmlFiles = args[0] ? args[0].split("\x2C") : [];\x0d\n      const mediaArtBuildHtml = parseJsonFile(pathing.artData);\x0d\n      const mediaArtByPath = {};\x0d\n      mediaArtBuildHtml.forEach(entry => mediaArtByPath[entry.path] = entry);\x0d\n      await buildHtml({\x0d\n        inputDir: pathing.pages\x2C\x0d\n        outputDir: pathing.dist\x2C\x0d\n        partialsDir: pathing.components\x2C\x0d\n        cacheFile: pathing.pagesCache\x2C\x0d\n        ignoredFiles: skippedHtmlFiles\x2C\x0d\n        data: {\x0d\n          title: 'Handlebars Example'\x2C\x0d\n          name: 'John Doe'\x2C\x0d\n          mediaArt: mediaArtBuildHtml\x2C\x0d\n          mediaArtByPath\x2C\x0d\n          tagsArt: getTagDefinitionsFromMedia(mediaArtBuildHtml\x2C 1)\x2C\x0d\n          headerLinks: [\x0d\n            { link: "/"\x2C title: "Home" }\x2C\x0d\n            { link: "art"\x2C title: "Art" }\x2C\x0d\n            { link: "blog"\x2C title: "Blog" }\x2C\x0d\n            { link: "changelog"\x2C title: "Changelog" }\x2C\x0d\n            { link: "about"\x2C title: "About" }\x2C\x0d\n          ]\x2C\x0d\n          resizeSet: resizeSet\x2C\x0d\n          currentYear: new Date().getFullYear()\x2C\x0d\n        }\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "build:assets":\x0d\n      await buildAssets();\x0d\n      break;\x0d\n    case "import:art":\x0d\n      const skipUnchanged = args[0] && args[0] === "force";\x0d\n      await readMedia({\x0d\n        dirPath: pathing.artImport\x2C\x0d\n        outputFileName: "media-art"\x2C\x0d\n        skipUnchanged: skipUnchanged\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "watch":\x0d\n      await handleCommand("watch:assets");\x0d\n      await handleCommand("watch:html"\x2C ...args);\x0d\n      await handleCommand("watch:art");\x0d\n      break;\x0d\n    case "watch:art":\x0d\n      console.log("Press Ctrl + C to abort watcher. ");\x0d\n      new FileWatcher({\x0d\n        target: [\x0d\n          pathing.artData\x2C\x0d\n          pathing.artImport\x2C\x0d\n        ]\x2C\x0d\n        recursive: true\x2C\x0d\n        onChange: async (eventType\x2C fileName) => {\x0d\n          console.log(Color.Blue + `'${eventType}' on file '${fileName}'. Rebuilding art files. `\x0d\n            + Color.Gray + `(${new Date()})` + Color.Reset);\x0d\n          await handleCommand("build:art");\x0d\n        }\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "watch:html":\x0d\n      console.log("Press Ctrl + C to abort watcher. ");\x0d\n      new FileWatcher({\x0d\n        target: [\x0d\n          pathing.pages\x2C\x0d\n          pathing.layouts\x2C\x0d\n          pathing.components\x2C\x0d\n          pathing.artData\x2C\x0d\n        ]\x2C\x0d\n        recursive: true\x2C\x0d\n        onChange: async (eventType\x2C fileName) => {\x0d\n          console.log(Color.Orange + `'${eventType}' on file '${fileName}'. Rebuilding HTML. `\x0d\n            + Color.Gray + `(${new Date()})` + Color.Reset);\x0d\n          await handleCommand("build:html"\x2C ...args);\x0d\n        }\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "watch:assets":\x0d\n      console.log("Press Ctrl + C to abort watcher. ");\x0d\n      new FileWatcher({\x0d\n        target: [\x0d\n          pathing.script\x2C\x0d\n          pathing.style\x2C\x0d\n        ]\x2C\x0d\n        recursive: true\x2C\x0d\n        onChange: async (eventType\x2C fileName) => {\x0d\n          console.log(Color.Red + `'${eventType}' on file '${fileName}'. Rebuilding Assets. `\x0d\n            + Color.Gray + `(${new Date()})` + Color.Reset);\x0d\n          await handleCommand("build:assets");\x0d\n        }\x2C\x0d\n      });\x0d\n      break;\x0d\n    case "inspect:art":\x0d\n      const lines = inspectMediaTable(parseJsonFile(pathing.artData));\x0d\n      console.log(lines.join("\\n"));\x0d\n      break;\x0d\n    case "sort:art":\x0d\n      await sortMedia(pathing.artData\x2C args[0] ?? 'name');\x0d\n      break;\x0d\n    case "tags:art":\x0d\n      await readTags(pathing.artData\x2C pathing.artTags\x2C "/art/");\x0d\n      break;\x0d\n    default:\x0d\n      console.log(`Unknown command '${command}'`);\x0d\n  }\x0d\n}\x0d\n\x0d\nconst [\x2C \x2C command\x2C ...args] = process.argv;\x0d\nif (command) await handleCommand(command\x2C ...args);\x0d\n
code-source-info,0x65ec1da15e,133,0,5669,C10O0C34O0C54O0C66O593C70O600C80O618C86O623C94O623C103O650C109O655C117O655C126O683C132O688C140O688C149O722C155O727C163O727C172O769C178O774C186O774C195O809C201O814C209O814C218O847C224O852C232O852C241O881C247O886C255O886C264O914C270O919C278O919C287O963C293O968C301O968C310O1013C316O1018C324O1018C333O1058C339O1063C347O1063C356O600C361O593C363O1116C367O1116C369O5601C373O5609C378O5601C466O5581C503O5590C611O5616C615O5629C617O5635C627O5635C640O5629C676O5669,,
code-creation,LazyCompile,10,483768,0x65ec1dac7e,144, node:internal/modules/esm/module_job:75:41,0x65ec1d00d8,~
code-source-info,0x65ec1dac7e,111,2342,2598,C10O2342C18O2405C23O2410C28O2417C37O2441C46O2417C52O2468C61O2487C64O2468C69O2537C79O2537C105O2575C119O2589,,
code-creation,LazyCompile,10,483950,0x65ec1dadfe,13,onParseError node:internal/url:564:22,0xb0b6eb8c60,~
code-source-info,0x65ec1dadfe,39,15987,16043,C0O16007C7O16013C12O16007,,
code-creation,LazyCompile,10,484221,0x65ec1db0be,187,NodeError node:internal/errors:355:28,0x39b87e7a80,~
script-source,11,node:internal/errors,/* eslint node-core/documented-errors: "error" */\x0d\n/* eslint node-core/alphabetize-errors: "error" */\x0d\n/* eslint node-core/prefer-util-format-errors: "error" */\x0d\n\x0d\n'use strict';\x0d\n\x0d\n// The whole point behind this internal module is to allow Node.js to no\x0d\n// longer be forced to treat every error message change as a semver-major\x0d\n// change. The NodeError classes here all expose a `code` property whose\x0d\n// value statically and permanently identifies the error. While the error\x0d\n// message may change\x2C the code should not.\x0d\n\x0d\nconst {\x0d\n  AggregateError\x2C\x0d\n  ArrayFrom\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePop\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  Error\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  ErrorPrototypeToString\x2C\x0d\n  JSONStringify\x2C\x0d\n  MapPrototypeGet\x2C\x0d\n  MathAbs\x2C\x0d\n  MathMax\x2C\x0d\n  Number\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectIsExtensible\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  RangeError\x2C\x0d\n  ReflectApply\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeWeakMap\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolFor\x2C\x0d\n  SyntaxError\x2C\x0d\n  TypeError\x2C\x0d\n  URIError\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst kIsNodeError = Symbol('kIsNodeError');\x0d\n\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst messages = new SafeMap();\x0d\nconst codes = {};\x0d\n\x0d\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/;\x0d\n// Sorted by a rough estimate on most frequently used entries.\x0d\nconst kTypes = [\x0d\n  'string'\x2C\x0d\n  'function'\x2C\x0d\n  'number'\x2C\x0d\n  'object'\x2C\x0d\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\x0d\n  'Function'\x2C\x0d\n  'Object'\x2C\x0d\n  'boolean'\x2C\x0d\n  'bigint'\x2C\x0d\n  'symbol'\x2C\x0d\n];\x0d\n\x0d\nconst MainContextError = Error;\x0d\nconst overrideStackTrace = new SafeWeakMap();\x0d\nconst kNoOverride = Symbol('kNoOverride');\x0d\nlet userStackTraceLimit;\x0d\nconst nodeInternalPrefix = '__node_internal_';\x0d\nconst prepareStackTrace = (globalThis\x2C error\x2C trace) => {\x0d\n  // API for node internals to override error stack formatting\x0d\n  // without interfering with userland code.\x0d\n  if (overrideStackTrace.has(error)) {\x0d\n    const f = overrideStackTrace.get(error);\x0d\n    overrideStackTrace.delete(error);\x0d\n    return f(error\x2C trace);\x0d\n  }\x0d\n\x0d\n  const firstFrame = trace[0]?.getFunctionName();\x0d\n  if (firstFrame && StringPrototypeStartsWith(firstFrame\x2C nodeInternalPrefix)) {\x0d\n    for (let l = trace.length - 1; l >= 0; l--) {\x0d\n      const fn = trace[l]?.getFunctionName();\x0d\n      if (fn && StringPrototypeStartsWith(fn\x2C nodeInternalPrefix)) {\x0d\n        ArrayPrototypeSplice(trace\x2C 0\x2C l + 1);\x0d\n        break;\x0d\n      }\x0d\n    }\x0d\n    // `userStackTraceLimit` is the user value for `Error.stackTraceLimit`\x2C\x0d\n    // it is updated at every new exception in `captureLargerStackTrace`.\x0d\n    if (trace.length > userStackTraceLimit)\x0d\n      ArrayPrototypeSplice(trace\x2C userStackTraceLimit);\x0d\n  }\x0d\n\x0d\n  const globalOverride =\x0d\n    maybeOverridePrepareStackTrace(globalThis\x2C error\x2C trace);\x0d\n  if (globalOverride !== kNoOverride) return globalOverride;\x0d\n\x0d\n  // Normal error formatting:\x0d\n  //\x0d\n  // Error: Message\x0d\n  //     at function (file)\x0d\n  //     at file\x0d\n  let errorString;\x0d\n  if (kIsNodeError in error) {\x0d\n    errorString = `${error.name} [${error.code}]: ${error.message}`;\x0d\n  } else {\x0d\n    errorString = ErrorPrototypeToString(error);\x0d\n  }\x0d\n  if (trace.length === 0) {\x0d\n    return errorString;\x0d\n  }\x0d\n  return `${errorString}\\n    at ${ArrayPrototypeJoin(trace\x2C '\\n    at ')}`;\x0d\n};\x0d\n\x0d\nconst maybeOverridePrepareStackTrace = (globalThis\x2C error\x2C trace) => {\x0d\n  // Polyfill of V8's Error.prepareStackTrace API.\x0d\n  // https://crbug.com/v8/7848\x0d\n  // `globalThis` is the global that contains the constructor which\x0d\n  // created `error`.\x0d\n  if (typeof globalThis.Error?.prepareStackTrace === 'function') {\x0d\n    return globalThis.Error.prepareStackTrace(error\x2C trace);\x0d\n  }\x0d\n  // We still have legacy usage that depends on the main context's `Error`\x0d\n  // being used\x2C even when the error is from a different context.\x0d\n  // TODO(devsnek): evaluate if this can be eventually deprecated/removed.\x0d\n  if (typeof MainContextError.prepareStackTrace === 'function') {\x0d\n    return MainContextError.prepareStackTrace(error\x2C trace);\x0d\n  }\x0d\n\x0d\n  return kNoOverride;\x0d\n};\x0d\n\x0d\nconst aggregateTwoErrors = hideStackFrames((innerError\x2C outerError) => {\x0d\n  if (innerError && outerError) {\x0d\n    if (ArrayIsArray(outerError.errors)) {\x0d\n      // If `outerError` is already an `AggregateError`.\x0d\n      ArrayPrototypePush(outerError.errors\x2C innerError);\x0d\n      return outerError;\x0d\n    }\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const err = new AggregateError(new SafeArrayIterator([\x0d\n      outerError\x2C\x0d\n      innerError\x2C\x0d\n    ])\x2C outerError.message);\x0d\n    err.code = outerError.code;\x0d\n    return err;\x0d\n  }\x0d\n  return innerError || outerError;\x0d\n});\x0d\n\x0d\n// Lazily loaded\x0d\nlet util;\x0d\nlet assert;\x0d\n\x0d\nlet internalUtil = null;\x0d\nfunction lazyInternalUtil() {\x0d\n  internalUtil ??= require('internal/util');\x0d\n  return internalUtil;\x0d\n}\x0d\n\x0d\nlet internalUtilInspect = null;\x0d\nfunction lazyInternalUtilInspect() {\x0d\n  internalUtilInspect ??= require('internal/util/inspect');\x0d\n  return internalUtilInspect;\x0d\n}\x0d\n\x0d\nlet buffer;\x0d\nfunction lazyBuffer() {\x0d\n  buffer ??= require('buffer').Buffer;\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction isErrorStackTraceLimitWritable() {\x0d\n  const desc = ObjectGetOwnPropertyDescriptor(Error\x2C 'stackTraceLimit');\x0d\n  if (desc === undefined) {\x0d\n    return ObjectIsExtensible(Error);\x0d\n  }\x0d\n\x0d\n  return ObjectPrototypeHasOwnProperty(desc\x2C 'writable') ?\x0d\n    desc.writable :\x0d\n    desc.set !== undefined;\x0d\n}\x0d\n\x0d\nfunction inspectWithNoCustomRetry(obj\x2C options) {\x0d\n  const utilInspect = lazyInternalUtilInspect();\x0d\n\x0d\n  try {\x0d\n    return utilInspect.inspect(obj\x2C options);\x0d\n  } catch {\x0d\n    return utilInspect.inspect(obj\x2C { ...options\x2C customInspect: false });\x0d\n  }\x0d\n}\x0d\n\x0d\n// A specialized Error that includes an additional info property with\x0d\n// additional information about the error condition.\x0d\n// It has the properties present in a UVException but with a custom error\x0d\n// message followed by the uv error code and uv error message.\x0d\n// It also has its own error code with the original uv error context put into\x0d\n// `err.info`.\x0d\n// The context passed into this error must have .code\x2C .syscall and .message\x2C\x0d\n// and may have .path and .dest.\x0d\nclass SystemError extends Error {\x0d\n  constructor(key\x2C context) {\x0d\n    const limit = Error.stackTraceLimit;\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n    super();\x0d\n    // Reset the limit and setting the name property.\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = limit;\x0d\n    const prefix = getMessage(key\x2C []\x2C this);\x0d\n    let message = `${prefix}: ${context.syscall} returned ` +\x0d\n                  `${context.code} (${context.message})`;\x0d\n\x0d\n    if (context.path !== undefined)\x0d\n      message += ` ${context.path}`;\x0d\n    if (context.dest !== undefined)\x0d\n      message += ` => ${context.dest}`;\x0d\n\x0d\n    captureLargerStackTrace(this);\x0d\n\x0d\n    this.code = key;\x0d\n\x0d\n    ObjectDefineProperties(this\x2C {\x0d\n      [kIsNodeError]: {\x0d\n        __proto__: null\x2C\x0d\n        value: true\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: false\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      name: {\x0d\n        __proto__: null\x2C\x0d\n        value: 'SystemError'\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      message: {\x0d\n        __proto__: null\x2C\x0d\n        value: message\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      info: {\x0d\n        __proto__: null\x2C\x0d\n        value: context\x2C\x0d\n        enumerable: true\x2C\x0d\n        configurable: true\x2C\x0d\n        writable: false\x2C\x0d\n      }\x2C\x0d\n      errno: {\x0d\n        __proto__: null\x2C\x0d\n        get() {\x0d\n          return context.errno;\x0d\n        }\x2C\x0d\n        set: (value) => {\x0d\n          context.errno = value;\x0d\n        }\x2C\x0d\n        enumerable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      syscall: {\x0d\n        __proto__: null\x2C\x0d\n        get() {\x0d\n          return context.syscall;\x0d\n        }\x2C\x0d\n        set: (value) => {\x0d\n          context.syscall = value;\x0d\n        }\x2C\x0d\n        enumerable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n    });\x0d\n\x0d\n    if (context.path !== undefined) {\x0d\n      // TODO(BridgeAR): Investigate why and when the `.toString()` was\x0d\n      // introduced. The `path` and `dest` properties in the context seem to\x0d\n      // always be of type string. We should probably just remove the\x0d\n      // `.toString()` and `Buffer.from()` operations and set the value on the\x0d\n      // context as the user did.\x0d\n      ObjectDefineProperty(this\x2C 'path'\x2C {\x0d\n        __proto__: null\x2C\x0d\n        get() {\x0d\n          return context.path != null ?\x0d\n            context.path.toString() : context.path;\x0d\n        }\x2C\x0d\n        set: (value) => {\x0d\n          context.path = value ?\x0d\n            lazyBuffer().from(value.toString()) : undefined;\x0d\n        }\x2C\x0d\n        enumerable: true\x2C\x0d\n        configurable: true\x0d\n      });\x0d\n    }\x0d\n\x0d\n    if (context.dest !== undefined) {\x0d\n      ObjectDefineProperty(this\x2C 'dest'\x2C {\x0d\n        __proto__: null\x2C\x0d\n        get() {\x0d\n          return context.dest != null ?\x0d\n            context.dest.toString() : context.dest;\x0d\n        }\x2C\x0d\n        set: (value) => {\x0d\n          context.dest = value ?\x0d\n            lazyBuffer().from(value.toString()) : undefined;\x0d\n        }\x2C\x0d\n        enumerable: true\x2C\x0d\n        configurable: true\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  toString() {\x0d\n    return `${this.name} [${this.code}]: ${this.message}`;\x0d\n  }\x0d\n\x0d\n  [SymbolFor('nodejs.util.inspect.custom')](recurseTimes\x2C ctx) {\x0d\n    return lazyInternalUtilInspect().inspect(this\x2C {\x0d\n      ...ctx\x2C\x0d\n      getters: true\x2C\x0d\n      customInspect: false\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction makeSystemErrorWithCode(key) {\x0d\n  return class NodeError extends SystemError {\x0d\n    constructor(ctx) {\x0d\n      super(key\x2C ctx);\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction makeNodeErrorWithCode(Base\x2C key) {\x0d\n  return function NodeError(...args) {\x0d\n    const limit = Error.stackTraceLimit;\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n    const error = new Base();\x0d\n    // Reset the limit and setting the name property.\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = limit;\x0d\n    const message = getMessage(key\x2C args\x2C error);\x0d\n    ObjectDefineProperties(error\x2C {\x0d\n      [kIsNodeError]: {\x0d\n        __proto__: null\x2C\x0d\n        value: true\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: false\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      message: {\x0d\n        __proto__: null\x2C\x0d\n        value: message\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n      toString: {\x0d\n        __proto__: null\x2C\x0d\n        value() {\x0d\n          return `${this.name} [${key}]: ${this.message}`;\x0d\n        }\x2C\x0d\n        enumerable: false\x2C\x0d\n        writable: true\x2C\x0d\n        configurable: true\x2C\x0d\n      }\x2C\x0d\n    });\x0d\n    captureLargerStackTrace(error);\x0d\n    error.code = key;\x0d\n    return error;\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * This function removes unnecessary frames from Node.js core errors.\x0d\n * @template {(...args: unknown[]) => unknown} T\x0d\n * @param {T} fn\x0d\n * @returns {T}\x0d\n */\x0d\nfunction hideStackFrames(fn) {\x0d\n  // We rename the functions that will be hidden to cut off the stacktrace\x0d\n  // at the outermost one\x0d\n  const hidden = nodeInternalPrefix + fn.name;\x0d\n  ObjectDefineProperty(fn\x2C 'name'\x2C { __proto__: null\x2C value: hidden });\x0d\n  return fn;\x0d\n}\x0d\n\x0d\n// Utility function for registering the error codes. Only used here. Exported\x0d\n// *only* to allow for testing.\x0d\nfunction E(sym\x2C val\x2C def\x2C ...otherClasses) {\x0d\n  // Special case for SystemError that formats the error message differently\x0d\n  // The SystemErrors only have SystemError as their base classes.\x0d\n  messages.set(sym\x2C val);\x0d\n  if (def === SystemError) {\x0d\n    def = makeSystemErrorWithCode(sym);\x0d\n  } else {\x0d\n    def = makeNodeErrorWithCode(def\x2C sym);\x0d\n  }\x0d\n\x0d\n  if (otherClasses.length !== 0) {\x0d\n    otherClasses.forEach((clazz) => {\x0d\n      def[clazz.name] = makeNodeErrorWithCode(clazz\x2C sym);\x0d\n    });\x0d\n  }\x0d\n  codes[sym] = def;\x0d\n}\x0d\n\x0d\nfunction getMessage(key\x2C args\x2C self) {\x0d\n  const msg = messages.get(key);\x0d\n\x0d\n  assert ??= require('internal/assert');\x0d\n\x0d\n  if (typeof msg === 'function') {\x0d\n    assert(\x0d\n      msg.length <= args.length\x2C // Default options do not count.\x0d\n      `Code: ${key}; The provided arguments length (${args.length}) does not ` +\x0d\n        `match the required ones (${msg.length}).`\x0d\n    );\x0d\n    return ReflectApply(msg\x2C self\x2C args);\x0d\n  }\x0d\n\x0d\n  const regex = /%[dfijoOs]/g;\x0d\n  let expectedLength = 0;\x0d\n  while (RegExpPrototypeExec(regex\x2C msg) !== null) expectedLength++;\x0d\n  assert(\x0d\n    expectedLength === args.length\x2C\x0d\n    `Code: ${key}; The provided arguments length (${args.length}) does not ` +\x0d\n      `match the required ones (${expectedLength}).`\x0d\n  );\x0d\n  if (args.length === 0)\x0d\n    return msg;\x0d\n\x0d\n  ArrayPrototypeUnshift(args\x2C msg);\x0d\n  return ReflectApply(lazyInternalUtilInspect().format\x2C null\x2C args);\x0d\n}\x0d\n\x0d\nlet uvBinding;\x0d\n\x0d\nfunction lazyUv() {\x0d\n  uvBinding ??= internalBinding('uv');\x0d\n  return uvBinding;\x0d\n}\x0d\n\x0d\nconst uvUnmappedError = ['UNKNOWN'\x2C 'unknown error'];\x0d\n\x0d\nfunction uvErrmapGet(name) {\x0d\n  uvBinding = lazyUv();\x0d\n  uvBinding.errmap ??= uvBinding.getErrorMap();\x0d\n  return MapPrototypeGet(uvBinding.errmap\x2C name);\x0d\n}\x0d\n\x0d\nconst captureLargerStackTrace = hideStackFrames(\x0d\n  function captureLargerStackTrace(err) {\x0d\n    const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();\x0d\n    if (stackTraceLimitIsWritable) {\x0d\n      userStackTraceLimit = Error.stackTraceLimit;\x0d\n      Error.stackTraceLimit = Infinity;\x0d\n    }\x0d\n    ErrorCaptureStackTrace(err);\x0d\n    // Reset the limit\x0d\n    if (stackTraceLimitIsWritable) Error.stackTraceLimit = userStackTraceLimit;\x0d\n\x0d\n    return err;\x0d\n  });\x0d\n\x0d\n/**\x0d\n * This creates an error compatible with errors produced in the C++\x0d\n * function UVException using a context object with data assembled in C++.\x0d\n * The goal is to migrate them to ERR_* errors later when compatibility is\x0d\n * not a concern.\x0d\n *\x0d\n * @param {object} ctx\x0d\n * @returns {Error}\x0d\n */\x0d\nconst uvException = hideStackFrames(function uvException(ctx) {\x0d\n  const { 0: code\x2C 1: uvmsg } = uvErrmapGet(ctx.errno) || uvUnmappedError;\x0d\n  let message = `${code}: ${ctx.message || uvmsg}\x2C ${ctx.syscall}`;\x0d\n\x0d\n  let path;\x0d\n  let dest;\x0d\n  if (ctx.path) {\x0d\n    path = ctx.path.toString();\x0d\n    message += ` '${path}'`;\x0d\n  }\x0d\n  if (ctx.dest) {\x0d\n    dest = ctx.dest.toString();\x0d\n    message += ` -> '${dest}'`;\x0d\n  }\x0d\n\x0d\n  // Reducing the limit improves the performance significantly. We do not lose\x0d\n  // the stack frames due to the `captureStackTrace()` function that is called\x0d\n  // later.\x0d\n  const tmpLimit = Error.stackTraceLimit;\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n  // Pass the message to the constructor instead of setting it on the object\x0d\n  // to make sure it is the same as the one created in C++\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpLimit;\x0d\n\x0d\n  for (const prop of ObjectKeys(ctx)) {\x0d\n    if (prop === 'message' || prop === 'path' || prop === 'dest') {\x0d\n      continue;\x0d\n    }\x0d\n    err[prop] = ctx[prop];\x0d\n  }\x0d\n\x0d\n  err.code = code;\x0d\n  if (path) {\x0d\n    err.path = path;\x0d\n  }\x0d\n  if (dest) {\x0d\n    err.dest = dest;\x0d\n  }\x0d\n\x0d\n  return captureLargerStackTrace(err);\x0d\n});\x0d\n\x0d\n/**\x0d\n * This creates an error compatible with errors produced in the C++\x0d\n * This function should replace the deprecated\x0d\n * `exceptionWithHostPort()` function.\x0d\n *\x0d\n * @param {number} err - A libuv error number\x0d\n * @param {string} syscall\x0d\n * @param {string} address\x0d\n * @param {number} [port]\x0d\n * @returns {Error}\x0d\n */\x0d\nconst uvExceptionWithHostPort = hideStackFrames(\x0d\n  function uvExceptionWithHostPort(err\x2C syscall\x2C address\x2C port) {\x0d\n    const { 0: code\x2C 1: uvmsg } = uvErrmapGet(err) || uvUnmappedError;\x0d\n    const message = `${syscall} ${code}: ${uvmsg}`;\x0d\n    let details = '';\x0d\n\x0d\n    if (port && port > 0) {\x0d\n      details = ` ${address}:${port}`;\x0d\n    } else if (address) {\x0d\n      details = ` ${address}`;\x0d\n    }\x0d\n\x0d\n    // Reducing the limit improves the performance significantly. We do not\x0d\n    // lose the stack frames due to the `captureStackTrace()` function that\x0d\n    // is called later.\x0d\n    const tmpLimit = Error.stackTraceLimit;\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const ex = new Error(`${message}${details}`);\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpLimit;\x0d\n    ex.code = code;\x0d\n    ex.errno = err;\x0d\n    ex.syscall = syscall;\x0d\n    ex.address = address;\x0d\n    if (port) {\x0d\n      ex.port = port;\x0d\n    }\x0d\n\x0d\n    return captureLargerStackTrace(ex);\x0d\n  });\x0d\n\x0d\n/**\x0d\n * This used to be util._errnoException().\x0d\n *\x0d\n * @param {number} err - A libuv error number\x0d\n * @param {string} syscall\x0d\n * @param {string} [original]\x0d\n * @returns {Error}\x0d\n */\x0d\nconst errnoException = hideStackFrames(\x0d\n  function errnoException(err\x2C syscall\x2C original) {\x0d\n    // TODO(joyeecheung): We have to use the type-checked\x0d\n    // getSystemErrorName(err) to guard against invalid arguments from users.\x0d\n    // This can be replaced with [ code ] = errmap.get(err) when this method\x0d\n    // is no longer exposed to user land.\x0d\n    util ??= require('util');\x0d\n    const code = util.getSystemErrorName(err);\x0d\n    const message = original ?\x0d\n      `${syscall} ${code} ${original}` : `${syscall} ${code}`;\x0d\n\x0d\n    const tmpLimit = Error.stackTraceLimit;\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const ex = new Error(message);\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpLimit;\x0d\n    ex.errno = err;\x0d\n    ex.code = code;\x0d\n    ex.syscall = syscall;\x0d\n\x0d\n    return captureLargerStackTrace(ex);\x0d\n  });\x0d\n\x0d\n/**\x0d\n * Deprecated\x2C new function is `uvExceptionWithHostPort()`\x0d\n * New function added the error description directly\x0d\n * from C++. this method for backwards compatibility\x0d\n * @param {number} err - A libuv error number\x0d\n * @param {string} syscall\x0d\n * @param {string} address\x0d\n * @param {number} [port]\x0d\n * @param {string} [additional]\x0d\n * @returns {Error}\x0d\n */\x0d\nconst exceptionWithHostPort = hideStackFrames(\x0d\n  function exceptionWithHostPort(err\x2C syscall\x2C address\x2C port\x2C additional) {\x0d\n    // TODO(joyeecheung): We have to use the type-checked\x0d\n    // getSystemErrorName(err) to guard against invalid arguments from users.\x0d\n    // This can be replaced with [ code ] = errmap.get(err) when this method\x0d\n    // is no longer exposed to user land.\x0d\n    util ??= require('util');\x0d\n    const code = util.getSystemErrorName(err);\x0d\n    let details = '';\x0d\n    if (port && port > 0) {\x0d\n      details = ` ${address}:${port}`;\x0d\n    } else if (address) {\x0d\n      details = ` ${address}`;\x0d\n    }\x0d\n    if (additional) {\x0d\n      details += ` - Local (${additional})`;\x0d\n    }\x0d\n\x0d\n    // Reducing the limit improves the performance significantly. We do not\x0d\n    // lose the stack frames due to the `captureStackTrace()` function that\x0d\n    // is called later.\x0d\n    const tmpLimit = Error.stackTraceLimit;\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n    // eslint-disable-next-line no-restricted-syntax\x0d\n    const ex = new Error(`${syscall} ${code}${details}`);\x0d\n    if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpLimit;\x0d\n    ex.errno = err;\x0d\n    ex.code = code;\x0d\n    ex.syscall = syscall;\x0d\n    ex.address = address;\x0d\n    if (port) {\x0d\n      ex.port = port;\x0d\n    }\x0d\n\x0d\n    return captureLargerStackTrace(ex);\x0d\n  });\x0d\n\x0d\n/**\x0d\n * @param {number|string} code - A libuv error number or a c-ares error code\x0d\n * @param {string} syscall\x0d\n * @param {string} [hostname]\x0d\n * @returns {Error}\x0d\n */\x0d\nconst dnsException = hideStackFrames(function(code\x2C syscall\x2C hostname) {\x0d\n  let errno;\x0d\n  // If `code` is of type number\x2C it is a libuv error number\x2C else it is a\x0d\n  // c-ares error code.\x0d\n  // TODO(joyeecheung): translate c-ares error codes into numeric ones and\x0d\n  // make them available in a property that's not error.errno (since they\x0d\n  // can be in conflict with libuv error codes). Also make sure\x0d\n  // util.getSystemErrorName() can understand them when an being informed that\x0d\n  // the number is a c-ares error code.\x0d\n  if (typeof code === 'number') {\x0d\n    errno = code;\x0d\n    // ENOTFOUND is not a proper POSIX error\x2C but this error has been in place\x0d\n    // long enough that it's not practical to remove it.\x0d\n    if (code === lazyUv().UV_EAI_NODATA || code === lazyUv().UV_EAI_NONAME) {\x0d\n      code = 'ENOTFOUND'; // Fabricated error name.\x0d\n    } else {\x0d\n      code = lazyInternalUtil().getSystemErrorName(code);\x0d\n    }\x0d\n  }\x0d\n  const message = `${syscall} ${code}${hostname ? ` ${hostname}` : ''}`;\x0d\n  // Reducing the limit improves the performance significantly. We do not lose\x0d\n  // the stack frames due to the `captureStackTrace()` function that is called\x0d\n  // later.\x0d\n  const tmpLimit = Error.stackTraceLimit;\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const ex = new Error(message);\x0d\n  if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = tmpLimit;\x0d\n  ex.errno = errno;\x0d\n  ex.code = code;\x0d\n  ex.syscall = syscall;\x0d\n  if (hostname) {\x0d\n    ex.hostname = hostname;\x0d\n  }\x0d\n\x0d\n  return captureLargerStackTrace(ex);\x0d\n});\x0d\n\x0d\nfunction connResetException(msg) {\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const ex = new Error(msg);\x0d\n  ex.code = 'ECONNRESET';\x0d\n  return ex;\x0d\n}\x0d\n\x0d\nlet maxStack_ErrorName;\x0d\nlet maxStack_ErrorMessage;\x0d\n/**\x0d\n * Returns true if `err.name` and `err.message` are equal to engine-specific\x0d\n * values indicating max call stack size has been exceeded.\x0d\n * "Maximum call stack size exceeded" in V8.\x0d\n *\x0d\n * @param {Error} err\x0d\n * @returns {boolean}\x0d\n */\x0d\nfunction isStackOverflowError(err) {\x0d\n  if (maxStack_ErrorMessage === undefined) {\x0d\n    try {\x0d\n      function overflowStack() { overflowStack(); }\x0d\n      overflowStack();\x0d\n    } catch (err) {\x0d\n      maxStack_ErrorMessage = err.message;\x0d\n      maxStack_ErrorName = err.name;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return err && err.name === maxStack_ErrorName &&\x0d\n         err.message === maxStack_ErrorMessage;\x0d\n}\x0d\n\x0d\n// Only use this for integers! Decimal numbers do not work with this function.\x0d\nfunction addNumericalSeparator(val) {\x0d\n  let res = '';\x0d\n  let i = val.length;\x0d\n  const start = val[0] === '-' ? 1 : 0;\x0d\n  for (; i >= start + 4; i -= 3) {\x0d\n    res = `_${StringPrototypeSlice(val\x2C i - 3\x2C i)}${res}`;\x0d\n  }\x0d\n  return `${StringPrototypeSlice(val\x2C 0\x2C i)}${res}`;\x0d\n}\x0d\n\x0d\n// Used to enhance the stack that will be picked up by the inspector\x0d\nconst kEnhanceStackBeforeInspector = Symbol('kEnhanceStackBeforeInspector');\x0d\n\x0d\n// These are supposed to be called only on fatal exceptions before\x0d\n// the process exits.\x0d\nconst fatalExceptionStackEnhancers = {\x0d\n  beforeInspector(error) {\x0d\n    if (typeof error[kEnhanceStackBeforeInspector] !== 'function') {\x0d\n      return error.stack;\x0d\n    }\x0d\n\x0d\n    try {\x0d\n      // Set the error.stack here so it gets picked up by the\x0d\n      // inspector.\x0d\n      error.stack = error[kEnhanceStackBeforeInspector]();\x0d\n    } catch {\x0d\n      // We are just enhancing the error. If it fails\x2C ignore it.\x0d\n    }\x0d\n    return error.stack;\x0d\n  }\x2C\x0d\n  afterInspector(error) {\x0d\n    const originalStack = error.stack;\x0d\n    let useColors = true;\x0d\n    // Some consoles do not convert ANSI escape sequences to colors\x2C\x0d\n    // rather display them directly to the stdout. On those consoles\x2C\x0d\n    // libuv emulates colors by intercepting stdout stream and calling\x0d\n    // corresponding Windows API functions for setting console colors.\x0d\n    // However\x2C fatal error are handled differently and we cannot easily\x0d\n    // highlight them. On Windows\x2C detecting whether a console supports\x0d\n    // ANSI escape sequences is not reliable.\x0d\n    if (process.platform === 'win32') {\x0d\n      const info = internalBinding('os').getOSInformation();\x0d\n      const ver = ArrayPrototypeMap(StringPrototypeSplit(info[2]\x2C '.')\x2C\x0d\n                                    Number);\x0d\n      if (ver[0] !== 10 || ver[2] < 14393) {\x0d\n        useColors = false;\x0d\n      }\x0d\n    }\x0d\n    const {\x0d\n      inspect\x2C\x0d\n      inspectDefaultOptions: {\x0d\n        colors: defaultColors\x0d\n      }\x0d\n    } = lazyInternalUtilInspect();\x0d\n    const colors = useColors &&\x0d\n                   ((internalBinding('util').guessHandleType(2) === 'TTY' &&\x0d\n                   require('internal/tty').hasColors()) ||\x0d\n                   defaultColors);\x0d\n    try {\x0d\n      return inspect(error\x2C {\x0d\n        colors\x2C\x0d\n        customInspect: false\x2C\x0d\n        depth: MathMax(inspect.defaultOptions.depth\x2C 5)\x0d\n      });\x0d\n    } catch {\x0d\n      return originalStack;\x0d\n    }\x0d\n  }\x0d\n};\x0d\n\x0d\n// Ensures the printed error line is from user code.\x0d\nlet _kArrowMessagePrivateSymbol\x2C _setHiddenValue;\x0d\nfunction setArrowMessage(err\x2C arrowMessage) {\x0d\n  if (!_kArrowMessagePrivateSymbol) {\x0d\n    ({\x0d\n      arrow_message_private_symbol: _kArrowMessagePrivateSymbol\x2C\x0d\n      setHiddenValue: _setHiddenValue\x2C\x0d\n    } = internalBinding('util'));\x0d\n  }\x0d\n  _setHiddenValue(err\x2C _kArrowMessagePrivateSymbol\x2C arrowMessage);\x0d\n}\x0d\n\x0d\n// Hide stack lines before the first user code line.\x0d\nfunction hideInternalStackFrames(error) {\x0d\n  overrideStackTrace.set(error\x2C (error\x2C stackFrames) => {\x0d\n    let frames = stackFrames;\x0d\n    if (typeof stackFrames === 'object') {\x0d\n      frames = ArrayPrototypeFilter(\x0d\n        stackFrames\x2C\x0d\n        (frm) => !StringPrototypeStartsWith(frm.getFileName() || ''\x2C\x0d\n                                            'node:internal')\x0d\n      );\x0d\n    }\x0d\n    ArrayPrototypeUnshift(frames\x2C error);\x0d\n    return ArrayPrototypeJoin(frames\x2C '\\n    at ');\x0d\n  });\x0d\n}\x0d\n\x0d\n// Node uses an AbortError that isn't exactly the same as the DOMException\x0d\n// to make usage of the error in userland and readable-stream easier.\x0d\n// It is a regular error with `.code` and `.name`.\x0d\nclass AbortError extends Error {\x0d\n  constructor(message = 'The operation was aborted'\x2C options = undefined) {\x0d\n    if (options !== undefined && typeof options !== 'object') {\x0d\n      throw new codes.ERR_INVALID_ARG_TYPE('options'\x2C 'Object'\x2C options);\x0d\n    }\x0d\n    super(message\x2C options);\x0d\n    this.code = 'ABORT_ERR';\x0d\n    this.name = 'AbortError';\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * This creates a generic Node.js error.\x0d\n *\x0d\n * @param {string} message The error message.\x0d\n * @param {object} errorProperties Object with additional properties to be added to the error.\x0d\n * @returns {Error}\x0d\n */\x0d\nconst genericNodeError = hideStackFrames(function genericNodeError(message\x2C errorProperties) {\x0d\n  // eslint-disable-next-line no-restricted-syntax\x0d\n  const err = new Error(message);\x0d\n  ObjectAssign(err\x2C errorProperties);\x0d\n  return err;\x0d\n});\x0d\n\x0d\n/**\x0d\n * Determine the specific type of a value for type-mismatch errors.\x0d\n * @param {*} value\x0d\n * @returns {string}\x0d\n */\x0d\nfunction determineSpecificType(value) {\x0d\n  if (value == null) {\x0d\n    return '' + value;\x0d\n  }\x0d\n  if (typeof value === 'function' && value.name) {\x0d\n    return `function ${value.name}`;\x0d\n  }\x0d\n  if (typeof value === 'object') {\x0d\n    if (value.constructor?.name) {\x0d\n      return `an instance of ${value.constructor.name}`;\x0d\n    }\x0d\n    return `${lazyInternalUtilInspect().inspect(value\x2C { depth: -1 })}`;\x0d\n  }\x0d\n  let inspected = lazyInternalUtilInspect()\x0d\n    .inspect(value\x2C { colors: false });\x0d\n  if (inspected.length > 28) { inspected = `${StringPrototypeSlice(inspected\x2C 0\x2C 25)}...`; }\x0d\n\x0d\n  return `type ${typeof value} (${inspected})`;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  AbortError\x2C\x0d\n  aggregateTwoErrors\x2C\x0d\n  captureLargerStackTrace\x2C\x0d\n  codes\x2C\x0d\n  connResetException\x2C\x0d\n  dnsException\x2C\x0d\n  // This is exported only to facilitate testing.\x0d\n  determineSpecificType\x2C\x0d\n  E\x2C\x0d\n  errnoException\x2C\x0d\n  exceptionWithHostPort\x2C\x0d\n  fatalExceptionStackEnhancers\x2C\x0d\n  genericNodeError\x2C\x0d\n  getMessage\x2C\x0d\n  hideInternalStackFrames\x2C\x0d\n  hideStackFrames\x2C\x0d\n  inspectWithNoCustomRetry\x2C\x0d\n  isErrorStackTraceLimitWritable\x2C\x0d\n  isStackOverflowError\x2C\x0d\n  kEnhanceStackBeforeInspector\x2C\x0d\n  kIsNodeError\x2C\x0d\n  kNoOverride\x2C\x0d\n  maybeOverridePrepareStackTrace\x2C\x0d\n  overrideStackTrace\x2C\x0d\n  prepareStackTrace\x2C\x0d\n  setArrowMessage\x2C\x0d\n  SystemError\x2C\x0d\n  uvErrmapGet\x2C\x0d\n  uvException\x2C\x0d\n  uvExceptionWithHostPort\x2C\x0d\n};\x0d\n\x0d\n// To declare an error message\x2C use the E(sym\x2C val\x2C def) function above. The sym\x0d\n// must be an upper case string. The val can be either a function or a string.\x0d\n// The def must be an error class.\x0d\n// The return value of the function must be a string.\x0d\n// Examples:\x0d\n// E('EXAMPLE_KEY1'\x2C 'This is the error value'\x2C Error);\x0d\n// E('EXAMPLE_KEY2'\x2C (a\x2C b) => return `${a} ${b}`\x2C RangeError);\x0d\n//\x0d\n// Once an error code has been assigned\x2C the code itself MUST NOT change and\x0d\n// any given error code must never be reused to identify a different error.\x0d\n//\x0d\n// Any error code added here should also be added to the documentation\x0d\n//\x0d\n// Note: Please try to keep these in alphabetical order\x0d\n//\x0d\n// Note: Node.js specific errors must begin with the prefix ERR_\x0d\n\x0d\nE('ERR_AMBIGUOUS_ARGUMENT'\x2C 'The "%s" argument is ambiguous. %s'\x2C TypeError);\x0d\nE('ERR_ARG_NOT_ITERABLE'\x2C '%s must be iterable'\x2C TypeError);\x0d\nE('ERR_ASSERTION'\x2C '%s'\x2C Error);\x0d\nE('ERR_ASYNC_CALLBACK'\x2C '%s must be a function'\x2C TypeError);\x0d\nE('ERR_ASYNC_TYPE'\x2C 'Invalid name for async "type": %s'\x2C TypeError);\x0d\nE('ERR_BROTLI_INVALID_PARAM'\x2C '%s is not a valid Brotli parameter'\x2C RangeError);\x0d\nE('ERR_BUFFER_OUT_OF_BOUNDS'\x2C\x0d\n  // Using a default argument here is important so the argument is not counted\x0d\n  // towards `Function#length`.\x0d\n  (name = undefined) => {\x0d\n    if (name) {\x0d\n      return `"${name}" is outside of buffer bounds`;\x0d\n    }\x0d\n    return 'Attempt to access memory outside buffer bounds';\x0d\n  }\x2C RangeError);\x0d\nE('ERR_BUFFER_TOO_LARGE'\x2C\x0d\n  'Cannot create a Buffer larger than %s bytes'\x2C\x0d\n  RangeError);\x0d\nE('ERR_CANNOT_WATCH_SIGINT'\x2C 'Cannot watch for SIGINT signals'\x2C Error);\x0d\nE('ERR_CHILD_CLOSED_BEFORE_REPLY'\x2C\x0d\n  'Child closed before reply received'\x2C Error);\x0d\nE('ERR_CHILD_PROCESS_IPC_REQUIRED'\x2C\x0d\n  "Forked processes must have an IPC channel\x2C missing value 'ipc' in %s"\x2C\x0d\n  Error);\x0d\nE('ERR_CHILD_PROCESS_STDIO_MAXBUFFER'\x2C '%s maxBuffer length exceeded'\x2C\x0d\n  RangeError);\x0d\nE('ERR_CONSOLE_WRITABLE_STREAM'\x2C\x0d\n  'Console expects a writable stream instance for %s'\x2C TypeError);\x0d\nE('ERR_CONTEXT_NOT_INITIALIZED'\x2C 'context used is not initialized'\x2C Error);\x0d\nE('ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED'\x2C\x0d\n  'Custom engines not supported by this OpenSSL'\x2C Error);\x0d\nE('ERR_CRYPTO_ECDH_INVALID_FORMAT'\x2C 'Invalid ECDH format: %s'\x2C TypeError);\x0d\nE('ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY'\x2C\x0d\n  'Public key is not valid for specified curve'\x2C Error);\x0d\nE('ERR_CRYPTO_ENGINE_UNKNOWN'\x2C 'Engine "%s" was not found'\x2C Error);\x0d\nE('ERR_CRYPTO_FIPS_FORCED'\x2C\x0d\n  'Cannot set FIPS mode\x2C it was forced with --force-fips at startup.'\x2C Error);\x0d\nE('ERR_CRYPTO_FIPS_UNAVAILABLE'\x2C 'Cannot set FIPS mode in a non-FIPS build.'\x2C\x0d\n  Error);\x0d\nE('ERR_CRYPTO_HASH_FINALIZED'\x2C 'Digest already called'\x2C Error);\x0d\nE('ERR_CRYPTO_HASH_UPDATE_FAILED'\x2C 'Hash update failed'\x2C Error);\x0d\nE('ERR_CRYPTO_INCOMPATIBLE_KEY'\x2C 'Incompatible %s: %s'\x2C Error);\x0d\nE('ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS'\x2C 'The selected key encoding %s %s.'\x2C\x0d\n  Error);\x0d\nE('ERR_CRYPTO_INVALID_DIGEST'\x2C 'Invalid digest: %s'\x2C TypeError);\x0d\nE('ERR_CRYPTO_INVALID_JWK'\x2C 'Invalid JWK data'\x2C TypeError);\x0d\nE('ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE'\x2C\x0d\n  'Invalid key object type %s\x2C expected %s.'\x2C TypeError);\x0d\nE('ERR_CRYPTO_INVALID_STATE'\x2C 'Invalid state for operation %s'\x2C Error);\x0d\nE('ERR_CRYPTO_PBKDF2_ERROR'\x2C 'PBKDF2 error'\x2C Error);\x0d\nE('ERR_CRYPTO_SCRYPT_INVALID_PARAMETER'\x2C 'Invalid scrypt parameter'\x2C Error);\x0d\nE('ERR_CRYPTO_SCRYPT_NOT_SUPPORTED'\x2C 'Scrypt algorithm not supported'\x2C Error);\x0d\n// Switch to TypeError. The current implementation does not seem right.\x0d\nE('ERR_CRYPTO_SIGN_KEY_REQUIRED'\x2C 'No key provided to sign'\x2C Error);\x0d\nE('ERR_DEBUGGER_ERROR'\x2C '%s'\x2C Error);\x0d\nE('ERR_DEBUGGER_STARTUP_ERROR'\x2C '%s'\x2C Error);\x0d\nE('ERR_DIR_CLOSED'\x2C 'Directory handle was closed'\x2C Error);\x0d\nE('ERR_DIR_CONCURRENT_OPERATION'\x2C\x0d\n  'Cannot do synchronous work on directory handle with concurrent ' +\x0d\n  'asynchronous operations'\x2C Error);\x0d\nE('ERR_DNS_SET_SERVERS_FAILED'\x2C 'c-ares failed to set servers: "%s" [%s]'\x2C\x0d\n  Error);\x0d\nE('ERR_DOMAIN_CALLBACK_NOT_AVAILABLE'\x2C\x0d\n  'A callback was registered through ' +\x0d\n     'process.setUncaughtExceptionCaptureCallback()\x2C which is mutually ' +\x0d\n     'exclusive with using the `domain` module'\x2C\x0d\n  Error);\x0d\nE('ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE'\x2C\x0d\n  'The `domain` module is in use\x2C which is mutually exclusive with calling ' +\x0d\n     'process.setUncaughtExceptionCaptureCallback()'\x2C\x0d\n  Error);\x0d\nE('ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION'\x2C\x0d\n  'Deserialize main function is already configured.'\x2C Error);\x0d\nE('ERR_ENCODING_INVALID_ENCODED_DATA'\x2C function(encoding\x2C ret) {\x0d\n  this.errno = ret;\x0d\n  return `The encoded data was not valid for encoding ${encoding}`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_ENCODING_NOT_SUPPORTED'\x2C 'The "%s" encoding is not supported'\x2C\x0d\n  RangeError);\x0d\nE('ERR_EVAL_ESM_CANNOT_PRINT'\x2C '--print cannot be used with ESM input'\x2C Error);\x0d\nE('ERR_EVENT_RECURSION'\x2C 'The event "%s" is already being dispatched'\x2C Error);\x0d\nE('ERR_FALSY_VALUE_REJECTION'\x2C function(reason) {\x0d\n  this.reason = reason;\x0d\n  return 'Promise was rejected with falsy value';\x0d\n}\x2C Error);\x0d\nE('ERR_FEATURE_UNAVAILABLE_ON_PLATFORM'\x2C\x0d\n  'The feature %s is unavailable on the current platform' +\x0d\n  '\x2C which is being used to run Node.js'\x2C\x0d\n  TypeError);\x0d\nE('ERR_FS_CP_DIR_TO_NON_DIR'\x2C\x0d\n  'Cannot overwrite directory with non-directory'\x2C SystemError);\x0d\nE('ERR_FS_CP_EEXIST'\x2C 'Target already exists'\x2C SystemError);\x0d\nE('ERR_FS_CP_EINVAL'\x2C 'Invalid src or dest'\x2C SystemError);\x0d\nE('ERR_FS_CP_FIFO_PIPE'\x2C 'Cannot copy a FIFO pipe'\x2C SystemError);\x0d\nE('ERR_FS_CP_NON_DIR_TO_DIR'\x2C\x0d\n  'Cannot overwrite non-directory with directory'\x2C SystemError);\x0d\nE('ERR_FS_CP_SOCKET'\x2C 'Cannot copy a socket file'\x2C SystemError);\x0d\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY'\x2C\x0d\n  'Cannot overwrite symlink in subdirectory of self'\x2C SystemError);\x0d\nE('ERR_FS_CP_UNKNOWN'\x2C 'Cannot copy an unknown file type'\x2C SystemError);\x0d\nE('ERR_FS_EISDIR'\x2C 'Path is a directory'\x2C SystemError);\x0d\nE('ERR_FS_FILE_TOO_LARGE'\x2C 'File size (%s) is greater than 2 GiB'\x2C RangeError);\x0d\nE('ERR_FS_INVALID_SYMLINK_TYPE'\x2C\x0d\n  'Symlink type must be one of "dir"\x2C "file"\x2C or "junction". Received "%s"'\x2C\x0d\n  Error); // Switch to TypeError. The current implementation does not seem right\x0d\nE('ERR_HTTP2_ALTSVC_INVALID_ORIGIN'\x2C\x0d\n  'HTTP/2 ALTSVC frames require a valid origin'\x2C TypeError);\x0d\nE('ERR_HTTP2_ALTSVC_LENGTH'\x2C\x0d\n  'HTTP/2 ALTSVC frames are limited to 16382 bytes'\x2C TypeError);\x0d\nE('ERR_HTTP2_CONNECT_AUTHORITY'\x2C\x0d\n  ':authority header is required for CONNECT requests'\x2C Error);\x0d\nE('ERR_HTTP2_CONNECT_PATH'\x2C\x0d\n  'The :path header is forbidden for CONNECT requests'\x2C Error);\x0d\nE('ERR_HTTP2_CONNECT_SCHEME'\x2C\x0d\n  'The :scheme header is forbidden for CONNECT requests'\x2C Error);\x0d\nE('ERR_HTTP2_GOAWAY_SESSION'\x2C\x0d\n  'New streams cannot be created after receiving a GOAWAY'\x2C Error);\x0d\nE('ERR_HTTP2_HEADERS_AFTER_RESPOND'\x2C\x0d\n  'Cannot specify additional headers after response initiated'\x2C Error);\x0d\nE('ERR_HTTP2_HEADERS_SENT'\x2C 'Response has already been initiated.'\x2C Error);\x0d\nE('ERR_HTTP2_HEADER_SINGLE_VALUE'\x2C\x0d\n  'Header field "%s" must only have a single value'\x2C TypeError);\x0d\nE('ERR_HTTP2_INFO_STATUS_NOT_ALLOWED'\x2C\x0d\n  'Informational status codes cannot be used'\x2C RangeError);\x0d\nE('ERR_HTTP2_INVALID_CONNECTION_HEADERS'\x2C\x0d\n  'HTTP/1 Connection specific headers are forbidden: "%s"'\x2C TypeError);\x0d\nE('ERR_HTTP2_INVALID_HEADER_VALUE'\x2C\x0d\n  'Invalid value "%s" for header "%s"'\x2C TypeError);\x0d\nE('ERR_HTTP2_INVALID_INFO_STATUS'\x2C\x0d\n  'Invalid informational status code: %s'\x2C RangeError);\x0d\nE('ERR_HTTP2_INVALID_ORIGIN'\x2C\x0d\n  'HTTP/2 ORIGIN frames require a valid origin'\x2C TypeError);\x0d\nE('ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH'\x2C\x0d\n  'Packed settings length must be a multiple of six'\x2C RangeError);\x0d\nE('ERR_HTTP2_INVALID_PSEUDOHEADER'\x2C\x0d\n  '"%s" is an invalid pseudoheader or is used incorrectly'\x2C TypeError);\x0d\nE('ERR_HTTP2_INVALID_SESSION'\x2C 'The session has been destroyed'\x2C Error);\x0d\nE('ERR_HTTP2_INVALID_SETTING_VALUE'\x2C\x0d\n  // Using default arguments here is important so the arguments are not counted\x0d\n  // towards `Function#length`.\x0d\n  function(name\x2C actual\x2C min = undefined\x2C max = undefined) {\x0d\n    this.actual = actual;\x0d\n    if (min !== undefined) {\x0d\n      this.min = min;\x0d\n      this.max = max;\x0d\n    }\x0d\n    return `Invalid value for setting "${name}": ${actual}`;\x0d\n  }\x2C TypeError\x2C RangeError);\x0d\nE('ERR_HTTP2_INVALID_STREAM'\x2C 'The stream has been destroyed'\x2C Error);\x0d\nE('ERR_HTTP2_MAX_PENDING_SETTINGS_ACK'\x2C\x0d\n  'Maximum number of pending settings acknowledgements'\x2C Error);\x0d\nE('ERR_HTTP2_NESTED_PUSH'\x2C\x0d\n  'A push stream cannot initiate another push stream.'\x2C Error);\x0d\nE('ERR_HTTP2_NO_MEM'\x2C 'Out of memory'\x2C Error);\x0d\nE('ERR_HTTP2_NO_SOCKET_MANIPULATION'\x2C\x0d\n  'HTTP/2 sockets should not be directly manipulated (e.g. read and written)'\x2C\x0d\n  Error);\x0d\nE('ERR_HTTP2_ORIGIN_LENGTH'\x2C\x0d\n  'HTTP/2 ORIGIN frames are limited to 16382 bytes'\x2C TypeError);\x0d\nE('ERR_HTTP2_OUT_OF_STREAMS'\x2C\x0d\n  'No stream ID is available because maximum stream ID has been reached'\x2C\x0d\n  Error);\x0d\nE('ERR_HTTP2_PAYLOAD_FORBIDDEN'\x2C\x0d\n  'Responses with %s status must not have a payload'\x2C Error);\x0d\nE('ERR_HTTP2_PING_CANCEL'\x2C 'HTTP2 ping cancelled'\x2C Error);\x0d\nE('ERR_HTTP2_PING_LENGTH'\x2C 'HTTP2 ping payload must be 8 bytes'\x2C RangeError);\x0d\nE('ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED'\x2C\x0d\n  'Cannot set HTTP/2 pseudo-headers'\x2C TypeError);\x0d\nE('ERR_HTTP2_PUSH_DISABLED'\x2C 'HTTP/2 client has disabled push streams'\x2C Error);\x0d\nE('ERR_HTTP2_SEND_FILE'\x2C 'Directories cannot be sent'\x2C Error);\x0d\nE('ERR_HTTP2_SEND_FILE_NOSEEK'\x2C\x0d\n  'Offset or length can only be specified for regular files'\x2C Error);\x0d\nE('ERR_HTTP2_SESSION_ERROR'\x2C 'Session closed with error code %s'\x2C Error);\x0d\nE('ERR_HTTP2_SETTINGS_CANCEL'\x2C 'HTTP2 session settings canceled'\x2C Error);\x0d\nE('ERR_HTTP2_SOCKET_BOUND'\x2C\x0d\n  'The socket is already bound to an Http2Session'\x2C Error);\x0d\nE('ERR_HTTP2_SOCKET_UNBOUND'\x2C\x0d\n  'The socket has been disconnected from the Http2Session'\x2C Error);\x0d\nE('ERR_HTTP2_STATUS_101'\x2C\x0d\n  'HTTP status code 101 (Switching Protocols) is forbidden in HTTP/2'\x2C Error);\x0d\nE('ERR_HTTP2_STATUS_INVALID'\x2C 'Invalid status code: %s'\x2C RangeError);\x0d\nE('ERR_HTTP2_STREAM_CANCEL'\x2C function(error) {\x0d\n  let msg = 'The pending stream has been canceled';\x0d\n  if (error) {\x0d\n    this.cause = error;\x0d\n    if (typeof error.message === 'string')\x0d\n      msg += ` (caused by: ${error.message})`;\x0d\n  }\x0d\n  return msg;\x0d\n}\x2C Error);\x0d\nE('ERR_HTTP2_STREAM_ERROR'\x2C 'Stream closed with error code %s'\x2C Error);\x0d\nE('ERR_HTTP2_STREAM_SELF_DEPENDENCY'\x2C\x0d\n  'A stream cannot depend on itself'\x2C Error);\x0d\nE('ERR_HTTP2_TOO_MANY_INVALID_FRAMES'\x2C 'Too many invalid HTTP/2 frames'\x2C Error);\x0d\nE('ERR_HTTP2_TRAILERS_ALREADY_SENT'\x2C\x0d\n  'Trailing headers have already been sent'\x2C Error);\x0d\nE('ERR_HTTP2_TRAILERS_NOT_READY'\x2C\x0d\n  'Trailing headers cannot be sent until after the wantTrailers event is ' +\x0d\n  'emitted'\x2C Error);\x0d\nE('ERR_HTTP2_UNSUPPORTED_PROTOCOL'\x2C 'protocol "%s" is unsupported.'\x2C Error);\x0d\nE('ERR_HTTP_CONTENT_LENGTH_MISMATCH'\x2C\x0d\n  'Response body\\'s content-length of %s byte(s) does not match the content-length of %s byte(s) set in header'\x2C Error);\x0d\nE('ERR_HTTP_HEADERS_SENT'\x2C\x0d\n  'Cannot %s headers after they are sent to the client'\x2C Error);\x0d\nE('ERR_HTTP_INVALID_HEADER_VALUE'\x2C\x0d\n  'Invalid value "%s" for header "%s"'\x2C TypeError);\x0d\nE('ERR_HTTP_INVALID_STATUS_CODE'\x2C 'Invalid status code: %s'\x2C RangeError);\x0d\nE('ERR_HTTP_REQUEST_TIMEOUT'\x2C 'Request timeout'\x2C Error);\x0d\nE('ERR_HTTP_SOCKET_ENCODING'\x2C\x0d\n  'Changing the socket encoding is not allowed per RFC7230 Section 3.'\x2C Error);\x0d\nE('ERR_HTTP_TRAILER_INVALID'\x2C\x0d\n  'Trailers are invalid with this transfer encoding'\x2C Error);\x0d\nE('ERR_ILLEGAL_CONSTRUCTOR'\x2C 'Illegal constructor'\x2C TypeError);\x0d\nE('ERR_IMPORT_ASSERTION_TYPE_FAILED'\x2C\x0d\n  'Module "%s" is not of type "%s"'\x2C TypeError);\x0d\nE('ERR_IMPORT_ASSERTION_TYPE_MISSING'\x2C\x0d\n  'Module "%s" needs an import assertion of type "%s"'\x2C TypeError);\x0d\nE('ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED'\x2C\x0d\n  'Import assertion type "%s" is unsupported'\x2C TypeError);\x0d\nE('ERR_INCOMPATIBLE_OPTION_PAIR'\x2C\x0d\n  'Option "%s" cannot be used in combination with option "%s"'\x2C TypeError);\x0d\nE('ERR_INPUT_TYPE_NOT_ALLOWED'\x2C '--input-type can only be used with string ' +\x0d\n  'input via --eval\x2C --print\x2C or STDIN'\x2C Error);\x0d\nE('ERR_INSPECTOR_ALREADY_ACTIVATED'\x2C\x0d\n  'Inspector is already activated. Close it with inspector.close() ' +\x0d\n  'before activating it again.'\x2C\x0d\n  Error);\x0d\nE('ERR_INSPECTOR_ALREADY_CONNECTED'\x2C '%s is already connected'\x2C Error);\x0d\nE('ERR_INSPECTOR_CLOSED'\x2C 'Session was closed'\x2C Error);\x0d\nE('ERR_INSPECTOR_COMMAND'\x2C 'Inspector error %d: %s'\x2C Error);\x0d\nE('ERR_INSPECTOR_NOT_ACTIVE'\x2C 'Inspector is not active'\x2C Error);\x0d\nE('ERR_INSPECTOR_NOT_AVAILABLE'\x2C 'Inspector is not available'\x2C Error);\x0d\nE('ERR_INSPECTOR_NOT_CONNECTED'\x2C 'Session is not connected'\x2C Error);\x0d\nE('ERR_INSPECTOR_NOT_WORKER'\x2C 'Current thread is not a worker'\x2C Error);\x0d\nE('ERR_INTERNAL_ASSERTION'\x2C (message) => {\x0d\n  const suffix = 'This is caused by either a bug in Node.js ' +\x0d\n    'or incorrect usage of Node.js internals.\\n' +\x0d\n    'Please open an issue with this stack trace at ' +\x0d\n    'https://github.com/nodejs/node/issues\\n';\x0d\n  return message === undefined ? suffix : `${message}\\n${suffix}`;\x0d\n}\x2C Error);\x0d\nE('ERR_INVALID_ADDRESS_FAMILY'\x2C function(addressType\x2C host\x2C port) {\x0d\n  this.host = host;\x0d\n  this.port = port;\x0d\n  return `Invalid address family: ${addressType} ${host}:${port}`;\x0d\n}\x2C RangeError);\x0d\nE('ERR_INVALID_ARG_TYPE'\x2C\x0d\n  (name\x2C expected\x2C actual) => {\x0d\n    assert(typeof name === 'string'\x2C "'name' must be a string");\x0d\n    if (!ArrayIsArray(expected)) {\x0d\n      expected = [expected];\x0d\n    }\x0d\n\x0d\n    let msg = 'The ';\x0d\n    if (StringPrototypeEndsWith(name\x2C ' argument')) {\x0d\n      // For cases like 'first argument'\x0d\n      msg += `${name} `;\x0d\n    } else {\x0d\n      const type = StringPrototypeIncludes(name\x2C '.') ? 'property' : 'argument';\x0d\n      msg += `"${name}" ${type} `;\x0d\n    }\x0d\n    msg += 'must be ';\x0d\n\x0d\n    const types = [];\x0d\n    const instances = [];\x0d\n    const other = [];\x0d\n\x0d\n    for (const value of expected) {\x0d\n      assert(typeof value === 'string'\x2C\x0d\n             'All expected entries have to be of type string');\x0d\n      if (ArrayPrototypeIncludes(kTypes\x2C value)) {\x0d\n        ArrayPrototypePush(types\x2C StringPrototypeToLowerCase(value));\x0d\n      } else if (RegExpPrototypeExec(classRegExp\x2C value) !== null) {\x0d\n        ArrayPrototypePush(instances\x2C value);\x0d\n      } else {\x0d\n        assert(value !== 'object'\x2C\x0d\n               'The value "object" should be written as "Object"');\x0d\n        ArrayPrototypePush(other\x2C value);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    // Special handle `object` in case other instances are allowed to outline\x0d\n    // the differences between each other.\x0d\n    if (instances.length > 0) {\x0d\n      const pos = ArrayPrototypeIndexOf(types\x2C 'object');\x0d\n      if (pos !== -1) {\x0d\n        ArrayPrototypeSplice(types\x2C pos\x2C 1);\x0d\n        ArrayPrototypePush(instances\x2C 'Object');\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (types.length > 0) {\x0d\n      if (types.length > 2) {\x0d\n        const last = ArrayPrototypePop(types);\x0d\n        msg += `one of type ${ArrayPrototypeJoin(types\x2C '\x2C ')}\x2C or ${last}`;\x0d\n      } else if (types.length === 2) {\x0d\n        msg += `one of type ${types[0]} or ${types[1]}`;\x0d\n      } else {\x0d\n        msg += `of type ${types[0]}`;\x0d\n      }\x0d\n      if (instances.length > 0 || other.length > 0)\x0d\n        msg += ' or ';\x0d\n    }\x0d\n\x0d\n    if (instances.length > 0) {\x0d\n      if (instances.length > 2) {\x0d\n        const last = ArrayPrototypePop(instances);\x0d\n        msg +=\x0d\n          `an instance of ${ArrayPrototypeJoin(instances\x2C '\x2C ')}\x2C or ${last}`;\x0d\n      } else {\x0d\n        msg += `an instance of ${instances[0]}`;\x0d\n        if (instances.length === 2) {\x0d\n          msg += ` or ${instances[1]}`;\x0d\n        }\x0d\n      }\x0d\n      if (other.length > 0)\x0d\n        msg += ' or ';\x0d\n    }\x0d\n\x0d\n    if (other.length > 0) {\x0d\n      if (other.length > 2) {\x0d\n        const last = ArrayPrototypePop(other);\x0d\n        msg += `one of ${ArrayPrototypeJoin(other\x2C '\x2C ')}\x2C or ${last}`;\x0d\n      } else if (other.length === 2) {\x0d\n        msg += `one of ${other[0]} or ${other[1]}`;\x0d\n      } else {\x0d\n        if (StringPrototypeToLowerCase(other[0]) !== other[0])\x0d\n          msg += 'an ';\x0d\n        msg += `${other[0]}`;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    msg += `. Received ${determineSpecificType(actual)}`;\x0d\n\x0d\n    return msg;\x0d\n  }\x2C TypeError);\x0d\nE('ERR_INVALID_ARG_VALUE'\x2C (name\x2C value\x2C reason = 'is invalid') => {\x0d\n  let inspected = lazyInternalUtilInspect().inspect(value);\x0d\n  if (inspected.length > 128) {\x0d\n    inspected = `${StringPrototypeSlice(inspected\x2C 0\x2C 128)}...`;\x0d\n  }\x0d\n  const type = StringPrototypeIncludes(name\x2C '.') ? 'property' : 'argument';\x0d\n  return `The ${type} '${name}' ${reason}. Received ${inspected}`;\x0d\n}\x2C TypeError\x2C RangeError);\x0d\nE('ERR_INVALID_ASYNC_ID'\x2C 'Invalid %s value: %s'\x2C RangeError);\x0d\nE('ERR_INVALID_BUFFER_SIZE'\x2C\x0d\n  'Buffer size must be a multiple of %s'\x2C RangeError);\x0d\nE('ERR_INVALID_CALLBACK'\x2C\x0d\n  'Callback must be a function. Received %O'\x2C TypeError);\x0d\nE('ERR_INVALID_CHAR'\x2C\x0d\n  // Using a default argument here is important so the argument is not counted\x0d\n  // towards `Function#length`.\x0d\n  (name\x2C field = undefined) => {\x0d\n    let msg = `Invalid character in ${name}`;\x0d\n    if (field !== undefined) {\x0d\n      msg += ` ["${field}"]`;\x0d\n    }\x0d\n    return msg;\x0d\n  }\x2C TypeError);\x0d\nE('ERR_INVALID_CURSOR_POS'\x2C\x0d\n  'Cannot set cursor row without setting its column'\x2C TypeError);\x0d\nE('ERR_INVALID_FD'\x2C\x0d\n  '"fd" must be a positive integer: %s'\x2C RangeError);\x0d\nE('ERR_INVALID_FD_TYPE'\x2C 'Unsupported fd type: %s'\x2C TypeError);\x0d\nE('ERR_INVALID_FILE_URL_HOST'\x2C\x0d\n  'File URL host must be "localhost" or empty on %s'\x2C TypeError);\x0d\nE('ERR_INVALID_FILE_URL_PATH'\x2C 'File URL path %s'\x2C TypeError);\x0d\nE('ERR_INVALID_HANDLE_TYPE'\x2C 'This handle type cannot be sent'\x2C TypeError);\x0d\nE('ERR_INVALID_HTTP_TOKEN'\x2C '%s must be a valid HTTP token ["%s"]'\x2C TypeError);\x0d\nE('ERR_INVALID_IP_ADDRESS'\x2C 'Invalid IP address: %s'\x2C TypeError);\x0d\nE('ERR_INVALID_MODULE_SPECIFIER'\x2C (request\x2C reason\x2C base = undefined) => {\x0d\n  return `Invalid module "${request}" ${reason}${base ?\x0d\n    ` imported from ${base}` : ''}`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_INVALID_PACKAGE_CONFIG'\x2C (path\x2C base\x2C message) => {\x0d\n  return `Invalid package config ${path}${base ? ` while importing ${base}` :\x0d\n    ''}${message ? `. ${message}` : ''}`;\x0d\n}\x2C Error);\x0d\nE('ERR_INVALID_PACKAGE_TARGET'\x2C\x0d\n  (pkgPath\x2C key\x2C target\x2C isImport = false\x2C base = undefined) => {\x0d\n    const relError = typeof target === 'string' && !isImport &&\x0d\n      target.length && !StringPrototypeStartsWith(target\x2C './');\x0d\n    if (key === '.') {\x0d\n      assert(isImport === false);\x0d\n      return `Invalid "exports" main target ${JSONStringify(target)} defined ` +\x0d\n        `in the package config ${pkgPath}package.json${base ?\x0d\n          ` imported from ${base}` : ''}${relError ?\x0d\n          '; targets must start with "./"' : ''}`;\x0d\n    }\x0d\n    return `Invalid "${isImport ? 'imports' : 'exports'}" target ${\x0d\n      JSONStringify(target)} defined for '${key}' in the package config ${\x0d\n      pkgPath}package.json${base ? ` imported from ${base}` : ''}${relError ?\x0d\n      '; targets must start with "./"' : ''}`;\x0d\n  }\x2C Error);\x0d\nE('ERR_INVALID_PROTOCOL'\x2C\x0d\n  'Protocol "%s" not supported. Expected "%s"'\x2C\x0d\n  TypeError);\x0d\nE('ERR_INVALID_REPL_EVAL_CONFIG'\x2C\x0d\n  'Cannot specify both "breakEvalOnSigint" and "eval" for REPL'\x2C TypeError);\x0d\nE('ERR_INVALID_REPL_INPUT'\x2C '%s'\x2C TypeError);\x0d\nE('ERR_INVALID_RETURN_PROPERTY'\x2C (input\x2C name\x2C prop\x2C value) => {\x0d\n  return `Expected a valid ${input} to be returned for the "${prop}" from the` +\x0d\n         ` "${name}" function but got ${value}.`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_INVALID_RETURN_PROPERTY_VALUE'\x2C (input\x2C name\x2C prop\x2C value) => {\x0d\n  let type;\x0d\n  if (value?.constructor?.name) {\x0d\n    type = `instance of ${value.constructor.name}`;\x0d\n  } else {\x0d\n    type = `type ${typeof value}`;\x0d\n  }\x0d\n  return `Expected ${input} to be returned for the "${prop}" from the` +\x0d\n         ` "${name}" function but got ${type}.`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_INVALID_RETURN_VALUE'\x2C (input\x2C name\x2C value) => {\x0d\n  const type = determineSpecificType(value);\x0d\n\x0d\n  return `Expected ${input} to be returned from the "${name}"` +\x0d\n         ` function but got ${type}.`;\x0d\n}\x2C TypeError\x2C RangeError);\x0d\nE('ERR_INVALID_STATE'\x2C 'Invalid state: %s'\x2C Error\x2C TypeError\x2C RangeError);\x0d\nE('ERR_INVALID_SYNC_FORK_INPUT'\x2C\x0d\n  'Asynchronous forks do not support ' +\x0d\n    'Buffer\x2C TypedArray\x2C DataView or string input: %s'\x2C\x0d\n  TypeError);\x0d\nE('ERR_INVALID_THIS'\x2C 'Value of "this" must be of type %s'\x2C TypeError);\x0d\nE('ERR_INVALID_TUPLE'\x2C '%s must be an iterable %s tuple'\x2C TypeError);\x0d\nE('ERR_INVALID_URI'\x2C 'URI malformed'\x2C URIError);\x0d\nE('ERR_INVALID_URL'\x2C function(input) {\x0d\n  this.input = input;\x0d\n  // Don't include URL in message.\x0d\n  // (See https://github.com/nodejs/node/pull/38614)\x0d\n  return 'Invalid URL';\x0d\n}\x2C TypeError);\x0d\nE('ERR_INVALID_URL_SCHEME'\x2C\x0d\n  (expected) => {\x0d\n    if (typeof expected === 'string')\x0d\n      expected = [expected];\x0d\n    assert(expected.length <= 2);\x0d\n    const res = expected.length === 2 ?\x0d\n      `one of scheme ${expected[0]} or ${expected[1]}` :\x0d\n      `of scheme ${expected[0]}`;\x0d\n    return `The URL must be ${res}`;\x0d\n  }\x2C TypeError);\x0d\nE('ERR_IPC_CHANNEL_CLOSED'\x2C 'Channel closed'\x2C Error);\x0d\nE('ERR_IPC_DISCONNECTED'\x2C 'IPC channel is already disconnected'\x2C Error);\x0d\nE('ERR_IPC_ONE_PIPE'\x2C 'Child process can have only one IPC pipe'\x2C Error);\x0d\nE('ERR_IPC_SYNC_FORK'\x2C 'IPC cannot be used with synchronous forks'\x2C Error);\x0d\nE(\x0d\n  'ERR_LOADER_CHAIN_INCOMPLETE'\x2C\x0d\n  '"%s" did not call the next hook in its chain and did not' +\x0d\n  ' explicitly signal a short circuit. If this is intentional\x2C include' +\x0d\n  ' `shortCircuit: true` in the hook\\'s return.'\x2C\x0d\n  Error\x0d\n);\x0d\nE('ERR_MANIFEST_ASSERT_INTEGRITY'\x2C\x0d\n  (moduleURL\x2C realIntegrities) => {\x0d\n    let msg = `The content of "${\x0d\n      moduleURL\x0d\n    }" does not match the expected integrity.`;\x0d\n    if (realIntegrities.size) {\x0d\n      const sri = ArrayPrototypeJoin(\x0d\n        ArrayFrom(realIntegrities.entries()\x2C\x0d\n                  ({ 0: alg\x2C 1: dgs }) => `${alg}-${dgs}`)\x2C\x0d\n        ' '\x0d\n      );\x0d\n      msg += ` Integrities found are: ${sri}`;\x0d\n    } else {\x0d\n      msg += ' The resource was not found in the policy.';\x0d\n    }\x0d\n    return msg;\x0d\n  }\x2C Error);\x0d\nE('ERR_MANIFEST_DEPENDENCY_MISSING'\x2C\x0d\n  'Manifest resource %s does not list %s as a dependency specifier for ' +\x0d\n  'conditions: %s'\x2C\x0d\n  Error);\x0d\nE('ERR_MANIFEST_INTEGRITY_MISMATCH'\x2C\x0d\n  'Manifest resource %s has multiple entries but integrity lists do not match'\x2C\x0d\n  SyntaxError);\x0d\nE('ERR_MANIFEST_INVALID_RESOURCE_FIELD'\x2C\x0d\n  'Manifest resource %s has invalid property value for %s'\x2C\x0d\n  TypeError);\x0d\nE('ERR_MANIFEST_INVALID_SPECIFIER'\x2C\x0d\n  'Manifest resource %s has invalid dependency mapping %s'\x2C\x0d\n  TypeError);\x0d\nE('ERR_MANIFEST_TDZ'\x2C 'Manifest initialization has not yet run'\x2C Error);\x0d\nE('ERR_MANIFEST_UNKNOWN_ONERROR'\x2C\x0d\n  'Manifest specified unknown error behavior "%s".'\x2C\x0d\n  SyntaxError);\x0d\nE('ERR_METHOD_NOT_IMPLEMENTED'\x2C 'The %s method is not implemented'\x2C Error);\x0d\nE('ERR_MISSING_ARGS'\x2C\x0d\n  (...args) => {\x0d\n    assert(args.length > 0\x2C 'At least one arg needs to be specified');\x0d\n    let msg = 'The ';\x0d\n    const len = args.length;\x0d\n    const wrap = (a) => `"${a}"`;\x0d\n    args = ArrayPrototypeMap(\x0d\n      args\x2C\x0d\n      (a) => (ArrayIsArray(a) ?\x0d\n        ArrayPrototypeJoin(ArrayPrototypeMap(a\x2C wrap)\x2C ' or ') :\x0d\n        wrap(a))\x0d\n    );\x0d\n    switch (len) {\x0d\n      case 1:\x0d\n        msg += `${args[0]} argument`;\x0d\n        break;\x0d\n      case 2:\x0d\n        msg += `${args[0]} and ${args[1]} arguments`;\x0d\n        break;\x0d\n      default:\x0d\n        msg += ArrayPrototypeJoin(ArrayPrototypeSlice(args\x2C 0\x2C len - 1)\x2C '\x2C ');\x0d\n        msg += `\x2C and ${args[len - 1]} arguments`;\x0d\n        break;\x0d\n    }\x0d\n    return `${msg} must be specified`;\x0d\n  }\x2C TypeError);\x0d\nE('ERR_MISSING_OPTION'\x2C '%s is required'\x2C TypeError);\x0d\nE('ERR_MODULE_NOT_FOUND'\x2C (path\x2C base\x2C type = 'package') => {\x0d\n  return `Cannot find ${type} '${path}' imported from ${base}`;\x0d\n}\x2C Error);\x0d\nE('ERR_MULTIPLE_CALLBACK'\x2C 'Callback called multiple times'\x2C Error);\x0d\nE('ERR_NAPI_CONS_FUNCTION'\x2C 'Constructor must be a function'\x2C TypeError);\x0d\nE('ERR_NAPI_INVALID_DATAVIEW_ARGS'\x2C\x0d\n  'byte_offset + byte_length should be less than or equal to the size in ' +\x0d\n    'bytes of the array passed in'\x2C\x0d\n  RangeError);\x0d\nE('ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT'\x2C\x0d\n  'start offset of %s should be a multiple of %s'\x2C RangeError);\x0d\nE('ERR_NAPI_INVALID_TYPEDARRAY_LENGTH'\x2C\x0d\n  'Invalid typed array length'\x2C RangeError);\x0d\nE('ERR_NETWORK_IMPORT_BAD_RESPONSE'\x2C\x0d\n  "import '%s' received a bad response: %s"\x2C Error);\x0d\nE('ERR_NETWORK_IMPORT_DISALLOWED'\x2C\x0d\n  "import of '%s' by %s is not supported: %s"\x2C Error);\x0d\nE('ERR_NOT_BUILDING_SNAPSHOT'\x2C\x0d\n  'Operation cannot be invoked when not building startup snapshot'\x2C Error);\x0d\nE('ERR_NO_CRYPTO'\x2C\x0d\n  'Node.js is not compiled with OpenSSL crypto support'\x2C Error);\x0d\nE('ERR_NO_ICU'\x2C\x0d\n  '%s is not supported on Node.js compiled without ICU'\x2C TypeError);\x0d\nE('ERR_OPERATION_FAILED'\x2C 'Operation failed: %s'\x2C Error\x2C TypeError);\x0d\nE('ERR_OUT_OF_RANGE'\x2C\x0d\n  (str\x2C range\x2C input\x2C replaceDefaultBoolean = false) => {\x0d\n    assert(range\x2C 'Missing "range" argument');\x0d\n    let msg = replaceDefaultBoolean ? str :\x0d\n      `The value of "${str}" is out of range.`;\x0d\n    let received;\x0d\n    if (NumberIsInteger(input) && MathAbs(input) > 2 ** 32) {\x0d\n      received = addNumericalSeparator(String(input));\x0d\n    } else if (typeof input === 'bigint') {\x0d\n      received = String(input);\x0d\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\x0d\n        received = addNumericalSeparator(received);\x0d\n      }\x0d\n      received += 'n';\x0d\n    } else {\x0d\n      received = lazyInternalUtilInspect().inspect(input);\x0d\n    }\x0d\n    msg += ` It must be ${range}. Received ${received}`;\x0d\n    return msg;\x0d\n  }\x2C RangeError);\x0d\nE('ERR_PACKAGE_IMPORT_NOT_DEFINED'\x2C (specifier\x2C packagePath\x2C base) => {\x0d\n  return `Package import specifier "${specifier}" is not defined${packagePath ?\x0d\n    ` in package ${packagePath}package.json` : ''} imported from ${base}`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_PACKAGE_PATH_NOT_EXPORTED'\x2C (pkgPath\x2C subpath\x2C base = undefined) => {\x0d\n  if (subpath === '.')\x0d\n    return `No "exports" main defined in ${pkgPath}package.json${base ?\x0d\n      ` imported from ${base}` : ''}`;\x0d\n  return `Package subpath '${subpath}' is not defined by "exports" in ${\x0d\n    pkgPath}package.json${base ? ` imported from ${base}` : ''}`;\x0d\n}\x2C Error);\x0d\nE('ERR_PARSE_ARGS_INVALID_OPTION_VALUE'\x2C '%s'\x2C TypeError);\x0d\nE('ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL'\x2C "Unexpected argument '%s'. This " +\x0d\n  'command does not take positional arguments'\x2C TypeError);\x0d\nE('ERR_PARSE_ARGS_UNKNOWN_OPTION'\x2C (option\x2C allowPositionals) => {\x0d\n  const suggestDashDash = allowPositionals ? '. To specify a positional ' +\x0d\n    "argument starting with a '-'\x2C place it at the end of the command after " +\x0d\n    `'--'\x2C as in '-- ${JSONStringify(option)}` : '';\x0d\n  return `Unknown option '${option}'${suggestDashDash}`;\x0d\n}\x2C TypeError);\x0d\nE('ERR_PERFORMANCE_INVALID_TIMESTAMP'\x2C\x0d\n  '%d is not a valid timestamp'\x2C TypeError);\x0d\nE('ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS'\x2C '%s'\x2C TypeError);\x0d\nE('ERR_REQUIRE_ESM'\x2C\x0d\n  function(filename\x2C hasEsmSyntax\x2C parentPath = null\x2C packageJsonPath = null) {\x0d\n    hideInternalStackFrames(this);\x0d\n    let msg = `require() of ES Module ${filename}${parentPath ? ` from ${\x0d\n      parentPath}` : ''} not supported.`;\x0d\n    if (!packageJsonPath) {\x0d\n      if (StringPrototypeEndsWith(filename\x2C '.mjs'))\x0d\n        msg += `\\nInstead change the require of ${filename} to a dynamic ` +\x0d\n            'import() which is available in all CommonJS modules.';\x0d\n      return msg;\x0d\n    }\x0d\n    const path = require('path');\x0d\n    const basename = parentPath && path.basename(filename) ===\x0d\n      path.basename(parentPath) ? filename : path.basename(filename);\x0d\n    if (hasEsmSyntax) {\x0d\n      msg += `\\nInstead change the require of ${basename} in ${parentPath} to` +\x0d\n        ' a dynamic import() which is available in all CommonJS modules.';\x0d\n      return msg;\x0d\n    }\x0d\n    msg += `\\n${basename} is treated as an ES module file as it is a .js ` +\x0d\n      'file whose nearest parent package.json contains "type": "module" ' +\x0d\n      'which declares all .js files in that package scope as ES modules.' +\x0d\n      `\\nInstead rename ${basename} to end in .cjs\x2C change the requiring ` +\x0d\n      'code to use dynamic import() which is available in all CommonJS ' +\x0d\n      'modules\x2C or change "type": "module" to "type": "commonjs" in ' +\x0d\n      `${packageJsonPath} to treat all .js files as CommonJS (using .mjs for ` +\x0d\n      'all ES modules instead).\\n';\x0d\n    return msg;\x0d\n  }\x2C Error);\x0d\nE('ERR_SCRIPT_EXECUTION_INTERRUPTED'\x2C\x0d\n  'Script execution was interrupted by `SIGINT`'\x2C Error);\x0d\nE('ERR_SERVER_ALREADY_LISTEN'\x2C\x0d\n  'Listen method has been called more than once without closing.'\x2C Error);\x0d\nE('ERR_SERVER_NOT_RUNNING'\x2C 'Server is not running.'\x2C Error);\x0d\nE('ERR_SOCKET_ALREADY_BOUND'\x2C 'Socket is already bound'\x2C Error);\x0d\nE('ERR_SOCKET_BAD_BUFFER_SIZE'\x2C\x0d\n  'Buffer size must be a positive integer'\x2C TypeError);\x0d\nE('ERR_SOCKET_BAD_PORT'\x2C (name\x2C port\x2C allowZero = true) => {\x0d\n  assert(typeof allowZero === 'boolean'\x2C\x0d\n         "The 'allowZero' argument must be of type boolean.");\x0d\n  const operator = allowZero ? '>=' : '>';\x0d\n  return `${name} should be ${operator} 0 and < 65536. Received ${port}.`;\x0d\n}\x2C RangeError);\x0d\nE('ERR_SOCKET_BAD_TYPE'\x2C\x0d\n  'Bad socket type specified. Valid types are: udp4\x2C udp6'\x2C TypeError);\x0d\nE('ERR_SOCKET_BUFFER_SIZE'\x2C\x0d\n  'Could not get or set buffer size'\x2C\x0d\n  SystemError);\x0d\nE('ERR_SOCKET_CLOSED'\x2C 'Socket is closed'\x2C Error);\x0d\nE('ERR_SOCKET_DGRAM_IS_CONNECTED'\x2C 'Already connected'\x2C Error);\x0d\nE('ERR_SOCKET_DGRAM_NOT_CONNECTED'\x2C 'Not connected'\x2C Error);\x0d\nE('ERR_SOCKET_DGRAM_NOT_RUNNING'\x2C 'Not running'\x2C Error);\x0d\nE('ERR_SRI_PARSE'\x2C\x0d\n  'Subresource Integrity string %j had an unexpected %j at position %d'\x2C\x0d\n  SyntaxError);\x0d\nE('ERR_STREAM_ALREADY_FINISHED'\x2C\x0d\n  'Cannot call %s after a stream was finished'\x2C\x0d\n  Error);\x0d\nE('ERR_STREAM_CANNOT_PIPE'\x2C 'Cannot pipe\x2C not readable'\x2C Error);\x0d\nE('ERR_STREAM_DESTROYED'\x2C 'Cannot call %s after a stream was destroyed'\x2C Error);\x0d\nE('ERR_STREAM_NULL_VALUES'\x2C 'May not write null values to stream'\x2C TypeError);\x0d\nE('ERR_STREAM_PREMATURE_CLOSE'\x2C 'Premature close'\x2C Error);\x0d\nE('ERR_STREAM_PUSH_AFTER_EOF'\x2C 'stream.push() after EOF'\x2C Error);\x0d\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT'\x2C\x0d\n  'stream.unshift() after end event'\x2C Error);\x0d\nE('ERR_STREAM_WRAP'\x2C 'Stream has StringDecoder set or is in objectMode'\x2C Error);\x0d\nE('ERR_STREAM_WRITE_AFTER_END'\x2C 'write after end'\x2C Error);\x0d\nE('ERR_SYNTHETIC'\x2C 'JavaScript Callstack'\x2C Error);\x0d\nE('ERR_SYSTEM_ERROR'\x2C 'A system error occurred'\x2C SystemError);\x0d\nE('ERR_TEST_FAILURE'\x2C function(error\x2C failureType) {\x0d\n  hideInternalStackFrames(this);\x0d\n  assert(typeof failureType === 'string'\x2C\x0d\n         "The 'failureType' argument must be of type string.");\x0d\n\x0d\n  let msg = error?.message ?? error;\x0d\n\x0d\n  if (typeof msg !== 'string') {\x0d\n    msg = inspectWithNoCustomRetry(msg);\x0d\n  }\x0d\n\x0d\n  this.failureType = failureType;\x0d\n  this.cause = error;\x0d\n  return msg;\x0d\n}\x2C Error);\x0d\nE('ERR_TLS_CERT_ALTNAME_FORMAT'\x2C 'Invalid subject alternative name string'\x2C\x0d\n  SyntaxError);\x0d\nE('ERR_TLS_CERT_ALTNAME_INVALID'\x2C function(reason\x2C host\x2C cert) {\x0d\n  this.reason = reason;\x0d\n  this.host = host;\x0d\n  this.cert = cert;\x0d\n  return `Hostname/IP does not match certificate's altnames: ${reason}`;\x0d\n}\x2C Error);\x0d\nE('ERR_TLS_DH_PARAM_SIZE'\x2C 'DH parameter size %s is less than 2048'\x2C Error);\x0d\nE('ERR_TLS_HANDSHAKE_TIMEOUT'\x2C 'TLS handshake timeout'\x2C Error);\x0d\nE('ERR_TLS_INVALID_CONTEXT'\x2C '%s must be a SecureContext'\x2C TypeError);\x0d\nE('ERR_TLS_INVALID_PROTOCOL_VERSION'\x2C\x0d\n  '%j is not a valid %s TLS protocol version'\x2C TypeError);\x0d\nE('ERR_TLS_INVALID_STATE'\x2C 'TLS socket connection must be securely established'\x2C\x0d\n  Error);\x0d\nE('ERR_TLS_PROTOCOL_VERSION_CONFLICT'\x2C\x0d\n  'TLS protocol version %j conflicts with secureProtocol %j'\x2C TypeError);\x0d\nE('ERR_TLS_RENEGOTIATION_DISABLED'\x2C\x0d\n  'TLS session renegotiation disabled for this socket'\x2C Error);\x0d\n\x0d\n// This should probably be a `TypeError`.\x0d\nE('ERR_TLS_REQUIRED_SERVER_NAME'\x2C\x0d\n  '"servername" is required parameter for Server.addContext'\x2C Error);\x0d\nE('ERR_TLS_SESSION_ATTACK'\x2C 'TLS session renegotiation attack detected'\x2C Error);\x0d\nE('ERR_TLS_SNI_FROM_SERVER'\x2C\x0d\n  'Cannot issue SNI from a TLS server-side socket'\x2C Error);\x0d\nE('ERR_TRACE_EVENTS_CATEGORY_REQUIRED'\x2C\x0d\n  'At least one category is required'\x2C TypeError);\x0d\nE('ERR_TRACE_EVENTS_UNAVAILABLE'\x2C 'Trace events are unavailable'\x2C Error);\x0d\n\x0d\n// This should probably be a `RangeError`.\x0d\nE('ERR_TTY_INIT_FAILED'\x2C 'TTY initialization failed'\x2C SystemError);\x0d\nE('ERR_UNAVAILABLE_DURING_EXIT'\x2C 'Cannot call function in process exit ' +\x0d\n  'handler'\x2C Error);\x0d\nE('ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET'\x2C\x0d\n  '`process.setupUncaughtExceptionCapture()` was called while a capture ' +\x0d\n    'callback was already active'\x2C\x0d\n  Error);\x0d\nE('ERR_UNESCAPED_CHARACTERS'\x2C '%s contains unescaped characters'\x2C TypeError);\x0d\nE('ERR_UNHANDLED_ERROR'\x2C\x0d\n  // Using a default argument here is important so the argument is not counted\x0d\n  // towards `Function#length`.\x0d\n  (err = undefined) => {\x0d\n    const msg = 'Unhandled error.';\x0d\n    if (err === undefined) return msg;\x0d\n    return `${msg} (${err})`;\x0d\n  }\x2C Error);\x0d\nE('ERR_UNKNOWN_BUILTIN_MODULE'\x2C 'No such built-in module: %s'\x2C Error);\x0d\nE('ERR_UNKNOWN_CREDENTIAL'\x2C '%s identifier does not exist: %s'\x2C Error);\x0d\nE('ERR_UNKNOWN_ENCODING'\x2C 'Unknown encoding: %s'\x2C TypeError);\x0d\nE('ERR_UNKNOWN_FILE_EXTENSION'\x2C (ext\x2C path\x2C suggestion) => {\x0d\n  let msg = `Unknown file extension "${ext}" for ${path}`;\x0d\n  if (suggestion) {\x0d\n    msg += `. ${suggestion}`;\x0d\n  }\x0d\n  return msg;\x0d\n}\x2C TypeError);\x0d\nE('ERR_UNKNOWN_MODULE_FORMAT'\x2C 'Unknown module format: %s for URL %s'\x2C\x0d\n  RangeError);\x0d\nE('ERR_UNKNOWN_SIGNAL'\x2C 'Unknown signal: %s'\x2C TypeError);\x0d\nE('ERR_UNSUPPORTED_DIR_IMPORT'\x2C "Directory import '%s' is not supported " +\x0d\n'resolving ES modules imported from %s'\x2C Error);\x0d\nE('ERR_UNSUPPORTED_ESM_URL_SCHEME'\x2C (url\x2C supported) => {\x0d\n  let msg = `Only URLs with a scheme in: ${ArrayPrototypeJoin(supported\x2C '\x2C ')} are supported by the default ESM loader`;\x0d\n  if (isWindows && url.protocol.length === 2) {\x0d\n    msg +=\x0d\n      '. On Windows\x2C absolute paths must be valid file:// URLs';\x0d\n  }\x0d\n  msg += `. Received protocol '${url.protocol}'`;\x0d\n  return msg;\x0d\n}\x2C Error);\x0d\n\x0d\n// This should probably be a `TypeError`.\x0d\nE('ERR_VALID_PERFORMANCE_ENTRY_TYPE'\x2C\x0d\n  'At least one valid performance entry type is required'\x2C Error);\x0d\nE('ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING'\x2C\x0d\n  'A dynamic import callback was not specified.'\x2C TypeError);\x0d\nE('ERR_VM_MODULE_ALREADY_LINKED'\x2C 'Module has already been linked'\x2C Error);\x0d\nE('ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA'\x2C\x0d\n  'Cached data cannot be created for a module which has been evaluated'\x2C Error);\x0d\nE('ERR_VM_MODULE_DIFFERENT_CONTEXT'\x2C\x0d\n  'Linked modules must use the same context'\x2C Error);\x0d\nE('ERR_VM_MODULE_LINK_FAILURE'\x2C function(message\x2C cause) {\x0d\n  this.cause = cause;\x0d\n  return message;\x0d\n}\x2C Error);\x0d\nE('ERR_VM_MODULE_NOT_MODULE'\x2C\x0d\n  'Provided module is not an instance of Module'\x2C Error);\x0d\nE('ERR_VM_MODULE_STATUS'\x2C 'Module status %s'\x2C Error);\x0d\nE('ERR_WASI_ALREADY_STARTED'\x2C 'WASI instance has already started'\x2C Error);\x0d\nE('ERR_WORKER_INIT_FAILED'\x2C 'Worker initialization failure: %s'\x2C Error);\x0d\nE('ERR_WORKER_INVALID_EXEC_ARGV'\x2C (errors\x2C msg = 'invalid execArgv flags') =>\x0d\n  `Initiated Worker with ${msg}: ${ArrayPrototypeJoin(errors\x2C '\x2C ')}`\x2C\x0d\n  Error);\x0d\nE('ERR_WORKER_NOT_RUNNING'\x2C 'Worker instance not running'\x2C Error);\x0d\nE('ERR_WORKER_OUT_OF_MEMORY'\x2C\x0d\n  'Worker terminated due to reaching memory limit: %s'\x2C Error);\x0d\nE('ERR_WORKER_PATH'\x2C (filename) =>\x0d\n  'The worker script or module filename must be an absolute path or a ' +\x0d\n  'relative path starting with \\'./\\' or \\'../\\'.' +\x0d\n  (StringPrototypeStartsWith(filename\x2C 'file://') ?\x0d\n    ' Wrap file:// URLs with `new URL`.' : ''\x0d\n  ) +\x0d\n  (StringPrototypeStartsWith(filename\x2C 'data:text/javascript') ?\x0d\n    ' Wrap data: URLs with `new URL`.' : ''\x0d\n  ) +\x0d\n  ` Received "${filename}"`\x2C\x0d\n  TypeError);\x0d\nE('ERR_WORKER_UNSERIALIZABLE_ERROR'\x2C\x0d\n  'Serializing an uncaught exception failed'\x2C Error);\x0d\nE('ERR_WORKER_UNSUPPORTED_OPERATION'\x2C\x0d\n  '%s is not supported in workers'\x2C TypeError);\x0d\nE('ERR_ZLIB_INITIALIZATION_FAILED'\x2C 'Initialization failed'\x2C Error);\x0d\n
code-source-info,0x65ec1db0be,11,10250,11269,C0O10250C3O10281C10O10287C15O10309C20O10313C25O10347C33O10369C37O10393C40O10393C46O10465C51O10469C56O10503C65O10525C69O10555C83O10555C89O10590C96O10613C105O10630C109O10645C121O10804C128O10848C142O10966C147O11003C162O10590C167O11191C174O11191C178O11228C180O11239C184O11251C186O11264,,
tick,0x7ff6d60f594f,489261,0,0x0,3,0x7ff6d61cb560,0x65ec1dae05,0x7ff6d5c22f90,0x2ade89fc4d7,0x64be93fc2b,0x2ade89ffaca,0x2ade89fee98,0x2ade89fe6e6,0x65ec1dacac,0x7ff6d5cf67d0,0x65ec1d026a,0x7ff6d6643c13
code-creation,LazyCompile,10,489374,0x65ec1de8c6,64,isErrorStackTraceLimitWritable node:internal/errors:193:40,0x39b87e76e0,~
code-source-info,0x65ec1de8c6,11,5613,5879,C0O5634C7O5665C13O5634C19O5695C21O5726C28O5752C31O5733C35O5759C36O5770C44O5777C51O5837C57O5858C62O5862C63O5876,,
code-creation,LazyCompile,10,489596,0x65ec1deb5e,291,getMessage node:internal/errors:427:20,0x39b87e7d38,~
code-source-info,0x65ec1deb5e,11,12377,13256,C0O12412C5O12421C10O12421C16O12436C30O12447C37O12443C43O12480C49O12518C54O12537C59O12552C63O12544C72O12609C83O12653C101O12716C115O12673C119O12518C124O12740C138O12747C143O12777C144O12802C149O12841C151O12886C156O12854C163O12896C168O12847C171O12917C176O12954C180O12945C189O12976C200O13020C220O13077C230O13040C234O12917C239O13114C245O13121C250O13133C252O13144C253O13150C258O13150C263O13187C271O13207C275O13232C285O13194C290O13253,,
code-creation,LazyCompile,10,489746,0x65ec1dee0e,9, node:internal/errors:1365:30,0x39b87e89a8,~
code-source-info,0x65ec1dee0e,11,49094,49244,C0O49107C2O49118C6O49220C8O49241,,
code-creation,LazyCompile,10,489896,0x65ec1def4e,68,captureLargerStackTrace node:internal/errors:472:35,0x39b87e7e28,~
code-source-info,0x65ec1def4e,11,13666,14047,C0O13713C3O13713C7O13752C9O13792C14O13820C21O13812C27O13844C32O13868C35O13866C39O13890C44O13890C48O13948C52O13979C59O14003C61O14001C65O14031C67O14042,,
code-creation,LazyCompile,10,490274,0x65ec1df1f6,454,packageResolve node:internal/modules/esm/resolve:793:24,0x64be9060b0,~
code-source-info,0x65ec1df1f
code-creation,LazyCompile,10,490466,0x65ec1df596,28,canBeRequiredByUsers node:internal/bootstrap/loaders:247:30,0x39b87d0988,~
code-source-info,0x65ec1df596,9,7753,7853,C0O7777C5O7791C10O7795C15O7795C21O7809C23O7827C27O7848,,
code-creation,LazyCompile,10,490614,0x65ec1df72e,3,node: node:internal/modules/esm/get_format:32:10,0x64be90ad68,~
code-source-info,0x65ec1df72e,115,1118,1142,C0O1123C2O1140,,
code-creation,Function,11,490872,0x246eeed0e80,2568, node:internal/url:696:12,0xb0b6eb90a8,^
code-source-info,0x246eeed0e80,39,20021,21316,,,
code-creation,Function,11,490941,0x246eeed1900,956,URL node:internal/url:633:14,0xb0b6eb8ee0,^
code-source-info,0x246eeed1900,39,18158,18562,,,
code-creation,Function,11,490990,0x246eeed1d20,188,isURLInstance node:internal/url:1508:23,0xb0b6eba138,^
code-source-info,0x246eeed1d20,39,43532,43631,,,
code-creation,Function,11,491041,0x246eeed1e40,168,get href node:internal/url:748:11,0xb0b6eb9148,^
code-source-info,0x246eeed1e40,39,21438,21478,,,
code-creation,Function,11,491099,0x246eeed1f60,620,get pathname node:internal/url:890:15,0xb0b6eb97a8,^
code-source-info,0x246eeed1f60,39,24934,25134,,,
code-creation,Function,11,491150,0x246eeed2240,252,SafePromise node:internal/per_context/primordials:408:16,0x39b87cae08,^
code-source-info,0x246eeed2240,6,12178,12209,,,
code-creation,Function,11,491200,0x246eeed23a0,336,initSearchParams node:internal/url:1031:26,0xb0b6eb9c28,^
code-source-info,0x246eeed23a0,39,28728,28849,,,
code-creation,RegExp,3,491448,0x246eeed2560,972,%2F|%5C
code-creation,RegExp,3,492311,0x246eeed29a0,612,(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])
code-creation,Function,11,493534,0x246eeed2c80,2004,extname node:path:836:10,0x32ebb7cd818,^
code-source-info,0x246eeed2c80,41,26945,29073,,,
code-creation,Function,11,493593,0x246eeed34c0,196,get hostname node:internal/url:856:15,0xb0b6eb95f8,^
code-source-info,0x246eeed34c0,39,24110,24157,,,
code-creation,Function,11,493641,0x246eeed3600,168,toString node:internal/url:744:11,0xb0b6eb90f8,^
code-source-info,0x246eeed3600,39,21384,21424,,,
code-creation,Function,11,493690,0x246eeed3720,220,msFromTimeSpec node:internal/fs/utils:449:24,0x6414ea27c0,^
code-source-info,0x246eeed3720,84,11503,11564,,,
code-creation,Function,11,493738,0x246eeed3860,260,dateFromMs node:internal/fs/utils:463:20,0x6414ea2860,^
code-source-info,0x246eeed3860,84,12029,12076,,,
code-creation,Function,11,493786,0x246eeed39e0,164,isUint8Array node:internal/util/types:13:22,0x2392d4c0b8,^
code-source-info,0x246eeed39e0,17,269,356,,,
code-creation,Function,11,494739,0x246eeed3b00,7900,realpathSync node:fs:2455:22,0x6414e99880,^
code-source-info,0x246eeed3b00,83,67741,71761,,,
code-creation,Function,11,494797,0x246eeed5a40,248,shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:873:49,0x64be9061a0,^
code-source-info,0x246eeed5a40,113,29736,29875,,,
code-creation,Function,11,497005,0x246eeed5ba0,564,isRelativeSpecifier node:internal/modules/esm/resolve:863:29,0x64be906150,^
code-source-info,0x246eeed5ba0,113,29433,29684,,,
code-creation,Function,11,497081,0x246eeed5e40,1116,get origin node:internal/url:761:13,0xb0b6eb9218,^
code-source-info,0x246eeed5e40,39,21760,22340,,,
code-creation,Function,11,497139,0x246eeed6300,588,Stats._checkModeProperty node:internal/fs/utils:520:46,0x6414ea2a08,^
code-source-info,0x246eeed6300,84,14194,14422,,,
code-creation,Function,11,497188,0x246eeed65c0,172,toPathIfFileURL node:internal/url:1512:25,0xb0b6eba188,^
code-source-info,0x246eeed65c0,39,43659,43784,,,
code-creation,Function,11,497245,0x246eeed66e0,900,fileURLToPath node:internal/url:1429:23,0xb0b6eba028,^
code-source-info,0x246eeed66e0,39,40375,40708,,,
code-creation,Function,11,498412,0x246eeed6ae0,568,handleErrorFromBinding node:internal/fs/utils:343:32,0x6414ea22a0,^
code-source-info,0x246eeed6ae0,84,8315,8826,,,
code-creation,Function,11,498484,0x246eeed6d80,888, node:internal/fs/utils:360:35,0x6414ea22f0,^
code-source-info,0x246eeed6d80,84,8971,9580,,,
code-creation,Function,11,498542,0x246eeed7160,676, node:internal/fs/utils:671:38,0x6414ea2c78,^
code-source-info,0x246eeed7160,84,18882,19162,,,
code-creation,Function,11,498595,0x246eeed7480,564,set pathname node:internal/url:899:15,0xb0b6eb9818,^
code-source-info,0x246eeed7480,39,25152,25361,,,
code-creation,Function,11,498646,0x246eeed7720,372,validateArgs node:internal/modules/esm/loader:821:26,0x2ade89fe9f0,^
code-source-info,0x246eeed7720,109,24721,24997,,,
code-creation,Function,11,498696,0x246eeed7900,308, node:internal/fs/utils:683:42,0x6414ea2cc8,^
code-source-info,0x246eeed7900,84,19209,19348,,,
code-creation,Function,11,499628,0x246eeed7aa0,164,isBigUint64Array node:internal/util/types:53:26,0x2392d4c520,^
code-source-info,0x246eeed7aa0,17,1423,1514,,,
code-creation,Function,11,499686,0x246eeed7bc0,284,SideEffectFreeRegExpPrototypeExec node:internal/util:568:43,0x2392d47090,^
code-source-info,0x246eeed7bc0,15,16273,16447,,,
code-creation,Function,11,499740,0x246eeed7d40,232,splitRoot node:fs:2407:33,0x6414e99738,^
code-source-info,0x246eeed7d40,83,66412,66492,,,
code-creation,Function,11,499799,0x246eeed7ea0,552,defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:102:39,0x64be90acc8,^
code-source-info,0x246eeed7ea0,115,3502,3713,,,
code-creation,Function,11,499882,0x246eeed8140,2740,nextHookFactory node:internal/modules/esm/loader:114:25,0x2f2f3a3c470,^
code-source-info,0x246eeed8140,109,3442,5559,,,
code-creation,Function,11,500384,0x246eeed8c60,912,onParsePathComplete node:internal/url:604:29,0xb0b6eb8df0,^
code-source-info,0x246eeed8c60,39,17294,17776,,,
code-creation,Function,11,500444,0x246eeed9060,340,StatsBase node:internal/fs/utils:403:19,0x6414ea2390,^
code-source-info,0x246eeed9060,84,10364,10665,,,
code-creation,Function,11,500498,0x246eeed9220,680,Stats node:internal/fs/utils:498:15,0x6414ea29b8,^
code-source-info,0x246eeed9220,84,13295,13836,,,
code-creation,Function,11,500556,0x246eeed9540,960,statSync node:fs:1575:18,0x6414e98978,^
code-source-info,0x246eeed9540,83,41685,42099,,,
code-creation,Function,11,500604,0x246eeed9960,160,StatsBase.isDirectory node:internal/fs/utils:417:43,0x6414ea23e0,^
code-source-info,0x246eeed9960,84,10711,10762,,,
code-creation,Function,11,500650,0x246eeed9a60,160,StatsBase.isFile node:internal/fs/utils:421:38,0x6414ea2470,^
code-source-info,0x246eeed9a60,84,10804,10855,,,
code-creation,Function,11,501823,0x246eeed9b60,2960,ObjectDefineProperty.__proto__ node:internal/modules/esm/loader:148:5,0x2ade89ff3d8,^
code-source-info,0x246eeed9b60,109,4580,5489,,,
code-creation,Function,11,501882,0x246eeeda760,168,getPackageType node:internal/modules/esm/resolve:744:24,0x64be906010,^
code-source-info,0x246eeeda760,113,25551,25644,,,
code-creation,Function,11,501946,0x246eeeda880,1312,getPackageScopeConfig node:internal/modules/esm/package_config:105:31,0x64be909dc0,^
code-source-info,0x246eeeda880,114,2598,3694,,,
tick,0x7ff6d660a010,503427,0,0x0,0,0x246eeecdc72,0x246eeecf568,0x246eeed4a16,0x65ec1c45f4,0x65ec1c4223,0x64be93fd4b,0x246eeeda405,0x2ade89fee98,0x2ade89fe6e6,0x65ec1dacac,0x7ff6d5cf67d0,0x65ec1d026a,0x7ff6d6643c13
code-creation,Function,11,504224,0x246eeedae00,4136,resolve node:internal/modules/esm/loader:788:16,0x2f2f3a3c810,^
code-source-info,0x246eeedae00,109,23968,26773,,,
code-creation,Function,11,504296,0x246eeedbea0,364, node:internal/per_context/primordials:439:7,0x65ec1ca1b8,^
code-source-info,0x246eeedbea0,6,13312,13435,,,
code-creation,Function,11,504476,0x246eeedc080,328, node:internal/per_context/primordials:440:25,0x65ec1ca380,^
code-source-info,0x246eeedc080,6,13353,13434,,,
code-creation,Function,11,504543,0x246eeedc240,584,has node:internal/modules/esm/module_map:37:6,0x2f2f3a3f6e8,^
code-source-info,0x246eeedc240,110,1295,1453,,,
code-creation,Function,11,504648,0x246eeedc500,320,validateOutput node:internal/modules/esm/loader:829:28,0x2ade89fea40,^
code-source-info,0x246eeedc500,109,25027,25272,,,
code-creation,Function,11,506273,0x246eeedc6a0,1468,set node:internal/modules/esm/module_map:23:6,0x2f2f3a3f698,^
code-source-info,0x246eeedc6a0,110,755,1288,,,
code-creation,Function,11,506370,0x246eeedccc0,1056,getOptions node:internal/fs/utils:318:20,0x6414ea2250,^
code-source-info,0x246eeedccc0,84,7595,8221,,,
code-creation,Function,11,506420,0x246eeedd140,40,noop node:internal/util/debuglog:47:14,0x2392d68038,^
code-source-info,0x246eeedd140,22,1465,1473,,,
code-creation,Function,11,506488,0x246eeedd1e0,1332,ModuleJob node:internal/modules/esm/module_job:53:14,0x64be901460,^
code-source-info,0x246eeedd1e0,111,1307,3126,,,
code-creation,Function,11,506543,0x246eeedd780,552,get node:internal/modules/esm/module_map:18:6,0x2f2f3a3f648,^
code-source-info,0x246eeedd780,110,604,748,,,
code-creation,Function,11,507241,0x246eeedda20,1320,open node:internal/fs/promises:455:20,0x64be92c680,^
code-source-info,0x246eeedda20,126,11856,12169,,,
code-creation,Function,11,507343,0x246eeeddfc0,1424,getModuleJob node:internal/modules/esm/loader:410:21,0x2f2f3a3c680,^
code-source-info,0x246eeeddfc0,109,11865,12808,,,
code-creation,Function,11,507410,0x246eeede5c0,1180,#createModuleJob node:internal/modules/esm/loader:451:19,0x2f2f3a3c4f0,^
code-source-info,0x246eeede5c0,109,13475,14485,,,
code-creation,LazyCompile,10,507685,0x65ec1e460e,153,builtinStrategy node:internal/modules/esm/translators:253:58,0x64be93b750,~
code-source-info,0x65ec1e460e,128,7774,8137,C6O7774C14O7785C24O7820C29O7785C33O7869C41O7869C47O7917C52O7917C58O7948C66O7953C75O7997C77O8012C84O8018C89O8012C90O8063C100O8094C105O8063C109O8119C114O8119C128O8134,,
code-creation,LazyCompile,10,507844,0x65ec1e4806,62,loadBuiltinModule node:internal/modules/cjs/helpers:49:27,0x2f2f3a2eab0,~
code-source-info,0x65ec1e4806,105,1318,1609,C0O1355C5O1369C10O1373C15O1373C21O1391C26O1398C35O1429C43O1429C48O1559C53O1559C57O1590C59O1601C61O1608,,
code-creation,LazyCompile,10,507952,0x65ec1e50f6,10, node:internal/modules/cjs/helpers:34:66,0x2f2f3a2ecd0,~
code-source-info,0x65ec1e50f6,105,961,988,C0O974C2O980C9O987,,
code-creation,LazyCompile,10,508071,0x65ec1e526e,129,compileForPublicLoader node:internal/bootstrap/loaders:263:25,0x39b87d0af8,~
code-source-info,0x65ec1e526e,9,8274,8962,C0O8294C6O8441C16O8484C33O8447C38O8441C39O8523C44O8523C48O8566C54O8758C61O8789C69O8758C75O8814C80O8832C90O8848C93O8864C98O8848C102O8830C106O8891C111O8891C115O8917C120O8917C124O8949C128O8957,,
code-creation,LazyCompile,10,508260,0x65ec1e550e,151,getESMFacade node:internal/bootstrap/loaders:281:15,0x39b87d0b70,~
code-source-info,0x65ec1e550e,9,8980,9626,C0O8980C8O8999C14O9019C18O9026C19O9055C29O9055C34O9040C39O9104C42O9117C51O9149C53O9149C55O9180C62O9205C67O9180C72O9223C82O9223C87O9272C89O9325C102O9286C107O9284C111O9537C116O9544C121O9544C125O9569C130O9576C140O9576C146O9614C150O9621,,
code-creation,LazyCompile,10,508464,0x65ec1e587e,40, node:internal/bootstrap/loaders:290:15,0x65ec1e5408,~
code-source-info,0x65ec1e587e,9,9353,9461,C0O9367C5O9380C10O9380C14O9409C24O9430C27O9443C32O9409C39O9460,,
code-creation,LazyCompile,10,508584,0x65ec1e59d6,89,syncExports node:internal/bootstrap/loaders:304:14,0x39b87d0be0,~
code-source-info,0x65ec1e59d6,9,9939,10282,C0O9968C5O9994C11O10024C13O10037C17O10029C22O10080C24O10085C28O10099C30O10114C35O10129C37O10153C42O10160C51O10213C54O10225C59O10251C67O10213C73O10160C79O10046C84O10011C88O10281,,
code-creation,LazyCompile,10,508695,0x65ec1e5b3e,35,getOwn node:internal/bootstrap/loaders:187:16,0x39b87d0780,~
code-source-info,0x65ec1e5b3e,9,5829,5987,C0O5866C5O5873C14O5928C26O5928C34O5984,,
new,MemoryChunk,0x1e5aedc0000,262144
new,MemoryChunk,0x11802540000,262144
new,MemoryChunk,0x2844d680000,262144
new,MemoryChunk,0x20959940000,262144
scavenge,begin,0,375000,1724493771063
scavenge,end,0,390625,1724493771069
tick,0x7ff813250394,519679,0,0x0,8
tick,0x7ff813250394,535523,0,0x0,8
code-creation,Function,11,541514,0x246eeedeac0,176, node:internal/per_context/primordials:425:21,0x65ec1d3490,^
code-source-info,0x246eeedeac0,6,12904,12953,,,
code-creation,Function,11,541626,0x246eeedebe0,952, node:internal/modules/esm/module_job:75:41,0x65ec1d00d8,^
code-source-info,0x246eeedebe0,111,2342,2598,,,
code-creation,Function,11,541688,0x246eeedf000,304,getOwn node:internal/bootstrap/loaders:187:16,0x39b87d0780,^
code-source-info,0x246eeedf000,9,5829,5987,,,
code-creation,Function,11,541749,0x246eeedf1a0,672,syncExports node:internal/bootstrap/loaders:304:14,0x39b87d0be0,^
code-source-info,0x246eeedf1a0,9,9939,10282,,,
code-creation,Function,11,541798,0x246eeedf4a0,108,SafeIterator node:internal/per_context/primordials:285:16,0x39b87ca360,^
code-source-info,0x246eeedf4a0,6,8422,8484,,,
code-creation,Function,11,541843,0x246eeedf580,40, node:internal/per_context/primordials:291:21,0x39b87ca4d0,^
code-source-info,0x246eeedf580,6,8563,8594,,,
code-creation,Function,11,541890,0x246eeedf620,120,get fd node:internal/fs/promises:135:9,0x64be92d278,^
code-source-info,0x246eeedf620,126,3283,3315,,,
code-creation,Function,11,542238,0x246eeedf700,252,<instance_members_initializer> node:internal/fs/promises:195:3,0x64be92d958,^
code-source-info,0x246eeedf700,126,4461,5290,,,
code-creation,Function,11,542310,0x246eeedf860,312, node:internal/per_context/primordials:424:15,0x65ec1d3308,^
code-source-info,0x246eeedf860,6,12873,13000,,,
code-creation,Function,11,542364,0x246eeedfa00,356,primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:421:43,0x39b87cae58,^
code-source-info,0x246eeedfa00,6,12725,13005,,,
code-creation,Function,11,542440,0x246eeedfbe0,1292,readFile node:internal/fs/promises:811:24,0x64be92d170,^
code-source-info,0x246eeedfbe0,126,23406,23752,,,
code-creation,Function,11,542493,0x246eeee0160,144,EventEmitter node:events:212:22,0x2392d713c0,^
code-source-info,0x246eeee0160,23,6524,6574,,,
code-creation,Function,11,542548,0x246eeee0260,572,MixedEventEmitter node:internal/event_target:1064:16,0x64be938408,^
code-source-info,0x246eeee0260,44,28805,28939,,,
code-creation,Script,10,544532,0x65ec1e7906,64, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/filesystem.js:1:1,0x65ec1e6d60,~
script-source,134,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/filesystem.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport { Color } from '../lib/terminal.js'\x0d\n\x0d\nexport function readDirSync(dirPath\x2C onFile = () => { }) {\x0d\n  const fileNames = fs.readdirSync(dirPath);\x0d\n  for (const fileName of fileNames) {\x0d\n    const filePath = path.join(dirPath\x2C fileName);\x0d\n    const extension = path.extname(filePath);\x0d\n    const stats = fs.statSync(filePath);\x0d\n    const fileType = stats.isDirectory() ? 'dir' : 'file';\x0d\n    onFile({ filePath\x2C fileType\x2C fileName\x2C extension });\x0d\n  }\x0d\n}\x0d\n\x0d\nexport async function readDir(dirPath\x2C onFile = async () => { }) {\x0d\n  const files = await fs.promises.readdir(dirPath);\x0d\n  for (const file of files) {\x0d\n    const filePath = path.join(dirPath\x2C file);\x0d\n    const extension = path.extname(filePath);\x0d\n    const stats = fs.statSync(filePath);\x0d\n    const fileType = stats.isDirectory() ? 'dir' : 'file';\x0d\n    onFile({ filePath\x2C fileType\x2C fileName: file\x2C extension });\x0d\n  }\x0d\n}\x0d\n\x0d\nexport function writeObjectToFile(path\x2C object\x2C pretty = false) {\x0d\n  // depending on object size\x2C it would be better to stream this\x0d\n  const content = pretty ? JSON.stringify(object\x2C null\x2C 2) : JSON.stringify(object);\x0d\n  fs.writeFileSync(path\x2C content\x2C { encoding: 'utf-8' });\x0d\n}\x0d\n\x0d\nexport function ensureDirExists(filePath) {\x0d\n  // Based on https://stackoverflow.com/a/34509653/create-directory-when-writing-to-file-in-node-js by Tiago Peres Fran\xe7a\x2C 2015-12-29\x0d\n  // `path.dirname() removes trailing separators\x2C so we make sure to add an arbitrary character when input is a directory.\x0d\n  const objectPath = filePath.endsWith(path.sep) ? `${filePath}.` : filePath;\x0d\n  const dirname = path.dirname(objectPath);\x0d\n  if (fs.existsSync(dirname)) return true;\x0d\n  ensureDirExists(dirname);\x0d\n  fs.mkdirSync(dirname);\x0d\n}\x0d\n\x0d\nexport function ensureDirExists2(directoryPath) {\x0d\n  throw new Error(`This function runs unreliably. Use ensureDirExists() instead. `);\x0d\n  const directories = directoryPath.split(path.sep);\x0d\n  let currentPath = '';\x0d\n  for (const dir of directories) {\x0d\n    currentPath = path.join(currentPath\x2C dir);\x0d\n    if (fs.existsSync(currentPath)) continue;\x0d\n    fs.mkdirSync(currentPath);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction fileIsNewer(source\x2C target) {\x0d\n  const getTime = (path) => fs.statSync(path).mtime;\x0d\n  if (!fs.existsSync(target)) return true;\x0d\n  if (!fs.existsSync(source)) return false;\x0d\n  return getTime(source) > getTime(target);\x0d\n}\x0d\n\x0d\nexport function handleFileIfNewer({sourcePath\x2C targetPath\x2C onFile = () => {}\x2C onSkip = () => {}}) {\x0d\n  if (!fileIsNewer(sourcePath\x2C targetPath)) {\x0d\n    onSkip(sourcePath\x2C targetPath);\x0d\n    return;\x0d\n  }\x0d\n  onFile(sourcePath\x2C targetPath);\x0d\n}\x0d\n\x0d\nexport async function handleFileIfNewerAsync({sourcePath\x2C targetPath\x2C onFile = async () => {}\x2C onSkip = async () => {}}) {\x0d\n  if (!fileIsNewer(sourcePath\x2C targetPath)) {\x0d\n    await onSkip(sourcePath\x2C targetPath);\x0d\n    return;\x0d\n  }\x0d\n  await onFile(sourcePath\x2C targetPath);\x0d\n}\x0d\n\x0d\nexport function copyFileIfNewer(sourcePath\x2C targetPath\x2C silent = false) {\x0d\n  handleFileIfNewer({\x0d\n    sourcePath: sourcePath\x2C\x0d\n    targetPath: targetPath\x2C\x0d\n    onSkip: (sourcePath) => {\x0d\n      if (silent) return;\x0d\n      console.log(`${Color.Gray}Skipping '${sourcePath}'. ${Color.Reset}`);\x0d\n    }\x2C\x0d\n    onFile: (sourcePath\x2C targetPath) => {\x0d\n      if (!silent)\x0d\n        console.log(`${Color.Green}Copying '${Color.Blue + sourcePath + Color.Green}' to '${targetPath}'. ${Color.Reset}`);\x0d\n      fs.copyFileSync(sourcePath\x2C targetPath);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nexport function copyIfNewer(sourceDir\x2C targetDir\x2C silent = false) {\x0d\n  const files = fs.readdirSync(sourceDir);\x0d\n  for (const file of files) {\x0d\n    const sourcePath = path.join(sourceDir\x2C file);\x0d\n    const targetPath = path.join(targetDir\x2C file);\x0d\n    copyFileIfNewer(sourcePath\x2C targetPath\x2C silent);\x0d\n  }\x0d\n}\x0d\n\x0d\nexport function copyAndRenameFilesIfNewer(targetsBySources\x2C silent = false) {\x0d\n}\x0d\n\x0d\nexport function parseJsonFile(filePath) {\x0d\n  const data = fs.readFileSync(filePath\x2C 'utf-8');\x0d\n  return JSON.parse(data);\x0d\n}\x0d\n\x0d\nexport function deleteDirRecursive(dirPath) {\x0d\n  if (!fs.existsSync(dirPath))\x0d\n    return;\x0d\n  const files = fs.readdirSync(dirPath)\x0d\n  for (const file of files) {\x0d\n    const filePath = path.join(dirPath\x2C file);\x0d\n    if (fs.lstatSync(filePath).isDirectory()) {\x0d\n      deleteDirRecursive(filePath);\x0d\n      continue;\x0d\n    }\x0d\n    fs.unlinkSync(filePath);\x0d\n  }\x0d\n  fs.rmdirSync(dirPath);\x0d\n}\x0d\n
code-source-info,0x65ec1e7906,134,0,4353,C10O0C34O0C54O0C63O4353,,
code-creation,Function,11,545796,0x246eeee0500,7404,URLSearchParams node:internal/url:184:14,0xb0b6eb8720,^
code-source-info,0x246eeee0500,39,4560,7487,,,
code-creation,Function,11,545884,0x246eeee2260,944,FileHandle node:internal/fs/promises:122:14,0x64be92d1c0,^
code-source-info,0x246eeee2260,126,3033,3206,,,
code-creation,Function,11,545938,0x246eeee2680,284,FastBuffer node:internal/buffer:958:14,0xb0b6e8bb00,^
code-source-info,0x246eeee2680,25,27321,27412,,,
code-creation,Function,11,545993,0x246eeee2800,484,checkAborted node:internal/fs/promises:325:22,0x64be92c4a0,^
code-source-info,0x246eeee2800,126,7537,7639,,,
code-creation,Function,11,546043,0x246eeee2a60,224,allocUnsafeSlow node:buffer:388:50,0x2392d7d870,^
code-source-info,0x246eeee2a60,24,11717,11785,,,
code-creation,Function,11,546097,0x246eeee2ba0,648,isErrorStackTraceLimitWritable node:internal/errors:193:40,0x39b87e76e0,^
code-source-info,0x246eeee2ba0,11,5613,5879,,,
code-creation,LazyCompile,10,547200,0x65ec1e93be,11,get ReadStream node:fs:3031:17,0x6414e99e20,~
code-source-info,0x65ec1e93be,83,83288,83345,C0O83298C3O83298C6O83322C10O83340,,
code-creation,LazyCompile,10,547326,0x65ec1e94ee,71,lazyLoadStreams node:fs:2888:25,0x6414e99ce8,~
code-source-info,0x65ec1e94ee,83,80749,80922,C0O80757C6O80781C12O80812C17O80784C30O80796C43O80850C50O80865C56O80884C63O80900C70O80921,,
code-creation,Eval,10,548362,0x65ec1e9d36,5, node:internal/fs/streams:1:1,0x65ec1e99a0,~
script-source,135,node:internal/fs/streams,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  MathMin\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  PromisePrototypeThen\x2C\x0d\n  ReflectApply\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_OUT_OF_RANGE\x2C\x0d\n  ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst {\x0d\n  deprecate\x2C\x0d\n  kEmptyObject\x2C\x0d\n} = require('internal/util');\x0d\nconst {\x0d\n  validateFunction\x2C\x0d\n  validateInteger\x2C\x0d\n} = require('internal/validators');\x0d\nconst { errorOrDestroy } = require('internal/streams/destroy');\x0d\nconst fs = require('fs');\x0d\nconst { kRef\x2C kUnref\x2C FileHandle } = require('internal/fs/promises');\x0d\nconst { Buffer } = require('buffer');\x0d\nconst {\x0d\n  copyObject\x2C\x0d\n  getOptions\x2C\x0d\n  getValidatedFd\x2C\x0d\n  validatePath\x2C\x0d\n} = require('internal/fs/utils');\x0d\nconst { Readable\x2C Writable\x2C finished } = require('stream');\x0d\nconst { toPathIfFileURL } = require('internal/url');\x0d\nconst kIoDone = Symbol('kIoDone');\x0d\nconst kIsPerformingIO = Symbol('kIsPerformingIO');\x0d\n\x0d\nconst kFs = Symbol('kFs');\x0d\nconst kHandle = Symbol('kHandle');\x0d\n\x0d\nfunction _construct(callback) {\x0d\n  const stream = this;\x0d\n  if (typeof stream.fd === 'number') {\x0d\n    callback();\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (stream.open !== openWriteFs && stream.open !== openReadFs) {\x0d\n    // Backwards compat for monkey patching open().\x0d\n    const orgEmit = stream.emit;\x0d\n    stream.emit = function(...args) {\x0d\n      if (args[0] === 'open') {\x0d\n        this.emit = orgEmit;\x0d\n        callback();\x0d\n        ReflectApply(orgEmit\x2C this\x2C args);\x0d\n      } else if (args[0] === 'error') {\x0d\n        this.emit = orgEmit;\x0d\n        callback(args[1]);\x0d\n      } else {\x0d\n        ReflectApply(orgEmit\x2C this\x2C args);\x0d\n      }\x0d\n    };\x0d\n    stream.open();\x0d\n  } else {\x0d\n    stream[kFs].open(stream.path\x2C stream.flags\x2C stream.mode\x2C (er\x2C fd) => {\x0d\n      if (er) {\x0d\n        callback(er);\x0d\n      } else {\x0d\n        stream.fd = fd;\x0d\n        callback();\x0d\n        stream.emit('open'\x2C stream.fd);\x0d\n        stream.emit('ready');\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\n// This generates an fs operations structure for a FileHandle\x0d\nconst FileHandleOperations = (handle) => {\x0d\n  return {\x0d\n    open: (path\x2C flags\x2C mode\x2C cb) => {\x0d\n      throw new ERR_METHOD_NOT_IMPLEMENTED('open()');\x0d\n    }\x2C\x0d\n    close: (fd\x2C cb) => {\x0d\n      handle[kUnref]();\x0d\n      PromisePrototypeThen(handle.close()\x2C\x0d\n                           () => cb()\x2C cb);\x0d\n    }\x2C\x0d\n    read: (fd\x2C buf\x2C offset\x2C length\x2C pos\x2C cb) => {\x0d\n      PromisePrototypeThen(handle.read(buf\x2C offset\x2C length\x2C pos)\x2C\x0d\n                           (r) => cb(null\x2C r.bytesRead\x2C r.buffer)\x2C\x0d\n                           (err) => cb(err\x2C 0\x2C buf));\x0d\n    }\x2C\x0d\n    write: (fd\x2C buf\x2C offset\x2C length\x2C pos\x2C cb) => {\x0d\n      PromisePrototypeThen(handle.write(buf\x2C offset\x2C length\x2C pos)\x2C\x0d\n                           (r) => cb(null\x2C r.bytesWritten\x2C r.buffer)\x2C\x0d\n                           (err) => cb(err\x2C 0\x2C buf));\x0d\n    }\x2C\x0d\n    writev: (fd\x2C buffers\x2C pos\x2C cb) => {\x0d\n      PromisePrototypeThen(handle.writev(buffers\x2C pos)\x2C\x0d\n                           (r) => cb(null\x2C r.bytesWritten\x2C r.buffers)\x2C\x0d\n                           (err) => cb(err\x2C 0\x2C buffers));\x0d\n    }\x0d\n  };\x0d\n};\x0d\n\x0d\nfunction close(stream\x2C err\x2C cb) {\x0d\n  if (!stream.fd) {\x0d\n    // TODO(ronag)\x0d\n    // stream.closed = true;\x0d\n    cb(err);\x0d\n  } else {\x0d\n    stream[kFs].close(stream.fd\x2C (er) => {\x0d\n      stream.closed = true;\x0d\n      cb(er || err);\x0d\n    });\x0d\n    stream.fd = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction importFd(stream\x2C options) {\x0d\n  if (typeof options.fd === 'number') {\x0d\n    // When fd is a raw descriptor\x2C we must keep our fingers crossed\x0d\n    // that the descriptor won't get closed\x2C or worse\x2C replaced with\x0d\n    // another one\x0d\n    // https://github.com/nodejs/node/issues/35862\x0d\n    stream[kFs] = options.fs || fs;\x0d\n    return options.fd;\x0d\n  } else if (typeof options.fd === 'object' &&\x0d\n             options.fd instanceof FileHandle) {\x0d\n    // When fd is a FileHandle we can listen for 'close' events\x0d\n    if (options.fs) {\x0d\n      // FileHandle is not supported with custom fs operations\x0d\n      throw new ERR_METHOD_NOT_IMPLEMENTED('FileHandle with fs');\x0d\n    }\x0d\n    stream[kHandle] = options.fd;\x0d\n    stream[kFs] = FileHandleOperations(stream[kHandle]);\x0d\n    stream[kHandle][kRef]();\x0d\n    options.fd.on('close'\x2C FunctionPrototypeBind(stream.close\x2C stream));\x0d\n    return options.fd.fd;\x0d\n  }\x0d\n\x0d\n  throw ERR_INVALID_ARG_TYPE('options.fd'\x2C\x0d\n                             ['number'\x2C 'FileHandle']\x2C options.fd);\x0d\n}\x0d\n\x0d\nfunction ReadStream(path\x2C options) {\x0d\n  if (!(this instanceof ReadStream))\x0d\n    return new ReadStream(path\x2C options);\x0d\n\x0d\n  // A little bit bigger buffer and water marks by default\x0d\n  options = copyObject(getOptions(options\x2C kEmptyObject));\x0d\n  if (options.highWaterMark === undefined)\x0d\n    options.highWaterMark = 64 * 1024;\x0d\n\x0d\n  if (options.autoDestroy === undefined) {\x0d\n    options.autoDestroy = false;\x0d\n  }\x0d\n\x0d\n  if (options.fd == null) {\x0d\n    this.fd = null;\x0d\n    this[kFs] = options.fs || fs;\x0d\n    validateFunction(this[kFs].open\x2C 'options.fs.open');\x0d\n\x0d\n    // Path will be ignored when fd is specified\x2C so it can be falsy\x0d\n    this.path = toPathIfFileURL(path);\x0d\n    this.flags = options.flags === undefined ? 'r' : options.flags;\x0d\n    this.mode = options.mode === undefined ? 0o666 : options.mode;\x0d\n\x0d\n    validatePath(this.path);\x0d\n  } else {\x0d\n    this.fd = getValidatedFd(importFd(this\x2C options));\x0d\n  }\x0d\n\x0d\n  options.autoDestroy = options.autoClose === undefined ?\x0d\n    true : options.autoClose;\x0d\n\x0d\n  validateFunction(this[kFs].read\x2C 'options.fs.read');\x0d\n\x0d\n  if (options.autoDestroy) {\x0d\n    validateFunction(this[kFs].close\x2C 'options.fs.close');\x0d\n  }\x0d\n\x0d\n  this.start = options.start;\x0d\n  this.end = options.end;\x0d\n  this.pos = undefined;\x0d\n  this.bytesRead = 0;\x0d\n  this.closed = false;\x0d\n  this[kIsPerformingIO] = false;\x0d\n\x0d\n  if (this.start !== undefined) {\x0d\n    validateInteger(this.start\x2C 'start'\x2C 0);\x0d\n\x0d\n    this.pos = this.start;\x0d\n  }\x0d\n\x0d\n\x0d\n  if (this.end === undefined) {\x0d\n    this.end = Infinity;\x0d\n  } else if (this.end !== Infinity) {\x0d\n    validateInteger(this.end\x2C 'end'\x2C 0);\x0d\n\x0d\n    if (this.start !== undefined && this.start > this.end) {\x0d\n      throw new ERR_OUT_OF_RANGE(\x0d\n        'start'\x2C\x0d\n        `<= "end" (here: ${this.end})`\x2C\x0d\n        this.start\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n\x0d\n  ReflectApply(Readable\x2C this\x2C [options]);\x0d\n}\x0d\nObjectSetPrototypeOf(ReadStream.prototype\x2C Readable.prototype);\x0d\nObjectSetPrototypeOf(ReadStream\x2C Readable);\x0d\n\x0d\nObjectDefineProperty(ReadStream.prototype\x2C 'autoClose'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return this._readableState.autoDestroy;\x0d\n  }\x2C\x0d\n  set(val) {\x0d\n    this._readableState.autoDestroy = val;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst openReadFs = deprecate(function() {\x0d\n  // Noop.\x0d\n}\x2C 'ReadStream.prototype.open() is deprecated'\x2C 'DEP0135');\x0d\nReadStream.prototype.open = openReadFs;\x0d\n\x0d\nReadStream.prototype._construct = _construct;\x0d\n\x0d\nReadStream.prototype._read = function(n) {\x0d\n  n = this.pos !== undefined ?\x0d\n    MathMin(this.end - this.pos + 1\x2C n) :\x0d\n    MathMin(this.end - this.bytesRead + 1\x2C n);\x0d\n\x0d\n  if (n <= 0) {\x0d\n    this.push(null);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const buf = Buffer.allocUnsafeSlow(n);\x0d\n\x0d\n  this[kIsPerformingIO] = true;\x0d\n  this[kFs]\x0d\n    .read(this.fd\x2C buf\x2C 0\x2C n\x2C this.pos\x2C (er\x2C bytesRead\x2C buf) => {\x0d\n      this[kIsPerformingIO] = false;\x0d\n\x0d\n      // Tell ._destroy() that it's safe to close the fd now.\x0d\n      if (this.destroyed) {\x0d\n        this.emit(kIoDone\x2C er);\x0d\n        return;\x0d\n      }\x0d\n\x0d\n      if (er) {\x0d\n        errorOrDestroy(this\x2C er);\x0d\n      } else if (bytesRead > 0) {\x0d\n        if (this.pos !== undefined) {\x0d\n          this.pos += bytesRead;\x0d\n        }\x0d\n\x0d\n        this.bytesRead += bytesRead;\x0d\n\x0d\n        if (bytesRead !== buf.length) {\x0d\n          // Slow path. Shrink to fit.\x0d\n          // Copy instead of slice so that we don't retain\x0d\n          // large backing buffer for small reads.\x0d\n          const dst = Buffer.allocUnsafeSlow(bytesRead);\x0d\n          buf.copy(dst\x2C 0\x2C 0\x2C bytesRead);\x0d\n          buf = dst;\x0d\n        }\x0d\n\x0d\n        this.push(buf);\x0d\n      } else {\x0d\n        this.push(null);\x0d\n      }\x0d\n    });\x0d\n};\x0d\n\x0d\nReadStream.prototype._destroy = function(err\x2C cb) {\x0d\n  // Usually for async IO it is safe to close a file descriptor\x0d\n  // even when there are pending operations. However\x2C due to platform\x0d\n  // differences file IO is implemented using synchronous operations\x0d\n  // running in a thread pool. Therefore\x2C file descriptors are not safe\x0d\n  // to close while used in a pending read or write operation. Wait for\x0d\n  // any pending IO (kIsPerformingIO) to complete (kIoDone).\x0d\n  if (this[kIsPerformingIO]) {\x0d\n    this.once(kIoDone\x2C (er) => close(this\x2C err || er\x2C cb));\x0d\n  } else {\x0d\n    close(this\x2C err\x2C cb);\x0d\n  }\x0d\n};\x0d\n\x0d\nReadStream.prototype.close = function(cb) {\x0d\n  if (typeof cb === 'function') finished(this\x2C cb);\x0d\n  this.destroy();\x0d\n};\x0d\n\x0d\nObjectDefineProperty(ReadStream.prototype\x2C 'pending'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return this.fd === null; }\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\nfunction WriteStream(path\x2C options) {\x0d\n  if (!(this instanceof WriteStream))\x0d\n    return new WriteStream(path\x2C options);\x0d\n\x0d\n  options = copyObject(getOptions(options\x2C kEmptyObject));\x0d\n\x0d\n  // Only buffers are supported.\x0d\n  options.decodeStrings = true;\x0d\n\x0d\n  if (options.fd == null) {\x0d\n    this.fd = null;\x0d\n    this[kFs] = options.fs || fs;\x0d\n    validateFunction(this[kFs].open\x2C 'options.fs.open');\x0d\n\x0d\n    // Path will be ignored when fd is specified\x2C so it can be falsy\x0d\n    this.path = toPathIfFileURL(path);\x0d\n    this.flags = options.flags === undefined ? 'w' : options.flags;\x0d\n    this.mode = options.mode === undefined ? 0o666 : options.mode;\x0d\n\x0d\n    validatePath(this.path);\x0d\n  } else {\x0d\n    this.fd = getValidatedFd(importFd(this\x2C options));\x0d\n  }\x0d\n\x0d\n  options.autoDestroy = options.autoClose === undefined ?\x0d\n    true : options.autoClose;\x0d\n\x0d\n  if (!this[kFs].write && !this[kFs].writev) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('options.fs.write'\x2C 'function'\x2C\x0d\n                                   this[kFs].write);\x0d\n  }\x0d\n\x0d\n  if (this[kFs].write) {\x0d\n    validateFunction(this[kFs].write\x2C 'options.fs.write');\x0d\n  }\x0d\n\x0d\n  if (this[kFs].writev) {\x0d\n    validateFunction(this[kFs].writev\x2C 'options.fs.writev');\x0d\n  }\x0d\n\x0d\n  if (options.autoDestroy) {\x0d\n    validateFunction(this[kFs].close\x2C 'options.fs.close');\x0d\n  }\x0d\n\x0d\n  // It's enough to override either\x2C in which case only one will be used.\x0d\n  if (!this[kFs].write) {\x0d\n    this._write = null;\x0d\n  }\x0d\n  if (!this[kFs].writev) {\x0d\n    this._writev = null;\x0d\n  }\x0d\n\x0d\n  this.start = options.start;\x0d\n  this.pos = undefined;\x0d\n  this.bytesWritten = 0;\x0d\n  this.closed = false;\x0d\n  this[kIsPerformingIO] = false;\x0d\n\x0d\n\x0d\n  if (this.start !== undefined) {\x0d\n    validateInteger(this.start\x2C 'start'\x2C 0);\x0d\n\x0d\n    this.pos = this.start;\x0d\n  }\x0d\n\x0d\n  ReflectApply(Writable\x2C this\x2C [options]);\x0d\n\x0d\n  if (options.encoding)\x0d\n    this.setDefaultEncoding(options.encoding);\x0d\n}\x0d\nObjectSetPrototypeOf(WriteStream.prototype\x2C Writable.prototype);\x0d\nObjectSetPrototypeOf(WriteStream\x2C Writable);\x0d\n\x0d\nObjectDefineProperty(WriteStream.prototype\x2C 'autoClose'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return this._writableState.autoDestroy;\x0d\n  }\x2C\x0d\n  set(val) {\x0d\n    this._writableState.autoDestroy = val;\x0d\n  }\x0d\n});\x0d\n\x0d\nconst openWriteFs = deprecate(function() {\x0d\n  // Noop.\x0d\n}\x2C 'WriteStream.prototype.open() is deprecated'\x2C 'DEP0135');\x0d\nWriteStream.prototype.open = openWriteFs;\x0d\n\x0d\nWriteStream.prototype._construct = _construct;\x0d\n\x0d\nWriteStream.prototype._write = function(data\x2C encoding\x2C cb) {\x0d\n  this[kIsPerformingIO] = true;\x0d\n  this[kFs].write(this.fd\x2C data\x2C 0\x2C data.length\x2C this.pos\x2C (er\x2C bytes) => {\x0d\n    this[kIsPerformingIO] = false;\x0d\n    if (this.destroyed) {\x0d\n      // Tell ._destroy() that it's safe to close the fd now.\x0d\n      cb(er);\x0d\n      return this.emit(kIoDone\x2C er);\x0d\n    }\x0d\n\x0d\n    if (er) {\x0d\n      return cb(er);\x0d\n    }\x0d\n\x0d\n    this.bytesWritten += bytes;\x0d\n    cb();\x0d\n  });\x0d\n\x0d\n  if (this.pos !== undefined)\x0d\n    this.pos += data.length;\x0d\n};\x0d\n\x0d\nWriteStream.prototype._writev = function(data\x2C cb) {\x0d\n  const len = data.length;\x0d\n  const chunks = new Array(len);\x0d\n  let size = 0;\x0d\n\x0d\n  for (let i = 0; i < len; i++) {\x0d\n    const chunk = data[i].chunk;\x0d\n\x0d\n    chunks[i] = chunk;\x0d\n    size += chunk.length;\x0d\n  }\x0d\n\x0d\n  this[kIsPerformingIO] = true;\x0d\n  this[kFs].writev(this.fd\x2C chunks\x2C this.pos\x2C (er\x2C bytes) => {\x0d\n    this[kIsPerformingIO] = false;\x0d\n    if (this.destroyed) {\x0d\n      // Tell ._destroy() that it's safe to close the fd now.\x0d\n      cb(er);\x0d\n      return this.emit(kIoDone\x2C er);\x0d\n    }\x0d\n\x0d\n    if (er) {\x0d\n      return cb(er);\x0d\n    }\x0d\n\x0d\n    this.bytesWritten += bytes;\x0d\n    cb();\x0d\n  });\x0d\n\x0d\n  if (this.pos !== undefined)\x0d\n    this.pos += size;\x0d\n};\x0d\n\x0d\nWriteStream.prototype._destroy = function(err\x2C cb) {\x0d\n  // Usually for async IO it is safe to close a file descriptor\x0d\n  // even when there are pending operations. However\x2C due to platform\x0d\n  // differences file IO is implemented using synchronous operations\x0d\n  // running in a thread pool. Therefore\x2C file descriptors are not safe\x0d\n  // to close while used in a pending read or write operation. Wait for\x0d\n  // any pending IO (kIsPerformingIO) to complete (kIoDone).\x0d\n  if (this[kIsPerformingIO]) {\x0d\n    this.once(kIoDone\x2C (er) => close(this\x2C err || er\x2C cb));\x0d\n  } else {\x0d\n    close(this\x2C err\x2C cb);\x0d\n  }\x0d\n};\x0d\n\x0d\nWriteStream.prototype.close = function(cb) {\x0d\n  if (cb) {\x0d\n    if (this.closed) {\x0d\n      process.nextTick(cb);\x0d\n      return;\x0d\n    }\x0d\n    this.on('close'\x2C cb);\x0d\n  }\x0d\n\x0d\n  // If we are not autoClosing\x2C we should call\x0d\n  // destroy on 'finish'.\x0d\n  if (!this.autoClose) {\x0d\n    this.on('finish'\x2C this.destroy);\x0d\n  }\x0d\n\x0d\n  // We use end() instead of destroy() because of\x0d\n  // https://github.com/nodejs/node/issues/2006\x0d\n  this.end();\x0d\n};\x0d\n\x0d\n// There is no shutdown() for files.\x0d\nWriteStream.prototype.destroySoon = WriteStream.prototype.end;\x0d\n\x0d\nObjectDefineProperty(WriteStream.prototype\x2C 'pending'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() { return this.fd === null; }\x2C\x0d\n  configurable: true\x0d\n});\x0d\n\x0d\nmodule.exports = {\x0d\n  ReadStream\x2C\x0d\n  WriteStream\x0d\n};\x0d\n
code-source-info,0x65ec1e9d36,135,0,13883,C0O0C4O13883,,
code-creation,Function,10,549462,0x65ec1ea9e6,875, node:internal/fs/streams:1:1,0x65ec1e9cb0,~
code-source-info,0x65ec1ea9e
code-creation,LazyCompile,10,550021,0x65ec1ec68e,11,get WriteStream node:fs:3040:18,0x6414e99f00,~
code-source-info,0x65ec1ec68e,83,83423,83481,C0O83433C3O83433C6O83457C10O83476,,
code-creation,LazyCompile,10,550115,0x65ec1ec79e,11,get FileReadStream node:fs:3051:21,0x6414e99fe0,~
code-source-info,0x65ec1ec79e,83,83699,83760,C0O83709C3O83709C6O83733C10O83755,,
code-creation,LazyCompile,10,550195,0x65ec1ec8ae,11,get FileWriteStream node:fs:3060:22,0x6414e9a0d0,~
code-source-info,0x65ec1ec8ae,83,83850,83912,C0O83860C3O83860C6O83884C10O83907,,
code-creation,LazyCompile,10,550288,0x65ec1ec9a6,37,get node:fs:3088:8,0x6414e9a1c0,~
code-source-info,0x65ec1ec9a6,83,84543,84639,C0O84555C14O84568C19O84599C26O84564C32O84616C36O84632,,
tick,0x7ff6d6662f3d,550542,0,0x0,0,0x65ec1e52e6,0x65ec1e483b,0x65ec1e4642,0x65ec1cbb8c,0x7ff6d6643c13
code-creation,Script,10,551064,0x65ec1ed57e,82, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-media.js:1:1,0x65ec1ece60,~
script-source,136,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-media.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport sharp from 'sharp';\x0d\nimport { ensureDirExists\x2C handleFileIfNewerAsync\x2C parseJsonFile } from '../lib/filesystem.js';\x0d\nimport { Color } from '../lib/terminal.js';\x0d\n\x0d\nasync function resizeImage(imagePath\x2C outputPath\x2C sizeInPixel) {\x0d\n  // https://sharp.pixelplumbing.com/api-resize\x0d\n  const { width\x2C height } = await sharp(imagePath).metadata();\x0d\n  // When we provide both width and height\x2C the output image will have both sizes.\x0d\n  // So instead we'll determine the biggest dimension (width OR height) and scale it depending on that.\x0d\n  // Also we do NOT upscale an image if it is are smaller than the specified resize dimension.\x0d\n  const resizedWidth = width >= height ? Math.min(sizeInPixel\x2C width) : null;\x0d\n  const resizedHeight = width < height ? Math.min(sizeInPixel\x2C height) : null;\x0d\n  sharp(imagePath)\x0d\n    .resize({\x0d\n      width: resizedWidth\x2C\x0d\n      height: resizedHeight\x2C\x0d\n      fit: "inside"\x2C\x0d\n      background: { r: 0\x2C g: 0\x2C b: 0\x2C alpha: 0 }\x2C\x0d\n    })\x0d\n    .toFile(outputPath\x2C (err\x2C info) => {\x0d\n      if (err) {\x0d\n        console.error('Error creating thumbnail:'\x2C err);\x0d\n      } else {\x0d\n        //console.log('Thumbnail created successfully.');\x0d\n        //console.log('Thumbnail dimensions:'\x2C info.width\x2C 'x'\x2C info.height);\x0d\n      }\x0d\n    });\x0d\n}\x0d\n\x0d\nasync function cropAndSquareImage(imagePath\x2C outputPath\x2C sizeInPixel) {\x0d\n  sharp(imagePath)\x0d\n    .resize({\x0d\n      width: sizeInPixel\x2C\x0d\n      height: sizeInPixel\x2C\x0d\n      fit: "cover"\x2C\x0d\n      background: { r: 0\x2C g: 0\x2C b: 0\x2C alpha: 0 }\x2C\x0d\n    })\x0d\n    .toFile(outputPath\x2C (err\x2C info) => {\x0d\n      if (err) console.error('Error creating thumbnail:'\x2C err);\x0d\n    });\x0d\n}\x0d\n\x0d\nfunction getTargetsBySourcesFromMedia(inputDir\x2C outputDir\x2C media) {\x0d\n  const targetsBySources = new Map();\x0d\n  const sourcesByTargets = new Map();\x0d\n  for (const mediaItem of media) {\x0d\n    const { fileNamePublic\x2C fileNameInternal } = mediaItem;\x0d\n    const input = path.resolve(inputDir\x2C fileNameInternal);\x0d\n    const output = path.resolve(outputDir\x2C fileNamePublic);\x0d\n    if (targetsBySources.has(input))\x0d\n      console.warn(Color.Red + `File name '${input}' appears twice as SOURCE.` + Color.Reset);\x0d\n    if (sourcesByTargets.has(output))\x0d\n      console.warn(Color.Red + `File name '${output}' appears twice as TARGET.` + Color.Reset);\x0d\n    targetsBySources.set(input\x2C output);\x0d\n    sourcesByTargets.set(output\x2C input);\x0d\n  }\x0d\n  return targetsBySources;\x0d\n}\x0d\n\x0d\nasync function processMediaList({ inputDir\x2C outputDir\x2C media\x2C resizeSet = [] }) {\x0d\n  const targetsBySources = getTargetsBySourcesFromMedia(inputDir\x2C outputDir\x2C media);\x0d\n  let skipCount = 0\x2C processCount = 0;\x0d\n  for (const [sourcePath\x2C targetPath] of targetsBySources)\x0d\n    await handleFileIfNewerAsync({\x0d\n      sourcePath: sourcePath\x2C\x0d\n      targetPath: targetPath\x2C\x0d\n      onSkip: (sourcePath) => { skipCount++ }\x2C\x0d\n      onFile: async (sourcePath\x2C targetPath) => {\x0d\n        processCount++;\x0d\n        const suffix = resizeSet.length > 0\x0d\n          ? ` (+ thumbnails ${resizeSet.map(set => set.name).join("\x2C ")})`\x0d\n          : "";\x0d\n        console.log(\x0d\n          `${Color.Green}Copying '${Color.Blue + sourcePath + Color.Green}' to '${targetPath}'${suffix}. ${Color.Reset}`\x0d\n        );\x0d\n        fs.copyFileSync(sourcePath\x2C targetPath);\x0d\n        for (const resizeEntry of resizeSet) {\x0d\n          const { name\x2C size\x2C method } = resizeEntry;\x0d\n          const outputBase = path.dirname(targetPath);\x0d\n          const baseName = path.basename(targetPath);\x0d\n          const resizedPath = path.join(outputBase\x2C name\x2C baseName);\x0d\n          ensureDirExists(resizedPath);\x0d\n          if (![".png"\x2C ".jpg"\x2C ".jpeg"].includes(path.extname(sourcePath)))\x0d\n            continue;\x0d\n          if (method === "squared")\x0d\n            await cropAndSquareImage(sourcePath\x2C resizedPath\x2C size);\x0d\n          else\x0d\n            await resizeImage(sourcePath\x2C resizedPath\x2C size);\x0d\n        }\x0d\n      }\x2C\x0d\n    });\x0d\n  console.log(`Processed ${processCount} images (skipped ${skipCount}). `);\x0d\n}\x0d\n\x0d\nexport default async function buildMedia({ dataInput\x2C mediaInput\x2C mediaOutput\x2C resizeSet }) {\x0d\n  const mediaArt = parseJsonFile(dataInput);\x0d\n  ensureDirExists(mediaOutput + path.sep);\x0d\n  await processMediaList({\x0d\n    inputDir: mediaInput\x2C\x0d\n    outputDir: mediaOutput\x2C\x0d\n    media: mediaArt\x2C\x0d\n    resizeSet: resizeSet\x2C\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x65ec1ed57e,136,0,4320,C10O0C52O0C72O0C81O4320,,
code-creation,Function,11,551990,0x246eeee2ea0,1340,NodeError node:internal/errors:355:28,0x39b87e7a80,^
code-source-info,0x246eeee2ea0,11,10250,11269,,,
code-creation,Function,11,552053,0x246eeee3440,324,tryStatSync node:internal/modules/esm/resolve:183:3,0x64be9063d0,^
code-source-info,0x246eeee3440,113,5952,6018,,,
code-creation,Function,11,552112,0x246eeee3600,1060,moduleResolve node:internal/modules/esm/resolve:886:23,0x64be9061f0,^
code-source-info,0x246eeee3600,113,30077,30868,,,
code-creation,Function,11,552158,0x246eeee3aa0,76, node:internal/errors:1365:30,0x39b87e89a8,^
code-source-info,0x246eeee3aa0,11,49094,49244,,,
code-creation,Function,11,552211,0x246eeee3b60,732,captureLargerStackTrace node:internal/errors:472:35,0x39b87e7e28,^
code-source-info,0x246eeee3b60,11,13666,14047,,,
code-creation,LazyCompile,10,552753,0x65ec1ee1ee,213,parsePackageName node:internal/modules/esm/resolve:754:26,0x64be906060,~
code-source-info,0x65ec1ee1ee,113,25838,26896,C0O25882C8O25882C14O25948C16O25972C18O25982C19O25995C25O25999C30O26015C32O26037C34O26056C39O26076C45O26083C50O26099C54O26146C64O26227C71O26163C77O26270C79O26285C90O26311C101O26311C107O26466C114O26490C117O26470C124O26543C126O26574C130O26604C140O26693C143O26693C153O26610C158O26604C159O26748C164O26770C175O26789C178O26789C183O26752C187O26844C194O26853C200O26866C206O26882C212O26893,,
code-creation,LazyCompile,10,553450,0x65ec1ee4c6,67,uvErrmapGet node:internal/errors:465:21,0x39b87e7dd8,~
code-source-info,0x65ec1ee4c6,11,13442,13578,C0O13454C3O13466C9O13464C15O13479C30O13500C33O13510C38O13510C42O13496C46O13528C53O13551C56O13561C61O13535C66O13575,,
code-creation,LazyCompile,10,553550,0x65ec1ee606,32,lazyUv node:internal/errors:458:16,0x39b87e7d88,~
code-source-info,0x65ec1ee606,11,13293,13361,C0O13301C14O13315C21O13311C27O13341C31O13358,,
new,MemoryChunk,0x11296180000,262144
code-creation,LazyCompile,10,565722,0x65ec1ef98e,522,legacyMainResolve node:internal/modules/esm/resolve:205:27,0x64be905b10,~
code-source-info,0x65ec1ef98e,113,6614,8466,C0O6661C2O6689C8O6793C13O6820C19O6843C33O6816C39O6797C45O6914C47O6927C48O6940C53O6967C59O6990C79O6963C85O6944C93O7073C98O7100C104O7123C124O7096C130O7077C138O7206C143O7233C149O7256C169O7229C175O7210C183O7339C188O7366C194O7389C214O7362C220O7343C228O7476C233O7503C239O7526C259O7499C265O7480C273O7615C278O7642C284O7665C304O7638C310O7619C318O7754C320O7778C324O7798C327O7902C341O7798C346O7916C348O7929C349O7966C354O7993C365O7989C371O7970C379O8051C384O8078C395O8074C401O8055C409O8125C414O8152C425O8148C431O8129C439O8199C441O8221C445O8239C448O8309C462O8239C467O8321C469O8334C470O8360C477O8397C482O8415C493O8411C499O8397C506O8442C509O8442C516O8366C521O8360,,
code-creation,LazyCompile,10,565999,0x65ec1efd6e,36,fileExists node:internal/modules/esm/resolve:189:20,0x64be905ac0,~
code-source-info,0x65ec1efd6e,113,6105,6186,C0O6116C5O6132C10O6123C18O6163C23O6165C35O6183,,
tick,0x7ff6d66964e9,566513,0,0x0,0,0x246eeed219e,0x65ec1c4480,0x246eeee3a10,0x64be93fd4b,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x65ec1d026a,0x7ff6d6643c13
code-creation,Function,11,566840,0x246eeee3ea0,3144,getStatsFromBinding node:internal/fs/utils:533:29,0x6414ea2a98,^
code-source-info,0x246eeee3ea0,84,14576,15649,,,
code-creation,Function,11,566913,0x246eeee4b60,524,filterOwnProperties node:internal/util:529:29,0x2392d46f58,^
code-source-info,0x246eeee4b60,15,15292,15545,,,
code-creation,LazyCompile,10,571404,0x65ec1f08e6,353,commonjsStrategy node:internal/modules/esm/translators:147:60,0x64be93b6d8,~
code-source-info,0x65ec1f08e6,128,4583,6034,C4O4583C40O4671C52O4702C57O4671C61O4730C68O4748C77O4766C85O4762C91O4748C96O4730C98O4780C106O4800C122O4811C127O4809C129O4864C137O4879C142O4885C153O4879C178O4936C186O4936C191O4912C197O4920C203O5000C206O5012C214O5012C223O5038C234O5068C237O5068C291O5087C303O5125C313O5094C328O6031,,
code-creation,LazyCompile,10,571683,0x65ec1f0cbe,182,initCJSParse node:internal/modules/esm/translators:58:28,0x64be93b408,~
code-source-info,0x65ec1f0cbe,128,1665,2049,C10O1665C18O1673C26O1720C32O1731C37O1778C44O1729C52O1836C58O1836C63O1811C68O1818C76O1914C87O1908C110O1929C112O1938C122O1969C128O1980C133O2027C140O1978C157O2048,,
code-creation,Eval,10,572868,0x65ec1f113e,5, node:internal/deps/cjs-module-lexer/dist/lexer:1:1,0x65ec1f0f98,~
script-source,137,node:internal/deps/cjs-module-lexer/dist/lexer,"use strict";exports.parse=parse;exports.init=init;let A;const Q=1===new Uint8Array(new Uint16Array([1]).buffer)[0];function parse(g\x2CI="@"){if(!A)throw new Error("Not initialized");const D=g.length+1\x2CN=(A.__heap_base.value||A.__heap_base)+4*D-A.memory.buffer.byteLength;N>0&&A.memory.grow(Math.ceil(N/65536));const k=A.sa(D);if((Q?C:E)(g\x2Cnew Uint16Array(A.memory.buffer\x2Ck\x2CD))\x2C!A.parseCJS(k\x2Cg.length\x2C0\x2C0\x2C0))throw Object.assign(new Error(`Parse error ${I}${A.e()}:${g.slice(0\x2CA.e()).split("\\n").length}:${A.e()-g.lastIndexOf("\\n"\x2CA.e()-1)}`)\x2C{idx:A.e()});let w=new Set\x2Co=new Set\x2CJ=new Set;for(;A.rre();){const Q=B(g.slice(A.res()\x2CA.ree()));Q&&o.add(Q)}for(;A.ru();)J.add(B(g.slice(A.us()\x2CA.ue())));for(;A.re();){let Q=B(g.slice(A.es()\x2CA.ee()));void 0===Q||J.has(Q)||w.add(Q)}return{exports:[...w]\x2Creexports:[...o]}}function B(A){if('"'!==A[0]&&"'"!==A[0])return A;try{const Q=(0\x2Ceval)(A);for(let A=0;A<Q.length;A++){const B=64512&Q.charCodeAt(A);if(!(B<55296)){if(55296!==B)return;if(56320!=(64512&Q.charCodeAt(++A)))return}}return Q}catch{}}function E(A\x2CQ){const B=A.length;let E=0;for(;E<B;){const B=A.charCodeAt(E);Q[E++]=(255&B)<<8|B>>>8}}function C(A\x2CQ){const B=A.length;let E=0;for(;E<B;)Q[E]=A.charCodeAt(E++)}let g;function init(){return g||(g=(async()=>{const Q=await WebAssembly.compile((B=""\x2C"undefined"!=typeof window&&"function"==typeof atob?Uint8Array.from(atob(B)\x2CA=>A.charCodeAt(0)):Buffer.from(B\x2C"base64")));var B;const{exports:E}=await WebAssembly.instantiate(Q);A=E})())}
code-source-info,0x65ec1f113e,137,0,33616,C0O0C4O33616,,
code-creation,Function,10,574585,0x65ec1f13d6,108, node:internal/deps/cjs-module-lexer/dist/lexer:1:1,0x65ec1f10b8,~
code-source-info,0x65ec1f13d6,137,0,33616,C0O0C42O13C44O26C48O33C50O45C54O55C55O55C57O65C60O73C64O88C75O84C81O105C88O69C95O112C98O66C101O65C103O1219C104O1219C107O33615,,
code-creation,LazyCompile,13,574800,0x246eeee4de0,1820,normalizeString node:path:66:25,0x32ebb7cd438,*
code-source-info,0x246eeee4dex32ebb7ccfc8
code-creation,LazyCompile,10,575300,0x65ec1f9bc6,24,init node:internal/deps/cjs-module-lexer/dist/lexer:1:1235,0x65ec1f12b0,~
code-source-info,0x65ec1f9bc6,137,1234,33616,C0O1237C11O33612C17O1249C23O33615,,
code-creation,LazyCompile,10,575352,0x65ec1f9d56,227, node:internal/deps/cjs-module-lexer/dist/lexer:1:1252,0x65ec1f9b38,~
code-source-info,0x65ec1f9d56,137,1251,33611,C10O1251C18O1269C22O1287C30O1297C37O33440C44O33481C48O33492C57O33497C67O33492C75O33525C79O33532C87O33532C94O1287C107O1269C133O33574C137O33592C142O33592C155O33574C178O33571C183O33607C185O33608C202O33610,,
code-creation,LazyCompile,10,575453,0x65ec1f9fc6,5,get node:internal/bootstrap/pre_execution:426:8,0x2f2f3a30818,~
code-source-info,0x65ec1f9fc6,100,13773,13807,C0O13785C4O13800,,
code-creation,LazyCompile,10,575543,0x65ec1fa086,14,byteLength node:buffer:646:17,0x2392d7ebf0,~
code-source-info,0x65ec1fa086,24,19246,19297,C0O19258C3O19290C8O19258C13O19297,,
code-creation,LazyCompile,10,575638,0x65ec1fa16e,76,base64ByteLength node:buffer:582:26,0x2392d7dd60,~
code-source-info,0x65ec1fa16e,24,16867,17119,C0O16906C7O16947C11O16910C19O16952C24O16967C30O16979C32O16989C39O16996C44O17033C48O16996C56O17038C61O17053C67O17091C69O17105C72O17110C75O17116,,
code-creation,Script,10,578283,0x65ec1fb8fe,161, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/read-media.js:1:1,0x65ec1fabc0,~
script-source,138,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/read-media.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport sharp from 'sharp';\x0d\nimport { getVibrantColorsInImage } from '../lib/image.js';\x0d\nimport { getPathSafeName\x2C replaceUmlauts\x2C toKebabCase } from '../lib/string.js';\x0d\nimport { parseJsonFile\x2C writeObjectToFile } from '../lib/filesystem.js';\x0d\nimport { Color } from '../lib/terminal.js';\x0d\nimport { simplifyFraction } from '../lib/maths.js';\x0d\n\x0d\nclass UniquePathing {\x0d\n  constructor() {\x0d\n    this.paths = new Set();\x0d\n  }\x0d\n\x0d\n  getUniquePath(path) {\x0d\n    if (!this.paths.has(path)) {\x0d\n      this.paths.add(path);\x0d\n      return path;\x0d\n    }\x0d\n    let currentPath = path;\x0d\n    let index = 2;\x0d\n    while (this.paths.has(currentPath)) {\x0d\n      currentPath = path + "-" + index;\x0d\n      index++;\x0d\n    }\x0d\n    this.paths.add(currentPath);\x0d\n    return currentPath;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst Orientation = Object.freeze({\x0d\n  Landscape: 'landscape'\x2C\x0d\n  Portrait: 'portrait'\x2C\x0d\n  Square: 'square'\x2C\x0d\n});\x0d\n\x0d\nfunction getOrientation(width\x2C height) {\x0d\n  if (width === height) return Orientation.Square;\x0d\n  if (width > height) return Orientation.Landscape;\x0d\n  return Orientation.Portrait;\x0d\n}\x0d\n\x0d\nfunction getAspectRatio(width\x2C height) {\x0d\n  // We sort the array\x2C because it would be weird to denote aspect ratios in '9:16'\x2C etc.\x0d\n  const [simplifiedWidth\x2C simplifiedHeight] = simplifyFraction(width\x2C height).sort((a\x2C b) => b - a);\x0d\n  return {\x0d\n    aspectRatio: simplifiedWidth + ":" + simplifiedHeight\x2C\x0d\n    orientation: getOrientation(width\x2C height)\x2C\x0d\n    ratioFactor: width / height\x2C\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction normalizeTime(time\x2C resolution = 1000) {\x0d\n  const normalizedTime = Math.floor(time / resolution) * resolution;\x0d\n  return new Date(normalizedTime);\x0d\n}\x0d\n\x0d\nasync function processMediaFile({ filePath\x2C fileType\x2C fileName\x2C extension\x2C fileSize\x2C fileModified }) {\x0d\n  if (fileType !== 'file') return;\x0d\n  console.log(`${Color.Gray}Processing file '${Color.Reset + fileName + Color.Gray}' (${filePath}).${Color.Reset}`);\x0d\n  // For file names like 'Bear Conductor 2021-05-09 Release.png'.\x0d\n  const fullNameRegex = /(.+)(\\d{4}[-.]\\d{2}[-.]\\d{2}).*\\.(.*)/g;\x0d\n  const simpleNameRegex = /(.+)()\\.(.*)/g;\x0d\n  const match = fullNameRegex.exec(fileName) ?? simpleNameRegex.exec(fileName);\x0d\n  const [\x2C rawName\x2C rawDate\x2C fileExtension] = match;\x0d\n  const title = rawName.trim();\x0d\n  const mediaName = getPathSafeName(title);\x0d\n  const mediaDate = rawDate.replaceAll('.'\x2C '-');\x0d\n  const fileNamePublic = mediaDate.length > 0\x0d\n    ? (mediaName + "_" + mediaDate + extension)\x0d\n    : mediaName + extension;\x0d\n  const imageTypeIsSupported = [".png"\x2C ".jpg"\x2C ".jpeg"].includes(extension);\x0d\n  if (!imageTypeIsSupported)\x0d\n    console.log(`${Color.Cyan}  The file type '${Color.Reset + extension + Color.Cyan}' `\x0d\n      + `is only partially supported (${filePath}).${Color.Reset}`);\x0d\n  const metadata = imageTypeIsSupported ? await sharp(filePath).metadata() : { width: null\x2C height: null };\x0d\n  const aspectRatioInfo = imageTypeIsSupported ? getAspectRatio(metadata.width\x2C metadata.height) : null;\x0d\n  const vibrantColors = imageTypeIsSupported ? await getVibrantColorsInImage(filePath) : null;\x0d\n  return Promise.resolve({\x0d\n    active: imageTypeIsSupported\x2C\x0d\n    path: mediaName\x2C\x0d\n    date: mediaDate\x2C\x0d\n    fileNamePublic: fileNamePublic\x2C\x0d\n    fileNameInternal: fileName\x2C\x0d\n    fileType: fileExtension\x2C\x0d\n    fileSize: fileSize\x2C\x0d\n    // For some reason\x2C the time code is not exactly the same when the files get copied via OneDrive.\x0d\n    // So we ignore all the milliseconds and only save full seconds.\x0d\n    fileModified: normalizeTime(fileModified)\x2C\x0d\n    width: metadata.width\x2C\x0d\n    height: metadata.height\x2C\x0d\n    aspectRatio: aspectRatioInfo?.aspectRatio ?? null\x2C\x0d\n    orientation: aspectRatioInfo?.orientation ?? null\x2C\x0d\n    ratioFactor: aspectRatioInfo?.ratioFactor ?? null\x2C\x0d\n    vibrantColors: vibrantColors\x2C\x0d\n    // The following props are intended to be extended manually.\x0d\n    title: title\x2C\x0d\n    description: [title]\x2C // supposed to be Markdown\x0d\n    tags: title.split(" ").map(tag => tag.toLowerCase())\x2C\x0d\n    imageAlt: title\x2C\x0d\n    palette: []\x2C\x0d\n  });\x0d\n}\x0d\n\x0d\nasync function readMediaItem(filePath) {\x0d\n  const stats = await fs.promises.stat(filePath);\x0d\n  if (stats.isDirectory())\x0d\n    return Promise.reject(`Received directory but must be file '${filePath}'. `);\x0d\n  const fileName = path.basename(filePath);\x0d\n  const extension = path.extname(filePath);\x0d\n  const fileType = stats.isDirectory() ? 'dir' : 'file';\x0d\n  const fileSize = stats.size;\x0d\n  return Promise.resolve({ filePath\x2C fileType\x2C fileName\x2C extension\x2C fileSize\x2C fileModified: stats.mtime });\x0d\n}\x0d\n\x0d\nasync function readMediaInDir(dirPath\x2C fileInfoByName = undefined) {\x0d\n  const media = [];\x0d\n  const pathing = new UniquePathing();\x0d\n  const files = await fs.promises.readdir(dirPath);\x0d\n  for (const file of files) {\x0d\n    const filePath = path.resolve(dirPath\x2C file);\x0d\n    if (fileInfoByName && fileInfoByName.has(file)) {\x0d\n      // Optimization to skip unchanged files\x0d\n      const targetStats = fs.statSync(filePath);\x0d\n      const { size: targetSize\x2C mtime: targetModified } = targetStats;\x0d\n      const fileInfo = fileInfoByName.get(file);\x0d\n      const { size: sourceSize\x2C modified: sourceModified } = fileInfo;\x0d\n      const sameSize = targetSize === sourceSize;\x0d\n      //const targetModifiedFloored = Math.floor(targetModified); // returns weird fractional millis\x0d\n      //const sameModified = sourceModified === targetModifiedFloored;\x0d\n      const sameModified = sourceModified === normalizeTime(targetModified).getTime();\x0d\n      if (sameSize && sameModified) continue;\x0d\n    }\x0d\n    if (file === "firefox_2020-03-17_23-56-08.png")\x0d\n      1 + 1 // TODO: For some reason\x2C the optimization does not work with this particular file. Gets read every time.\x0d\n    const mediaItem = await readMediaItem(filePath).then(processMediaFile);\x0d\n    // Guarantee uniqueness of paths\x0d\n    const uniquePath = pathing.getUniquePath(mediaItem.path);\x0d\n    const uniqueFileName = mediaItem.fileNamePublic.replace(mediaItem.path\x2C uniquePath);\x0d\n    mediaItem.fileNamePublic = uniqueFileName;\x0d\n    mediaItem.path = uniquePath;\x0d\n    // Add to media list\x0d\n    media.push(mediaItem);\x0d\n  }\x0d\n  return media;\x0d\n}\x0d\n\x0d\nfunction mergeMediaItems(oldMediaItem\x2C newMediaItem\x2C preservedProps) {\x0d\n  const mergedMediaItem = {};\x0d\n  for (const prop in newMediaItem) {\x0d\n    const isPreservedProp = preservedProps.includes(prop);\x0d\n    mergedMediaItem[prop] = isPreservedProp ? oldMediaItem[prop] : newMediaItem[prop];\x0d\n  }\x0d\n  return mergedMediaItem;\x0d\n}\x0d\n\x0d\nfunction mergeMedia(oldMedia\x2C newMedia\x2C preservedProps) {\x0d\n  const oldMediaItemsByPath = new Map();\x0d\n  oldMedia.forEach(mediaItem => oldMediaItemsByPath.set(mediaItem.path\x2C mediaItem));\x0d\n  const newMediaItemsByPath = new Map();\x0d\n  newMedia.forEach(mediaItem => newMediaItemsByPath.set(mediaItem.path\x2C mediaItem));\x0d\n  const mergedMediaByPath = new Map();\x0d\n  for (const [path\x2C oldMediaItem] of oldMediaItemsByPath)\x0d\n    mergedMediaByPath.set(path\x2C oldMediaItem);\x0d\n  for (const [path\x2C newMediaItem] of newMediaItemsByPath) {\x0d\n    if (!mergedMediaByPath.has(path)) {\x0d\n      mergedMediaByPath.set(path\x2C newMediaItem);\x0d\n      continue;\x0d\n    }\x0d\n    const oldMediaItem = oldMediaItemsByPath.get(path);\x0d\n    const mergedMediaItem = mergeMediaItems(oldMediaItem\x2C newMediaItem\x2C preservedProps);\x0d\n    mergedMediaByPath.set(path\x2C mergedMediaItem);\x0d\n  }\x0d\n  return Array.from(mergedMediaByPath.values());\x0d\n}\x0d\n\x0d\nexport default async function readMedia({ dirPath\x2C outputFileName\x2C skipUnchanged = false }) {\x0d\n  // Step 1 -- Check parameters and setup source + target\x0d\n  if (!dirPath) {\x0d\n    console.error(`No directory for media files specified. Aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  if (!fs.existsSync(dirPath)) {\x0d\n    console.log(`Directory '${dirPath}' does not exist. Aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  const filePath = path.resolve(dirPath);\x0d\n  const targetFile = path.resolve(process.cwd()\x2C "data"\x2C outputFileName + '.json');\x0d\n  const mediaSorter = (a\x2C b) => b.path < a.path;\x0d\n\x0d\n  // Step 2 -- Read in all files if no media\x0d\n  if (!fs.existsSync(targetFile)) {\x0d\n    const media = await readMediaInDir(filePath);\x0d\n    console.log(Color.Green + `Creating media file '${targetFile}'. ` + Color.Reset);\x0d\n    writeObjectToFile(targetFile\x2C media.sort(mediaSorter)\x2C true);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Step 3 -- Read in changed or new files and exit if nothing new\x0d\n  const oldMedia = parseJsonFile(targetFile);\x0d\n  const oldMediaInfoByName = new Map();\x0d\n  if (skipUnchanged) {\x0d\n    for (const oldMediaItem of oldMedia)\x0d\n      oldMediaInfoByName.set(oldMediaItem.fileNameInternal\x2C {\x0d\n        size: oldMediaItem.fileSize\x2C\x0d\n        modified: new Date(oldMediaItem.fileModified).getTime()\x2C\x0d\n      });\x0d\n  }\x0d\n  const rereadMedia = await readMediaInDir(filePath\x2C oldMediaInfoByName);\x0d\n  if (rereadMedia.length === 0) {\x0d\n    console.log(Color.Gray + `No new media found. Unchanged '${targetFile}'. ` + Color.Reset);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Step 4 - Merge with manual edits if media already exists\x0d\n  const manualProps = ["description"\x2C "imageAlt"\x2C "palette"\x2C "tags"\x2C "title"];\x0d\n  const mergedMedia = mergeMedia(oldMedia\x2C rereadMedia\x2C manualProps);\x0d\n  console.log(Color.Blue + `Updating media file '${targetFile}'. ` + Color.Reset);\x0d\n  writeObjectToFile(targetFile\x2C mergedMedia.sort(mediaSorter)\x2C true);\x0d\n}\x0d\n
code-source-info,0x65ec1fb8fe,138,0,9226,C10O0C82O0C102O0C135O392C137O830C141O837C151O837C156O830C160O9226,,
code-creation,RegExp,3,579740,0x246eeee5600,1084,^\\.|%|\\\\
code-creation,Function,11,580884,0x246eeee5aa0,2256,pathToFileURL node:internal/url:1471:23,0xb0b6eba0c8,^
code-source-info,0x246eeee5aa0,39,42242,43506,,,
code-creation,Function,11,580947,0x246eeee63e0,404,toUSVString node:internal/util:62:21,0x2392d458a8,^
code-source-info,0x246eeee63e0,15,1479,1779,,,
code-creation,Function,11,580998,0x246eeee65e0,308,get search node:internal/url:908:13,0xb0b6eb9888,^
code-source-info,0x246eeee65e0,39,25377,25508,,,
code-creation,Function,11,581047,0x246eeee6780,308,get hash node:internal/url:938:11,0xb0b6eb99d8,^
code-source-info,0x246eeee6780,39,26139,26282,,,
code-creation,Function,11,581098,0x246eeee6920,416,throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:997:39,0x64be9062e0,^
code-source-info,0x246eeee6920,113,33854,34019,,,
code-creation,Function,11,581146,0x246eeee6b20,252,canBeRequiredByUsers node:internal/bootstrap/loaders:247:30,0x39b87d0988,^
code-source-info,0x246eeee6b20,9,7753,7853,,,
tick,0x7ff6d65ae197,581413,0,0x0,0,0x7ff6d65ae370,0x246eeed1ca5,0x246eeeda91b,0x246eeeda7d5,0x65ec1c8206,0x246eeed80b5,0x64be93fe57,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x65ec1d026a,0x7ff6d6643c13
code-creation,Function,11,582554,0x246eeee6c80,6524,defaultResolve node:internal/modules/esm/resolve:1025:30,0x64be906380,^
code-source-info,0x246eeee6c80,113,34563,38571,,,
code-creation,Function,11,582674,0x246eeee8660,3688,finalizeResolution node:internal/modules/esm/resolve:297:28,0x64be905c50,^
code-source-info,0x246eeee8660,113,9889,11528,,,
code-creation,Function,11,585182,0x246eeee9540,364,arrayToSafePromiseIterable node:internal/per_context/primordials:435:36,0x39b87caf18,^
code-source-info,0x246eeee9540,6,13205,13447,,,
code-creation,Function,11,585265,0x246eeee9720,1320,set search node:internal/url:915:13,0xb0b6eb98f8,^
code-source-info,0x246eeee9720,39,25524,26047,,,
code-creation,Function,11,585351,0x246eeee9cc0,1732,encodePathChars node:internal/url:1456:25,0xb0b6eba078,^
code-source-info,0x246eeee9cc0,39,41511,42216,,,
code-creation,Function,11,585411,0x246eeeea400,640,getConditionsSet node:internal/modules/esm/resolve:165:26,0x64be905a70,^
code-source-info,0x246eeeea400,113,5474,5810,,,
code-creation,Function,11,585798,0x246eeeea6e0,1316,moduleProvider node:internal/modules/esm/loader:452:28,0x65ec1cabf8,^
code-source-info,0x246eeeea6e0,109,13548,14005,,,
code-creation,Function,11,585860,0x246eeeeac80,352, node:internal/per_context/primordials:452:15,0x65ec1c9ef8,^
code-source-info,0x246eeeeac80,6,13765,13851,,,
code-creation,Function,11,585913,0x246eeeeae40,356,primordials.SafePromiseAll node:internal/per_context/primordials:449:30,0x39b87caf68,^
code-source-info,0x246eeeeae40,6,13624,13856,,,
code-creation,Function,11,585983,0x246eeeeb020,996,validateArgs node:internal/modules/esm/loader:567:26,0x65ec1cbe30,^
code-source-info,0x246eeeeb020,109,17356,18134,,,
scavenge,begin,0,421875,1724493771140
new,MemoryChunk,0xae9ce80000,262144
new,MemoryChunk,0x24a76c40000,262144
new,MemoryChunk,0x85f9bc0000,262144
scavenge,end,0,421875,1724493771143
code-creation,Script,10,589649,0x65ec1feaa6,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-html.js:1:1,0x65ec1fe5b0,~
script-source,139,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-html.js,import path from 'path';\x0d\nimport config from '../config/config.dev.js';\x0d\nimport TemplateWriter from '../lib/template-writer.js';\x0d\nimport { addAbsolutePathsToDirTree\x2C flattenDirTree\x2C loadDirAsTree } from '../lib/dir-tree.js';\x0d\n\x0d\nexport default async function buildHtml({ inputDir\x2C outputDir\x2C data\x2C partialsDir\x2C cacheFile = null\x2C ignoredFiles = [] }) {\x0d\n  const templating = new TemplateWriter({ partialsDir });\x0d\n  await templating.load();\x0d\n  // Step 1 -- Landmarking\x0d\n  const dirTreeRaw = loadDirAsTree({\x0d\n    input: inputDir\x2C \x0d\n    models: data\x2C\x0d\n    ignoredFiles: ignoredFiles.map(filePath => path.join(inputDir\x2C filePath))\x2C\x0d\n  });\x0d\n  const dirTree = addAbsolutePathsToDirTree(dirTreeRaw);\x0d\n  const queue = flattenDirTree(dirTree);\x0d\n  // Add current model to data slice\x0d\n  const artModelByPath = new Map();\x0d\n  data.mediaArt.forEach(entry => artModelByPath.set(entry.path\x2C entry));\x0d\n  for (const entry of queue) {\x0d\n    const { page\x2C chunk } = entry;\x0d\n    const { path: pathName\x2C model: modelName\x2C type: pageType\x2C source } = page;\x0d\n    if (pageType !== "page") continue;\x0d\n    // Add config to data chunk\x0d\n    chunk.addPayload("config"\x2C config);\x0d\n    // Add global to data chunk\x0d\n    chunk.addPayload("global"\x2C data);\x0d\n    // Add navigation\x0d\n    const nextPage = page.nextSibling;\x0d\n    page.test = "bobo-b\xe4r"\x0d\n    const previousPage = page.previousSibling;\x0d\n    chunk.addPayload("navigation"\x2C {\x0d\n      path: {\x0d\n        relative: "../".repeat(page.depth - 1)\x2C\x0d\n        absolute: page.absolutePath\x2C\x0d\n        tree: dirTree\x2C //dirTree.map(page => page.duplicateWithoutParent())\x2C\x0d\n        next: nextPage ? { path: nextPage.path\x2C title: nextPage.title } : null\x2C\x0d\n        previous: previousPage ? { path: previousPage.path\x2C title: previousPage.title } : null\x2C\x0d\n      }\x0d\n    });\x0d\n    // Add model to data chunk (if model page)\x0d\n    if (modelName && modelName === "mediaArt") {\x0d\n      const modelPayload = artModelByPath.get(pathName);\x0d\n      chunk.addPayload("model"\x2C { modelItem: modelPayload });\x0d\n    } else if (modelName) {\x0d\n      console.warn(`The model '${modelName}' is not supported so far. `);\x0d\n    }\x0d\n    // Add page title\x0d\n    const module = await templating.executeFile(source\x2C chunk);\x0d\n    page.title = module.title ?? page.path;\x0d\n  }\x0d\n  const pageEntries = queue.filter(entry => entry.page.type === "page");\x0d\n  for (let i = 0; i < pageEntries.length; i++) {\x0d\n    // Has to be done afterwards otherwise we would reach ahead when looking for "nextPage".\x0d\n    // For some reason\x2C accessing "page.nextSibling" and "page.previousSibling" accesses an outdated copy of DirTreeNodes\x2C \x0d\n    // which do not have their title set. I tried long and hard\x2C but I'm not sure why it's not stored as an object references\x2C\x0d\n    // which then can easily be accessed and modified. For now we will simply just access the next and previous page via the loop.\x0d\n    const entry = pageEntries[i];\x0d\n    const nextSibling = pageEntries[i + 1]?.page;\x0d\n    const previousSibling = pageEntries[i - 1]?.page;\x0d\n    const { page\x2C chunk } = entry;\x0d\n    const navigationSlice = chunk.getSlice("navigation").payload;\x0d\n    const navPath = navigationSlice.path;\x0d\n    if (navPath.next && nextSibling && nextSibling.depth === page.depth)\x0d\n      navPath.next.title = nextSibling.title;\x0d\n    if (navPath.previous && previousSibling && previousSibling.depth === page.depth)\x0d\n      navPath.previous.title = previousSibling.title;\x0d\n  }\x0d\n  await templating.readAndWriteQueue({\x0d\n    queue: queue\x2C\x0d\n    output: outputDir\x2C\x0d\n    cachePath: cacheFile\x2C\x0d\n    silent: false\x2C\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x65ec1feaa6,139,0,3535,C10O0C28O0C48O0C57O3535,,
code-creation,Function,11,590217,0x246eeeeb480,2148,getMessage node:internal/errors:427:20,0x39b87e7d38,^
code-source-info,0x246eeeeb480,11,12377,13256,,,
code-creation,Function,11,590337,0x246eeeebd60,1556,defaultLoad node:internal/modules/esm/load:72:27,0x64be92ac08,^
code-source-info,0x246eeeebd60,125,2270,2805,,,
code-creation,Function,11,593994,0x246eeeec3e0,4400,load node:internal/modules/esm/loader:556:13,0x2f2f3a3c720,^
code-source-info,0x246eeeec3e0,109,17076,20417,,,
code-creation,Function,11,594102,0x246eeeed580,1608,link node:internal/modules/esm/module_job:66:18,0x65ec1caf18,^
code-source-info,0x246eeeed580,111,1877,2733,,,
code-creation,Function,11,594173,0x246eeeedc40,1176,validateAssertions node:internal/modules/esm/assert:55:28,0x64be9034e0,^
code-source-info,0x246eeeedc40,112,1835,2993,,,
code-creation,Script,10,594467,0x24a76c46b36,80, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/terminal.js:1:1,0x65ec1fff68,~
script-source,140,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/terminal.js,export const Color = Object.freeze({\x0d\n  Reset: '\\x1b[0m'\x2C\x0d\n  Bright: '\\x1b[1m'\x2C\x0d\n  Dim: '\\x1b[2m'\x2C\x0d\n  Underscore: '\\x1b[4m'\x2C\x0d\n  Blink: '\\x1b[5m'\x2C\x0d\n  Reverse: '\\x1b[7m'\x2C\x0d\n  Hidden: '\\x1b[8m'\x2C\x0d\n\x0d\n  Black: '\\x1b[30m'\x2C\x0d\n  Red: '\\x1b[31m'\x2C\x0d\n  Orange: '\\x1b[38;5;214m'\x2C\x0d\n  Green: '\\x1b[32m'\x2C\x0d\n  Yellow: '\\x1b[33m'\x2C\x0d\n  Blue: '\\x1b[34m'\x2C\x0d\n  Magenta: '\\x1b[35m'\x2C\x0d\n  Cyan: '\\x1b[36m'\x2C\x0d\n  White: '\\x1b[37m'\x2C\x0d\n  Gray: '\\x1b[90m'\x2C\x0d\n\x0d\n  BgBlack: '\\x1b[40m'\x2C\x0d\n  BgRed: '\\x1b[41m'\x2C\x0d\n  BgGreen: '\\x1b[42m'\x2C\x0d\n  BgYellow: '\\x1b[43m'\x2C\x0d\n  BgBlue: '\\x1b[44m'\x2C\x0d\n  BgMagenta: '\\x1b[45m'\x2C\x0d\n  BgCyan: '\\x1b[46m'\x2C\x0d\n  BgWhite: '\\x1b[47m'\x2C\x0d\n});\x0d\n
code-source-info,0x24a76c46b36,140,0,617,C10O0C28O0C48O0C55O21C59O28C69O28C74O21C79O617,,
code-creation,Script,10,594886,0x24a76c472ee,64, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-assets.js:1:1,0x24a76c46f60,~
script-source,141,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/build-assets.js,import { rollup } from 'rollup';\x0d\nimport rollupConfig from '../rollup.config.js';\x0d\n\x0d\nasync function build() {\x0d\n  const bundle = await rollup(rollupConfig);\x0d\n  await bundle.write(rollupConfig.output);\x0d\n  console.log('Rollup completed successfully.');\x0d\n}\x0d\n\x0d\nexport default async function buildAssets() {\x0d\n  await build().catch((error) => {\x0d\n    console.error('Rollup encountered an error:'\x2C error);\x0d\n    process.exit(1);\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x24a76c472ee,141,0,430,C10O0C34O0C54O0C63O430,,
tick,0x7ff81324e004,599076,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x2ade89fa4d6,0x65ec1c95dd,0x65ec1df336,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
tick,0x7ff81324e004,613641,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x2ade89fa4d6,0x65ec1c95dd,0x65ec1df336,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
code-creation,LazyCompile,10,621509,0x24a76c48eee,609,packageExportsResolve node:internal/modules/esm/resolve:574:31,0x64be905f20,~
code-source-info,0x24a76c48eee
code-creation,LazyCompile,10,621821,0x24a76c4947e,161,isConditionalExportsMainSugar node:internal/modules/esm/resolve:543:39,0x64be905ed0,~
code-source-info,0x24a76c4947e,113,18016,18934,C0O18053C8O18088C11O18088C17O18111C18O18123C19O18127C29O18180C30O18193C31O18212C36O18212C41O18276C43O18294C45O18313C47O18325C51O18318C56O18357C58O18361C62O18401C64O18405C70O18418C76O18422C81O18436C90O18444C95O18460C102O18516C104O18539C109O18575C116O18622C119O18622C129O18739C135O18821C144O18581C149O18575C150O18334C155O18300C158O18905C160O18931,,
code-creation,LazyCompile,10,622141,0x24a76c4974e,403,resolvePackageTarget node:internal/modules/esm/resolve:468:30,0x64be905e80,~
code-source-info,0x24a76c4974e
code-creation,LazyCompile,10,622373,0x24a76c49abe,28,isArrayIndex node:internal/modules/esm/resolve:462:22,0x64be905e30,~
code-source-info,0x24a76c49abe,113,15389,15512,C0O15415C2O15415C5O15424C9O15440C14O15449C15O15462C16O15466C17O15480C24O15495C27O15509,,
new,MemoryChunk,0x2175aa80000,270336
code-creation,LazyCompile,10,622800,0x24a76c49dc6,553,resolvePackageTargetString node:internal/modules/esm/resolve:400:36,0x64be905de0,~
code-source-info,0x24a76c49dc
tick,0x7ff81324e004,630517,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x2ade89fa4d6,0x65ec1c95dd,0x246eeedaa50,0x246eeeda7d5,0x65ec1c8206,0x246eeed80b5,0x246eeee84cc,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
code-creation,Script,10,635965,0x24a76c4b436,103, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/filewatcher.js:1:1,0x24a76c4adf8,~
script-source,142,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/filewatcher.js,import fs from 'fs';\x0d\nimport { AsyncQueue\x2C debounce\x2C promisify } from '../lib/async.js';\x0d\n\x0d\nexport default class FileWatcher {\x0d\n  /**\x0d\n   * Constructor for a FileWatcher object.\x0d\n   * @param {Object} options\x0d\n   * @param {string | string[]} options.target\x0d\n   * @param {Function} options.onChange\x0d\n   * @param {Function} options.onError\x0d\n   * @param {boolean} options.recursive\x0d\n   */\x0d\n  constructor({ target\x2C onChange = () => { }\x2C onError = () => { }\x2C recursive = false }) {\x0d\n    this.queue = new AsyncQueue();\x0d\n    this.target = target;\x0d\n    this.onChange = (...args) => {\x0d\n      const promisifedOnChange = promisify(onChange);\x0d\n      // I'm not quite sure why\x2C but we have to include the curly braces for the arrow function on the next line.\x0d\n      // Otherwise the queue only executes the first task and nothing else.\x0d\n      this.queue.enqueue(async () => { promisifedOnChange(...args) });\x0d\n    };\x0d\n    this.onError = onError;\x0d\n    this.watchers = [];\x0d\n    const rawWatchers = Array.isArray(target) ? target : [target];\x0d\n    for (const rawWatcher of rawWatchers) {\x0d\n      const watcher = FileWatcher.watchDir({\x0d\n        dirPath: rawWatcher\x2C\x0d\n        // For some reason\x2C when changing files with VS Code on Windows\x2C there are 3-4 change events fired at once.\x0d\n        // As comparison\x2C when changing a file with notepad.exe\x2C only one event gets fired.\x0d\n        // So we debounce the callback for the event to only handle actual changes.\x0d\n        onChange: debounce(this.onChange\x2C 50)\x2C\x0d\n        onError: this.onError\x2C\x0d\n        recursive: recursive\x2C\x0d\n      });\x0d\n      this.watchers.push(watcher);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  static watchDir({ dirPath\x2C onChange = () => { }\x2C onError = () => { }\x2C recursive = false }) {\x0d\n    const watcher = fs.watch(dirPath\x2C {\x0d\n      recursive: recursive\x2C\x0d\n    }\x2C (eventType\x2C filename) => {\x0d\n      if (eventType === 'change') {\x0d\n        onChange(eventType\x2C filename);\x0d\n      }\x0d\n    });\x0d\n    watcher.on('error'\x2C (error) => {\x0d\n      console.error(`Watcher error: ${error}`);\x0d\n      onError(error);\x0d\n    });\x0d\n    return watcher;\x0d\n  }\x0d\n\x0d\n  clear() {\x0d\n    for (const watcher of this.watchers)\x0d\n      watcher.close();\x0d\n    this.queue.clear();\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x24a76c4b436,142,0,2168,C10O0C28O0C48O0C97O107C102O2168,,
code-creation,Function,11,636578,0x246eeeee140,48,node: node:internal/modules/esm/get_format:32:10,0x64be90ad68,^
code-source-info,0x246eeeee140,115,1118,1142,,,
code-creation,Function,11,636648,0x246eeeee1e0,184,assert node:internal/assert:11:16,0x2392d66d48,^
code-source-info,0x246eeeee1e0,21,182,322,,,
code-creation,Function,11,636708,0x246eeeee300,520,hasNoEntryError node:fs:1513:25,0x6414e98848,^
code-source-info,0x246eeeee300,83,40113,40315,,,
code-creation,Function,11,636773,0x246eeeee580,1064,set hash node:internal/url:945:11,0xb0b6eb9a40,^
code-source-info,0x246eeeee580,39,26296,26743,,,
code-creation,Function,11,636838,0x246eeeeea20,1064, node:internal/validators:137:40,0x2392d4ab48,^
code-source-info,0x246eeeeea20,16,3630,4075,,,
code-creation,Script,10,638677,0x24a76c4c0c6,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/inspect-media.js:1:1,0x24a76c4bcb8,~
script-source,143,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/inspect-media.js,import { formatTable\x2C simplifyBytes\x2C truncateEllipsis } from "../lib/string.js";\x0d\n\x0d\nexport function inspectMedia(media) {\x0d\n  const lines = media.map(piece => {\x0d\n    const { fileNamePublic\x2C fileNameInternal\x2C fileSize\x2C width\x2C height\x2C aspectRatio } = piece;\x0d\n    return `'${fileNameInternal}' (${fileNamePublic})\x2C ${simplifyBytes(fileSize)}\x2C ${width} \\u00d7 ${height} (${aspectRatio})`;\x0d\n  });\x0d\n  return lines;\x0d\n}\x0d\n\x0d\n\x0d\nexport function inspectMediaTable(media) {\x0d\n  const fileNameMaxLength = 48;\x0d\n  const lines = media.map(piece => {\x0d\n    const { fileNamePublic\x2C fileNameInternal\x2C fileSize\x2C width\x2C height\x2C aspectRatio\x2C orientation } = piece;\x0d\n    return [\x0d\n      truncateEllipsis(fileNameInternal\x2C fileNameMaxLength)\x2C \x0d\n      truncateEllipsis(fileNamePublic\x2C fileNameMaxLength)\x2C \x0d\n      simplifyBytes(fileSize)\x2C \x0d\n      width + " \\u00d7 " + height\x2C \x0d\n      aspectRatio\x2C\x0d\n      orientation\x2C\x0d\n    ];\x0d\n  });\x0d\n  return formatTable(lines\x2C 2);\x0d\n}\x0d\n
code-source-info,0x24a76c4c0c6,143,0,938,C10O0C28O0C48O0C57O938,,
code-creation,Function,11,641976,0x246eeeeeec0,4404,readFileHandle node:internal/fs/promises:365:30,0x64be92c540,^
code-source-info,0x246eeeeeec0,126,8850,10681,,,
code-creation,Function,11,642070,0x246eeef0060,152, node:internal/fs/promises:209:9,0x65ec1d3cd0,^
code-source-info,0x246eeef0060,126,4795,4837,,,
code-creation,Function,11,642122,0x246eeef0160,96,slice node:buffer:608:12,0x2392d7e190,^
code-source-info,0x246eeef0160,24,17717,17763,,,
code-creation,Function,11,642186,0x246eeef0220,1216,EventEmitter.init node:events:337:29,0x2392d717b8,^
code-source-info,0x246eeef0220,23,10180,10788,,,
code-creation,Function,11,642248,0x246eeef0740,572,createUnsafeBuffer node:internal/buffer:1059:28,0xb0b6e8bd18,^
code-source-info,0x246eeef0740,25,31379,31495,,,
code-creation,Script,10,643664,0x24a76c4d52e,86, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/sort-media.js:1:1,0x24a76c4d0a0,~
script-source,144,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/sort-media.js,import fs from 'fs';\x0d\nimport { parseJsonFile\x2C writeObjectToFile } from '../lib/filesystem.js';\x0d\n\x0d\nexport const SorterType = Object.freeze({\x0d\n  Name: 'name'\x2C\x0d\n  Date: 'date'\x2C\x0d\n});\x0d\n\x0d\nfunction getSortedMedia (entries\x2C sorterName) {\x0d\n  const nameSorter = (a\x2C b) => a.path.localeCompare(b.path);\x0d\n  switch (sorterName) {\x0d\n    case SorterType.Name:\x0d\n      return entries.sort(nameSorter);\x0d\n    case SorterType.Date:\x0d\n      return entries.sort((a\x2C b) => {\x0d\n        // If date is equal\x2C sort by name\x0d\n        if (a.date.localeCompare(b.date) === 0) return nameSorter(a\x2C b);\x0d\n        // Sort undated entries last\x0d\n        if (a.date.length === 0) return 1;\x0d\n        if (b.date.length === 0) return -1;\x0d\n        // Finally\x2C sort by date\x0d\n        return b.date.localeCompare(a.date)\x0d\n      });\x0d\n    default:\x0d\n      console.warn(`Unknown sorter '${sorterName}'\x2C no sorting. `);\x0d\n      return [...entries];\x0d\n  }\x0d\n};\x0d\n\x0d\nexport default async function sortMedia(jsonFile\x2C sorter = "name") {\x0d\n  if (!fs.existsSync(jsonFile)) {\x0d\n    console.warn(`There is no media file at '${jsonFile}'\x2C aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  if (!Object.values(SorterType).includes(sorter)) {\x0d\n    console.warn(`Unknown sorter '${sorter}'\x2C aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  const media = parseJsonFile(jsonFile);\x0d\n  const newMedia = getSortedMedia(media\x2C sorter);\x0d\n  writeObjectToFile(jsonFile\x2C newMedia\x2C true);\x0d\n}\x0d\n
code-source-info,0x24a76c4d52e,144,0,1381,C10O0C34O0C54O0C61O124C65O131C75O131C80O124C85O1381,,
code-creation,Function,11,644028,0x246eeef09e0,1288,moduleStrategy node:internal/modules/esm/translators:114:56,0x64be93b688,^
code-source-info,0x246eeef09e0,128,3264,3694,,,
code-creation,Function,11,644107,0x246eeef0f60,488, node:buffer:354:36,0x2392d7d748,^
code-source-info,0x246eeef0f60,24,10661,10821,,,
code-creation,Function,11,644184,0x246eeef11c0,1840,close node:internal/fs/promises:195:11,0x64be92f3e0,^
code-source-info,0x246eeef11c0,126,4469,5290,,,
code-creation,Function,11,644237,0x246eeef1960,324,validateOutput node:internal/modules/esm/loader:593:28,0x65ec1cbe80,^
code-source-info,0x246eeef1960,109,18164,18409,,,
code-creation,Function,11,644295,0x246eeef1b20,712,stringify node:internal/modules/esm/translators:94:19,0x64be93b4a8,^
code-source-info,0x246eeef1b20,128,2646,2851,,,
code-creation,Script,10,645705,0x24a76c4e23e,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/read-tags.js:1:1,0x24a76c4deb8,~
script-source,145,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/bin/read-tags.js,import fs from 'fs';\x0d\nimport { parseJsonFile\x2C writeObjectToFile } from "../lib/filesystem.js";\x0d\n\x0d\nexport default function readTags(mediaFile\x2C tagFile\x2C pathPrefix = "") {\x0d\n  if (!fs.existsSync(mediaFile)) {\x0d\n    console.warn(`There is no media file at '${mediaFile}'\x2C aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  if (!fs.existsSync(tagFile)) {\x0d\n    console.warn(`There is no tag file at '${tagFile}'\x2C aborting. `);\x0d\n    return;\x0d\n  }\x0d\n  const media = parseJsonFile(mediaFile);\x0d\n  const rawTags = parseJsonFile(tagFile);\x0d\n  const mediaByPath = new Map();\x0d\n  for (const entry of media)\x0d\n    mediaByPath.set(pathPrefix + entry.path\x2C entry);\x0d\n  const unknownPaths = {};\x0d\n  for (const path in rawTags) {\x0d\n    const tags = rawTags[path];\x0d\n    if (unknownPaths.hasOwnProperty(path)) {\x0d\n      console.warn(`The path '${path}' appears multiple times in the tag list\x2C skipping. `);\x0d\n      continue;\x0d\n    }\x0d\n    if (!mediaByPath.has(path)) {\x0d\n      unknownPaths[path] = tags;\x0d\n      continue;\x0d\n    }\x0d\n    const mediaEntry = mediaByPath.get(path);\x0d\n    mediaEntry.tags = tags.sort();\x0d\n  }\x0d\n  writeObjectToFile(mediaFile\x2C media\x2C true);\x0d\n  console.log(`Overridden tags in '${mediaFile}' with '${tagFile}'. `);\x0d\n}\x0d\n
code-source-info,0x24a76c4e23e,145,0,1188,C10O0C28O0C48O0C57O1188,,
code-creation,Script,10,647284,0x24a76c4efbe,76, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/tag-util.js:1:1,0x24a76c4e9d8,~
script-source,146,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/tag-util.js,import { camelCaseToTitleCase } from "./string.js";\x0d\n\x0d\nfunction countTags(entries) {\x0d\n  const countByTags = new Map();\x0d\n  for (const entry of entries) {\x0d\n    const { tags } = entry;\x0d\n    for (const tag of tags) {\x0d\n      if (countByTags.has(tag)) {\x0d\n        const count = countByTags.get(tag);\x0d\n        countByTags.set(tag\x2C count + 1);\x0d\n        continue;\x0d\n      }\x0d\n      countByTags.set(tag\x2C 1);\x0d\n    }\x0d\n  }\x0d\n  const countByTagsArray = Array.from(countByTags\x2C ([tag\x2C count]) => ({ tag\x2C count }));\x0d\n  return countByTagsArray.sort((a\x2C b) => b.count - a.count || a.tag.localeCompare(b.tag));\x0d\n}\x0d\n\x0d\nfunction getCompressedTagDefinitions(entries) {\x0d\n  const tagDefinitions = [];\x0d\n  const tagCounts = [];\x0d\n  const indexByTags = new Map();\x0d\n  const countedTags = countTags(entries);\x0d\n  for (let i = 0; i < countedTags.length; i++) {\x0d\n    const { tag\x2C count } = countedTags[i];\x0d\n    tagDefinitions[i] = tag;\x0d\n    tagCounts[i] = count;\x0d\n    indexByTags.set(tag\x2C i);\x0d\n  }\x0d\n  const tagData = {};\x0d\n  for (const entry of entries) {\x0d\n    const { path\x2C tags } = entry;\x0d\n    const newPath = `/art/${path}`;\x0d\n    const tagIds = tags.map(tag => indexByTags.get(tag));\x0d\n    tagData[newPath] = tagIds;\x0d\n  }\x0d\n  return { defs: tagDefinitions\x2C counts: tagCounts\x2C uses: tagData };\x0d\n}\x0d\n\x0d\nfunction getTagStats(uniqueTagsCount\x2C tagCounts\x2C pageCount\x2C relevance) {\x0d\n  const assignedTags = tagCounts.reduce((totalCount\x2C count) => totalCount + count\x2C 0);\x0d\n  // Because there are so many barely used unique tags\x2C we want to find out the index of the tag\x2C \x0d\n  //  that represents 90% of all assigned tags. Otherwise the filtering menu has too many options.\x0d\n  const relevanceLimit = Math.ceil(relevance * assignedTags);\x0d\n  let relevanceCounter = 0;\x0d\n  let relevanceIndex = 0;\x0d\n  for (let i = 0; i < tagCounts.length; i++) {\x0d\n    relevanceCounter += tagCounts[i];\x0d\n    relevanceIndex = i;\x0d\n    if (relevanceCounter >= relevanceLimit) break;\x0d\n  }\x0d\n  return {\x0d\n    assignedTags\x2C\x0d\n    uniqueTags: uniqueTagsCount\x2C\x0d\n    pages: pageCount\x2C\x0d\n    tagCounts: tagCounts\x2C\x0d\n    relevanceFactor: relevance\x2C\x0d\n    relevanceCount: relevanceLimit\x2C\x0d\n    lastRelevantTagIndex: relevanceIndex\x2C\x0d\n  }\x0d\n}\x0d\n\x0d\nexport function getCompressedTagsFromMedia(entries\x2C relevanceLimit = 0.9) {\x0d\n  const { defs\x2C counts\x2C uses } = getCompressedTagDefinitions(entries);\x0d\n  const stats = getTagStats(defs.length\x2C counts\x2C entries.length\x2C relevanceLimit);\x0d\n  return { defs\x2C stats\x2C uses };\x0d\n}\x0d\n\x0d\nexport function uncompressTags(compressedTags) {\x0d\n  const tagData = {};\x0d\n  const { defs\x2C uses } = compressedTags;\x0d\n  for (const path in uses) {\x0d\n    const tagIds = uses[path];\x0d\n    const readableTags = tagIds.map(id => defs[id]);\x0d\n    tagData[path] = readableTags;\x0d\n  }\x0d\n  return tagData;\x0d\n}\x0d\n\x0d\nexport function uncompressTagDefinitions(compressedTags) {\x0d\n  const definitions = [];\x0d\n  const { defs\x2C stats } = compressedTags;\x0d\n  const { tagCounts: counts\x2C lastRelevantTagIndex } = stats;\x0d\n  for (let i = 0; i < defs.length; i++) {\x0d\n    definitions.push({\x0d\n      id: defs[i]\x2C\x0d\n      label: camelCaseToTitleCase(defs[i])\x2C\x0d\n      count: counts[i]\x2C\x0d\n      isRelevant: i <= lastRelevantTagIndex\x2C\x0d\n    })\x0d\n  }\x0d\n  return definitions;\x0d\n}\x0d\n\x0d\nexport function getTagDefinitionsFromMedia(entries\x2C relevanceLimit = 0.9) {\x0d\n  const compressedTags = getCompressedTagsFromMedia(entries\x2C relevanceLimit);\x0d\n  return uncompressTagDefinitions(compressedTags);\x0d\n}\x0d\n
code-source-info,0x24a76c4efbe,146,0,3361,C10O0C46O0C66O0C75O3361,,
code-creation,Function,11,648511,0x246eeef1e60,1740,decode node:internal/encoding:412:11,0xb0b6e94260,^
code-source-info,0x246eeef1e60,27,11611,12467,,,
code-creation,Function,11,648584,0x246eeef25a0,660,assertBufferSource node:internal/modules/esm/translators:78:28,0x64be93b458,^
code-source-info,0x246eeef25a0,128,2217,2624,,,
code-creation,Function,11,648639,0x246eeef28a0,396,lazyTypes node:internal/modules/esm/translators:22:19,0x64be93b3b8,^
code-source-info,0x246eeef28a0,128,420,517,,,
code-creation,Function,11,648708,0x246eeef2aa0,1076,addJobsToDependencyGraph node:internal/modules/esm/module_job:107:38,0x65ec1d1b78,^
code-source-info,0x246eeef2aa0,111,3389,3646,,,
tick,0x7ff6d65bdcd9,648933,1,0x7ff6d5cf6d60,2,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
code-creation,Script,10,648999,0x24a76c50206,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/image.js:1:1,0x24a76c4fd20,~
script-source,147,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/image.js,import sharp from 'sharp';\x0d\nimport Vibrant from 'node-vibrant';\x0d\nimport path from 'path';\x0d\nimport { makeFirstLetterLowerCase } from './string.js';\x0d\n\x0d\nexport async function getMainColorsInImage(imagePath\x2C options = {}) {\x0d\n  const defaultOptions = {\x0d\n    resolution: 10\x2C\x0d\n    maxColors: 5\x2C\x0d\n  }\x0d\n  const runOptions = { ...defaultOptions\x2C ...options };\x0d\n  return await sharp(imagePath)\x0d\n    .resize(runOptions.resolution\x2C runOptions.resolution)\x0d\n    .raw()\x0d\n    .toBuffer()\x0d\n    .then((buffer) => {\x0d\n      const pixels = [];\x0d\n      for (let i = 0; i < buffer.length; i += 3) {\x0d\n        const r = buffer[i];\x0d\n        const g = buffer[i + 1];\x0d\n        const b = buffer[i + 2];\x0d\n        pixels.push([r\x2C g\x2C b]);\x0d\n      }\x0d\n\x0d\n      // Analyze the pixel data to determine main colors\x0d\n      const colorCounts = {};\x0d\n      for (const pixel of pixels) {\x0d\n        const color = pixel.join('\x2C');\x0d\n        if (colorCounts[color] === undefined)\x0d\n          colorCounts[color] = 0;\x0d\n        colorCounts[color] += 1;\x0d\n      }\x0d\n      const sortedColors = Object.keys(colorCounts).sort(\x0d\n        (a\x2C b) => colorCounts[b] - colorCounts[a]\x0d\n      );\x0d\n      const mainColors = sortedColors.slice(0\x2C runOptions.maxColors);\x0d\n      return mainColors;\x0d\n    })\x0d\n    .catch((err) => {\x0d\n      console.error('Error analyzing image:'\x2C err);\x0d\n    });\x0d\n}\x0d\n\x0d\nexport async function getVibrantColorsInImage(imagePath) {\x0d\n  const palette = await Vibrant.from(imagePath).getPalette();\x0d\n  const colors = {};\x0d\n  for (const color in palette) {\x0d\n    const prop = makeFirstLetterLowerCase(color);\x0d\n    colors[prop] = palette[color].hex;\x0d\n  }\x0d\n  return colors;\x0d\n}\x0d\n
code-source-info,0x24a76c50206,147,0,1619,C10O0C28O0C48O0C57O1619,,
tick,0x7ff81324e004,661559,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x2ade89fa4d6,0x65ec1c95dd,0x65ec1df336,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
scavenge,begin,0,437500,1724493771219
scavenge,end,0,437500,1724493771220
code-creation,Function,11,667365,0x246eeef2f40,1036,toString node:buffer:790:46,0x2392d7f688,^
code-source-info,0x246eeef2f40,24,24230,24822,,,
code-creation,Function,11,667472,0x246eeef33c0,2688,getPackageConfig node:internal/modules/esm/package_config:40:26,0x64be909d70,^
code-source-info,0x246eeef33c0,114,947,2488,,,
code-creation,Script,10,667773,0x24a76c51ac6,75, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/maths.js:1:1,0x24a76c51648,~
script-source,148,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/maths.js,export function insideRange(value\x2C min\x2C max) {\x0d\n  return value > min && value < max;\x0d\n}\x0d\n\x0d\nexport function distance(x1\x2C y1\x2C x2\x2C y2) {\x0d\n  const deltaX = x2 - x1;\x0d\n  const deltaY = y2 - y1;\x0d\n  return Math.sqrt(deltaX ** 2 + deltaY ** 2);\x0d\n}\x0d\n\x0d\nfunction getGreatestCommonDivisor(a\x2C b) {\x0d\n  if (b === 0) return a;\x0d\n  return getGreatestCommonDivisor(b\x2C a % b);\x0d\n}\x0d\n\x0d\nfunction getLowestCommonMultiple(a\x2C b) {\x0d\n  return (a * b) / getGreatestCommonDivisor(a\x2C b);\x0d\n}\x0d\n\x0d\nfunction getLowestCommonDenominator(...numbers) {\x0d\n  if (numbers.length < 2)\x0d\n      throw new Error('At least two numbers are required to find the Lowest Common Denominator.');\x0d\n  let result = numbers[0];\x0d\n  for (let i = 1; i < numbers.length; i++)\x0d\n      result = getLowestCommonMultiple(result\x2C numbers[i]);\x0d\n  return result;\x0d\n}\x0d\n\x0d\nexport function simplifyFraction(numerator\x2C denominator) {\x0d\n  if (denominator === 0)\x0d\n      throw new Error('Denominator cannot be zero.');\x0d\n  const commonDivisor = getGreatestCommonDivisor(Math.abs(numerator)\x2C Math.abs(denominator));\x0d\n  const simplifiedNumerator = numerator / commonDivisor;\x0d\n  const simplifiedDenominator = denominator / commonDivisor;\x0d\n  return [simplifiedNumerator\x2C simplifiedDenominator];\x0d\n}\x0d\n
code-source-info,0x24a76c51ac6,148,0,1210,C10O0C45O0C65O0C74O1210,,
code-creation,Script,10,668228,0x24a76c523e6,65, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/config/config.dev.js:1:1,0x24a76c52158,~
script-source,149,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/config/config.dev.js,export default {\x0d\n  debug: true\x2C\x0d\n  path: {\x0d\n    base: "http://localhost:8000"\x0d\n  }\x2C\x0d\n  titleTemplate: "#{title} \\u2013 Krank"\x2C\x0d\n  siteName: "krank.love"\x2C\x0d\n  siteTwitter: "@krankomat96"\x2C\x0d\n  siteThumbnail: "art/960p/bear-tired_2022-10-25.png"\x2C\x0d\n  siteThumbnailAlt: "Krank draws furry art\x2C among other things. "\x2C\x0d\n  siteColor: "#3c543c"\x2C\x0d\n  errorThumbnail: "art/960p/bear-annoyed-stupid_2023-10-10.png"\x2C\x0d\n  errorThumbnailAlt: "The requested page could not be loaded. "\x2C\x0d\n  errorColor: "#554637"\x2C\x0d\n}\x0d\n
code-source-info,0x24a76c523e6,149,0,498,C10O0C28O0C48O0C64O498,,
code-creation,Script,10,668685,0x24a76c52ffe,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/string.js:1:1,0x24a76c52860,~
script-source,150,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/string.js,export function makeFirstLetterLowerCase(input) {\x0d\n  if (input.length === 0) return input;\x0d\n  return input[0].toLowerCase() + input.slice(1);\x0d\n}\x0d\n\x0d\nexport function toKebabCase(inputString) {\x0d\n  return inputString\x0d\n    .replace(/\\s+-+\\s+/g\x2C '-')           // replaces " - "\x0d\n    .replace(/([a-z])([A-Z])/g\x2C '$1-$2') // replaces camelCase\x0d\n    .replace(/\\s+/g\x2C '-')                // replaces spaces\x0d\n    .toLowerCase();\x0d\n}\x0d\n\x0d\nexport function camelCaseToTitleCase(inputString) {\x0d\n  return inputString\x0d\n    .replace(/([A-Z])/g\x2C ' $1')\x0d\n    .replace(/^./\x2C (str) => str.toUpperCase() );\x0d\n}\x0d\n\x0d\nexport function replaceUmlauts(inputString) {\x0d\n  return inputString\x0d\n    .replace(/\xe4/g\x2C 'ae')\x0d\n    .replace(/\xf6/g\x2C 'oe')\x0d\n    .replace(/\xfc/g\x2C 'ue')\x0d\n    .replace(/\xc4/g\x2C 'Ae')\x0d\n    .replace(/\xd6/g\x2C 'Oe')\x0d\n    .replace(/\xdc/g\x2C 'Ue')\x0d\n    .replace(/\xdf/g\x2C 'ss');\x0d\n}\x0d\n\x0d\nexport function getPathSafeName(string) {\x0d\n  return replaceUmlauts(toKebabCase(string))\x0d\n    .replace(/^_*(.+?)_*$/g\x2C '$1')\x0d\n    .replace(/['\x2C.]/g\x2C '');\x0d\n}\x0d\n\x0d\nexport function interpolateString(template\x2C values = {}) {\x0d\n  return template.replace(/\\#\\{([^{}]+)\\}/g\x2C function (match\x2C key) {\x0d\n    return values[key.trim()] || match;\x0d\n  });\x0d\n}\x0d\n\x0d\nexport function simplifyBytes(bytes) {\x0d\n  if (bytes === 0) return '0 Byte';\x0d\n  const sizes = ['Bytes'\x2C 'KB'\x2C 'MB'\x2C 'GB'\x2C 'TB'\x2C 'PB'\x2C 'EB'\x2C 'ZB'\x2C 'YB'];\x0d\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\x0d\n  const simplifiedSize = Math.round((bytes / Math.pow(1024\x2C i)) * 100) / 100;\x0d\n  return `${simplifiedSize} ${sizes[i]}`;\x0d\n}\x0d\n\x0d\nexport function formatTable(table\x2C padding = 2\x2C tabWidth = undefined) {\x0d\n  // To get a formatted table\x2C where each column is 8 spaces wide and has a guaranteed spacing of 2\x2C \x0d\n  // enter 'formatTable(table\x2C 2\x2C 6)'\x0d\n  const maxCols = table.reduce((max\x2C row) => Math.max(max\x2C row.length)\x2C 0);\x0d\n  const colWidths = new Array(maxCols).fill(0);\x0d\n  table.forEach(row => {\x0d\n    for (let i = 0; i < row.length; i++) {\x0d\n      colWidths[i] = Math.max(colWidths[i]\x2C String(row[i]).length);\x0d\n    }\x0d\n  });\x0d\n  return table.map(row => {\x0d\n    let rowStr = '';\x0d\n    for (let i = 0; i < row.length; i++) {\x0d\n      const isLast = i === row.length - 1;\x0d\n      const cell = String(row[i]);\x0d\n      let paddingCount = tabWidth\x0d\n        ? Math.ceil(cell.length / tabWidth) * tabWidth - cell.length\x0d\n        : colWidths[i] - cell.length;\x0d\n      if (!isLast) paddingCount += padding;\x0d\n      const stringPadding = ' '.repeat(paddingCount);\x0d\n      rowStr += cell + stringPadding;\x0d\n    }\x0d\n    return rowStr\x0d\n  });\x0d\n}\x0d\n\x0d\nexport function truncateEllipsis(str\x2C maxLength) {\x0d\n  const ellipsis = "...";\x0d\n  if (maxLength < ellipsis.length)\x0d\n    return ellipsis.slice(0\x2C maxLength);\x0d\n  if (str.length <= maxLength)\x0d\n    return str;\x0d\n  return str.slice(0\x2C maxLength - ellipsis.length) + ellipsis;\x0d\n}\x0d\n
code-source-info,0x24a76c52ffe,150,0,2799,C10O0C28O0C48O0C57O2799,,
code-creation,Script,10,669654,0x24a76c5470e,141, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/dir-tree.js:1:1,0x24a76c53a70,~
script-source,151,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/dir-tree.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport TemplateEngine from "./template-engine.js";\x0d\nimport TemplateLoader from './template-loader.js';\x0d\nimport { DataChunk } from './data-chunk.js';\x0d\n\x0d\nclass DirTreeNode {\x0d\n  constructor({ path\x2C title\x2C extension\x2C source\x2C type\x2C model\x2C absolutePath = null\x2C children = []\x2C parent = null }) {\x0d\n    this.path = path;\x0d\n    this.title = title;\x0d\n    this.extension = extension;\x0d\n    this.source = source;\x0d\n    this.type = type;\x0d\n    this.model = model;\x0d\n    this.absolutePath = absolutePath;\x0d\n    this.children = children;\x0d\n    this.parent = parent;\x0d\n  }\x0d\n\x0d\n  get depth() {\x0d\n    return this.absolutePath.split("/").length;\x0d\n  }\x0d\n\x0d\n  get nextSibling() {\x0d\n    return this.getSiblingAtNextPosition(1);\x0d\n  }\x0d\n\x0d\n  get previousSibling() {\x0d\n    return this.getSiblingAtNextPosition(-1);\x0d\n  }\x0d\n\x0d\n  getNextSibling() {\x0d\n    return this.getSiblingAtNextPosition(1);\x0d\n  }\x0d\n\x0d\n  getSiblingAtNextPosition(distance) {\x0d\n    if (this.parent === null)\x0d\n      return null;\x0d\n    const siblings = this.parent.children;\x0d\n    if (!siblings)\x0d\n      throw new Error(`Cant have parent\x2C but parent has the node not as child ` + this.parent.path);\x0d\n    const pageSiblings = siblings.filter(sibling => sibling.type === "page");\x0d\n    const ownIndex = pageSiblings.findIndex(sibling => sibling.path === this.path); //TODO: Rewrite to be less expensive.\x0d\n    const newIndex = ownIndex + distance;\x0d\n    if (newIndex < 0 || newIndex > pageSiblings.length - 1) return null;\x0d\n    return pageSiblings[newIndex];\x0d\n  }\x0d\n\x0d\n  duplicate() {\x0d\n    return new DirTreeNode({\x0d\n      path: this.path\x2C\x0d\n      title: this.title\x2C\x0d\n      extension: this.extension\x2C\x0d\n      source: this.source\x2C\x0d\n      type: this.type\x2C\x0d\n      model: this.model\x2C\x0d\n      absolutePath: this.absolutePath\x2C\x0d\n      children: this.children\x2C\x0d\n      parent: this.parent\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  duplicateWithoutParent() {\x0d\n    // Necessary to prevent cyclic dependency\x0d\n    return new DirTreeNode({\x0d\n      path: this.path\x2C\x0d\n      title: this.title\x2C\x0d\n      extension: this.extension\x2C\x0d\n      source: this.source\x2C\x0d\n      type: this.type\x2C\x0d\n      model: this.model\x2C\x0d\n      absolutePath: this.absolutePath\x2C\x0d\n      children: this.children.map(child => child.duplicateWithoutParent())\x2C\x0d\n      parent: null\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  removeParentRecursively() {\x0d\n    for (const child of this.children)\x0d\n      child.removeParentRecursively();\x0d\n    this.parent = null;\x0d\n  }\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {string} input Dir path with template files \x0d\n * @param {object} models Object where key is model name and value model data.\x0d\n * @param {string[]} subpath Relative starting path\x2C default is []\x0d\n * @returns {DirTreeNode[]}\x0d\n */\x0d\nexport function loadDirAsTree({input\x2C models\x2C subpath = []\x2C parent = null\x2C ignoredFiles = []}) {\x0d\n  // Setup\x0d\n  const nodes = [];\x0d\n  const files = fs.readdirSync(input);\x0d\n  const findNode = (path) => nodes.find(node => node.path === path) ?? null;\x0d\n  const addNode = (path\x2C title\x2C extension\x2C source\x2C type\x2C model\x2C parent) => {\x0d\n    const existingNode = findNode(path);\x0d\n    if (existingNode && existingNode.type === "group") {\x0d\n      existingNode.title = title;\x0d\n      existingNode.extension = extension;\x0d\n      existingNode.source = source;\x0d\n      existingNode.type = type;\x0d\n      existingNode.model = model;\x0d\n      existingNode.parent = parent;\x0d\n      return existingNode;\x0d\n    }\x0d\n    if (existingNode)\x0d\n      throw new Error(`Cannot override existing page type '${existingNode.type}' of '${existingNode.path}'. `);\x0d\n    const newNode = new DirTreeNode({ path\x2C title\x2C extension\x2C source\x2C type\x2C model\x2C children: []\x2C parent });\x0d\n    nodes.push(newNode);\x0d\n    return newNode;\x0d\n  };\x0d\n  // Iterate over files\x0d\n  for (const file of files) {\x0d\n    const filePath = path.join(input\x2C file);\x0d\n    if (ignoredFiles.includes(filePath)) {\x0d\n      console.log(`Skipping '${filePath}'`);\x0d\n      continue;\x0d\n    }\x0d\n    const stats = fs.statSync(filePath);\x0d\n    if (stats.isDirectory()) {\x0d\n      const parentNode = findNode(file) ?? addNode(file\x2C file\x2C ""\x2C filePath\x2C "group"\x2C undefined\x2C parent);\x0d\n      const childNodes = loadDirAsTree({\x0d\n        input: filePath\x2C \x0d\n        models: models\x2C \x0d\n        subpath: [...subpath\x2C file]\x2C \x0d\n        parent: parentNode\x2C\x0d\n        ignoredFiles: ignoredFiles\x2C\x0d\n      });\x0d\n      parentNode.children.push(...childNodes);\x0d\n      continue;\x0d\n    }\x0d\n    const extension = path.extname(filePath);\x0d\n    const basename = path.basename(file\x2C extension);\x0d\n    if (extension === ".hbs") {\x0d\n      const inputSfc = TemplateLoader.readSfc(filePath);\x0d\n      const model = TemplateEngine.getSfcModel(inputSfc);\x0d\n      const templateLinkTitle = TemplateEngine.getSfcLinkTitle(inputSfc);\x0d\n      if (!model) {\x0d\n        addNode(basename\x2C templateLinkTitle\x2C extension\x2C filePath\x2C "page"\x2C undefined\x2C parent);\x0d\n        continue;\x0d\n      }\x0d\n      const payload = models[model];\x0d\n      if (!payload) {\x0d\n        console.warn(`Could not find payload in data for model '${model}'. `);\x0d\n        addNode(basename\x2C templateLinkTitle\x2C extension\x2C filePath\x2C "page"\x2C undefined\x2C parent);\x0d\n        continue;\x0d\n      }\x0d\n      const templateNodes = payload.map(item => item.path);\x0d\n      templateNodes.forEach(target => addNode(target\x2C templateLinkTitle\x2C extension\x2C filePath\x2C "page"\x2C model\x2C parent));\x0d\n      continue;\x0d\n    }\x0d\n    if (extension === ".md") {\x0d\n      const markdownFileContent = fs.readFileSync(filePath\x2C { encoding: "utf-8" });\x0d\n      const { yaml\x2C title } = TemplateLoader.parseMarkdown(markdownFileContent);\x0d\n      const markdownLinkTitle = yaml?.linkTitle ?? title ?? basename;\x0d\n      if (yaml && yaml.hidden) continue;\x0d\n      addNode(basename\x2C markdownLinkTitle\x2C extension\x2C filePath\x2C "page"\x2C undefined\x2C parent);\x0d\n      continue;\x0d\n    }\x0d\n    addNode(basename\x2C basename\x2C extension\x2C filePath\x2C "page"\x2C undefined\x2C parent);\x0d\n  }\x0d\n  return nodes;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {DirTreeNode[]} tree \x0d\n * @returns {DirTreeNode[]}\x0d\n */\x0d\nexport function addAbsolutePathsToDirTree(tree) {\x0d\n  const traverseNode = (node\x2C base = []) => {\x0d\n    const newNode = node.duplicate();\x0d\n    const { path\x2C children } = newNode;\x0d\n    const currentPath = [...base\x2C path];\x0d\n    newNode.absolutePath = currentPath.join("/");\x0d\n    if (!children || children.length < 1)\x0d\n      return newNode;\x0d\n    const newChildren = children.map(child => traverseNode(child\x2C currentPath));\x0d\n    newNode.children = newChildren;\x0d\n    return newNode;\x0d\n  }\x0d\n  return tree.map(node => traverseNode(node));\x0d\n};\x0d\n\x0d\n/**\x0d\n * @typedef {Object} PageChunk\x0d\n * @property {DirTreeNode} page The page entry.\x0d\n * @property {DataChunk} chunk The data chunk.\x0d\n */\x0d\n\x0d\n/**\x0d\n * @callback DirEntryAugmentor\x0d\n * @param {DirTreeNode} node\x0d\n * @param {object} data Actual attached data\x2C object can have any content.\x0d\n * @param {number} index\x0d\n * @param {number} length\x0d\n * @returns {object}\x0d\n */\x0d\n\x0d\n/**\x0d\n * @typedef {Object} DirEntryPayload\x0d\n * @property {string} id Id of the data slice\x2C should be descriptive.\x0d\n * @property {object} payload Actual attached data\x2C object can have any content.\x0d\n * @property {DirEntryAugmentor} [augmentor] Actual attached data\x2C object can have any content.\x0d\n */\x0d\n\x0d\n/**\x0d\n * @param {DirTreeNode} node \x0d\n * @param {DirEntryPayload[]} payloads \x0d\n * @returns {PageChunk[]}\x0d\n */\x0d\nfunction flattenDirNode(node) {\x0d\n  const flattenedEntries = [];\x0d\n  const dataChunk = new DataChunk();\x0d\n  flattenedEntries.push({ page: node\x2C chunk: dataChunk });\x0d\n  for (const child of node.children) {\x0d\n    const childEntries = flattenDirNode(child);\x0d\n    if (childEntries.length > 0)\x0d\n      flattenedEntries.push(...childEntries);\x0d\n  }\x0d\n  return flattenedEntries;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {DirTreeNode} tree \x0d\n * @param {DirEntryPayload[]} payloads \x0d\n * @returns {PageChunk[]}\x0d\n */\x0d\nexport function flattenDirTree(tree\x2C payloads) {\x0d\n  // In the current definition\x2C a tree can have multiple roots.\x0d\n  // So flattenDirNode() returns a list\x2C so we have to reduce the list of lists into a single list.\x0d\n  return tree.map(entry => flattenDirNode(entry\x2C payloads))\x0d\n    .reduce((acc\x2C entries) => acc.concat(entries)\x2C []);\x0d\n}\x0d\n
code-source-info,0x24a76c5470e,151,0,7996,C10O0C37O0C57O0C136O200C140O7996,,
tick,0x7ff6d5f484f8,681017,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
code-creation,Script,10,682179,0x24a76c5655e,127, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-writer.js:1:1,0x24a76c55870,~
script-source,152,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-writer.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport { AsyncQueue\x2C promisify } from './async.js';\x0d\nimport TemplateEngine from './template-engine.js';\x0d\nimport TemplateLoader from './template-loader.js';\x0d\nimport { ensureDirExists } from './filesystem.js';\x0d\nimport { getMd5Checksum } from './crypto.js';\x0d\nimport FileCache from './file-cache.js';\x0d\nimport { interpolateString } from './string.js';\x0d\nimport { DataChunk } from './data-chunk.js';\x0d\n\x0d\nexport default class TemplateWriter {\x0d\n  constructor({ partialsDir = undefined\x2C layoutsDir = "layouts" }) {\x0d\n    this.partialsDir = partialsDir;\x0d\n    this.layoutsDir = layoutsDir;\x0d\n    this.engine = null;\x0d\n    this.queue = [];\x0d\n    this.layouts = new Map();\x0d\n  }\x0d\n\x0d\n  async load() {\x0d\n    const partials = this.partialsDir\x0d\n      ? await TemplateLoader.readPartialsInDir(this.partialsDir)\x0d\n      : [];\x0d\n    this.engine = new TemplateEngine({\x0d\n      partials: partials\x2C\x0d\n    });\x0d\n    this.loadLayouts();\x0d\n  }\x0d\n\x0d\n  loadLayouts() {\x0d\n    const layoutEntries = fs.readdirSync(this.layoutsDir);\x0d\n    for (const file of layoutEntries) {\x0d\n      const filePath = path.join(this.layoutsDir\x2C file);\x0d\n      const stat = fs.statSync(filePath);\x0d\n      if (stat.isDirectory()) continue;\x0d\n      if (path.extname(file) !== '.hbs') continue;\x0d\n      const basename = path.basename(file\x2C ".hbs");\x0d\n      const content = fs.readFileSync(filePath\x2C { encoding: "utf8" });\x0d\n      this.layouts.set(basename\x2C content);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  async executeFile(filePath\x2C dataChunk) {\x0d\n    const content = fs.readFileSync(filePath\x2C { encoding: "utf8" });\x0d\n    const extension = path.extname(filePath);\x0d\n    return await this.executeEntry(content\x2C extension\x2C dataChunk);\x0d\n  }\x0d\n\x0d\n  async executeEntry(source\x2C extension\x2C dataChunk) {\x0d\n    if (extension === ".md") {\x0d\n      const inputMarkdown = TemplateLoader.parseMarkdown(source);\x0d\n      const { yaml\x2C title: markdownTitle } = inputMarkdown;\x0d\n      // Title gets overwritten if also specified in YAML because destructuring order.\x0d\n      return { title: markdownTitle\x2C ...yaml }; \x0d\n    }\x0d\n    if (extension === ".hbs") {\x0d\n      const inputSfc = TemplateLoader.parseSfc(source);\x0d\n      const preparedSfc = await TemplateEngine.prepareSfc({\x0d\n        html: inputSfc.html\x2C\x0d\n        style: inputSfc.style\x2C\x0d\n        script: inputSfc.script\x2C\x0d\n        dataChunk: dataChunk\x2C\x0d\n        dataSliceName: "module"\x2C\x0d\n      });\x0d\n      return preparedSfc.dataChunk.flatten();\x0d\n    }\x0d\n    throw new Error(`Unsupported entry type '${extension}'`);\x0d\n  }\x0d\n\x0d\n  async compileSfc({ input\x2C dataChunk\x2C previousLayout = null }) {\x0d\n    const inputSfc = TemplateLoader.parseSfc(input);\x0d\n    const preparedSfc = await TemplateEngine.prepareSfc({\x0d\n      html: inputSfc.html\x2C\x0d\n      style: inputSfc.style\x2C\x0d\n      script: inputSfc.script\x2C\x0d\n      dataChunk: dataChunk\x2C\x0d\n      dataSliceName: "module"\x2C\x0d\n    });\x0d\n    const { html\x2C style\x2C layout\x2C dataChunk: preparedDataChunk } = preparedSfc;\x0d\n    if (layout === previousLayout)\x0d\n      throw new Error(`Aborting because endless layout loop '${layout}'`);\x0d\n    const currentLayout = layout;\x0d\n    // Compile template content for slots\x2C otherwise when we do it later the context (provided data) is wrong.\x0d\n    const slotsSlice = preparedDataChunk.getSlice("slots")?.payload;\x0d\n    if (slotsSlice)\x0d\n      for (const template of slotsSlice.templates)\x0d\n        template.content = this.engine.process(template.content\x2C preparedDataChunk.flatten());\x0d\n    // You HAVE to provide a layout for all pages\x2C even if it's the default layout.\x0d\n    // The benefit with this approach is\x2C that virtually any SFC (page or not) can have a layout.\x0d\n    // Probably should be renamed to "extends" and not "layout".\x0d\n    const renderedHtml = this.engine.process(html\x2C preparedDataChunk.flatten());\x0d\n    if (!layout)\x0d\n      return renderedHtml;\x0d\n    preparedDataChunk.addPayload("sfc"\x2C { content: renderedHtml\x2C style });\x0d\n    const layoutRaw = this.layouts.get(layout);\x0d\n    if (!layoutRaw)\x0d\n      throw new Error(`Unknown layout '${layout}' in SFC. `);\x0d\n    return await this.compileSfc({\x0d\n      input: layoutRaw\x2C\x0d\n      dataChunk: preparedDataChunk\x2C\x0d\n      previousLayout: currentLayout\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  async compileMarkdown({ input\x2C dataChunk\x2C defaultLayout = "blog"\x2C middleware = [] }) {\x0d\n    const inputMarkdown = TemplateLoader.parseMarkdown(input);\x0d\n    const { yaml\x2C html: template\x2C markdown\x2C title: rawtitle } = inputMarkdown;\x0d\n    const titleFormat = dataChunk.flatten().titleTemplate;\x0d\n    const title = titleFormat ? interpolateString(titleFormat\x2C { title: rawtitle }) : rawtitle;\x0d\n    const preparedDataChunk = dataChunk.duplicate();\x0d\n    preparedDataChunk.addPayload("md-title"\x2C { title });\x0d\n    const renderedHtml = this.engine.process(template\x2C preparedDataChunk.flatten());\x0d\n    preparedDataChunk.addPayload("md-sfc"\x2C { ...yaml\x2C content: renderedHtml });\x0d\n    // Markdown documents have an optional default layout\x0d\n    const layout = yaml?.layout ?? defaultLayout;\x0d\n    const layoutRaw = this.layouts.get(layout);\x0d\n    if (!layoutRaw)\x0d\n      throw new Error(`Unknown layout '${layout}' in Markdown document. `);\x0d\n    const renderedTemplate = await this.compileSfc({\x0d\n      input: layoutRaw\x2C\x0d\n      dataChunk: preparedDataChunk\x2C\x0d\n    });\x0d\n    return middleware.length > 0\x0d\n      ? middleware.reduce((result\x2C currentFunction) => currentFunction(result)\x2C renderedTemplate)\x0d\n      : renderedTemplate;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {Object} options\x0d\n   * @param {string} options.source SFC string input\x0d\n   * @param {string} options.target file path output\x0d\n   * @param {string} options.extension\x0d\n   * @param {DataChunk} options.dataChunk\x0d\n   * @param {string} [options.checksum] MD5 hash\x0d\n   * @param {boolean} [options.silent]\x0d\n   * @returns {string} MD5 hash\x0d\n   */\x0d\n  async writeEntry({ source\x2C target\x2C extension\x2C dataChunk\x2C checksum = undefined\x2C silent = false }) {\x0d\n    const html = await this.compileEntry(source\x2C extension\x2C dataChunk);\x0d\n    const htmlChecksum = getMd5Checksum(html);\x0d\n    // Do not write to file if checksum is provided AND it is the same as the previous run.\x0d\n    if (htmlChecksum === checksum)\x0d\n      return htmlChecksum;\x0d\n    fs.writeFileSync(target\x2C html);\x0d\n    if (!silent)\x0d\n      console.log(`Compiled ${extension} file to '${target}'. `);\x0d\n    return htmlChecksum;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * \x0d\n   * @param {object} options \x0d\n   * @param {import('./dir-tree.js').PageChunk[]} options.queue \x0d\n   * @param {string} options.output\x0d\n   * @param {string} [options.cachePath] path to cache file\x0d\n   * @param {boolean} [options.silent] \x0d\n  */\x0d\n  async readAndWriteQueue({ queue\x2C output\x2C cachePath = null\x2C silent = false }) {\x0d\n    const entryCache = new FileCache();\x0d\n    const outputCache = new FileCache();\x0d\n    if (cachePath) entryCache.loadSafely(cachePath);\x0d\n    for (const entry of queue) {\x0d\n\x0d\n      // Read in input\x0d\n      const { page\x2C chunk } = entry;\x0d\n      const { source: inputPath\x2C absolutePath: pagePath\x2C type: pageType } = page;\x0d\n      if (pageType !== "page") continue;\x0d\n      //if (pagePath !== "art/kageki-creampie")\x0d\n      //  continue;\x0d\n      const input = fs.readFileSync(inputPath\x2C { encoding: "utf8" });\x0d\n\x0d\n      // Compile file\x0d\n      const extension = path.extname(inputPath);\x0d\n      let html = "";\x0d\n      try {\x0d\n        html = await this.compileEntry(input\x2C extension\x2C chunk);\x0d\n      } catch (error) {\x0d\n        console.error(page.absolutePath); // problems with circular references\x0d\n        throw error;\x0d\n      }\x0d\n\x0d\n      // TODO: fix memory getting higher and higher with more pages\x0d\n\x0d\n      // Write output (when using caching\x2C only write when changed)\x0d\n      const outputPath = path.join(output\x2C ...pagePath.split("/")) + ".html";\x0d\n      if (cachePath) {\x0d\n        const oldFileChecksum = entryCache.get(outputPath);\x0d\n        const newFileChecksum = getMd5Checksum(html);\x0d\n        outputCache.add([outputPath\x2C newFileChecksum]);\x0d\n        if (oldFileChecksum === newFileChecksum && fs.existsSync(outputPath))\x0d\n          continue;\x0d\n      }\x0d\n      fs.writeFileSync(outputPath\x2C html);\x0d\n      if (!silent)\x0d\n        console.log(`Compiled '${inputPath}' to '${outputPath}'. `);\x0d\n    }\x0d\n    if (cachePath) {\x0d\n      outputCache.flush(cachePath);\x0d\n      const entryCacheString = JSON.stringify(entryCache.flatten());\x0d\n      const outputCacheString = JSON.stringify(outputCache.flatten());\x0d\n      if ((entryCacheString === outputCacheString) && !silent)\x0d\n        console.log("No changes detected in generated HTML. ");\x0d\n    }\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @param {string} source template string of SFC\x2C markdown document\x2C etc.\x0d\n   * @param {string} extension determines how to handle the specified template string\x0d\n   * @param {DataChunk} dataChunk data that gets inserted into the template string\x0d\n   * @returns {string} HTML string\x0d\n   */\x0d\n  async compileEntry(source\x2C extension\x2C dataChunk) {\x0d\n    const duplicatedChunk = dataChunk.duplicate(); // duplicate to prevent side effects\x0d\n    if (extension === ".md") {\x0d\n      return await this.compileMarkdown({\x0d\n        input: source\x2C\x0d\n        dataChunk: duplicatedChunk\x2C\x0d\n        middleware: [\x0d\n          (rawHtml) => TemplateEngine.addAnchorsToHeadings(rawHtml)\x2C\x0d\n        ]\x2C\x0d\n      });\x0d\n    }\x0d\n    if (extension === ".hbs")\x0d\n      return await this.compileSfc({\x0d\n        input: source\x2C\x0d\n        dataChunk: duplicatedChunk\x2C\x0d\n      });\x0d\n    throw new Error(`Unsupported entry type '${extension}'`);\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x24a76c5655e,152,0,9336,C10O0C28O0C48O0C121O459C126O9336,,
code-creation,LazyCompile,13,684577,0x246eeef3ea0,1724,getPathFromURLWin32 node:internal/url:1376:29,0xb0b6eb9f88,*
code-source-info,0x246eeef3ea0,39,38422,39825,C0O38422C48O38454C82O24131I0C86O24141I0C169O18713I2C173O24984I1C187O25018I1C191O25022I1C196O25040I1C200O25045I1C220O25052I1C234O25093I1C352O38560C384O38517C448O38560C648O38564C657O38537C661O38499C676O38918C736O38980C807O39026C825O39436C830O39618C834O39572C884O39618C1154O39587C1161O39637C1170O39666C1179O39715C1189O39813C1248O39822C1275O39738C1280O38619C1285O38422C1340O24141I0C1384O38560C1465O38499C1554O39618C1606O39822,F0O38454F1O38486F2O24984I1,S0xb0b6eb95f8S0xb0b6eb97a8S0xb0b6eb8fb8
code-creation,Function,11,690280,0x246eeef4660,2132,getFileProtocolModuleFormat node:internal/modules/esm/get_format:50:37,0x64be90ac28,^
code-source-info,0x246eeef4660,115,1542,2876,,,
code-creation,Function,11,690386,0x246eeef4f20,372,validateDecoder node:internal/encoding:68:25,0xb0b6e93dd8,^
code-source-info,0x246eeef4f20,27,1416,1520,,,
code-creation,Function,11,690455,0x246eeef5100,1416,checkIfDisallowedImport node:internal/modules/esm/resolve:957:33,0x64be906290,^
code-source-info,0x246eeef5100,113,32614,33812,,,
code-creation,Function,11,690620,0x246eeef5700,812,throwIfUnsupportedURLScheme node:internal/modules/esm/resolve:1004:37,0x64be906330,^
code-source-info,0x246eeef5700,113,34059,34530,,,
code-creation,Function,4,691279,0x2686c5019e0,800,wasm-function[16],0x246eaeb81e0,
code-creation,Function,4,691319,0x2686c501d00,192,wasm-function[32],0x246eaeb81f0,
code-creation,Function,4,691338,0x2686c501dc0,960,wasm-function[31],0x246eaeb81ef,
code-creation,Function,4,691356,0x2686c502180,640,wasm-function[30],0x246eaeb81ee,
code-creation,Function,4,691373,0x2686c502400,128,wasm-function[29],0x246eaeb81ed,
code-creation,Function,4,691391,0x2686c502480,544,wasm-function[28],0x246eaeb81ec,
code-creation,Function,4,691408,0x2686c5026a0,480,wasm-function[27],0x246eaeb81eb,
code-creation,Function,4,691426,0x2686c502880,1696,wasm-function[26],0x246eaeb81ea,
code-creation,Function,4,691444,0x2686c502f20,608,wasm-function[25],0x246eaeb81e9,
code-creation,Function,4,691461,0x2686c503180,224,wasm-function[24],0x246eaeb81e8,
code-creation,Function,4,691479,0x2686c503260,352,wasm-function[23],0x246eaeb81e7,
code-creation,Function,4,691496,0x2686c5033c0,320,wasm-function[22],0x246eaeb81e6,
code-creation,Function,4,691514,0x2686c503500,320,wasm-function[21],0x246eaeb81e5,
code-creation,Function,4,691531,0x2686c503640,416,wasm-function[19],0x246eaeb81e3,
code-creation,Function,4,691548,0x2686c5037e0,1248,wasm-function[18],0x246eaeb81e2,
code-creation,Function,4,691566,0x2686c503cc0,160,wasm-function[17],0x246eaeb81e1,
code-creation,Function,4,691584,0x2686c503d60,832,wasm-function[50],0x246eaeb8202,
code-creation,Function,4,691601,0x2686c5040a0,352,wasm-function[65],0x246eaeb8211,
code-creation,Function,4,691618,0x2686c504200,448,wasm-function[64],0x246eaeb8210,
code-creation,Function,4,691636,0x2686c5043c0,256,wasm-function[63],0x246eaeb820f,
code-creation,Function,4,691653,0x2686c5044c0,192,wasm-function[62],0x246eaeb820e,
code-creation,Function,4,691671,0x2686c504580,672,wasm-function[61],0x246eaeb820d,
code-creation,Function,4,691688,0x2686c504820,12320,wasm-function[60],0x246eaeb820c,
code-creation,Function,4,691705,0x2686c507840,352,wasm-function[59],0x246eaeb820b,
code-creation,Function,4,691723,0x2686c5079a0,352,wasm-function[58],0x246eaeb820a,
code-creation,Function,4,691740,0x2686c507b00,9952,wasm-function[57],0x246eaeb8209,
code-creation,Function,4,691758,0x2686c50a1e0,384,wasm-function[56],0x246eaeb8208,
code-creation,Function,4,691775,0x2686c50a360,288,wasm-function[55],0x246eaeb8207,
code-creation,Function,4,691792,0x2686c50a480,352,wasm-function[54],0x246eaeb8206,
code-creation,Function,4,691810,0x2686c50a5e0,480,wasm-function[53],0x246eaeb8205,
code-creation,Function,4,691827,0x2686c50a7c0,320,wasm-function[52],0x246eaeb8204,
code-creation,Function,4,691845,0x2686c50a900,1184,wasm-function[51],0x246eaeb8203,
code-creation,Function,4,691863,0x2686c50ada0,288,wasm-function[12],0x246eaeb81dc,
code-creation,Function,4,691880,0x2686c50aec0,6208,wasm-function[15],0x246eaeb81df,
code-creation,Function,4,691898,0x2686c50c700,96,wasm-function[14],0x246eaeb81de,
code-creation,Function,4,691915,0x2686c50c760,288,wasm-function[13],0x246eaeb81dd,
code-creation,Function,4,691932,0x2686c50c880,128,wasm-function[4],0x246eaeb81d4,
code-creation,Function,4,691950,0x2686c50c900,128,wasm-function[7],0x246eaeb81d7,
code-creation,Function,4,691967,0x2686c50c980,128,wasm-function[6],0x246eaeb81d6,
code-creation,Function,4,691984,0x2686c50ca00,128,wasm-function[5],0x246eaeb81d5,
code-creation,Function,4,692002,0x2686c50ca80,288,wasm-function[42],0x246eaeb81fa,
code-creation,Function,4,692020,0x2686c50cba0,736,wasm-function[49],0x246eaeb8201,
code-creation,Function,4,692037,0x2686c50ce80,416,wasm-function[48],0x246eaeb8200,
code-creation,Function,4,692055,0x2686c50d020,1024,wasm-function[47],0x246eaeb81ff,
code-creation,Function,4,692073,0x2686c50d420,1376,wasm-function[46],0x246eaeb81fe,
code-creation,Function,4,692090,0x2686c50d980,416,wasm-function[45],0x246eaeb81fd,
code-creation,Function,4,692107,0x2686c50db20,544,wasm-function[44],0x246eaeb81fc,
code-creation,Function,4,692125,0x2686c50dd40,352,wasm-function[43],0x246eaeb81fb,
code-creation,Function,4,692233,0x2686c50dea0,11808,wasm-function[20],0x246eaeb81e4,
code-creation,Function,4,692257,0x2686c510cc0,512,wasm-function[38],0x246eaeb81f6,
code-creation,Function,4,692275,0x2686c510ec0,352,wasm-function[41],0x246eaeb81f9,
code-creation,Function,4,692293,0x2686c511020,224,wasm-function[40],0x246eaeb81f8,
code-creation,Function,4,692316,0x2686c511100,416,wasm-function[39],0x246eaeb81f7,
code-creation,Function,4,692333,0x2686c5112a0,192,wasm-function[37],0x246eaeb81f5,
code-creation,Function,4,692351,0x2686c511360,160,wasm-function[9],0x246eaeb81d9,
code-creation,Function,4,692368,0x2686c511400,96,wasm-function[1],0x246eaeb81d1,
code-creation,Function,4,692385,0x2686c511460,576,wasm-function[35],0x246eaeb81f3,
code-creation,Function,4,692403,0x2686c5116a0,160,wasm-function[10],0x246eaeb81da,
code-creation,Function,4,692420,0x2686c511740,288,wasm-function[11],0x246eaeb81db,
code-creation,Function,4,692438,0x2686c511860,128,wasm-function[2],0x246eaeb81d2,
code-creation,Function,4,692455,0x2686c5118e0,128,wasm-function[3],0x246eaeb81d3,
code-creation,Function,4,692472,0x2686c511960,512,wasm-function[36],0x246eaeb81f4,
code-creation,Function,4,692489,0x2686c511b60,224,wasm-function[0],0x246eaeb81d0,
code-creation,Function,4,692507,0x2686c511c40,1696,wasm-function[34],0x246eaeb81f2,
code-creation,Function,4,692524,0x2686c5122e0,160,wasm-function[8],0x246eaeb81d8,
code-creation,Function,4,692541,0x2686c512380,288,wasm-function[33],0x246eaeb81f1,
code-creation,Function,4,692558,0x2686c5124a0,256,wasm-function[33],0x246eaeb81f1,*
code-creation,Function,4,692576,0x2686c5125a0,256,wasm-function[41],0x246eaeb81f9,*
code-creation,Function,4,692593,0x2686c5126a0,160,wasm-function[40],0x246eaeb81f8,*
code-creation,Function,4,692610,0x2686c512740,384,wasm-function[39],0x246eaeb81f7,*
code-creation,Function,4,692628,0x2686c5128c0,288,wasm-function[38],0x246eaeb81f6,*
code-creation,Function,4,692645,0x2686c5129e0,160,wasm-function[37],0x246eaeb81f5,*
code-creation,Function,4,692662,0x2686c512a80,352,wasm-function[36],0x246eaeb81f4,*
code-creation,Function,4,692680,0x2686c512be0,320,wasm-function[35],0x246eaeb81f3,*
code-creation,Function,4,692697,0x2686c512d20,928,wasm-function[34],0x246eaeb81f2,*
code-creation,Function,4,692715,0x2686c5130c0,1088,wasm-function[46],0x246eaeb81fe,*
code-creation,Function,4,692732,0x2686c513500,416,wasm-function[49],0x246eaeb8201,*
code-creation,Function,4,692749,0x2686c5136a0,352,wasm-function[48],0x246eaeb8200,*
code-creation,Function,4,692767,0x2686c513800,576,wasm-function[47],0x246eaeb81ff,*
code-creation,Function,4,692784,0x2686c513a40,288,wasm-function[58],0x246eaeb820a,*
code-creation,Function,4,692802,0x2686c513b60,256,wasm-function[65],0x246eaeb8211,*
code-creation,Function,4,692819,0x2686c513c60,416,wasm-function[64],0x246eaeb8210,*
code-creation,Function,4,692836,0x2686c513e00,448,wasm-function[50],0x246eaeb8202,*
code-creation,Function,4,692853,0x2686c513fc0,288,wasm-function[53],0x246eaeb8205,*
code-creation,Function,4,692871,0x2686c5140e0,256,wasm-function[52],0x246eaeb8204,*
code-creation,Function,4,692889,0x2686c5141e0,992,wasm-function[51],0x246eaeb8203,*
code-creation,Function,4,692906,0x2686c5145c0,640,wasm-function[16],0x246eaeb81e0,*
code-creation,Function,4,692923,0x2686c514840,160,wasm-function[32],0x246eaeb81f0,*
code-creation,Function,4,692941,0x2686c5148e0,768,wasm-function[31],0x246eaeb81ef,*
code-creation,Function,4,692958,0x2686c514be0,512,wasm-function[30],0x246eaeb81ee,*
code-creation,Function,4,692976,0x2686c514de0,96,wasm-function[29],0x246eaeb81ed,*
code-creation,Function,4,692993,0x2686c514e40,480,wasm-function[28],0x246eaeb81ec,*
code-creation,Function,4,693011,0x2686c515020,416,wasm-function[27],0x246eaeb81eb,*
code-creation,Function,4,693028,0x2686c5151c0,1184,wasm-function[26],0x246eaeb81ea,*
code-creation,Function,4,693045,0x2686c515660,448,wasm-function[25],0x246eaeb81e9,*
code-creation,Function,4,693063,0x2686c515820,192,wasm-function[24],0x246eaeb81e8,*
code-creation,Function,4,693080,0x2686c5158e0,224,wasm-function[23],0x246eaeb81e7,*
code-creation,Function,4,693165,0x2686c5159c0,256,wasm-function[22],0x246eaeb81e6,*
code-creation,Function,4,693188,0x2686c515ac0,288,wasm-function[21],0x246eaeb81e5,*
code-creation,Function,4,693206,0x2686c515be0,256,wasm-function[19],0x246eaeb81e3,*
code-creation,Function,4,693223,0x2686c515ce0,192,wasm-function[42],0x246eaeb81fa,*
code-creation,Function,4,693241,0x2686c515da0,384,wasm-function[45],0x246eaeb81fd,*
code-creation,Function,4,693258,0x2686c515f20,320,wasm-function[44],0x246eaeb81fc,*
code-creation,Function,4,693275,0x2686c516060,256,wasm-function[43],0x246eaeb81fb,*
code-creation,Function,4,693293,0x2686c516160,256,wasm-function[54],0x246eaeb8206,*
code-creation,Function,4,693315,0x2686c516260,5056,wasm-function[57],0x246eaeb8209,*
code-creation,Function,4,693384,0x2686c517620,192,wasm-function[55],0x246eaeb8207,*
code-creation,Function,4,693407,0x2686c5176e0,96,wasm-function[4],0x246eaeb81d4,*
code-creation,Function,4,693425,0x2686c517740,96,wasm-function[7],0x246eaeb81d7,*
code-creation,Function,4,693443,0x2686c5177a0,96,wasm-function[6],0x246eaeb81d6,*
code-creation,Function,4,693460,0x2686c517800,96,wasm-function[5],0x246eaeb81d5,*
code-creation,Function,4,693478,0x2686c517860,128,wasm-function[10],0x246eaeb81da,*
code-creation,Function,4,693495,0x2686c5178e0,192,wasm-function[11],0x246eaeb81db,*
code-creation,Function,4,693512,0x2686c5179a0,64,wasm-function[14],0x246eaeb81de,*
code-creation,Function,4,693530,0x2686c5179e0,1152,wasm-function[18],0x246eaeb81e2,*
code-creation,Function,4,693547,0x2686c517e60,128,wasm-function[17],0x246eaeb81e1,*
code-creation,Function,4,693565,0x2686c517ee0,256,wasm-function[56],0x246eaeb8208,*
code-creation,Function,4,693582,0x2686c517fe0,192,wasm-function[12],0x246eaeb81dc,*
code-creation,Function,4,693600,0x2686c5180a0,192,wasm-function[13],0x246eaeb81dd,*
code-creation,Function,4,693617,0x2686c518160,32,wasm-function[1],0x246eaeb81d1,*
code-creation,Function,4,693635,0x2686c518180,128,wasm-function[9],0x246eaeb81d9,*
code-creation,Function,4,693714,0x2686c518200,96,wasm-function[2],0x246eaeb81d2,*
code-creation,Function,4,693739,0x2686c518260,96,wasm-function[3],0x246eaeb81d3,*
code-creation,Function,4,693757,0x2686c5182c0,192,wasm-function[0],0x246eaeb81d0,*
tick,0x7ff81324d664,693776,0,0x0,6
code-creation,Function,4,693813,0x2686c518380,10912,wasm-function[20],0x246eaeb81e4,*
code-creation,Function,4,693840,0x2686c51ae20,160,wasm-function[63],0x246eaeb820f,*
code-creation,Function,4,693858,0x2686c51aec0,128,wasm-function[62],0x246eaeb820e,*
code-creation,Function,4,693876,0x2686c51af40,352,wasm-function[61],0x246eaeb820d,*
code-creation,Function,4,693894,0x2686c51b0a0,5888,wasm-function[60],0x246eaeb820c,*
code-creation,Function,4,693912,0x2686c51c7a0,288,wasm-function[59],0x246eaeb820b,*
code-creation,Function,4,693929,0x2686c51c8c0,128,wasm-function[8],0x246eaeb81d8,*
code-creation,Function,4,693947,0x2686c51c940,4608,wasm-function[15],0x246eaeb81df,*
code-creation,LazyCompile,10,695312,0x24a76c5918e,403,cjsPreparseModuleExports node:internal/modules/esm/translators:193:34,0x64be93b5e8,~
code-source-info,0x24a76c5918e
code-creation,LazyCompile,10,695583,0x24a76c595d6,194,Module node:internal/modules/cjs/loader:214:16,0x2f2f3a33b58,~
code-source-info,0x24a76c595d6,106,6424,7033,C14O6447C16O6455C20O6464C22O6476C25O6481C30O6481C35O6474C39O6497C52O6497C57O6537C62O6555C67O6555C73O6577C84O6577C89O6617C90O6631C94O6642C95O6654C99O6666C101O6680C105O6693C107O6707C114O6717C123O6754C128O6754C133O6778C138O6797C143O6806C148O6806C154O6904C164O6936C167O6936C176O6904C181O6983C183O6988C188O7012C193O7032,,
code-creation,LazyCompile,10,695963,0x24a76c59846,449,dirname node:path:653:10,0x32ebb7cd748,~
code-source-info,0x24a76c
code-creation,LazyCompile,10,696216,0x24a76c59c56,28,setOwnProperty node:internal/util:548:24,0x2392d46fd0,~
code-source-info,0x24a76c59c56,15,15745,15920,C0O15768C5O15801C12O15883C22O15775C27O15917,,
code-creation,LazyCompile,10,696339,0x24a76c59d66,45,updateChildren node:internal/modules/cjs/loader:201:24,0x2f2f3a33ab8,~
code-source-info,0x24a76c59d66,106,6022,6199,C0O6066C7O6072C15O6087C19O6105C23O6113C26O6113C33O6160C38O6160C44O6198,,
code-creation,LazyCompile,10,696534,0x24a76c59f36,251,Module._nodeModulePaths node:internal/modules/cjs/loader:655:37,0x2f2f3a34788,~
code-source-info,0x24a76c59f36,106,19706,21257,C0O19763C5O19775C10O19775C17O20115C22O20156C26O20163C30O20119C38O20183C40O20168C47O20215C50O20252C54O20259C58O20215C66O20268C68O20264C73O20287C82O20300C91O20318C92O20340C95O20367C99O20374C103O20383C105O20398C110O20408C111O20408C116O20441C121O20441C127O20780C129O20793C131O20789C138O20836C140O20832C147O20878C149O20874C154O20901C156O20911C158O20907C163O20929C170O20982C181O20982C189O21018C193O20929C198O21060C201O21079C205O21100C207O21106C212O21125C219O21136C225O21140C230O21163C237O21197C240O20416C245O20349C248O21239C250O21252,,
code-creation,LazyCompile,10,696865,0x24a76c5a3ae,376,readFileSync node:fs:455:22,0x6414e97958,~
code-source-info,0x24a76c5a3ae
code-creation,LazyCompile,10,697078,0x24a76c5a6ce,30,isEncoding node:buffer:535:40,0x2392d7dc88,~
code-source-info,0x24a76c5a6ce,24,15447,15582,C0O15463C6O15511C12O15518C20O15537C23O15537C28O15565C29O15579,,
code-creation,LazyCompile,10,697168,0x24a76c5a7d6,30,normalizeEncoding node:internal/util:163:27,0x2392d46600,~
code-source-info,0x24a76c5a7d6,15,4435,4543,C0O4446C7O4469C14O4487C19O4500C21O4514C22O4518C25O4525C29O4540,,
code-creation,LazyCompile,10,697254,0x24a76c5a8de,9,isUint32 node:internal/validators:50:18,0x2392d4a9d0,~
code-source-info,0x24a76c5a8de,16,993,1040,C0O1006C2O1030C5O1019C8O1037,,
code-creation,LazyCompile,10,697369,0x24a76c5aa36,113,openSync node:fs:581:18,0x6414e97b40,~
code-source-info,0x24a76c5aa36,83,15070,15460,C0O15095C5O15102C11O15149C16O15149C21O15174C37O15181C44O15234C51O15236C58O15262C63O15270C70O15275C73O15286C78O15286C95O15270C101O15411C106O15411C110O15443C112O15457,,
tick,0x7ff81324e004,709825,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x7ff6d6643c13
code-creation,LazyCompile,10,711685,0x24a76c5abf6,66,tryStatSync node:fs:409:21,0x6414e97868,~
code-source-info,0x24a76c5abf6,83,10802,11020,C0O10834C2O10855C7O10863C22O10863C28O10908C36O10932C38O10949C43O10952C48O10952C53O10972C58O10978C62O10972C63O11004C65O11017,,
code-creation,LazyCompile,10,711892,0x24a76c5ad6e,96,tryCreateBuffer node:fs:419:25,0x6414e978b8,~
code-source-info,0x24a76c5ad6e,83,11048,11348,C0O11086C2O11099C7O11121C9O11132C11O11130C16O11155C23O11161C28O11155C29O11206C34O11222C39O11222C45O11246C57O11252C58O11281C65O11295C67O11305C72O11308C77O11308C93O11331C95O11345,,
code-creation,LazyCompile,10,711995,0x24a76c5aec6,17,allocUnsafe node:buffer:378:42,0x2392d7d800,~
code-source-info,0x24a76c5aec6,24,11387,11445,C0O11399C5O11399C9O11420C12O11427C16O11442,,
code-creation,LazyCompile,10,712115,0x24a76c5afce,119,allocate node:buffer:403:18,0x2392d7d950,~
code-source-info,0x24a76c5afce,24,12114,12442,C0O12126C1O12135C6O12148C11O12155C16O12172C17O12181C20O12200C24O12209C27O12190C32O12224C34O12236C39O12247C41O12245C44O12233C49O12267C52O12267C55O12296C62O12311C67O12322C75O12296C81O12346C88O12360C94O12357C100O12371C103O12371C106O12389C108O12398C109O12407C114O12414C118O12439,,
code-creation,LazyCompile,10,712262,0x24a76c5b18e,86,tryReadSync node:fs:434:21,0x6414e97908,~
code-source-info,0x24a76c5b18e,83,11372,11617,C0O11422C2O11435C7O11460C12O11475C29O11475C35O11512C47O11518C48O11547C55O11561C57O11571C62O11574C67O11574C83O11597C85O11614,,
code-creation,LazyCompile,10,712433,0x24a76c5b37e,251,readSync node:fs:695:18,0x6414e97c10,~
code-source-info,0x24a76c5b37e,83,18249,19278,C0O18249C2O18293C7O18298C13O18323C18O18323C22O18366C29O18373C34O18450C40O18460C43O18491C55O18510C61O18526C68O18537C73O18554C82O18600C87O18627C92O18656C105O18656C110O18704C117O18722C118O18733C123O18747C124O18756C125O18778C131O18789C136O18803C152O18809C157O18803C158O18935C163O18983C174O18935C179O19001C184O19028C188O19048C196O19048C201O19105C203O19127C208O19135C233O19135C239O19229C244O19229C248O19261C250O19275,,
code-creation,LazyCompile,10,712577,0x24a76c5b5e6,52, node:internal/fs/utils:689:40,0x6414ea2d18,~
code-source-info,0x24a76c5b5e6,84,19393,19522,C14O19423C22O19427C29O19452C30O19461C31O19472C44O19472C49O19509C51O19519,,
code-creation,LazyCompile,10,712676,0x24a76c5b756,51, node:internal/validators:329:40,0x2392d4af80,~
code-source-info,0x24a76c5b756,16,8942,9178,C14O8976C19O8981C25O9015C30O9046C43O9021C48O9015C50O9177,,
code-creation,LazyCompile,10,712785,0x24a76c5b8ae,151, node:internal/validators:93:3,0x2392d4aaa8,~
code-source-info,0x24a76c5b8ae,16,2262,2650,C12O2282C25O2312C32O2346C38O2384C54O2390C59O2384C60O2444C65O2449C71O2480C87O2486C92O2480C93O2540C95O2550C102O2565C107O2579C117O2618C130O2631C143O2585C148O2579C150O2649,,
code-creation,LazyCompile,10,712918,0x24a76c5ba9e,103, node:internal/fs/utils:639:3,0x6414ea2bd8,~
code-source-info,0x24a76c5ba9e,84,17967,18357,C0O18008C1O18019C6O18033C22O18039C27O18033C28O18099C29O18110C34O18124C50O18130C55O18124C56O18190C58O18201C64O18210C69O18235C82O18325C95O18241C100O18235C102O18356,,
code-creation,LazyCompile,10,713059,0x24a76c5bd9e,148, node:internal/fs/utils:904:42,0x6414ea3088,~
code-source-info,0x24a76c5bd9e,84,25452,25934,C0O25477C6O25518C11O25518C18O25561C24O25602C29O25625C32O25620C34O25617C44O25651C50O25658C53O25645C58O25674C71O25752C74O25747C92O25772C98O25779C114O25680C119O25674C122O25856C127O25887C140O25862C145O25856C147O25933,,
code-creation,LazyCompile,10,713303,0x24a76c5bf9e,47,closeSync node:fs:531:19,0x6414e97a68,~
code-source-info,0x24a76c5bf9e,83,13889,14017,C0O13899C5O13904C11O13941C13O13948C18O13956C31O13956C36O13986C41O13986C46O14016,,
code-creation,LazyCompile,10,713512,0x24a76c5c0ce,12,slice node:buffer:599:12,0x2392d7dea8,~
code-source-info,0x24a76c5c0ce,24,17339,17385,C0O17364C5O17364C11O17385,,
code-creation,LazyCompile,10,713779,0x24a76c5c3ee,772,parse node:internal/deps/cjs-module-lexer/dist/lexer:1:131,0x65ec1f1170,~
code-source-info,0x24a76c5c3ee
code-creation,LazyCompile,10,714078,0x24a76c5c94e,44,C node:internal/deps/cjs-module-lexer/dist/lexer:1:1152,0x65ec1f1260,~
code-source-info,0x24a76c5c94e,137,1151,1215,C0O1167C5O1180C7O1188C9O1188C14O1199C30O1199C35O1196C39O1182C43O1214,,
tick,0x7ff81324e004,725434,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x7ff6d6643c13
code-creation,Script,10,731612,0x24a76c5d79e,185, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/rollup.config.js:1:1,0x24a76c5cf08,~
script-source,154,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/rollup.config.js,import copy from 'rollup-plugin-copy';\x0d\nimport sass from 'rollup-plugin-sass';\x0d\nimport config from './config/config.dev.js';\x0d\nimport { getCompressedTagsFromMedia } from './lib/tag-util.js';\x0d\n\x0d\nexport default {\x0d\n  input: config.debug ? 'lib/main-debug.js' : 'lib/main-base.js'\x2C\x0d\n  output: {\x0d\n    file: 'dist/bundle.js'\x2C\x0d\n    format: 'iife'\x2C\x0d\n  }\x2C\x0d\n  plugins: [\x0d\n    copy({\x0d\n      targets: [\x0d\n        { src: 'static/favicon/*'\x2C dest: 'dist' }\x2C\x0d\n        { src: 'static/blog/*'\x2C dest: 'dist/media/blog' }\x2C\x0d\n        {\x0d\n          src: 'data/media-art.json'\x2C\x0d\n          dest: 'dist/data'\x2C\x0d\n          rename: (name\x2C extension\x2C fullPath) => `art-tags.json`\x2C\x0d\n          transform: (contents\x2C filename) => {\x0d\n            // We reduce file size by a lot by throwing out whitespace and unnecessary properties.\x0d\n            const data = JSON.parse(contents.toString());\x0d\n            const compressedTags = getCompressedTagsFromMedia(data\x2C 0.9);\x0d\n            return JSON.stringify(compressedTags);\x0d\n          }\x2C\x0d\n        }\x2C\x0d\n      ]\x2C\x0d\n    })\x2C\x0d\n    sass({\x0d\n      output: true\x2C\x0d\n    })\x2C\x0d\n  ]\x2C\x0d\n};\x0d\n
code-source-info,0x24a76c5d79e,154,0,1081,C10O0C28O0C48O0C60O220C66O227C82O358C89O365C100O388C113O601C121O671C141O365C152O1033C163O1033C184O1081,,
tick,0x7ff81324e004,740494,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x2ade89fa4d6,0x246eeef3514,0x65ec1df336,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
tick,0x7ff81324e004,756348,1,0x7ff6d5cb45e0,6,0x7ff6d65ae370,0x246eeed9796,0x65ec1efd78,0x65ec1ef9b5,0x65ec1df378,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
code-creation,Function,11,757501,0x246eeef5aa0,1576,read node:internal/modules/package_json_reader:16:14,0x2f2f3a3a218,^
code-source-info,0x246eeef5aa0,107,307,992,,,
code-creation,Function,11,757610,0x246eeef6140,2060,Module._nodeModulePaths node:internal/modules/cjs/loader:655:37,0x2f2f3a34788,^
code-source-info,0x246eeef6140,106,19706,21257,,,
code-creation,Function,11,757674,0x246eeef69c0,336,C node:internal/deps/cjs-module-lexer/dist/lexer:1:1152,0x65ec1f1260,^
code-source-info,0x246eeef69c0,137,1151,1215,,,
code-creation,Function,11,757741,0x246eeef6b80,764,parseFileMode node:internal/validators:69:23,0x2392d4aa38,^
code-source-info,0x246eeef6b80,16,1703,2003,,,
scavenge,begin,0,453125,1724493771311
new,MemoryChunk,0x1aff2140000,262144
scavenge,end,0,453125,1724493771312
tick,0x7ff81324e004,772051,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff81324e004,787444,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff6d66146e0,803422,0,0x0,0
code-creation,Script,10,803594,0x24a76c5f276,45, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/rollup.js:1:1,0x24a76c5eed8,~
script-source,155,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/rollup.js,/*\n  @license\n\x09Rollup.js v3.28.1\n\x09Tue\x2C 22 Aug 2023 05:30:38 GMT - commit 1b557cd77cce8560cf073875cf6bc289bbe5f09c\n\n\x09https://github.com/rollup/rollup\n\n\x09Released under the MIT License.\n*/\nexport { version as VERSION\x2C defineConfig\x2C rollup\x2C watch } from './shared/node-entry.js';\nimport 'node:path';\nimport 'path';\nimport 'node:process';\nimport 'node:perf_hooks';\nimport 'node:crypto';\nimport 'node:fs/promises';\nimport 'tty';\n
code-source-info,0x24a76c5f276,155,0,423,C10O0C15O0C35O0C44O423,,
code-creation,LazyCompile,10,806276,0x24a76c5fdae,65,defaultGetFormat node:internal/modules/esm/get_format:114:26,0x64be90ad18,~
code-source-info,0x24a76c5fdae,115,3904,4108,C0O3939C7O3939C13O3956C20O3993C23O4018C28O3963C37O4035C40O4059C44O4051C56O4068C64O4105,,
code-creation,Eval,10,806954,0x24a76c6040e,5, node:tty:1:1,0x24a76c60208,~
script-source,156,node:tty,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst net = require('net');\x0d\nconst { TTY\x2C isTTY } = internalBinding('tty_wrap');\x0d\nconst errors = require('internal/errors');\x0d\nconst { ERR_INVALID_FD\x2C ERR_TTY_INIT_FAILED } = errors.codes;\x0d\nconst {\x0d\n  getColorDepth\x2C\x0d\n  hasColors\x0d\n} = require('internal/tty');\x0d\n\x0d\n// Lazy loaded for startup performance.\x0d\nlet readline;\x0d\n\x0d\nfunction isatty(fd) {\x0d\n  return NumberIsInteger(fd) && fd >= 0 && fd <= 2147483647 &&\x0d\n         isTTY(fd);\x0d\n}\x0d\n\x0d\nfunction ReadStream(fd\x2C options) {\x0d\n  if (!(this instanceof ReadStream))\x0d\n    return new ReadStream(fd\x2C options);\x0d\n  if (fd >> 0 !== fd || fd < 0)\x0d\n    throw new ERR_INVALID_FD(fd);\x0d\n\x0d\n  const ctx = {};\x0d\n  const tty = new TTY(fd\x2C true\x2C ctx);\x0d\n  if (ctx.code !== undefined) {\x0d\n    throw new ERR_TTY_INIT_FAILED(ctx);\x0d\n  }\x0d\n\x0d\n  net.Socket.call(this\x2C {\x0d\n    highWaterMark: 0\x2C\x0d\n    readable: true\x2C\x0d\n    writable: false\x2C\x0d\n    handle: tty\x2C\x0d\n    ...options\x0d\n  });\x0d\n\x0d\n  this.isRaw = false;\x0d\n  this.isTTY = true;\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(ReadStream.prototype\x2C net.Socket.prototype);\x0d\nObjectSetPrototypeOf(ReadStream\x2C net.Socket);\x0d\n\x0d\nReadStream.prototype.setRawMode = function(flag) {\x0d\n  flag = !!flag;\x0d\n  const err = this._handle?.setRawMode(flag);\x0d\n  if (err) {\x0d\n    this.emit('error'\x2C errors.errnoException(err\x2C 'setRawMode'));\x0d\n    return this;\x0d\n  }\x0d\n  this.isRaw = flag;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction WriteStream(fd) {\x0d\n  if (!(this instanceof WriteStream))\x0d\n    return new WriteStream(fd);\x0d\n  if (fd >> 0 !== fd || fd < 0)\x0d\n    throw new ERR_INVALID_FD(fd);\x0d\n\x0d\n  const ctx = {};\x0d\n  const tty = new TTY(fd\x2C false\x2C ctx);\x0d\n  if (ctx.code !== undefined) {\x0d\n    throw new ERR_TTY_INIT_FAILED(ctx);\x0d\n  }\x0d\n\x0d\n  net.Socket.call(this\x2C {\x0d\n    handle: tty\x2C\x0d\n    readable: false\x2C\x0d\n    writable: true\x0d\n  });\x0d\n\x0d\n  // Prevents interleaved or dropped stdout/stderr output for terminals.\x0d\n  // As noted in the following reference\x2C local TTYs tend to be quite fast and\x0d\n  // this behavior has become expected due historical functionality on OS X\x2C\x0d\n  // even though it was originally intended to change in v1.0.2 (Libuv 1.2.1).\x0d\n  // Ref: https://github.com/nodejs/node/pull/1771#issuecomment-119351671\x0d\n  this._handle.setBlocking(true);\x0d\n\x0d\n  const winSize = new Array(2);\x0d\n  const err = this._handle.getWindowSize(winSize);\x0d\n  if (!err) {\x0d\n    this.columns = winSize[0];\x0d\n    this.rows = winSize[1];\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(WriteStream.prototype\x2C net.Socket.prototype);\x0d\nObjectSetPrototypeOf(WriteStream\x2C net.Socket);\x0d\n\x0d\nWriteStream.prototype.isTTY = true;\x0d\n\x0d\nWriteStream.prototype.getColorDepth = getColorDepth;\x0d\n\x0d\nWriteStream.prototype.hasColors = hasColors;\x0d\n\x0d\nWriteStream.prototype._refreshSize = function() {\x0d\n  const oldCols = this.columns;\x0d\n  const oldRows = this.rows;\x0d\n  const winSize = new Array(2);\x0d\n  const err = this._handle.getWindowSize(winSize);\x0d\n  if (err) {\x0d\n    this.emit('error'\x2C errors.errnoException(err\x2C 'getWindowSize'));\x0d\n    return;\x0d\n  }\x0d\n  const { 0: newCols\x2C 1: newRows } = winSize;\x0d\n  if (oldCols !== newCols || oldRows !== newRows) {\x0d\n    this.columns = newCols;\x0d\n    this.rows = newRows;\x0d\n    this.emit('resize');\x0d\n  }\x0d\n};\x0d\n\x0d\n// Backwards-compat\x0d\nWriteStream.prototype.cursorTo = function(x\x2C y\x2C callback) {\x0d\n  if (readline === undefined) readline = require('readline');\x0d\n  return readline.cursorTo(this\x2C x\x2C y\x2C callback);\x0d\n};\x0d\nWriteStream.prototype.moveCursor = function(dx\x2C dy\x2C callback) {\x0d\n  if (readline === undefined) readline = require('readline');\x0d\n  return readline.moveCursor(this\x2C dx\x2C dy\x2C callback);\x0d\n};\x0d\nWriteStream.prototype.clearLine = function(dir\x2C callback) {\x0d\n  if (readline === undefined) readline = require('readline');\x0d\n  return readline.clearLine(this\x2C dir\x2C callback);\x0d\n};\x0d\nWriteStream.prototype.clearScreenDown = function(callback) {\x0d\n  if (readline === undefined) readline = require('readline');\x0d\n  return readline.clearScreenDown(this\x2C callback);\x0d\n};\x0d\nWriteStream.prototype.getWindowSize = function() {\x0d\n  return [this.columns\x2C this.rows];\x0d\n};\x0d\n\x0d\nmodule.exports = { isatty\x2C ReadStream\x2C WriteStream };\x0d\n
code-source-info,0x24a76c6040e,156,0,5231,C0O0C4O5231,,
code-creation,Function,10,807398,0x24a76c60ae6,426, node:tty:1:1,0x24a76c60388,~
code-source-info,0x24a76c60ae
code-creation,Eval,10,808227,0x24a76c61fb6,5, node:internal/tty:1:1,0x24a76c61d60,~
script-source,157,node:internal/tty,// MIT License\x0d\n\x0d\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\x0d\n\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a copy\x0d\n// of this software and associated documentation files (the "Software")\x2C to deal\x0d\n// in the Software without restriction\x2C including without limitation the rights\x0d\n// to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C distribute\x2C sublicense\x2C and/or sell\x0d\n// copies of the Software\x2C and to permit persons to whom the Software is\x0d\n// furnished to do so\x2C subject to the following conditions:\x0d\n\x0d\n// The above copyright notice and this permission notice shall be included in\x0d\n// all copies or substantial portions of the Software.\x0d\n\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS OR\x0d\n// IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\x2C\x0d\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\x0d\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C DAMAGES OR OTHER\x0d\n// LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR OTHERWISE\x2C ARISING FROM\x2C\x0d\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\x0d\n// SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSome\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { validateInteger } = require('internal/validators');\x0d\n\x0d\nlet OSRelease;\x0d\n\x0d\nconst COLORS_2 = 1;\x0d\nconst COLORS_16 = 4;\x0d\nconst COLORS_256 = 8;\x0d\nconst COLORS_16m = 24;\x0d\n\x0d\n// Some entries were taken from `dircolors`\x0d\n// (https://linux.die.net/man/1/dircolors). The corresponding terminals might\x0d\n// support more than 16 colors\x2C but this was not tested for.\x0d\n//\x0d\n// Copyright (C) 1996-2016 Free Software Foundation\x2C Inc. Copying and\x0d\n// distribution of this file\x2C with or without modification\x2C are permitted\x0d\n// provided the copyright notice and this notice are preserved.\x0d\nconst TERM_ENVS = {\x0d\n  'eterm': COLORS_16\x2C\x0d\n  'cons25': COLORS_16\x2C\x0d\n  'console': COLORS_16\x2C\x0d\n  'cygwin': COLORS_16\x2C\x0d\n  'dtterm': COLORS_16\x2C\x0d\n  'gnome': COLORS_16\x2C\x0d\n  'hurd': COLORS_16\x2C\x0d\n  'jfbterm': COLORS_16\x2C\x0d\n  'konsole': COLORS_16\x2C\x0d\n  'kterm': COLORS_16\x2C\x0d\n  'mlterm': COLORS_16\x2C\x0d\n  'mosh': COLORS_16m\x2C\x0d\n  'putty': COLORS_16\x2C\x0d\n  'st': COLORS_16\x2C\x0d\n  // https://github.com/da-x/rxvt-unicode/tree/v9.22-with-24bit-color\x0d\n  'rxvt-unicode-24bit': COLORS_16m\x2C\x0d\n  // https://gist.github.com/XVilka/8346728#gistcomment-2823421\x0d\n  'terminator': COLORS_16m\x0d\n};\x0d\n\x0d\nconst TERM_ENVS_REG_EXP = [\x0d\n  /ansi/\x2C\x0d\n  /color/\x2C\x0d\n  /linux/\x2C\x0d\n  /^con[0-9]*x[0-9]/\x2C\x0d\n  /^rxvt/\x2C\x0d\n  /^screen/\x2C\x0d\n  /^xterm/\x2C\x0d\n  /^vt100/\x2C\x0d\n];\x0d\n\x0d\nlet warned = false;\x0d\nfunction warnOnDeactivatedColors(env) {\x0d\n  if (warned)\x0d\n    return;\x0d\n  let name = '';\x0d\n  if (env.NODE_DISABLE_COLORS !== undefined)\x0d\n    name = 'NODE_DISABLE_COLORS';\x0d\n  if (env.NO_COLOR !== undefined) {\x0d\n    if (name !== '') {\x0d\n      name += "' and '";\x0d\n    }\x0d\n    name += 'NO_COLOR';\x0d\n  }\x0d\n\x0d\n  if (name !== '') {\x0d\n    process.emitWarning(\x0d\n      `The '${name}' env is ignored due to the 'FORCE_COLOR' env being set.`\x2C\x0d\n      'Warning'\x0d\n    );\x0d\n    warned = true;\x0d\n  }\x0d\n}\x0d\n\x0d\n// The `getColorDepth` API got inspired by multiple sources such as\x0d\n// https://github.com/chalk/supports-color\x2C\x0d\n// https://github.com/isaacs/color-support.\x0d\nfunction getColorDepth(env = process.env) {\x0d\n  // Use level 0-3 to support the same levels as `chalk` does. This is done for\x0d\n  // consistency throughout the ecosystem.\x0d\n  if (env.FORCE_COLOR !== undefined) {\x0d\n    switch (env.FORCE_COLOR) {\x0d\n      case '':\x0d\n      case '1':\x0d\n      case 'true':\x0d\n        warnOnDeactivatedColors(env);\x0d\n        return COLORS_16;\x0d\n      case '2':\x0d\n        warnOnDeactivatedColors(env);\x0d\n        return COLORS_256;\x0d\n      case '3':\x0d\n        warnOnDeactivatedColors(env);\x0d\n        return COLORS_16m;\x0d\n      default:\x0d\n        return COLORS_2;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (env.NODE_DISABLE_COLORS !== undefined ||\x0d\n      // See https://no-color.org/\x0d\n      env.NO_COLOR !== undefined ||\x0d\n      // The "dumb" special terminal\x2C as defined by terminfo\x2C doesn't support\x0d\n      // ANSI color control codes.\x0d\n      // See https://invisible-island.net/ncurses/terminfo.ti.html#toc-_Specials\x0d\n      env.TERM === 'dumb') {\x0d\n    return COLORS_2;\x0d\n  }\x0d\n\x0d\n  if (process.platform === 'win32') {\x0d\n    // Lazy load for startup performance.\x0d\n    if (OSRelease === undefined) {\x0d\n      const { release } = require('os');\x0d\n      OSRelease = StringPrototypeSplit(release()\x2C '.');\x0d\n    }\x0d\n    // Windows 10 build 10586 is the first Windows release that supports 256\x0d\n    // colors. Windows 10 build 14931 is the first release that supports\x0d\n    // 16m/TrueColor.\x0d\n    if (+OSRelease[0] >= 10) {\x0d\n      const build = +OSRelease[2];\x0d\n      if (build >= 14931)\x0d\n        return COLORS_16m;\x0d\n      if (build >= 10586)\x0d\n        return COLORS_256;\x0d\n    }\x0d\n\x0d\n    return COLORS_16;\x0d\n  }\x0d\n\x0d\n  if (env.TMUX) {\x0d\n    return COLORS_256;\x0d\n  }\x0d\n\x0d\n  if (env.CI) {\x0d\n    if ([\x0d\n      'APPVEYOR'\x2C\x0d\n      'BUILDKITE'\x2C\x0d\n      'CIRCLECI'\x2C\x0d\n      'DRONE'\x2C\x0d\n      'GITHUB_ACTIONS'\x2C\x0d\n      'GITLAB_CI'\x2C\x0d\n      'TRAVIS'\x2C\x0d\n    ].some((sign) => sign in env) || env.CI_NAME === 'codeship') {\x0d\n      return COLORS_256;\x0d\n    }\x0d\n    return COLORS_2;\x0d\n  }\x0d\n\x0d\n  if ('TEAMCITY_VERSION' in env) {\x0d\n    return RegExpPrototypeExec(/^(9\\.(0*[1-9]\\d*)\\.|\\d{2\x2C}\\.)/\x2C env.TEAMCITY_VERSION) !== null ?\x0d\n      COLORS_16 : COLORS_2;\x0d\n  }\x0d\n\x0d\n  switch (env.TERM_PROGRAM) {\x0d\n    case 'iTerm.app':\x0d\n      if (!env.TERM_PROGRAM_VERSION ||\x0d\n        RegExpPrototypeExec(/^[0-2]\\./\x2C env.TERM_PROGRAM_VERSION) !== null\x0d\n      ) {\x0d\n        return COLORS_256;\x0d\n      }\x0d\n      return COLORS_16m;\x0d\n    case 'HyperTerm':\x0d\n    case 'MacTerm':\x0d\n      return COLORS_16m;\x0d\n    case 'Apple_Terminal':\x0d\n      return COLORS_256;\x0d\n  }\x0d\n\x0d\n  if (env.COLORTERM === 'truecolor' || env.COLORTERM === '24bit') {\x0d\n    return COLORS_16m;\x0d\n  }\x0d\n\x0d\n  if (env.TERM) {\x0d\n    if (RegExpPrototypeExec(/^xterm-256/\x2C env.TERM) !== null) {\x0d\n      return COLORS_256;\x0d\n    }\x0d\n\x0d\n    const termEnv = StringPrototypeToLowerCase(env.TERM);\x0d\n\x0d\n    if (TERM_ENVS[termEnv]) {\x0d\n      return TERM_ENVS[termEnv];\x0d\n    }\x0d\n    if (ArrayPrototypeSome(TERM_ENVS_REG_EXP\x2C\x0d\n                           (term) => RegExpPrototypeExec(term\x2C termEnv) !== null)) {\x0d\n      return COLORS_16;\x0d\n    }\x0d\n  }\x0d\n  // Move 16 color COLORTERM below 16m and 256\x0d\n  if (env.COLORTERM) {\x0d\n    return COLORS_16;\x0d\n  }\x0d\n  return COLORS_2;\x0d\n}\x0d\n\x0d\nfunction hasColors(count\x2C env) {\x0d\n  if (env === undefined &&\x0d\n      (count === undefined || (typeof count === 'object' && count !== null))) {\x0d\n    env = count;\x0d\n    count = 16;\x0d\n  } else {\x0d\n    validateInteger(count\x2C 'count'\x2C 2);\x0d\n  }\x0d\n\x0d\n  return count <= 2 ** getColorDepth(env);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  getColorDepth\x2C\x0d\n  hasColors\x0d\n};\x0d\n
code-source-info,0x24a76c61fb6,157,0,6719,C0O0C4O6719,,
code-creation,Function,10,808794,0x24a76c62416,358, node:internal/tty:1:1,0x24a76c61f30,~
code-source-info,0x24a76c62416,157,0,6719,C0O0C69O1211C75O1234C81O1258C87O1283C93O1360C99O1360C104O1340C110O1399C111O1399C113O1430C115O1430C117O1452C119O1452C121O1475C123O1475C125O1498C127O1498C129O1924C136O1938C142O1962C148O1987C154O2011C160O2035C166O2058C172O2080C178O2105C184O2130C190O2153C196O2177C202O2199C208O2223C214O2243C220O2350C226O2444C232O1924C234O2488C328O2488C330O2620C331O2620C333O6664C340O6686C346O6704C352O6679C357O6718,,
code-creation,Eval,10,809726,0x24a76c632b6,5, node:process:1:1,0x24a76c63170,~
script-source,158,node:process,'use strict';\x0d\n\x0d\n// Re-export process as a built-in module\x0d\nmodule.exports = process;\x0d\n
code-source-info,0x24a76c632b6,158,0,87,C0O0C4O87,,
code-creation,Function,10,809798,0x24a76c63336,8, node:process:1:1,0x24a76c63230,~
code-source-info,0x24a76c63336,158,0,87,C0O60C2O75C7O86,,
code-creation,LazyCompile,10,809964,0x24a76c638a6,16,get node:internal/bootstrap/node:92:8,0x39b87d5b18,~
code-source-info,0x24a76c638a6,10,3798,3859,C0O3810C6O3842C12O3846C15O3852,,
code-creation,LazyCompile,10,810063,0x24a76c6399e,32,get node:internal/bootstrap/node:315:6,0x39b87d6450,~
code-source-info,0x24a76c6399e,10,11331,11494,C0O11355C5O11370C10O11370C15O11396C20O11432C24O11446C27O11461C31O11489,,
code-creation,LazyCompile,10,810425,0x24a76c643ee,847,buildAllowedFlags node:internal/process/per_thread:266:27,0xb0b6e98fd8,~
code-source-info,0x24a76c643ee
code-creation,LazyCompile,10,810607,0x24a76c64a8e,7,get options node:internal/options:68:14,0x6414eb3890,~
code-source-info,0x24a76c64a8e,92,1796,1845,C0O1806C3O1813C6O1840,,
code-creation,LazyCompile,10,810677,0x24a76c64b76,7,get aliases node:internal/options:71:14,0x6414eb3900,~
code-source-info,0x24a76c64b76,92,1861,1907,C0O1871C3O1878C6O1902,,
code-creation,LazyCompile,10,810753,0x24a76c64c66,33,getAliasesFromBinding node:internal/options:25:31,0x6414eb3690,~
code-source-info,0x24a76c64c66,92,654,760,C0O662C6O686C11O713C15O698C28O739C32O757,,
code-creation,Function,11,811430,0x246eeef6ee0,6404,buildAllowedFlags node:internal/process/per_thread:266:27,0xb0b6e98fd8,^
code-source-info,0x246eeef6ee0,30,7318,11532,,,
code-creation,Function,11,811496,0x246eeef8860,416,assertEncoding node:internal/fs/utils:155:24,0x6414ea1c58,^
code-source-info,0x246eeef8860,84,3741,3923,,,
code-creation,Function,11,811552,0x246eeef8a60,536,getInternalGlobal node:internal/util:559:27,0x2392d47040,^
code-source-info,0x246eeef8a60,15,15971,16227,,,
code-creation,LazyCompile,10,811740,0x24a76c654e6,121,isAccepted node:internal/process/per_thread:284:22,0x24a76c63c00,~
code-source-info,0x24a76c654e6,30,7922,8329,C0O7934C10O7939C19O7980C24O7990C25O8002C26O8035C31O8043C36O8043C42O8057C44O8090C45O8112C51O8116C56O8133C71O8133C76O8188C86O8195C91O8247C92O8260C97O8275C102O8275C108O8282C115O8302C117O8298C120O8324,,
code-creation,LazyCompile,10,811911,0x24a76c65796,26,trimLeadingDashes node:internal/process/per_thread:306:5,0x24a76c63c50,~
code-source-info,0x24a76c65796,30,8850,8912,C0O8860C11O8889C20O8860C25O8912,,
code-creation,RegExp,3,812110,0x246eeef8ce0,880,^--?
code-creation,LazyCompile,10,812282,0x24a76c659c6,54,NodeEnvironmentFlagsSet node:internal/process/per_thread:314:16,0x24a76c63ca0,~
code-source-info,0x24a76c659c6,30,9241,9309,C3O9258C11O9258C23O9274C30O9279C40O9294C46O9290C53O9308,,
code-creation,LazyCompile,10,812412,0x24a76c65b96,29,set node:internal/bootstrap/node:322:6,0x39b87d64a0,~
code-source-info,0x24a76c65b96,10,11602,11802,C0O11617C15O11708C22O11617C28O11801,,
code-creation,LazyCompile,10,812580,0x24a76c65d3e,125,getStdout node:internal/bootstrap/switches/is_main_thread:146:19,0x39b87ff348,~
script-source,96,node:internal/bootstrap/switches/is_main_thread,'use strict';\x0d\n\x0d\nconst { ObjectDefineProperty } = primordials;\x0d\nconst rawMethods = internalBinding('process_methods');\x0d\nconst {\x0d\n  addSerializeCallback\x2C\x0d\n  isBuildingSnapshot\x0d\n} = require('v8').startupSnapshot;\x0d\n// TODO(joyeecheung): deprecate and remove these underscore methods\x0d\nprocess._debugProcess = rawMethods._debugProcess;\x0d\nprocess._debugEnd = rawMethods._debugEnd;\x0d\n\x0d\n// See the discussion in https://github.com/nodejs/node/issues/19009 and\x0d\n// https://github.com/nodejs/node/pull/34010 for why these are no-ops.\x0d\n// Five word summary: they were broken beyond repair.\x0d\nprocess._startProfilerIdleNotifier = () => {};\x0d\nprocess._stopProfilerIdleNotifier = () => {};\x0d\n\x0d\nfunction defineStream(name\x2C getter) {\x0d\n  ObjectDefineProperty(process\x2C name\x2C {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    get: getter\x0d\n  });\x0d\n}\x0d\n\x0d\ndefineStream('stdout'\x2C getStdout);\x0d\ndefineStream('stdin'\x2C getStdin);\x0d\ndefineStream('stderr'\x2C getStderr);\x0d\n\x0d\n// Worker threads don't receive signals.\x0d\nconst {\x0d\n  startListeningIfSignal\x2C\x0d\n  stopListeningIfSignal\x0d\n} = require('internal/process/signal');\x0d\nprocess.on('newListener'\x2C startListeningIfSignal);\x0d\nprocess.on('removeListener'\x2C stopListeningIfSignal);\x0d\n\x0d\n// ---- keep the attachment of the wrappers above so that it's easier to ----\x0d\n// ----              compare the setups side-by-side                    -----\x0d\n\x0d\nconst { guessHandleType } = internalBinding('util');\x0d\n\x0d\nfunction createWritableStdioStream(fd) {\x0d\n  let stream;\x0d\n  // Note stream._type is used for test-module-load-list.js\x0d\n  switch (guessHandleType(fd)) {\x0d\n    case 'TTY': {\x0d\n      const tty = require('tty');\x0d\n      stream = new tty.WriteStream(fd);\x0d\n      stream._type = 'tty';\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    case 'FILE': {\x0d\n      const SyncWriteStream = require('internal/fs/sync_write_stream');\x0d\n      stream = new SyncWriteStream(fd\x2C { autoClose: false });\x0d\n      stream._type = 'fs';\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    case 'PIPE':\x0d\n    case 'TCP': {\x0d\n      const net = require('net');\x0d\n\x0d\n      // If fd is already being used for the IPC channel\x2C libuv will return\x0d\n      // an error when trying to use it again. In that case\x2C create the socket\x0d\n      // using the existing handle instead of the fd.\x0d\n      if (process.channel && process.channel.fd === fd) {\x0d\n        const { kChannelHandle } = require('internal/child_process');\x0d\n        stream = new net.Socket({\x0d\n          handle: process[kChannelHandle]\x2C\x0d\n          readable: false\x2C\x0d\n          writable: true\x0d\n        });\x0d\n      } else {\x0d\n        stream = new net.Socket({\x0d\n          fd\x2C\x0d\n          readable: false\x2C\x0d\n          writable: true\x0d\n        });\x0d\n      }\x0d\n\x0d\n      stream._type = 'pipe';\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    default: {\x0d\n      // Provide a dummy black-hole output for e.g. non-console\x0d\n      // Windows applications.\x0d\n      const { Writable } = require('stream');\x0d\n      stream = new Writable({\x0d\n        write(buf\x2C enc\x2C cb) {\x0d\n          cb();\x0d\n        }\x0d\n      });\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // For supporting legacy API we put the FD here.\x0d\n  stream.fd = fd;\x0d\n\x0d\n  stream._isStdio = true;\x0d\n\x0d\n  return stream;\x0d\n}\x0d\n\x0d\nfunction dummyDestroy(err\x2C cb) {\x0d\n  cb(err);\x0d\n  this._undestroy();\x0d\n\x0d\n  // We need to emit 'close' anyway so that the closing\x0d\n  // of the stream is observable. We just make sure we\x0d\n  // are not going to do it twice.\x0d\n  // The 'close' event is needed so that finished and\x0d\n  // pipeline work correctly.\x0d\n  if (!this._writableState.emitClose) {\x0d\n    process.nextTick(() => {\x0d\n      this.emit('close');\x0d\n    });\x0d\n  }\x0d\n}\x0d\n\x0d\nlet stdin;\x0d\nlet stdout;\x0d\nlet stderr;\x0d\n\x0d\nlet stdoutDestroy;\x0d\nlet stderrDestroy;\x0d\n\x0d\nfunction refreshStdoutOnSigWinch() {\x0d\n  stdout._refreshSize();\x0d\n}\x0d\n\x0d\nfunction refreshStderrOnSigWinch() {\x0d\n  stderr._refreshSize();\x0d\n}\x0d\n\x0d\nfunction addCleanup(fn) {\x0d\n  if (isBuildingSnapshot()) {\x0d\n    addSerializeCallback(fn);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getStdout() {\x0d\n  if (stdout) return stdout;\x0d\n  stdout = createWritableStdioStream(1);\x0d\n  stdout.destroySoon = stdout.destroy;\x0d\n  // Override _destroy so that the fd is never actually closed.\x0d\n  stdoutDestroy = stdout._destroy;\x0d\n  stdout._destroy = dummyDestroy;\x0d\n  if (stdout.isTTY) {\x0d\n    process.on('SIGWINCH'\x2C refreshStdoutOnSigWinch);\x0d\n  }\x0d\n\x0d\n  addCleanup(function cleanupStdout() {\x0d\n    stdout._destroy = stdoutDestroy;\x0d\n    stdout.destroy();\x0d\n    process.removeListener('SIGWINCH'\x2C refreshStdoutOnSigWinch);\x0d\n    stdout = undefined;\x0d\n  });\x0d\n  // No need to add deserialize callback because stdout = undefined above\x0d\n  // causes the stream to be lazily initialized again later.\x0d\n  return stdout;\x0d\n}\x0d\n\x0d\nfunction getStderr() {\x0d\n  if (stderr) return stderr;\x0d\n  stderr = createWritableStdioStream(2);\x0d\n  stderr.destroySoon = stderr.destroy;\x0d\n  stderrDestroy = stderr._destroy;\x0d\n  // Override _destroy so that the fd is never actually closed.\x0d\n  stderr._destroy = dummyDestroy;\x0d\n  if (stderr.isTTY) {\x0d\n    process.on('SIGWINCH'\x2C refreshStderrOnSigWinch);\x0d\n  }\x0d\n  addCleanup(function cleanupStderr() {\x0d\n    stderr._destroy = stderrDestroy;\x0d\n    stderr.destroy();\x0d\n    process.removeListener('SIGWINCH'\x2C refreshStderrOnSigWinch);\x0d\n    stderr = undefined;\x0d\n  });\x0d\n  // No need to add deserialize callback because stderr = undefined above\x0d\n  // causes the stream to be lazily initialized again later.\x0d\n  return stderr;\x0d\n}\x0d\n\x0d\nfunction getStdin() {\x0d\n  if (stdin) return stdin;\x0d\n  const fd = 0;\x0d\n\x0d\n  switch (guessHandleType(fd)) {\x0d\n    case 'TTY': {\x0d\n      const tty = require('tty');\x0d\n      stdin = new tty.ReadStream(fd\x2C {\x0d\n        highWaterMark: 0\x2C\x0d\n        readable: true\x2C\x0d\n        writable: false\x0d\n      });\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    case 'FILE': {\x0d\n      const fs = require('fs');\x0d\n      stdin = new fs.ReadStream(null\x2C { fd: fd\x2C autoClose: false });\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    case 'PIPE':\x0d\n    case 'TCP': {\x0d\n      const net = require('net');\x0d\n\x0d\n      // It could be that process has been started with an IPC channel\x0d\n      // sitting on fd=0\x2C in such case the pipe for this fd is already\x0d\n      // present and creating a new one will lead to the assertion failure\x0d\n      // in libuv.\x0d\n      if (process.channel && process.channel.fd === fd) {\x0d\n        stdin = new net.Socket({\x0d\n          handle: process.channel\x2C\x0d\n          readable: true\x2C\x0d\n          writable: false\x2C\x0d\n          manualStart: true\x0d\n        });\x0d\n      } else {\x0d\n        stdin = new net.Socket({\x0d\n          fd: fd\x2C\x0d\n          readable: true\x2C\x0d\n          writable: false\x2C\x0d\n          manualStart: true\x0d\n        });\x0d\n      }\x0d\n      // Make sure the stdin can't be `.end()`-ed\x0d\n      stdin._writableState.ended = true;\x0d\n      break;\x0d\n    }\x0d\n\x0d\n    default: {\x0d\n      // Provide a dummy contentless input for e.g. non-console\x0d\n      // Windows applications.\x0d\n      const { Readable } = require('stream');\x0d\n      stdin = new Readable({ read() {} });\x0d\n      stdin.push(null);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // For supporting legacy API we put the FD here.\x0d\n  stdin.fd = fd;\x0d\n\x0d\n  // `stdin` starts out life in a paused state\x2C but node doesn't\x0d\n  // know yet. Explicitly to readStop() it to put it in the\x0d\n  // not-reading state.\x0d\n  if (stdin._handle && stdin._handle.readStop) {\x0d\n    stdin._handle.reading = false;\x0d\n    stdin._readableState.reading = false;\x0d\n    stdin._handle.readStop();\x0d\n  }\x0d\n\x0d\n  // If the user calls stdin.pause()\x2C then we need to stop reading\x0d\n  // once the stream implementation does so (one nextTick later)\x2C\x0d\n  // so that the process can close down.\x0d\n  stdin.on('pause'\x2C () => {\x0d\n    process.nextTick(onpause);\x0d\n  });\x0d\n\x0d\n  function onpause() {\x0d\n    if (!stdin._handle)\x0d\n      return;\x0d\n    if (stdin._handle.reading && !stdin.readableFlowing) {\x0d\n      stdin._readableState.reading = false;\x0d\n      stdin._handle.reading = false;\x0d\n      stdin._handle.readStop();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  addCleanup(function cleanupStdin() {\x0d\n    stdin.destroy();\x0d\n    stdin = undefined;\x0d\n  });\x0d\n  // No need to add deserialize callback because stdin = undefined above\x0d\n  // causes the stream to be lazily initialized again later.\x0d\n  return stdin;\x0d\n}\x0d\n\x0d\n// Used by internal tests.\x0d\nrawMethods.resetStdioForTesting = function() {\x0d\n  stdin = undefined;\x0d\n  stdout = undefined;\x0d\n  stderr = undefined;\x0d\n};\x0d\n
code-source-info,0x24a76c65d3e,96,3854,4548,C0O3862C6O3874C10O3888C11O3892C17O3901C24O3899C30O3934C37O3955C40O3962C44O3953C48O4039C53O4062C60O4053C66O4075C73O4091C77O4110C82O4121C88O4135C91O4143C102O4143C108O4194C116O4194C120O4531C124O4545,,
code-creation,LazyCompile,10,813387,0x24a76c66b16,280,createWritableStdioStream node:internal/bootstrap/switches/is_main_thread:45:35,0x39b87ff1b8,~
code-source-info,0x24a76c66b16,96,1464,3091,C0O1478C2O1550C7O1558C42O1619C48O1619C53O1659C60O1651C66O1683C68O1696C72O1712C74O1779C80O1779C85O1857C95O1837C101O1891C103O1904C107O1919C109O1991C115O1991C120O2228C123O2240C132O2259C137O2267C144O2270C149O2316C155O2316C160O2297C165O2377C180O2412C189O2369C197O2539C209O2559C215O2531C221O2648C223O2661C227O2678C229O2835C235O2835C240O2822C245O2861C250O2894C260O2870C266O3024C268O3034C272O3045C273O3061C277O3074C279O3088,,
code-creation,LazyCompile,10,813679,0x24a76c66eae,194,WriteStream node:tty:85:21,0x24a76c604e0,~
code-source-info,0x24a76c66eae,156,2599,3576,C0O2609C2O2620C7O2650C12O2657C17O2677C18O2681C20O2688C26O2693C32O2706C37O2716C44O2722C49O2716C50O2763C52O2782C67O2782C73O2818C79O2845C86O2851C91O2845C92O2891C97O2895C102O2902C114O2928C118O2902C124O3379C129O3387C136O3387C141O3427C151O3427C157O3461C162O3469C167O3469C173O3496C175O3513C176O3535C179O3526C183O3545C185O3564C188O3555C193O3575,,
code-creation,LazyCompile,10,814061,0x24a76c67b5e,919,Socket node:net:317:16,0x64be90f110,~
code-source-info,0x24a76c67b5e
code-creation,LazyCompile,10,814459,0x24a76c6823e,109,Duplex node:internal/streams/duplex:54:16,0x32ebb7ffb88,~
script-source,57,node:internal/streams/duplex,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// a duplex stream is just a stream that is both readable and writable.\x0d\n// Since JS doesn't have multiple prototype inheritance\x2C this class\x0d\n// prototypically inherits from Readable\x2C and then parasitically from\x0d\n// Writable.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Duplex;\x0d\n\x0d\nconst Readable = require('internal/streams/readable');\x0d\nconst Writable = require('internal/streams/writable');\x0d\n\x0d\nObjectSetPrototypeOf(Duplex.prototype\x2C Readable.prototype);\x0d\nObjectSetPrototypeOf(Duplex\x2C Readable);\x0d\n\x0d\n{\x0d\n  const keys = ObjectKeys(Writable.prototype);\x0d\n  // Allow the keys array to be GC'ed.\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    const method = keys[i];\x0d\n    if (!Duplex.prototype[method])\x0d\n      Duplex.prototype[method] = Writable.prototype[method];\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction Duplex(options) {\x0d\n  if (!(this instanceof Duplex))\x0d\n    return new Duplex(options);\x0d\n\x0d\n  Readable.call(this\x2C options);\x0d\n  Writable.call(this\x2C options);\x0d\n  this.allowHalfOpen = true;\x0d\n\x0d\n  if (options) {\x0d\n    if (options.readable === false)\x0d\n      this.readable = false;\x0d\n\x0d\n    if (options.writable === false)\x0d\n      this.writable = false;\x0d\n\x0d\n    if (options.allowHalfOpen === false) {\x0d\n      this.allowHalfOpen = false;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(Duplex.prototype\x2C {\x0d\n  writable:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writable') }\x2C\x0d\n  writableHighWaterMark:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableHighWaterMark') }\x2C\x0d\n  writableObjectMode:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableObjectMode') }\x2C\x0d\n  writableBuffer:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableBuffer') }\x2C\x0d\n  writableLength:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableLength') }\x2C\x0d\n  writableFinished:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableFinished') }\x2C\x0d\n  writableCorked:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableCorked') }\x2C\x0d\n  writableEnded:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableEnded') }\x2C\x0d\n  writableNeedDrain:\x0d\n    { __proto__: null\x2C ...ObjectGetOwnPropertyDescriptor(Writable.prototype\x2C 'writableNeedDrain') }\x2C\x0d\n\x0d\n  destroyed: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      if (this._readableState === undefined ||\x0d\n        this._writableState === undefined) {\x0d\n        return false;\x0d\n      }\x0d\n      return this._readableState.destroyed && this._writableState.destroyed;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // Backward compatibility\x2C the user is explicitly\x0d\n      // managing destroyed.\x0d\n      if (this._readableState && this._writableState) {\x0d\n        this._readableState.destroyed = value;\x0d\n        this._writableState.destroyed = value;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\nlet duplexify;\x0d\n\x0d\nDuplex.from = function(body) {\x0d\n  if (!duplexify) {\x0d\n    duplexify = require('internal/streams/duplexify');\x0d\n  }\x0d\n  return duplexify(body\x2C 'body');\x0d\n};\x0d\n
code-source-info,0x24a76c6823e,57,2064,2492,C0O2079C2O2090C7O2115C12O2122C17O2142C18O2148C23O2157C28O2157C34O2181C39O2190C44O2190C50O2214C51O2233C55O2246C59O2278C65O2287C70O2305C71O2319C75O2347C81O2356C86O2374C87O2388C91O2416C97O2430C102O2450C103O2469C108O2491,,
code-creation,LazyCompile,10,815030,0x24a76c688de,220,Readable node:internal/streams/readable:181:18,0x1b78578c320,~
script-source,58,node:internal/streams/readable,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  NumberIsInteger\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n  SymbolAsyncIterator\x2C\x0d\n  Symbol\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Readable;\x0d\nReadable.ReadableState = ReadableState;\x0d\n\x0d\nconst EE = require('events');\x0d\nconst { Stream\x2C prependListener } = require('internal/streams/legacy');\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  addAbortSignalNoValidate\x2C\x0d\n} = require('internal/streams/add-abort-signal');\x0d\n\x0d\nlet debug = require('internal/util/debuglog').debuglog('stream'\x2C (fn) => {\x0d\n  debug = fn;\x0d\n});\x0d\nconst BufferList = require('internal/streams/buffer_list');\x0d\nconst destroyImpl = require('internal/streams/destroy');\x0d\nconst {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n} = require('internal/streams/state');\x0d\n\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_STREAM_PUSH_AFTER_EOF\x2C\x0d\n  ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT\x0d\n} = require('internal/errors').codes;\x0d\nconst { validateObject } = require('internal/validators');\x0d\n\x0d\nconst kPaused = Symbol('kPaused');\x0d\n\x0d\nconst { StringDecoder } = require('string_decoder');\x0d\nconst from = require('internal/streams/from');\x0d\n\x0d\nObjectSetPrototypeOf(Readable.prototype\x2C Stream.prototype);\x0d\nObjectSetPrototypeOf(Readable\x2C Stream);\x0d\nconst nop = () => {};\x0d\n\x0d\nconst { errorOrDestroy } = destroyImpl;\x0d\n\x0d\nfunction ReadableState(options\x2C stream\x2C isDuplex) {\x0d\n  // Duplex streams are both readable and writable\x2C but share\x0d\n  // the same options object.\x0d\n  // However\x2C some cases require setting options to different\x0d\n  // values for the readable and the writable sides of the duplex stream.\x0d\n  // These options can be provided separately as readableXXX and writableXXX.\x0d\n  if (typeof isDuplex !== 'boolean')\x0d\n    isDuplex = stream instanceof Stream.Duplex;\x0d\n\x0d\n  // Object stream flag. Used to make read(n) ignore n and to\x0d\n  // make all the buffer merging and length checks go away.\x0d\n  this.objectMode = !!(options && options.objectMode);\x0d\n\x0d\n  if (isDuplex)\x0d\n    this.objectMode = this.objectMode ||\x0d\n      !!(options && options.readableObjectMode);\x0d\n\x0d\n  // The point at which it stops calling _read() to fill the buffer\x0d\n  // Note: 0 is a valid value\x2C means "don't call _read preemptively ever"\x0d\n  this.highWaterMark = options ?\x0d\n    getHighWaterMark(this\x2C options\x2C 'readableHighWaterMark'\x2C isDuplex) :\x0d\n    getDefaultHighWaterMark(false);\x0d\n\x0d\n  // A linked list is used to store data chunks instead of an array because the\x0d\n  // linked list can remove elements from the beginning faster than\x0d\n  // array.shift().\x0d\n  this.buffer = new BufferList();\x0d\n  this.length = 0;\x0d\n  this.pipes = [];\x0d\n  this.flowing = null;\x0d\n  this.ended = false;\x0d\n  this.endEmitted = false;\x0d\n  this.reading = false;\x0d\n\x0d\n  // Stream is still being constructed and cannot be\x0d\n  // destroyed until construction finished or failed.\x0d\n  // Async construction is opt in\x2C therefore we start as\x0d\n  // constructed.\x0d\n  this.constructed = true;\x0d\n\x0d\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\x0d\n  // immediately\x2C or on a later tick.  We set this to true at first\x2C because\x0d\n  // any actions that shouldn't happen until "later" should generally also\x0d\n  // not happen before the first read call.\x0d\n  this.sync = true;\x0d\n\x0d\n  // Whenever we return null\x2C then we set a flag to say\x0d\n  // that we're awaiting a 'readable' event emission.\x0d\n  this.needReadable = false;\x0d\n  this.emittedReadable = false;\x0d\n  this.readableListening = false;\x0d\n  this.resumeScheduled = false;\x0d\n  this[kPaused] = null;\x0d\n\x0d\n  // True if the error was already emitted and should not be thrown again.\x0d\n  this.errorEmitted = false;\x0d\n\x0d\n  // Should close be emitted on destroy. Defaults to true.\x0d\n  this.emitClose = !options || options.emitClose !== false;\x0d\n\x0d\n  // Should .destroy() be called after 'end' (and potentially 'finish').\x0d\n  this.autoDestroy = !options || options.autoDestroy !== false;\x0d\n\x0d\n  // Has it been destroyed.\x0d\n  this.destroyed = false;\x0d\n\x0d\n  // Indicates whether the stream has errored. When true no further\x0d\n  // _read calls\x2C 'data' or 'readable' events should occur. This is needed\x0d\n  // since when autoDestroy is disabled we need a way to tell whether the\x0d\n  // stream has failed.\x0d\n  this.errored = null;\x0d\n\x0d\n  // Indicates whether the stream has finished destroying.\x0d\n  this.closed = false;\x0d\n\x0d\n  // True if close has been emitted or would have been emitted\x0d\n  // depending on emitClose.\x0d\n  this.closeEmitted = false;\x0d\n\x0d\n  // Crypto is kind of old and crusty.  Historically\x2C its default string\x0d\n  // encoding is 'binary' so we have to make this configurable.\x0d\n  // Everything else in the universe uses 'utf8'\x2C though.\x0d\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\x0d\n\x0d\n  // Ref the piped dest which we need a drain event on it\x0d\n  // type: null | Writable | Set<Writable>.\x0d\n  this.awaitDrainWriters = null;\x0d\n  this.multiAwaitDrain = false;\x0d\n\x0d\n  // If true\x2C a maybeReadMore has been scheduled.\x0d\n  this.readingMore = false;\x0d\n\x0d\n  this.dataEmitted = false;\x0d\n\x0d\n  this.decoder = null;\x0d\n  this.encoding = null;\x0d\n  if (options && options.encoding) {\x0d\n    this.decoder = new StringDecoder(options.encoding);\x0d\n    this.encoding = options.encoding;\x0d\n  }\x0d\n}\x0d\n\x0d\n\x0d\nfunction Readable(options) {\x0d\n  if (!(this instanceof Readable))\x0d\n    return new Readable(options);\x0d\n\x0d\n  // Checking for a Stream.Duplex instance is faster here instead of inside\x0d\n  // the ReadableState constructor\x2C at least with V8 6.5.\x0d\n  const isDuplex = this instanceof Stream.Duplex;\x0d\n\x0d\n  this._readableState = new ReadableState(options\x2C this\x2C isDuplex);\x0d\n\x0d\n  if (options) {\x0d\n    if (typeof options.read === 'function')\x0d\n      this._read = options.read;\x0d\n\x0d\n    if (typeof options.destroy === 'function')\x0d\n      this._destroy = options.destroy;\x0d\n\x0d\n    if (typeof options.construct === 'function')\x0d\n      this._construct = options.construct;\x0d\n    if (options.signal && !isDuplex)\x0d\n      addAbortSignalNoValidate(options.signal\x2C this);\x0d\n  }\x0d\n\x0d\n  Stream.call(this\x2C options);\x0d\n\x0d\n  destroyImpl.construct(this\x2C () => {\x0d\n    if (this._readableState.needReadable) {\x0d\n      maybeReadMore(this\x2C this._readableState);\x0d\n    }\x0d\n  });\x0d\n}\x0d\n\x0d\nReadable.prototype.destroy = destroyImpl.destroy;\x0d\nReadable.prototype._undestroy = destroyImpl.undestroy;\x0d\nReadable.prototype._destroy = function(err\x2C cb) {\x0d\n  cb(err);\x0d\n};\x0d\n\x0d\nReadable.prototype[EE.captureRejectionSymbol] = function(err) {\x0d\n  this.destroy(err);\x0d\n};\x0d\n\x0d\n// Manually shove something into the read() buffer.\x0d\n// This returns true if the highWaterMark has not been hit yet\x2C\x0d\n// similar to how Writable.write() returns true if you should\x0d\n// write() some more.\x0d\nReadable.prototype.push = function(chunk\x2C encoding) {\x0d\n  return readableAddChunk(this\x2C chunk\x2C encoding\x2C false);\x0d\n};\x0d\n\x0d\n// Unshift should *always* be something directly out of read().\x0d\nReadable.prototype.unshift = function(chunk\x2C encoding) {\x0d\n  return readableAddChunk(this\x2C chunk\x2C encoding\x2C true);\x0d\n};\x0d\n\x0d\nfunction readableAddChunk(stream\x2C chunk\x2C encoding\x2C addToFront) {\x0d\n  debug('readableAddChunk'\x2C chunk);\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  let err;\x0d\n  if (!state.objectMode) {\x0d\n    if (typeof chunk === 'string') {\x0d\n      encoding = encoding || state.defaultEncoding;\x0d\n      if (state.encoding !== encoding) {\x0d\n        if (addToFront && state.encoding) {\x0d\n          // When unshifting\x2C if state.encoding is set\x2C we have to save\x0d\n          // the string in the BufferList with the state encoding.\x0d\n          chunk = Buffer.from(chunk\x2C encoding).toString(state.encoding);\x0d\n        } else {\x0d\n          chunk = Buffer.from(chunk\x2C encoding);\x0d\n          encoding = '';\x0d\n        }\x0d\n      }\x0d\n    } else if (chunk instanceof Buffer) {\x0d\n      encoding = '';\x0d\n    } else if (Stream._isUint8Array(chunk)) {\x0d\n      chunk = Stream._uint8ArrayToBuffer(chunk);\x0d\n      encoding = '';\x0d\n    } else if (chunk != null) {\x0d\n      err = new ERR_INVALID_ARG_TYPE(\x0d\n        'chunk'\x2C ['string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C chunk);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    errorOrDestroy(stream\x2C err);\x0d\n  } else if (chunk === null) {\x0d\n    state.reading = false;\x0d\n    onEofChunk(stream\x2C state);\x0d\n  } else if (state.objectMode || (chunk && chunk.length > 0)) {\x0d\n    if (addToFront) {\x0d\n      if (state.endEmitted)\x0d\n        errorOrDestroy(stream\x2C new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\x0d\n      else\x0d\n        addChunk(stream\x2C state\x2C chunk\x2C true);\x0d\n    } else if (state.ended) {\x0d\n      errorOrDestroy(stream\x2C new ERR_STREAM_PUSH_AFTER_EOF());\x0d\n    } else if (state.destroyed || state.errored) {\x0d\n      return false;\x0d\n    } else {\x0d\n      state.reading = false;\x0d\n      if (state.decoder && !encoding) {\x0d\n        chunk = state.decoder.write(chunk);\x0d\n        if (state.objectMode || chunk.length !== 0)\x0d\n          addChunk(stream\x2C state\x2C chunk\x2C false);\x0d\n        else\x0d\n          maybeReadMore(stream\x2C state);\x0d\n      } else {\x0d\n        addChunk(stream\x2C state\x2C chunk\x2C false);\x0d\n      }\x0d\n    }\x0d\n  } else if (!addToFront) {\x0d\n    state.reading = false;\x0d\n    maybeReadMore(stream\x2C state);\x0d\n  }\x0d\n\x0d\n  // We can push more data if we are below the highWaterMark.\x0d\n  // Also\x2C if we have no data yet\x2C we can stand some more bytes.\x0d\n  // This is to work around cases where hwm=0\x2C such as the repl.\x0d\n  return !state.ended &&\x0d\n    (state.length < state.highWaterMark || state.length === 0);\x0d\n}\x0d\n\x0d\nfunction addChunk(stream\x2C state\x2C chunk\x2C addToFront) {\x0d\n  if (state.flowing && state.length === 0 && !state.sync &&\x0d\n      stream.listenerCount('data') > 0) {\x0d\n    // Use the guard to avoid creating `Set()` repeatedly\x0d\n    // when we have multiple pipes.\x0d\n    if (state.multiAwaitDrain) {\x0d\n      state.awaitDrainWriters.clear();\x0d\n    } else {\x0d\n      state.awaitDrainWriters = null;\x0d\n    }\x0d\n    state.dataEmitted = true;\x0d\n    stream.emit('data'\x2C chunk);\x0d\n  } else {\x0d\n    // Update the buffer info.\x0d\n    state.length += state.objectMode ? 1 : chunk.length;\x0d\n    if (addToFront)\x0d\n      state.buffer.unshift(chunk);\x0d\n    else\x0d\n      state.buffer.push(chunk);\x0d\n\x0d\n    if (state.needReadable)\x0d\n      emitReadable(stream);\x0d\n  }\x0d\n  maybeReadMore(stream\x2C state);\x0d\n}\x0d\n\x0d\nReadable.prototype.isPaused = function() {\x0d\n  const state = this._readableState;\x0d\n  return state[kPaused] === true || state.flowing === false;\x0d\n};\x0d\n\x0d\n// Backwards compatibility.\x0d\nReadable.prototype.setEncoding = function(enc) {\x0d\n  const decoder = new StringDecoder(enc);\x0d\n  this._readableState.decoder = decoder;\x0d\n  // If setEncoding(null)\x2C decoder.encoding equals utf8.\x0d\n  this._readableState.encoding = this._readableState.decoder.encoding;\x0d\n\x0d\n  const buffer = this._readableState.buffer;\x0d\n  // Iterate over current buffer to convert already stored Buffers:\x0d\n  let content = '';\x0d\n  for (const data of buffer) {\x0d\n    content += decoder.write(data);\x0d\n  }\x0d\n  buffer.clear();\x0d\n  if (content !== '')\x0d\n    buffer.push(content);\x0d\n  this._readableState.length = content.length;\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// Don't raise the hwm > 1GB.\x0d\nconst MAX_HWM = 0x40000000;\x0d\nfunction computeNewHighWaterMark(n) {\x0d\n  if (n >= MAX_HWM) {\x0d\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\x0d\n    n = MAX_HWM;\x0d\n  } else {\x0d\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\x0d\n    // tiny amounts.\x0d\n    n--;\x0d\n    n |= n >>> 1;\x0d\n    n |= n >>> 2;\x0d\n    n |= n >>> 4;\x0d\n    n |= n >>> 8;\x0d\n    n |= n >>> 16;\x0d\n    n++;\x0d\n  }\x0d\n  return n;\x0d\n}\x0d\n\x0d\n// This function is designed to be inlinable\x2C so please take care when making\x0d\n// changes to the function body.\x0d\nfunction howMuchToRead(n\x2C state) {\x0d\n  if (n <= 0 || (state.length === 0 && state.ended))\x0d\n    return 0;\x0d\n  if (state.objectMode)\x0d\n    return 1;\x0d\n  if (NumberIsNaN(n)) {\x0d\n    // Only flow one buffer at a time.\x0d\n    if (state.flowing && state.length)\x0d\n      return state.buffer.first().length;\x0d\n    return state.length;\x0d\n  }\x0d\n  if (n <= state.length)\x0d\n    return n;\x0d\n  return state.ended ? state.length : 0;\x0d\n}\x0d\n\x0d\n// You can override either this method\x2C or the async _read(n) below.\x0d\nReadable.prototype.read = function(n) {\x0d\n  debug('read'\x2C n);\x0d\n  // Same as parseInt(undefined\x2C 10)\x2C however V8 7.3 performance regressed\x0d\n  // in this scenario\x2C so we are doing it manually.\x0d\n  if (n === undefined) {\x0d\n    n = NaN;\x0d\n  } else if (!NumberIsInteger(n)) {\x0d\n    n = NumberParseInt(n\x2C 10);\x0d\n  }\x0d\n  const state = this._readableState;\x0d\n  const nOrig = n;\x0d\n\x0d\n  // If we're asking for more than the current hwm\x2C then raise the hwm.\x0d\n  if (n > state.highWaterMark)\x0d\n    state.highWaterMark = computeNewHighWaterMark(n);\x0d\n\x0d\n  if (n !== 0)\x0d\n    state.emittedReadable = false;\x0d\n\x0d\n  // If we're doing read(0) to trigger a readable event\x2C but we\x0d\n  // already have a bunch of data in the buffer\x2C then just trigger\x0d\n  // the 'readable' event and move on.\x0d\n  if (n === 0 &&\x0d\n      state.needReadable &&\x0d\n      ((state.highWaterMark !== 0 ?\x0d\n        state.length >= state.highWaterMark :\x0d\n        state.length > 0) ||\x0d\n       state.ended)) {\x0d\n    debug('read: emitReadable'\x2C state.length\x2C state.ended);\x0d\n    if (state.length === 0 && state.ended)\x0d\n      endReadable(this);\x0d\n    else\x0d\n      emitReadable(this);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  n = howMuchToRead(n\x2C state);\x0d\n\x0d\n  // If we've ended\x2C and we're now clear\x2C then finish it up.\x0d\n  if (n === 0 && state.ended) {\x0d\n    if (state.length === 0)\x0d\n      endReadable(this);\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  // All the actual chunk generation logic needs to be\x0d\n  // *below* the call to _read.  The reason is that in certain\x0d\n  // synthetic stream cases\x2C such as passthrough streams\x2C _read\x0d\n  // may be a completely synchronous operation which may change\x0d\n  // the state of the read buffer\x2C providing enough data when\x0d\n  // before there was *not* enough.\x0d\n  //\x0d\n  // So\x2C the steps are:\x0d\n  // 1. Figure out what the state of things will be after we do\x0d\n  // a read from the buffer.\x0d\n  //\x0d\n  // 2. If that resulting state will trigger a _read\x2C then call _read.\x0d\n  // Note that this may be asynchronous\x2C or synchronous.  Yes\x2C it is\x0d\n  // deeply ugly to write APIs this way\x2C but that still doesn't mean\x0d\n  // that the Readable class should behave improperly\x2C as streams are\x0d\n  // designed to be sync/async agnostic.\x0d\n  // Take note if the _read call is sync or async (ie\x2C if the read call\x0d\n  // has returned yet)\x2C so that we know whether or not it's safe to emit\x0d\n  // 'readable' etc.\x0d\n  //\x0d\n  // 3. Actually pull the requested chunks out of the buffer and return.\x0d\n\x0d\n  // if we need a readable event\x2C then we need to do some reading.\x0d\n  let doRead = state.needReadable;\x0d\n  debug('need readable'\x2C doRead);\x0d\n\x0d\n  // If we currently have less than the highWaterMark\x2C then also read some.\x0d\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\x0d\n    doRead = true;\x0d\n    debug('length less than watermark'\x2C doRead);\x0d\n  }\x0d\n\x0d\n  // However\x2C if we've ended\x2C then there's no point\x2C if we're already\x0d\n  // reading\x2C then it's unnecessary\x2C if we're constructing we have to wait\x2C\x0d\n  // and if we're destroyed or errored\x2C then it's not allowed\x2C\x0d\n  if (state.ended || state.reading || state.destroyed || state.errored ||\x0d\n      !state.constructed) {\x0d\n    doRead = false;\x0d\n    debug('reading\x2C ended or constructing'\x2C doRead);\x0d\n  } else if (doRead) {\x0d\n    debug('do read');\x0d\n    state.reading = true;\x0d\n    state.sync = true;\x0d\n    // If the length is currently zero\x2C then we *need* a readable event.\x0d\n    if (state.length === 0)\x0d\n      state.needReadable = true;\x0d\n\x0d\n    // Call internal read method\x0d\n    this._read(state.highWaterMark);\x0d\n\x0d\n    state.sync = false;\x0d\n    // If _read pushed data synchronously\x2C then `reading` will be false\x2C\x0d\n    // and we need to re-evaluate how much data we can return to the user.\x0d\n    if (!state.reading)\x0d\n      n = howMuchToRead(nOrig\x2C state);\x0d\n  }\x0d\n\x0d\n  let ret;\x0d\n  if (n > 0)\x0d\n    ret = fromList(n\x2C state);\x0d\n  else\x0d\n    ret = null;\x0d\n\x0d\n  if (ret === null) {\x0d\n    state.needReadable = state.length <= state.highWaterMark;\x0d\n    n = 0;\x0d\n  } else {\x0d\n    state.length -= n;\x0d\n    if (state.multiAwaitDrain) {\x0d\n      state.awaitDrainWriters.clear();\x0d\n    } else {\x0d\n      state.awaitDrainWriters = null;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (state.length === 0) {\x0d\n    // If we have nothing in the buffer\x2C then we want to know\x0d\n    // as soon as we *do* get something into the buffer.\x0d\n    if (!state.ended)\x0d\n      state.needReadable = true;\x0d\n\x0d\n    // If we tried to read() past the EOF\x2C then emit end on the next tick.\x0d\n    if (nOrig !== n && state.ended)\x0d\n      endReadable(this);\x0d\n  }\x0d\n\x0d\n  if (ret !== null) {\x0d\n    state.dataEmitted = true;\x0d\n    this.emit('data'\x2C ret);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n};\x0d\n\x0d\nfunction onEofChunk(stream\x2C state) {\x0d\n  debug('onEofChunk');\x0d\n  if (state.ended) return;\x0d\n  if (state.decoder) {\x0d\n    const chunk = state.decoder.end();\x0d\n    if (chunk && chunk.length) {\x0d\n      state.buffer.push(chunk);\x0d\n      state.length += state.objectMode ? 1 : chunk.length;\x0d\n    }\x0d\n  }\x0d\n  state.ended = true;\x0d\n\x0d\n  if (state.sync) {\x0d\n    // If we are sync\x2C wait until next tick to emit the data.\x0d\n    // Otherwise we risk emitting data in the flow()\x0d\n    // the readable code triggers during a read() call.\x0d\n    emitReadable(stream);\x0d\n  } else {\x0d\n    // Emit 'readable' now to make sure it gets picked up.\x0d\n    state.needReadable = false;\x0d\n    state.emittedReadable = true;\x0d\n    // We have to emit readable now that we are EOF. Modules\x0d\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\x0d\n    emitReadable_(stream);\x0d\n  }\x0d\n}\x0d\n\x0d\n// Don't emit readable right away in sync mode\x2C because this can trigger\x0d\n// another read() call => stack overflow.  This way\x2C it might trigger\x0d\n// a nextTick recursion warning\x2C but that's not so bad.\x0d\nfunction emitReadable(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('emitReadable'\x2C state.needReadable\x2C state.emittedReadable);\x0d\n  state.needReadable = false;\x0d\n  if (!state.emittedReadable) {\x0d\n    debug('emitReadable'\x2C state.flowing);\x0d\n    state.emittedReadable = true;\x0d\n    process.nextTick(emitReadable_\x2C stream);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitReadable_(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('emitReadable_'\x2C state.destroyed\x2C state.length\x2C state.ended);\x0d\n  if (!state.destroyed && !state.errored && (state.length || state.ended)) {\x0d\n    stream.emit('readable');\x0d\n    state.emittedReadable = false;\x0d\n  }\x0d\n\x0d\n  // The stream needs another readable event if:\x0d\n  // 1. It is not flowing\x2C as the flow mechanism will take\x0d\n  //    care of it.\x0d\n  // 2. It is not ended.\x0d\n  // 3. It is below the highWaterMark\x2C so we can schedule\x0d\n  //    another readable later.\x0d\n  state.needReadable =\x0d\n    !state.flowing &&\x0d\n    !state.ended &&\x0d\n    state.length <= state.highWaterMark;\x0d\n  flow(stream);\x0d\n}\x0d\n\x0d\n\x0d\n// At this point\x2C the user has presumably seen the 'readable' event\x2C\x0d\n// and called read() to consume some data.  that may have triggered\x0d\n// in turn another _read(n) call\x2C in which case reading = true if\x0d\n// it's in progress.\x0d\n// However\x2C if we're not ended\x2C or reading\x2C and the length < hwm\x2C\x0d\n// then go ahead and try to read some more preemptively.\x0d\nfunction maybeReadMore(stream\x2C state) {\x0d\n  if (!state.readingMore && state.constructed) {\x0d\n    state.readingMore = true;\x0d\n    process.nextTick(maybeReadMore_\x2C stream\x2C state);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction maybeReadMore_(stream\x2C state) {\x0d\n  // Attempt to read more data if we should.\x0d\n  //\x0d\n  // The conditions for reading more data are (one of):\x0d\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\x0d\n  //   is responsible for filling the buffer with enough data if such data\x0d\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\x0d\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\x0d\n  //   when the stream consumer calls read() instead.\x0d\n  // - No data in the buffer\x2C and the stream is in flowing mode. In this mode\x0d\n  //   the loop below is responsible for ensuring read() is called. Failing to\x0d\n  //   call read here would abort the flow and there's no other mechanism for\x0d\n  //   continuing the flow if the stream consumer has just subscribed to the\x0d\n  //   'data' event.\x0d\n  //\x0d\n  // In addition to the above conditions to keep reading data\x2C the following\x0d\n  // conditions prevent the data from being read:\x0d\n  // - The stream has ended (state.ended).\x0d\n  // - There is already a pending 'read' operation (state.reading). This is a\x0d\n  //   case where the stream has called the implementation defined _read()\x0d\n  //   method\x2C but they are processing the call asynchronously and have _not_\x0d\n  //   called push() with new data. In this case we skip performing more\x0d\n  //   read()s. The execution ends in this method again after the _read() ends\x0d\n  //   up calling push() with more data.\x0d\n  while (!state.reading && !state.ended &&\x0d\n         (state.length < state.highWaterMark ||\x0d\n          (state.flowing && state.length === 0))) {\x0d\n    const len = state.length;\x0d\n    debug('maybeReadMore read 0');\x0d\n    stream.read(0);\x0d\n    if (len === state.length)\x0d\n      // Didn't get any data\x2C stop spinning.\x0d\n      break;\x0d\n  }\x0d\n  state.readingMore = false;\x0d\n}\x0d\n\x0d\n// Abstract method.  to be overridden in specific implementation classes.\x0d\n// call cb(er\x2C data) where data is <= n in length.\x0d\n// for virtual (non-string\x2C non-buffer) streams\x2C "length" is somewhat\x0d\n// arbitrary\x2C and perhaps not very meaningful.\x0d\nReadable.prototype._read = function(n) {\x0d\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()');\x0d\n};\x0d\n\x0d\nReadable.prototype.pipe = function(dest\x2C pipeOpts) {\x0d\n  const src = this;\x0d\n  const state = this._readableState;\x0d\n\x0d\n  if (state.pipes.length === 1) {\x0d\n    if (!state.multiAwaitDrain) {\x0d\n      state.multiAwaitDrain = true;\x0d\n      state.awaitDrainWriters = new SafeSet(\x0d\n        state.awaitDrainWriters ? [state.awaitDrainWriters] : []\x0d\n      );\x0d\n    }\x0d\n  }\x0d\n\x0d\n  state.pipes.push(dest);\x0d\n  debug('pipe count=%d opts=%j'\x2C state.pipes.length\x2C pipeOpts);\x0d\n\x0d\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) &&\x0d\n              dest !== process.stdout &&\x0d\n              dest !== process.stderr;\x0d\n\x0d\n  const endFn = doEnd ? onend : unpipe;\x0d\n  if (state.endEmitted)\x0d\n    process.nextTick(endFn);\x0d\n  else\x0d\n    src.once('end'\x2C endFn);\x0d\n\x0d\n  dest.on('unpipe'\x2C onunpipe);\x0d\n  function onunpipe(readable\x2C unpipeInfo) {\x0d\n    debug('onunpipe');\x0d\n    if (readable === src) {\x0d\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\x0d\n        unpipeInfo.hasUnpiped = true;\x0d\n        cleanup();\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  function onend() {\x0d\n    debug('onend');\x0d\n    dest.end();\x0d\n  }\x0d\n\x0d\n  let ondrain;\x0d\n\x0d\n  let cleanedUp = false;\x0d\n  function cleanup() {\x0d\n    debug('cleanup');\x0d\n    // Cleanup event handlers once the pipe is broken.\x0d\n    dest.removeListener('close'\x2C onclose);\x0d\n    dest.removeListener('finish'\x2C onfinish);\x0d\n    if (ondrain) {\x0d\n      dest.removeListener('drain'\x2C ondrain);\x0d\n    }\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n    dest.removeListener('unpipe'\x2C onunpipe);\x0d\n    src.removeListener('end'\x2C onend);\x0d\n    src.removeListener('end'\x2C unpipe);\x0d\n    src.removeListener('data'\x2C ondata);\x0d\n\x0d\n    cleanedUp = true;\x0d\n\x0d\n    // If the reader is waiting for a drain event from this\x0d\n    // specific writer\x2C then it would cause it to never start\x0d\n    // flowing again.\x0d\n    // So\x2C if this is awaiting a drain\x2C then we just call it now.\x0d\n    // If we don't know\x2C then assume that we are waiting for one.\x0d\n    if (ondrain && state.awaitDrainWriters &&\x0d\n        (!dest._writableState || dest._writableState.needDrain))\x0d\n      ondrain();\x0d\n  }\x0d\n\x0d\n  function pause() {\x0d\n    // If the user unpiped during `dest.write()`\x2C it is possible\x0d\n    // to get stuck in a permanently paused state if that write\x0d\n    // also returned false.\x0d\n    // => Check whether `dest` is still a piping destination.\x0d\n    if (!cleanedUp) {\x0d\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\x0d\n        debug('false write response\x2C pause'\x2C 0);\x0d\n        state.awaitDrainWriters = dest;\x0d\n        state.multiAwaitDrain = false;\x0d\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\x0d\n        debug('false write response\x2C pause'\x2C state.awaitDrainWriters.size);\x0d\n        state.awaitDrainWriters.add(dest);\x0d\n      }\x0d\n      src.pause();\x0d\n    }\x0d\n    if (!ondrain) {\x0d\n      // When the dest drains\x2C it reduces the awaitDrain counter\x0d\n      // on the source.  This would be more elegant with a .once()\x0d\n      // handler in flow()\x2C but adding and removing repeatedly is\x0d\n      // too slow.\x0d\n      ondrain = pipeOnDrain(src\x2C dest);\x0d\n      dest.on('drain'\x2C ondrain);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  src.on('data'\x2C ondata);\x0d\n  function ondata(chunk) {\x0d\n    debug('ondata');\x0d\n    const ret = dest.write(chunk);\x0d\n    debug('dest.write'\x2C ret);\x0d\n    if (ret === false) {\x0d\n      pause();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // If the dest has an error\x2C then stop piping into it.\x0d\n  // However\x2C don't suppress the throwing behavior for this.\x0d\n  function onerror(er) {\x0d\n    debug('onerror'\x2C er);\x0d\n    unpipe();\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n    if (dest.listenerCount('error') === 0) {\x0d\n      const s = dest._writableState || dest._readableState;\x0d\n      if (s && !s.errorEmitted) {\x0d\n        // User incorrectly emitted 'error' directly on the stream.\x0d\n        errorOrDestroy(dest\x2C er);\x0d\n      } else {\x0d\n        dest.emit('error'\x2C er);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Make sure our error handler is attached before userland ones.\x0d\n  prependListener(dest\x2C 'error'\x2C onerror);\x0d\n\x0d\n  // Both close and finish should trigger unpipe\x2C but only once.\x0d\n  function onclose() {\x0d\n    dest.removeListener('finish'\x2C onfinish);\x0d\n    unpipe();\x0d\n  }\x0d\n  dest.once('close'\x2C onclose);\x0d\n  function onfinish() {\x0d\n    debug('onfinish');\x0d\n    dest.removeListener('close'\x2C onclose);\x0d\n    unpipe();\x0d\n  }\x0d\n  dest.once('finish'\x2C onfinish);\x0d\n\x0d\n  function unpipe() {\x0d\n    debug('unpipe');\x0d\n    src.unpipe(dest);\x0d\n  }\x0d\n\x0d\n  // Tell the dest that it's being piped to.\x0d\n  dest.emit('pipe'\x2C src);\x0d\n\x0d\n  // Start the flow if it hasn't been started already.\x0d\n\x0d\n  if (dest.writableNeedDrain === true) {\x0d\n    if (state.flowing) {\x0d\n      pause();\x0d\n    }\x0d\n  } else if (!state.flowing) {\x0d\n    debug('pipe resume');\x0d\n    src.resume();\x0d\n  }\x0d\n\x0d\n  return dest;\x0d\n};\x0d\n\x0d\nfunction pipeOnDrain(src\x2C dest) {\x0d\n  return function pipeOnDrainFunctionResult() {\x0d\n    const state = src._readableState;\x0d\n\x0d\n    // `ondrain` will call directly\x2C\x0d\n    // `this` maybe not a reference to dest\x2C\x0d\n    // so we use the real dest here.\x0d\n    if (state.awaitDrainWriters === dest) {\x0d\n      debug('pipeOnDrain'\x2C 1);\x0d\n      state.awaitDrainWriters = null;\x0d\n    } else if (state.multiAwaitDrain) {\x0d\n      debug('pipeOnDrain'\x2C state.awaitDrainWriters.size);\x0d\n      state.awaitDrainWriters.delete(dest);\x0d\n    }\x0d\n\x0d\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) &&\x0d\n      src.listenerCount('data')) {\x0d\n      src.resume();\x0d\n    }\x0d\n  };\x0d\n}\x0d\n\x0d\n\x0d\nReadable.prototype.unpipe = function(dest) {\x0d\n  const state = this._readableState;\x0d\n  const unpipeInfo = { hasUnpiped: false };\x0d\n\x0d\n  // If we're not piping anywhere\x2C then do nothing.\x0d\n  if (state.pipes.length === 0)\x0d\n    return this;\x0d\n\x0d\n  if (!dest) {\x0d\n    // remove all.\x0d\n    const dests = state.pipes;\x0d\n    state.pipes = [];\x0d\n    this.pause();\x0d\n\x0d\n    for (let i = 0; i < dests.length; i++)\x0d\n      dests[i].emit('unpipe'\x2C this\x2C { hasUnpiped: false });\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  // Try to find the right one.\x0d\n  const index = ArrayPrototypeIndexOf(state.pipes\x2C dest);\x0d\n  if (index === -1)\x0d\n    return this;\x0d\n\x0d\n  state.pipes.splice(index\x2C 1);\x0d\n  if (state.pipes.length === 0)\x0d\n    this.pause();\x0d\n\x0d\n  dest.emit('unpipe'\x2C this\x2C unpipeInfo);\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// Set up data events if they are asked for\x0d\n// Ensure readable listeners eventually get something.\x0d\nReadable.prototype.on = function(ev\x2C fn) {\x0d\n  const res = Stream.prototype.on.call(this\x2C ev\x2C fn);\x0d\n  const state = this._readableState;\x0d\n\x0d\n  if (ev === 'data') {\x0d\n    // Update readableListening so that resume() may be a no-op\x0d\n    // a few lines down. This is needed to support once('readable').\x0d\n    state.readableListening = this.listenerCount('readable') > 0;\x0d\n\x0d\n    // Try start flowing on next tick if stream isn't explicitly paused.\x0d\n    if (state.flowing !== false)\x0d\n      this.resume();\x0d\n  } else if (ev === 'readable') {\x0d\n    if (!state.endEmitted && !state.readableListening) {\x0d\n      state.readableListening = state.needReadable = true;\x0d\n      state.flowing = false;\x0d\n      state.emittedReadable = false;\x0d\n      debug('on readable'\x2C state.length\x2C state.reading);\x0d\n      if (state.length) {\x0d\n        emitReadable(this);\x0d\n      } else if (!state.reading) {\x0d\n        process.nextTick(nReadingNextTick\x2C this);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\nReadable.prototype.addListener = Readable.prototype.on;\x0d\n\x0d\nReadable.prototype.removeListener = function(ev\x2C fn) {\x0d\n  const res = Stream.prototype.removeListener.call(this\x2C\x0d\n                                                   ev\x2C fn);\x0d\n\x0d\n  if (ev === 'readable') {\x0d\n    // We need to check if there is someone still listening to\x0d\n    // readable and reset the state. However this needs to happen\x0d\n    // after readable has been emitted but before I/O (nextTick) to\x0d\n    // support once('readable'\x2C fn) cycles. This means that calling\x0d\n    // resume within the same tick will have no\x0d\n    // effect.\x0d\n    process.nextTick(updateReadableListening\x2C this);\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\nReadable.prototype.off = Readable.prototype.removeListener;\x0d\n\x0d\nReadable.prototype.removeAllListeners = function(ev) {\x0d\n  const res = Stream.prototype.removeAllListeners.apply(this\x2C\x0d\n                                                        arguments);\x0d\n\x0d\n  if (ev === 'readable' || ev === undefined) {\x0d\n    // We need to check if there is someone still listening to\x0d\n    // readable and reset the state. However this needs to happen\x0d\n    // after readable has been emitted but before I/O (nextTick) to\x0d\n    // support once('readable'\x2C fn) cycles. This means that calling\x0d\n    // resume within the same tick will have no\x0d\n    // effect.\x0d\n    process.nextTick(updateReadableListening\x2C this);\x0d\n  }\x0d\n\x0d\n  return res;\x0d\n};\x0d\n\x0d\nfunction updateReadableListening(self) {\x0d\n  const state = self._readableState;\x0d\n  state.readableListening = self.listenerCount('readable') > 0;\x0d\n\x0d\n  if (state.resumeScheduled && state[kPaused] === false) {\x0d\n    // Flowing needs to be set to true now\x2C otherwise\x0d\n    // the upcoming resume will not flow.\x0d\n    state.flowing = true;\x0d\n\x0d\n    // Crude way to check if we should resume.\x0d\n  } else if (self.listenerCount('data') > 0) {\x0d\n    self.resume();\x0d\n  } else if (!state.readableListening) {\x0d\n    state.flowing = null;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction nReadingNextTick(self) {\x0d\n  debug('readable nexttick read 0');\x0d\n  self.read(0);\x0d\n}\x0d\n\x0d\n// pause() and resume() are remnants of the legacy readable stream API\x0d\n// If the user uses them\x2C then switch into old mode.\x0d\nReadable.prototype.resume = function() {\x0d\n  const state = this._readableState;\x0d\n  if (!state.flowing) {\x0d\n    debug('resume');\x0d\n    // We flow only if there is no one listening\x0d\n    // for readable\x2C but we still have to call\x0d\n    // resume().\x0d\n    state.flowing = !state.readableListening;\x0d\n    resume(this\x2C state);\x0d\n  }\x0d\n  state[kPaused] = false;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction resume(stream\x2C state) {\x0d\n  if (!state.resumeScheduled) {\x0d\n    state.resumeScheduled = true;\x0d\n    process.nextTick(resume_\x2C stream\x2C state);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction resume_(stream\x2C state) {\x0d\n  debug('resume'\x2C state.reading);\x0d\n  if (!state.reading) {\x0d\n    stream.read(0);\x0d\n  }\x0d\n\x0d\n  state.resumeScheduled = false;\x0d\n  stream.emit('resume');\x0d\n  flow(stream);\x0d\n  if (state.flowing && !state.reading)\x0d\n    stream.read(0);\x0d\n}\x0d\n\x0d\nReadable.prototype.pause = function() {\x0d\n  debug('call pause flowing=%j'\x2C this._readableState.flowing);\x0d\n  if (this._readableState.flowing !== false) {\x0d\n    debug('pause');\x0d\n    this._readableState.flowing = false;\x0d\n    this.emit('pause');\x0d\n  }\x0d\n  this._readableState[kPaused] = true;\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction flow(stream) {\x0d\n  const state = stream._readableState;\x0d\n  debug('flow'\x2C state.flowing);\x0d\n  while (state.flowing && stream.read() !== null);\x0d\n}\x0d\n\x0d\n// Wrap an old-style stream as the async data source.\x0d\n// This is *not* part of the readable stream interface.\x0d\n// It is an ugly unfortunate mess of history.\x0d\nReadable.prototype.wrap = function(stream) {\x0d\n  let paused = false;\x0d\n\x0d\n  // TODO (ronag): Should this.destroy(err) emit\x0d\n  // 'error' on the wrapped stream? Would require\x0d\n  // a static factory method\x2C e.g. Readable.wrap(stream).\x0d\n\x0d\n  stream.on('data'\x2C (chunk) => {\x0d\n    if (!this.push(chunk) && stream.pause) {\x0d\n      paused = true;\x0d\n      stream.pause();\x0d\n    }\x0d\n  });\x0d\n\x0d\n  stream.on('end'\x2C () => {\x0d\n    this.push(null);\x0d\n  });\x0d\n\x0d\n  stream.on('error'\x2C (err) => {\x0d\n    errorOrDestroy(this\x2C err);\x0d\n  });\x0d\n\x0d\n  stream.on('close'\x2C () => {\x0d\n    this.destroy();\x0d\n  });\x0d\n\x0d\n  stream.on('destroy'\x2C () => {\x0d\n    this.destroy();\x0d\n  });\x0d\n\x0d\n  this._read = () => {\x0d\n    if (paused && stream.resume) {\x0d\n      paused = false;\x0d\n      stream.resume();\x0d\n    }\x0d\n  };\x0d\n\x0d\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\x0d\n  const streamKeys = ObjectKeys(stream);\x0d\n  for (let j = 1; j < streamKeys.length; j++) {\x0d\n    const i = streamKeys[j];\x0d\n    if (this[i] === undefined && typeof stream[i] === 'function') {\x0d\n      this[i] = stream[i].bind(stream);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nReadable.prototype[SymbolAsyncIterator] = function() {\x0d\n  return streamToAsyncIterator(this);\x0d\n};\x0d\n\x0d\nReadable.prototype.iterator = function(options) {\x0d\n  if (options !== undefined) {\x0d\n    validateObject(options\x2C 'options');\x0d\n  }\x0d\n  return streamToAsyncIterator(this\x2C options);\x0d\n};\x0d\n\x0d\nfunction streamToAsyncIterator(stream\x2C options) {\x0d\n  if (typeof stream.read !== 'function') {\x0d\n    stream = Readable.wrap(stream\x2C { objectMode: true });\x0d\n  }\x0d\n\x0d\n  const iter = createAsyncIterator(stream\x2C options);\x0d\n  iter.stream = stream;\x0d\n  return iter;\x0d\n}\x0d\n\x0d\nasync function* createAsyncIterator(stream\x2C options) {\x0d\n  let callback = nop;\x0d\n\x0d\n  const opts = {\x0d\n    destroyOnReturn: true\x2C\x0d\n    destroyOnError: true\x2C\x0d\n    ...options\x2C\x0d\n  };\x0d\n\x0d\n  function next(resolve) {\x0d\n    if (this === stream) {\x0d\n      callback();\x0d\n      callback = nop;\x0d\n    } else {\x0d\n      callback = resolve;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  let error = state.errored;\x0d\n  let errorEmitted = state.errorEmitted;\x0d\n  let endEmitted = state.endEmitted;\x0d\n  let closeEmitted = state.closeEmitted;\x0d\n\x0d\n  stream\x0d\n    .on('readable'\x2C next)\x0d\n    .on('error'\x2C function(err) {\x0d\n      error = err;\x0d\n      errorEmitted = true;\x0d\n      next.call(this);\x0d\n    })\x0d\n    .on('end'\x2C function() {\x0d\n      endEmitted = true;\x0d\n      next.call(this);\x0d\n    })\x0d\n    .on('close'\x2C function() {\x0d\n      closeEmitted = true;\x0d\n      next.call(this);\x0d\n    });\x0d\n\x0d\n  let errorThrown = false;\x0d\n  try {\x0d\n    while (true) {\x0d\n      const chunk = stream.destroyed ? null : stream.read();\x0d\n      if (chunk !== null) {\x0d\n        yield chunk;\x0d\n      } else if (errorEmitted) {\x0d\n        throw error;\x0d\n      } else if (endEmitted) {\x0d\n        break;\x0d\n      } else if (closeEmitted) {\x0d\n        break;\x0d\n      } else {\x0d\n        await new Promise(next);\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    if (opts.destroyOnError) {\x0d\n      destroyImpl.destroyer(stream\x2C err);\x0d\n    }\x0d\n    errorThrown = true;\x0d\n    throw err;\x0d\n  } finally {\x0d\n    if (!errorThrown && opts.destroyOnReturn) {\x0d\n      if (state.autoDestroy || !endEmitted) {\x0d\n        // TODO(ronag): ERR_PREMATURE_CLOSE?\x0d\n        destroyImpl.destroyer(stream\x2C null);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Making it explicit these properties are not enumerable\x0d\n// because otherwise some prototype manipulation in\x0d\n// userland will fail.\x0d\nObjectDefineProperties(Readable.prototype\x2C {\x0d\n  readable: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      const r = this._readableState;\x0d\n      // r.readable === false means that this is part of a Duplex stream\x0d\n      // where the readable side was disabled upon construction.\x0d\n      // Compat. The user might manually disable readable side through\x0d\n      // deprecated setter.\x0d\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted &&\x0d\n        !r.endEmitted;\x0d\n    }\x2C\x0d\n    set(val) {\x0d\n      // Backwards compat.\x0d\n      if (this._readableState) {\x0d\n        this._readableState.readable = !!val;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableDidRead: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.dataEmitted;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableAborted: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return !!(\x0d\n        this._readableState.readable !== false &&\x0d\n        (this._readableState.destroyed || this._readableState.errored) &&\x0d\n        !this._readableState.endEmitted\x0d\n      );\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableHighWaterMark: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.highWaterMark;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableBuffer: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState && this._readableState.buffer;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableFlowing: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return this._readableState.flowing;\x0d\n    }\x2C\x0d\n    set: function(state) {\x0d\n      if (this._readableState) {\x0d\n        this._readableState.flowing = state;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableLength: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState.length;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableObjectMode: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.objectMode : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableEncoding: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.encoding : null;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  destroyed: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      if (this._readableState === undefined) {\x0d\n        return false;\x0d\n      }\x0d\n      return this._readableState.destroyed;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // We ignore the value if the stream\x0d\n      // has not been initialized yet.\x0d\n      if (!this._readableState) {\x0d\n        return;\x0d\n      }\x0d\n\x0d\n      // Backward compatibility\x2C the user is explicitly\x0d\n      // managing destroyed.\x0d\n      this._readableState.destroyed = value;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  readableEnded: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get() {\x0d\n      return this._readableState ? this._readableState.endEmitted : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n});\x0d\n\x0d\nObjectDefineProperties(ReadableState.prototype\x2C {\x0d\n  // Legacy getter for `pipesCount`.\x0d\n  pipesCount: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this.pipes.length;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  // Legacy property for `paused`.\x0d\n  paused: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this[kPaused] !== false;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      this[kPaused] = !!value;\x0d\n    }\x0d\n  }\x0d\n});\x0d\n\x0d\n// Exposed for testing purposes only.\x0d\nReadable._fromList = fromList;\x0d\n\x0d\n// Pluck off n bytes from an array of buffers.\x0d\n// Length is the combined lengths of all the buffers in the list.\x0d\n// This function is designed to be inlinable\x2C so please take care when making\x0d\n// changes to the function body.\x0d\nfunction fromList(n\x2C state) {\x0d\n  // nothing buffered.\x0d\n  if (state.length === 0)\x0d\n    return null;\x0d\n\x0d\n  let ret;\x0d\n  if (state.objectMode)\x0d\n    ret = state.buffer.shift();\x0d\n  else if (!n || n >= state.length) {\x0d\n    // Read it all\x2C truncate the list.\x0d\n    if (state.decoder)\x0d\n      ret = state.buffer.join('');\x0d\n    else if (state.buffer.length === 1)\x0d\n      ret = state.buffer.first();\x0d\n    else\x0d\n      ret = state.buffer.concat(state.length);\x0d\n    state.buffer.clear();\x0d\n  } else {\x0d\n    // read part of list.\x0d\n    ret = state.buffer.consume(n\x2C state.decoder);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n}\x0d\n\x0d\nfunction endReadable(stream) {\x0d\n  const state = stream._readableState;\x0d\n\x0d\n  debug('endReadable'\x2C state.endEmitted);\x0d\n  if (!state.endEmitted) {\x0d\n    state.ended = true;\x0d\n    process.nextTick(endReadableNT\x2C state\x2C stream);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction endReadableNT(state\x2C stream) {\x0d\n  debug('endReadableNT'\x2C state.endEmitted\x2C state.length);\x0d\n\x0d\n  // Check that we didn't get one last unshift.\x0d\n  if (!state.errorEmitted && !state.closeEmitted &&\x0d\n      !state.endEmitted && state.length === 0) {\x0d\n    state.endEmitted = true;\x0d\n    stream.emit('end');\x0d\n\x0d\n    if (stream.writable && stream.allowHalfOpen === false) {\x0d\n      process.nextTick(endWritableNT\x2C stream);\x0d\n    } else if (state.autoDestroy) {\x0d\n      // In case of duplex streams we need a way to detect\x0d\n      // if the writable side is ready for autoDestroy as well.\x0d\n      const wState = stream._writableState;\x0d\n      const autoDestroy = !wState || (\x0d\n        wState.autoDestroy &&\x0d\n        // We don't expect the writable to ever 'finish'\x0d\n        // if writable is explicitly set to false.\x0d\n        (wState.finished || wState.writable === false)\x0d\n      );\x0d\n\x0d\n      if (autoDestroy) {\x0d\n        stream.destroy();\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction endWritableNT(stream) {\x0d\n  const writable = stream.writable && !stream.writableEnded &&\x0d\n    !stream.destroyed;\x0d\n  if (writable) {\x0d\n    stream.end();\x0d\n  }\x0d\n}\x0d\n\x0d\nReadable.from = function(iterable\x2C opts) {\x0d\n  return from(Readable\x2C iterable\x2C opts);\x0d\n};\x0d\n\x0d\nReadable.wrap = function(src\x2C options) {\x0d\n  return new Readable({\x0d\n    objectMode: src.readableObjectMode ?? src.objectMode ?? true\x2C\x0d\n    ...options\x2C\x0d\n    destroy(err\x2C callback) {\x0d\n      destroyImpl.destroyer(src\x2C err);\x0d\n      callback(err);\x0d\n    }\x0d\n  }).wrap(src);\x0d\n};\x0d\n
code-source-info,0x24a76c688de,58,6426,7336,C0O6426C9O6441C16O6452C21O6479C28O6486C33O6508C34O6667C41O6683C44O6690C48O6672C52O6703C71O6725C76O6723C80O6774C84O6813C92O6841C95O6862C99O6852C103O6894C111O6925C114O6949C118O6939C122O6984C130O7017C133O7043C137O7033C141O7071C149O7082C151O7099C158O7132C166O7099C171O7157C178O7164C186O7164C192O7190C199O7202C212O7202C219O7335,,
code-creation,LazyCompile,10,818339,0x24a76c6b716,18,Stream node:internal/streams/legacy:10:16,0x1b78578eb80,~
script-source,59,node:internal/streams/legacy,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayIsArray\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst EE = require('events');\x0d\n\x0d\nfunction Stream(opts) {\x0d\n  EE.call(this\x2C opts);\x0d\n}\x0d\nObjectSetPrototypeOf(Stream.prototype\x2C EE.prototype);\x0d\nObjectSetPrototypeOf(Stream\x2C EE);\x0d\n\x0d\nStream.prototype.pipe = function(dest\x2C options) {\x0d\n  const source = this;\x0d\n\x0d\n  function ondata(chunk) {\x0d\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\x0d\n      source.pause();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  source.on('data'\x2C ondata);\x0d\n\x0d\n  function ondrain() {\x0d\n    if (source.readable && source.resume) {\x0d\n      source.resume();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  dest.on('drain'\x2C ondrain);\x0d\n\x0d\n  // If the 'end' option is not supplied\x2C dest.end() will be called when\x0d\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\x0d\n  if (!dest._isStdio && (!options || options.end !== false)) {\x0d\n    source.on('end'\x2C onend);\x0d\n    source.on('close'\x2C onclose);\x0d\n  }\x0d\n\x0d\n  let didOnEnd = false;\x0d\n  function onend() {\x0d\n    if (didOnEnd) return;\x0d\n    didOnEnd = true;\x0d\n\x0d\n    dest.end();\x0d\n  }\x0d\n\x0d\n\x0d\n  function onclose() {\x0d\n    if (didOnEnd) return;\x0d\n    didOnEnd = true;\x0d\n\x0d\n    if (typeof dest.destroy === 'function') dest.destroy();\x0d\n  }\x0d\n\x0d\n  // Don't leave dangling pipes when there are errors.\x0d\n  function onerror(er) {\x0d\n    cleanup();\x0d\n    if (EE.listenerCount(this\x2C 'error') === 0) {\x0d\n      this.emit('error'\x2C er);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  prependListener(source\x2C 'error'\x2C onerror);\x0d\n  prependListener(dest\x2C 'error'\x2C onerror);\x0d\n\x0d\n  // Remove all the event listeners that were added.\x0d\n  function cleanup() {\x0d\n    source.removeListener('data'\x2C ondata);\x0d\n    dest.removeListener('drain'\x2C ondrain);\x0d\n\x0d\n    source.removeListener('end'\x2C onend);\x0d\n    source.removeListener('close'\x2C onclose);\x0d\n\x0d\n    source.removeListener('error'\x2C onerror);\x0d\n    dest.removeListener('error'\x2C onerror);\x0d\n\x0d\n    source.removeListener('end'\x2C cleanup);\x0d\n    source.removeListener('close'\x2C cleanup);\x0d\n\x0d\n    dest.removeListener('close'\x2C cleanup);\x0d\n  }\x0d\n\x0d\n  source.on('end'\x2C cleanup);\x0d\n  source.on('close'\x2C cleanup);\x0d\n\x0d\n  dest.on('close'\x2C cleanup);\x0d\n  dest.emit('pipe'\x2C source);\x0d\n\x0d\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\x0d\n  return dest;\x0d\n};\x0d\n\x0d\nfunction prependListener(emitter\x2C event\x2C fn) {\x0d\n  // Sadly this is not cacheable as some libraries bundle their own\x0d\n  // event emitter implementation with them.\x0d\n  if (typeof emitter.prependListener === 'function')\x0d\n    return emitter.prependListener(event\x2C fn);\x0d\n\x0d\n  // This is a hack to make sure that our error handler is attached before any\x0d\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\x0d\n  // to continue to work with older versions of Node.js that do not include\x0d\n  // the prependListener() method. The goal is to eventually remove this hack.\x0d\n  if (!emitter._events || !emitter._events[event])\x0d\n    emitter.on(event\x2C fn);\x0d\n  else if (ArrayIsArray(emitter._events[event]))\x0d\n    emitter._events[event].unshift(fn);\x0d\n  else\x0d\n    emitter._events[event] = [fn\x2C emitter._events[event]];\x0d\n}\x0d\n\x0d\nmodule.exports = { Stream\x2C prependListener };\x0d\n
code-source-info,0x24a76c6b716,59,136,171,C0O148C5O151C10O151C17O170,,
code-creation,LazyCompile,10,819156,0x24a76c6bff6,354,ReadableState node:internal/streams/readable:78:23,0x1b78578c2d0,~
code-source-info,0x24a76c6bff
tick,0x7ff6d64ac699,819494,0,0x0,0,0x7ff6d6414a10,0x24a76c6c017,0x24a76c68925,0x24a76c6825a,0x24a76c67cd3,0x24a76c66f24,0x24a76c66b52,0x24a76c65d4f,0x7ff6d66cf153,0x246eeedf107,0x246eeedf3a1,0x65ec1e5888,0x7ff6d5cf53f0,0x65ec1e559a,0x65ec1e52dd,0x65ec1e483b,0x65ec1e4642,0x246eeeeab23,0x7ff6d6643c13
code-creation,LazyCompile,10,819579,0x24a76c6c406,98,getHighWaterMark node:internal/streams/state:19:26,0x1b7857916a0,~
script-source,62,node:internal/streams/state,'use strict';\x0d\n\x0d\nconst {\x0d\n  MathFloor\x2C\x0d\n  NumberIsInteger\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;\x0d\n\x0d\nfunction highWaterMarkFrom(options\x2C isDuplex\x2C duplexKey) {\x0d\n  return options.highWaterMark != null ? options.highWaterMark :\x0d\n    isDuplex ? options[duplexKey] : null;\x0d\n}\x0d\n\x0d\nfunction getDefaultHighWaterMark(objectMode) {\x0d\n  return objectMode ? 16 : 16 * 1024;\x0d\n}\x0d\n\x0d\nfunction getHighWaterMark(state\x2C options\x2C duplexKey\x2C isDuplex) {\x0d\n  const hwm = highWaterMarkFrom(options\x2C isDuplex\x2C duplexKey);\x0d\n  if (hwm != null) {\x0d\n    if (!NumberIsInteger(hwm) || hwm < 0) {\x0d\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark';\x0d\n      throw new ERR_INVALID_ARG_VALUE(name\x2C hwm);\x0d\n    }\x0d\n    return MathFloor(hwm);\x0d\n  }\x0d\n\x0d\n  // Default value\x0d\n  return getDefaultHighWaterMark(state.objectMode);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n};\x0d\n
code-source-info,0x24a76c6c406,62,442,862,C0O497C12O497C18O549C21O573C26O578C33O606C38O633C47O655C56O701C69O707C74O701C75O757C80O764C84O779C85O810C88O847C93O817C97O859,,
code-creation,LazyCompile,10,819770,0x24a76c6c69e,26,highWaterMarkFrom node:internal/streams/state:10:27,0x1b785791540,~
code-source-info,0x24a76c6c69e,62,177,321,C0O228C7O260C15O281C19O299C25O318,,
code-creation,LazyCompile,10,819846,0x24a76c6c776,13,getDefaultHighWaterMark node:internal/streams/state:15:33,0x1b785791650,~
code-source-info,0x24a76c6c776,62,357,413,C0O375C12O410,,
code-creation,LazyCompile,10,819938,0x24a76c6c856,17,BufferList node:internal/streams/buffer_list:14:14,0x1b7857909f8,~
script-source,61,node:internal/streams/buffer_list,'use strict';\x0d\n\x0d\nconst {\x0d\n  StringPrototypeSlice\x2C\x0d\n  SymbolIterator\x2C\x0d\n  TypedArrayPrototypeSet\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nmodule.exports = class BufferList {\x0d\n  constructor() {\x0d\n    this.head = null;\x0d\n    this.tail = null;\x0d\n    this.length = 0;\x0d\n  }\x0d\n\x0d\n  push(v) {\x0d\n    const entry = { data: v\x2C next: null };\x0d\n    if (this.length > 0)\x0d\n      this.tail.next = entry;\x0d\n    else\x0d\n      this.head = entry;\x0d\n    this.tail = entry;\x0d\n    ++this.length;\x0d\n  }\x0d\n\x0d\n  unshift(v) {\x0d\n    const entry = { data: v\x2C next: this.head };\x0d\n    if (this.length === 0)\x0d\n      this.tail = entry;\x0d\n    this.head = entry;\x0d\n    ++this.length;\x0d\n  }\x0d\n\x0d\n  shift() {\x0d\n    if (this.length === 0)\x0d\n      return;\x0d\n    const ret = this.head.data;\x0d\n    if (this.length === 1)\x0d\n      this.head = this.tail = null;\x0d\n    else\x0d\n      this.head = this.head.next;\x0d\n    --this.length;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  clear() {\x0d\n    this.head = this.tail = null;\x0d\n    this.length = 0;\x0d\n  }\x0d\n\x0d\n  join(s) {\x0d\n    if (this.length === 0)\x0d\n      return '';\x0d\n    let p = this.head;\x0d\n    let ret = '' + p.data;\x0d\n    while ((p = p.next) !== null)\x0d\n      ret += s + p.data;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  concat(n) {\x0d\n    if (this.length === 0)\x0d\n      return Buffer.alloc(0);\x0d\n    const ret = Buffer.allocUnsafe(n >>> 0);\x0d\n    let p = this.head;\x0d\n    let i = 0;\x0d\n    while (p) {\x0d\n      TypedArrayPrototypeSet(ret\x2C p.data\x2C i);\x0d\n      i += p.data.length;\x0d\n      p = p.next;\x0d\n    }\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of bytes or characters from the buffered data.\x0d\n  consume(n\x2C hasStrings) {\x0d\n    const data = this.head.data;\x0d\n    if (n < data.length) {\x0d\n      // `slice` is the same for buffers and strings.\x0d\n      const slice = data.slice(0\x2C n);\x0d\n      this.head.data = data.slice(n);\x0d\n      return slice;\x0d\n    }\x0d\n    if (n === data.length) {\x0d\n      // First chunk is a perfect match.\x0d\n      return this.shift();\x0d\n    }\x0d\n    // Result spans more than one buffer.\x0d\n    return hasStrings ? this._getString(n) : this._getBuffer(n);\x0d\n  }\x0d\n\x0d\n  first() {\x0d\n    return this.head.data;\x0d\n  }\x0d\n\x0d\n  *[SymbolIterator]() {\x0d\n    for (let p = this.head; p; p = p.next) {\x0d\n      yield p.data;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of characters from the buffered data.\x0d\n  _getString(n) {\x0d\n    let ret = '';\x0d\n    let p = this.head;\x0d\n    let c = 0;\x0d\n    do {\x0d\n      const str = p.data;\x0d\n      if (n > str.length) {\x0d\n        ret += str;\x0d\n        n -= str.length;\x0d\n      } else {\x0d\n        if (n === str.length) {\x0d\n          ret += str;\x0d\n          ++c;\x0d\n          if (p.next)\x0d\n            this.head = p.next;\x0d\n          else\x0d\n            this.head = this.tail = null;\x0d\n        } else {\x0d\n          ret += StringPrototypeSlice(str\x2C 0\x2C n);\x0d\n          this.head = p;\x0d\n          p.data = StringPrototypeSlice(str\x2C n);\x0d\n        }\x0d\n        break;\x0d\n      }\x0d\n      ++c;\x0d\n    } while ((p = p.next) !== null);\x0d\n    this.length -= c;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Consumes a specified amount of bytes from the buffered data.\x0d\n  _getBuffer(n) {\x0d\n    const ret = Buffer.allocUnsafe(n);\x0d\n    const retLen = n;\x0d\n    let p = this.head;\x0d\n    let c = 0;\x0d\n    do {\x0d\n      const buf = p.data;\x0d\n      if (n > buf.length) {\x0d\n        TypedArrayPrototypeSet(ret\x2C buf\x2C retLen - n);\x0d\n        n -= buf.length;\x0d\n      } else {\x0d\n        if (n === buf.length) {\x0d\n          TypedArrayPrototypeSet(ret\x2C buf\x2C retLen - n);\x0d\n          ++c;\x0d\n          if (p.next)\x0d\n            this.head = p.next;\x0d\n          else\x0d\n            this.head = this.tail = null;\x0d\n        } else {\x0d\n          TypedArrayPrototypeSet(ret\x2C\x0d\n                                 new Uint8Array(buf.buffer\x2C buf.byteOffset\x2C n)\x2C\x0d\n                                 retLen - n);\x0d\n          this.head = p;\x0d\n          p.data = buf.slice(n);\x0d\n        }\x0d\n        break;\x0d\n      }\x0d\n      ++c;\x0d\n    } while ((p = p.next) !== null);\x0d\n    this.length -= c;\x0d\n    return ret;\x0d\n  }\x0d\n\x0d\n  // Make sure the linked list only shows the minimal necessary information.\x0d\n  [inspect.custom](_\x2C options) {\x0d\n    return inspect(this\x2C {\x0d\n      ...options\x2C\x0d\n      // Only inspect one level.\x0d\n      depth: 0\x2C\x0d\n      // It should not recurse.\x0d\n      customInspect: false\x0d\n    });\x0d\n  }\x0d\n};\x0d\n
code-source-info,0x24a76c6c856,61,278,355,C0O288C1O298C5O311C6O321C10O334C11O346C16O354,,
code-creation,LazyCompile,10,820525,0x24a76c6cfe6,98,construct node:internal/streams/destroy:225:19,0x32ebb7fe720,~
script-source,56,node:internal/streams/destroy,'use strict';\x0d\n\x0d\nconst {\x0d\n  aggregateTwoErrors\x2C\x0d\n  codes: {\x0d\n    ERR_MULTIPLE_CALLBACK\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\nconst {\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst kDestroy = Symbol('kDestroy');\x0d\nconst kConstruct = Symbol('kConstruct');\x0d\n\x0d\nfunction checkError(err\x2C w\x2C r) {\x0d\n  if (err) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    err.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (w && !w.errored) {\x0d\n      w.errored = err;\x0d\n    }\x0d\n    if (r && !r.errored) {\x0d\n      r.errored = err;\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\n// Backwards compat. cb() is undocumented and unused in core but\x0d\n// unfortunately might be used by modules.\x0d\nfunction destroy(err\x2C cb) {\x0d\n  const r = this._readableState;\x0d\n  const w = this._writableState;\x0d\n  // With duplex streams we use the writable side for state.\x0d\n  const s = w || r;\x0d\n\x0d\n  if (w?.destroyed || r?.destroyed) {\x0d\n    if (typeof cb === 'function') {\x0d\n      cb();\x0d\n    }\x0d\n\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n\x0d\n  // We set destroyed to true before firing error callbacks in order\x0d\n  // to make it re-entrance safe in case destroy() is called within callbacks\x0d\n  checkError(err\x2C w\x2C r);\x0d\n\x0d\n  if (w) {\x0d\n    w.destroyed = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.destroyed = true;\x0d\n  }\x0d\n\x0d\n  // If still constructing then defer calling _destroy.\x0d\n  if (!s.constructed) {\x0d\n    this.once(kDestroy\x2C function(er) {\x0d\n      _destroy(this\x2C aggregateTwoErrors(er\x2C err)\x2C cb);\x0d\n    });\x0d\n  } else {\x0d\n    _destroy(this\x2C err\x2C cb);\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n}\x0d\n\x0d\nfunction _destroy(self\x2C err\x2C cb) {\x0d\n  let called = false;\x0d\n\x0d\n  function onDestroy(err) {\x0d\n    if (called) {\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    const r = self._readableState;\x0d\n    const w = self._writableState;\x0d\n\x0d\n    checkError(err\x2C w\x2C r);\x0d\n\x0d\n    if (w) {\x0d\n      w.closed = true;\x0d\n    }\x0d\n    if (r) {\x0d\n      r.closed = true;\x0d\n    }\x0d\n\x0d\n    if (typeof cb === 'function') {\x0d\n      cb(err);\x0d\n    }\x0d\n\x0d\n    if (err) {\x0d\n      process.nextTick(emitErrorCloseNT\x2C self\x2C err);\x0d\n    } else {\x0d\n      process.nextTick(emitCloseNT\x2C self);\x0d\n    }\x0d\n  }\x0d\n  try {\x0d\n    const result = self._destroy(err || null\x2C onDestroy);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            process.nextTick(onDestroy\x2C null);\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            process.nextTick(onDestroy\x2C err);\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onDestroy(err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitErrorCloseNT(self\x2C err) {\x0d\n  emitErrorNT(self\x2C err);\x0d\n  emitCloseNT(self);\x0d\n}\x0d\n\x0d\nfunction emitCloseNT(self) {\x0d\n  const r = self._readableState;\x0d\n  const w = self._writableState;\x0d\n\x0d\n  if (w) {\x0d\n    w.closeEmitted = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.closeEmitted = true;\x0d\n  }\x0d\n\x0d\n  if (w?.emitClose || r?.emitClose) {\x0d\n    self.emit('close');\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitErrorNT(self\x2C err) {\x0d\n  const r = self._readableState;\x0d\n  const w = self._writableState;\x0d\n\x0d\n  if (w?.errorEmitted || r?.errorEmitted) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  if (w) {\x0d\n    w.errorEmitted = true;\x0d\n  }\x0d\n  if (r) {\x0d\n    r.errorEmitted = true;\x0d\n  }\x0d\n\x0d\n  self.emit('error'\x2C err);\x0d\n}\x0d\n\x0d\nfunction undestroy() {\x0d\n  const r = this._readableState;\x0d\n  const w = this._writableState;\x0d\n\x0d\n  if (r) {\x0d\n    r.constructed = true;\x0d\n    r.closed = false;\x0d\n    r.closeEmitted = false;\x0d\n    r.destroyed = false;\x0d\n    r.errored = null;\x0d\n    r.errorEmitted = false;\x0d\n    r.reading = false;\x0d\n    r.ended = false;\x0d\n    r.endEmitted = false;\x0d\n  }\x0d\n\x0d\n  if (w) {\x0d\n    w.constructed = true;\x0d\n    w.destroyed = false;\x0d\n    w.closed = false;\x0d\n    w.closeEmitted = false;\x0d\n    w.errored = null;\x0d\n    w.errorEmitted = false;\x0d\n    w.ended = false;\x0d\n    w.ending = false;\x0d\n    w.finalCalled = false;\x0d\n    w.prefinished = false;\x0d\n    w.finished = false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction errorOrDestroy(stream\x2C err\x2C sync) {\x0d\n  // We have tests that rely on errors being emitted\x0d\n  // in the same tick\x2C so changing this is semver major.\x0d\n  // For now when you opt-in to autoDestroy we allow\x0d\n  // the error to be emitted nextTick. In a future\x0d\n  // semver major update we should change the default to this.\x0d\n\x0d\n  const r = stream._readableState;\x0d\n  const w = stream._writableState;\x0d\n\x0d\n  if (w?.destroyed || r?.destroyed) {\x0d\n    return this;\x0d\n  }\x0d\n\x0d\n  if (r?.autoDestroy || w?.autoDestroy)\x0d\n    stream.destroy(err);\x0d\n  else if (err) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    err.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (w && !w.errored) {\x0d\n      w.errored = err;\x0d\n    }\x0d\n    if (r && !r.errored) {\x0d\n      r.errored = err;\x0d\n    }\x0d\n    if (sync) {\x0d\n      process.nextTick(emitErrorNT\x2C stream\x2C err);\x0d\n    } else {\x0d\n      emitErrorNT(stream\x2C err);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction construct(stream\x2C cb) {\x0d\n  if (typeof stream._construct !== 'function') {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const r = stream._readableState;\x0d\n  const w = stream._writableState;\x0d\n\x0d\n  if (r) {\x0d\n    r.constructed = false;\x0d\n  }\x0d\n  if (w) {\x0d\n    w.constructed = false;\x0d\n  }\x0d\n\x0d\n  stream.once(kConstruct\x2C cb);\x0d\n\x0d\n  if (stream.listenerCount(kConstruct) > 1) {\x0d\n    // Duplex\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  process.nextTick(constructNT\x2C stream);\x0d\n}\x0d\n\x0d\nfunction constructNT(stream) {\x0d\n  let called = false;\x0d\n\x0d\n  function onConstruct(err) {\x0d\n    if (called) {\x0d\n      errorOrDestroy(stream\x2C err ?? new ERR_MULTIPLE_CALLBACK());\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    const r = stream._readableState;\x0d\n    const w = stream._writableState;\x0d\n    const s = w || r;\x0d\n\x0d\n    if (r) {\x0d\n      r.constructed = true;\x0d\n    }\x0d\n    if (w) {\x0d\n      w.constructed = true;\x0d\n    }\x0d\n\x0d\n    if (s.destroyed) {\x0d\n      stream.emit(kDestroy\x2C err);\x0d\n    } else if (err) {\x0d\n      errorOrDestroy(stream\x2C err\x2C true);\x0d\n    } else {\x0d\n      process.nextTick(emitConstructNT\x2C stream);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  try {\x0d\n    const result = stream._construct(onConstruct);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            if (!called) {\x0d\n              process.nextTick(onConstruct\x2C null);\x0d\n            }\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            if (!called) {\x0d\n              process.nextTick(onConstruct\x2C err);\x0d\n            }\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onConstruct(err);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitConstructNT(stream) {\x0d\n  stream.emit(kConstruct);\x0d\n}\x0d\n\x0d\nfunction isRequest(stream) {\x0d\n  return stream?.setHeader && typeof stream.abort === 'function';\x0d\n}\x0d\n\x0d\n// Normalize destroy for legacy.\x0d\nfunction destroyer(stream\x2C err) {\x0d\n  if (!stream) return;\x0d\n  if (isRequest(stream)) return stream.abort();\x0d\n  if (isRequest(stream.req)) return stream.req.abort();\x0d\n  if (typeof stream.destroy === 'function') return stream.destroy(err);\x0d\n  if (typeof stream.close === 'function') return stream.close();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  construct\x2C\x0d\n  destroyer\x2C\x0d\n  destroy\x2C\x0d\n  undestroy\x2C\x0d\n  errorOrDestroy\x0d\n};\x0d\n
code-source-info,0x24a76c6cfe6,56,4790,5201,C0O4826C8O4860C9O4867C10O4895C15O4931C20O4952C24O4966C25O4980C29O4997C33O5011C34O5025C38O5051C45O5056C48O5051C54O5089C61O5103C64O5089C72O5115C77O5142C78O5149C79O5160C82O5168C90O5168C97O5200,,
code-creation,LazyCompile,10,821627,0x24a76c6dcbe,266,Writable node:internal/streams/writable:220:18,0x1b78579b268,~
script-source,65,node:internal/streams/writable,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// A bit simpler than readable streams.\x0d\n// Implement an async ._write(chunk\x2C encoding\x2C cb)\x2C and it'll handle all\x0d\n// the drain event emission and buffering.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  Error\x2C\x0d\n  FunctionPrototypeSymbolHasInstance\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  Symbol\x2C\x0d\n  SymbolHasInstance\x2C\x0d\n} = primordials;\x0d\n\x0d\nmodule.exports = Writable;\x0d\nWritable.WritableState = WritableState;\x0d\n\x0d\nconst EE = require('events');\x0d\nconst Stream = require('internal/streams/legacy').Stream;\x0d\nconst { Buffer } = require('buffer');\x0d\nconst destroyImpl = require('internal/streams/destroy');\x0d\n\x0d\nconst {\x0d\n  addAbortSignalNoValidate\x2C\x0d\n} = require('internal/streams/add-abort-signal');\x0d\n\x0d\nconst {\x0d\n  getHighWaterMark\x2C\x0d\n  getDefaultHighWaterMark\x0d\n} = require('internal/streams/state');\x0d\nconst {\x0d\n  ERR_INVALID_ARG_TYPE\x2C\x0d\n  ERR_METHOD_NOT_IMPLEMENTED\x2C\x0d\n  ERR_MULTIPLE_CALLBACK\x2C\x0d\n  ERR_STREAM_CANNOT_PIPE\x2C\x0d\n  ERR_STREAM_DESTROYED\x2C\x0d\n  ERR_STREAM_ALREADY_FINISHED\x2C\x0d\n  ERR_STREAM_NULL_VALUES\x2C\x0d\n  ERR_STREAM_WRITE_AFTER_END\x2C\x0d\n  ERR_UNKNOWN_ENCODING\x0d\n} = require('internal/errors').codes;\x0d\n\x0d\nconst { errorOrDestroy } = destroyImpl;\x0d\n\x0d\nObjectSetPrototypeOf(Writable.prototype\x2C Stream.prototype);\x0d\nObjectSetPrototypeOf(Writable\x2C Stream);\x0d\n\x0d\nfunction nop() {}\x0d\n\x0d\nconst kOnFinished = Symbol('kOnFinished');\x0d\n\x0d\nfunction WritableState(options\x2C stream\x2C isDuplex) {\x0d\n  // Duplex streams are both readable and writable\x2C but share\x0d\n  // the same options object.\x0d\n  // However\x2C some cases require setting options to different\x0d\n  // values for the readable and the writable sides of the duplex stream\x2C\x0d\n  // e.g. options.readableObjectMode vs. options.writableObjectMode\x2C etc.\x0d\n  if (typeof isDuplex !== 'boolean')\x0d\n    isDuplex = stream instanceof Stream.Duplex;\x0d\n\x0d\n  // Object stream flag to indicate whether or not this stream\x0d\n  // contains buffers or objects.\x0d\n  this.objectMode = !!(options && options.objectMode);\x0d\n\x0d\n  if (isDuplex)\x0d\n    this.objectMode = this.objectMode ||\x0d\n      !!(options && options.writableObjectMode);\x0d\n\x0d\n  // The point at which write() starts returning false\x0d\n  // Note: 0 is a valid value\x2C means that we always return false if\x0d\n  // the entire buffer is not flushed immediately on write().\x0d\n  this.highWaterMark = options ?\x0d\n    getHighWaterMark(this\x2C options\x2C 'writableHighWaterMark'\x2C isDuplex) :\x0d\n    getDefaultHighWaterMark(false);\x0d\n\x0d\n  // if _final has been called.\x0d\n  this.finalCalled = false;\x0d\n\x0d\n  // drain event flag.\x0d\n  this.needDrain = false;\x0d\n  // At the start of calling end()\x0d\n  this.ending = false;\x0d\n  // When end() has been called\x2C and returned.\x0d\n  this.ended = false;\x0d\n  // When 'finish' is emitted.\x0d\n  this.finished = false;\x0d\n\x0d\n  // Has it been destroyed\x0d\n  this.destroyed = false;\x0d\n\x0d\n  // Should we decode strings into buffers before passing to _write?\x0d\n  // this is here so that some node-core streams can optimize string\x0d\n  // handling at a lower level.\x0d\n  const noDecode = !!(options && options.decodeStrings === false);\x0d\n  this.decodeStrings = !noDecode;\x0d\n\x0d\n  // Crypto is kind of old and crusty.  Historically\x2C its default string\x0d\n  // encoding is 'binary' so we have to make this configurable.\x0d\n  // Everything else in the universe uses 'utf8'\x2C though.\x0d\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8';\x0d\n\x0d\n  // Not an actual buffer we keep track of\x2C but a measurement\x0d\n  // of how much we're waiting to get pushed to some underlying\x0d\n  // socket or file.\x0d\n  this.length = 0;\x0d\n\x0d\n  // A flag to see when we're in the middle of a write.\x0d\n  this.writing = false;\x0d\n\x0d\n  // When true all writes will be buffered until .uncork() call.\x0d\n  this.corked = 0;\x0d\n\x0d\n  // A flag to be able to tell if the onwrite cb is called immediately\x2C\x0d\n  // or on a later tick.  We set this to true at first\x2C because any\x0d\n  // actions that shouldn't happen until "later" should generally also\x0d\n  // not happen before the first write call.\x0d\n  this.sync = true;\x0d\n\x0d\n  // A flag to know if we're processing previously buffered items\x2C which\x0d\n  // may call the _write() callback in the same tick\x2C so that we don't\x0d\n  // end up in an overlapped onwrite situation.\x0d\n  this.bufferProcessing = false;\x0d\n\x0d\n  // The callback that's passed to _write(chunk\x2C cb).\x0d\n  this.onwrite = onwrite.bind(undefined\x2C stream);\x0d\n\x0d\n  // The callback that the user supplies to write(chunk\x2C encoding\x2C cb).\x0d\n  this.writecb = null;\x0d\n\x0d\n  // The amount that is being written when _write is called.\x0d\n  this.writelen = 0;\x0d\n\x0d\n  // Storage for data passed to the afterWrite() callback in case of\x0d\n  // synchronous _write() completion.\x0d\n  this.afterWriteTickInfo = null;\x0d\n\x0d\n  resetBuffer(this);\x0d\n\x0d\n  // Number of pending user-supplied write callbacks\x0d\n  // this must be 0 before 'finish' can be emitted.\x0d\n  this.pendingcb = 0;\x0d\n\x0d\n  // Stream is still being constructed and cannot be\x0d\n  // destroyed until construction finished or failed.\x0d\n  // Async construction is opt in\x2C therefore we start as\x0d\n  // constructed.\x0d\n  this.constructed = true;\x0d\n\x0d\n  // Emit prefinish if the only thing we're waiting for is _write cbs\x0d\n  // This is relevant for synchronous Transform streams.\x0d\n  this.prefinished = false;\x0d\n\x0d\n  // True if the error was already emitted and should not be thrown again.\x0d\n  this.errorEmitted = false;\x0d\n\x0d\n  // Should close be emitted on destroy. Defaults to true.\x0d\n  this.emitClose = !options || options.emitClose !== false;\x0d\n\x0d\n  // Should .destroy() be called after 'finish' (and potentially 'end').\x0d\n  this.autoDestroy = !options || options.autoDestroy !== false;\x0d\n\x0d\n  // Indicates whether the stream has errored. When true all write() calls\x0d\n  // should return false. This is needed since when autoDestroy\x0d\n  // is disabled we need a way to tell whether the stream has failed.\x0d\n  this.errored = null;\x0d\n\x0d\n  // Indicates whether the stream has finished destroying.\x0d\n  this.closed = false;\x0d\n\x0d\n  // True if close has been emitted or would have been emitted\x0d\n  // depending on emitClose.\x0d\n  this.closeEmitted = false;\x0d\n\x0d\n  this[kOnFinished] = [];\x0d\n}\x0d\n\x0d\nfunction resetBuffer(state) {\x0d\n  state.buffered = [];\x0d\n  state.bufferedIndex = 0;\x0d\n  state.allBuffers = true;\x0d\n  state.allNoop = true;\x0d\n}\x0d\n\x0d\nWritableState.prototype.getBuffer = function getBuffer() {\x0d\n  return ArrayPrototypeSlice(this.buffered\x2C this.bufferedIndex);\x0d\n};\x0d\n\x0d\nObjectDefineProperty(WritableState.prototype\x2C 'bufferedRequestCount'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return this.buffered.length - this.bufferedIndex;\x0d\n  }\x0d\n});\x0d\n\x0d\nfunction Writable(options) {\x0d\n  // Writable ctor is applied to Duplexes\x2C too.\x0d\n  // `realHasInstance` is necessary because using plain `instanceof`\x0d\n  // would return false\x2C as no `_writableState` property is attached.\x0d\n\x0d\n  // Trying to use the custom `instanceof` for Writable here will also break the\x0d\n  // Node.js LazyTransform implementation\x2C which has a non-trivial getter for\x0d\n  // `_writableState` that would lead to infinite recursion.\x0d\n\x0d\n  // Checking for a Stream.Duplex instance is faster here instead of inside\x0d\n  // the WritableState constructor\x2C at least with V8 6.5.\x0d\n  const isDuplex = (this instanceof Stream.Duplex);\x0d\n\x0d\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable\x2C this))\x0d\n    return new Writable(options);\x0d\n\x0d\n  this._writableState = new WritableState(options\x2C this\x2C isDuplex);\x0d\n\x0d\n  if (options) {\x0d\n    if (typeof options.write === 'function')\x0d\n      this._write = options.write;\x0d\n\x0d\n    if (typeof options.writev === 'function')\x0d\n      this._writev = options.writev;\x0d\n\x0d\n    if (typeof options.destroy === 'function')\x0d\n      this._destroy = options.destroy;\x0d\n\x0d\n    if (typeof options.final === 'function')\x0d\n      this._final = options.final;\x0d\n\x0d\n    if (typeof options.construct === 'function')\x0d\n      this._construct = options.construct;\x0d\n    if (options.signal)\x0d\n      addAbortSignalNoValidate(options.signal\x2C this);\x0d\n  }\x0d\n\x0d\n  Stream.call(this\x2C options);\x0d\n\x0d\n  destroyImpl.construct(this\x2C () => {\x0d\n    const state = this._writableState;\x0d\n\x0d\n    if (!state.writing) {\x0d\n      clearBuffer(this\x2C state);\x0d\n    }\x0d\n\x0d\n    finishMaybe(this\x2C state);\x0d\n  });\x0d\n}\x0d\n\x0d\nObjectDefineProperty(Writable\x2C SymbolHasInstance\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: function(object) {\x0d\n    if (FunctionPrototypeSymbolHasInstance(this\x2C object)) return true;\x0d\n    if (this !== Writable) return false;\x0d\n\x0d\n    return object && object._writableState instanceof WritableState;\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\n// Otherwise people can pipe Writable streams\x2C which is just wrong.\x0d\nWritable.prototype.pipe = function() {\x0d\n  errorOrDestroy(this\x2C new ERR_STREAM_CANNOT_PIPE());\x0d\n};\x0d\n\x0d\nfunction _write(stream\x2C chunk\x2C encoding\x2C cb) {\x0d\n  const state = stream._writableState;\x0d\n\x0d\n  if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = state.defaultEncoding;\x0d\n  } else {\x0d\n    if (!encoding)\x0d\n      encoding = state.defaultEncoding;\x0d\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding))\x0d\n      throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n    if (typeof cb !== 'function')\x0d\n      cb = nop;\x0d\n  }\x0d\n\x0d\n  if (chunk === null) {\x0d\n    throw new ERR_STREAM_NULL_VALUES();\x0d\n  } else if (!state.objectMode) {\x0d\n    if (typeof chunk === 'string') {\x0d\n      if (state.decodeStrings !== false) {\x0d\n        chunk = Buffer.from(chunk\x2C encoding);\x0d\n        encoding = 'buffer';\x0d\n      }\x0d\n    } else if (chunk instanceof Buffer) {\x0d\n      encoding = 'buffer';\x0d\n    } else if (Stream._isUint8Array(chunk)) {\x0d\n      chunk = Stream._uint8ArrayToBuffer(chunk);\x0d\n      encoding = 'buffer';\x0d\n    } else {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'chunk'\x2C ['string'\x2C 'Buffer'\x2C 'Uint8Array']\x2C chunk);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n  if (state.ending) {\x0d\n    err = new ERR_STREAM_WRITE_AFTER_END();\x0d\n  } else if (state.destroyed) {\x0d\n    err = new ERR_STREAM_DESTROYED('write');\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    process.nextTick(cb\x2C err);\x0d\n    errorOrDestroy(stream\x2C err\x2C true);\x0d\n    return err;\x0d\n  }\x0d\n  state.pendingcb++;\x0d\n  return writeOrBuffer(stream\x2C state\x2C chunk\x2C encoding\x2C cb);\x0d\n}\x0d\n\x0d\nWritable.prototype.write = function(chunk\x2C encoding\x2C cb) {\x0d\n  return _write(this\x2C chunk\x2C encoding\x2C cb) === true;\x0d\n};\x0d\n\x0d\nWritable.prototype.cork = function() {\x0d\n  this._writableState.corked++;\x0d\n};\x0d\n\x0d\nWritable.prototype.uncork = function() {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  if (state.corked) {\x0d\n    state.corked--;\x0d\n\x0d\n    if (!state.writing)\x0d\n      clearBuffer(this\x2C state);\x0d\n  }\x0d\n};\x0d\n\x0d\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\x0d\n  // node::ParseEncoding() requires lower case.\x0d\n  if (typeof encoding === 'string')\x0d\n    encoding = StringPrototypeToLowerCase(encoding);\x0d\n  if (!Buffer.isEncoding(encoding))\x0d\n    throw new ERR_UNKNOWN_ENCODING(encoding);\x0d\n  this._writableState.defaultEncoding = encoding;\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// If we're already writing something\x2C then just put this\x0d\n// in the queue\x2C and wait our turn.  Otherwise\x2C call _write\x0d\n// If we return false\x2C then we need a drain event\x2C so set that flag.\x0d\nfunction writeOrBuffer(stream\x2C state\x2C chunk\x2C encoding\x2C callback) {\x0d\n  const len = state.objectMode ? 1 : chunk.length;\x0d\n\x0d\n  state.length += len;\x0d\n\x0d\n  // stream._write resets state.length\x0d\n  const ret = state.length < state.highWaterMark;\x0d\n  // We must ensure that previous needDrain will not be reset to false.\x0d\n  if (!ret)\x0d\n    state.needDrain = true;\x0d\n\x0d\n  if (state.writing || state.corked || state.errored || !state.constructed) {\x0d\n    state.buffered.push({ chunk\x2C encoding\x2C callback });\x0d\n    if (state.allBuffers && encoding !== 'buffer') {\x0d\n      state.allBuffers = false;\x0d\n    }\x0d\n    if (state.allNoop && callback !== nop) {\x0d\n      state.allNoop = false;\x0d\n    }\x0d\n  } else {\x0d\n    state.writelen = len;\x0d\n    state.writecb = callback;\x0d\n    state.writing = true;\x0d\n    state.sync = true;\x0d\n    stream._write(chunk\x2C encoding\x2C state.onwrite);\x0d\n    state.sync = false;\x0d\n  }\x0d\n\x0d\n  // Return false if errored or destroyed in order to break\x0d\n  // any synchronous while(stream.write(data)) loops.\x0d\n  return ret && !state.errored && !state.destroyed;\x0d\n}\x0d\n\x0d\nfunction doWrite(stream\x2C state\x2C writev\x2C len\x2C chunk\x2C encoding\x2C cb) {\x0d\n  state.writelen = len;\x0d\n  state.writecb = cb;\x0d\n  state.writing = true;\x0d\n  state.sync = true;\x0d\n  if (state.destroyed)\x0d\n    state.onwrite(new ERR_STREAM_DESTROYED('write'));\x0d\n  else if (writev)\x0d\n    stream._writev(chunk\x2C state.onwrite);\x0d\n  else\x0d\n    stream._write(chunk\x2C encoding\x2C state.onwrite);\x0d\n  state.sync = false;\x0d\n}\x0d\n\x0d\nfunction onwriteError(stream\x2C state\x2C er\x2C cb) {\x0d\n  --state.pendingcb;\x0d\n\x0d\n  cb(er);\x0d\n  // Ensure callbacks are invoked even when autoDestroy is\x0d\n  // not enabled. Passing `er` here doesn't make sense since\x0d\n  // it's related to one specific write\x2C not to the buffered\x0d\n  // writes.\x0d\n  errorBuffer(state);\x0d\n  // This can emit error\x2C but error must always follow cb.\x0d\n  errorOrDestroy(stream\x2C er);\x0d\n}\x0d\n\x0d\nfunction onwrite(stream\x2C er) {\x0d\n  const state = stream._writableState;\x0d\n  const sync = state.sync;\x0d\n  const cb = state.writecb;\x0d\n\x0d\n  if (typeof cb !== 'function') {\x0d\n    errorOrDestroy(stream\x2C new ERR_MULTIPLE_CALLBACK());\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  state.writing = false;\x0d\n  state.writecb = null;\x0d\n  state.length -= state.writelen;\x0d\n  state.writelen = 0;\x0d\n\x0d\n  if (er) {\x0d\n    // Avoid V8 leak\x2C https://github.com/nodejs/node/pull/34103#issuecomment-652002364\x0d\n    er.stack; // eslint-disable-line no-unused-expressions\x0d\n\x0d\n    if (!state.errored) {\x0d\n      state.errored = er;\x0d\n    }\x0d\n\x0d\n    // In case of duplex streams we need to notify the readable side of the\x0d\n    // error.\x0d\n    if (stream._readableState && !stream._readableState.errored) {\x0d\n      stream._readableState.errored = er;\x0d\n    }\x0d\n\x0d\n    if (sync) {\x0d\n      process.nextTick(onwriteError\x2C stream\x2C state\x2C er\x2C cb);\x0d\n    } else {\x0d\n      onwriteError(stream\x2C state\x2C er\x2C cb);\x0d\n    }\x0d\n  } else {\x0d\n    if (state.buffered.length > state.bufferedIndex) {\x0d\n      clearBuffer(stream\x2C state);\x0d\n    }\x0d\n\x0d\n    if (sync) {\x0d\n      // It is a common case that the callback passed to .write() is always\x0d\n      // the same. In that case\x2C we do not schedule a new nextTick()\x2C but\x0d\n      // rather just increase a counter\x2C to improve performance and avoid\x0d\n      // memory allocations.\x0d\n      if (state.afterWriteTickInfo !== null &&\x0d\n          state.afterWriteTickInfo.cb === cb) {\x0d\n        state.afterWriteTickInfo.count++;\x0d\n      } else {\x0d\n        state.afterWriteTickInfo = { count: 1\x2C cb\x2C stream\x2C state };\x0d\n        process.nextTick(afterWriteTick\x2C state.afterWriteTickInfo);\x0d\n      }\x0d\n    } else {\x0d\n      afterWrite(stream\x2C state\x2C 1\x2C cb);\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction afterWriteTick({ stream\x2C state\x2C count\x2C cb }) {\x0d\n  state.afterWriteTickInfo = null;\x0d\n  return afterWrite(stream\x2C state\x2C count\x2C cb);\x0d\n}\x0d\n\x0d\nfunction afterWrite(stream\x2C state\x2C count\x2C cb) {\x0d\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 &&\x0d\n    state.needDrain;\x0d\n  if (needDrain) {\x0d\n    state.needDrain = false;\x0d\n    stream.emit('drain');\x0d\n  }\x0d\n\x0d\n  while (count-- > 0) {\x0d\n    state.pendingcb--;\x0d\n    cb();\x0d\n  }\x0d\n\x0d\n  if (state.destroyed) {\x0d\n    errorBuffer(state);\x0d\n  }\x0d\n\x0d\n  finishMaybe(stream\x2C state);\x0d\n}\x0d\n\x0d\n// If there's something in the buffer waiting\x2C then invoke callbacks.\x0d\nfunction errorBuffer(state) {\x0d\n  if (state.writing) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\x0d\n    const { chunk\x2C callback } = state.buffered[n];\x0d\n    const len = state.objectMode ? 1 : chunk.length;\x0d\n    state.length -= len;\x0d\n    callback(new ERR_STREAM_DESTROYED('write'));\x0d\n  }\x0d\n\x0d\n  const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n    onfinishCallbacks[i](new ERR_STREAM_DESTROYED('end'));\x0d\n  }\x0d\n\x0d\n  resetBuffer(state);\x0d\n}\x0d\n\x0d\n// If there's something in the buffer waiting\x2C then process it.\x0d\nfunction clearBuffer(stream\x2C state) {\x0d\n  if (state.corked ||\x0d\n      state.bufferProcessing ||\x0d\n      state.destroyed ||\x0d\n      !state.constructed) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const { buffered\x2C bufferedIndex\x2C objectMode } = state;\x0d\n  const bufferedLength = buffered.length - bufferedIndex;\x0d\n\x0d\n  if (!bufferedLength) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  let i = bufferedIndex;\x0d\n\x0d\n  state.bufferProcessing = true;\x0d\n  if (bufferedLength > 1 && stream._writev) {\x0d\n    state.pendingcb -= bufferedLength - 1;\x0d\n\x0d\n    const callback = state.allNoop ? nop : (err) => {\x0d\n      for (let n = i; n < buffered.length; ++n) {\x0d\n        buffered[n].callback(err);\x0d\n      }\x0d\n    };\x0d\n    // Make a copy of `buffered` if it's going to be used by `callback` above\x2C\x0d\n    // since `doWrite` will mutate the array.\x0d\n    const chunks = state.allNoop && i === 0 ?\x0d\n      buffered : ArrayPrototypeSlice(buffered\x2C i);\x0d\n    chunks.allBuffers = state.allBuffers;\x0d\n\x0d\n    doWrite(stream\x2C state\x2C true\x2C state.length\x2C chunks\x2C ''\x2C callback);\x0d\n\x0d\n    resetBuffer(state);\x0d\n  } else {\x0d\n    do {\x0d\n      const { chunk\x2C encoding\x2C callback } = buffered[i];\x0d\n      buffered[i++] = null;\x0d\n      const len = objectMode ? 1 : chunk.length;\x0d\n      doWrite(stream\x2C state\x2C false\x2C len\x2C chunk\x2C encoding\x2C callback);\x0d\n    } while (i < buffered.length && !state.writing);\x0d\n\x0d\n    if (i === buffered.length) {\x0d\n      resetBuffer(state);\x0d\n    } else if (i > 256) {\x0d\n      buffered.splice(0\x2C i);\x0d\n      state.bufferedIndex = 0;\x0d\n    } else {\x0d\n      state.bufferedIndex = i;\x0d\n    }\x0d\n  }\x0d\n  state.bufferProcessing = false;\x0d\n}\x0d\n\x0d\nWritable.prototype._write = function(chunk\x2C encoding\x2C cb) {\x0d\n  if (this._writev) {\x0d\n    this._writev([{ chunk\x2C encoding }]\x2C cb);\x0d\n  } else {\x0d\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()');\x0d\n  }\x0d\n};\x0d\n\x0d\nWritable.prototype._writev = null;\x0d\n\x0d\nWritable.prototype.end = function(chunk\x2C encoding\x2C cb) {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  if (typeof chunk === 'function') {\x0d\n    cb = chunk;\x0d\n    chunk = null;\x0d\n    encoding = null;\x0d\n  } else if (typeof encoding === 'function') {\x0d\n    cb = encoding;\x0d\n    encoding = null;\x0d\n  }\x0d\n\x0d\n  let err;\x0d\n\x0d\n  if (chunk !== null && chunk !== undefined) {\x0d\n    const ret = _write(this\x2C chunk\x2C encoding);\x0d\n    if (ret instanceof Error) {\x0d\n      err = ret;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // .end() fully uncorks.\x0d\n  if (state.corked) {\x0d\n    state.corked = 1;\x0d\n    this.uncork();\x0d\n  }\x0d\n\x0d\n  if (err) {\x0d\n    // Do nothing...\x0d\n  } else if (!state.errored && !state.ending) {\x0d\n    // This is forgiving in terms of unnecessary calls to end() and can hide\x0d\n    // logic errors. However\x2C usually such errors are harmless and causing a\x0d\n    // hard error can be disproportionately destructive. It is not always\x0d\n    // trivial for the user to determine whether end() needs to be called\x0d\n    // or not.\x0d\n\x0d\n    state.ending = true;\x0d\n    finishMaybe(this\x2C state\x2C true);\x0d\n    state.ended = true;\x0d\n  } else if (state.finished) {\x0d\n    err = new ERR_STREAM_ALREADY_FINISHED('end');\x0d\n  } else if (state.destroyed) {\x0d\n    err = new ERR_STREAM_DESTROYED('end');\x0d\n  }\x0d\n\x0d\n  if (typeof cb === 'function') {\x0d\n    if (err || state.finished) {\x0d\n      process.nextTick(cb\x2C err);\x0d\n    } else {\x0d\n      state[kOnFinished].push(cb);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction needFinish(state) {\x0d\n  return (state.ending &&\x0d\n          state.constructed &&\x0d\n          state.length === 0 &&\x0d\n          !state.errored &&\x0d\n          state.buffered.length === 0 &&\x0d\n          !state.finished &&\x0d\n          !state.writing &&\x0d\n          !state.errorEmitted &&\x0d\n          !state.closeEmitted);\x0d\n}\x0d\n\x0d\nfunction callFinal(stream\x2C state) {\x0d\n  let called = false;\x0d\n\x0d\n  function onFinish(err) {\x0d\n    if (called) {\x0d\n      errorOrDestroy(stream\x2C err ?? ERR_MULTIPLE_CALLBACK());\x0d\n      return;\x0d\n    }\x0d\n    called = true;\x0d\n\x0d\n    state.pendingcb--;\x0d\n    if (err) {\x0d\n      const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n        onfinishCallbacks[i](err);\x0d\n      }\x0d\n      errorOrDestroy(stream\x2C err\x2C state.sync);\x0d\n    } else if (needFinish(state)) {\x0d\n      state.prefinished = true;\x0d\n      stream.emit('prefinish');\x0d\n      // Backwards compat. Don't check state.sync here.\x0d\n      // Some streams assume 'finish' will be emitted\x0d\n      // asynchronously relative to _final callback.\x0d\n      state.pendingcb++;\x0d\n      process.nextTick(finish\x2C stream\x2C state);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  state.sync = true;\x0d\n  state.pendingcb++;\x0d\n\x0d\n  try {\x0d\n    const result = stream._final(onFinish);\x0d\n    if (result != null) {\x0d\n      const then = result.then;\x0d\n      if (typeof then === 'function') {\x0d\n        then.call(\x0d\n          result\x2C\x0d\n          function() {\x0d\n            if (!called) {\x0d\n              process.nextTick(onFinish\x2C null);\x0d\n            }\x0d\n          }\x2C\x0d\n          function(err) {\x0d\n            if (!called) {\x0d\n              process.nextTick(onFinish\x2C err);\x0d\n            }\x0d\n          });\x0d\n      }\x0d\n    }\x0d\n  } catch (err) {\x0d\n    onFinish(err);\x0d\n  }\x0d\n\x0d\n  state.sync = false;\x0d\n}\x0d\n\x0d\nfunction prefinish(stream\x2C state) {\x0d\n  if (!state.prefinished && !state.finalCalled) {\x0d\n    if (typeof stream._final === 'function' && !state.destroyed) {\x0d\n      state.finalCalled = true;\x0d\n      callFinal(stream\x2C state);\x0d\n    } else {\x0d\n      state.prefinished = true;\x0d\n      stream.emit('prefinish');\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction finishMaybe(stream\x2C state\x2C sync) {\x0d\n  if (needFinish(state)) {\x0d\n    prefinish(stream\x2C state);\x0d\n    if (state.pendingcb === 0 && needFinish(state)) {\x0d\n      state.pendingcb++;\x0d\n      if (sync) {\x0d\n        process.nextTick(finish\x2C stream\x2C state);\x0d\n      } else {\x0d\n        finish(stream\x2C state);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction finish(stream\x2C state) {\x0d\n  state.pendingcb--;\x0d\n  state.finished = true;\x0d\n\x0d\n  const onfinishCallbacks = state[kOnFinished].splice(0);\x0d\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\x0d\n    onfinishCallbacks[i]();\x0d\n  }\x0d\n\x0d\n  stream.emit('finish');\x0d\n\x0d\n  if (state.autoDestroy) {\x0d\n    // In case of duplex streams we need a way to detect\x0d\n    // if the readable side is ready for autoDestroy as well.\x0d\n    const rState = stream._readableState;\x0d\n    const autoDestroy = !rState || (\x0d\n      rState.autoDestroy &&\x0d\n      // We don't expect the readable to ever 'end'\x0d\n      // if readable is explicitly set to false.\x0d\n      (rState.endEmitted || rState.readable === false)\x0d\n    );\x0d\n    if (autoDestroy) {\x0d\n      stream.destroy();\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nObjectDefineProperties(Writable.prototype\x2C {\x0d\n\x0d\n  destroyed: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.destroyed : false;\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      // Backward compatibility\x2C the user is explicitly managing destroyed.\x0d\n      if (this._writableState) {\x0d\n        this._writableState.destroyed = value;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writable: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      const w = this._writableState;\x0d\n      // w.writable === false means that this is part of a Duplex stream\x0d\n      // where the writable side was disabled upon construction.\x0d\n      // Compat. The user might manually disable writable side through\x0d\n      // deprecated setter.\x0d\n      return !!w && w.writable !== false && !w.destroyed && !w.errored &&\x0d\n        !w.ending && !w.ended;\x0d\n    }\x2C\x0d\n    set(val) {\x0d\n      // Backwards compatible.\x0d\n      if (this._writableState) {\x0d\n        this._writableState.writable = !!val;\x0d\n      }\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableFinished: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.finished : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableObjectMode: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.objectMode : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableBuffer: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.getBuffer();\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableEnded: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.ending : false;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableNeedDrain: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      const wState = this._writableState;\x0d\n      if (!wState) return false;\x0d\n      return !wState.destroyed && !wState.ending && wState.needDrain;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableHighWaterMark: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.highWaterMark;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableCorked: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState ? this._writableState.corked : 0;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableLength: {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this._writableState && this._writableState.length;\x0d\n    }\x0d\n  }\x2C\x0d\n\x0d\n  writableAborted: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    get: function() {\x0d\n      return !!(\x0d\n        this._writableState.writable !== false &&\x0d\n        (this._writableState.destroyed || this._writableState.errored) &&\x0d\n        !this._writableState.finished\x0d\n      );\x0d\n    }\x0d\n  }\x2C\x0d\n});\x0d\n\x0d\nconst destroy = destroyImpl.destroy;\x0d\nWritable.prototype.destroy = function(err\x2C cb) {\x0d\n  const state = this._writableState;\x0d\n\x0d\n  // Invoke pending callbacks.\x0d\n  if (!state.destroyed &&\x0d\n    (state.bufferedIndex < state.buffered.length ||\x0d\n      state[kOnFinished].length)) {\x0d\n    process.nextTick(errorBuffer\x2C state);\x0d\n  }\x0d\n\x0d\n  destroy.call(this\x2C err\x2C cb);\x0d\n  return this;\x0d\n};\x0d\n\x0d\nWritable.prototype._undestroy = destroyImpl.undestroy;\x0d\nWritable.prototype._destroy = function(err\x2C cb) {\x0d\n  cb(err);\x0d\n};\x0d\n\x0d\nWritable.prototype[EE.captureRejectionSymbol] = function(err) {\x0d\n  this.destroy(err);\x0d\n};\x0d\n
code-source-info,0x24a76c6dcbe,65,7647,9215,C0O7647C9O8232C16O8249C19O8256C23O8238C27O8270C33O8288C44O8288C51O8345C58O8352C63O8374C64O8380C83O8402C88O8400C92O8451C96O8490C104O8519C107O8541C111O8531C115O8574C123O8604C126O8627C130O8617C134O8661C142O8692C145O8716C149O8706C153O8751C161O8780C164O8802C168O8792C172O8835C180O8868C183O8894C187O8884C191O8922C197O8937C204O8970C212O8937C217O8995C224O9002C232O9002C238O9028C245O9040C258O9040C265O9214,,
code-creation,LazyCompile,10,823969,0x24a76c6fdee,341,WritableState node:internal/streams/writable:77:23,0x1b78579b108,~
code-source-info,0x24a76c6fdee
code-creation,LazyCompile,10,824220,0x24a76c701fe,23,resetBuffer node:internal/streams/writable:202:21,0x1b78579b158,~
code-source-info,0x24a76c701fe,65,7206,7323,C0O7219C2O7234C6O7243C7O7263C11O7271C12O7288C16O7299C17O7313C22O7322,,
code-creation,LazyCompile,10,824397,0x24a76c70336,21,set node:internal/streams/readable:1175:8,0x1b78578d2c8,~
code-source-info,0x24a76c70336,58,36999,37131,C0O37051C6O37083C13O37111C15O37107C20O37130,,
code-creation,LazyCompile,10,824491,0x24a76c7042e,14,set node:net:1885:6,0x64be911088,~
code-source-info,0x24a76c7042e,117,52891,52924,C0O52897C2O52909C7O52918C13O52922,,
code-creation,LazyCompile,10,824567,0x24a76c7051e,8,get node:net:1884:6,0x64be911038,~
code-source-info,0x24a76c7051e,117,52855,52883,C0O52860C2O52872C4O52871C7O52881,,
code-creation,LazyCompile,10,824715,0x24a76c70606,32,getNewAsyncId node:net:171:23,0x64be90eee0,~
code-source-info,0x24a76c70606,117,4612,4731,C0O4626C4O4659C14O4693C17O4693C22O4715C27O4715C31O4728,,
code-creation,LazyCompile,10,824881,0x24a76c707d6,196,Readable.on node:internal/streams/readable:874:33,0x1b78578cc00,~
code-source-info,0x24a76c707d6,58,28613,29539,C0O28639C5O28646C10O28656C15O28659C29O28659C35O28701C40O28722C42O28729C47O28914C55O28914C62O28940C65O28907C69O29036C75O29044C80O29067C85O29067C91O29087C93O29094C98O29128C104O29149C110O29177C112O29222C118O29201C122O29237C123O29251C127O29267C128O29289C132O29305C140O29332C145O29346C150O29305C155O29373C161O29392C164O29392C170O29437C176O29457C179O29465C187O29465C193O29525C195O29536,,
code-creation,LazyCompile,10,825057,0x24a76c70a4e,135,initSocketHandle node:net:273:26,0x64be90f070,~
code-source-info,0x24a76c70a4e,117,7162,7762,C0O7179C5O7179C9O7196C10O7211C14O7300C20O7321C27O7329C32O7343C36O7361C43O7378C45O7376C49O7397C51O7402C57O7440C62O7421C66O7419C70O7471C72O7476C74O7475C78O7491C80O7528C82O7533C84O7532C88O7553C90O7595C94O7614C99O7619C105O7653C106O7660C107O7670C109O7675C114O7684C118O7716C123O7724C128O7724C134O7761,,
code-creation,LazyCompile,10,825202,0x24a76c70c7e,120,undestroy node:internal/streams/destroy:160:19,0x32ebb7fe660,~
code-source-info,0x24a76c70c7e,56,3187,3813,C0O3210C5O3244C10O3265C14O3279C15O3293C19O3306C20O3315C24O3329C25O3344C29O3358C30O3370C34O3384C35O3394C39O3407C40O3422C44O3436C45O3446C49O3460C50O3468C54O3482C55O3495C59O3514C63O3528C64O3542C68O3555C69O3567C73O3581C74O3590C78O3604C79O3619C83O3633C84O3643C88O3656C89O3671C93O3685C94O3693C98O3707C99O3716C103O3730C104O3744C108O3758C109O3772C113O3786C114O3797C119O3812,,
code-creation,LazyCompile,10,825636,0x24a76c715b6,21,addCleanup node:internal/bootstrap/switches/is_main_thread:140:20,0x39b87ff2f8,~
code-source-info,0x24a76c715b6,96,3756,3832,C0O3766C5O3770C10O3799C15O3799C20O3831,,
code-creation,LazyCompile,10,825730,0x24a76c716b6,25,isBuildingSnapshot node:internal/v8/startup_snapshot:18:28,0x6414eaf688,~
code-source-info,0x24a76c716b6,89,417,554,C0O481C6O488C11O515C19O516C24O551,,
code-creation,LazyCompile,10,825973,0x24a76c71ba6,533,getStdin node:internal/bootstrap/switches/is_main_thread:189:18,0x39b87ff428,~
code-source-info,0x24a76c71ba
code-creation,LazyCompile,10,826324,0x24a76c72306,152,ReadStream node:tty:47:20,0x24a76c60490,~
code-source-info,0x24a76c72306,156,1707,2194,C0O1726C2O1737C7O1766C18O1773C23O1801C24O1805C26O1812C32O1817C38O1830C43O1840C50O1846C55O1840C56O1887C58O1906C73O1906C79O1941C85O1968C92O1974C97O1968C98O2014C103O2018C108O2025C120O2117C130O2130C134O2025C140O2150C141O2161C145O2173C146O2184C151O2193,,
code-creation,LazyCompile,10,826659,0x24a76c72596,21,set node:internal/streams/writable:800:8,0x1b78579bc20,~
code-source-info,0x24a76c72596,65,24013,24149,C0O24069C6O24101C13O24129C15O24125C20O24148,,
code-creation,LazyCompile,10,826829,0x24a76c7271e,71,Socket.read node:net:724:33,0x64be910160,~
code-source-info,0x24a76c7271e,117,19747,19931,C0O19756C2O19765C4O19764C9O19783C15O19802C21O19826C26O19834C32O19850C35O19850C39O19878C44O19892C49O19899C54O19909C59O19914C64O19914C70O19928,,
code-creation,LazyCompile,10,827089,0x24a76c72a2e,587,Readable.read node:internal/streams/readable:394:35,0x1b78578c800,~
code-source-info,0x24a76c72a2e,58,13085,17585,C0O13094C8O13094C13O13244C17O13272C24O13291C29O13296C35O13323C43O13327C50O13377C55O13410C58O13505C62O13497C67O13525C70O13547C74O13545C78O13580C79O13586C84O13598C85O13620C89O13807C90O13813C95O13835C101O13866C107O13880C112O13903C117O13919C121O13910C126O13950C132O13957C137O13979C143O13994C151O14028C156O14042C161O13994C166O14065C172O14072C177O14087C183O14101C186O14101C192O14137C195O14137C199O14162C200O14174C201O14185C204O14189C211O14281C212O14287C217O14302C223O14326C229O14333C234O14347C237O14347C241O14371C242O14383C243O15539C248O15556C256O15556C261O15680C267O15687C272O15702C279O15709C283O15721C287O15713C292O15743C294O15763C302O15763C307O16040C313O16055C319O16072C325O16091C331O16116C337O16136C339O16157C347O16157C354O16216C358O16235C366O16235C370O16258C371O16272C375O16285C376O16296C380O16393C386O16400C391O16414C392O16433C396O16487C401O16499C406O16487C411O16522C412O16533C416O16708C422O16724C425O16728C432O16771C434O16779C435O16785C440O16795C443O16801C451O16834C453O16851C457O16903C462O16919C466O16910C469O16895C473O16939C478O16963C485O16979C488O16976C492O16997C498O17029C503O17047C508O17047C514O17077C515O17101C519O17136C525O17143C530O17289C536O17303C537O17322C541O17413C543O17423C548O17438C554O17452C557O17452C561O17481C565O17506C566O17524C570O17542C578O17542C584O17571C586O17582,,
code-creation,LazyCompile,10,827449,0x24a76c72ec6,10, node:internal/streams/readable:49:66,0x1b78578ba88,~
code-source-info,0x24a76c72ec6,58,1779,1806,C0O1792C2O1798C9O1805,,
code-creation,LazyCompile,10,827558,0x24a76c72fbe,108,howMuchToRead node:internal/streams/readable:377:23,0x1b78578c7b0,~
code-source-info,0x24a76c72fbe,58,12591,12977,C0O12607C1O12613C6O12628C12O12635C17O12650C23O12663C24O12672C25O12686C31O12703C33O12712C34O12716C39O12720C45O12793C51O12810C57O12838C62O12845C67O12845C72O12852C76O12860C77O12879C81O12886C82O12910C86O12901C91O12923C93O12932C94O12949C100O12963C107O12974,,
code-creation,LazyCompile,10,827697,0x24a76c7322e,111,Socket._read node:net:666:34,0x64be90feb0,~
code-source-info,0x24a76c7322e,117,18254,18484,C0O18254C13O18263C23O18263C27O18284C30O18293C39O18313C45O18329C55O18329C59O18370C62O18375C75O18375C83O18423C86O18433C91O18441C97O18457C105O18457C110O18483,,
code-creation,LazyCompile,10,827797,0x24a76c733de,10, node:net:39:63,0x64be90f890,~
code-source-info,0x24a76c733de,117,1518,1545,C0O1531C2O1537C9O1544,,
code-creation,LazyCompile,10,827888,0x24a76c73506,65,tryReadStart node:net:656:22,0x64be90f200,~
code-source-info,0x24a76c73506,117,17919,18151,C0O17975C8O17975C12O18020C18O18036C22O18066C27O18074C32O18074C37O18090C39O18111C46O18119C52O18119C58O18111C64O18150,,
code-creation,LazyCompile,10,828106,0x24a76c736ee,125,getStderr node:internal/bootstrap/switches/is_main_thread:168:19,0x39b87ff3b8,~
code-source-info,0x24a76c736ee,96,4570,5262,C0O4578C6O4590C10O4604C11O4608C17O4617C24O4615C30O4650C37O4671C40O4678C44O4669C48O4690C53O4713C60O4704C66O4791C73O4807C77O4826C82O4837C88O4851C91O4859C102O4859C108O4908C116O4908C120O5245C124O5259,,
code-creation,LazyCompile,10,828548,0x24a76c738c6,19,_getMaxListeners node:events:414:26,0x2392d71988,~
code-source-info,0x24a76c738c6,23,12446,12574,C0O12467C6O12501C9O12521C13O12541C14O12557C18O12571,,
code-creation,LazyCompile,10,828622,0x24a76c739be,5,get node:events:272:16,0x2392d715a8,~
code-source-info,0x24a76c739be,23,8173,8215,C0O8183C4O8210,,
tick,0x7ff81324daa4,835504,1,0x7ff6d5c47950,6,0x7ff6d61c5450,0x7ff6d66cf153,0x246eeedf107,0x246eeedf3a1,0x65ec1e5888,0x7ff6d5cf53f0,0x65ec1e559a,0x65ec1e52dd,0x65ec1e483b,0x65ec1e4642,0x246eeeeab23,0x7ff6d6643c13
code-creation,LazyCompile,10,838322,0x24a76c73a7e,5,get node:internal/bootstrap/pre_execution:284:8,0x2f2f3a26b60,~
code-source-info,0x24a76c73a7e,100,9206,9239,C0O9218C4O9232,,
code-creation,Eval,10,848258,0x24a76c74cde,5, node:crypto:1:1,0x24a76c74ac8,~
script-source,159,node:crypto,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n// Note: In 0.8 and before\x2C crypto functions all defaulted to using\x0d\n// binary-encoded strings rather than buffers.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  assertCrypto\x2C\x0d\n  deprecate\x0d\n} = require('internal/util');\x0d\nassertCrypto();\x0d\n\x0d\nconst {\x0d\n  ERR_CRYPTO_FIPS_FORCED\x2C\x0d\n} = require('internal/errors').codes;\x0d\nconst constants = internalBinding('constants').crypto;\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\nconst fipsForced = getOptionValue('--force-fips');\x0d\nconst {\x0d\n  getFipsCrypto\x2C\x0d\n  setFipsCrypto\x2C\x0d\n  timingSafeEqual\x2C\x0d\n} = internalBinding('crypto');\x0d\nconst {\x0d\n  checkPrime\x2C\x0d\n  checkPrimeSync\x2C\x0d\n  generatePrime\x2C\x0d\n  generatePrimeSync\x2C\x0d\n  randomBytes\x2C\x0d\n  randomFill\x2C\x0d\n  randomFillSync\x2C\x0d\n  randomInt\x2C\x0d\n  randomUUID\x2C\x0d\n} = require('internal/crypto/random');\x0d\nconst {\x0d\n  pbkdf2\x2C\x0d\n  pbkdf2Sync\x0d\n} = require('internal/crypto/pbkdf2');\x0d\nconst {\x0d\n  scrypt\x2C\x0d\n  scryptSync\x0d\n} = require('internal/crypto/scrypt');\x0d\nconst {\x0d\n  hkdf\x2C\x0d\n  hkdfSync\x0d\n} = require('internal/crypto/hkdf');\x0d\nconst {\x0d\n  generateKeyPair\x2C\x0d\n  generateKeyPairSync\x2C\x0d\n  generateKey\x2C\x0d\n  generateKeySync\x2C\x0d\n} = require('internal/crypto/keygen');\x0d\nconst {\x0d\n  createSecretKey\x2C\x0d\n  createPublicKey\x2C\x0d\n  createPrivateKey\x2C\x0d\n  KeyObject\x2C\x0d\n} = require('internal/crypto/keys');\x0d\nconst {\x0d\n  DiffieHellman\x2C\x0d\n  DiffieHellmanGroup\x2C\x0d\n  ECDH\x2C\x0d\n  diffieHellman\x0d\n} = require('internal/crypto/diffiehellman');\x0d\nconst {\x0d\n  Cipher\x2C\x0d\n  Cipheriv\x2C\x0d\n  Decipher\x2C\x0d\n  Decipheriv\x2C\x0d\n  privateDecrypt\x2C\x0d\n  privateEncrypt\x2C\x0d\n  publicDecrypt\x2C\x0d\n  publicEncrypt\x2C\x0d\n  getCipherInfo\x2C\x0d\n} = require('internal/crypto/cipher');\x0d\nconst {\x0d\n  Sign\x2C\x0d\n  signOneShot\x2C\x0d\n  Verify\x2C\x0d\n  verifyOneShot\x0d\n} = require('internal/crypto/sig');\x0d\nconst {\x0d\n  Hash\x2C\x0d\n  Hmac\x0d\n} = require('internal/crypto/hash');\x0d\nconst {\x0d\n  X509Certificate\x0d\n} = require('internal/crypto/x509');\x0d\nconst {\x0d\n  getCiphers\x2C\x0d\n  getCurves\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  getHashes\x2C\x0d\n  setDefaultEncoding\x2C\x0d\n  setEngine\x2C\x0d\n  lazyRequire\x2C\x0d\n  secureHeapUsed\x2C\x0d\n} = require('internal/crypto/util');\x0d\nconst Certificate = require('internal/crypto/certificate');\x0d\n\x0d\n// These helper functions are needed because the constructors can\x0d\n// use new\x2C in which case V8 cannot inline the recursive constructor call\x0d\nfunction createHash(algorithm\x2C options) {\x0d\n  return new Hash(algorithm\x2C options);\x0d\n}\x0d\n\x0d\nfunction createCipher(cipher\x2C password\x2C options) {\x0d\n  return new Cipher(cipher\x2C password\x2C options);\x0d\n}\x0d\n\x0d\nfunction createCipheriv(cipher\x2C key\x2C iv\x2C options) {\x0d\n  return new Cipheriv(cipher\x2C key\x2C iv\x2C options);\x0d\n}\x0d\n\x0d\nfunction createDecipher(cipher\x2C password\x2C options) {\x0d\n  return new Decipher(cipher\x2C password\x2C options);\x0d\n}\x0d\n\x0d\nfunction createDecipheriv(cipher\x2C key\x2C iv\x2C options) {\x0d\n  return new Decipheriv(cipher\x2C key\x2C iv\x2C options);\x0d\n}\x0d\n\x0d\nfunction createDiffieHellman(sizeOrKey\x2C keyEncoding\x2C generator\x2C genEncoding) {\x0d\n  return new DiffieHellman(sizeOrKey\x2C keyEncoding\x2C generator\x2C genEncoding);\x0d\n}\x0d\n\x0d\nfunction createDiffieHellmanGroup(name) {\x0d\n  return new DiffieHellmanGroup(name);\x0d\n}\x0d\n\x0d\nfunction createECDH(curve) {\x0d\n  return new ECDH(curve);\x0d\n}\x0d\n\x0d\nfunction createHmac(hmac\x2C key\x2C options) {\x0d\n  return new Hmac(hmac\x2C key\x2C options);\x0d\n}\x0d\n\x0d\nfunction createSign(algorithm\x2C options) {\x0d\n  return new Sign(algorithm\x2C options);\x0d\n}\x0d\n\x0d\nfunction createVerify(algorithm\x2C options) {\x0d\n  return new Verify(algorithm\x2C options);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  // Methods\x0d\n  checkPrime\x2C\x0d\n  checkPrimeSync\x2C\x0d\n  createCipheriv\x2C\x0d\n  createDecipheriv\x2C\x0d\n  createDiffieHellman\x2C\x0d\n  createDiffieHellmanGroup\x2C\x0d\n  createECDH\x2C\x0d\n  createHash\x2C\x0d\n  createHmac\x2C\x0d\n  createPrivateKey\x2C\x0d\n  createPublicKey\x2C\x0d\n  createSecretKey\x2C\x0d\n  createSign\x2C\x0d\n  createVerify\x2C\x0d\n  diffieHellman\x2C\x0d\n  generatePrime\x2C\x0d\n  generatePrimeSync\x2C\x0d\n  getCiphers\x2C\x0d\n  getCipherInfo\x2C\x0d\n  getCurves\x2C\x0d\n  getDiffieHellman: createDiffieHellmanGroup\x2C\x0d\n  getHashes\x2C\x0d\n  hkdf\x2C\x0d\n  hkdfSync\x2C\x0d\n  pbkdf2\x2C\x0d\n  pbkdf2Sync\x2C\x0d\n  generateKeyPair\x2C\x0d\n  generateKeyPairSync\x2C\x0d\n  generateKey\x2C\x0d\n  generateKeySync\x2C\x0d\n  privateDecrypt\x2C\x0d\n  privateEncrypt\x2C\x0d\n  publicDecrypt\x2C\x0d\n  publicEncrypt\x2C\x0d\n  randomBytes\x2C\x0d\n  randomFill\x2C\x0d\n  randomFillSync\x2C\x0d\n  randomInt\x2C\x0d\n  randomUUID\x2C\x0d\n  scrypt\x2C\x0d\n  scryptSync\x2C\x0d\n  sign: signOneShot\x2C\x0d\n  setEngine\x2C\x0d\n  timingSafeEqual\x2C\x0d\n  getFips: fipsForced ? getFipsForced : getFipsCrypto\x2C\x0d\n  setFips: fipsForced ? setFipsForced : setFipsCrypto\x2C\x0d\n  verify: verifyOneShot\x2C\x0d\n\x0d\n  // Classes\x0d\n  Certificate\x2C\x0d\n  Cipher\x2C\x0d\n  Cipheriv\x2C\x0d\n  Decipher\x2C\x0d\n  Decipheriv\x2C\x0d\n  DiffieHellman\x2C\x0d\n  DiffieHellmanGroup\x2C\x0d\n  ECDH\x2C\x0d\n  Hash\x2C\x0d\n  Hmac\x2C\x0d\n  KeyObject\x2C\x0d\n  Sign\x2C\x0d\n  Verify\x2C\x0d\n  X509Certificate\x2C\x0d\n  secureHeapUsed\x2C\x0d\n};\x0d\n\x0d\nfunction setFipsForced(val) {\x0d\n  if (val) return;\x0d\n  throw new ERR_CRYPTO_FIPS_FORCED();\x0d\n}\x0d\n\x0d\nfunction getFipsForced() {\x0d\n  return 1;\x0d\n}\x0d\n\x0d\nObjectDefineProperty(constants\x2C 'defaultCipherList'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: getOptionValue('--tls-cipher-list')\x0d\n});\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  createCipher: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: deprecate(createCipher\x2C\x0d\n                     'crypto.createCipher is deprecated.'\x2C 'DEP0106')\x0d\n  }\x2C\x0d\n  createDecipher: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    value: deprecate(createDecipher\x2C\x0d\n                     'crypto.createDecipher is deprecated.'\x2C 'DEP0106')\x0d\n  }\x2C\x0d\n  // crypto.fips is deprecated. DEP0093. Use crypto.getFips()/crypto.setFips()\x0d\n  fips: {\x0d\n    __proto__: null\x2C\x0d\n    get: fipsForced ? getFipsForced : getFipsCrypto\x2C\x0d\n    set: fipsForced ? setFipsForced : setFipsCrypto\x0d\n  }\x2C\x0d\n  DEFAULT_ENCODING: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    get: deprecate(getDefaultEncoding\x2C\x0d\n                   'crypto.DEFAULT_ENCODING is deprecated.'\x2C 'DEP0091')\x2C\x0d\n    set: deprecate(setDefaultEncoding\x2C\x0d\n                   'crypto.DEFAULT_ENCODING is deprecated.'\x2C 'DEP0091')\x0d\n  }\x2C\x0d\n  constants: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n\x0d\n  webcrypto: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    get() { return lazyRequire('internal/crypto/webcrypto').crypto; }\x0d\n  }\x2C\x0d\n\x0d\n  // Aliases for randomBytes are deprecated.\x0d\n  // The ecosystem needs those to exist for backwards compatibility.\x0d\n  prng: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: pendingDeprecation ?\x0d\n      deprecate(randomBytes\x2C 'crypto.prng is deprecated.'\x2C 'DEP0115') :\x0d\n      randomBytes\x0d\n  }\x2C\x0d\n  pseudoRandomBytes: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: pendingDeprecation ?\x0d\n      deprecate(randomBytes\x2C\x0d\n                'crypto.pseudoRandomBytes is deprecated.'\x2C 'DEP0115') :\x0d\n      randomBytes\x0d\n  }\x2C\x0d\n  rng: {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: false\x2C\x0d\n    configurable: true\x2C\x0d\n    writable: true\x2C\x0d\n    value: pendingDeprecation ?\x0d\n      deprecate(randomBytes\x2C 'crypto.rng is deprecated.'\x2C 'DEP0115') :\x0d\n      randomBytes\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x24a76c74cde,159,0,8145,C0O0C4O8145,,
code-creation,Function,10,849237,0x24a76c75da6,1692, node:crypto:1:1,0x24a76c74c58,~
code-source-info,0x24a76c75da
code-creation,LazyCompile,10,849734,0x24a76c7741e,19,assertCrypto node:internal/util:155:22,0x2392d46590,~
code-source-info,0x24a76c7741e,15,4169,4225,C0O4177C6O4196C11O4202C16O4196C18O4224,,
tick,0x7ff6d61852c0,851466,1,0x7ff6d5c66a70,2,0x7ff6d65ae370,0x246eeec499b,0x246eeec32e5,0x24a76c75ea4,0x246eeec4a63,0x65ec1e529a,0x65ec1e483b,0x65ec1e4642,0x246eeeeab23,0x7ff6d6643c13
code-creation,Eval,10,851930,0x1aff214ca06,5, node:internal/crypto/random:1:1,0x1aff214c4d0,~
script-source,160,node:internal/crypto/random,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypeShift\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  BigInt\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  MathMin\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberIsSafeInteger\x2C\x0d\n  NumberPrototypeToString\x2C\x0d\n  StringPrototypePadStart\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  RandomBytesJob\x2C\x0d\n  RandomPrimeJob\x2C\x0d\n  CheckPrimeJob\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n  secureBuffer\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  kEmptyObject\x2C\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { Buffer\x2C kMaxLength } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_OPERATION_FAILED\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateNumber\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateCallback\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isTypedArray\x2C\x0d\n  isFloat32Array\x2C\x0d\n  isFloat64Array\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst { FastBuffer } = require('internal/buffer');\x0d\n\x0d\nconst kMaxInt32 = 2 ** 31 - 1;\x0d\nconst kMaxPossibleLength = MathMin(kMaxLength\x2C kMaxInt32);\x0d\n\x0d\nfunction assertOffset(offset\x2C elementSize\x2C length) {\x0d\n  validateNumber(offset\x2C 'offset');\x0d\n  offset *= elementSize;\x0d\n\x0d\n  const maxLength = MathMin(length\x2C kMaxPossibleLength);\x0d\n  if (NumberIsNaN(offset) || offset > maxLength || offset < 0) {\x0d\n    throw new ERR_OUT_OF_RANGE('offset'\x2C `>= 0 && <= ${maxLength}`\x2C offset);\x0d\n  }\x0d\n\x0d\n  return offset >>> 0;  // Convert to uint32.\x0d\n}\x0d\n\x0d\nfunction assertSize(size\x2C elementSize\x2C offset\x2C length) {\x0d\n  validateNumber(size\x2C 'size');\x0d\n  size *= elementSize;\x0d\n\x0d\n  if (NumberIsNaN(size) || size > kMaxPossibleLength || size < 0) {\x0d\n    throw new ERR_OUT_OF_RANGE('size'\x2C\x0d\n                               `>= 0 && <= ${kMaxPossibleLength}`\x2C size);\x0d\n  }\x0d\n\x0d\n  if (size + offset > length) {\x0d\n    throw new ERR_OUT_OF_RANGE('size + offset'\x2C `<= ${length}`\x2C size + offset);\x0d\n  }\x0d\n\x0d\n  return size >>> 0;  // Convert to uint32.\x0d\n}\x0d\n\x0d\nfunction randomBytes(size\x2C callback) {\x0d\n  size = assertSize(size\x2C 1\x2C 0\x2C Infinity);\x0d\n  if (callback !== undefined) {\x0d\n    validateCallback(callback);\x0d\n  }\x0d\n\x0d\n  const buf = new FastBuffer(size);\x0d\n\x0d\n  if (callback === undefined) {\x0d\n    randomFillSync(buf.buffer\x2C 0\x2C size);\x0d\n    return buf;\x0d\n  }\x0d\n\x0d\n  // Keep the callback as a regular function so this is propagated.\x0d\n  randomFill(buf.buffer\x2C 0\x2C size\x2C function(error) {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C this\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C this\x2C null\x2C buf);\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction randomFillSync(buf\x2C offset = 0\x2C size) {\x0d\n  if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'buf'\x2C\x0d\n      ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n      buf);\x0d\n  }\x0d\n\x0d\n  const elementSize = buf.BYTES_PER_ELEMENT || 1;\x0d\n\x0d\n  offset = assertOffset(offset\x2C elementSize\x2C buf.byteLength);\x0d\n\x0d\n  if (size === undefined) {\x0d\n    size = buf.byteLength - offset;\x0d\n  } else {\x0d\n    size = assertSize(size\x2C elementSize\x2C offset\x2C buf.byteLength);\x0d\n  }\x0d\n\x0d\n  if (size === 0)\x0d\n    return buf;\x0d\n\x0d\n  const job = new RandomBytesJob(\x0d\n    kCryptoJobSync\x2C\x0d\n    buf\x2C\x0d\n    offset\x2C\x0d\n    size);\x0d\n\x0d\n  const err = job.run()[0];\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return buf;\x0d\n}\x0d\n\x0d\nfunction randomFill(buf\x2C offset\x2C size\x2C callback) {\x0d\n  if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'buf'\x2C\x0d\n      ['ArrayBuffer'\x2C 'ArrayBufferView']\x2C\x0d\n      buf);\x0d\n  }\x0d\n\x0d\n  const elementSize = buf.BYTES_PER_ELEMENT || 1;\x0d\n\x0d\n  if (typeof offset === 'function') {\x0d\n    callback = offset;\x0d\n    offset = 0;\x0d\n    // Size is a length here\x2C assertSize() call turns it into a number of bytes\x0d\n    size = buf.length;\x0d\n  } else if (typeof size === 'function') {\x0d\n    callback = size;\x0d\n    size = buf.length - offset;\x0d\n  } else {\x0d\n    validateCallback(callback);\x0d\n  }\x0d\n\x0d\n  offset = assertOffset(offset\x2C elementSize\x2C buf.byteLength);\x0d\n\x0d\n  if (size === undefined) {\x0d\n    size = buf.byteLength - offset;\x0d\n  } else {\x0d\n    size = assertSize(size\x2C elementSize\x2C offset\x2C buf.byteLength);\x0d\n  }\x0d\n\x0d\n  if (size === 0) {\x0d\n    callback(null\x2C buf);\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  const job = new RandomBytesJob(\x0d\n    kCryptoJobAsync\x2C\x0d\n    buf\x2C\x0d\n    offset\x2C\x0d\n    size);\x0d\n  job.ondone = FunctionPrototypeBind(onJobDone\x2C job\x2C buf\x2C callback);\x0d\n  job.run();\x0d\n}\x0d\n\x0d\n// Largest integer we can read from a buffer.\x0d\n// e.g.: Buffer.from("ff".repeat(6)\x2C "hex").readUIntBE(0\x2C 6);\x0d\nconst RAND_MAX = 0xFFFF_FFFF_FFFF;\x0d\n\x0d\n// Cache random data to use in randomInt. The cache size must be evenly\x0d\n// divisible by 6 because each attempt to obtain a random int uses 6 bytes.\x0d\nconst randomCache = new FastBuffer(6 * 1024);\x0d\nlet randomCacheOffset = randomCache.length;\x0d\nlet asyncCacheFillInProgress = false;\x0d\nconst asyncCachePendingTasks = [];\x0d\n\x0d\n// Generates an integer in [min\x2C max) range where min is inclusive and max is\x0d\n// exclusive.\x0d\nfunction randomInt(min\x2C max\x2C callback) {\x0d\n  // Detect optional min syntax\x0d\n  // randomInt(max)\x0d\n  // randomInt(max\x2C callback)\x0d\n  const minNotSpecified = typeof max === 'undefined' ||\x0d\n    typeof max === 'function';\x0d\n\x0d\n  if (minNotSpecified) {\x0d\n    callback = max;\x0d\n    max = min;\x0d\n    min = 0;\x0d\n  }\x0d\n\x0d\n  const isSync = typeof callback === 'undefined';\x0d\n  if (!isSync) {\x0d\n    validateCallback(callback);\x0d\n  }\x0d\n  if (!NumberIsSafeInteger(min)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('min'\x2C 'a safe integer'\x2C min);\x0d\n  }\x0d\n  if (!NumberIsSafeInteger(max)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE('max'\x2C 'a safe integer'\x2C max);\x0d\n  }\x0d\n  if (max <= min) {\x0d\n    throw new ERR_OUT_OF_RANGE(\x0d\n      'max'\x2C `greater than the value of "min" (${min})`\x2C max\x0d\n    );\x0d\n  }\x0d\n\x0d\n  // First we generate a random int between [0..range)\x0d\n  const range = max - min;\x0d\n\x0d\n  if (!(range <= RAND_MAX)) {\x0d\n    throw new ERR_OUT_OF_RANGE(`max${minNotSpecified ? '' : ' - min'}`\x2C\x0d\n                               `<= ${RAND_MAX}`\x2C range);\x0d\n  }\x0d\n\x0d\n  // For (x % range) to produce an unbiased value greater than or equal to 0 and\x0d\n  // less than range\x2C x must be drawn randomly from the set of integers greater\x0d\n  // than or equal to 0 and less than randLimit.\x0d\n  const randLimit = RAND_MAX - (RAND_MAX % range);\x0d\n\x0d\n  // If we don't have a callback\x2C or if there is still data in the cache\x2C we can\x0d\n  // do this synchronously\x2C which is super fast.\x0d\n  while (isSync || (randomCacheOffset < randomCache.length)) {\x0d\n    if (randomCacheOffset === randomCache.length) {\x0d\n      // This might block the thread for a bit\x2C but we are in sync mode.\x0d\n      randomFillSync(randomCache);\x0d\n      randomCacheOffset = 0;\x0d\n    }\x0d\n\x0d\n    const x = randomCache.readUIntBE(randomCacheOffset\x2C 6);\x0d\n    randomCacheOffset += 6;\x0d\n\x0d\n    if (x < randLimit) {\x0d\n      const n = (x % range) + min;\x0d\n      if (isSync) return n;\x0d\n      process.nextTick(callback\x2C undefined\x2C n);\x0d\n      return;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // At this point\x2C we are in async mode with no data in the cache. We cannot\x0d\n  // simply refill the cache\x2C because another async call to randomInt might\x0d\n  // already be doing that. Instead\x2C queue this call for when the cache has\x0d\n  // been refilled.\x0d\n  ArrayPrototypePush(asyncCachePendingTasks\x2C { min\x2C max\x2C callback });\x0d\n  asyncRefillRandomIntCache();\x0d\n}\x0d\n\x0d\nfunction asyncRefillRandomIntCache() {\x0d\n  if (asyncCacheFillInProgress)\x0d\n    return;\x0d\n\x0d\n  asyncCacheFillInProgress = true;\x0d\n  randomFill(randomCache\x2C (err) => {\x0d\n    asyncCacheFillInProgress = false;\x0d\n\x0d\n    const tasks = asyncCachePendingTasks;\x0d\n    const errorReceiver = err && ArrayPrototypeShift(tasks);\x0d\n    if (!err)\x0d\n      randomCacheOffset = 0;\x0d\n\x0d\n    // Restart all pending tasks. If an error occurred\x2C we only notify a single\x0d\n    // callback (errorReceiver) about it. This way\x2C every async call to\x0d\n    // randomInt has a chance of being successful\x2C and it avoids complex\x0d\n    // exception handling here.\x0d\n    ArrayPrototypeForEach(ArrayPrototypeSplice(tasks\x2C 0)\x2C (task) => {\x0d\n      randomInt(task.min\x2C task.max\x2C task.callback);\x0d\n    });\x0d\n\x0d\n    // This is the only call that might throw\x2C and is therefore done at the end.\x0d\n    if (errorReceiver)\x0d\n      errorReceiver.callback(err);\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction onJobDone(buf\x2C callback\x2C error) {\x0d\n  if (error) return FunctionPrototypeCall(callback\x2C this\x2C error);\x0d\n  FunctionPrototypeCall(callback\x2C this\x2C null\x2C buf);\x0d\n}\x0d\n\x0d\n// Really just the Web Crypto API alternative\x0d\n// to require('crypto').randomFillSync() with an\x0d\n// additional limitation that the input buffer is\x0d\n// not allowed to exceed 65536 bytes\x2C and can only\x0d\n// be an integer-type TypedArray.\x0d\nfunction getRandomValues(data) {\x0d\n  if (!isTypedArray(data) ||\x0d\n      isFloat32Array(data) ||\x0d\n      isFloat64Array(data)) {\x0d\n    // Ordinarily this would be an ERR_INVALID_ARG_TYPE. However\x2C\x0d\n    // the Web Crypto API and web platform tests expect this to\x0d\n    // be a DOMException with type TypeMismatchError.\x0d\n    throw lazyDOMException(\x0d\n      'The data argument must be an integer-type TypedArray'\x2C\x0d\n      'TypeMismatchError');\x0d\n  }\x0d\n  if (data.byteLength > 65536) {\x0d\n    throw lazyDOMException(\x0d\n      'The requested length exceeds 65\x2C536 bytes'\x2C\x0d\n      'QuotaExceededError');\x0d\n  }\x0d\n  randomFillSync(data\x2C 0);\x0d\n  return data;\x0d\n}\x0d\n\x0d\n// Implements an RFC 4122 version 4 random UUID.\x0d\n// To improve performance\x2C random data is generated in batches\x0d\n// large enough to cover kBatchSize UUID's at a time. The uuidData\x0d\n// buffer is reused. Each call to randomUUID() consumes 16 bytes\x0d\n// from the buffer.\x0d\n\x0d\nconst kBatchSize = 128;\x0d\nlet uuidData;\x0d\nlet uuidNotBuffered;\x0d\nlet uuidBatch = 0;\x0d\n\x0d\nlet hexBytesCache;\x0d\nfunction getHexBytes() {\x0d\n  if (hexBytesCache === undefined) {\x0d\n    hexBytesCache = new Array(256);\x0d\n    for (let i = 0; i < hexBytesCache.length; i++) {\x0d\n      const hex = NumberPrototypeToString(i\x2C 16);\x0d\n      hexBytesCache[i] = StringPrototypePadStart(hex\x2C 2\x2C '0');\x0d\n    }\x0d\n  }\x0d\n  return hexBytesCache;\x0d\n}\x0d\n\x0d\nfunction serializeUUID(buf\x2C offset = 0) {\x0d\n  const kHexBytes = getHexBytes();\x0d\n  // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\x0d\n  return kHexBytes[buf[offset]] +\x0d\n    kHexBytes[buf[offset + 1]] +\x0d\n    kHexBytes[buf[offset + 2]] +\x0d\n    kHexBytes[buf[offset + 3]] +\x0d\n    '-' +\x0d\n    kHexBytes[buf[offset + 4]] +\x0d\n    kHexBytes[buf[offset + 5]] +\x0d\n    '-' +\x0d\n    kHexBytes[(buf[offset + 6] & 0x0f) | 0x40] +\x0d\n    kHexBytes[buf[offset + 7]] +\x0d\n    '-' +\x0d\n    kHexBytes[(buf[offset + 8] & 0x3f) | 0x80] +\x0d\n    kHexBytes[buf[offset + 9]] +\x0d\n    '-' +\x0d\n    kHexBytes[buf[offset + 10]] +\x0d\n    kHexBytes[buf[offset + 11]] +\x0d\n    kHexBytes[buf[offset + 12]] +\x0d\n    kHexBytes[buf[offset + 13]] +\x0d\n    kHexBytes[buf[offset + 14]] +\x0d\n    kHexBytes[buf[offset + 15]];\x0d\n}\x0d\n\x0d\nfunction getBufferedUUID() {\x0d\n  uuidData ??= secureBuffer(16 * kBatchSize);\x0d\n  if (uuidData === undefined)\x0d\n    throw new ERR_OPERATION_FAILED('Out of memory');\x0d\n\x0d\n  if (uuidBatch === 0) randomFillSync(uuidData);\x0d\n  uuidBatch = (uuidBatch + 1) % kBatchSize;\x0d\n  return serializeUUID(uuidData\x2C uuidBatch * 16);\x0d\n}\x0d\n\x0d\nfunction getUnbufferedUUID() {\x0d\n  uuidNotBuffered ??= secureBuffer(16);\x0d\n  if (uuidNotBuffered === undefined)\x0d\n    throw new ERR_OPERATION_FAILED('Out of memory');\x0d\n  randomFillSync(uuidNotBuffered);\x0d\n  return serializeUUID(uuidNotBuffered);\x0d\n}\x0d\n\x0d\nfunction randomUUID(options) {\x0d\n  if (options !== undefined)\x0d\n    validateObject(options\x2C 'options');\x0d\n  const {\x0d\n    disableEntropyCache = false\x2C\x0d\n  } = options || kEmptyObject;\x0d\n\x0d\n  validateBoolean(disableEntropyCache\x2C 'options.disableEntropyCache');\x0d\n\x0d\n  return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();\x0d\n}\x0d\n\x0d\nfunction createRandomPrimeJob(type\x2C size\x2C options) {\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  const {\x0d\n    safe = false\x2C\x0d\n    bigint = false\x2C\x0d\n  } = options;\x0d\n  let {\x0d\n    add\x2C\x0d\n    rem\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateBoolean(safe\x2C 'options.safe');\x0d\n  validateBoolean(bigint\x2C 'options.bigint');\x0d\n\x0d\n  if (add !== undefined) {\x0d\n    if (typeof add === 'bigint') {\x0d\n      add = unsignedBigIntToBuffer(add\x2C 'options.add');\x0d\n    } else if (!isAnyArrayBuffer(add) && !isArrayBufferView(add)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.add'\x2C\x0d\n        [\x0d\n          'ArrayBuffer'\x2C\x0d\n          'TypedArray'\x2C\x0d\n          'Buffer'\x2C\x0d\n          'DataView'\x2C\x0d\n          'bigint'\x2C\x0d\n        ]\x2C\x0d\n        add);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (rem !== undefined) {\x0d\n    if (typeof rem === 'bigint') {\x0d\n      rem = unsignedBigIntToBuffer(rem\x2C 'options.rem');\x0d\n    } else if (!isAnyArrayBuffer(rem) && !isArrayBufferView(rem)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'options.rem'\x2C\x0d\n        [\x0d\n          'ArrayBuffer'\x2C\x0d\n          'TypedArray'\x2C\x0d\n          'Buffer'\x2C\x0d\n          'DataView'\x2C\x0d\n          'bigint'\x2C\x0d\n        ]\x2C\x0d\n        rem);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const job = new RandomPrimeJob(type\x2C size\x2C safe\x2C add\x2C rem);\x0d\n  job.result = bigint ? arrayBufferToUnsignedBigInt : (p) => p;\x0d\n  return job;\x0d\n}\x0d\n\x0d\nfunction generatePrime(size\x2C options\x2C callback) {\x0d\n  validateInt32(size\x2C 'size'\x2C 1);\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = kEmptyObject;\x0d\n  }\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = createRandomPrimeJob(kCryptoJobAsync\x2C size\x2C options);\x0d\n  job.ondone = (err\x2C prime) => {\x0d\n    if (err) {\x0d\n      callback(err);\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    callback(\x0d\n      undefined\x2C\x0d\n      job.result(prime));\x0d\n  };\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction generatePrimeSync(size\x2C options = kEmptyObject) {\x0d\n  validateInt32(size\x2C 'size'\x2C 1);\x0d\n\x0d\n  const job = createRandomPrimeJob(kCryptoJobSync\x2C size\x2C options);\x0d\n  const { 0: err\x2C 1: prime } = job.run();\x0d\n  if (err)\x0d\n    throw err;\x0d\n  return job.result(prime);\x0d\n}\x0d\n\x0d\nfunction arrayBufferToUnsignedBigInt(arrayBuffer) {\x0d\n  return BigInt(`0x${Buffer.from(arrayBuffer).toString('hex')}`);\x0d\n}\x0d\n\x0d\nfunction unsignedBigIntToBuffer(bigint\x2C name) {\x0d\n  if (bigint < 0) {\x0d\n    throw new ERR_OUT_OF_RANGE(name\x2C '>= 0'\x2C bigint);\x0d\n  }\x0d\n\x0d\n  const hex = bigint.toString(16);\x0d\n  const padded = hex.padStart(hex.length + (hex.length % 2)\x2C 0);\x0d\n  return Buffer.from(padded\x2C 'hex');\x0d\n}\x0d\n\x0d\nfunction checkPrime(candidate\x2C options = kEmptyObject\x2C callback) {\x0d\n  if (typeof candidate === 'bigint')\x0d\n    candidate = unsignedBigIntToBuffer(candidate\x2C 'candidate');\x0d\n  if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'candidate'\x2C\x0d\n      [\x0d\n        'ArrayBuffer'\x2C\x0d\n        'TypedArray'\x2C\x0d\n        'Buffer'\x2C\x0d\n        'DataView'\x2C\x0d\n        'bigint'\x2C\x0d\n      ]\x2C\x0d\n      candidate\x0d\n    );\x0d\n  }\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = kEmptyObject;\x0d\n  }\x0d\n  validateCallback(callback);\x0d\n  validateObject(options\x2C 'options');\x0d\n  const {\x0d\n    checks = 0\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateUint32(checks\x2C 'options.checks');\x0d\n\x0d\n  const job = new CheckPrimeJob(kCryptoJobAsync\x2C candidate\x2C checks);\x0d\n  job.ondone = callback;\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction checkPrimeSync(candidate\x2C options = kEmptyObject) {\x0d\n  if (typeof candidate === 'bigint')\x0d\n    candidate = unsignedBigIntToBuffer(candidate\x2C 'candidate');\x0d\n  if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'candidate'\x2C\x0d\n      [\x0d\n        'ArrayBuffer'\x2C\x0d\n        'TypedArray'\x2C\x0d\n        'Buffer'\x2C\x0d\n        'DataView'\x2C\x0d\n        'bigint'\x2C\x0d\n      ]\x2C\x0d\n      candidate\x0d\n    );\x0d\n  }\x0d\n  validateObject(options\x2C 'options');\x0d\n  const {\x0d\n    checks = 0\x2C\x0d\n  } = options;\x0d\n\x0d\n  validateUint32(checks\x2C 'options.checks');\x0d\n\x0d\n  const job = new CheckPrimeJob(kCryptoJobSync\x2C candidate\x2C checks);\x0d\n  const { 0: err\x2C 1: result } = job.run();\x0d\n  if (err)\x0d\n    throw err;\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  checkPrime\x2C\x0d\n  checkPrimeSync\x2C\x0d\n  randomBytes\x2C\x0d\n  randomFill\x2C\x0d\n  randomFillSync\x2C\x0d\n  randomInt\x2C\x0d\n  getRandomValues\x2C\x0d\n  randomUUID\x2C\x0d\n  generatePrime\x2C\x0d\n  generatePrimeSync\x2C\x0d\n};\x0d\n
code-source-info,0x1aff214ca06,160,0,15756,C0O0C4O15756,,
code-creation,Function,10,853412,0x1aff214d48e,705, node:internal/crypto/random:1:1,0x1aff214c980,~
code-source-info,0x1aff214d48e
code-creation,Eval,10,854634,0x1aff214f22e,5, node:internal/crypto/pbkdf2:1:1,0x1aff214efb8,~
script-source,161,node:internal/crypto/pbkdf2,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Promise\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  PBKDF2Job\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateInt32\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { ERR_MISSING_OPTION } = require('internal/errors').codes;\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  normalizeHashName\x2C\x0d\n  kKeyObject\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nfunction pbkdf2(password\x2C salt\x2C iterations\x2C keylen\x2C digest\x2C callback) {\x0d\n  if (typeof digest === 'function') {\x0d\n    callback = digest;\x0d\n    digest = undefined;\x0d\n  }\x0d\n\x0d\n  ({ password\x2C salt\x2C iterations\x2C keylen\x2C digest } =\x0d\n    check(password\x2C salt\x2C iterations\x2C keylen\x2C digest));\x0d\n\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = new PBKDF2Job(\x0d\n    kCryptoJobAsync\x2C\x0d\n    password\x2C\x0d\n    salt\x2C\x0d\n    iterations\x2C\x0d\n    keylen\x2C\x0d\n    digest);\x0d\n\x0d\n  const encoding = getDefaultEncoding();\x0d\n  job.ondone = (err\x2C result) => {\x0d\n    if (err !== undefined)\x0d\n      return FunctionPrototypeCall(callback\x2C job\x2C err);\x0d\n    const buf = Buffer.from(result);\x0d\n    if (encoding === 'buffer')\x0d\n      return FunctionPrototypeCall(callback\x2C job\x2C null\x2C buf);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C buf.toString(encoding));\x0d\n  };\x0d\n\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction pbkdf2Sync(password\x2C salt\x2C iterations\x2C keylen\x2C digest) {\x0d\n  ({ password\x2C salt\x2C iterations\x2C keylen\x2C digest } =\x0d\n    check(password\x2C salt\x2C iterations\x2C keylen\x2C digest));\x0d\n\x0d\n  const job = new PBKDF2Job(\x0d\n    kCryptoJobSync\x2C\x0d\n    password\x2C\x0d\n    salt\x2C\x0d\n    iterations\x2C\x0d\n    keylen\x2C\x0d\n    digest);\x0d\n\x0d\n  const { 0: err\x2C 1: result } = job.run();\x0d\n  if (err !== undefined)\x0d\n    throw err;\x0d\n\x0d\n  const buf = Buffer.from(result);\x0d\n  const encoding = getDefaultEncoding();\x0d\n  return encoding === 'buffer' ? buf : buf.toString(encoding);\x0d\n}\x0d\n\x0d\nfunction check(password\x2C salt\x2C iterations\x2C keylen\x2C digest) {\x0d\n  validateString(digest\x2C 'digest');\x0d\n\x0d\n  password = getArrayBufferOrView(password\x2C 'password');\x0d\n  salt = getArrayBufferOrView(salt\x2C 'salt');\x0d\n  // OpenSSL uses a signed int to represent these values\x2C so we are restricted\x0d\n  // to the 31-bit range here (which is plenty).\x0d\n  validateInt32(iterations\x2C 'iterations'\x2C 1);\x0d\n  validateInt32(keylen\x2C 'keylen'\x2C 0);\x0d\n\x0d\n  return { password\x2C salt\x2C iterations\x2C keylen\x2C digest };\x0d\n}\x0d\n\x0d\nasync function pbkdf2DeriveBits(algorithm\x2C baseKey\x2C length) {\x0d\n  const { iterations } = algorithm;\x0d\n  let { hash } = algorithm;\x0d\n  const salt = getArrayBufferOrView(algorithm.salt\x2C 'algorithm.salt');\x0d\n  if (hash === undefined)\x0d\n    throw new ERR_MISSING_OPTION('algorithm.hash');\x0d\n  validateInteger(iterations\x2C 'algorithm.iterations');\x0d\n  if (iterations === 0)\x0d\n    throw lazyDOMException(\x0d\n      'iterations cannot be zero'\x2C\x0d\n      'OperationError');\x0d\n\x0d\n  hash = normalizeHashName(hash.name);\x0d\n\x0d\n  const raw = baseKey[kKeyObject].export();\x0d\n\x0d\n  let byteLength = 64;  // the default\x0d\n  if (length !== undefined) {\x0d\n    if (length === 0)\x0d\n      throw lazyDOMException('length cannot be zero'\x2C 'OperationError');\x0d\n    if (length === null)\x0d\n      throw lazyDOMException('length cannot be null'\x2C 'OperationError');\x0d\n    validateUint32(length\x2C 'length');\x0d\n    if (length % 8) {\x0d\n      throw lazyDOMException(\x0d\n        'length must be a multiple of 8'\x2C\x0d\n        'OperationError');\x0d\n    }\x0d\n    byteLength = length / 8;\x0d\n  }\x0d\n\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    pbkdf2(raw\x2C salt\x2C iterations\x2C byteLength\x2C hash\x2C (err\x2C result) => {\x0d\n      if (err) return reject(err);\x0d\n      resolve(result.buffer);\x0d\n    });\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  pbkdf2\x2C\x0d\n  pbkdf2Sync\x2C\x0d\n  pbkdf2DeriveBits\x2C\x0d\n};\x0d\n
code-source-info,0x1aff214f22e,161,0,3782,C0O0C4O3782,,
code-creation,Function,10,855171,0x1aff214f53e,264, node:internal/crypto/pbkdf2:1:1,0x1aff214f1a8,~
code-source-info,0x1aff214f53e,161,0,3782,C0O0C78O28C84O54C90O103C93O103C98O92C104O191C107O191C112O136C118O150C124O170C130O331C133O331C138O232C144O253C150O271C156O291C162O310C168O397C171O397C176O423C181O374C187O532C190O532C195O445C201O470C207O493C213O515C219O602C222O602C227O579C233O3711C240O3733C246O3744C252O3759C258O3726C263O3781,,
code-creation,Eval,10,856266,0x1aff2150afe,5, node:internal/crypto/util:1:1,0x1aff2150768,~
script-source,162,node:internal/crypto/util,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  BigInt\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  Number\x2C\x0d\n  ObjectKeys\x2C\x0d\n  Promise\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  getCiphers: _getCiphers\x2C\x0d\n  getCurves: _getCurves\x2C\x0d\n  getHashes: _getHashes\x2C\x0d\n  setEngine: _setEngine\x2C\x0d\n  secureHeapUsed: _secureHeapUsed\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\n\x0d\nconst {\x0d\n  crypto: {\x0d\n    ENGINE_METHOD_ALL\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\nconst normalizeHashName = require('internal/crypto/hashnames');\x0d\n\x0d\nconst {\x0d\n  hideStackFrames\x2C\x0d\n  codes: {\x0d\n    ERR_CRYPTO_ENGINE_UNKNOWN\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateNumber\x2C\x0d\n  validateString\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  cachedResult\x2C\x0d\n  filterDuplicateStrings\x2C\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isAnyArrayBuffer\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst kHandle = Symbol('kHandle');\x0d\nconst kKeyObject = Symbol('kKeyObject');\x0d\n\x0d\nconst lazyRequireCache = {};\x0d\n\x0d\nfunction lazyRequire(name) {\x0d\n  let ret = lazyRequireCache[name];\x0d\n  if (ret === undefined)\x0d\n    ret = lazyRequireCache[name] = require(name);\x0d\n  return ret;\x0d\n}\x0d\n\x0d\nlet defaultEncoding = 'buffer';\x0d\n\x0d\nfunction setDefaultEncoding(val) {\x0d\n  defaultEncoding = val;\x0d\n}\x0d\n\x0d\nfunction getDefaultEncoding() {\x0d\n  return defaultEncoding;\x0d\n}\x0d\n\x0d\n// This is here because many functions accepted binary strings without\x0d\n// any explicit encoding in older versions of node\x2C and we don't want\x0d\n// to break them unnecessarily.\x0d\nfunction toBuf(val\x2C encoding) {\x0d\n  if (typeof val === 'string') {\x0d\n    if (encoding === 'buffer')\x0d\n      encoding = 'utf8';\x0d\n    return Buffer.from(val\x2C encoding);\x0d\n  }\x0d\n  return val;\x0d\n}\x0d\n\x0d\nconst getCiphers = cachedResult(() => filterDuplicateStrings(_getCiphers()));\x0d\nconst getHashes = cachedResult(() => filterDuplicateStrings(_getHashes()));\x0d\nconst getCurves = cachedResult(() => filterDuplicateStrings(_getCurves()));\x0d\n\x0d\nfunction setEngine(id\x2C flags) {\x0d\n  validateString(id\x2C 'id');\x0d\n  if (flags)\x0d\n    validateNumber(flags\x2C 'flags');\x0d\n  flags = flags >>> 0;\x0d\n\x0d\n  // Use provided engine for everything by default\x0d\n  if (flags === 0)\x0d\n    flags = ENGINE_METHOD_ALL;\x0d\n\x0d\n  if (!_setEngine(id\x2C flags))\x0d\n    throw new ERR_CRYPTO_ENGINE_UNKNOWN(id);\x0d\n}\x0d\n\x0d\nconst getArrayBufferOrView = hideStackFrames((buffer\x2C name\x2C encoding) => {\x0d\n  if (isAnyArrayBuffer(buffer))\x0d\n    return buffer;\x0d\n  if (typeof buffer === 'string') {\x0d\n    if (encoding === 'buffer')\x0d\n      encoding = 'utf8';\x0d\n    return Buffer.from(buffer\x2C encoding);\x0d\n  }\x0d\n  if (!isArrayBufferView(buffer)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      name\x2C\x0d\n      [\x0d\n        'string'\x2C\x0d\n        'ArrayBuffer'\x2C\x0d\n        'Buffer'\x2C\x0d\n        'TypedArray'\x2C\x0d\n        'DataView'\x2C\x0d\n      ]\x2C\x0d\n      buffer\x0d\n    );\x0d\n  }\x0d\n  return buffer;\x0d\n});\x0d\n\x0d\n// The maximum buffer size that we'll support in the WebCrypto impl\x0d\nconst kMaxBufferLength = (2 ** 31) - 1;\x0d\n\x0d\n// The EC named curves that we currently support via the Web Crypto API.\x0d\nconst kNamedCurveAliases = {\x0d\n  'P-256': 'prime256v1'\x2C\x0d\n  'P-384': 'secp384r1'\x2C\x0d\n  'P-521': 'secp521r1'\x2C\x0d\n};\x0d\n\x0d\nconst kAesKeyLengths = [128\x2C 192\x2C 256];\x0d\n\x0d\n// These are the only algorithms we currently support\x0d\n// via the Web Crypto API\x0d\nconst kAlgorithms = {\x0d\n  'rsassa-pkcs1-v1_5': 'RSASSA-PKCS1-v1_5'\x2C\x0d\n  'rsa-pss': 'RSA-PSS'\x2C\x0d\n  'rsa-oaep': 'RSA-OAEP'\x2C\x0d\n  'ecdsa': 'ECDSA'\x2C\x0d\n  'ecdh': 'ECDH'\x2C\x0d\n  'aes-ctr': 'AES-CTR'\x2C\x0d\n  'aes-cbc': 'AES-CBC'\x2C\x0d\n  'aes-gcm': 'AES-GCM'\x2C\x0d\n  'aes-kw': 'AES-KW'\x2C\x0d\n  'hmac': 'HMAC'\x2C\x0d\n  'sha-1': 'SHA-1'\x2C\x0d\n  'sha-256': 'SHA-256'\x2C\x0d\n  'sha-384': 'SHA-384'\x2C\x0d\n  'sha-512': 'SHA-512'\x2C\x0d\n  'hkdf': 'HKDF'\x2C\x0d\n  'pbkdf2': 'PBKDF2'\x2C\x0d\n  'ed25519': 'Ed25519'\x2C\x0d\n  'ed448': 'Ed448'\x2C\x0d\n  'x25519': 'X25519'\x2C\x0d\n  'x448': 'X448'\x2C\x0d\n};\x0d\nconst kAlgorithmsKeys = ObjectKeys(kAlgorithms);\x0d\n\x0d\n// These are the only export and import formats we currently\x0d\n// support via the Web Crypto API\x0d\nconst kExportFormats = [\x0d\n  'raw'\x2C\x0d\n  'pkcs8'\x2C\x0d\n  'spki'\x2C\x0d\n  'jwk'];\x0d\n\x0d\n// These are the only hash algorithms we currently support via\x0d\n// the Web Crypto API.\x0d\nconst kHashTypes = [\x0d\n  'SHA-1'\x2C\x0d\n  'SHA-256'\x2C\x0d\n  'SHA-384'\x2C\x0d\n  'SHA-512'\x2C\x0d\n];\x0d\n\x0d\nfunction validateMaxBufferLength(data\x2C name) {\x0d\n  if (data.byteLength > kMaxBufferLength) {\x0d\n    throw lazyDOMException(\x0d\n      `${name} must be less than ${kMaxBufferLength + 1} bits`\x2C\x0d\n      'OperationError');\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction normalizeAlgorithm(algorithm) {\x0d\n  if (algorithm != null) {\x0d\n    if (typeof algorithm === 'string')\x0d\n      algorithm = { name: algorithm };\x0d\n\x0d\n    if (typeof algorithm === 'object') {\x0d\n      const { name } = algorithm;\x0d\n      if (typeof name !== 'string' ||\x0d\n          !ArrayPrototypeIncludes(\x0d\n            kAlgorithmsKeys\x2C\x0d\n            StringPrototypeToLowerCase(name))) {\x0d\n        throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n      }\x0d\n      let { hash } = algorithm;\x0d\n      if (hash !== undefined) {\x0d\n        hash = normalizeAlgorithm(hash);\x0d\n        if (!ArrayPrototypeIncludes(kHashTypes\x2C hash.name))\x0d\n          throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n      }\x0d\n      const normalized = {\x0d\n        ...algorithm\x2C\x0d\n        name: kAlgorithms[StringPrototypeToLowerCase(name)]\x2C\x0d\n      };\x0d\n      if (hash) {\x0d\n        normalized.hash = hash;\x0d\n      }\x0d\n      return normalized;\x0d\n    }\x0d\n  }\x0d\n  throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nfunction hasAnyNotIn(set\x2C checks) {\x0d\n  for (const s of set)\x0d\n    if (!ArrayPrototypeIncludes(checks\x2C s))\x0d\n      return true;\x0d\n  return false;\x0d\n}\x0d\n\x0d\nfunction validateBitLength(length\x2C name\x2C required = false) {\x0d\n  if (length !== undefined || required) {\x0d\n    validateNumber(length\x2C name);\x0d\n    if (length < 0)\x0d\n      throw new ERR_OUT_OF_RANGE(name\x2C '> 0');\x0d\n    if (length % 8) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        name\x2C\x0d\n        length\x2C\x0d\n        'must be a multiple of 8');\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction validateByteLength(buf\x2C name\x2C target) {\x0d\n  if (buf.byteLength !== target) {\x0d\n    throw lazyDOMException(\x0d\n      `${name} must contain exactly ${target} bytes`\x2C\x0d\n      'OperationError');\x0d\n  }\x0d\n}\x0d\n\x0d\nconst validateByteSource = hideStackFrames((val\x2C name) => {\x0d\n  val = toBuf(val);\x0d\n\x0d\n  if (isAnyArrayBuffer(val) || isArrayBufferView(val))\x0d\n    return val;\x0d\n\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    name\x2C\x0d\n    [\x0d\n      'string'\x2C\x0d\n      'ArrayBuffer'\x2C\x0d\n      'TypedArray'\x2C\x0d\n      'DataView'\x2C\x0d\n      'Buffer'\x2C\x0d\n    ]\x2C\x0d\n    val);\x0d\n});\x0d\n\x0d\nfunction onDone(resolve\x2C reject\x2C err\x2C result) {\x0d\n  if (err) {\x0d\n    // TODO(@panva): add err as cause to DOMException\x0d\n    return reject(lazyDOMException(\x0d\n      'The operation failed for an operation-specific reason'\x2C\x0d\n      'OperationError'));\x0d\n  }\x0d\n  resolve(result);\x0d\n}\x0d\n\x0d\nfunction jobPromise(job) {\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    job.ondone = FunctionPrototypeBind(onDone\x2C job\x2C resolve\x2C reject);\x0d\n    job.run();\x0d\n  });\x0d\n}\x0d\n\x0d\n// In WebCrypto\x2C the publicExponent option in RSA is represented as a\x0d\n// WebIDL "BigInteger"... that is\x2C a Uint8Array that allows an arbitrary\x0d\n// number of leading zero bits. Our conventional APIs for reading\x0d\n// an unsigned int from a Buffer are not adequate. The implementation\x0d\n// here is adapted from the chromium implementation here:\x0d\n// https://github.com/chromium/chromium/blob/HEAD/third_party/blink/public/platform/web_crypto_algorithm_params.h\x2C but ported to JavaScript\x0d\n// Returns undefined if the conversion was unsuccessful.\x0d\nfunction bigIntArrayToUnsignedInt(input) {\x0d\n  let result = 0;\x0d\n\x0d\n  for (let n = 0; n < input.length; ++n) {\x0d\n    const n_reversed = input.length - n - 1;\x0d\n    if (n_reversed >= 4 && input[n])\x0d\n      return;  // Too large\x0d\n    result |= input[n] << 8 * n_reversed;\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nfunction bigIntArrayToUnsignedBigInt(input) {\x0d\n  let result = 0n;\x0d\n\x0d\n  for (let n = 0; n < input.length; ++n) {\x0d\n    const n_reversed = input.length - n - 1;\x0d\n    result |= BigInt(input[n]) << 8n * BigInt(n_reversed);\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nfunction getStringOption(options\x2C key) {\x0d\n  let value;\x0d\n  if (options && (value = options[key]) != null)\x0d\n    validateString(value\x2C `options.${key}`);\x0d\n  return value;\x0d\n}\x0d\n\x0d\nfunction getUsagesUnion(usageSet\x2C ...usages) {\x0d\n  const newset = [];\x0d\n  for (let n = 0; n < usages.length; n++) {\x0d\n    if (usageSet.has(usages[n]))\x0d\n      ArrayPrototypePush(newset\x2C usages[n]);\x0d\n  }\x0d\n  return newset;\x0d\n}\x0d\n\x0d\nfunction getHashLength(name) {\x0d\n  switch (name) {\x0d\n    case 'SHA-1': return 160;\x0d\n    case 'SHA-256': return 256;\x0d\n    case 'SHA-384': return 384;\x0d\n    case 'SHA-512': return 512;\x0d\n  }\x0d\n}\x0d\n\x0d\nconst kKeyOps = {\x0d\n  sign: 1\x2C\x0d\n  verify: 2\x2C\x0d\n  encrypt: 3\x2C\x0d\n  decrypt: 4\x2C\x0d\n  wrapKey: 5\x2C\x0d\n  unwrapKey: 6\x2C\x0d\n  deriveKey: 7\x2C\x0d\n  deriveBits: 8\x2C\x0d\n};\x0d\n\x0d\nfunction validateKeyOps(keyOps\x2C usagesSet) {\x0d\n  if (keyOps === undefined) return;\x0d\n  validateArray(keyOps\x2C 'keyData.key_ops');\x0d\n  let flags = 0;\x0d\n  for (let n = 0; n < keyOps.length; n++) {\x0d\n    const op = keyOps[n];\x0d\n    const op_flag = kKeyOps[op];\x0d\n    // Skipping unknown key ops\x0d\n    if (op_flag === undefined)\x0d\n      continue;\x0d\n    // Have we seen it already? if so\x2C error\x0d\n    if (flags & (1 << op_flag))\x0d\n      throw lazyDOMException('Duplicate key operation'\x2C 'DataError');\x0d\n    flags |= (1 << op_flag);\x0d\n\x0d\n    // TODO(@jasnell): RFC7517 section 4.3 strong recommends validating\x0d\n    // key usage combinations. Specifically\x2C it says that unrelated key\x0d\n    // ops SHOULD NOT be used together. We're not yet validating that here.\x0d\n  }\x0d\n\x0d\n  if (usagesSet !== undefined) {\x0d\n    for (const use of usagesSet) {\x0d\n      if (!ArrayPrototypeIncludes(keyOps\x2C use)) {\x0d\n        throw lazyDOMException(\x0d\n          'Key operations and usage mismatch'\x2C\x0d\n          'DataError');\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction secureHeapUsed() {\x0d\n  const val = _secureHeapUsed();\x0d\n  if (val === undefined)\x0d\n    return { total: 0\x2C used: 0\x2C utilization: 0\x2C min: 0 };\x0d\n  const used = Number(_secureHeapUsed());\x0d\n  const total = Number(getOptionValue('--secure-heap'));\x0d\n  const min = Number(getOptionValue('--secure-heap-min'));\x0d\n  const utilization = used / total;\x0d\n  return { total\x2C used\x2C utilization\x2C min };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getCiphers\x2C\x0d\n  getCurves\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  getHashes\x2C\x0d\n  kHandle\x2C\x0d\n  kKeyObject\x2C\x0d\n  setDefaultEncoding\x2C\x0d\n  setEngine\x2C\x0d\n  toBuf\x2C\x0d\n\x0d\n  kHashTypes\x2C\x0d\n  kNamedCurveAliases\x2C\x0d\n  kAesKeyLengths\x2C\x0d\n  kExportFormats\x2C\x0d\n  normalizeAlgorithm\x2C\x0d\n  normalizeHashName\x2C\x0d\n  hasAnyNotIn\x2C\x0d\n  validateBitLength\x2C\x0d\n  validateByteLength\x2C\x0d\n  validateByteSource\x2C\x0d\n  validateKeyOps\x2C\x0d\n  jobPromise\x2C\x0d\n  lazyRequire\x2C\x0d\n  validateMaxBufferLength\x2C\x0d\n  bigIntArrayToUnsignedBigInt\x2C\x0d\n  bigIntArrayToUnsignedInt\x2C\x0d\n  getStringOption\x2C\x0d\n  getUsagesUnion\x2C\x0d\n  getHashLength\x2C\x0d\n  secureHeapUsed\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2150afe,162,0,10938,C0O0C4O10938,,
code-creation,Function,10,857293,0x1aff2151b06,851, node:internal/crypto/util:1:1,0x1aff2150a78,~
code-source-info,0x1aff2151b
code-creation,Eval,10,857873,0x1aff215371e,5, node:internal/crypto/hashnames:1:1,0x1aff21535a8,~
script-source,163,node:internal/crypto/hashnames,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectKeys\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst kHashContextNode = 1;\x0d\nconst kHashContextWebCrypto = 2;\x0d\nconst kHashContextJwkRsa = 3;\x0d\nconst kHashContextJwkRsaPss = 4;\x0d\nconst kHashContextJwkRsaOaep = 5;\x0d\nconst kHashContextJwkHmac = 6;\x0d\n\x0d\n// WebCrypto and JWK use a bunch of different names for the\x0d\n// standard set of SHA-* digest algorithms... which is ... fun.\x0d\n// Here we provide a utility for mapping between them in order\x0d\n// make it easier in the code.\x0d\n\x0d\nconst kHashNames = {\x0d\n  sha1: {\x0d\n    [kHashContextNode]: 'sha1'\x2C\x0d\n    [kHashContextWebCrypto]: 'SHA-1'\x2C\x0d\n    [kHashContextJwkRsa]: 'RS1'\x2C\x0d\n    [kHashContextJwkRsaPss]: 'PS1'\x2C\x0d\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP'\x2C\x0d\n    [kHashContextJwkHmac]: 'HS1'\x2C\x0d\n  }\x2C\x0d\n  sha256: {\x0d\n    [kHashContextNode]: 'sha256'\x2C\x0d\n    [kHashContextWebCrypto]: 'SHA-256'\x2C\x0d\n    [kHashContextJwkRsa]: 'RS256'\x2C\x0d\n    [kHashContextJwkRsaPss]: 'PS256'\x2C\x0d\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-256'\x2C\x0d\n    [kHashContextJwkHmac]: 'HS256'\x2C\x0d\n  }\x2C\x0d\n  sha384: {\x0d\n    [kHashContextNode]: 'sha384'\x2C\x0d\n    [kHashContextWebCrypto]: 'SHA-384'\x2C\x0d\n    [kHashContextJwkRsa]: 'RS384'\x2C\x0d\n    [kHashContextJwkRsaPss]: 'PS384'\x2C\x0d\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-384'\x2C\x0d\n    [kHashContextJwkHmac]: 'HS384'\x2C\x0d\n  }\x2C\x0d\n  sha512: {\x0d\n    [kHashContextNode]: 'sha512'\x2C\x0d\n    [kHashContextWebCrypto]: 'SHA-512'\x2C\x0d\n    [kHashContextJwkRsa]: 'RS512'\x2C\x0d\n    [kHashContextJwkRsaPss]: 'PS512'\x2C\x0d\n    [kHashContextJwkRsaOaep]: 'RSA-OAEP-512'\x2C\x0d\n    [kHashContextJwkHmac]: 'HS512'\x2C\x0d\n  }\x0d\n};\x0d\n\x0d\n{\x0d\n  // Index the aliases\x0d\n  const keys = ObjectKeys(kHashNames);\x0d\n  for (let n = 0; n < keys.length; n++) {\x0d\n    const contexts = ObjectKeys(kHashNames[keys[n]]);\x0d\n    for (let i = 0; i < contexts.length; i++) {\x0d\n      const alias =\x0d\n        StringPrototypeToLowerCase(kHashNames[keys[n]][contexts[i]]);\x0d\n      if (kHashNames[alias] === undefined)\x0d\n        kHashNames[alias] = kHashNames[keys[n]];\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction normalizeHashName(name\x2C context = kHashContextNode) {\x0d\n  if (typeof name !== 'string')\x0d\n    return name;\x0d\n  name = StringPrototypeToLowerCase(name);\x0d\n  const alias = kHashNames[name] && kHashNames[name][context];\x0d\n  return alias || name;\x0d\n}\x0d\n\x0d\nnormalizeHashName.kContextNode = kHashContextNode;\x0d\nnormalizeHashName.kContextWebCrypto = kHashContextWebCrypto;\x0d\nnormalizeHashName.kContextJwkRsa = kHashContextJwkRsa;\x0d\nnormalizeHashName.kContextJwkRsaPss = kHashContextJwkRsaPss;\x0d\nnormalizeHashName.kContextJwkRsaOaep = kHashContextJwkRsaOaep;\x0d\nnormalizeHashName.kContextJwkHmac = kHashContextJwkHmac;\x0d\n\x0d\nmodule.exports = normalizeHashName;\x0d\n
code-source-info,0x1aff215371e,163,0,2603,C0O0C4O2603,,
code-creation,Function,10,858108,0x1aff21539ee,530, node:internal/crypto/hashnames:1:1,0x1aff2153698,~
code-source-info,0x1aff21539ee
code-creation,LazyCompile,10,858528,0x1aff2154346,20,cachedResult node:internal/util:244:22,0x2392d467b8,~
code-source-info,0x1aff2154346,15,7028,7170,C0O7028C12O7042C13O7042C15O7053C19O7167,,
code-creation,LazyCompile,10,858684,0x1aff21544a6,43,hideStackFrames node:internal/errors:399:25,0x39b87e7ad0,~
code-source-info,0x1aff21544a6,11,11467,11714,C0O11595C5O11619C9O11614C13O11628C21O11649C28O11687C35O11628C40O11701C42O11711,,
code-creation,Eval,10,859393,0x1aff2154a16,5, node:internal/crypto/scrypt:1:1,0x1aff21547e0,~
script-source,164,node:internal/crypto/scrypt,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeCall\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  ScryptJob\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateInteger\x2C\x0d\n  validateInt32\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_SCRYPT_INVALID_PARAMETER\x2C\x0d\n    ERR_CRYPTO_SCRYPT_NOT_SUPPORTED\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst defaults = {\x0d\n  N: 16384\x2C\x0d\n  r: 8\x2C\x0d\n  p: 1\x2C\x0d\n  maxmem: 32 << 20\x2C  // 32 MiB\x2C matches SCRYPT_MAX_MEM.\x0d\n};\x0d\n\x0d\nfunction scrypt(password\x2C salt\x2C keylen\x2C options\x2C callback = defaults) {\x0d\n  if (callback === defaults) {\x0d\n    callback = options;\x0d\n    options = defaults;\x0d\n  }\x0d\n\x0d\n  options = check(password\x2C salt\x2C keylen\x2C options);\x0d\n  const { N\x2C r\x2C p\x2C maxmem } = options;\x0d\n  ({ password\x2C salt\x2C keylen } = options);\x0d\n\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = new ScryptJob(\x0d\n    kCryptoJobAsync\x2C password\x2C salt\x2C N\x2C r\x2C p\x2C maxmem\x2C keylen);\x0d\n\x0d\n  const encoding = getDefaultEncoding();\x0d\n  job.ondone = (error\x2C result) => {\x0d\n    if (error !== undefined)\x0d\n      return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    const buf = Buffer.from(result);\x0d\n    if (encoding === 'buffer')\x0d\n      return FunctionPrototypeCall(callback\x2C job\x2C null\x2C buf);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C buf.toString(encoding));\x0d\n  };\x0d\n\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction scryptSync(password\x2C salt\x2C keylen\x2C options = defaults) {\x0d\n  options = check(password\x2C salt\x2C keylen\x2C options);\x0d\n  const { N\x2C r\x2C p\x2C maxmem } = options;\x0d\n  ({ password\x2C salt\x2C keylen } = options);\x0d\n  const job = new ScryptJob(\x0d\n    kCryptoJobSync\x2C password\x2C salt\x2C N\x2C r\x2C p\x2C maxmem\x2C keylen);\x0d\n  const { 0: err\x2C 1: result } = job.run();\x0d\n\x0d\n  if (err !== undefined)\x0d\n    throw err;\x0d\n\x0d\n  const buf = Buffer.from(result);\x0d\n  const encoding = getDefaultEncoding();\x0d\n  return encoding === 'buffer' ? buf : buf.toString(encoding);\x0d\n}\x0d\n\x0d\nfunction check(password\x2C salt\x2C keylen\x2C options) {\x0d\n  if (ScryptJob === undefined)\x0d\n    throw new ERR_CRYPTO_SCRYPT_NOT_SUPPORTED();\x0d\n\x0d\n  password = getArrayBufferOrView(password\x2C 'password');\x0d\n  salt = getArrayBufferOrView(salt\x2C 'salt');\x0d\n  validateInt32(keylen\x2C 'keylen'\x2C 0);\x0d\n\x0d\n  let { N\x2C r\x2C p\x2C maxmem } = defaults;\x0d\n  if (options && options !== defaults) {\x0d\n    const has_N = options.N !== undefined;\x0d\n    if (has_N) {\x0d\n      N = options.N;\x0d\n      validateUint32(N\x2C 'N');\x0d\n    }\x0d\n    if (options.cost !== undefined) {\x0d\n      if (has_N) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\x0d\n      N = options.cost;\x0d\n      validateUint32(N\x2C 'cost');\x0d\n    }\x0d\n    const has_r = (options.r !== undefined);\x0d\n    if (has_r) {\x0d\n      r = options.r;\x0d\n      validateUint32(r\x2C 'r');\x0d\n    }\x0d\n    if (options.blockSize !== undefined) {\x0d\n      if (has_r) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\x0d\n      r = options.blockSize;\x0d\n      validateUint32(r\x2C 'blockSize');\x0d\n    }\x0d\n    const has_p = options.p !== undefined;\x0d\n    if (has_p) {\x0d\n      p = options.p;\x0d\n      validateUint32(p\x2C 'p');\x0d\n    }\x0d\n    if (options.parallelization !== undefined) {\x0d\n      if (has_p) throw new ERR_CRYPTO_SCRYPT_INVALID_PARAMETER();\x0d\n      p = options.parallelization;\x0d\n      validateUint32(p\x2C 'parallelization');\x0d\n    }\x0d\n    if (options.maxmem !== undefined) {\x0d\n      maxmem = options.maxmem;\x0d\n      validateInteger(maxmem\x2C 'maxmem'\x2C 0);\x0d\n    }\x0d\n    if (N === 0) N = defaults.N;\x0d\n    if (r === 0) r = defaults.r;\x0d\n    if (p === 0) p = defaults.p;\x0d\n    if (maxmem === 0) maxmem = defaults.maxmem;\x0d\n  }\x0d\n\x0d\n  return { password\x2C salt\x2C keylen\x2C N\x2C r\x2C p\x2C maxmem };\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  scrypt\x2C\x0d\n  scryptSync\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2154a16,164,0,3736,C0O0C4O3736,,
code-creation,Function,10,859795,0x1aff2154cee,217, node:internal/crypto/scrypt:1:1,0x1aff2154990,~
code-source-info,0x1aff2154cee,164,0,3736,C0O0C63O28C69O91C72O91C77O80C83O179C86O179C91O124C97O138C103O158C109O300C112O300C117O220C123O241C129O261C135O279C141O445C144O445C149O445C154O360C160O402C166O537C169O537C174O487C180O512C186O590C190O590C192O3686C199O3708C205O3719C211O3701C216O3735,,
code-creation,Eval,10,860243,0x1aff2155b66,5, node:internal/crypto/hkdf:1:1,0x1aff2155880,~
script-source,165,node:internal/crypto/hkdf,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeCall\x2C\x0d\n  Promise\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  HKDFJob\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateInteger\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { kMaxLength } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  normalizeHashName\x2C\x0d\n  toBuf\x2C\x0d\n  validateByteSource\x2C\x0d\n  kKeyObject\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  createSecretKey\x2C\x0d\n  isKeyObject\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_OUT_OF_RANGE\x2C\x0d\n    ERR_MISSING_OPTION\x2C\x0d\n  }\x2C\x0d\n  hideStackFrames\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst validateParameters = hideStackFrames((hash\x2C key\x2C salt\x2C info\x2C length) => {\x0d\n  validateString(hash\x2C 'digest');\x0d\n  key = prepareKey(key);\x0d\n  salt = validateByteSource(salt\x2C 'salt');\x0d\n  info = validateByteSource(info\x2C 'info');\x0d\n\x0d\n  validateInteger(length\x2C 'length'\x2C 0\x2C kMaxLength);\x0d\n\x0d\n  if (info.byteLength > 1024) {\x0d\n    throw ERR_OUT_OF_RANGE(\x0d\n      'info'\x2C\x0d\n      'must not contain more than 1024 bytes'\x2C\x0d\n      info.byteLength);\x0d\n  }\x0d\n\x0d\n  return {\x0d\n    hash\x2C\x0d\n    key\x2C\x0d\n    salt\x2C\x0d\n    info\x2C\x0d\n    length\x2C\x0d\n  };\x0d\n});\x0d\n\x0d\nfunction prepareKey(key) {\x0d\n  if (isKeyObject(key))\x0d\n    return key;\x0d\n\x0d\n  if (isAnyArrayBuffer(key))\x0d\n    return createSecretKey(key);\x0d\n\x0d\n  key = toBuf(key);\x0d\n\x0d\n  if (!isArrayBufferView(key)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'ikm'\x2C\x0d\n      [\x0d\n        'string'\x2C\x0d\n        'SecretKeyObject'\x2C\x0d\n        'ArrayBuffer'\x2C\x0d\n        'TypedArray'\x2C\x0d\n        'DataView'\x2C\x0d\n        'Buffer'\x2C\x0d\n      ]\x2C\x0d\n      key);\x0d\n  }\x0d\n\x0d\n  return createSecretKey(key);\x0d\n}\x0d\n\x0d\nfunction hkdf(hash\x2C key\x2C salt\x2C info\x2C length\x2C callback) {\x0d\n  ({\x0d\n    hash\x2C\x0d\n    key\x2C\x0d\n    salt\x2C\x0d\n    info\x2C\x0d\n    length\x2C\x0d\n  } = validateParameters(hash\x2C key\x2C salt\x2C info\x2C length));\x0d\n\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = new HKDFJob(kCryptoJobAsync\x2C hash\x2C key\x2C salt\x2C info\x2C length);\x0d\n\x0d\n  job.ondone = (error\x2C bits) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C bits);\x0d\n  };\x0d\n\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction hkdfSync(hash\x2C key\x2C salt\x2C info\x2C length) {\x0d\n  ({\x0d\n    hash\x2C\x0d\n    key\x2C\x0d\n    salt\x2C\x0d\n    info\x2C\x0d\n    length\x2C\x0d\n  } = validateParameters(hash\x2C key\x2C salt\x2C info\x2C length));\x0d\n\x0d\n  const job = new HKDFJob(kCryptoJobSync\x2C hash\x2C key\x2C salt\x2C info\x2C length);\x0d\n  const { 0: err\x2C 1: bits } = job.run();\x0d\n  if (err !== undefined)\x0d\n    throw err;\x0d\n\x0d\n  return bits;\x0d\n}\x0d\n\x0d\nasync function hkdfDeriveBits(algorithm\x2C baseKey\x2C length) {\x0d\n  const { hash } = algorithm;\x0d\n  const salt = getArrayBufferOrView(algorithm.salt\x2C 'algorithm.salt');\x0d\n  const info = getArrayBufferOrView(algorithm.info\x2C 'algorithm.info');\x0d\n  if (hash === undefined)\x0d\n    throw new ERR_MISSING_OPTION('algorithm.hash');\x0d\n\x0d\n  let byteLength = 512 / 8;\x0d\n  if (length !== undefined) {\x0d\n    if (length === 0)\x0d\n      throw lazyDOMException('length cannot be zero'\x2C 'OperationError');\x0d\n    if (length === null)\x0d\n      throw lazyDOMException('length cannot be null'\x2C 'OperationError');\x0d\n    validateUint32(length\x2C 'length');\x0d\n    if (length % 8) {\x0d\n      throw lazyDOMException(\x0d\n        'length must be a multiple of 8'\x2C\x0d\n        'OperationError');\x0d\n    }\x0d\n    byteLength = length / 8;\x0d\n  }\x0d\n\x0d\n  return new Promise((resolve\x2C reject) => {\x0d\n    hkdf(\x0d\n      normalizeHashName(hash.name)\x2C\x0d\n      baseKey[kKeyObject]\x2C\x0d\n      salt\x2C\x0d\n      info\x2C\x0d\n      byteLength\x2C\x0d\n      (err\x2C bits) => {\x0d\n        if (err) return reject(err);\x0d\n        resolve(bits);\x0d\n      });\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  hkdf\x2C\x0d\n  hkdfSync\x2C\x0d\n  hkdfDeriveBits\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2155b66,165,0,3828,C0O0C4O3828,,
code-creation,Function,10,860643,0x1aff2155f16,353, node:internal/crypto/hkdf:1:1,0x1aff2155ae0,~
code-source-info,0x1aff2155f16,165,0,3828,C0O0C99O28C105O54C111O148C114O148C119O95C125O107C131O127C137O270C140O270C145O189C151O210C157O230C163O249C169O328C172O328C177O313C183O458C186O458C191O361C197O386C203O408C209O418C215O441C221O543C224O543C229O505C235O525C241O613C244O613C249O590C255O698C258O698C263O653C269O674C275O859C278O859C283O859C288O758C294O785C300O808C306O837C311O917C316O917C320O917C322O3763C329O3785C335O3794C341O3807C347O3778C352O3827,,
code-creation,Eval,10,862021,0x1aff2157606,5, node:internal/crypto/keys:1:1,0x1aff2157100,~
script-source,166,node:internal/crypto/keys,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayFrom\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  Symbol\x2C\x0d\n  Uint8Array\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  KeyObjectHandle\x2C\x0d\n  createNativeKeyObjectClass\x2C\x0d\n  kKeyTypeSecret\x2C\x0d\n  kKeyTypePublic\x2C\x0d\n  kKeyTypePrivate\x2C\x0d\n  kKeyFormatPEM\x2C\x0d\n  kKeyFormatDER\x2C\x0d\n  kKeyFormatJWK\x2C\x0d\n  kKeyEncodingPKCS1\x2C\x0d\n  kKeyEncodingPKCS8\x2C\x0d\n  kKeyEncodingSPKI\x2C\x0d\n  kKeyEncodingSEC1\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS\x2C\x0d\n    ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE\x2C\x0d\n    ERR_CRYPTO_INVALID_JWK\x2C\x0d\n    ERR_ILLEGAL_CONSTRUCTOR\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  kHandle\x2C\x0d\n  kKeyObject\x2C\x0d\n  getArrayBufferOrView\x2C\x0d\n  bigIntArrayToUnsignedBigInt\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst kAlgorithm = Symbol('kAlgorithm');\x0d\nconst kExtractable = Symbol('kExtractable');\x0d\nconst kKeyType = Symbol('kKeyType');\x0d\nconst kKeyUsages = Symbol('kKeyUsages');\x0d\n\x0d\n// Key input contexts.\x0d\nconst kConsumePublic = 0;\x0d\nconst kConsumePrivate = 1;\x0d\nconst kCreatePublic = 2;\x0d\nconst kCreatePrivate = 3;\x0d\n\x0d\nconst encodingNames = [];\x0d\nfor (const m of [[kKeyEncodingPKCS1\x2C 'pkcs1']\x2C [kKeyEncodingPKCS8\x2C 'pkcs8']\x2C\x0d\n                 [kKeyEncodingSPKI\x2C 'spki']\x2C [kKeyEncodingSEC1\x2C 'sec1']])\x0d\n  encodingNames[m[0]] = m[1];\x0d\n\x0d\n// Creating the KeyObject class is a little complicated due to inheritance\x0d\n// and the fact that KeyObjects should be transferrable between threads\x2C\x0d\n// which requires the KeyObject base class to be implemented in C++.\x0d\n// The creation requires a callback to make sure that the NativeKeyObject\x0d\n// base class cannot exist without the other KeyObject implementations.\x0d\nconst {\x0d\n  0: KeyObject\x2C\x0d\n  1: SecretKeyObject\x2C\x0d\n  2: PublicKeyObject\x2C\x0d\n  3: PrivateKeyObject\x2C\x0d\n} = createNativeKeyObjectClass((NativeKeyObject) => {\x0d\n  // Publicly visible KeyObject class.\x0d\n  class KeyObject extends NativeKeyObject {\x0d\n    constructor(type\x2C handle) {\x0d\n      if (type !== 'secret' && type !== 'public' && type !== 'private')\x0d\n        throw new ERR_INVALID_ARG_VALUE('type'\x2C type);\x0d\n      if (typeof handle !== 'object' || !(handle instanceof KeyObjectHandle))\x0d\n        throw new ERR_INVALID_ARG_TYPE('handle'\x2C 'object'\x2C handle);\x0d\n\x0d\n      super(handle);\x0d\n\x0d\n      this[kKeyType] = type;\x0d\n\x0d\n      ObjectDefineProperty(this\x2C kHandle\x2C {\x0d\n        __proto__: null\x2C\x0d\n        value: handle\x2C\x0d\n        enumerable: false\x2C\x0d\n        configurable: false\x2C\x0d\n        writable: false\x0d\n      });\x0d\n    }\x0d\n\x0d\n    get type() {\x0d\n      return this[kKeyType];\x0d\n    }\x0d\n\x0d\n    static from(key) {\x0d\n      if (!isCryptoKey(key))\x0d\n        throw new ERR_INVALID_ARG_TYPE('key'\x2C 'CryptoKey'\x2C key);\x0d\n      return key[kKeyObject];\x0d\n    }\x0d\n\x0d\n    equals(otherKeyObject) {\x0d\n      if (!isKeyObject(otherKeyObject)) {\x0d\n        throw new ERR_INVALID_ARG_TYPE(\x0d\n          'otherKeyObject'\x2C 'KeyObject'\x2C otherKeyObject);\x0d\n      }\x0d\n\x0d\n      return otherKeyObject.type === this.type &&\x0d\n        this[kHandle].equals(otherKeyObject[kHandle]);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  class SecretKeyObject extends KeyObject {\x0d\n    constructor(handle) {\x0d\n      super('secret'\x2C handle);\x0d\n    }\x0d\n\x0d\n    get symmetricKeySize() {\x0d\n      return this[kHandle].getSymmetricKeySize();\x0d\n    }\x0d\n\x0d\n    export(options) {\x0d\n      if (options !== undefined) {\x0d\n        validateObject(options\x2C 'options');\x0d\n        validateOneOf(\x0d\n          options.format\x2C 'options.format'\x2C [undefined\x2C 'buffer'\x2C 'jwk']);\x0d\n        if (options.format === 'jwk') {\x0d\n          return this[kHandle].exportJwk({}\x2C false);\x0d\n        }\x0d\n      }\x0d\n      return this[kHandle].export();\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const kAsymmetricKeyType = Symbol('kAsymmetricKeyType');\x0d\n  const kAsymmetricKeyDetails = Symbol('kAsymmetricKeyDetails');\x0d\n\x0d\n  function normalizeKeyDetails(details = {}) {\x0d\n    if (details.publicExponent !== undefined) {\x0d\n      return {\x0d\n        ...details\x2C\x0d\n        publicExponent:\x0d\n          bigIntArrayToUnsignedBigInt(new Uint8Array(details.publicExponent))\x0d\n      };\x0d\n    }\x0d\n    return details;\x0d\n  }\x0d\n\x0d\n  class AsymmetricKeyObject extends KeyObject {\x0d\n    // eslint-disable-next-line no-useless-constructor\x0d\n    constructor(type\x2C handle) {\x0d\n      super(type\x2C handle);\x0d\n    }\x0d\n\x0d\n    get asymmetricKeyType() {\x0d\n      return this[kAsymmetricKeyType] ||\x0d\n             (this[kAsymmetricKeyType] = this[kHandle].getAsymmetricKeyType());\x0d\n    }\x0d\n\x0d\n    get asymmetricKeyDetails() {\x0d\n      switch (this.asymmetricKeyType) {\x0d\n        case 'rsa':\x0d\n        case 'rsa-pss':\x0d\n        case 'dsa':\x0d\n        case 'ec':\x0d\n          return this[kAsymmetricKeyDetails] ||\x0d\n             (this[kAsymmetricKeyDetails] = normalizeKeyDetails(\x0d\n               this[kHandle].keyDetail({})\x0d\n             ));\x0d\n        default:\x0d\n          return {};\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  class PublicKeyObject extends AsymmetricKeyObject {\x0d\n    constructor(handle) {\x0d\n      super('public'\x2C handle);\x0d\n    }\x0d\n\x0d\n    export(options) {\x0d\n      if (options && options.format === 'jwk') {\x0d\n        return this[kHandle].exportJwk({}\x2C false);\x0d\n      }\x0d\n      const {\x0d\n        format\x2C\x0d\n        type\x0d\n      } = parsePublicKeyEncoding(options\x2C this.asymmetricKeyType);\x0d\n      return this[kHandle].export(format\x2C type);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  class PrivateKeyObject extends AsymmetricKeyObject {\x0d\n    constructor(handle) {\x0d\n      super('private'\x2C handle);\x0d\n    }\x0d\n\x0d\n    export(options) {\x0d\n      if (options && options.format === 'jwk') {\x0d\n        if (options.passphrase !== undefined) {\x0d\n          throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\x0d\n            'jwk'\x2C 'does not support encryption');\x0d\n        }\x0d\n        return this[kHandle].exportJwk({}\x2C false);\x0d\n      }\x0d\n      const {\x0d\n        format\x2C\x0d\n        type\x2C\x0d\n        cipher\x2C\x0d\n        passphrase\x0d\n      } = parsePrivateKeyEncoding(options\x2C this.asymmetricKeyType);\x0d\n      return this[kHandle].export(format\x2C type\x2C cipher\x2C passphrase);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return [KeyObject\x2C SecretKeyObject\x2C PublicKeyObject\x2C PrivateKeyObject];\x0d\n});\x0d\n\x0d\nfunction parseKeyFormat(formatStr\x2C defaultFormat\x2C optionName) {\x0d\n  if (formatStr === undefined && defaultFormat !== undefined)\x0d\n    return defaultFormat;\x0d\n  else if (formatStr === 'pem')\x0d\n    return kKeyFormatPEM;\x0d\n  else if (formatStr === 'der')\x0d\n    return kKeyFormatDER;\x0d\n  else if (formatStr === 'jwk')\x0d\n    return kKeyFormatJWK;\x0d\n  throw new ERR_INVALID_ARG_VALUE(optionName\x2C formatStr);\x0d\n}\x0d\n\x0d\nfunction parseKeyType(typeStr\x2C required\x2C keyType\x2C isPublic\x2C optionName) {\x0d\n  if (typeStr === undefined && !required) {\x0d\n    return undefined;\x0d\n  } else if (typeStr === 'pkcs1') {\x0d\n    if (keyType !== undefined && keyType !== 'rsa') {\x0d\n      throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\x0d\n        typeStr\x2C 'can only be used for RSA keys');\x0d\n    }\x0d\n    return kKeyEncodingPKCS1;\x0d\n  } else if (typeStr === 'spki' && isPublic !== false) {\x0d\n    return kKeyEncodingSPKI;\x0d\n  } else if (typeStr === 'pkcs8' && isPublic !== true) {\x0d\n    return kKeyEncodingPKCS8;\x0d\n  } else if (typeStr === 'sec1' && isPublic !== true) {\x0d\n    if (keyType !== undefined && keyType !== 'ec') {\x0d\n      throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\x0d\n        typeStr\x2C 'can only be used for EC keys');\x0d\n    }\x0d\n    return kKeyEncodingSEC1;\x0d\n  }\x0d\n\x0d\n  throw new ERR_INVALID_ARG_VALUE(optionName\x2C typeStr);\x0d\n}\x0d\n\x0d\nfunction option(name\x2C objName) {\x0d\n  return objName === undefined ?\x0d\n    `options.${name}` : `options.${objName}.${name}`;\x0d\n}\x0d\n\x0d\nfunction parseKeyFormatAndType(enc\x2C keyType\x2C isPublic\x2C objName) {\x0d\n  const { format: formatStr\x2C type: typeStr } = enc;\x0d\n\x0d\n  const isInput = keyType === undefined;\x0d\n  const format = parseKeyFormat(formatStr\x2C\x0d\n                                isInput ? kKeyFormatPEM : undefined\x2C\x0d\n                                option('format'\x2C objName));\x0d\n\x0d\n  const isRequired = (!isInput ||\x0d\n                      format === kKeyFormatDER) &&\x0d\n                      format !== kKeyFormatJWK;\x0d\n  const type = parseKeyType(typeStr\x2C\x0d\n                            isRequired\x2C\x0d\n                            keyType\x2C\x0d\n                            isPublic\x2C\x0d\n                            option('type'\x2C objName));\x0d\n  return { format\x2C type };\x0d\n}\x0d\n\x0d\nfunction isStringOrBuffer(val) {\x0d\n  return typeof val === 'string' ||\x0d\n         isArrayBufferView(val) ||\x0d\n         isAnyArrayBuffer(val);\x0d\n}\x0d\n\x0d\nfunction parseKeyEncoding(enc\x2C keyType\x2C isPublic\x2C objName) {\x0d\n  validateObject(enc\x2C 'options');\x0d\n\x0d\n  const isInput = keyType === undefined;\x0d\n\x0d\n  const {\x0d\n    format\x2C\x0d\n    type\x0d\n  } = parseKeyFormatAndType(enc\x2C keyType\x2C isPublic\x2C objName);\x0d\n\x0d\n  let cipher\x2C passphrase\x2C encoding;\x0d\n  if (isPublic !== true) {\x0d\n    ({ cipher\x2C passphrase\x2C encoding } = enc);\x0d\n\x0d\n    if (!isInput) {\x0d\n      if (cipher != null) {\x0d\n        if (typeof cipher !== 'string')\x0d\n          throw new ERR_INVALID_ARG_VALUE(option('cipher'\x2C objName)\x2C cipher);\x0d\n        if (format === kKeyFormatDER &&\x0d\n            (type === kKeyEncodingPKCS1 ||\x0d\n             type === kKeyEncodingSEC1)) {\x0d\n          throw new ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS(\x0d\n            encodingNames[type]\x2C 'does not support encryption');\x0d\n        }\x0d\n      } else if (passphrase !== undefined) {\x0d\n        throw new ERR_INVALID_ARG_VALUE(option('cipher'\x2C objName)\x2C cipher);\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if ((isInput && passphrase !== undefined &&\x0d\n         !isStringOrBuffer(passphrase)) ||\x0d\n        (!isInput && cipher != null && !isStringOrBuffer(passphrase))) {\x0d\n      throw new ERR_INVALID_ARG_VALUE(option('passphrase'\x2C objName)\x2C\x0d\n                                      passphrase);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (passphrase !== undefined)\x0d\n    passphrase = getArrayBufferOrView(passphrase\x2C 'key.passphrase'\x2C encoding);\x0d\n\x0d\n  return { format\x2C type\x2C cipher\x2C passphrase };\x0d\n}\x0d\n\x0d\n// Parses the public key encoding based on an object. keyType must be undefined\x0d\n// when this is used to parse an input encoding and must be a valid key type if\x0d\n// used to parse an output encoding.\x0d\nfunction parsePublicKeyEncoding(enc\x2C keyType\x2C objName) {\x0d\n  return parseKeyEncoding(enc\x2C keyType\x2C keyType ? true : undefined\x2C objName);\x0d\n}\x0d\n\x0d\n// Parses the private key encoding based on an object. keyType must be undefined\x0d\n// when this is used to parse an input encoding and must be a valid key type if\x0d\n// used to parse an output encoding.\x0d\nfunction parsePrivateKeyEncoding(enc\x2C keyType\x2C objName) {\x0d\n  return parseKeyEncoding(enc\x2C keyType\x2C false\x2C objName);\x0d\n}\x0d\n\x0d\nfunction getKeyObjectHandle(key\x2C ctx) {\x0d\n  if (ctx === kCreatePrivate) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'key'\x2C\x0d\n      ['string'\x2C 'ArrayBuffer'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      key\x0d\n    );\x0d\n  }\x0d\n\x0d\n  if (key.type !== 'private') {\x0d\n    if (ctx === kConsumePrivate || ctx === kCreatePublic)\x0d\n      throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type\x2C 'private');\x0d\n    if (key.type !== 'public') {\x0d\n      throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type\x2C\x0d\n                                                   'private or public');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return key[kHandle];\x0d\n}\x0d\n\x0d\nfunction getKeyTypes(allowKeyObject\x2C bufferOnly = false) {\x0d\n  const types = [\x0d\n    'ArrayBuffer'\x2C\x0d\n    'Buffer'\x2C\x0d\n    'TypedArray'\x2C\x0d\n    'DataView'\x2C\x0d\n    'string'\x2C // Only if bufferOnly == false\x0d\n    'KeyObject'\x2C // Only if allowKeyObject == true && bufferOnly == false\x0d\n    'CryptoKey'\x2C // Only if allowKeyObject == true && bufferOnly == false\x0d\n  ];\x0d\n  if (bufferOnly) {\x0d\n    return ArrayPrototypeSlice(types\x2C 0\x2C 4);\x0d\n  } else if (!allowKeyObject) {\x0d\n    return ArrayPrototypeSlice(types\x2C 0\x2C 5);\x0d\n  }\x0d\n  return types;\x0d\n}\x0d\n\x0d\nfunction getKeyObjectHandleFromJwk(key\x2C ctx) {\x0d\n  validateObject(key\x2C 'key');\x0d\n  validateOneOf(\x0d\n    key.kty\x2C 'key.kty'\x2C ['RSA'\x2C 'EC'\x2C 'OKP']);\x0d\n  const isPublic = ctx === kConsumePublic || ctx === kCreatePublic;\x0d\n\x0d\n  if (key.kty === 'OKP') {\x0d\n    validateString(key.crv\x2C 'key.crv');\x0d\n    validateOneOf(\x0d\n      key.crv\x2C 'key.crv'\x2C ['Ed25519'\x2C 'Ed448'\x2C 'X25519'\x2C 'X448']);\x0d\n    validateString(key.x\x2C 'key.x');\x0d\n\x0d\n    if (!isPublic)\x0d\n      validateString(key.d\x2C 'key.d');\x0d\n\x0d\n    let keyData;\x0d\n    if (isPublic)\x0d\n      keyData = Buffer.from(key.x\x2C 'base64');\x0d\n    else\x0d\n      keyData = Buffer.from(key.d\x2C 'base64');\x0d\n\x0d\n    switch (key.crv) {\x0d\n      case 'Ed25519':\x0d\n      case 'X25519':\x0d\n        if (keyData.byteLength !== 32) {\x0d\n          throw new ERR_CRYPTO_INVALID_JWK();\x0d\n        }\x0d\n        break;\x0d\n      case 'Ed448':\x0d\n        if (keyData.byteLength !== 57) {\x0d\n          throw new ERR_CRYPTO_INVALID_JWK();\x0d\n        }\x0d\n        break;\x0d\n      case 'X448':\x0d\n        if (keyData.byteLength !== 56) {\x0d\n          throw new ERR_CRYPTO_INVALID_JWK();\x0d\n        }\x0d\n        break;\x0d\n    }\x0d\n\x0d\n    const handle = new KeyObjectHandle();\x0d\n\x0d\n    const keyType = isPublic ? kKeyTypePublic : kKeyTypePrivate;\x0d\n    if (!handle.initEDRaw(key.crv\x2C keyData\x2C keyType)) {\x0d\n      throw new ERR_CRYPTO_INVALID_JWK();\x0d\n    }\x0d\n\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  if (key.kty === 'EC') {\x0d\n    validateString(key.crv\x2C 'key.crv');\x0d\n    validateOneOf(\x0d\n      key.crv\x2C 'key.crv'\x2C ['P-256'\x2C 'secp256k1'\x2C 'P-384'\x2C 'P-521']);\x0d\n    validateString(key.x\x2C 'key.x');\x0d\n    validateString(key.y\x2C 'key.y');\x0d\n\x0d\n    const jwk = {\x0d\n      kty: key.kty\x2C\x0d\n      crv: key.crv\x2C\x0d\n      x: key.x\x2C\x0d\n      y: key.y\x0d\n    };\x0d\n\x0d\n    if (!isPublic) {\x0d\n      validateString(key.d\x2C 'key.d');\x0d\n      jwk.d = key.d;\x0d\n    }\x0d\n\x0d\n    const handle = new KeyObjectHandle();\x0d\n    const type = handle.initJwk(jwk\x2C jwk.crv);\x0d\n    if (type === undefined)\x0d\n      throw new ERR_CRYPTO_INVALID_JWK();\x0d\n\x0d\n    return handle;\x0d\n  }\x0d\n\x0d\n  // RSA\x0d\n  validateString(key.n\x2C 'key.n');\x0d\n  validateString(key.e\x2C 'key.e');\x0d\n\x0d\n  const jwk = {\x0d\n    kty: key.kty\x2C\x0d\n    n: key.n\x2C\x0d\n    e: key.e\x0d\n  };\x0d\n\x0d\n  if (!isPublic) {\x0d\n    validateString(key.d\x2C 'key.d');\x0d\n    validateString(key.p\x2C 'key.p');\x0d\n    validateString(key.q\x2C 'key.q');\x0d\n    validateString(key.dp\x2C 'key.dp');\x0d\n    validateString(key.dq\x2C 'key.dq');\x0d\n    validateString(key.qi\x2C 'key.qi');\x0d\n    jwk.d = key.d;\x0d\n    jwk.p = key.p;\x0d\n    jwk.q = key.q;\x0d\n    jwk.dp = key.dp;\x0d\n    jwk.dq = key.dq;\x0d\n    jwk.qi = key.qi;\x0d\n  }\x0d\n\x0d\n  const handle = new KeyObjectHandle();\x0d\n  const type = handle.initJwk(jwk);\x0d\n  if (type === undefined)\x0d\n    throw new ERR_CRYPTO_INVALID_JWK();\x0d\n\x0d\n  return handle;\x0d\n}\x0d\n\x0d\nfunction prepareAsymmetricKey(key\x2C ctx) {\x0d\n  if (isKeyObject(key)) {\x0d\n    // Best case: A key object\x2C as simple as that.\x0d\n    return { data: getKeyObjectHandle(key\x2C ctx) };\x0d\n  } else if (isCryptoKey(key)) {\x0d\n    return { data: getKeyObjectHandle(key[kKeyObject]\x2C ctx) };\x0d\n  } else if (isStringOrBuffer(key)) {\x0d\n    // Expect PEM by default\x2C mostly for backward compatibility.\x0d\n    return { format: kKeyFormatPEM\x2C data: getArrayBufferOrView(key\x2C 'key') };\x0d\n  } else if (typeof key === 'object') {\x0d\n    const { key: data\x2C encoding\x2C format } = key;\x0d\n\x0d\n    // The 'key' property can be a KeyObject as well to allow specifying\x0d\n    // additional options such as padding along with the key.\x0d\n    if (isKeyObject(data))\x0d\n      return { data: getKeyObjectHandle(data\x2C ctx) };\x0d\n    else if (isCryptoKey(data))\x0d\n      return { data: getKeyObjectHandle(data[kKeyObject]\x2C ctx) };\x0d\n    else if (format === 'jwk') {\x0d\n      validateObject(data\x2C 'key.key');\x0d\n      return { data: getKeyObjectHandleFromJwk(data\x2C ctx)\x2C format: 'jwk' };\x0d\n    }\x0d\n\x0d\n    // Either PEM or DER using PKCS#1 or SPKI.\x0d\n    if (!isStringOrBuffer(data)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'key.key'\x2C\x0d\n        getKeyTypes(ctx !== kCreatePrivate)\x2C\x0d\n        data);\x0d\n    }\x0d\n\x0d\n    const isPublic =\x0d\n      (ctx === kConsumePrivate || ctx === kCreatePrivate) ? false : undefined;\x0d\n    return {\x0d\n      data: getArrayBufferOrView(data\x2C 'key'\x2C encoding)\x2C\x0d\n      ...parseKeyEncoding(key\x2C undefined\x2C isPublic)\x0d\n    };\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_TYPE(\x0d\n    'key'\x2C\x0d\n    getKeyTypes(ctx !== kCreatePrivate)\x2C\x0d\n    key);\x0d\n}\x0d\n\x0d\nfunction preparePrivateKey(key) {\x0d\n  return prepareAsymmetricKey(key\x2C kConsumePrivate);\x0d\n}\x0d\n\x0d\nfunction preparePublicOrPrivateKey(key) {\x0d\n  return prepareAsymmetricKey(key\x2C kConsumePublic);\x0d\n}\x0d\n\x0d\nfunction prepareSecretKey(key\x2C encoding\x2C bufferOnly = false) {\x0d\n  if (!bufferOnly) {\x0d\n    if (isKeyObject(key)) {\x0d\n      if (key.type !== 'secret')\x0d\n        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type\x2C 'secret');\x0d\n      return key[kHandle];\x0d\n    } else if (isCryptoKey(key)) {\x0d\n      if (key.type !== 'secret')\x0d\n        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(key.type\x2C 'secret');\x0d\n      return key[kKeyObject][kHandle];\x0d\n    }\x0d\n  }\x0d\n  if (typeof key !== 'string' &&\x0d\n      !isArrayBufferView(key) &&\x0d\n      !isAnyArrayBuffer(key)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'key'\x2C\x0d\n      getKeyTypes(!bufferOnly\x2C bufferOnly)\x2C\x0d\n      key);\x0d\n  }\x0d\n  return getArrayBufferOrView(key\x2C 'key'\x2C encoding);\x0d\n}\x0d\n\x0d\nfunction createSecretKey(key\x2C encoding) {\x0d\n  key = prepareSecretKey(key\x2C encoding\x2C true);\x0d\n  const handle = new KeyObjectHandle();\x0d\n  handle.init(kKeyTypeSecret\x2C key);\x0d\n  return new SecretKeyObject(handle);\x0d\n}\x0d\n\x0d\nfunction createPublicKey(key) {\x0d\n  const { format\x2C type\x2C data\x2C passphrase } =\x0d\n    prepareAsymmetricKey(key\x2C kCreatePublic);\x0d\n  let handle;\x0d\n  if (format === 'jwk') {\x0d\n    handle = data;\x0d\n  } else {\x0d\n    handle = new KeyObjectHandle();\x0d\n    handle.init(kKeyTypePublic\x2C data\x2C format\x2C type\x2C passphrase);\x0d\n  }\x0d\n  return new PublicKeyObject(handle);\x0d\n}\x0d\n\x0d\nfunction createPrivateKey(key) {\x0d\n  const { format\x2C type\x2C data\x2C passphrase } =\x0d\n    prepareAsymmetricKey(key\x2C kCreatePrivate);\x0d\n  let handle;\x0d\n  if (format === 'jwk') {\x0d\n    handle = data;\x0d\n  } else {\x0d\n    handle = new KeyObjectHandle();\x0d\n    handle.init(kKeyTypePrivate\x2C data\x2C format\x2C type\x2C passphrase);\x0d\n  }\x0d\n  return new PrivateKeyObject(handle);\x0d\n}\x0d\n\x0d\nfunction isKeyObject(obj) {\x0d\n  return obj != null && obj[kKeyType] !== undefined;\x0d\n}\x0d\n\x0d\n// Our implementation of CryptoKey is a simple wrapper around a KeyObject\x0d\n// that adapts it to the standard interface. This implementation also\x0d\n// extends the JSTransferable class\x2C allowing the CryptoKey to be cloned\x0d\n// to Workers.\x0d\n// TODO(@jasnell): Embedder environments like electron may have issues\x0d\n// here similar to other things like URL. A chromium provided CryptoKey\x0d\n// will not be recognized as a Node.js CryptoKey\x2C and vice versa. It\x0d\n// would be fantastic if we could find a way of making those interop.\x0d\nclass CryptoKey extends JSTransferable {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `CryptoKey ${inspect({\x0d\n      type: this.type\x2C\x0d\n      extractable: this.extractable\x2C\x0d\n      algorithm: this.algorithm\x2C\x0d\n      usages: this.usages\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  get type() {\x0d\n    return this[kKeyObject].type;\x0d\n  }\x0d\n\x0d\n  get extractable() {\x0d\n    return this[kExtractable];\x0d\n  }\x0d\n\x0d\n  get algorithm() {\x0d\n    return this[kAlgorithm];\x0d\n  }\x0d\n\x0d\n  get usages() {\x0d\n    return ArrayFrom(this[kKeyUsages]);\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const keyObject = this[kKeyObject];\x0d\n    const algorithm = this.algorithm;\x0d\n    const extractable = this.extractable;\x0d\n    const usages = this.usages;\x0d\n\x0d\n    return {\x0d\n      data: {\x0d\n        keyObject\x2C\x0d\n        algorithm\x2C\x0d\n        usages\x2C\x0d\n        extractable\x2C\x0d\n      }\x2C\x0d\n      deserializeInfo: 'internal/crypto/keys:InternalCryptoKey'\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ keyObject\x2C algorithm\x2C usages\x2C extractable }) {\x0d\n    this[kKeyObject] = keyObject;\x0d\n    this[kAlgorithm] = algorithm;\x0d\n    this[kKeyUsages] = usages;\x0d\n    this[kExtractable] = extractable;\x0d\n  }\x0d\n}\x0d\n\x0d\n// All internal code must use new InternalCryptoKey to create\x0d\n// CryptoKey instances. The CryptoKey class is exposed to end\x0d\n// user code but is not permitted to be constructed directly.\x0d\nclass InternalCryptoKey extends JSTransferable {\x0d\n  constructor(\x0d\n    keyObject\x2C\x0d\n    algorithm\x2C\x0d\n    keyUsages\x2C\x0d\n    extractable) {\x0d\n    super();\x0d\n    // Using symbol properties here currently instead of private\x0d\n    // properties because (for now) the performance penalty of\x0d\n    // private fields is still too high.\x0d\n    this[kKeyObject] = keyObject;\x0d\n    this[kAlgorithm] = algorithm;\x0d\n    this[kExtractable] = extractable;\x0d\n    this[kKeyUsages] = keyUsages;\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalCryptoKey.prototype.constructor = CryptoKey;\x0d\nObjectSetPrototypeOf(InternalCryptoKey.prototype\x2C CryptoKey.prototype);\x0d\n\x0d\nfunction isCryptoKey(obj) {\x0d\n  return obj != null && obj[kKeyObject] !== undefined;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  // Public API.\x0d\n  createSecretKey\x2C\x0d\n  createPublicKey\x2C\x0d\n  createPrivateKey\x2C\x0d\n  KeyObject\x2C\x0d\n  CryptoKey\x2C\x0d\n  InternalCryptoKey\x2C\x0d\n\x0d\n  // These are designed for internal use only and should not be exposed.\x0d\n  parsePublicKeyEncoding\x2C\x0d\n  parsePrivateKeyEncoding\x2C\x0d\n  parseKeyEncoding\x2C\x0d\n  preparePrivateKey\x2C\x0d\n  preparePublicOrPrivateKey\x2C\x0d\n  prepareSecretKey\x2C\x0d\n  SecretKeyObject\x2C\x0d\n  PublicKeyObject\x2C\x0d\n  PrivateKeyObject\x2C\x0d\n  isKeyObject\x2C\x0d\n  isCryptoKey\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2157606,166,0,21260,C0O0C4O21260,,
code-creation,Function,10,863738,0x1aff2158b86,1211, node:internal/crypto/keys:1:1,0x1aff2157580,~
code-source-info,0x1aff2158b
code-creation,LazyCompile,10,864420,0x1aff215be7e,252, node:internal/crypto/keys:96:32,0x1aff2157c78,~
code-source-info,0x1aff215be7e,166,2331,6430,C0O2331C17O2421C55O3560C88O4131C98O4131C102O4131C104O4194C114O4194C118O4194C120O4549C153O5285C181O5721C209O6356C218O6364C227O6375C236O6392C245O6409C251O6427,,
code-creation,Eval,10,865251,0x1aff215e24e,5, node:internal/crypto/keygen:1:1,0x1aff215de38,~
script-source,167,node:internal/crypto/keygen,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  SafeArrayIterator\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  DhKeyPairGenJob\x2C\x0d\n  DsaKeyPairGenJob\x2C\x0d\n  EcKeyPairGenJob\x2C\x0d\n  NidKeyPairGenJob\x2C\x0d\n  RsaKeyPairGenJob\x2C\x0d\n  SecretKeyGenJob\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n  kKeyVariantRSA_PSS\x2C\x0d\n  kKeyVariantRSA_SSA_PKCS1_v1_5\x2C\x0d\n  EVP_PKEY_ED25519\x2C\x0d\n  EVP_PKEY_ED448\x2C\x0d\n  EVP_PKEY_X25519\x2C\x0d\n  EVP_PKEY_X448\x2C\x0d\n  OPENSSL_EC_NAMED_CURVE\x2C\x0d\n  OPENSSL_EC_EXPLICIT_CURVE\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  PublicKeyObject\x2C\x0d\n  PrivateKeyObject\x2C\x0d\n  SecretKeyObject\x2C\x0d\n  parsePublicKeyEncoding\x2C\x0d\n  parsePrivateKeyEncoding\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  kAesKeyLengths\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  customPromisifyArgs\x2C\x0d\n  kEmptyObject\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isInt32\x2C\x0d\n  isUint32\x2C\x0d\n  validateCallback\x2C\x0d\n  validateString\x2C\x0d\n  validateInteger\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INCOMPATIBLE_OPTION_PAIR\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n    ERR_MISSING_OPTION\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst { isArrayBufferView } = require('internal/util/types');\x0d\n\x0d\nconst { getOptionValue } = require('internal/options');\x0d\nconst pendingDeprecation = getOptionValue('--pending-deprecation');\x0d\n\x0d\nfunction isJwk(obj) {\x0d\n  return obj != null && obj.kty !== undefined;\x0d\n}\x0d\n\x0d\nfunction wrapKey(key\x2C ctor) {\x0d\n  if (typeof key === 'string' ||\x0d\n      isArrayBufferView(key) ||\x0d\n      isJwk(key))\x0d\n    return key;\x0d\n  return new ctor(key);\x0d\n}\x0d\n\x0d\nfunction generateKeyPair(type\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = createJob(kCryptoJobAsync\x2C type\x2C options);\x0d\n\x0d\n  job.ondone = (error\x2C result) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    // If no encoding was chosen\x2C return key objects instead.\x0d\n    let { 0: pubkey\x2C 1: privkey } = result;\x0d\n    pubkey = wrapKey(pubkey\x2C PublicKeyObject);\x0d\n    privkey = wrapKey(privkey\x2C PrivateKeyObject);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C pubkey\x2C privkey);\x0d\n  };\x0d\n\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nObjectDefineProperty(generateKeyPair\x2C customPromisifyArgs\x2C {\x0d\n  __proto__: null\x2C\x0d\n  value: ['publicKey'\x2C 'privateKey']\x2C\x0d\n  enumerable: false\x0d\n});\x0d\n\x0d\nfunction generateKeyPairSync(type\x2C options) {\x0d\n  return handleError(createJob(kCryptoJobSync\x2C type\x2C options).run());\x0d\n}\x0d\n\x0d\nfunction handleError(ret) {\x0d\n  if (ret == null)\x0d\n    return; // async\x0d\n\x0d\n  const { 0: err\x2C 1: keys } = ret;\x0d\n  if (err !== undefined)\x0d\n    throw err;\x0d\n\x0d\n  const { 0: publicKey\x2C 1: privateKey } = keys;\x0d\n\x0d\n  // If no encoding was chosen\x2C return key objects instead.\x0d\n  return {\x0d\n    publicKey: wrapKey(publicKey\x2C PublicKeyObject)\x2C\x0d\n    privateKey: wrapKey(privateKey\x2C PrivateKeyObject)\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction parseKeyEncoding(keyType\x2C options = kEmptyObject) {\x0d\n  const { publicKeyEncoding\x2C privateKeyEncoding } = options;\x0d\n\x0d\n  let publicFormat\x2C publicType;\x0d\n  if (publicKeyEncoding == null) {\x0d\n    publicFormat = publicType = undefined;\x0d\n  } else if (typeof publicKeyEncoding === 'object') {\x0d\n    ({\x0d\n      format: publicFormat\x2C\x0d\n      type: publicType\x0d\n    } = parsePublicKeyEncoding(publicKeyEncoding\x2C keyType\x2C\x0d\n                               'publicKeyEncoding'));\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options.publicKeyEncoding'\x2C\x0d\n                                    publicKeyEncoding);\x0d\n  }\x0d\n\x0d\n  let privateFormat\x2C privateType\x2C cipher\x2C passphrase;\x0d\n  if (privateKeyEncoding == null) {\x0d\n    privateFormat = privateType = undefined;\x0d\n  } else if (typeof privateKeyEncoding === 'object') {\x0d\n    ({\x0d\n      format: privateFormat\x2C\x0d\n      type: privateType\x2C\x0d\n      cipher\x2C\x0d\n      passphrase\x0d\n    } = parsePrivateKeyEncoding(privateKeyEncoding\x2C keyType\x2C\x0d\n                                'privateKeyEncoding'));\x0d\n  } else {\x0d\n    throw new ERR_INVALID_ARG_VALUE('options.privateKeyEncoding'\x2C\x0d\n                                    privateKeyEncoding);\x0d\n  }\x0d\n\x0d\n  return [\x0d\n    publicFormat\x2C\x0d\n    publicType\x2C\x0d\n    privateFormat\x2C\x0d\n    privateType\x2C\x0d\n    cipher\x2C\x0d\n    passphrase\x2C\x0d\n  ];\x0d\n}\x0d\n\x0d\nfunction createJob(mode\x2C type\x2C options) {\x0d\n  validateString(type\x2C 'type');\x0d\n\x0d\n  const encoding = new SafeArrayIterator(parseKeyEncoding(type\x2C options));\x0d\n\x0d\n  if (options !== undefined)\x0d\n    validateObject(options\x2C 'options');\x0d\n\x0d\n  switch (type) {\x0d\n    case 'rsa':\x0d\n    case 'rsa-pss':\x0d\n    {\x0d\n      validateObject(options\x2C 'options');\x0d\n      const { modulusLength } = options;\x0d\n      if (!isUint32(modulusLength))\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.modulusLength'\x2C modulusLength);\x0d\n\x0d\n      let { publicExponent } = options;\x0d\n      if (publicExponent == null) {\x0d\n        publicExponent = 0x10001;\x0d\n      } else if (!isUint32(publicExponent)) {\x0d\n        throw new ERR_INVALID_ARG_VALUE(\x0d\n          'options.publicExponent'\x2C\x0d\n          publicExponent);\x0d\n      }\x0d\n\x0d\n      if (type === 'rsa') {\x0d\n        return new RsaKeyPairGenJob(\x0d\n          mode\x2C\x0d\n          kKeyVariantRSA_SSA_PKCS1_v1_5\x2C  // Used also for RSA-OAEP\x0d\n          modulusLength\x2C\x0d\n          publicExponent\x2C\x0d\n          ...encoding);\x0d\n      }\x0d\n\x0d\n      const {\x0d\n        hash\x2C mgf1Hash\x2C hashAlgorithm\x2C mgf1HashAlgorithm\x2C saltLength\x0d\n      } = options;\x0d\n      if (saltLength !== undefined && (!isInt32(saltLength) || saltLength < 0))\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.saltLength'\x2C saltLength);\x0d\n      if (hashAlgorithm !== undefined && typeof hashAlgorithm !== 'string')\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.hashAlgorithm'\x2C hashAlgorithm);\x0d\n      if (mgf1HashAlgorithm !== undefined &&\x0d\n          typeof mgf1HashAlgorithm !== 'string')\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.mgf1HashAlgorithm'\x2C\x0d\n                                        mgf1HashAlgorithm);\x0d\n      if (hash !== undefined) {\x0d\n        pendingDeprecation && process.emitWarning(\x0d\n          '"options.hash" is deprecated\x2C ' +\x0d\n          'use "options.hashAlgorithm" instead.'\x2C\x0d\n          'DeprecationWarning'\x2C\x0d\n          'DEP0154');\x0d\n        if (typeof hash !== 'string' ||\x0d\n          (hashAlgorithm && hash !== hashAlgorithm)) {\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.hash'\x2C hash);\x0d\n        }\x0d\n      }\x0d\n      if (mgf1Hash !== undefined) {\x0d\n        pendingDeprecation && process.emitWarning(\x0d\n          '"options.mgf1Hash" is deprecated\x2C ' +\x0d\n          'use "options.mgf1HashAlgorithm" instead.'\x2C\x0d\n          'DeprecationWarning'\x2C\x0d\n          'DEP0154');\x0d\n        if (typeof mgf1Hash !== 'string' ||\x0d\n          (mgf1HashAlgorithm && mgf1Hash !== mgf1HashAlgorithm)) {\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.mgf1Hash'\x2C mgf1Hash);\x0d\n        }\x0d\n      }\x0d\n\x0d\n      return new RsaKeyPairGenJob(\x0d\n        mode\x2C\x0d\n        kKeyVariantRSA_PSS\x2C\x0d\n        modulusLength\x2C\x0d\n        publicExponent\x2C\x0d\n        hashAlgorithm || hash\x2C\x0d\n        mgf1HashAlgorithm || mgf1Hash\x2C\x0d\n        saltLength\x2C\x0d\n        ...encoding);\x0d\n    }\x0d\n    case 'dsa':\x0d\n    {\x0d\n      validateObject(options\x2C 'options');\x0d\n      const { modulusLength } = options;\x0d\n      if (!isUint32(modulusLength))\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.modulusLength'\x2C modulusLength);\x0d\n\x0d\n      let { divisorLength } = options;\x0d\n      if (divisorLength == null) {\x0d\n        divisorLength = -1;\x0d\n      } else if (!isInt32(divisorLength) || divisorLength < 0) {\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.divisorLength'\x2C divisorLength);\x0d\n      }\x0d\n\x0d\n      return new DsaKeyPairGenJob(\x0d\n        mode\x2C\x0d\n        modulusLength\x2C\x0d\n        divisorLength\x2C\x0d\n        ...encoding);\x0d\n    }\x0d\n    case 'ec':\x0d\n    {\x0d\n      validateObject(options\x2C 'options');\x0d\n      const { namedCurve } = options;\x0d\n      if (typeof namedCurve !== 'string')\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.namedCurve'\x2C namedCurve);\x0d\n      let { paramEncoding } = options;\x0d\n      if (paramEncoding == null || paramEncoding === 'named')\x0d\n        paramEncoding = OPENSSL_EC_NAMED_CURVE;\x0d\n      else if (paramEncoding === 'explicit')\x0d\n        paramEncoding = OPENSSL_EC_EXPLICIT_CURVE;\x0d\n      else\x0d\n        throw new ERR_INVALID_ARG_VALUE('options.paramEncoding'\x2C paramEncoding);\x0d\n\x0d\n      return new EcKeyPairGenJob(\x0d\n        mode\x2C\x0d\n        namedCurve\x2C\x0d\n        paramEncoding\x2C\x0d\n        ...encoding);\x0d\n    }\x0d\n    case 'ed25519':\x0d\n    case 'ed448':\x0d\n    case 'x25519':\x0d\n    case 'x448':\x0d\n    {\x0d\n      let id;\x0d\n      switch (type) {\x0d\n        case 'ed25519':\x0d\n          id = EVP_PKEY_ED25519;\x0d\n          break;\x0d\n        case 'ed448':\x0d\n          id = EVP_PKEY_ED448;\x0d\n          break;\x0d\n        case 'x25519':\x0d\n          id = EVP_PKEY_X25519;\x0d\n          break;\x0d\n        case 'x448':\x0d\n          id = EVP_PKEY_X448;\x0d\n          break;\x0d\n      }\x0d\n      return new NidKeyPairGenJob(mode\x2C id\x2C ...encoding);\x0d\n    }\x0d\n    case 'dh':\x0d\n    {\x0d\n      validateObject(options\x2C 'options');\x0d\n      const { group\x2C primeLength\x2C prime\x2C generator } = options;\x0d\n      if (group != null) {\x0d\n        if (prime != null)\x0d\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group'\x2C 'prime');\x0d\n        if (primeLength != null)\x0d\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group'\x2C 'primeLength');\x0d\n        if (generator != null)\x0d\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('group'\x2C 'generator');\x0d\n        if (typeof group !== 'string')\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.group'\x2C group);\x0d\n\x0d\n        return new DhKeyPairGenJob(mode\x2C group\x2C ...encoding);\x0d\n      }\x0d\n\x0d\n      if (prime != null) {\x0d\n        if (primeLength != null)\x0d\n          throw new ERR_INCOMPATIBLE_OPTION_PAIR('prime'\x2C 'primeLength');\x0d\n        if (!isArrayBufferView(prime))\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.prime'\x2C prime);\x0d\n      } else if (primeLength != null) {\x0d\n        if (!isInt32(primeLength) || primeLength < 0)\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.primeLength'\x2C primeLength);\x0d\n      } else {\x0d\n        throw new ERR_MISSING_OPTION(\x0d\n          'At least one of the group\x2C prime\x2C or primeLength options');\x0d\n      }\x0d\n\x0d\n      if (generator != null) {\x0d\n        if (!isInt32(generator) || generator < 0)\x0d\n          throw new ERR_INVALID_ARG_VALUE('options.generator'\x2C generator);\x0d\n      }\x0d\n      return new DhKeyPairGenJob(\x0d\n        mode\x2C\x0d\n        prime != null ? prime : primeLength\x2C\x0d\n        generator == null ? 2 : generator\x2C\x0d\n        ...encoding);\x0d\n    }\x0d\n    default:\x0d\n      // Fall through\x0d\n  }\x0d\n  throw new ERR_INVALID_ARG_VALUE('type'\x2C type\x2C 'must be a supported key type');\x0d\n}\x0d\n\x0d\n// Symmetric Key Generation\x0d\n\x0d\nfunction generateKeyJob(mode\x2C keyType\x2C options) {\x0d\n  validateString(keyType\x2C 'type');\x0d\n  validateObject(options\x2C 'options');\x0d\n  const { length } = options;\x0d\n  switch (keyType) {\x0d\n    case 'hmac':\x0d\n      validateInteger(length\x2C 'options.length'\x2C 8\x2C 2 ** 31 - 1);\x0d\n      break;\x0d\n    case 'aes':\x0d\n      validateOneOf(length\x2C 'options.length'\x2C kAesKeyLengths);\x0d\n      break;\x0d\n    default:\x0d\n      throw new ERR_INVALID_ARG_VALUE(\x0d\n        'type'\x2C\x0d\n        keyType\x2C\x0d\n        'must be a supported key type');\x0d\n  }\x0d\n\x0d\n  return new SecretKeyGenJob(mode\x2C length);\x0d\n}\x0d\n\x0d\nfunction handleGenerateKeyError(ret) {\x0d\n  if (ret === undefined)\x0d\n    return; // async\x0d\n\x0d\n  const { 0: err\x2C 1: key } = ret;\x0d\n  if (err !== undefined)\x0d\n    throw err;\x0d\n\x0d\n  return wrapKey(key\x2C SecretKeyObject);\x0d\n}\x0d\n\x0d\nfunction generateKey(type\x2C options\x2C callback) {\x0d\n  if (typeof options === 'function') {\x0d\n    callback = options;\x0d\n    options = undefined;\x0d\n  }\x0d\n\x0d\n  validateCallback(callback);\x0d\n\x0d\n  const job = generateKeyJob(kCryptoJobAsync\x2C type\x2C options);\x0d\n\x0d\n  job.ondone = (error\x2C key) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C wrapKey(key\x2C SecretKeyObject));\x0d\n  };\x0d\n\x0d\n  handleGenerateKeyError(job.run());\x0d\n}\x0d\n\x0d\nfunction generateKeySync(type\x2C options) {\x0d\n  return handleGenerateKeyError(\x0d\n    generateKeyJob(kCryptoJobSync\x2C type\x2C options).run());\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  generateKeyPair\x2C\x0d\n  generateKeyPairSync\x2C\x0d\n  generateKey\x2C\x0d\n  generateKeySync\x2C\x0d\n};\x0d\n
code-source-info,0x1aff215e24e,167,0,12012,C0O0C4O12012,,
code-creation,Function,10,866184,0x1aff215e91e,544, node:internal/crypto/keygen:1:1,0x1aff215e1c8,~
code-source-info,0x1aff215e91e,167,0,12012,C0O0C182O28C188O54C193O79C199O486C202O486C207O130C213O150C219O171C225O191C231O212C237O233C243O253C249O273C255O292C261O315C267O349C273O370C279O389C285O409C291O427C297O454C303O645C306O645C311O527C317O547C323O568C329O588C335O615C341O713C344O713C349O692C355O803C358O803C363O760C368O784C374O967C377O967C382O843C388O855C394O868C400O889C406O908C412O928C418O947C424O1120C427O1120C432O1120C437O1027C443O1062C449O1090C455O1181C458O1181C463O1159C469O1243C472O1243C477O1224C482O1300C485O1300C489O1300C491O2269C502O2231C507O11908C514O11930C520O11950C526O11974C532O11990C538O11923C543O12011,,
code-creation,Eval,10,867163,0x1aff21602de,5, node:internal/crypto/diffiehellman:1:1,0x1aff215fec8,~
script-source,168,node:internal/crypto/diffiehellman,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayBufferPrototypeSlice\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  MathCeil\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Promise\x2C\x0d\n  SafeSet\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  DiffieHellman: _DiffieHellman\x2C\x0d\n  DiffieHellmanGroup: _DiffieHellmanGroup\x2C\x0d\n  ECDH: _ECDH\x2C\x0d\n  ECDHBitsJob\x2C\x0d\n  ECDHConvertKey: _ECDHConvertKey\x2C\x0d\n  statelessDH\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_ECDH_INVALID_FORMAT\x2C\x0d\n    ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY\x2C\x0d\n    ERR_CRYPTO_INCOMPATIBLE_KEY\x2C\x0d\n    ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n  isAnyArrayBuffer\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  KeyObject\x2C\x0d\n  isCryptoKey\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  toBuf\x2C\x0d\n  kHandle\x2C\x0d\n  kKeyObject\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  crypto: {\x0d\n    POINT_CONVERSION_COMPRESSED\x2C\x0d\n    POINT_CONVERSION_HYBRID\x2C\x0d\n    POINT_CONVERSION_UNCOMPRESSED\x2C\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\nconst DH_GENERATOR = 2;\x0d\n\x0d\nfunction DiffieHellman(sizeOrKey\x2C keyEncoding\x2C generator\x2C genEncoding) {\x0d\n  if (!(this instanceof DiffieHellman))\x0d\n    return new DiffieHellman(sizeOrKey\x2C keyEncoding\x2C generator\x2C genEncoding);\x0d\n\x0d\n  if (typeof sizeOrKey !== 'number' &&\x0d\n      typeof sizeOrKey !== 'string' &&\x0d\n      !isArrayBufferView(sizeOrKey) &&\x0d\n      !isAnyArrayBuffer(sizeOrKey)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'sizeOrKey'\x2C\x0d\n      ['number'\x2C 'string'\x2C 'ArrayBuffer'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      sizeOrKey\x0d\n    );\x0d\n  }\x0d\n\x0d\n  // Sizes < 0 don't make sense but they _are_ accepted (and subsequently\x0d\n  // rejected with ERR_OSSL_BN_BITS_TOO_SMALL) by OpenSSL. The glue code\x0d\n  // in node_crypto.cc accepts values that are IsInt32() for that reason\x0d\n  // and that's why we do that here too.\x0d\n  if (typeof sizeOrKey === 'number')\x0d\n    validateInt32(sizeOrKey\x2C 'sizeOrKey');\x0d\n\x0d\n  if (keyEncoding && !Buffer.isEncoding(keyEncoding) &&\x0d\n      keyEncoding !== 'buffer') {\x0d\n    genEncoding = generator;\x0d\n    generator = keyEncoding;\x0d\n    keyEncoding = false;\x0d\n  }\x0d\n\x0d\n  const encoding = getDefaultEncoding();\x0d\n  keyEncoding = keyEncoding || encoding;\x0d\n  genEncoding = genEncoding || encoding;\x0d\n\x0d\n  if (typeof sizeOrKey !== 'number')\x0d\n    sizeOrKey = toBuf(sizeOrKey\x2C keyEncoding);\x0d\n\x0d\n  if (!generator) {\x0d\n    generator = DH_GENERATOR;\x0d\n  } else if (typeof generator === 'number') {\x0d\n    validateInt32(generator\x2C 'generator');\x0d\n  } else if (typeof generator === 'string') {\x0d\n    generator = toBuf(generator\x2C genEncoding);\x0d\n  } else if (!isArrayBufferView(generator) && !isAnyArrayBuffer(generator)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'generator'\x2C\x0d\n      ['number'\x2C 'string'\x2C 'ArrayBuffer'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      generator\x0d\n    );\x0d\n  }\x0d\n\x0d\n\x0d\n  this[kHandle] = new _DiffieHellman(sizeOrKey\x2C generator);\x0d\n  ObjectDefineProperty(this\x2C 'verifyError'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: this[kHandle].verifyError\x2C\x0d\n    writable: false\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nfunction DiffieHellmanGroup(name) {\x0d\n  if (!(this instanceof DiffieHellmanGroup))\x0d\n    return new DiffieHellmanGroup(name);\x0d\n  this[kHandle] = new _DiffieHellmanGroup(name);\x0d\n  ObjectDefineProperty(this\x2C 'verifyError'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: this[kHandle].verifyError\x2C\x0d\n    writable: false\x0d\n  });\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.generateKeys =\x0d\n    DiffieHellman.prototype.generateKeys =\x0d\n    dhGenerateKeys;\x0d\n\x0d\nfunction dhGenerateKeys(encoding) {\x0d\n  const keys = this[kHandle].generateKeys();\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(keys\x2C encoding);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.computeSecret =\x0d\n    DiffieHellman.prototype.computeSecret =\x0d\n    dhComputeSecret;\x0d\n\x0d\nfunction dhComputeSecret(key\x2C inEnc\x2C outEnc) {\x0d\n  const encoding = getDefaultEncoding();\x0d\n  inEnc = inEnc || encoding;\x0d\n  outEnc = outEnc || encoding;\x0d\n  key = getArrayBufferOrView(key\x2C 'key'\x2C inEnc);\x0d\n  const ret = this[kHandle].computeSecret(key);\x0d\n  if (typeof ret === 'string')\x0d\n    throw new ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY();\x0d\n  return encode(ret\x2C outEnc);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.getPrime =\x0d\n    DiffieHellman.prototype.getPrime =\x0d\n    dhGetPrime;\x0d\n\x0d\nfunction dhGetPrime(encoding) {\x0d\n  const prime = this[kHandle].getPrime();\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(prime\x2C encoding);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.getGenerator =\x0d\n    DiffieHellman.prototype.getGenerator =\x0d\n    dhGetGenerator;\x0d\n\x0d\nfunction dhGetGenerator(encoding) {\x0d\n  const generator = this[kHandle].getGenerator();\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(generator\x2C encoding);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.getPublicKey =\x0d\n    DiffieHellman.prototype.getPublicKey =\x0d\n    dhGetPublicKey;\x0d\n\x0d\nfunction dhGetPublicKey(encoding) {\x0d\n  const key = this[kHandle].getPublicKey();\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(key\x2C encoding);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellmanGroup.prototype.getPrivateKey =\x0d\n    DiffieHellman.prototype.getPrivateKey =\x0d\n    dhGetPrivateKey;\x0d\n\x0d\nfunction dhGetPrivateKey(encoding) {\x0d\n  const key = this[kHandle].getPrivateKey();\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(key\x2C encoding);\x0d\n}\x0d\n\x0d\n\x0d\nDiffieHellman.prototype.setPublicKey = function setPublicKey(key\x2C encoding) {\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  key = getArrayBufferOrView(key\x2C 'key'\x2C encoding);\x0d\n  this[kHandle].setPublicKey(key);\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nDiffieHellman.prototype.setPrivateKey = function setPrivateKey(key\x2C encoding) {\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  key = getArrayBufferOrView(key\x2C 'key'\x2C encoding);\x0d\n  this[kHandle].setPrivateKey(key);\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nfunction ECDH(curve) {\x0d\n  if (!(this instanceof ECDH))\x0d\n    return new ECDH(curve);\x0d\n\x0d\n  validateString(curve\x2C 'curve');\x0d\n  this[kHandle] = new _ECDH(curve);\x0d\n}\x0d\n\x0d\nECDH.prototype.computeSecret = DiffieHellman.prototype.computeSecret;\x0d\nECDH.prototype.setPrivateKey = DiffieHellman.prototype.setPrivateKey;\x0d\nECDH.prototype.setPublicKey = DiffieHellman.prototype.setPublicKey;\x0d\nECDH.prototype.getPrivateKey = DiffieHellman.prototype.getPrivateKey;\x0d\n\x0d\nECDH.prototype.generateKeys = function generateKeys(encoding\x2C format) {\x0d\n  this[kHandle].generateKeys();\x0d\n\x0d\n  return this.getPublicKey(encoding\x2C format);\x0d\n};\x0d\n\x0d\nECDH.prototype.getPublicKey = function getPublicKey(encoding\x2C format) {\x0d\n  const f = getFormat(format);\x0d\n  const key = this[kHandle].getPublicKey(f);\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  return encode(key\x2C encoding);\x0d\n};\x0d\n\x0d\nECDH.convertKey = function convertKey(key\x2C curve\x2C inEnc\x2C outEnc\x2C format) {\x0d\n  validateString(curve\x2C 'curve');\x0d\n  const encoding = inEnc || getDefaultEncoding();\x0d\n  key = getArrayBufferOrView(key\x2C 'key'\x2C encoding);\x0d\n  outEnc = outEnc || encoding;\x0d\n  const f = getFormat(format);\x0d\n  const convertedKey = _ECDHConvertKey(key\x2C curve\x2C f);\x0d\n  return encode(convertedKey\x2C outEnc);\x0d\n};\x0d\n\x0d\nfunction encode(buffer\x2C encoding) {\x0d\n  if (encoding && encoding !== 'buffer')\x0d\n    buffer = buffer.toString(encoding);\x0d\n  return buffer;\x0d\n}\x0d\n\x0d\nfunction getFormat(format) {\x0d\n  if (format) {\x0d\n    if (format === 'compressed')\x0d\n      return POINT_CONVERSION_COMPRESSED;\x0d\n    if (format === 'hybrid')\x0d\n      return POINT_CONVERSION_HYBRID;\x0d\n    if (format !== 'uncompressed')\x0d\n      throw new ERR_CRYPTO_ECDH_INVALID_FORMAT(format);\x0d\n  }\x0d\n  return POINT_CONVERSION_UNCOMPRESSED;\x0d\n}\x0d\n\x0d\nconst dhEnabledKeyTypes = new SafeSet(['dh'\x2C 'ec'\x2C 'x448'\x2C 'x25519']);\x0d\n\x0d\nfunction diffieHellman(options) {\x0d\n  validateObject(options\x2C 'options');\x0d\n\x0d\n  const { privateKey\x2C publicKey } = options;\x0d\n  if (!(privateKey instanceof KeyObject))\x0d\n    throw new ERR_INVALID_ARG_VALUE('options.privateKey'\x2C privateKey);\x0d\n\x0d\n  if (!(publicKey instanceof KeyObject))\x0d\n    throw new ERR_INVALID_ARG_VALUE('options.publicKey'\x2C publicKey);\x0d\n\x0d\n  if (privateKey.type !== 'private')\x0d\n    throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(privateKey.type\x2C 'private');\x0d\n\x0d\n  if (publicKey.type !== 'public' && publicKey.type !== 'private') {\x0d\n    throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(publicKey.type\x2C\x0d\n                                                 'private or public');\x0d\n  }\x0d\n\x0d\n  const privateType = privateKey.asymmetricKeyType;\x0d\n  const publicType = publicKey.asymmetricKeyType;\x0d\n  if (privateType !== publicType || !dhEnabledKeyTypes.has(privateType)) {\x0d\n    throw new ERR_CRYPTO_INCOMPATIBLE_KEY('key types for Diffie-Hellman'\x2C\x0d\n                                          `${privateType} and ${publicType}`);\x0d\n  }\x0d\n\x0d\n  return statelessDH(privateKey[kHandle]\x2C publicKey[kHandle]);\x0d\n}\x0d\n\x0d\n// The deriveBitsECDH function is part of the Web Crypto API and serves both\x0d\n// deriveKeys and deriveBits functions.\x0d\nfunction deriveBitsECDH(name\x2C publicKey\x2C privateKey\x2C callback) {\x0d\n  validateString(name\x2C 'name');\x0d\n  validateObject(publicKey\x2C 'publicKey');\x0d\n  validateObject(privateKey\x2C 'privateKey');\x0d\n  validateCallback(callback);\x0d\n  const job = new ECDHBitsJob(kCryptoJobAsync\x2C name\x2C publicKey\x2C privateKey);\x0d\n  job.ondone = (error\x2C bits) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C bits);\x0d\n  };\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nasync function asyncDeriveBitsECDH(algorithm\x2C baseKey\x2C length) {\x0d\n  const { 'public': key } = algorithm;\x0d\n\x0d\n  // Null means that we're not asking for a specific number of bits\x2C just\x0d\n  // give us everything that is generated.\x0d\n  if (length !== null)\x0d\n    validateUint32(length\x2C 'length');\x0d\n  if (!isCryptoKey(key))\x0d\n    throw new ERR_INVALID_ARG_TYPE('algorithm.public'\x2C 'CryptoKey'\x2C key);\x0d\n\x0d\n  if (key.type !== 'public') {\x0d\n    throw lazyDOMException(\x0d\n      'algorithm.public must be a public key'\x2C 'InvalidAccessError');\x0d\n  }\x0d\n  if (baseKey.type !== 'private') {\x0d\n    throw lazyDOMException(\x0d\n      'baseKey must be a private key'\x2C 'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    key.algorithm.name !== 'ECDH' &&\x0d\n    key.algorithm.name !== 'X25519' &&\x0d\n    key.algorithm.name !== 'X448'\x0d\n  ) {\x0d\n    throw lazyDOMException('Keys must be ECDH\x2C X25519\x2C or X448 keys'\x2C 'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  if (key.algorithm.name !== baseKey.algorithm.name) {\x0d\n    throw lazyDOMException(\x0d\n      'The public and private keys must be of the same type'\x2C\x0d\n      'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    key.algorithm.name === 'ECDH' &&\x0d\n    key.algorithm.namedCurve !== baseKey.algorithm.namedCurve\x0d\n  ) {\x0d\n    throw lazyDOMException('Named curve mismatch'\x2C 'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  const bits = await new Promise((resolve\x2C reject) => {\x0d\n    deriveBitsECDH(\x0d\n      key.algorithm.name === 'ECDH' ? baseKey.algorithm.namedCurve : baseKey.algorithm.name\x2C\x0d\n      key[kKeyObject][kHandle]\x2C\x0d\n      baseKey[kKeyObject][kHandle]\x2C (err\x2C bits) => {\x0d\n        if (err) return reject(err);\x0d\n        resolve(bits);\x0d\n      });\x0d\n  });\x0d\n\x0d\n  // If a length is not specified\x2C return the full derived secret\x0d\n  if (length === null)\x0d\n    return bits;\x0d\n\x0d\n  // If the length is not a multiple of 8 the nearest ceiled\x0d\n  // multiple of 8 is sliced.\x0d\n  length = MathCeil(length / 8);\x0d\n  const { byteLength } = bits;\x0d\n\x0d\n  // If the length is larger than the derived secret\x2C throw.\x0d\n  // Otherwise\x2C we either return the secret or a truncated\x0d\n  // slice.\x0d\n  if (byteLength < length)\x0d\n    throw lazyDOMException('derived bit length is too small'\x2C 'OperationError');\x0d\n\x0d\n  return length === byteLength ?\x0d\n    bits :\x0d\n    ArrayBufferPrototypeSlice(bits\x2C 0\x2C length);\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  DiffieHellman\x2C\x0d\n  DiffieHellmanGroup\x2C\x0d\n  ECDH\x2C\x0d\n  diffieHellman\x2C\x0d\n  deriveBitsECDH\x2C\x0d\n  asyncDeriveBitsECDH\x2C\x0d\n};\x0d\n
code-source-info,0x1aff21602de,168,0,11967,C0O0C4O11967,,
tick,0x7ff6d63a7cb2,868477,1,0x7ff6d5c66a70,3,0x7ff6d65ae370,0x246eeec499b,0x246eeec32e5,0x24a76c75f65,0x246eeec4a63,0x65ec1e529a,0x65ec1e483b,0x65ec1e4642,0x246eeeeab23,0x7ff6d6643c13
code-creation,Function,10,868534,0x1aff2160ca6,913, node:internal/crypto/diffiehellman:1:1,0x1aff2160258,~
code-source-info,0x1aff2160ca
code-creation,Eval,10,869732,0x1aff2162b2e,5, node:internal/crypto/cipher:1:1,0x1aff21627d8,~
script-source,169,node:internal/crypto/cipher,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  CipherBase\x2C\x0d\n  privateDecrypt: _privateDecrypt\x2C\x0d\n  privateEncrypt: _privateEncrypt\x2C\x0d\n  publicDecrypt: _publicDecrypt\x2C\x0d\n  publicEncrypt: _publicEncrypt\x2C\x0d\n  getCipherInfo: _getCipherInfo\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  crypto: {\x0d\n    RSA_PKCS1_OAEP_PADDING\x2C\x0d\n    RSA_PKCS1_PADDING\x2C\x0d\n  }\x0d\n} = internalBinding('constants');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_INVALID_STATE\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateEncoding\x2C\x0d\n  validateInt32\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  preparePrivateKey\x2C\x0d\n  preparePublicOrPrivateKey\x2C\x0d\n  prepareSecretKey\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  getDefaultEncoding\x2C\x0d\n  getArrayBufferOrView\x2C\x0d\n  getStringOption\x2C\x0d\n  kHandle\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst LazyTransform = require('internal/streams/lazy_transform');\x0d\n\x0d\nconst { normalizeEncoding } = require('internal/util');\x0d\n\x0d\nconst { StringDecoder } = require('string_decoder');\x0d\n\x0d\nfunction rsaFunctionFor(method\x2C defaultPadding\x2C keyType) {\x0d\n  return (options\x2C buffer) => {\x0d\n    const { format\x2C type\x2C data\x2C passphrase } =\x0d\n      keyType === 'private' ?\x0d\n        preparePrivateKey(options) :\x0d\n        preparePublicOrPrivateKey(options);\x0d\n    const padding = options.padding || defaultPadding;\x0d\n    const { oaepHash\x2C encoding } = options;\x0d\n    let { oaepLabel } = options;\x0d\n    if (oaepHash !== undefined)\x0d\n      validateString(oaepHash\x2C 'key.oaepHash');\x0d\n    if (oaepLabel !== undefined)\x0d\n      oaepLabel = getArrayBufferOrView(oaepLabel\x2C 'key.oaepLabel'\x2C encoding);\x0d\n    buffer = getArrayBufferOrView(buffer\x2C 'buffer'\x2C encoding);\x0d\n    return method(data\x2C format\x2C type\x2C passphrase\x2C buffer\x2C padding\x2C oaepHash\x2C\x0d\n                  oaepLabel);\x0d\n  };\x0d\n}\x0d\n\x0d\nconst publicEncrypt = rsaFunctionFor(_publicEncrypt\x2C RSA_PKCS1_OAEP_PADDING\x2C\x0d\n                                     'public');\x0d\nconst publicDecrypt = rsaFunctionFor(_publicDecrypt\x2C RSA_PKCS1_PADDING\x2C\x0d\n                                     'public');\x0d\nconst privateEncrypt = rsaFunctionFor(_privateEncrypt\x2C RSA_PKCS1_PADDING\x2C\x0d\n                                      'private');\x0d\nconst privateDecrypt = rsaFunctionFor(_privateDecrypt\x2C RSA_PKCS1_OAEP_PADDING\x2C\x0d\n                                      'private');\x0d\n\x0d\nfunction getDecoder(decoder\x2C encoding) {\x0d\n  encoding = normalizeEncoding(encoding);\x0d\n  decoder = decoder || new StringDecoder(encoding);\x0d\n  assert(decoder.encoding === encoding\x2C 'Cannot change encoding');\x0d\n  return decoder;\x0d\n}\x0d\n\x0d\nfunction getUIntOption(options\x2C key) {\x0d\n  let value;\x0d\n  if (options && (value = options[key]) != null) {\x0d\n    if (value >>> 0 !== value)\x0d\n      throw new ERR_INVALID_ARG_VALUE(`options.${key}`\x2C value);\x0d\n    return value;\x0d\n  }\x0d\n  return -1;\x0d\n}\x0d\n\x0d\nfunction createCipherBase(cipher\x2C credential\x2C options\x2C decipher\x2C iv) {\x0d\n  const authTagLength = getUIntOption(options\x2C 'authTagLength');\x0d\n  this[kHandle] = new CipherBase(decipher);\x0d\n  if (iv === undefined) {\x0d\n    this[kHandle].init(cipher\x2C credential\x2C authTagLength);\x0d\n  } else {\x0d\n    this[kHandle].initiv(cipher\x2C credential\x2C iv\x2C authTagLength);\x0d\n  }\x0d\n  this._decoder = null;\x0d\n\x0d\n  ReflectApply(LazyTransform\x2C this\x2C [options]);\x0d\n}\x0d\n\x0d\nfunction createCipher(cipher\x2C password\x2C options\x2C decipher) {\x0d\n  validateString(cipher\x2C 'cipher');\x0d\n  password = getArrayBufferOrView(password\x2C 'password');\x0d\n\x0d\n  ReflectApply(createCipherBase\x2C this\x2C [cipher\x2C password\x2C options\x2C decipher]);\x0d\n}\x0d\n\x0d\nfunction createCipherWithIV(cipher\x2C key\x2C options\x2C decipher\x2C iv) {\x0d\n  validateString(cipher\x2C 'cipher');\x0d\n  const encoding = getStringOption(options\x2C 'encoding');\x0d\n  key = prepareSecretKey(key\x2C encoding);\x0d\n  iv = iv === null ? null : getArrayBufferOrView(iv\x2C 'iv');\x0d\n  ReflectApply(createCipherBase\x2C this\x2C [cipher\x2C key\x2C options\x2C decipher\x2C iv]);\x0d\n}\x0d\n\x0d\n// The Cipher class is part of the legacy Node.js crypto API. It exposes\x0d\n// a stream-based encryption/decryption model. For backwards compatibility\x0d\n// the Cipher class is defined using the legacy function syntax rather than\x0d\n// ES6 classes.\x0d\n\x0d\nfunction Cipher(cipher\x2C password\x2C options) {\x0d\n  if (!(this instanceof Cipher))\x0d\n    return new Cipher(cipher\x2C password\x2C options);\x0d\n\x0d\n  ReflectApply(createCipher\x2C this\x2C [cipher\x2C password\x2C options\x2C true]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Cipher.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Cipher\x2C LazyTransform);\x0d\n\x0d\nCipher.prototype._transform = function _transform(chunk\x2C encoding\x2C callback) {\x0d\n  this.push(this[kHandle].update(chunk\x2C encoding));\x0d\n  callback();\x0d\n};\x0d\n\x0d\nCipher.prototype._flush = function _flush(callback) {\x0d\n  try {\x0d\n    this.push(this[kHandle].final());\x0d\n  } catch (e) {\x0d\n    callback(e);\x0d\n    return;\x0d\n  }\x0d\n  callback();\x0d\n};\x0d\n\x0d\nCipher.prototype.update = function update(data\x2C inputEncoding\x2C outputEncoding) {\x0d\n  const encoding = getDefaultEncoding();\x0d\n  inputEncoding = inputEncoding || encoding;\x0d\n  outputEncoding = outputEncoding || encoding;\x0d\n\x0d\n  if (typeof data === 'string') {\x0d\n    validateEncoding(data\x2C inputEncoding);\x0d\n  } else if (!isArrayBufferView(data)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'data'\x2C ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C data);\x0d\n  }\x0d\n\x0d\n  const ret = this[kHandle].update(data\x2C inputEncoding);\x0d\n\x0d\n  if (outputEncoding && outputEncoding !== 'buffer') {\x0d\n    this._decoder = getDecoder(this._decoder\x2C outputEncoding);\x0d\n    return this._decoder.write(ret);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n};\x0d\n\x0d\n\x0d\nCipher.prototype.final = function final(outputEncoding) {\x0d\n  outputEncoding = outputEncoding || getDefaultEncoding();\x0d\n  const ret = this[kHandle].final();\x0d\n\x0d\n  if (outputEncoding && outputEncoding !== 'buffer') {\x0d\n    this._decoder = getDecoder(this._decoder\x2C outputEncoding);\x0d\n    return this._decoder.end(ret);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n};\x0d\n\x0d\n\x0d\nCipher.prototype.setAutoPadding = function setAutoPadding(ap) {\x0d\n  if (!this[kHandle].setAutoPadding(!!ap))\x0d\n    throw new ERR_CRYPTO_INVALID_STATE('setAutoPadding');\x0d\n  return this;\x0d\n};\x0d\n\x0d\nCipher.prototype.getAuthTag = function getAuthTag() {\x0d\n  const ret = this[kHandle].getAuthTag();\x0d\n  if (ret === undefined)\x0d\n    throw new ERR_CRYPTO_INVALID_STATE('getAuthTag');\x0d\n  return ret;\x0d\n};\x0d\n\x0d\n\x0d\nfunction setAuthTag(tagbuf\x2C encoding) {\x0d\n  tagbuf = getArrayBufferOrView(tagbuf\x2C 'buffer'\x2C encoding);\x0d\n  if (!this[kHandle].setAuthTag(tagbuf))\x0d\n    throw new ERR_CRYPTO_INVALID_STATE('setAuthTag');\x0d\n  return this;\x0d\n}\x0d\n\x0d\nCipher.prototype.setAAD = function setAAD(aadbuf\x2C options) {\x0d\n  const encoding = getStringOption(options\x2C 'encoding');\x0d\n  const plaintextLength = getUIntOption(options\x2C 'plaintextLength');\x0d\n  aadbuf = getArrayBufferOrView(aadbuf\x2C 'aadbuf'\x2C encoding);\x0d\n  if (!this[kHandle].setAAD(aadbuf\x2C plaintextLength))\x0d\n    throw new ERR_CRYPTO_INVALID_STATE('setAAD');\x0d\n  return this;\x0d\n};\x0d\n\x0d\n// The Cipheriv class is part of the legacy Node.js crypto API. It exposes\x0d\n// a stream-based encryption/decryption model. For backwards compatibility\x0d\n// the Cipheriv class is defined using the legacy function syntax rather than\x0d\n// ES6 classes.\x0d\n\x0d\nfunction Cipheriv(cipher\x2C key\x2C iv\x2C options) {\x0d\n  if (!(this instanceof Cipheriv))\x0d\n    return new Cipheriv(cipher\x2C key\x2C iv\x2C options);\x0d\n\x0d\n  ReflectApply(createCipherWithIV\x2C this\x2C [cipher\x2C key\x2C options\x2C true\x2C iv]);\x0d\n}\x0d\n\x0d\nfunction addCipherPrototypeFunctions(constructor) {\x0d\n  constructor.prototype._transform = Cipher.prototype._transform;\x0d\n  constructor.prototype._flush = Cipher.prototype._flush;\x0d\n  constructor.prototype.update = Cipher.prototype.update;\x0d\n  constructor.prototype.final = Cipher.prototype.final;\x0d\n  constructor.prototype.setAutoPadding = Cipher.prototype.setAutoPadding;\x0d\n  if (constructor === Cipheriv) {\x0d\n    constructor.prototype.getAuthTag = Cipher.prototype.getAuthTag;\x0d\n  } else {\x0d\n    constructor.prototype.setAuthTag = setAuthTag;\x0d\n  }\x0d\n  constructor.prototype.setAAD = Cipher.prototype.setAAD;\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Cipheriv.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Cipheriv\x2C LazyTransform);\x0d\naddCipherPrototypeFunctions(Cipheriv);\x0d\n\x0d\n// The Decipher class is part of the legacy Node.js crypto API. It exposes\x0d\n// a stream-based encryption/decryption model. For backwards compatibility\x0d\n// the Decipher class is defined using the legacy function syntax rather than\x0d\n// ES6 classes.\x0d\n\x0d\nfunction Decipher(cipher\x2C password\x2C options) {\x0d\n  if (!(this instanceof Decipher))\x0d\n    return new Decipher(cipher\x2C password\x2C options);\x0d\n\x0d\n  ReflectApply(createCipher\x2C this\x2C [cipher\x2C password\x2C options\x2C false]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Decipher.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Decipher\x2C LazyTransform);\x0d\naddCipherPrototypeFunctions(Decipher);\x0d\n\x0d\n// The Decipheriv class is part of the legacy Node.js crypto API. It exposes\x0d\n// a stream-based encryption/decryption model. For backwards compatibility\x0d\n// the Decipheriv class is defined using the legacy function syntax rather than\x0d\n// ES6 classes.\x0d\n\x0d\nfunction Decipheriv(cipher\x2C key\x2C iv\x2C options) {\x0d\n  if (!(this instanceof Decipheriv))\x0d\n    return new Decipheriv(cipher\x2C key\x2C iv\x2C options);\x0d\n\x0d\n  ReflectApply(createCipherWithIV\x2C this\x2C [cipher\x2C key\x2C options\x2C false\x2C iv]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Decipheriv.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Decipheriv\x2C LazyTransform);\x0d\naddCipherPrototypeFunctions(Decipheriv);\x0d\n\x0d\nfunction getCipherInfo(nameOrNid\x2C options) {\x0d\n  if (typeof nameOrNid !== 'string' && typeof nameOrNid !== 'number') {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'nameOrNid'\x2C\x0d\n      ['string'\x2C 'number']\x2C\x0d\n      nameOrNid);\x0d\n  }\x0d\n  if (typeof nameOrNid === 'number')\x0d\n    validateInt32(nameOrNid\x2C 'nameOrNid');\x0d\n  let keyLength\x2C ivLength;\x0d\n  if (options !== undefined) {\x0d\n    validateObject(options\x2C 'options');\x0d\n    ({ keyLength\x2C ivLength } = options);\x0d\n    if (keyLength !== undefined)\x0d\n      validateInt32(keyLength\x2C 'options.keyLength');\x0d\n    if (ivLength !== undefined)\x0d\n      validateInt32(ivLength\x2C 'options.ivLength');\x0d\n  }\x0d\n\x0d\n  const ret = _getCipherInfo({}\x2C nameOrNid\x2C keyLength\x2C ivLength);\x0d\n  if (ret !== undefined) {\x0d\n    if (ret.name) ret.name = StringPrototypeToLowerCase(ret.name);\x0d\n    if (ret.type) ret.type = StringPrototypeToLowerCase(ret.type);\x0d\n  }\x0d\n  return ret;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Cipher\x2C\x0d\n  Cipheriv\x2C\x0d\n  Decipher\x2C\x0d\n  Decipheriv\x2C\x0d\n  privateDecrypt\x2C\x0d\n  privateEncrypt\x2C\x0d\n  publicDecrypt\x2C\x0d\n  publicEncrypt\x2C\x0d\n  getCipherInfo\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2162b2e,169,0,10574,C0O0C4O10574,,
code-creation,Function,10,870810,0x1aff21634f6,843, node:internal/crypto/cipher:1:1,0x1aff2162aa8,~
code-source-info,0x1aff21634f
code-creation,Eval,10,871982,0x1aff21649d6,5, node:internal/streams/lazy_transform:1:1,0x1aff2164860,~
script-source,170,node:internal/streams/lazy_transform,// LazyTransform is a special type of Transform stream that is lazily loaded.\x0d\n// This is used for performance with bi-API-ship: when two APIs are available\x0d\n// for the stream\x2C one conventional and one non-conventional.\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectDefineProperties\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst stream = require('stream');\x0d\n\x0d\nconst {\x0d\n  getDefaultEncoding\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nmodule.exports = LazyTransform;\x0d\n\x0d\nfunction LazyTransform(options) {\x0d\n  this._options = options;\x0d\n}\x0d\nObjectSetPrototypeOf(LazyTransform.prototype\x2C stream.Transform.prototype);\x0d\nObjectSetPrototypeOf(LazyTransform\x2C stream.Transform);\x0d\n\x0d\nfunction makeGetter(name) {\x0d\n  return function() {\x0d\n    stream.Transform.call(this\x2C this._options);\x0d\n    this._writableState.decodeStrings = false;\x0d\n\x0d\n    if (!this._options || !this._options.defaultEncoding) {\x0d\n      this._writableState.defaultEncoding = getDefaultEncoding();\x0d\n    }\x0d\n\x0d\n    return this[name];\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction makeSetter(name) {\x0d\n  return function(val) {\x0d\n    ObjectDefineProperty(this\x2C name\x2C {\x0d\n      __proto__: null\x2C\x0d\n      value: val\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x0d\n    });\x0d\n  };\x0d\n}\x0d\n\x0d\nObjectDefineProperties(LazyTransform.prototype\x2C {\x0d\n  _readableState: {\x0d\n    __proto__: null\x2C\x0d\n    get: makeGetter('_readableState')\x2C\x0d\n    set: makeSetter('_readableState')\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  }\x2C\x0d\n  _writableState: {\x0d\n    __proto__: null\x2C\x0d\n    get: makeGetter('_writableState')\x2C\x0d\n    set: makeSetter('_writableState')\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x0d\n  }\x0d\n});\x0d\n
code-source-info,0x1aff21649d6,170,0,1649,C0O0C4O1649,,
code-creation,Function,10,872173,0x1aff2164d16,193, node:internal/streams/lazy_transform:1:1,0x1aff2164950,~
code-source-info,0x1aff2164d16,170,0,1649,C0O0C29O249C34O276C40O301C45O359C48O359C52O359C54O416C57O416C62O392C68O452C70O467C74O588C82O606C87O616C92O553C97O629C100O672C105O629C110O1279C120O1311C128O1345C139O1385C153O1487C161O1521C172O1561C186O1242C192O1648,,
code-creation,LazyCompile,10,872388,0x1aff2165226,14,makeGetter node:internal/streams/lazy_transform:26:20,0x1aff2164a58,~
code-source-info,0x1aff2165226,170,706,1006,C0O706C9O718C13O1003,,
code-creation,LazyCompile,10,872463,0x1aff21655c6,14,makeSetter node:internal/streams/lazy_transform:39:20,0x1aff2164ad0,~
code-source-info,0x1aff21655c6,170,1029,1238,C0O1029C9O1041C13O1235,,
code-creation,LazyCompile,10,872635,0x1aff21657ce,22,rsaFunctionFor node:internal/crypto/cipher:65:24,0x1aff2162b60,~
code-source-info,0x1aff21657ce,169,1314,2056,C0O1314C17O1353C21O2053,,
code-creation,LazyCompile,10,872764,0x1aff2166566,169,addCipherPrototypeFunctions node:internal/crypto/cipher:246:37,0x1aff2162e30,~
code-source-info,0x1aff2166566,169,7518,8085,C0O7549C8O7579C13O7589C17O7570C21O7616C29O7642C34O7652C38O7633C42O7675C50O7701C55O7711C59O7692C63O7734C71O7759C76O7769C80O7750C84O7791C92O7825C97O7835C101O7816C105O7854C107O7870C112O7903C120O7933C125O7943C129O7924C135O7984C142O8005C146O8039C154O8065C159O8075C163O8056C168O8084,,
code-creation,Eval,10,873260,0x1aff2166d36,5, node:internal/crypto/sig:1:1,0x1aff2166a00,~
script-source,171,node:internal/crypto/sig,'use strict';\x0d\n\x0d\nconst {\x0d\n  FunctionPrototypeCall\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_SIGN_KEY_REQUIRED\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateCallback\x2C\x0d\n  validateEncoding\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  Sign: _Sign\x2C\x0d\n  SignJob\x2C\x0d\n  Verify: _Verify\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n  kCryptoJobSync\x2C\x0d\n  kSigEncDER\x2C\x0d\n  kSigEncP1363\x2C\x0d\n  kSignJobModeSign\x2C\x0d\n  kSignJobModeVerify\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  kHandle\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  preparePrivateKey\x2C\x0d\n  preparePublicOrPrivateKey\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst { Writable } = require('stream');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nfunction Sign(algorithm\x2C options) {\x0d\n  if (!(this instanceof Sign))\x0d\n    return new Sign(algorithm\x2C options);\x0d\n  validateString(algorithm\x2C 'algorithm');\x0d\n  this[kHandle] = new _Sign();\x0d\n  this[kHandle].init(algorithm);\x0d\n\x0d\n  ReflectApply(Writable\x2C this\x2C [options]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Sign.prototype\x2C Writable.prototype);\x0d\nObjectSetPrototypeOf(Sign\x2C Writable);\x0d\n\x0d\nSign.prototype._write = function _write(chunk\x2C encoding\x2C callback) {\x0d\n  this.update(chunk\x2C encoding);\x0d\n  callback();\x0d\n};\x0d\n\x0d\nSign.prototype.update = function update(data\x2C encoding) {\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n\x0d\n  if (typeof data === 'string') {\x0d\n    validateEncoding(data\x2C encoding);\x0d\n  } else if (!isArrayBufferView(data)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'data'\x2C ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C data);\x0d\n  }\x0d\n\x0d\n  this[kHandle].update(data\x2C encoding);\x0d\n  return this;\x0d\n};\x0d\n\x0d\nfunction getPadding(options) {\x0d\n  return getIntOption('padding'\x2C options);\x0d\n}\x0d\n\x0d\nfunction getSaltLength(options) {\x0d\n  return getIntOption('saltLength'\x2C options);\x0d\n}\x0d\n\x0d\nfunction getDSASignatureEncoding(options) {\x0d\n  if (typeof options === 'object') {\x0d\n    const { dsaEncoding = 'der' } = options;\x0d\n    if (dsaEncoding === 'der')\x0d\n      return kSigEncDER;\x0d\n    else if (dsaEncoding === 'ieee-p1363')\x0d\n      return kSigEncP1363;\x0d\n    throw new ERR_INVALID_ARG_VALUE('options.dsaEncoding'\x2C dsaEncoding);\x0d\n  }\x0d\n\x0d\n  return kSigEncDER;\x0d\n}\x0d\n\x0d\nfunction getIntOption(name\x2C options) {\x0d\n  const value = options[name];\x0d\n  if (value !== undefined) {\x0d\n    if (value === value >> 0) {\x0d\n      return value;\x0d\n    }\x0d\n    throw new ERR_INVALID_ARG_VALUE(`options.${name}`\x2C value);\x0d\n  }\x0d\n  return undefined;\x0d\n}\x0d\n\x0d\nSign.prototype.sign = function sign(options\x2C encoding) {\x0d\n  if (!options)\x0d\n    throw new ERR_CRYPTO_SIGN_KEY_REQUIRED();\x0d\n\x0d\n  const { data\x2C format\x2C type\x2C passphrase } = preparePrivateKey(options\x2C true);\x0d\n\x0d\n  // Options specific to RSA\x0d\n  const rsaPadding = getPadding(options);\x0d\n  const pssSaltLength = getSaltLength(options);\x0d\n\x0d\n  // Options specific to (EC)DSA\x0d\n  const dsaSigEnc = getDSASignatureEncoding(options);\x0d\n\x0d\n  const ret = this[kHandle].sign(data\x2C format\x2C type\x2C passphrase\x2C rsaPadding\x2C\x0d\n                                 pssSaltLength\x2C dsaSigEnc);\x0d\n\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n  if (encoding && encoding !== 'buffer')\x0d\n    return ret.toString(encoding);\x0d\n\x0d\n  return ret;\x0d\n};\x0d\n\x0d\nfunction signOneShot(algorithm\x2C data\x2C key\x2C callback) {\x0d\n  if (algorithm != null)\x0d\n    validateString(algorithm\x2C 'algorithm');\x0d\n\x0d\n  if (callback !== undefined)\x0d\n    validateCallback(callback);\x0d\n\x0d\n  data = getArrayBufferOrView(data\x2C 'data');\x0d\n\x0d\n  if (!key)\x0d\n    throw new ERR_CRYPTO_SIGN_KEY_REQUIRED();\x0d\n\x0d\n  // Options specific to RSA\x0d\n  const rsaPadding = getPadding(key);\x0d\n  const pssSaltLength = getSaltLength(key);\x0d\n\x0d\n  // Options specific to (EC)DSA\x0d\n  const dsaSigEnc = getDSASignatureEncoding(key);\x0d\n\x0d\n  const {\x0d\n    data: keyData\x2C\x0d\n    format: keyFormat\x2C\x0d\n    type: keyType\x2C\x0d\n    passphrase: keyPassphrase\x0d\n  } = preparePrivateKey(key);\x0d\n\x0d\n  const job = new SignJob(\x0d\n    callback ? kCryptoJobAsync : kCryptoJobSync\x2C\x0d\n    kSignJobModeSign\x2C\x0d\n    keyData\x2C\x0d\n    keyFormat\x2C\x0d\n    keyType\x2C\x0d\n    keyPassphrase\x2C\x0d\n    data\x2C\x0d\n    algorithm\x2C\x0d\n    pssSaltLength\x2C\x0d\n    rsaPadding\x2C\x0d\n    dsaSigEnc);\x0d\n\x0d\n  if (!callback) {\x0d\n    const { 0: err\x2C 1: signature } = job.run();\x0d\n    if (err !== undefined)\x0d\n      throw err;\x0d\n\x0d\n    return Buffer.from(signature);\x0d\n  }\x0d\n\x0d\n  job.ondone = (error\x2C signature) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C Buffer.from(signature));\x0d\n  };\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nfunction Verify(algorithm\x2C options) {\x0d\n  if (!(this instanceof Verify))\x0d\n    return new Verify(algorithm\x2C options);\x0d\n  validateString(algorithm\x2C 'algorithm');\x0d\n  this[kHandle] = new _Verify();\x0d\n  this[kHandle].init(algorithm);\x0d\n\x0d\n  ReflectApply(Writable\x2C this\x2C [options]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Verify.prototype\x2C Writable.prototype);\x0d\nObjectSetPrototypeOf(Verify\x2C Writable);\x0d\n\x0d\nVerify.prototype._write = Sign.prototype._write;\x0d\nVerify.prototype.update = Sign.prototype.update;\x0d\n\x0d\nVerify.prototype.verify = function verify(options\x2C signature\x2C sigEncoding) {\x0d\n  const {\x0d\n    data\x2C\x0d\n    format\x2C\x0d\n    type\x2C\x0d\n    passphrase\x0d\n  } = preparePublicOrPrivateKey(options\x2C true);\x0d\n\x0d\n  sigEncoding = sigEncoding || getDefaultEncoding();\x0d\n\x0d\n  // Options specific to RSA\x0d\n  const rsaPadding = getPadding(options);\x0d\n  const pssSaltLength = getSaltLength(options);\x0d\n\x0d\n  // Options specific to (EC)DSA\x0d\n  const dsaSigEnc = getDSASignatureEncoding(options);\x0d\n\x0d\n  signature = getArrayBufferOrView(signature\x2C 'signature'\x2C sigEncoding);\x0d\n\x0d\n  return this[kHandle].verify(data\x2C format\x2C type\x2C passphrase\x2C signature\x2C\x0d\n                              rsaPadding\x2C pssSaltLength\x2C dsaSigEnc);\x0d\n};\x0d\n\x0d\nfunction verifyOneShot(algorithm\x2C data\x2C key\x2C signature\x2C callback) {\x0d\n  if (algorithm != null)\x0d\n    validateString(algorithm\x2C 'algorithm');\x0d\n\x0d\n  if (callback !== undefined)\x0d\n    validateCallback(callback);\x0d\n\x0d\n  data = getArrayBufferOrView(data\x2C 'data');\x0d\n\x0d\n  if (!isArrayBufferView(data)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'data'\x2C\x0d\n      ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      data\x0d\n    );\x0d\n  }\x0d\n\x0d\n  // Options specific to RSA\x0d\n  const rsaPadding = getPadding(key);\x0d\n  const pssSaltLength = getSaltLength(key);\x0d\n\x0d\n  // Options specific to (EC)DSA\x0d\n  const dsaSigEnc = getDSASignatureEncoding(key);\x0d\n\x0d\n  if (!isArrayBufferView(signature)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'signature'\x2C\x0d\n      ['Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n      signature\x0d\n    );\x0d\n  }\x0d\n\x0d\n  const {\x0d\n    data: keyData\x2C\x0d\n    format: keyFormat\x2C\x0d\n    type: keyType\x2C\x0d\n    passphrase: keyPassphrase\x0d\n  } = preparePublicOrPrivateKey(key);\x0d\n\x0d\n  const job = new SignJob(\x0d\n    callback ? kCryptoJobAsync : kCryptoJobSync\x2C\x0d\n    kSignJobModeVerify\x2C\x0d\n    keyData\x2C\x0d\n    keyFormat\x2C\x0d\n    keyType\x2C\x0d\n    keyPassphrase\x2C\x0d\n    data\x2C\x0d\n    algorithm\x2C\x0d\n    pssSaltLength\x2C\x0d\n    rsaPadding\x2C\x0d\n    dsaSigEnc\x2C\x0d\n    signature);\x0d\n\x0d\n  if (!callback) {\x0d\n    const { 0: err\x2C 1: result } = job.run();\x0d\n    if (err !== undefined)\x0d\n      throw err;\x0d\n\x0d\n    return result;\x0d\n  }\x0d\n\x0d\n  job.ondone = (error\x2C result) => {\x0d\n    if (error) return FunctionPrototypeCall(callback\x2C job\x2C error);\x0d\n    FunctionPrototypeCall(callback\x2C job\x2C null\x2C result);\x0d\n  };\x0d\n  job.run();\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Sign\x2C\x0d\n  signOneShot\x2C\x0d\n  Verify\x2C\x0d\n  verifyOneShot\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2166d36,171,0,7390,C0O0C4O7390,,
code-creation,Function,10,873895,0x1aff216738e,563, node:internal/crypto/sig:1:1,0x1aff2166cb0,~
code-source-info,0x1aff216738e,171,0,7390,C0O0C126O28C132O54C137O79C143O234C146O234C151O234C156O139C162O174C168O201C174O339C177O339C182O276C188O297C194O318C200O550C203O550C208O391C214O401C220O421C226O433C232O453C238O472C244O487C250O504C256O525C262O653C265O653C270O591C276O616C282O639C288O754C291O754C296O700C302O722C308O811C311O811C316O798C322O852C325O852C330O841C336O909C339O909C344O885C350O1215C353O1241C361O1261C366O1215C371O1274C377O1274C382O1315C385O1320C394O1337C398O1439C401O1444C410O1461C414O2634C417O2639C426O2654C430O4885C433O4913C441O4933C446O4885C451O4946C457O4946C462O4989C465O4996C473O5020C478O5030C482O5013C486O5039C489O5046C497O5070C502O5080C506O5063C510O5091C513O5098C522O5115C526O7312C533O7334C539O7343C545O7359C551O7370C557O7327C562O7389,,
code-creation,Eval,10,874639,0x1aff2168c3e,5, node:internal/crypto/hash:1:1,0x1aff2168938,~
script-source,172,node:internal/crypto/hash,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  Hash: _Hash\x2C\x0d\n  HashJob\x2C\x0d\n  Hmac: _Hmac\x2C\x0d\n  kCryptoJobAsync\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  getDefaultEncoding\x2C\x0d\n  getStringOption\x2C\x0d\n  jobPromise\x2C\x0d\n  normalizeAlgorithm\x2C\x0d\n  normalizeHashName\x2C\x0d\n  validateMaxBufferLength\x2C\x0d\n  kHandle\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  prepareSecretKey\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  Buffer\x2C\x0d\n} = require('buffer');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_CRYPTO_HASH_FINALIZED\x2C\x0d\n    ERR_CRYPTO_HASH_UPDATE_FAILED\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  validateEncoding\x2C\x0d\n  validateString\x2C\x0d\n  validateUint32\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst LazyTransform = require('internal/streams/lazy_transform');\x0d\n\x0d\nconst kState = Symbol('kState');\x0d\nconst kFinalized = Symbol('kFinalized');\x0d\n\x0d\nfunction Hash(algorithm\x2C options) {\x0d\n  if (!(this instanceof Hash))\x0d\n    return new Hash(algorithm\x2C options);\x0d\n  if (!(algorithm instanceof _Hash))\x0d\n    validateString(algorithm\x2C 'algorithm');\x0d\n  const xofLen = typeof options === 'object' && options !== null ?\x0d\n    options.outputLength : undefined;\x0d\n  if (xofLen !== undefined)\x0d\n    validateUint32(xofLen\x2C 'options.outputLength');\x0d\n  this[kHandle] = new _Hash(algorithm\x2C xofLen);\x0d\n  this[kState] = {\x0d\n    [kFinalized]: false\x0d\n  };\x0d\n  ReflectApply(LazyTransform\x2C this\x2C [options]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Hash.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Hash\x2C LazyTransform);\x0d\n\x0d\nHash.prototype.copy = function copy(options) {\x0d\n  const state = this[kState];\x0d\n  if (state[kFinalized])\x0d\n    throw new ERR_CRYPTO_HASH_FINALIZED();\x0d\n\x0d\n  return new Hash(this[kHandle]\x2C options);\x0d\n};\x0d\n\x0d\nHash.prototype._transform = function _transform(chunk\x2C encoding\x2C callback) {\x0d\n  this[kHandle].update(chunk\x2C encoding);\x0d\n  callback();\x0d\n};\x0d\n\x0d\nHash.prototype._flush = function _flush(callback) {\x0d\n  this.push(this[kHandle].digest());\x0d\n  callback();\x0d\n};\x0d\n\x0d\nHash.prototype.update = function update(data\x2C encoding) {\x0d\n  encoding = encoding || getDefaultEncoding();\x0d\n\x0d\n  const state = this[kState];\x0d\n  if (state[kFinalized])\x0d\n    throw new ERR_CRYPTO_HASH_FINALIZED();\x0d\n\x0d\n  if (typeof data === 'string') {\x0d\n    validateEncoding(data\x2C encoding);\x0d\n  } else if (!isArrayBufferView(data)) {\x0d\n    throw new ERR_INVALID_ARG_TYPE(\x0d\n      'data'\x2C ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C data);\x0d\n  }\x0d\n\x0d\n  if (!this[kHandle].update(data\x2C encoding))\x0d\n    throw new ERR_CRYPTO_HASH_UPDATE_FAILED();\x0d\n  return this;\x0d\n};\x0d\n\x0d\n\x0d\nHash.prototype.digest = function digest(outputEncoding) {\x0d\n  const state = this[kState];\x0d\n  if (state[kFinalized])\x0d\n    throw new ERR_CRYPTO_HASH_FINALIZED();\x0d\n  outputEncoding = outputEncoding || getDefaultEncoding();\x0d\n\x0d\n  // Explicit conversion for backward compatibility.\x0d\n  const ret = this[kHandle].digest(`${outputEncoding}`);\x0d\n  state[kFinalized] = true;\x0d\n  return ret;\x0d\n};\x0d\n\x0d\nfunction Hmac(hmac\x2C key\x2C options) {\x0d\n  if (!(this instanceof Hmac))\x0d\n    return new Hmac(hmac\x2C key\x2C options);\x0d\n  validateString(hmac\x2C 'hmac');\x0d\n  const encoding = getStringOption(options\x2C 'encoding');\x0d\n  key = prepareSecretKey(key\x2C encoding);\x0d\n  this[kHandle] = new _Hmac();\x0d\n  this[kHandle].init(hmac\x2C key);\x0d\n  this[kState] = {\x0d\n    [kFinalized]: false\x0d\n  };\x0d\n  ReflectApply(LazyTransform\x2C this\x2C [options]);\x0d\n}\x0d\n\x0d\nObjectSetPrototypeOf(Hmac.prototype\x2C LazyTransform.prototype);\x0d\nObjectSetPrototypeOf(Hmac\x2C LazyTransform);\x0d\n\x0d\nHmac.prototype.update = Hash.prototype.update;\x0d\n\x0d\nHmac.prototype.digest = function digest(outputEncoding) {\x0d\n  const state = this[kState];\x0d\n  outputEncoding = outputEncoding || getDefaultEncoding();\x0d\n\x0d\n  if (state[kFinalized]) {\x0d\n    const buf = Buffer.from('');\x0d\n    return outputEncoding === 'buffer' ? buf : buf.toString(outputEncoding);\x0d\n  }\x0d\n\x0d\n  // Explicit conversion for backward compatibility.\x0d\n  const ret = this[kHandle].digest(`${outputEncoding}`);\x0d\n  state[kFinalized] = true;\x0d\n  return ret;\x0d\n};\x0d\n\x0d\nHmac.prototype._flush = Hash.prototype._flush;\x0d\nHmac.prototype._transform = Hash.prototype._transform;\x0d\n\x0d\n// Implementation for WebCrypto subtle.digest()\x0d\n\x0d\nasync function asyncDigest(algorithm\x2C data) {\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  data = getArrayBufferOrView(data\x2C 'data');\x0d\n  validateMaxBufferLength(data\x2C 'data');\x0d\n\x0d\n  if (algorithm.length !== undefined)\x0d\n    validateUint32(algorithm.length\x2C 'algorithm.length');\x0d\n\x0d\n  switch (algorithm.name) {\x0d\n    case 'SHA-1':\x0d\n      // Fall through\x0d\n    case 'SHA-256':\x0d\n      // Fall through\x0d\n    case 'SHA-384':\x0d\n      // Fall through\x0d\n    case 'SHA-512':\x0d\n      return jobPromise(new HashJob(\x0d\n        kCryptoJobAsync\x2C\x0d\n        normalizeHashName(algorithm.name)\x2C\x0d\n        data\x2C\x0d\n        algorithm.length));\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  Hash\x2C\x0d\n  Hmac\x2C\x0d\n  asyncDigest\x2C\x0d\n};\x0d\n
code-source-info,0x1aff2168c3e,172,0,5075,C0O0C4O5075,,
code-creation,Function,10,875066,0x1aff216918e,607, node:internal/crypto/hash:1:1,0x1aff2168bb8,~
code-source-info,0x1aff216918e
code-creation,Eval,10,876103,0x1aff216a6de,5, node:internal/crypto/x509:1:1,0x1aff216a308,~
script-source,173,node:internal/crypto/x509,'use strict';\x0d\n\x0d\nconst {\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  SafeMap\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  parseX509\x2C\x0d\n  X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT\x2C\x0d\n  X509_CHECK_FLAG_NEVER_CHECK_SUBJECT\x2C\x0d\n  X509_CHECK_FLAG_NO_WILDCARDS\x2C\x0d\n  X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS\x2C\x0d\n  X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS\x2C\x0d\n  X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  PublicKeyObject\x2C\x0d\n  isKeyObject\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol: kInspect\x2C\x0d\n  kEmptyObject\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { inspect } = require('internal/util/inspect');\x0d\n\x0d\nconst { Buffer } = require('buffer');\x0d\n\x0d\nconst {\x0d\n  isArrayBufferView\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_ARG_VALUE\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  JSTransferable\x2C\x0d\n  kClone\x2C\x0d\n  kDeserialize\x2C\x0d\n} = require('internal/worker/js_transferable');\x0d\n\x0d\nconst {\x0d\n  kHandle\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst kInternalState = Symbol('kInternalState');\x0d\n\x0d\nfunction isX509Certificate(value) {\x0d\n  return value[kInternalState] !== undefined;\x0d\n}\x0d\n\x0d\nfunction getFlags(options = kEmptyObject) {\x0d\n  validateObject(options\x2C 'options');\x0d\n  const {\x0d\n    // TODO(tniessen): change the default to 'default'\x0d\n    subject = 'always'\x2C  // Can be 'default'\x2C 'always'\x2C or 'never'\x0d\n    wildcards = true\x2C\x0d\n    partialWildcards = true\x2C\x0d\n    multiLabelWildcards = false\x2C\x0d\n    singleLabelSubdomains = false\x2C\x0d\n  } = { ...options };\x0d\n  let flags = 0;\x0d\n  validateString(subject\x2C 'options.subject');\x0d\n  validateBoolean(wildcards\x2C 'options.wildcards');\x0d\n  validateBoolean(partialWildcards\x2C 'options.partialWildcards');\x0d\n  validateBoolean(multiLabelWildcards\x2C 'options.multiLabelWildcards');\x0d\n  validateBoolean(singleLabelSubdomains\x2C 'options.singleLabelSubdomains');\x0d\n  switch (subject) {\x0d\n    case 'default': /* Matches OpenSSL's default\x2C no flags. */ break;\x0d\n    case 'always': flags |= X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT; break;\x0d\n    case 'never': flags |= X509_CHECK_FLAG_NEVER_CHECK_SUBJECT; break;\x0d\n    default:\x0d\n      throw new ERR_INVALID_ARG_VALUE('options.subject'\x2C subject);\x0d\n  }\x0d\n  if (!wildcards) flags |= X509_CHECK_FLAG_NO_WILDCARDS;\x0d\n  if (!partialWildcards) flags |= X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS;\x0d\n  if (multiLabelWildcards) flags |= X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS;\x0d\n  if (singleLabelSubdomains) flags |= X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS;\x0d\n  return flags;\x0d\n}\x0d\n\x0d\nclass InternalX509Certificate extends JSTransferable {\x0d\n  [kInternalState] = new SafeMap();\x0d\n\x0d\n  constructor(handle) {\x0d\n    super();\x0d\n    this[kHandle] = handle;\x0d\n  }\x0d\n}\x0d\n\x0d\nclass X509Certificate extends JSTransferable {\x0d\n  [kInternalState] = new SafeMap();\x0d\n\x0d\n  constructor(buffer) {\x0d\n    if (typeof buffer === 'string')\x0d\n      buffer = Buffer.from(buffer);\x0d\n    if (!isArrayBufferView(buffer)) {\x0d\n      throw new ERR_INVALID_ARG_TYPE(\x0d\n        'buffer'\x2C\x0d\n        ['string'\x2C 'Buffer'\x2C 'TypedArray'\x2C 'DataView']\x2C\x0d\n        buffer);\x0d\n    }\x0d\n    super();\x0d\n    this[kHandle] = parseX509(buffer);\x0d\n  }\x0d\n\x0d\n  [kInspect](depth\x2C options) {\x0d\n    if (depth < 0)\x0d\n      return this;\x0d\n\x0d\n    const opts = {\x0d\n      ...options\x2C\x0d\n      depth: options.depth == null ? null : options.depth - 1\x0d\n    };\x0d\n\x0d\n    return `X509Certificate ${inspect({\x0d\n      subject: this.subject\x2C\x0d\n      subjectAltName: this.subjectAltName\x2C\x0d\n      issuer: this.issuer\x2C\x0d\n      infoAccess: this.infoAccess\x2C\x0d\n      validFrom: this.validFrom\x2C\x0d\n      validTo: this.validTo\x2C\x0d\n      fingerprint: this.fingerprint\x2C\x0d\n      fingerprint256: this.fingerprint256\x2C\x0d\n      fingerprint512: this.fingerprint512\x2C\x0d\n      keyUsage: this.keyUsage\x2C\x0d\n      serialNumber: this.serialNumber\x2C\x0d\n    }\x2C opts)}`;\x0d\n  }\x0d\n\x0d\n  [kClone]() {\x0d\n    const handle = this[kHandle];\x0d\n    return {\x0d\n      data: { handle }\x2C\x0d\n      deserializeInfo: 'internal/crypto/x509:InternalX509Certificate'\x0d\n    };\x0d\n  }\x0d\n\x0d\n  [kDeserialize]({ handle }) {\x0d\n    this[kHandle] = handle;\x0d\n  }\x0d\n\x0d\n  get subject() {\x0d\n    let value = this[kInternalState].get('subject');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].subject();\x0d\n      this[kInternalState].set('subject'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get subjectAltName() {\x0d\n    let value = this[kInternalState].get('subjectAltName');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].subjectAltName();\x0d\n      this[kInternalState].set('subjectAltName'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get issuer() {\x0d\n    let value = this[kInternalState].get('issuer');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].issuer();\x0d\n      this[kInternalState].set('issuer'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get issuerCertificate() {\x0d\n    let value = this[kInternalState].get('issuerCertificate');\x0d\n    if (value === undefined) {\x0d\n      const cert = this[kHandle].getIssuerCert();\x0d\n      if (cert)\x0d\n        value = new InternalX509Certificate(this[kHandle].getIssuerCert());\x0d\n      this[kInternalState].set('issuerCertificate'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get infoAccess() {\x0d\n    let value = this[kInternalState].get('infoAccess');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].infoAccess();\x0d\n      this[kInternalState].set('infoAccess'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get validFrom() {\x0d\n    let value = this[kInternalState].get('validFrom');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].validFrom();\x0d\n      this[kInternalState].set('validFrom'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get validTo() {\x0d\n    let value = this[kInternalState].get('validTo');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].validTo();\x0d\n      this[kInternalState].set('validTo'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get fingerprint() {\x0d\n    let value = this[kInternalState].get('fingerprint');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].fingerprint();\x0d\n      this[kInternalState].set('fingerprint'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get fingerprint256() {\x0d\n    let value = this[kInternalState].get('fingerprint256');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].fingerprint256();\x0d\n      this[kInternalState].set('fingerprint256'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get fingerprint512() {\x0d\n    let value = this[kInternalState].get('fingerprint512');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].fingerprint512();\x0d\n      this[kInternalState].set('fingerprint512'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get keyUsage() {\x0d\n    let value = this[kInternalState].get('keyUsage');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].keyUsage();\x0d\n      this[kInternalState].set('keyUsage'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get serialNumber() {\x0d\n    let value = this[kInternalState].get('serialNumber');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].serialNumber();\x0d\n      this[kInternalState].set('serialNumber'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get raw() {\x0d\n    let value = this[kInternalState].get('raw');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].raw();\x0d\n      this[kInternalState].set('raw'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  get publicKey() {\x0d\n    let value = this[kInternalState].get('publicKey');\x0d\n    if (value === undefined) {\x0d\n      value = new PublicKeyObject(this[kHandle].publicKey());\x0d\n      this[kInternalState].set('publicKey'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  toString() {\x0d\n    let value = this[kInternalState].get('pem');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].pem();\x0d\n      this[kInternalState].set('pem'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  // There's no standardized JSON encoding for X509 certs so we\x0d\n  // fallback to providing the PEM encoding as a string.\x0d\n  toJSON() { return this.toString(); }\x0d\n\x0d\n  get ca() {\x0d\n    let value = this[kInternalState].get('ca');\x0d\n    if (value === undefined) {\x0d\n      value = this[kHandle].checkCA();\x0d\n      this[kInternalState].set('ca'\x2C value);\x0d\n    }\x0d\n    return value;\x0d\n  }\x0d\n\x0d\n  checkHost(name\x2C options) {\x0d\n    validateString(name\x2C 'name');\x0d\n    return this[kHandle].checkHost(name\x2C getFlags(options));\x0d\n  }\x0d\n\x0d\n  checkEmail(email\x2C options) {\x0d\n    validateString(email\x2C 'email');\x0d\n    return this[kHandle].checkEmail(email\x2C getFlags(options));\x0d\n  }\x0d\n\x0d\n  checkIP(ip\x2C options) {\x0d\n    validateString(ip\x2C 'ip');\x0d\n    // The options argument is currently undocumented since none of the options\x0d\n    // have any effect on the behavior of this function. However\x2C we still parse\x0d\n    // the options argument in case OpenSSL adds flags in the future that do\x0d\n    // affect the behavior of X509_check_ip. This ensures that no invalid values\x0d\n    // are passed as the second argument in the meantime.\x0d\n    return this[kHandle].checkIP(ip\x2C getFlags(options));\x0d\n  }\x0d\n\x0d\n  checkIssued(otherCert) {\x0d\n    if (!isX509Certificate(otherCert))\x0d\n      throw new ERR_INVALID_ARG_TYPE('otherCert'\x2C 'X509Certificate'\x2C otherCert);\x0d\n    return this[kHandle].checkIssued(otherCert[kHandle]);\x0d\n  }\x0d\n\x0d\n  checkPrivateKey(pkey) {\x0d\n    if (!isKeyObject(pkey))\x0d\n      throw new ERR_INVALID_ARG_TYPE('pkey'\x2C 'KeyObject'\x2C pkey);\x0d\n    if (pkey.type !== 'private')\x0d\n      throw new ERR_INVALID_ARG_VALUE('pkey'\x2C pkey);\x0d\n    return this[kHandle].checkPrivateKey(pkey[kHandle]);\x0d\n  }\x0d\n\x0d\n  verify(pkey) {\x0d\n    if (!isKeyObject(pkey))\x0d\n      throw new ERR_INVALID_ARG_TYPE('pkey'\x2C 'KeyObject'\x2C pkey);\x0d\n    if (pkey.type !== 'public')\x0d\n      throw new ERR_INVALID_ARG_VALUE('pkey'\x2C pkey);\x0d\n    return this[kHandle].verify(pkey[kHandle]);\x0d\n  }\x0d\n\x0d\n  toLegacyObject() {\x0d\n    return this[kHandle].toLegacy();\x0d\n  }\x0d\n}\x0d\n\x0d\nInternalX509Certificate.prototype.constructor = X509Certificate;\x0d\nObjectSetPrototypeOf(\x0d\n  InternalX509Certificate.prototype\x2C\x0d\n  X509Certificate.prototype);\x0d\n\x0d\nmodule.exports = {\x0d\n  X509Certificate\x2C\x0d\n  InternalX509Certificate\x2C\x0d\n  isX509Certificate\x2C\x0d\n};\x0d\n
code-source-info,0x1aff216a6de,173,0,10030,C0O0C4O10030,,
code-creation,Function,10,876872,0x1aff216c0e6,666, node:internal/crypto/x509:1:1,0x1aff216a658,~
code-source-info,0x1aff216c0e6,173,0,10030,C0O0C83O28C88O53C94O65C99O362C102O362C107O105C113O119C119O160C125O200C131O233C137O274C143O316C149O441C152O441C157O403C163O423C169O541C172O541C177O509C182O522C188O641C191O641C196O581C202O601C208O620C214O696C217O696C222O684C228O752C231O752C236O741C242O809C245O809C250O785C256O929C259O929C264O929C269O869C275O896C281O1020C284O1020C289O971C294O990C299O1001C304O1092C307O1092C312O1078C318O1151C321O1151C325O1151C334O2638C342O2659C377O2600C386O2803C394O2824C404O3202C412O3853C421O4029C603O9776C606O9800C613O9822C617O9842C620O9891C625O9921C630O9842C635O9936C642O9958C648O9978C654O10006C660O9951C665O10029,,
code-creation,Function,10,876996,0x1aff216c4ee,26,<instance_members_initializer> node:internal/crypto/x509:106:3,0x1aff216b2e8,~
code-source-info,0x1aff216c4ee,173,2823,2855,C3O2842C10O2842C25O2855,,
code-creation,Function,10,877033,0x1aff216c58e,26,<instance_members_initializer> node:internal/crypto/x509:97:3,0x1aff216a800,~
code-source-info,0x1aff216c58e,173,2658,2690,C3O2677C10O2677C25O2690,,
code-creation,Eval,10,877641,0x1aff216da06,5, node:internal/crypto/certificate:1:1,0x1aff216d870,~
script-source,174,node:internal/crypto/certificate,'use strict';\x0d\n\x0d\nconst {\x0d\n  certExportChallenge\x2C\x0d\n  certExportPublicKey\x2C\x0d\n  certVerifySpkac\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\n// The functions contained in this file cover the SPKAC format\x0d\n// (also referred to as Netscape SPKI). A general description of\x0d\n// the format can be found at https://en.wikipedia.org/wiki/SPKAC\x0d\n\x0d\nfunction verifySpkac(spkac\x2C encoding) {\x0d\n  return certVerifySpkac(\x0d\n    getArrayBufferOrView(spkac\x2C 'spkac'\x2C encoding));\x0d\n}\x0d\n\x0d\nfunction exportPublicKey(spkac\x2C encoding) {\x0d\n  return certExportPublicKey(\x0d\n    getArrayBufferOrView(spkac\x2C 'spkac'\x2C encoding));\x0d\n}\x0d\n\x0d\nfunction exportChallenge(spkac\x2C encoding) {\x0d\n  return certExportChallenge(\x0d\n    getArrayBufferOrView(spkac\x2C 'spkac'\x2C encoding));\x0d\n}\x0d\n\x0d\n// The legacy implementation of this exposed the Certificate\x0d\n// object and required that users create an instance before\x0d\n// calling the member methods. This API pattern has been\x0d\n// deprecated\x2C however\x2C as the method implementations do not\x0d\n// rely on any object state.\x0d\n\x0d\n// For backwards compatibility reasons\x2C this cannot be converted into a\x0d\n// ES6 Class.\x0d\nfunction Certificate() {\x0d\n  if (!(this instanceof Certificate))\x0d\n    return new Certificate();\x0d\n}\x0d\n\x0d\nCertificate.prototype.verifySpkac = verifySpkac;\x0d\nCertificate.prototype.exportPublicKey = exportPublicKey;\x0d\nCertificate.prototype.exportChallenge = exportChallenge;\x0d\n\x0d\nCertificate.exportChallenge = exportChallenge;\x0d\nCertificate.exportPublicKey = exportPublicKey;\x0d\nCertificate.verifySpkac = verifySpkac;\x0d\n\x0d\nmodule.exports = Certificate;\x0d\n
code-source-info,0x1aff216da06,174,0,1599,C0O0C4O1599,,
code-creation,Function,10,877807,0x1aff216dc3e,155, node:internal/crypto/certificate:1:1,0x1aff216d980,~
code-source-info,0x1aff216dc3e,174,0,1599,C0O0C38O98C41O98C46O28C52O52C58O76C64O166C67O166C72O139C78O1262C81O1274C88O1296C92O1312C95O1324C102O1350C106O1370C109O1382C116O1408C120O1430C125O1458C129O1478C134O1506C138O1526C143O1550C147O1568C149O1583C154O1598,,
code-creation,LazyCompile,10,878440,0x1aff216e77e,18,get node:crypto:294:8,0x24a76c75120,~
code-source-info,0x1aff216e77e,159,7210,7272,C0O7215C8O7222C13O7262C17O7270,,
code-creation,LazyCompile,10,878562,0x1aff216f2b6,38,lazyRequire node:internal/crypto/util:67:21,0x1aff2150b30,~
code-source-info,0x1aff216f2b6,162,1276,1416,C0O1298C7O1314C11O1325C13O1353C21O1384C26O1382C35O1402C37O1413,,
code-creation,Eval,10,879623,0x1aff21709a6,5, node:internal/crypto/webcrypto:1:1,0x1aff2170540,~
script-source,175,node:internal/crypto/webcrypto,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  JSONParse\x2C\x0d\n  JSONStringify\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectConstruct\x2C\x0d\n  SafeSet\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  kWebCryptoKeyFormatRaw\x2C\x0d\n  kWebCryptoKeyFormatPKCS8\x2C\x0d\n  kWebCryptoKeyFormatSPKI\x2C\x0d\n  kWebCryptoCipherEncrypt\x2C\x0d\n  kWebCryptoCipherDecrypt\x2C\x0d\n} = internalBinding('crypto');\x0d\n\x0d\nconst {\x0d\n  validateArray\x2C\x0d\n  validateBoolean\x2C\x0d\n  validateObject\x2C\x0d\n  validateOneOf\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nconst { TextDecoder\x2C TextEncoder } = require('internal/encoding');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_ILLEGAL_CONSTRUCTOR\x2C\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_INVALID_THIS\x2C\x0d\n  }\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  CryptoKey\x2C\x0d\n  InternalCryptoKey\x2C\x0d\n  createSecretKey\x2C\x0d\n  isCryptoKey\x2C\x0d\n} = require('internal/crypto/keys');\x0d\n\x0d\nconst {\x0d\n  asyncDigest\x2C\x0d\n} = require('internal/crypto/hash');\x0d\n\x0d\nconst {\x0d\n  getArrayBufferOrView\x2C\x0d\n  hasAnyNotIn\x2C\x0d\n  lazyRequire\x2C\x0d\n  normalizeAlgorithm\x2C\x0d\n  normalizeHashName\x2C\x0d\n  validateMaxBufferLength\x2C\x0d\n  kExportFormats\x2C\x0d\n  kHandle\x2C\x0d\n  kKeyObject\x2C\x0d\n} = require('internal/crypto/util');\x0d\n\x0d\nconst {\x0d\n  kEnumerableProperty\x2C\x0d\n  lazyDOMException\x2C\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  getRandomValues: _getRandomValues\x2C\x0d\n  randomUUID: _randomUUID\x2C\x0d\n} = require('internal/crypto/random');\x0d\n\x0d\nasync function digest(algorithm\x2C data) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  return ReflectApply(asyncDigest\x2C this\x2C arguments);\x0d\n}\x0d\n\x0d\nfunction randomUUID() {\x0d\n  if (this !== crypto) throw new ERR_INVALID_THIS('Crypto');\x0d\n  return _randomUUID();\x0d\n}\x0d\n\x0d\nasync function generateKey(\x0d\n  algorithm\x2C\x0d\n  extractable\x2C\x0d\n  keyUsages) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  validateBoolean(extractable\x2C 'extractable');\x0d\n  validateArray(keyUsages\x2C 'keyUsages');\x0d\n  let result;\x0d\n  let resultType;\x0d\n  switch (algorithm.name) {\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      // Fall through\x0d\n    case 'RSA-PSS':\x0d\n      // Fall through\x0d\n    case 'RSA-OAEP':\x0d\n      resultType = 'CryptoKeyPair';\x0d\n      result = await lazyRequire('internal/crypto/rsa')\x0d\n        .rsaKeyGenerate(algorithm\x2C extractable\x2C keyUsages);\x0d\n      break;\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      resultType = 'CryptoKeyPair';\x0d\n      result = await lazyRequire('internal/crypto/cfrg')\x0d\n        .cfrgGenerateKey(algorithm\x2C extractable\x2C keyUsages);\x0d\n      break;\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      resultType = 'CryptoKeyPair';\x0d\n      result = await lazyRequire('internal/crypto/ec')\x0d\n        .ecGenerateKey(algorithm\x2C extractable\x2C keyUsages);\x0d\n      break;\x0d\n    case 'HMAC':\x0d\n      resultType = 'CryptoKey';\x0d\n      result = await lazyRequire('internal/crypto/mac')\x0d\n        .hmacGenerateKey(algorithm\x2C extractable\x2C keyUsages);\x0d\n      break;\x0d\n    case 'AES-CTR':\x0d\n      // Fall through\x0d\n    case 'AES-CBC':\x0d\n      // Fall through\x0d\n    case 'AES-GCM':\x0d\n      // Fall through\x0d\n    case 'AES-KW':\x0d\n      resultType = 'CryptoKey';\x0d\n      result = await lazyRequire('internal/crypto/aes')\x0d\n        .aesGenerateKey(algorithm\x2C extractable\x2C keyUsages);\x0d\n      break;\x0d\n    default:\x0d\n      throw lazyDOMException('Unrecognized name.');\x0d\n  }\x0d\n\x0d\n  if (\x0d\n    (resultType === 'CryptoKey' &&\x0d\n      (result.type === 'secret' || result.type === 'private') &&\x0d\n      result.usages.length === 0) ||\x0d\n    (resultType === 'CryptoKeyPair' && result.privateKey.usages.length === 0)\x0d\n  ) {\x0d\n    throw lazyDOMException(\x0d\n      'Usages cannot be empty when creating a key.'\x2C\x0d\n      'SyntaxError');\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\nasync function deriveBits(algorithm\x2C baseKey\x2C length) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  if (!isCryptoKey(baseKey))\x0d\n    throw new ERR_INVALID_ARG_TYPE('baseKey'\x2C 'CryptoKey'\x2C baseKey);\x0d\n  if (!ArrayPrototypeIncludes(baseKey.usages\x2C 'deriveBits')) {\x0d\n    throw lazyDOMException(\x0d\n      'baseKey does not have deriveBits usage'\x2C\x0d\n      'InvalidAccessError');\x0d\n  }\x0d\n  if (baseKey.algorithm.name !== algorithm.name)\x0d\n    throw lazyDOMException('Key algorithm mismatch'\x2C 'InvalidAccessError');\x0d\n  switch (algorithm.name) {\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      return lazyRequire('internal/crypto/diffiehellman')\x0d\n        .asyncDeriveBitsECDH(algorithm\x2C baseKey\x2C length);\x0d\n    case 'HKDF':\x0d\n      return lazyRequire('internal/crypto/hkdf')\x0d\n        .hkdfDeriveBits(algorithm\x2C baseKey\x2C length);\x0d\n    case 'PBKDF2':\x0d\n      return lazyRequire('internal/crypto/pbkdf2')\x0d\n        .pbkdf2DeriveBits(algorithm\x2C baseKey\x2C length);\x0d\n  }\x0d\n  throw lazyDOMException('Unrecognized name.');\x0d\n}\x0d\n\x0d\nfunction getKeyLength({ name\x2C length\x2C hash }) {\x0d\n  switch (name) {\x0d\n    case 'AES-CTR':\x0d\n    case 'AES-CBC':\x0d\n    case 'AES-GCM':\x0d\n    case 'AES-KW':\x0d\n      if (length !== 128 && length !== 192 && length !== 256)\x0d\n        throw lazyDOMException('Invalid key length'\x2C 'OperationError');\x0d\n\x0d\n      return length;\x0d\n    case 'HMAC':\x0d\n      if (length === undefined) {\x0d\n        switch (hash?.name) {\x0d\n          case 'SHA-1':\x0d\n            return 160;\x0d\n          case 'SHA-256':\x0d\n            return 256;\x0d\n          case 'SHA-384':\x0d\n            return 384;\x0d\n          case 'SHA-512':\x0d\n            return 512;\x0d\n        }\x0d\n      }\x0d\n\x0d\n      if (typeof length === 'number' && length !== 0) {\x0d\n        return length;\x0d\n      }\x0d\n\x0d\n      throw lazyDOMException('Invalid key length'\x2C 'OperationError');\x0d\n    case 'HKDF':\x0d\n    case 'PBKDF2':\x0d\n      return null;\x0d\n  }\x0d\n}\x0d\n\x0d\nasync function deriveKey(\x0d\n  algorithm\x2C\x0d\n  baseKey\x2C\x0d\n  derivedKeyAlgorithm\x2C\x0d\n  extractable\x2C\x0d\n  keyUsages) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  derivedKeyAlgorithm = normalizeAlgorithm(derivedKeyAlgorithm);\x0d\n  if (!isCryptoKey(baseKey))\x0d\n    throw new ERR_INVALID_ARG_TYPE('baseKey'\x2C 'CryptoKey'\x2C baseKey);\x0d\n  if (!ArrayPrototypeIncludes(baseKey.usages\x2C 'deriveKey')) {\x0d\n    throw lazyDOMException(\x0d\n      'baseKey does not have deriveKey usage'\x2C\x0d\n      'InvalidAccessError');\x0d\n  }\x0d\n  if (baseKey.algorithm.name !== algorithm.name)\x0d\n    throw lazyDOMException('Key algorithm mismatch'\x2C 'InvalidAccessError');\x0d\n  validateObject(derivedKeyAlgorithm\x2C 'derivedKeyAlgorithm'\x2C {\x0d\n    allowArray: true\x2C allowFunction: true\x2C\x0d\n  });\x0d\n  validateBoolean(extractable\x2C 'extractable');\x0d\n  validateArray(keyUsages\x2C 'keyUsages');\x0d\n\x0d\n  const length = getKeyLength(derivedKeyAlgorithm);\x0d\n  let bits;\x0d\n  switch (algorithm.name) {\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      bits = await lazyRequire('internal/crypto/diffiehellman')\x0d\n        .asyncDeriveBitsECDH(algorithm\x2C baseKey\x2C length);\x0d\n      break;\x0d\n    case 'HKDF':\x0d\n      bits = await lazyRequire('internal/crypto/hkdf')\x0d\n        .hkdfDeriveBits(algorithm\x2C baseKey\x2C length);\x0d\n      break;\x0d\n    case 'PBKDF2':\x0d\n      bits = await lazyRequire('internal/crypto/pbkdf2')\x0d\n        .pbkdf2DeriveBits(algorithm\x2C baseKey\x2C length);\x0d\n      break;\x0d\n    default:\x0d\n      throw lazyDOMException('Unrecognized name.');\x0d\n  }\x0d\n\x0d\n  return ReflectApply(\x0d\n    importKey\x2C\x0d\n    this\x2C\x0d\n    ['raw'\x2C bits\x2C derivedKeyAlgorithm\x2C extractable\x2C keyUsages]\x2C\x0d\n  );\x0d\n}\x0d\n\x0d\nasync function exportKeySpki(key) {\x0d\n  switch (key.algorithm.name) {\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      // Fall through\x0d\n    case 'RSA-PSS':\x0d\n      // Fall through\x0d\n    case 'RSA-OAEP':\x0d\n      if (key.type === 'public') {\x0d\n        return lazyRequire('internal/crypto/rsa')\x0d\n          .rsaExportKey(key\x2C kWebCryptoKeyFormatSPKI);\x0d\n      }\x0d\n      break;\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      if (key.type === 'public') {\x0d\n        return lazyRequire('internal/crypto/ec')\x0d\n          .ecExportKey(key\x2C kWebCryptoKeyFormatSPKI);\x0d\n      }\x0d\n      break;\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      if (key.type === 'public') {\x0d\n        return lazyRequire('internal/crypto/cfrg')\x0d\n          .cfrgExportKey(key\x2C kWebCryptoKeyFormatSPKI);\x0d\n      }\x0d\n      break;\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException(\x0d\n    `Unable to export a raw ${key.algorithm.name} ${key.type} key`\x2C\x0d\n    'InvalidAccessError');\x0d\n}\x0d\n\x0d\nasync function exportKeyPkcs8(key) {\x0d\n  switch (key.algorithm.name) {\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      // Fall through\x0d\n    case 'RSA-PSS':\x0d\n      // Fall through\x0d\n    case 'RSA-OAEP':\x0d\n      if (key.type === 'private') {\x0d\n        return lazyRequire('internal/crypto/rsa')\x0d\n          .rsaExportKey(key\x2C kWebCryptoKeyFormatPKCS8);\x0d\n      }\x0d\n      break;\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      if (key.type === 'private') {\x0d\n        return lazyRequire('internal/crypto/ec')\x0d\n          .ecExportKey(key\x2C kWebCryptoKeyFormatPKCS8);\x0d\n      }\x0d\n      break;\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      if (key.type === 'private') {\x0d\n        return lazyRequire('internal/crypto/cfrg')\x0d\n          .cfrgExportKey(key\x2C kWebCryptoKeyFormatPKCS8);\x0d\n      }\x0d\n      break;\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException(\x0d\n    `Unable to export a pkcs8 ${key.algorithm.name} ${key.type} key`\x2C\x0d\n    'InvalidAccessError');\x0d\n}\x0d\n\x0d\nasync function exportKeyRaw(key) {\x0d\n  switch (key.algorithm.name) {\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      if (key.type === 'public') {\x0d\n        return lazyRequire('internal/crypto/ec')\x0d\n          .ecExportKey(key\x2C kWebCryptoKeyFormatRaw);\x0d\n      }\x0d\n      break;\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      if (key.type === 'public') {\x0d\n        return lazyRequire('internal/crypto/cfrg')\x0d\n          .cfrgExportKey(key\x2C kWebCryptoKeyFormatRaw);\x0d\n      }\x0d\n      break;\x0d\n    case 'AES-CTR':\x0d\n      // Fall through\x0d\n    case 'AES-CBC':\x0d\n      // Fall through\x0d\n    case 'AES-GCM':\x0d\n      // Fall through\x0d\n    case 'AES-KW':\x0d\n      // Fall through\x0d\n    case 'HMAC':\x0d\n      return key[kKeyObject].export().buffer;\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException(\x0d\n    `Unable to export a raw ${key.algorithm.name} ${key.type} key`\x2C\x0d\n    'InvalidAccessError');\x0d\n}\x0d\n\x0d\nasync function exportKeyJWK(key) {\x0d\n  const jwk = key[kKeyObject][kHandle].exportJwk({\x0d\n    key_ops: key.usages\x2C\x0d\n    ext: key.extractable\x2C\x0d\n  }\x2C true);\x0d\n  switch (key.algorithm.name) {\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      jwk.alg = normalizeHashName(\x0d\n        key.algorithm.hash.name\x2C\x0d\n        normalizeHashName.kContextJwkRsa);\x0d\n      return jwk;\x0d\n    case 'RSA-PSS':\x0d\n      jwk.alg = normalizeHashName(\x0d\n        key.algorithm.hash.name\x2C\x0d\n        normalizeHashName.kContextJwkRsaPss);\x0d\n      return jwk;\x0d\n    case 'RSA-OAEP':\x0d\n      jwk.alg = normalizeHashName(\x0d\n        key.algorithm.hash.name\x2C\x0d\n        normalizeHashName.kContextJwkRsaOaep);\x0d\n      return jwk;\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      jwk.crv ||= key.algorithm.namedCurve;\x0d\n      return jwk;\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      jwk.crv ||= key.algorithm.name;\x0d\n      return jwk;\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      jwk.crv ||= key.algorithm.name;\x0d\n      jwk.alg = 'EdDSA';\x0d\n      return jwk;\x0d\n    case 'AES-CTR':\x0d\n      // Fall through\x0d\n    case 'AES-CBC':\x0d\n      // Fall through\x0d\n    case 'AES-GCM':\x0d\n      // Fall through\x0d\n    case 'AES-KW':\x0d\n      jwk.alg = lazyRequire('internal/crypto/aes')\x0d\n        .getAlgorithmName(key.algorithm.name\x2C key.algorithm.length);\x0d\n      return jwk;\x0d\n    case 'HMAC':\x0d\n      jwk.alg = normalizeHashName(\x0d\n        key.algorithm.hash.name\x2C\x0d\n        normalizeHashName.kContextJwkHmac);\x0d\n      return jwk;\x0d\n    default:\x0d\n      // Fall through\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException('Not yet supported'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nasync function exportKey(format\x2C key) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  validateString(format\x2C 'format');\x0d\n  validateOneOf(format\x2C 'format'\x2C kExportFormats);\x0d\n  if (!isCryptoKey(key))\x0d\n    throw new ERR_INVALID_ARG_TYPE('key'\x2C 'CryptoKey'\x2C key);\x0d\n\x0d\n  if (!key.extractable)\x0d\n    throw lazyDOMException('key is not extractable'\x2C 'InvalidAccessException');\x0d\n\x0d\n  switch (format) {\x0d\n    case 'spki': return exportKeySpki(key);\x0d\n    case 'pkcs8': return exportKeyPkcs8(key);\x0d\n    case 'jwk': return exportKeyJWK(key);\x0d\n    case 'raw': return exportKeyRaw(key);\x0d\n  }\x0d\n  throw lazyDOMException(\x0d\n    'Export format is unsupported'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nasync function importGenericSecretKey(\x0d\n  { name\x2C length }\x2C\x0d\n  format\x2C\x0d\n  keyData\x2C\x0d\n  extractable\x2C\x0d\n  keyUsages) {\x0d\n  const usagesSet = new SafeSet(keyUsages);\x0d\n  if (extractable)\x0d\n    throw lazyDOMException(`${name} keys are not extractable`\x2C 'SyntaxError');\x0d\n\x0d\n  if (hasAnyNotIn(usagesSet\x2C ['deriveKey'\x2C 'deriveBits'])) {\x0d\n    throw lazyDOMException(\x0d\n      `Unsupported key usage for a ${name} key`\x2C\x0d\n      'SyntaxError');\x0d\n  }\x0d\n\x0d\n  switch (format) {\x0d\n    case 'raw': {\x0d\n      if (hasAnyNotIn(usagesSet\x2C ['deriveKey'\x2C 'deriveBits'])) {\x0d\n        throw lazyDOMException(\x0d\n          `Unsupported key usage for a ${name} key`\x2C\x0d\n          'SyntaxError');\x0d\n      }\x0d\n\x0d\n      const checkLength = keyData.byteLength * 8;\x0d\n\x0d\n      // The Web Crypto spec allows for key lengths that are not multiples of\x0d\n      // 8. We don't. Our check here is stricter than that defined by the spec\x0d\n      // in that we require that algorithm.length match keyData.length * 8 if\x0d\n      // algorithm.length is specified.\x0d\n      if (length !== undefined && length !== checkLength) {\x0d\n        throw lazyDOMException('Invalid key length'\x2C 'DataError');\x0d\n      }\x0d\n\x0d\n      const keyObject = createSecretKey(keyData);\x0d\n      return new InternalCryptoKey(keyObject\x2C { name }\x2C keyUsages\x2C false);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException(\x0d\n    `Unable to import ${name} key with format ${format}`\x2C\x0d\n    'NotSupportedError');\x0d\n}\x0d\n\x0d\nasync function importKey(\x0d\n  format\x2C\x0d\n  keyData\x2C\x0d\n  algorithm\x2C\x0d\n  extractable\x2C\x0d\n  keyUsages) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  validateString(format\x2C 'format');\x0d\n  validateOneOf(format\x2C 'format'\x2C kExportFormats);\x0d\n  if (format !== 'jwk')\x0d\n    keyData = getArrayBufferOrView(keyData\x2C 'keyData');\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  validateBoolean(extractable\x2C 'extractable');\x0d\n  validateArray(keyUsages\x2C 'keyUsages');\x0d\n  switch (algorithm.name) {\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      // Fall through\x0d\n    case 'RSA-PSS':\x0d\n      // Fall through\x0d\n    case 'RSA-OAEP':\x0d\n      return lazyRequire('internal/crypto/rsa')\x0d\n        .rsaImportKey(format\x2C keyData\x2C algorithm\x2C extractable\x2C keyUsages);\x0d\n    case 'ECDSA':\x0d\n      // Fall through\x0d\n    case 'ECDH':\x0d\n      return lazyRequire('internal/crypto/ec')\x0d\n        .ecImportKey(format\x2C keyData\x2C algorithm\x2C extractable\x2C keyUsages);\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n    case 'X25519':\x0d\n      // Fall through\x0d\n    case 'X448':\x0d\n      return lazyRequire('internal/crypto/cfrg')\x0d\n        .cfrgImportKey(format\x2C keyData\x2C algorithm\x2C extractable\x2C keyUsages);\x0d\n    case 'HMAC':\x0d\n      return lazyRequire('internal/crypto/mac')\x0d\n        .hmacImportKey(format\x2C keyData\x2C algorithm\x2C extractable\x2C keyUsages);\x0d\n    case 'AES-CTR':\x0d\n      // Fall through\x0d\n    case 'AES-CBC':\x0d\n      // Fall through\x0d\n    case 'AES-GCM':\x0d\n      // Fall through\x0d\n    case 'AES-KW':\x0d\n      return lazyRequire('internal/crypto/aes')\x0d\n        .aesImportKey(algorithm\x2C format\x2C keyData\x2C extractable\x2C keyUsages);\x0d\n    case 'HKDF':\x0d\n      // Fall through\x0d\n    case 'PBKDF2':\x0d\n      return importGenericSecretKey(\x0d\n        algorithm\x2C\x0d\n        format\x2C\x0d\n        keyData\x2C\x0d\n        extractable\x2C\x0d\n        keyUsages);\x0d\n  }\x0d\n\x0d\n  throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\n// subtle.wrapKey() is essentially a subtle.exportKey() followed\x0d\n// by a subtle.encrypt().\x0d\nasync function wrapKey(format\x2C key\x2C wrappingKey\x2C algorithm) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  let keyData = await ReflectApply(exportKey\x2C this\x2C [format\x2C key]);\x0d\n\x0d\n  if (format === 'jwk') {\x0d\n    if (keyData == null || typeof keyData !== 'object')\x0d\n      throw lazyDOMException('Invalid exported JWK key'\x2C 'DataError');\x0d\n    const ec = new TextEncoder();\x0d\n    const raw = JSONStringify(keyData);\x0d\n    keyData = ec.encode(raw + StringPrototypeRepeat(' '\x2C 8 - (raw.length % 8)));\x0d\n  }\x0d\n\x0d\n  return cipherOrWrap(\x0d\n    kWebCryptoCipherEncrypt\x2C\x0d\n    algorithm\x2C\x0d\n    wrappingKey\x2C\x0d\n    keyData\x2C\x0d\n    'wrapKey');\x0d\n}\x0d\n\x0d\n// subtle.unwrapKey() is essentially a subtle.decrypt() followed\x0d\n// by a subtle.importKey().\x0d\nasync function unwrapKey(\x0d\n  format\x2C\x0d\n  wrappedKey\x2C\x0d\n  unwrappingKey\x2C\x0d\n  unwrapAlgo\x2C\x0d\n  unwrappedKeyAlgo\x2C\x0d\n  extractable\x2C\x0d\n  keyUsages) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  wrappedKey = getArrayBufferOrView(wrappedKey\x2C 'wrappedKey');\x0d\n  unwrapAlgo = normalizeAlgorithm(unwrapAlgo);\x0d\n  let keyData = await cipherOrWrap(\x0d\n    kWebCryptoCipherDecrypt\x2C\x0d\n    unwrapAlgo\x2C\x0d\n    unwrappingKey\x2C\x0d\n    wrappedKey\x2C\x0d\n    'unwrapKey');\x0d\n\x0d\n  if (format === 'jwk') {\x0d\n    // The fatal: true option is only supported in builds that have ICU.\x0d\n    const options = process.versions.icu !== undefined ?\x0d\n      { fatal: true } : undefined;\x0d\n    const dec = new TextDecoder('utf-8'\x2C options);\x0d\n    try {\x0d\n      keyData = JSONParse(dec.decode(keyData));\x0d\n    } catch {\x0d\n      throw lazyDOMException('Invalid imported JWK key'\x2C 'DataError');\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return ReflectApply(\x0d\n    importKey\x2C\x0d\n    this\x2C\x0d\n    [format\x2C keyData\x2C unwrappedKeyAlgo\x2C extractable\x2C keyUsages]\x2C\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction signVerify(algorithm\x2C key\x2C data\x2C signature) {\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  if (!isCryptoKey(key))\x0d\n    throw new ERR_INVALID_ARG_TYPE('key'\x2C 'CryptoKey'\x2C key);\x0d\n  data = getArrayBufferOrView(data\x2C 'data');\x0d\n  let usage = 'sign';\x0d\n  if (signature !== undefined) {\x0d\n    signature = getArrayBufferOrView(signature\x2C 'signature');\x0d\n    usage = 'verify';\x0d\n  }\x0d\n\x0d\n  if (!ArrayPrototypeIncludes(key.usages\x2C usage) ||\x0d\n      algorithm.name !== key.algorithm.name) {\x0d\n    throw lazyDOMException(\x0d\n      `Unable to use this key to ${usage}`\x2C\x0d\n      'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  switch (algorithm.name) {\x0d\n    case 'RSA-PSS':\x0d\n      // Fall through\x0d\n    case 'RSASSA-PKCS1-v1_5':\x0d\n      return lazyRequire('internal/crypto/rsa')\x0d\n        .rsaSignVerify(key\x2C data\x2C algorithm\x2C signature);\x0d\n    case 'ECDSA':\x0d\n      return lazyRequire('internal/crypto/ec')\x0d\n        .ecdsaSignVerify(key\x2C data\x2C algorithm\x2C signature);\x0d\n    case 'Ed25519':\x0d\n      // Fall through\x0d\n    case 'Ed448':\x0d\n      // Fall through\x0d\n      return lazyRequire('internal/crypto/cfrg')\x0d\n        .eddsaSignVerify(key\x2C data\x2C algorithm\x2C signature);\x0d\n    case 'HMAC':\x0d\n      return lazyRequire('internal/crypto/mac')\x0d\n        .hmacSignVerify(key\x2C data\x2C algorithm\x2C signature);\x0d\n  }\x0d\n  throw lazyDOMException('Unrecognized named.'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nasync function sign(algorithm\x2C key\x2C data) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  return signVerify(algorithm\x2C key\x2C data);\x0d\n}\x0d\n\x0d\nasync function verify(algorithm\x2C key\x2C signature\x2C data) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  return signVerify(algorithm\x2C key\x2C data\x2C signature);\x0d\n}\x0d\n\x0d\nasync function cipherOrWrap(mode\x2C algorithm\x2C key\x2C data\x2C op) {\x0d\n  algorithm = normalizeAlgorithm(algorithm);\x0d\n  // We use a Node.js style error here instead of a DOMException because\x0d\n  // the WebCrypto spec is not specific what kind of error is to be thrown\x0d\n  // in this case. Both Firefox and Chrome throw simple TypeErrors here.\x0d\n  if (!isCryptoKey(key))\x0d\n    throw new ERR_INVALID_ARG_TYPE('key'\x2C 'CryptoKey'\x2C key);\x0d\n  // The key algorithm and cipher algorithm must match\x2C and the\x0d\n  // key must have the proper usage.\x0d\n  if (key.algorithm.name !== algorithm.name ||\x0d\n      !ArrayPrototypeIncludes(key.usages\x2C op)) {\x0d\n    throw lazyDOMException(\x0d\n      'The requested operation is not valid for the provided key'\x2C\x0d\n      'InvalidAccessError');\x0d\n  }\x0d\n\x0d\n  // For the Web Crypto API\x2C the input data can be any ArrayBuffer\x2C\x0d\n  // TypedArray\x2C or DataView.\x0d\n  data = getArrayBufferOrView(data\x2C 'data');\x0d\n\x0d\n  // While WebCrypto allows for larger input buffer sizes\x2C we limit\x0d\n  // those to sizes that can fit within uint32_t because of limitations\x0d\n  // in the OpenSSL API.\x0d\n  validateMaxBufferLength(data\x2C 'data');\x0d\n\x0d\n  switch (algorithm.name) {\x0d\n    case 'RSA-OAEP':\x0d\n      return lazyRequire('internal/crypto/rsa')\x0d\n        .rsaCipher(mode\x2C key\x2C data\x2C algorithm);\x0d\n    case 'AES-CTR':\x0d\n      // Fall through\x0d\n    case 'AES-CBC':\x0d\n      // Fall through\x0d\n    case 'AES-GCM':\x0d\n      return lazyRequire('internal/crypto/aes')\x0d\n        .aesCipher(mode\x2C key\x2C data\x2C algorithm);\x0d\n    case 'AES-KW':\x0d\n      if (op === 'wrapKey' || op === 'unwrapKey') {\x0d\n        return lazyRequire('internal/crypto/aes')\x0d\n          .aesCipher(mode\x2C key\x2C data\x2C algorithm);\x0d\n      }\x0d\n  }\x0d\n  throw lazyDOMException('Unrecognized name.'\x2C 'NotSupportedError');\x0d\n}\x0d\n\x0d\nasync function encrypt(algorithm\x2C key\x2C data) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  return cipherOrWrap(kWebCryptoCipherEncrypt\x2C algorithm\x2C key\x2C data\x2C 'encrypt');\x0d\n}\x0d\n\x0d\nasync function decrypt(algorithm\x2C key\x2C data) {\x0d\n  if (this !== subtle) throw new ERR_INVALID_THIS('SubtleCrypto');\x0d\n  return cipherOrWrap(kWebCryptoCipherDecrypt\x2C algorithm\x2C key\x2C data\x2C 'decrypt');\x0d\n}\x0d\n\x0d\n// The SubtleCrypto and Crypto classes are defined as part of the\x0d\n// Web Crypto API standard: https://www.w3.org/TR/WebCryptoAPI/\x0d\n\x0d\nclass SubtleCrypto {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n}\x0d\nconst subtle = ReflectConstruct(function() {}\x2C []\x2C SubtleCrypto);\x0d\n\x0d\nclass Crypto {\x0d\n  constructor() {\x0d\n    throw new ERR_ILLEGAL_CONSTRUCTOR();\x0d\n  }\x0d\n\x0d\n  get subtle() {\x0d\n    if (this !== crypto) throw new ERR_INVALID_THIS('Crypto');\x0d\n    return subtle;\x0d\n  }\x0d\n}\x0d\nconst crypto = ReflectConstruct(function() {}\x2C []\x2C Crypto);\x0d\n\x0d\nfunction getRandomValues(array) {\x0d\n  if (this !== crypto) throw new ERR_INVALID_THIS('Crypto');\x0d\n  return ReflectApply(_getRandomValues\x2C this\x2C arguments);\x0d\n}\x0d\n\x0d\nObjectDefineProperties(\x0d\n  Crypto.prototype\x2C {\x0d\n    [SymbolToStringTag]: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: false\x2C\x0d\n      value: 'Crypto'\x2C\x0d\n    }\x2C\x0d\n    subtle: kEnumerableProperty\x2C\x0d\n    getRandomValues: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: getRandomValues\x2C\x0d\n    }\x2C\x0d\n    randomUUID: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: randomUUID\x2C\x0d\n    }\x2C\x0d\n    CryptoKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: CryptoKey\x2C\x0d\n    }\x0d\n  });\x0d\n\x0d\nObjectDefineProperties(\x0d\n  SubtleCrypto.prototype\x2C {\x0d\n    [SymbolToStringTag]: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: false\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: false\x2C\x0d\n      value: 'SubtleCrypto'\x2C\x0d\n    }\x2C\x0d\n    encrypt: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: encrypt\x2C\x0d\n    }\x2C\x0d\n    decrypt: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: decrypt\x2C\x0d\n    }\x2C\x0d\n    sign: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: sign\x2C\x0d\n    }\x2C\x0d\n    verify: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: verify\x2C\x0d\n    }\x2C\x0d\n    digest: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: digest\x2C\x0d\n    }\x2C\x0d\n    generateKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: generateKey\x2C\x0d\n    }\x2C\x0d\n    deriveKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: deriveKey\x2C\x0d\n    }\x2C\x0d\n    deriveBits: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: deriveBits\x2C\x0d\n    }\x2C\x0d\n    importKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: importKey\x2C\x0d\n    }\x2C\x0d\n    exportKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: exportKey\x2C\x0d\n    }\x2C\x0d\n    wrapKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: wrapKey\x2C\x0d\n    }\x2C\x0d\n    unwrapKey: {\x0d\n      __proto__: null\x2C\x0d\n      enumerable: true\x2C\x0d\n      configurable: true\x2C\x0d\n      writable: true\x2C\x0d\n      value: unwrapKey\x2C\x0d\n    }\x0d\n  });\x0d\n\x0d\nmodule.exports = {\x0d\n  Crypto\x2C\x0d\n  CryptoKey\x2C\x0d\n  SubtleCrypto\x2C\x0d\n  crypto\x2C\x0d\n};\x0d\n
code-source-info,0x1aff21709a6,175,0,25373,C0O0C4O25373,,
code-creation,Function,10,881536,0x1aff2171f36,1142, node:internal/crypto/webcrypto:1:1,0x1aff2170920,~
code-source-info,0x1aff2171f
code-creation,LazyCompile,10,881943,0x1aff21745e6,2, node:internal/crypto/webcrypto:752:41,0x1aff2171108,~
code-source-info,0x1aff21745e6,175,22133,22138,C1O22137,,
code-creation,LazyCompile,10,882021,0x1aff21762f6,11,SubtleCrypto node:internal/crypto/webcrypto:748:14,0x1aff21710b8,~
code-source-info,0x1aff21762f6,175,22037,22088,C0O22047C5O22053C10O22047,,
code-creation,LazyCompile,10,882094,0x1aff21763de,2, node:internal/crypto/webcrypto:764:41,0x1aff2171218,~
code-source-info,0x1aff21763de,175,22396,22401,C1O22400,,
code-creation,LazyCompile,10,882163,0x1aff2176496,11,Crypto node:internal/crypto/webcrypto:755:14,0x1aff2171158,~
code-source-info,0x1aff2176496,175,22191,22242,C0O22201C5O22207C10O22201,,
code-creation,Eval,10,882447,0x1aff217673e,5, node:fs/promises:1:1,0x1aff21765f8,~
script-source,176,node:fs/promises,'use strict';\x0d\n\x0d\nmodule.exports = require('internal/fs/promises').exports;\x0d\n
code-source-info,0x1aff217673e,176,0,76,C0O0C4O76,,
code-creation,Function,10,882517,0x1aff21767c6,18, node:fs/promises:1:1,0x1aff21766b8,~
code-source-info,0x1aff21767c6,176,0,76,C0O17C3O34C8O65C12O32C17O75,,
code-creation,Script,10,883065,0x1aff2177a0e,190, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/data-chunk.js:1:1,0x1aff2176df8,~
script-source,177,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/data-chunk.js,import { deepMergeSafely\x2C flattenObject } from "./object.js";\x0d\n\x0d\nexport class DataChunk {\x0d\n  /**\x0d\n   * @param {DataSlice[]} slices \x0d\n   */\x0d\n  constructor(slices = []\x2C shorthands = []) {\x0d\n    // Dont forget to add new fields to the this.duplicate() method.\x0d\n    /**\x0d\n      * The individual data slices that make up a single chunk.\x0d\n      * @type {DataSlice[]}\x0d\n      */\x0d\n    this.slices = slices;\x0d\n    this.shorthands = shorthands;\x0d\n  }\x0d\n\x0d\n  get depth() {\x0d\n    return this.slices.length;\x0d\n  }\x0d\n\x0d\n  get(prop) {\x0d\n    for (const slice of this.slices)\x0d\n      if (slice.payload.hasOwnProperty(prop))\x0d\n        return slice.payload[prop];\x0d\n    return undefined;\x0d\n  }\x0d\n\x0d\n  has(prop) {\x0d\n    for (const slice of this.slices)\x0d\n      if (slice.payload.hasOwnProperty(prop))\x0d\n        return true;\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  addSlice(slice) {\x0d\n    this.slices.unshift(slice);\x0d\n  }\x0d\n\x0d\n  addPayload(id\x2C payload) {\x0d\n    const slice = new DataSlice(id\x2C payload);\x0d\n    this.addSlice(slice);\x0d\n  }\x0d\n\x0d\n  hasSlice(id) {\x0d\n    return !!this.getSlice(id);\x0d\n  }\x0d\n\x0d\n  getSlice(id) {\x0d\n    return this.slices.find(slice => slice.id === id);\x0d\n  }\x0d\n\x0d\n  addShorthand(propName\x2C sliceId) {\x0d\n    this.shorthands.push({ propName\x2C sliceId });\x0d\n  }\x0d\n\x0d\n  flatten() {\x0d\n    const flattenedData = \x0d\n      [...this.slices].reverse() // We have to reverse so lower slices get covered by higher slices.\x0d\n      .reduce((acc\x2C slice) => deepMergeSafely(acc\x2C slice.payload\x2C DataChunk.parentAnnihilator)\x2C {});\x0d\n    for (const shorthand of this.shorthands) {\x0d\n      const { propName\x2C sliceId } = shorthand;\x0d\n      if (!this.hasSlice(sliceId))\x0d\n        throw new Error(`Unkown slice '${sliceId}'`);\x0d\n      flattenedData[propName] = flattenObject(this.getSlice(sliceId).payload\x2C DataChunk.parentAnnihilator);\x0d\n    }\x0d\n    return flattenedData;\x0d\n  }\x0d\n\x0d\n  duplicate() {\x0d\n    return new DataChunk(\x0d\n      this.slices.map(slice => slice.duplicate())\x2C\x0d\n      JSON.parse(JSON.stringify(this.shorthands))\x2C\x0d\n    );\x0d\n  }\x0d\n\x0d\n  static parentAnnihilator(key\x2C value) {\x0d\n    // Prevents cyclic dependency issues\x0d\n    // 2024-08: As of right now\x2C the parent property is not really used anywhere.\x0d\n    //   We will keep this special parent annihilator for now if we need a parent again.\x0d\n    //   If any problems arise\x2C this *little-stinky hack* will be yeeted.\x0d\n    return key === "parent" ? undefined : value;\x0d\n  }\x0d\n}\x0d\n\x0d\nexport class DataSlice {\x0d\n  constructor(id = ""\x2C payload = {}) {\x0d\n    this.id = id;\x0d\n    this.payload = payload;\x0d\n  }\x0d\n\x0d\n  duplicate() {\x0d\n    return new DataSlice(this.id\x2C flattenObject(this.payload\x2C DataChunk.parentAnnihilator));\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x1aff2177a0e,177,0,2593,C10O0C28O0C48O0C144O72C184O2360C189O2593,,
tick,0x7ff6d5ba5ebb,883485,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
code-creation,Script,10,884713,0x1aff2178216,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/crypto.js:1:1,0x1aff2177f78,~
script-source,178,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/crypto.js,import { createHash } from 'crypto';\x0d\n\x0d\nexport function getMd5Checksum(string) {\x0d\n  const md5Hash = createHash('md5');\x0d\n  md5Hash.update(string);\x0d\n  return md5Hash.digest('hex');\x0d\n}\x0d\n    
code-source-info,0x1aff2178216,178,0,187,C10O0C28O0C48O0C57O187,,
code-creation,Script,10,885358,0x1aff2178cbe,97, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/async.js:1:1,0x1aff2178508,~
script-source,179,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/async.js,export async function getAsyncValue() {\x0d\n  return Promise.resolve(42);\x0d\n}\x0d\n\x0d\nexport function debounce(func\x2C delay) {\x0d\n  let timeoutId;\x0d\n  return function () {\x0d\n    const context = this;\x0d\n    const args = arguments;\x0d\n    clearTimeout(timeoutId);\x0d\n    timeoutId = setTimeout(function () {\x0d\n      func.apply(context\x2C args);\x0d\n    }\x2C delay);\x0d\n  };\x0d\n}\x0d\n\x0d\nexport class AsyncQueue {\x0d\n  constructor() {\x0d\n    this.queue = [];\x0d\n    this.isProcessing = false;\x0d\n  }\x0d\n\x0d\n  async enqueue(task) {\x0d\n    this.queue.push(task);\x0d\n    if (this.isProcessing) return;\x0d\n    await this.processQueue();\x0d\n  }\x0d\n\x0d\n  async processQueue() {\x0d\n    if (this.queue.length === 0) {\x0d\n      this.isProcessing = false;\x0d\n      return;\x0d\n    }\x0d\n\x0d\n    this.isProcessing = true;\x0d\n    const task = this.queue.shift();\x0d\n\x0d\n    try {\x0d\n      await task();\x0d\n    } catch (error) {\x0d\n      console.error('Error executing task:'\x2C error);\x0d\n    }\x0d\n\x0d\n    // Process the next task in the queue after a short delay (e.g.\x2C 10ms).\x0d\n    // This allows other tasks to be enqueued in the meantime.\x0d\n    setTimeout(() => {\x0d\n      this.processQueue();\x0d\n    }\x2C 10);\x0d\n  }\x0d\n\x0d\n  clear() {\x0d\n    this.queue = [];\x0d\n  }\x0d\n}\x0d\n\x0d\n/* Example usage:\x0d\n *   ```js\x0d\n *   const asyncQueue = new AsyncQueue();\x0d\n *   \x0d\n *   function exampleTask(data) {\x0d\n *     return new Promise((resolve) => {\x0d\n *       setTimeout(() => {\x0d\n *         console.log(`Task completed: ${data}`);\x0d\n *         resolve();\x0d\n *       }\x2C 1000);\x0d\n *     });\x0d\n *   }\x0d\n *   \x0d\n *   // Enqueue tasks based on events\x0d\n *   asyncQueue.enqueue(() => exampleTask('Task 1'));\x0d\n *   asyncQueue.enqueue(() => exampleTask('Task 2'));\x0d\n *   \x0d\n *   // Clear the queue asynchronously after some time\x0d\n *   setTimeout(() => {\x0d\n *     asyncQueue.clear();\x0d\n *     console.log('Queue cleared');\x0d\n *   }\x2C 2000);\x0d\n *   ```\x0d\n */\x0d\n\x0d\nexport function promisify(fn) {\x0d\n  return function (...args) {\x0d\n    return new Promise((resolve\x2C reject) => {\x0d\n      fn(...args\x2C (err\x2C result) => {\x0d\n        if (err) {\x0d\n          reject(err);\x0d\n        } else {\x0d\n          resolve(result);\x0d\n        }\x0d\n      });\x0d\n    });\x0d\n  };\x0d\n}\x0d\n\x0d\nexport function sleep(ms) {\x0d\n  return new Promise(resolve => {\x0d\n    setTimeout(resolve\x2C ms);\x0d\n  });\x0d\n}\x0d\n
code-source-info,0x1aff2178cbe,179,0,2181,C10O0C28O0C48O0C91O356C96O2181,,
code-creation,Script,10,885893,0x1aff2179c46,127, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/file-cache.js:1:1,0x1aff2179338,~
script-source,180,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/file-cache.js,import fs from 'fs';\x0d\nimport { ensureDirExists\x2C parseJsonFile\x2C writeObjectToFile } from "./filesystem.js";\x0d\n\x0d\nexport default class FileCache {\x0d\n  constructor() {\x0d\n    this.checksumsByFile = new Map();\x0d\n  }\x0d\n\x0d\n  has(file) {\x0d\n    return this.checksumsByFile.has(file);\x0d\n  }\x0d\n  \x0d\n  get(file) {\x0d\n    return this.checksumsByFile.get(file);\x0d\n  }\x0d\n\x0d\n  merge(fileCache) {\x0d\n    const cache = new this.constructor();\x0d\n    const checksumEntries = Array.from(fileCache.checksumsByFile.entries());\x0d\n    cache.add(...checksumEntries);\x0d\n    return cache;\x0d\n  }\x0d\n\x0d\n  add(...checksums) {\x0d\n    for (const checksumEntry of checksums) {\x0d\n      const [file\x2C checksum] = checksumEntry;\x0d\n      if (this.checksumsByFile.has(file))\x0d\n        throw new Error(`Can't add file '${file}'\x2C the file is already registered in the cache. `);\x0d\n      this.checksumsByFile.set(file\x2C checksum);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  addCache(...caches) {\x0d\n    for (const cache of caches) {\x0d\n      const checksumEntries = Array.from(cache.checksumsByFile.entries());\x0d\n      this.add(...checksumEntries);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  loadSafely(cacheFile) {\x0d\n    ensureDirExists(cacheFile);\x0d\n    if (!fs.existsSync(cacheFile))\x0d\n      writeObjectToFile(cacheFile\x2C []);\x0d\n    this.load(cacheFile);\x0d\n  }\x0d\n\x0d\n  load(cacheFile) {\x0d\n    const cacheRaw = parseJsonFile(cacheFile);\x0d\n    cacheRaw.forEach(cacheEntry => {\x0d\n      const { checksum\x2C file } = cacheEntry;\x0d\n      if (this.checksumsByFile.has(file))\x0d\n        throw new Error(`The file '${file}' is already registered in the cache. `);\x0d\n      this.checksumsByFile.set(file\x2C checksum);\x0d\n    });\x0d\n  }\x0d\n\x0d\n  flush(outputFile) {\x0d\n    writeObjectToFile(outputFile\x2C this.flatten()\x2C true);\x0d\n  }\x0d\n\x0d\n  flatten() {\x0d\n    const checksumEntries = Array.from(this.checksumsByFile.entries());\x0d\n    const output = checksumEntries.map(([file\x2C checksum]) => {\x0d\n      return { file\x2C checksum };\x0d\n    });\x0d\n    return output.sort((a\x2C b) => a[0] - b[0]);\x0d\n  }\x0d\n\x0d\n}\x0d\n
code-source-info,0x1aff2179c46,180,0,1916,C10O0C28O0C48O0C121O125C126O1916,,
code-creation,Function,11,886987,0x246eeef90c0,3456,getSource node:internal/modules/esm/load:32:25,0x64be92abb8,^
code-source-info,0x246eeef90c0,125,1031,2123,,,
code-creation,Function,11,887068,0x246eeef9ea0,944,isAccepted node:internal/process/per_thread:284:22,0x24a76c63c00,^
code-source-info,0x246eeef9ea0,30,7922,8329,,,
code-creation,Function,11,887119,0x246eeefa2c0,240,trimLeadingDashes node:internal/process/per_thread:306:5,0x24a76c63c50,^
code-source-info,0x246eeefa2c0,30,8850,8912,,,
code-creation,Function,11,887166,0x246eeefa420,120,get node:net:1884:6,0x64be911038,^
code-source-info,0x246eeefa420,117,52855,52883,,,
code-creation,Function,11,887214,0x246eeefa500,336,getSourceMapsEnabled node:internal/source_map/source_map_cache:49:30,0x2f2f3a2b938,^
code-source-info,0x246eeefa500,103,1716,1866,,,
code-creation,Script,10,887983,0x1aff217b976,150, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-engine.js:1:1,0x1aff217aca8,~
script-source,181,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-engine.js,import handlebars from 'handlebars';\x0d\nimport { marked } from 'marked';\x0d\nimport { JSDOM } from 'jsdom';\x0d\nimport { interpolateString\x2C simplifyBytes } from './string.js';\x0d\nimport { executeModule } from './virtual-machine.js';\x0d\nimport { createHeadingTreeWithUniqueIds } from './document.js';\x0d\nimport { DataChunk } from './data-chunk.js';\x0d\n\x0d\nexport default class TemplateEngine {\x0d\n  constructor(config = {}) {\x0d\n    const defaultConfig = {\x0d\n      partials: []\x2C\x0d\n    };\x0d\n    const formattedConfig = { ...defaultConfig\x2C ...config };\x0d\n    this.handlebars = TemplateEngine.getHandlebars({\x0d\n      partials: formattedConfig.partials\x2C\x0d\n    });\x0d\n    this.layouts = null;\x0d\n  }\x0d\n\x0d\n  static getHandlebars({ partials = [] }) {\x0d\n    const myHandlebars = handlebars.create();\x0d\n    TemplateEngine.registerHelpers(myHandlebars);\x0d\n    if (partials && partials.length > 0)\x0d\n      TemplateEngine.registerPartials(myHandlebars\x2C partials);\x0d\n    return myHandlebars;\x0d\n  }\x0d\n\x0d\n  static registerHelpers(myHandlebars) {\x0d\n    myHandlebars.registerHelper('eq'\x2C function (expressionA\x2C expressionB\x2C options) {\x0d\n      return expressionA == expressionB;\x0d\n    });\x0d\n    myHandlebars.registerHelper('when'\x2C function (expression\x2C ifTrue\x2C ifFalse\x2C options) {\x0d\n      return !!expression ? ifTrue : ifFalse;\x0d\n    });\x0d\n    myHandlebars.registerHelper('obj'\x2C function (string\x2C options) {\x0d\n      return JSON.parse(string);\x0d\n    });\x0d\n    myHandlebars.registerHelper('join'\x2C function (array\x2C sep\x2C options) {\x0d\n      const separator = typeof sep === "object" ? "" : sep;\x0d\n      return array.join(separator);\x0d\n    });\x0d\n    myHandlebars.registerHelper('markdown'\x2C function (string\x2C args\x2C options) {\x0d\n      // Example: `{{{markdown 'this **awesome** text is #{nice}' args=(obj '{"nice": "good"}') }}}`\x0d\n      // Ok\x2C not quite sure how hashes work in handlebars\x2C but this is good enough for now.\x0d\n      const interpolatedString = interpolateString(string\x2C args.hash.args);\x0d\n      const html = marked(interpolatedString);\x0d\n      return new myHandlebars.SafeString(html);\x0d\n    });\x0d\n    myHandlebars.registerHelper('filesize'\x2C function (string\x2C options) {\x0d\n      return simplifyBytes(string);\x0d\n    });\x0d\n    myHandlebars.registerHelper('fallback'\x2C function (object\x2C fallback\x2C options) {\x0d\n      return object ? object : fallback;\x0d\n    });\x0d\n    myHandlebars.registerHelper('hasItems'\x2C function (array\x2C options) {\x0d\n      return Array.isArray(array) && array.length > 0;\x0d\n    });\x0d\n  }\x0d\n\x0d\n  static registerPartials(myHandlebars\x2C partials) {\x0d\n    const partialsById = new Map();\x0d\n    for (const partial of partials) {\x0d\n      const { id\x2C source\x2C template\x2C data } = partial;\x0d\n      const knownPartial = partialsById.get(id);\x0d\n      if (knownPartial) {\x0d\n        console.warn(`There already is a registered partial '${id}' (${knownPartial.source}). Skipping partial '${source}'. `);\x0d\n        continue;\x0d\n      }\x0d\n      partialsById.set(id\x2C partial);\x0d\n      myHandlebars.registerPartial(id\x2C template);\x0d\n      //TODO: Handle partial data\x0d\n    }\x0d\n  }\x0d\n\x0d\n  processSlots(html\x2C data) {\x0d\n    // Optimization so we only construct the JSDOm if we actually have slot or template tag literals.\x0d\n    if (!/<(?:slot|template)[^>]*>/.test(html))\x0d\n      return html;\x0d\n    const dom = new JSDOM(html);\x0d\n    const document = dom.window.document;\x0d\n    const { templates: slotTemplates } = data;\x0d\n    const slots = document.querySelectorAll('slot');\x0d\n    for (const slot of slots) {\x0d\n      const slotName = slot.getAttribute('name') || 'default';\x0d\n      const slotContent = TemplateEngine.unescapeTemplate(slot.innerHTML.trim());\x0d\n      // When a data chunk gets flattened and there are multiple slot templates\x2C they get consolidated into one array \x0d\n      // under "templates". This array has the corret order of the deepest slot template in the template hierarchy \x0d\n      // coming first\x2C thus guaranteeing we always have the correct template when they have the same name (e.g. "default").\x0d\n      const slotTemplate = slotTemplates ? slotTemplates.find((slotTemplate) => slotTemplate.name === slotName) : null;\x0d\n      const insertedContent = slotTemplate ? slotTemplate.content : slotContent;\x0d\n      const slotHtml = (this.handlebars.compile(insertedContent))(data);\x0d\n      const tempDiv = document.createElement('div');\x0d\n      tempDiv.innerHTML = slotHtml;\x0d\n      while (tempDiv.firstChild)\x0d\n        slot.parentNode.insertBefore(tempDiv.firstChild\x2C slot);\x0d\n      slot.remove();\x0d\n    }\x0d\n    // We don't need templates from the current template\x2C we need 'em from the template that includes this one.\x0d\n    const templates = document.querySelectorAll('template');\x0d\n    for (const template of templates)\x0d\n      template.remove();\x0d\n    const output = document.body.innerHTML;\x0d\n    // JSDOM escapes '{{> partialName }}' to '{{&gt; partialName }}' ugh.\x0d\n    return TemplateEngine.unescapeTemplate(output); \x0d\n  }\x0d\n\x0d\n  process(template\x2C data) {\x0d\n    const processedHtml = this.processSlots(template\x2C data);\x0d\n    const compiledTemplate = this.handlebars.compile(processedHtml);\x0d\n    return compiledTemplate(data);\x0d\n  }\x0d\n\x0d\n  static getSfcModel(rawSfc) {\x0d\n    const { html\x2C style\x2C script } = rawSfc;\x0d\n    const modelRegex = /export default {[\\s\\S]*model:\\s*"(.*)"[\\s\\S]*}/;\x0d\n    const match = script.match(modelRegex);\x0d\n    return match ? match[1] : null;\x0d\n  }\x0d\n\x0d\n  static getSfcLinkTitle(rawSfc) {\x0d\n    const { html\x2C style\x2C script } = rawSfc;\x0d\n    const modelRegex = /export default {[\\s\\S]*linkTitle:\\s*"(.*)"[\\s\\S]*}/;\x0d\n    const match = script.match(modelRegex);\x0d\n    return match ? match[1] : null;\x0d\n  }\x0d\n\x0d\n  /**\x0d\n   * @typedef {Object} PreparedSfc\x0d\n   * @property {string} html\x0d\n   * @property {string} style\x0d\n   * @property {string} script\x0d\n   * @property {string} layout\x0d\n   * @property {DataChunk} dataChunk\x0d\n   */\x0d\n\x0d\n  /**\x0d\n   * \x0d\n   * @param {object} options\x0d\n   * @param {string} options.html\x0d\n   * @param {string} options.style\x0d\n   * @param {string} options.script\x0d\n   * @param {DataChunk} options.dataChunk\x0d\n   * @param {string} [options.defaultLayout]\x0d\n   * @param {string} [options.dataSliceName]\x0d\n   * @returns {PreparedSfc}\x0d\n   */\x0d\n  static async prepareSfc({ html\x2C style\x2C script\x2C dataChunk\x2C dataSliceName = "module" }) {\x0d\n    // SFC = Single File Component; hbs file with top level <template>\x2C <style> and <script> tag.\x0d\n    // Step 1 -- Parse template\x2C style and script from file\x0d\n    const flattenedData = dataChunk.flatten();\x0d\n    const module = await executeModule(script\x2C flattenedData); // TODO: Provide context\x0d\n    const layout = module?.layout;\x0d\n    const newData = dataChunk.duplicate();\x0d\n    newData.addPayload(dataSliceName\x2C module);\x0d\n    const templates = TemplateEngine.getTemplatesFromHtml(html);\x0d\n    if (templates.length > 0) \x0d\n      newData.addPayload("slots"\x2C { templates });\x0d\n    return {\x0d\n      html: html\x2C\x0d\n      style: style\x2C\x0d\n      script: script\x2C\x0d\n      layout: layout\x2C\x0d\n      dataChunk: newData\x2C\x0d\n    };\x0d\n  }\x0d\n\x0d\n  static unescapeTemplate(string) {\x0d\n    return string.replaceAll("{{&gt;"\x2C "{{>")\x0d\n  }\x0d\n\x0d\n  static getTemplatesFromHtml(string\x2C data) {\x0d\n    // Optimization so we only construct the JSDOm if we actually have slot or template tag literals.\x0d\n    if (!/<template[^>]*>/.test(string))\x0d\n      return [];\x0d\n    const dom = new JSDOM(string);\x0d\n    const document = dom.window.document;\x0d\n    const templates = document.querySelectorAll('template');\x0d\n    const templateData = [];\x0d\n    for (const template of templates) {\x0d\n      const templateName = template.getAttribute('for') || 'default';\x0d\n      const templateContent = TemplateEngine.unescapeTemplate(template.innerHTML.trim());\x0d\n      //const renderedContent = (this.engine.compile(templateContent))(data);\x0d\n      //templateData.push({ name: templateName\x2C content: renderedContent });\x0d\n      templateData.push({ name: templateName\x2C content: templateContent });\x0d\n    }\x0d\n    return templateData;\x0d\n  }\x0d\n\x0d\n  static addAnchorsToHeadings(rawHtml) {\x0d\n    const dom = new JSDOM(rawHtml);\x0d\n    const document = dom.window.document;\x0d\n    const blogContainer = document.querySelector('.container-blog');\x0d\n    if (!blogContainer) return rawHtml;\x0d\n    const headingTree = createHeadingTreeWithUniqueIds(blogContainer);\x0d\n    const addAnchorToHeading = (heading) => {\x0d\n      const { type\x2C level\x2C id\x2C element\x2C children } = heading;\x0d\n      for (const child of children)\x0d\n        addAnchorToHeading(child);\x0d\n      if (type !== "heading") return;\x0d\n      if (level < 2) return;\x0d\n      const anchor = document.createElement("a");\x0d\n      anchor.classList.add("blog-heading-anchor");\x0d\n      anchor.href = "#" + id;\x0d\n      anchor.textContent = "#";\x0d\n      element.id = id;\x0d\n      element.appendChild(anchor);\x0d\n    };\x0d\n    for (const node of headingTree)\x0d\n      addAnchorToHeading(node);\x0d\n    return dom.serialize();\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x1aff217b976,181,0,8704,C10O0C28O0C48O0C144O352C149O8704,,
tick,0x7ff81324e004,899530,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x246eeef5c7f,0x246eeef3514,0x65ec1df336,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
new,MemoryChunk,0x2a8fe300000,262144
new,MemoryChunk,0xbbb0f80000,262144
new,MemoryChunk,0x1e704880000,262144
new,MemoryChunk,0x1e0ce600000,262144
new,MemoryChunk,0x3abb86c0000,262144
new,MemoryChunk,0x2a8b2540000,262144
new,MemoryChunk,0x3e7d7040000,262144
new,MemoryChunk,0x22a7ed00000,262144
scavenge,begin,0,515625,1724493771456
new,MemoryChunk,0x1a511300000,262144
new,MemoryChunk,0x381ad80000,262144
scavenge,end,0,515625,1724493771456
new,MemoryChunk,0x246eef00000,262144
code-creation,RegExp,3,914231,0x246eef03060,43064,(^|\\\\|\\/)((\\.|%2e)(\\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\\\|\\/|$)
tick,0x7ff81324e004,915453,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x246eeef5c7f,0x246eeef3514,0x246eeedaa50,0x246eeeda7d5,0x246eeef47c3,0x246eeed80b5,0x246eeee84cc,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
tick,0x7ff81324e004,942446,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x246eeeeab23,0x7ff6d6643c13
code-creation,Function,11,950852,0x246eef0d900,396, node:internal/fs/utils:689:40,0x6414ea2d18,^
code-source-info,0x246eef0d900,84,19393,19522,,,
code-creation,Function,11,950994,0x246eef0db00,3480,packageResolve node:internal/modules/esm/resolve:793:24,0x64be9060b0,^
code-source-info,0x246eef0db00,113,27061,29222,,,
tick,0x7ff81324e004,952904,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff81324e004,963539,1,0x7ff6d5caf890,6,0x7ff6d65ae370,0x24a76c5aa95,0x24a76c5a3e6,0x24a76c59248,0x65ec1f09a0,0x246eeeeab23,0x7ff6d6643c13
code-creation,LazyCompile,13,971331,0x246eef0e900,1256,C node:internal/deps/cjs-module-lexer/dist/lexer:1:1152,0x65ec1f1260,*
code-source-info,0x246eef0e900,137,1151,1215,C0O1151C48O1167C79O1188C128O1199C322O1196C401O1182C448O1188C512O1199C714O1196C743O1199C746O1182C761O1214C792O1151C846O1199C904O1182C989O1199C1088O1182,,
code-creation,LazyCompile,10,972110,0x1aff217f8a6,152,B node:internal/deps/cjs-module-lexer/dist/lexer:1:824,0x65ec1f11c0,~
code-source-info,0x1aff217f8a6,137,823,1040,C0O827C4O837C7O833C16O849C19O845C24O853C26O862C30O874C34O882C39O896C41O902C45O899C50O930C55O930C60O927C71O944C77O950C82O959C91O967C96O972C97O979C98O979C105O998C115O998C120O995C130O987C135O1015C136O1021C137O910C142O886C145O1023C147O1031C151O1039,,
code-creation,Script,10,972718,0x85f9bf94d6,118, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-loader.js:1:1,0x1aff217fd48,~
script-source,182,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/template-loader.js,import fs from 'fs';\x0d\nimport path from 'path';\x0d\nimport yaml from 'js-yaml';\x0d\nimport { marked } from 'marked';\x0d\nimport { executeModule } from './virtual-machine.js';\x0d\n\x0d\nexport default class TemplateLoader {\x0d\n  static parseSfc(string) {\x0d\n    const html = string.match(/^<template>([\\s\\S]*)^<\\/template>/m)[1].trim();\x0d\n    const style = string.match(/^<style>([\\s\\S]*)^<\\/style>/m)[1].trim();\x0d\n    const script = string.match(/^<script>([\\s\\S]*)^<\\/script>/m)[1].trim();\x0d\n    return ({ html\x2C style\x2C script });\x0d\n  }\x0d\n\x0d\n  static readSfc(filePath) {\x0d\n    const sfcSource = fs.readFileSync(filePath\x2C 'utf8');\x0d\n    return this.parseSfc(sfcSource);\x0d\n  }\x0d\n\x0d\n  static parseMarkdown(string) {\x0d\n    // We intentionally avoid `\\n` in the regex because of the `\\n` and `\\r\\n` shenanigans.\x0d\n    const match = string.match(/^---\\s*^(.*?)^---\\s*(.*)/ms);\x0d\n    const rawYaml = match ? match[1] : null;\x0d\n    const rawMarkdown = match ? match[2] : string;\x0d\n    const yamlContent = yaml.load(rawYaml);\x0d\n    const markdownContent = marked(rawMarkdown);\x0d\n    const headlineMatch = rawMarkdown.match(/^# +(.*)\\r?\\n/m);\x0d\n    const headline = headlineMatch ? headlineMatch[1].trim() : null;\x0d\n    const title = yaml?.title ?? headline;\x0d\n    return { yaml: yamlContent\x2C html: markdownContent\x2C markdown: rawMarkdown\x2C title: title };\x0d\n  }\x0d\n\x0d\n  static readMarkdown(filePath) {\x0d\n    const markdownSource = fs.readFileSync(filePath\x2C 'utf8');\x0d\n    return this.parseMarkdown(markdownSource);\x0d\n\x0d\n  }\x0d\n\x0d\n  static async readPartialsInDir(dirPath) {\x0d\n    const templateExtension = ".hbs";\x0d\n    const partials = [];\x0d\n    const files = fs.readdirSync(dirPath);\x0d\n    for (const file of files) {\x0d\n      const filePath = path.join(dirPath\x2C file);\x0d\n      const stats = fs.statSync(filePath);\x0d\n      if (stats.isDirectory()) {\x0d\n        const subPartials = await TemplateLoader.readPartialsInDir(filePath);\x0d\n        partials.push(...subPartials);\x0d\n        continue;\x0d\n      }\x0d\n      if (path.extname(filePath) !== templateExtension)\x0d\n        continue;\x0d\n      const fileContent = fs.readFileSync(filePath\x2C 'utf-8');\x0d\n      const { html\x2C style\x2C script } = TemplateLoader.parseSfc(fileContent);\x0d\n      const module = await executeModule(script\x2C {});\x0d\n      const basename = path.basename(file\x2C templateExtension);\x0d\n      partials.push({\x0d\n        id: basename\x2C\x0d\n        source: filePath\x2C\x0d\n        template: html\x2C\x0d\n        data: module\x2C\x0d\n      });\x0d\n    }\x0d\n    return partials;\x0d\n  }\x0d\n}\x0d\n
code-source-info,0x85f9bf94d6,182,0,2432,C10O0C28O0C48O0C112O183C117O2432,,
tick,0x7ff81324e004,979477,1,0x7ff6d5cabdd0,6,0x7ff6d65ae370,0x246eeef5c7f,0x246eeef3514,0x246eef0e4a1,0x246eeee3964,0x246eeee7de8,0x246eeeda405,0x246eeedb509,0x246eeede1a7,0x246eeeded34,0x7ff6d5cf67d0,0x246eeeed94d,0x7ff6d6643c13
code-creation,Script,10,988859,0x85f9bfb566,58, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/object.js:1:1,0x85f9bfb160,~
script-source,183,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/object.js,export function isUniquePropertyInObjects(arr\x2C property) {\x0d\n  const values = new Set();\x0d\n\x0d\n  for (const obj of arr) {\x0d\n    if (!obj.hasOwnProperty(property))\x0d\n      throw new Error(`Object does not have property '${property}'. `);\x0d\n    const value = obj[property];\x0d\n    if (values.has(value))\x0d\n      return false;\x0d\n    values.add(value);\x0d\n  }\x0d\n\x0d\n  return true;\x0d\n}\x0d\n\x0d\nexport function flattenObject(object\x2C replacer = null) {\x0d\n  return JSON.parse(JSON.stringify(object\x2C replacer));\x0d\n}\x0d\n\x0d\n/**\x0d\n * Deeply merges two objects.\x0d\n * @param {Object} target - The target object.\x0d\n * @param {Object} source - The source object.\x0d\n * @returns {Object} The merged object.\x0d\n */\x0d\nexport function deepMerge(target\x2C source) {\x0d\n  for (const key in source) {\x0d\n    if (!source.hasOwnProperty(key))\x0d\n      continue;\x0d\n    const sourceValue = source[key];\x0d\n    const targetValue = target[key];\x0d\n    if (Array.isArray(sourceValue) && Array.isArray(targetValue)) {\x0d\n      target[key] = [...targetValue\x2C ...sourceValue];\x0d\n      continue;\x0d\n    }\x0d\n    if (sourceValue instanceof Object && targetValue instanceof Object) {\x0d\n      target[key] = deepMerge({ ...targetValue }\x2C sourceValue);\x0d\n      continue;\x0d\n    }\x0d\n    target[key] = sourceValue;\x0d\n  }\x0d\n  return target;\x0d\n}\x0d\n\x0d\nexport function deepMergeSafely(target\x2C source\x2C replacer = null) {\x0d\n  // Returns a new object (good!)\x0d\n  return deepMerge(flattenObject(target\x2C replacer)\x2C flattenObject(source\x2C replacer));\x0d\n}\x0d\n
code-source-info,0x85f9bfb566,183,0,1436,C10O0C28O0C48O0C57O1436,,
code-creation,Script,10,989290,0x85f9bfbc7e,63, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/virtual-machine.js:1:1,0x85f9bfb928,~
script-source,184,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/virtual-machine.js,import vm\x2C { SourceTextModule } from 'vm';\x0d\n\x0d\nexport async function executeModule(code\x2C context = {}) {\x0d\n  context.console = console; // Make logging available in the output console.\x0d\n  const moduleContext = vm.createContext(context);\x0d\n  const module = new SourceTextModule(code\x2C { context: moduleContext  });\x0d\n  await module.link(() => { });\x0d\n  await module.evaluate();\x0d\n  return module.namespace.default;\x0d\n}\x0d\n\x0d\nasync function runTest() {\x0d\n  const moduleCode = `\x0d\n    someObject.fruit.banana += 12;\x0d\n    export default {\x0d\n      hello: 'world'\x2C\x0d\n      answer: 21 * 2\x2C\x0d\n      soup: bobo * 21\x2C\x0d\n      banana: someObject.fruit.banana\x2C\x0d\n    }\x0d\n  `;\x0d\n  const someObject = {\x0d\n    fruit: { banana: 24 }\x2C\x0d\n  }\x0d\n  const module = new SourceTextModule(moduleCode\x2C\x0d\n    { context: vm.createContext({ bobo: 9\x2C someObject }) }\x0d\n  );\x0d\n  await module.link(() => { });\x0d\n  await module.evaluate();\x0d\n  console.log(module.namespace.default)\x0d\n  console.log(someObject.fruit.banana)\x0d\n}\x0d\n
code-source-info,0x85f9bfbc7e,184,0,965,C10O0C33O0C53O0C62O965,,
code-creation,Script,10,990149,0x85f9bfc85e,64, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/document.js:1:1,0x85f9bfc420,~
script-source,185,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/lib/document.js,import { isUniquePropertyInObjects } from "./object.js";\x0d\nimport { getPathSafeName } from "./string.js";\x0d\n\x0d\n/*\x0d\n * Example for faulty heading tree:\x0d\n * (double heading 1; missing H3 at "H2 Instructions")\x0d\n *   H1 Krank\x0d\n *   H1 Chocolate Cream Cake\x0d\n *     H2 Ingredients\x0d\n *       H3 Chocolate cream\x0d\n *       H3 Sponge base\x0d\n *     H2 Instructions\x0d\n *         H4 Chocolate cream\x0d\n *       H3 Sponge base\x0d\n *       H3 Putting it together\x0d\n */\x0d\n\x0d\nexport function createHeadingTree(element) {\x0d\n  var headings = element.querySelectorAll('h1\x2C h2\x2C h3\x2C h4\x2C h5\x2C h6');\x0d\n  var headingTree = [];\x0d\n\x0d\n  for (const heading of headings) {\x0d\n    const level = parseInt(heading.tagName.charAt(1)\x2C 10);\x0d\n    let currentLevel = headingTree;\x0d\n    const lastInCurrentLevel = () => currentLevel[currentLevel.length - 1];\x0d\n\x0d\n    for (var i = 1; i < level; i++) {\x0d\n      if (!lastInCurrentLevel())\x0d\n        currentLevel.push({\x0d\n          type: "substitute"\x2C\x0d\n          level: i\x2C\x0d\n          children: []\x2C\x0d\n        });\x0d\n      if (!lastInCurrentLevel().children)\x0d\n        lastInCurrentLevel().children = [];\x0d\n      currentLevel = lastInCurrentLevel().children;\x0d\n    }\x0d\n\x0d\n    currentLevel.push({\x0d\n      type: "heading"\x2C\x0d\n      level: level\x2C\x0d\n      text: heading.textContent\x2C\x0d\n      id: heading.id\x2C\x0d\n      element: heading\x2C\x0d\n    });\x0d\n  }\x0d\n\x0d\n  return headingTree;\x0d\n}\x0d\n\x0d\nfunction getAnchorId(string) {\x0d\n  return getPathSafeName(string)\x0d\n  .replace(/&/g\x2C "and")\x0d\n  .replace(/["'\x2C.;:\\/\\\\]/g\x2C "");\x0d\n}\x0d\n\x0d\nexport function createHeadingTreeWithUniqueIds(element) {\x0d\n  const headingTree = createHeadingTree(element);\x0d\n  const headingsById = new Map();\x0d\n  const traverseHeading = (heading\x2C parent = null) => {\x0d\n    const { type\x2C level\x2C element: headingElement\x2C id: rawId\x2C text: rawText\x2C children } = heading;\x0d\n    const text = rawText ?? '';\x0d\n    const id = !rawId || rawId.length === 0 ? getAnchorId(text) : rawId;\x0d\n    const newHeading = {\x0d\n      type\x2C\x0d\n      level\x2C\x0d\n      element: headingElement ?? null\x2C\x0d\n      id: id ?? ''\x2C\x0d\n      text: text ?? ''\x2C\x0d\n      parent\x2C // causes circular reference\x2C but useful to go from leaf to root\x0d\n      children: []\x2C\x0d\n    };\x0d\n    const newChildren = children ? children.map(child => traverseHeading(child\x2C newHeading)) : [];\x0d\n    newHeading.children.push(...newChildren);\x0d\n    if (headingsById.has(id))\x0d\n      headingsById.get(id).push(newHeading);\x0d\n    else\x0d\n      headingsById.set(id\x2C [newHeading]);\x0d\n    return newHeading;\x0d\n  }\x0d\n  const headingTreeWithIds = headingTree.map(heading => traverseHeading(heading));\x0d\n\x0d\n  // Make IDs unique\x0d\n  for (const [headingId\x2C headings] of headingsById.entries()) {\x0d\n    if (headings.length === 1) continue;\x0d\n    const duplicates = headings.map(heading => { \x0d\n      return { \x0d\n        heading\x2C \x0d\n        currentId: heading.id\x2C\x0d\n        currentHeading: heading\x2C \x0d\n      };\x0d\n    });\x0d\n    const maxIterations = 1000;\x0d\n    let safetyCounter = 0;\x0d\n    while (!isUniquePropertyInObjects(duplicates\x2C "currentId")) {\x0d\n      if (safetyCounter >= maxIterations)\x0d\n        throw new Error(`Exceeded max depth for headings depth. `);\x0d\n      if (duplicates.every(duplicate => duplicate.currentHeading === null)) {\x0d\n        // We could not find unique ids by going up each headings ancestors\x2C abort.\x0d\n        // In theory\x2C this means there are multiple headings\x2C which have same text AND are siblings.\x0d\n        // In this case\x2C we will not provide any other help\x2C because this is duplicate headings.\x0d\n        break;\x0d\n      }\x0d\n      duplicates.forEach(duplicate => {\x0d\n        duplicate.currentHeading = duplicate.heading.parent\x0d\n        if (duplicate.currentHeading) \x0d\n          duplicate.currentId = duplicate.currentHeading.id + "-" + duplicate.currentId; \x0d\n      });\x0d\n      safetyCounter++;\x0d\n    }\x0d\n    duplicates.forEach(duplicate => duplicate.heading.id = duplicate.currentId);\x0d\n  }\x0d\n\x0d\n  // Return tree\x0d\n  return headingTreeWithIds;\x0d\n}\x0d\n
code-source-info,0x85f9bfc85e,185,0,3865,C10O0C34O0C54O0C63O3865,,
tick,0x7ff6d63ded1c,994469,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
code-creation,Script,10,994906,0x381ad868fe,6418, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:1:1,0x381ad81fd8,~
script-source,186,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js,/**\n * marked v9.0.3 - a markdown parser\n * Copyright (c) 2011-2023\x2C Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false\x2C\n        breaks: false\x2C\n        extensions: null\x2C\n        gfm: true\x2C\n        hooks: null\x2C\n        pedantic: false\x2C\n        renderer: null\x2C\n        silent: false\x2C\n        tokenizer: null\x2C\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>"']/;\nconst escapeReplace = new RegExp(escapeTest.source\x2C 'g');\nconst escapeTestNoEncode = /[<>"']|&(?!(#\\d{1\x2C7}|#[Xx][a-fA-F0-9]{1\x2C6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source\x2C 'g');\nconst escapeReplacements = {\n    '&': '&amp;'\x2C\n    '<': '&lt;'\x2C\n    '>': '&gt;'\x2C\n    '"': '&quot;'\x2C\n    "'": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html\x2C encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace\x2C getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode\x2C getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal\x2C hex\x2C and named HTML entities\n    return html.replace(unescapeTest\x2C (_\x2C n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2)\x2C 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex\x2C opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name\x2C val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret\x2C '$1');\n            regex = regex.replace(name\x2C val);\n            return obj;\n        }\x2C\n        getRegex: () => {\n            return new RegExp(regex\x2C opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g\x2C '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow\x2C count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g\x2C (match\x2C offset\x2C str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    })\x2C cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g\x2C '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/\x2C '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str\x2C c\x2C invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0\x2C l - suffLen);\n}\nfunction findClosingBracket(str\x2C b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap\x2C link\x2C raw\x2C lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g\x2C '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link'\x2C\n            raw\x2C\n            href\x2C\n            title\x2C\n            text\x2C\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image'\x2C\n        raw\x2C\n        href\x2C\n        title\x2C\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw\x2C text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space'\x2C\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1\x2C4}/gm\x2C '');\n            return {\n                type: 'code'\x2C\n                raw: cap[0]\x2C\n                codeBlockStyle: 'indented'\x2C\n                text: !this.options.pedantic\n                    ? rtrim(text\x2C '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw\x2C cap[3] || '');\n            return {\n                type: 'code'\x2C\n                raw\x2C\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes\x2C '$1') : cap[2]\x2C\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text\x2C '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading'\x2C\n                raw: cap[0]\x2C\n                depth: cap[1].length\x2C\n                text\x2C\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr'\x2C\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm\x2C '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote'\x2C\n                raw: cap[0]\x2C\n                tokens\x2C\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list'\x2C\n                raw: ''\x2C\n                ordered: isordered\x2C\n                start: isordered ? +bull.slice(0\x2C -1) : ''\x2C\n                loose: false\x2C\n                items: []\n            };\n            bull = isordered ? `\\\\d{1\x2C9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0\x2C3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n'\x2C 1)[0].replace(/^\\t+/\x2C (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n'\x2C 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0\x2C${Math.min(3\x2C indent - 1)}}(?:[*+-]|\\\\d{1\x2C9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0\x2C${Math.min(3\x2C indent - 1)}}((?:- *){3\x2C}|(?:_ *){3\x2C}|(?:\\\\* *){3\x2C})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0\x2C${Math.min(3\x2C indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0\x2C${Math.min(3\x2C indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n'\x2C 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1\x2C4}(?=( {4})*[^ ])/g\x2C '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line\x2C the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/\x2C '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item'\x2C\n                    raw\x2C\n                    task: !!istask\x2C\n                    checked: ischecked\x2C\n                    loose: false\x2C\n                    text: itemContents\x2C\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively\x2C make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text\x2C []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html'\x2C\n                block: true\x2C\n                raw: cap[0]\x2C\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'\x2C\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g\x2C ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/\x2C '$1').replace(this.rules.inline._escapes\x2C '$1') : '';\n            const title = cap[3] ? cap[3].substring(1\x2C cap[3].length - 1).replace(this.rules.inline._escapes\x2C '$1') : cap[3];\n            return {\n                type: 'def'\x2C\n                tag\x2C\n                raw: cap[0]\x2C\n                href\x2C\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table'\x2C\n                raw: cap[0]\x2C\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c\x2C tokens: [] };\n                })\x2C\n                align: cap[2].replace(/^\\||\\| *$/g\x2C '').split('|')\x2C\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/\x2C '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i\x2C j\x2C k\x2C row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i]\x2C item.header.length).map(c => {\n                        return { text: c\x2C tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading'\x2C\n                raw: cap[0]\x2C\n                depth: cap[2].charAt(0) === '=' ? 1 : 2\x2C\n                text: cap[1]\x2C\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0\x2C -1)\n                : cap[1];\n            return {\n                type: 'paragraph'\x2C\n                raw: cap[0]\x2C\n                text\x2C\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text'\x2C\n                raw: cap[0]\x2C\n                text: cap[0]\x2C\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape'\x2C\n                raw: cap[0]\x2C\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html'\x2C\n                raw: cap[0]\x2C\n                inLink: this.lexer.state.inLink\x2C\n                inRawBlock: this.lexer.state.inRawBlock\x2C\n                block: false\x2C\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0\x2C -1)\x2C '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2]\x2C '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0\x2C lastParenIndex);\n                    cap[0] = cap[0].substring(0\x2C linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'"]*[^\\s])\\s+(['"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1\x2C -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1\x2C -1);\n                }\n            }\n            return outputLink(cap\x2C {\n                href: href ? href.replace(this.rules.inline._escapes\x2C '$1') : href\x2C\n                title: title ? title.replace(this.rules.inline._escapes\x2C '$1') : title\n            }\x2C cap[0]\x2C this.lexer);\n        }\n    }\n    reflink(src\x2C links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g\x2C ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text'\x2C\n                    raw: text\x2C\n                    text\n                };\n            }\n            return outputLink(cap\x2C link\x2C cap[0]\x2C this.lexer);\n        }\n    }\n    emStrong(src\x2C maskedSrc\x2C prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim\x2C rLength\x2C delimTotal = lLength\x2C midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength\x2C rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0\x2C lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength\x2C rLength) % 2) {\n                    const text = raw.slice(1\x2C -1);\n                    return {\n                        type: 'em'\x2C\n                        raw\x2C\n                        text\x2C\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2\x2C -2);\n                return {\n                    type: 'strong'\x2C\n                    raw\x2C\n                    text\x2C\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g\x2C ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1\x2C text.length - 1);\n            }\n            text = escape(text\x2C true);\n            return {\n                type: 'codespan'\x2C\n                raw: cap[0]\x2C\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br'\x2C\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del'\x2C\n                raw: cap[0]\x2C\n                text: cap[2]\x2C\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text\x2C href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link'\x2C\n                raw: cap[0]\x2C\n                text\x2C\n                href\x2C\n                tokens: [\n                    {\n                        type: 'text'\x2C\n                        raw: text\x2C\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text\x2C href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link'\x2C\n                raw: cap[0]\x2C\n                text\x2C\n                href\x2C\n                tokens: [\n                    {\n                        type: 'text'\x2C\n                        raw: text\x2C\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text'\x2C\n                raw: cap[0]\x2C\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/\x2C\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/\x2C\n    fences: /^ {0\x2C3}(`{3\x2C}(?=[^`\\n]*(?:\\n|$))|~{3\x2C})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0\x2C3}\\1[~`]* *(?=\\n|$)|$)/\x2C\n    hr: /^ {0\x2C3}((?:-[\\t ]*){3\x2C}|(?:_[ \\t]*){3\x2C}|(?:\\*[ \\t]*){3\x2C})(?:\\n+|$)/\x2C\n    heading: /^ {0\x2C3}(#{1\x2C6})(?=\\s|$)(.*)(?:\\n+|$)/\x2C\n    blockquote: /^( {0\x2C3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/\x2C\n    list: /^( {0\x2C3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/\x2C\n    html: '^ {0\x2C3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')'\x2C\n    def: /^ {0\x2C3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/\x2C\n    table: noopTest\x2C\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0\x2C3}(=+|-+) *(?:\\n+|$)/\x2C\n    // regex template\x2C placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/\x2C\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:"(?:\\\\"?|[^"\\\\])*"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label'\x2C block._label)\n    .replace('title'\x2C block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1\x2C9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull'\x2C block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g\x2C block.bullet)\n    .replace('hr'\x2C '\\\\n+(?=\\\\1?(?:(?:- *){3\x2C}|(?:_ *){3\x2C}|(?:\\\\* *){3\x2C})(?:\\\\n+|$))')\n    .replace('def'\x2C '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html\x2C 'i')\n    .replace('comment'\x2C block._comment)\n    .replace('tag'\x2C block._tag)\n    .replace('attribute'\x2C / +[a-zA-Z:_][\\w.:-]*(?: *= *"[^"\\n]*"| *= *'[^'\\n]*'| *= *[^\\s"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g\x2C block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr'\x2C block.hr)\n    .replace('heading'\x2C ' {0\x2C3}#{1\x2C6} ')\n    .replace('|lheading'\x2C '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table'\x2C '')\n    .replace('blockquote'\x2C ' {0\x2C3}>')\n    .replace('fences'\x2C ' {0\x2C3}(?:`{3\x2C}(?=[^`\\\\n]*\\\\n)|~{3\x2C})[^\\\\n]*\\\\n')\n    .replace('list'\x2C ' {0\x2C3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html'\x2C '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag'\x2C block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph'\x2C block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal\x2C\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0\x2C3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr'\x2C block.hr)\n    .replace('heading'\x2C ' {0\x2C3}#{1\x2C6} ')\n    .replace('blockquote'\x2C ' {0\x2C3}>')\n    .replace('code'\x2C ' {4}[^\\\\n]')\n    .replace('fences'\x2C ' {0\x2C3}(?:`{3\x2C}(?=[^`\\\\n]*\\\\n)|~{3\x2C})[^\\\\n]*\\\\n')\n    .replace('list'\x2C ' {0\x2C3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html'\x2C '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag'\x2C block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr'\x2C block.hr)\n    .replace('heading'\x2C ' {0\x2C3}#{1\x2C6} ')\n    .replace('|lheading'\x2C '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table'\x2C block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote'\x2C ' {0\x2C3}>')\n    .replace('fences'\x2C ' {0\x2C3}(?:`{3\x2C}(?=[^`\\\\n]*\\\\n)|~{3\x2C})[^\\\\n]*\\\\n')\n    .replace('list'\x2C ' {0\x2C3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html'\x2C '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag'\x2C block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal\x2C\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2\x2C}|\\\\s*$)' // closed tag\n        + '|<tag(?:"[^"]*"|\\'[^\\']*\\'|\\\\s[^\\'"/>\\\\s]*)*?/?> *(?:\\\\n{2\x2C}|\\\\s*$))')\n        .replace('comment'\x2C block._comment)\n        .replace(/tag/g\x2C '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex()\x2C\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +(["(][^\\n]+[")]))? *(?:\\n+|$)/\x2C\n    heading: /^(#{1\x2C6})(.*)(?:\\n+|$)/\x2C\n    fences: noopTest\x2C\n    lheading: /^(.+?)\\n {0\x2C3}(=+|-+) *(?:\\n+|$)/\x2C\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr'\x2C block.hr)\n        .replace('heading'\x2C ' *#{1\x2C6} *[^\\n]')\n        .replace('lheading'\x2C block.lheading)\n        .replace('blockquote'\x2C ' {0\x2C3}>')\n        .replace('|fences'\x2C '')\n        .replace('|list'\x2C '')\n        .replace('|html'\x2C '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!"#$%&'()*+\x2C\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/\x2C\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/\x2C\n    url: noopTest\x2C\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction\x2C e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration\x2C e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'\x2C\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/\x2C\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/\x2C\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/\x2C\n    reflinkSearch: 'reflink|nolink(?!\\\\()'\x2C\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/\x2C\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#\x2C a***                    | (3) #***a\x2C ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/\x2C\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    }\x2C\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/\x2C\n    br: /^( {2\x2C}|\\\\)\\n(?!\\s*$)/\x2C\n    del: noopTest\x2C\n    text: /^(`+|[^`])(?:(?= {2\x2C}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2\x2C}\\n)))/\x2C\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks\x2C plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation\x2C 'u').replace(/punctuation/g\x2C inline._punctuation).getRegex();\n// sequences em should skip over [title](link)\x2C `code`\x2C <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)'\x2C '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim\x2C 'u')\n    .replace(/punct/g\x2C inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst\x2C 'gu')\n    .replace(/punct/g\x2C inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd\x2C 'gu')\n    .replace(/punct/g\x2C inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation\x2C 'gu')\n    .replace(/punct/g\x2C inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes\x2C 'gu')\n    .replace(/punct/g\x2C inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1\x2C31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0\x2C61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0\x2C61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme'\x2C inline._scheme)\n    .replace('email'\x2C inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*"[^"]*"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment'\x2C inline._comment)\n    .replace('attribute'\x2C inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /"(?:\\\\"?|[^"\\\\])*"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label'\x2C inline._label)\n    .replace('href'\x2C inline._href)\n    .replace('title'\x2C inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label'\x2C inline._label)\n    .replace('ref'\x2C block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref'\x2C block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch\x2C 'g')\n    .replace('reflink'\x2C inline.reflink)\n    .replace('nolink'\x2C inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal\x2C\n    strong: {\n        start: /^__|\\*\\*/\x2C\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/\x2C\n        endAst: /\\*\\*(?!\\*)/g\x2C\n        endUnd: /__(?!_)/g\n    }\x2C\n    em: {\n        start: /^_|\\*/\x2C\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/\x2C\n        endAst: /\\*(?!\\*)/g\x2C\n        endUnd: /_(?!_)/g\n    }\x2C\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label'\x2C inline._label)\n        .getRegex()\x2C\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label'\x2C inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal\x2C\n    escape: edit(inline.escape).replace('])'\x2C '~|])').getRegex()\x2C\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/\x2C\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/\x2C\n    _backpedal: /(?:[^?!.\x2C:;*_'"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.\x2C:;*_'"~)]+(?!$))+/\x2C\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/\x2C\n    text: /^([`~]+|[^`~])(?:(?= {2\x2C}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2\x2C}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url\x2C 'i')\n    .replace('email'\x2C inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm\x2C\n    br: edit(inline.br).replace('{2\x2C}'\x2C '*').getRegex()\x2C\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_'\x2C '\\\\b_| {2\x2C}\\\\n')\n        .replace(/\\{2\x2C\\}/g\x2C '*')\n        .getRegex()\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false\x2C\n            inRawBlock: false\x2C\n            top: true\n        };\n        const rules = {\n            block: block.normal\x2C\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block\x2C\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src\x2C options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src\x2C options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g\x2C '\\n');\n        this.blockTokens(src\x2C this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src\x2C next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src\x2C tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g\x2C '    ').replace(/^ +$/gm\x2C '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm\x2C (_\x2C leading\x2C tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }\x2C src\x2C tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer\x2C it's terminating the last line\x2C\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href\x2C\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }\x2C tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex\x2C tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0\x2C startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src\x2C tokens = []) {\n        this.inlineQueue.push({ src\x2C tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src\x2C tokens = []) {\n        let token\x2C lastToken\x2C cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar\x2C prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1\x2C -1))) {\n                        maskedSrc = maskedSrc.slice(0\x2C match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0\x2C match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0\x2C match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }\x2C src\x2C tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink\x2C nolink\n            if (token = this.tokenizer.reflink(src\x2C this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src\x2C maskedSrc\x2C prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }\x2C tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex\x2C tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0\x2C startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code\x2C infostring\x2C escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/\x2C '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code\x2C true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class="language-'\n            + escape(lang)\n            + '">'\n            + (escaped ? code : escape(code\x2C true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html\x2C block) {\n        return html;\n    }\n    heading(text\x2C level\x2C raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body\x2C ordered\x2C start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text\x2C task\x2C checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked="" ' : '')\n            + 'disabled="" type="checkbox">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header\x2C body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content\x2C flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align="${flags.align}">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href\x2C title\x2C text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href="' + href + '"';\n        if (title) {\n            out += ' title="' + title + '"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href\x2C title\x2C text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src="${href}" alt="${text}"`;\n        if (title) {\n            out += ` title="${title}"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href\x2C title\x2C text) {\n        return '' + text;\n    }\n    image(href\x2C title\x2C text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens\x2C options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens\x2C options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens\x2C top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }\x2C genericToken);\n                if (ret !== false || !['space'\x2C 'hr'\x2C 'heading'\x2C 'code'\x2C 'table'\x2C 'blockquote'\x2C 'list'\x2C 'html'\x2C 'paragraph'\x2C 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens)\x2C headingToken.depth\x2C unescape(this.parseInline(headingToken.tokens\x2C this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text\x2C codeToken.lang\x2C !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens)\x2C { header: true\x2C align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens)\x2C { header: false\x2C align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header\x2C body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text'\x2C\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens\x2C loose);\n                        body += this.renderer.listitem(itemBody\x2C task\x2C !!checked);\n                    }\n                    out += this.renderer.list(body\x2C ordered\x2C start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text\x2C htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with "' + token.type + '" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens\x2C renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }\x2C token);\n                if (ret !== false || !['escape'\x2C 'html'\x2C 'link'\x2C 'image'\x2C 'strong'\x2C 'em'\x2C 'codespan'\x2C 'br'\x2C 'del'\x2C 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href\x2C linkToken.title\x2C this.parseInline(linkToken.tokens\x2C renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href\x2C imageToken.title\x2C imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens\x2C renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens\x2C renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens\x2C renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with "' + token.type + '" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess'\x2C\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex\x2C _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline\x2C _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens\x2C callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this\x2C token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens\x2C callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens\x2C callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items\x2C callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens]\x2C callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens\x2C callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}\x2C childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse "addon" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this\x2C args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this\x2C args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error("extension level must be 'block' or 'inline'");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse "overwrite" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension\x2C but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer\x2C args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer\x2C args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension\x2C but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer\x2C args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer\x2C args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks\x2C arg)).then(ret => {\n                                    return prevHook.call(hooks\x2C ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks\x2C arg);\n                            return prevHook.call(hooks\x2C ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks\x2C args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks\x2C args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this\x2C token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this\x2C token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults\x2C ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults\x2C ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer\x2C parser) {\n        return (src\x2C options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults\x2C ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent\x2C !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + '\x2C string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src\x2C opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens\x2C opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens\x2C opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src\x2C opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens\x2C opt.walkTokens);\n                }\n                let html = parser(tokens\x2C opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent\x2C async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + ''\x2C true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src\x2C opt) {\n    return markedInstance.parse(src\x2C opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens\x2C callback) {\n    return markedInstance.walkTokens(tokens\x2C callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks\x2C _Lexer as Lexer\x2C Marked\x2C _Parser as Parser\x2C _Renderer as Renderer\x2C _TextRenderer as TextRenderer\x2C _Tokenizer as Tokenizer\x2C _defaults as defaults\x2C _getDefaults as getDefaults\x2C lexer\x2C marked\x2C options\x2C parse\x2C parseInline\x2C parser\x2C setOptions\x2C use\x2C walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n
code-source-info,0x381ad868fe
code-creation,Function,10,1001201,0x381ad88b5e,259,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:2046:5,0x381ad84980,~
code-source-info,0x381ad88b5e,186,74935,75331,C3O74946C7O74946C21O74981C22O74981C37O75024C40O75010C46O75025C52O75032C57O75037C63O75045C71O75024C87O75090C90O75076C96O75091C102O75098C107O75109C113O75117C121O75090C138O75144C152O75174C158O75174C171O75196C185O75226C199O75253C213O75280C219O75280C232O75301C246O75325C258O75331,,
code-creation,Function,10,1001286,0x381ad88d76,30,<static_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:2027:5,0x381ad84708,~
code-source-info,0x381ad88d76,186,74601,74687,C3O74627C14O74627C29O74687,,
code-creation,Function,10,1001337,0x381ad88e1e,15,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:2023:5,0x381ad846d0,~
code-source-info,0x381ad88e1e,186,74510,74517,C8O74510C14O74517,,
code-creation,Function,10,1001378,0x381ad88ea6,35,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:1784:5,0x381ad845a8,~
code-source-info,0x381ad88ea6,186,64302,64341,C8O64302C34O64341,,
code-creation,Function,10,1001419,0x381ad88f3e,15,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:1629:5,0x381ad840c0,~
code-source-info,0x381ad88f3e,186,60671,60678,C8O60671C14O60678,,
code-creation,Function,10,1001460,0x381ad88fd6,55,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:1197:5,0x381ad839f8,~
code-source-info,0x381ad88fd6,186,44541,44603,C8O44541C54O44603,,
code-creation,Function,10,1001501,0x381ad8908e,35,<instance_members_initializer> file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/marked/lib/marked.esm.js:247:5,0x381ad83720,~
code-source-info,0x381ad8908e,186,6448,6510,C8O6448C34O6510,,
new,MemoryChunk,0x5547f00000,2043904
tick,0x7ff6d6b8d5f4,1010632,1,0x7ff6d5cf6d60,2,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff6d62330e7,1025431,1,0x7ff6d5cf6d60,2,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
new,MemoryChunk,0xd55be40000,262144
new,MemoryChunk,0x511bfc0000,225280
code-creation,Script,10,1037831,0xd55be4c95e,63959, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:1:1,0x381adb6c50,~
script-source,187,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js,/*\n  @license\n\x09Rollup.js v3.28.1\n\x09Tue\x2C 22 Aug 2023 05:30:38 GMT - commit 1b557cd77cce8560cf073875cf6bc289bbe5f09c\n\n\x09https://github.com/rollup/rollup\n\n\x09Released under the MIT License.\n*/\nimport { resolve\x2C basename\x2C extname\x2C dirname\x2C relative as relative$1 } from 'node:path';\nimport require$$0$1\x2C { win32\x2C posix\x2C isAbsolute as isAbsolute$1\x2C resolve as resolve$1 } from 'path';\nimport process$1\x2C { env as env$1 } from 'node:process';\nimport { performance } from 'node:perf_hooks';\nimport { createHash as createHash$1 } from 'node:crypto';\nimport { lstat\x2C realpath\x2C readdir\x2C readFile\x2C mkdir\x2C writeFile } from 'node:fs/promises';\nimport * as tty from 'tty';\n\nvar version$1 = "3.28.1";\n\nconst comma = '\x2C'.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInt = new Uint8Array(128); // z is 122 in ASCII\nfor (let i = 0; i < chars$1.length; i++) {\n    const c = chars$1.charCodeAt(i);\n    intToChar[i] = c;\n    charToInt[c] = i;\n}\n// Provide a fallback for older environments.\nconst td = typeof TextDecoder !== 'undefined'\n    ? /* #__PURE__ */ new TextDecoder()\n    : typeof Buffer !== 'undefined'\n        ? {\n            decode(buf) {\n                const out = Buffer.from(buf.buffer\x2C buf.byteOffset\x2C buf.byteLength);\n                return out.toString();\n            }\x2C\n        }\n        : {\n            decode(buf) {\n                let out = '';\n                for (let i = 0; i < buf.length; i++) {\n                    out += String.fromCharCode(buf[i]);\n                }\n                return out;\n            }\x2C\n        };\nfunction decode(mappings) {\n    const state = new Int32Array(5);\n    const decoded = [];\n    let index = 0;\n    do {\n        const semi = indexOf(mappings\x2C index);\n        const line = [];\n        let sorted = true;\n        let lastCol = 0;\n        state[0] = 0;\n        for (let i = index; i < semi; i++) {\n            let seg;\n            i = decodeInteger(mappings\x2C i\x2C state\x2C 0); // genColumn\n            const col = state[0];\n            if (col < lastCol)\n                sorted = false;\n            lastCol = col;\n            if (hasMoreVlq(mappings\x2C i\x2C semi)) {\n                i = decodeInteger(mappings\x2C i\x2C state\x2C 1); // sourcesIndex\n                i = decodeInteger(mappings\x2C i\x2C state\x2C 2); // sourceLine\n                i = decodeInteger(mappings\x2C i\x2C state\x2C 3); // sourceColumn\n                if (hasMoreVlq(mappings\x2C i\x2C semi)) {\n                    i = decodeInteger(mappings\x2C i\x2C state\x2C 4); // namesIndex\n                    seg = [col\x2C state[1]\x2C state[2]\x2C state[3]\x2C state[4]];\n                }\n                else {\n                    seg = [col\x2C state[1]\x2C state[2]\x2C state[3]];\n                }\n            }\n            else {\n                seg = [col];\n            }\n            line.push(seg);\n        }\n        if (!sorted)\n            sort(line);\n        decoded.push(line);\n        index = semi + 1;\n    } while (index <= mappings.length);\n    return decoded;\n}\nfunction indexOf(mappings\x2C index) {\n    const idx = mappings.indexOf(';'\x2C index);\n    return idx === -1 ? mappings.length : idx;\n}\nfunction decodeInteger(mappings\x2C pos\x2C state\x2C j) {\n    let value = 0;\n    let shift = 0;\n    let integer = 0;\n    do {\n        const c = mappings.charCodeAt(pos++);\n        integer = charToInt[c];\n        value |= (integer & 31) << shift;\n        shift += 5;\n    } while (integer & 32);\n    const shouldNegate = value & 1;\n    value >>>= 1;\n    if (shouldNegate) {\n        value = -0x80000000 | -value;\n    }\n    state[j] += value;\n    return pos;\n}\nfunction hasMoreVlq(mappings\x2C i\x2C length) {\n    if (i >= length)\n        return false;\n    return mappings.charCodeAt(i) !== comma;\n}\nfunction sort(line) {\n    line.sort(sortComparator);\n}\nfunction sortComparator(a\x2C b) {\n    return a[0] - b[0];\n}\nfunction encode(decoded) {\n    const state = new Int32Array(5);\n    const bufLength = 1024 * 16;\n    const subLength = bufLength - 36;\n    const buf = new Uint8Array(bufLength);\n    const sub = buf.subarray(0\x2C subLength);\n    let pos = 0;\n    let out = '';\n    for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        if (i > 0) {\n            if (pos === bufLength) {\n                out += td.decode(buf);\n                pos = 0;\n            }\n            buf[pos++] = semicolon;\n        }\n        if (line.length === 0)\n            continue;\n        state[0] = 0;\n        for (let j = 0; j < line.length; j++) {\n            const segment = line[j];\n            // We can push up to 5 ints\x2C each int can take at most 7 chars\x2C and we\n            // may push a comma.\n            if (pos > subLength) {\n                out += td.decode(sub);\n                buf.copyWithin(0\x2C subLength\x2C pos);\n                pos -= subLength;\n            }\n            if (j > 0)\n                buf[pos++] = comma;\n            pos = encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C 0); // genColumn\n            if (segment.length === 1)\n                continue;\n            pos = encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C 1); // sourcesIndex\n            pos = encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C 2); // sourceLine\n            pos = encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C 3); // sourceColumn\n            if (segment.length === 4)\n                continue;\n            pos = encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C 4); // namesIndex\n        }\n    }\n    return out + td.decode(buf.subarray(0\x2C pos));\n}\nfunction encodeInteger(buf\x2C pos\x2C state\x2C segment\x2C j) {\n    const next = segment[j];\n    let num = next - state[j];\n    state[j] = next;\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        let clamped = num & 0b011111;\n        num >>>= 5;\n        if (num > 0)\n            clamped |= 0b100000;\n        buf[pos++] = intToChar[clamped];\n    } while (num > 0);\n    return pos;\n}\n\nclass BitSet {\n\x09constructor(arg) {\n\x09\x09this.bits = arg instanceof BitSet ? arg.bits.slice() : [];\n\x09}\n\n\x09add(n) {\n\x09\x09this.bits[n >> 5] |= 1 << (n & 31);\n\x09}\n\n\x09has(n) {\n\x09\x09return !!(this.bits[n >> 5] & (1 << (n & 31)));\n\x09}\n}\n\nlet Chunk$1 = class Chunk {\n\x09constructor(start\x2C end\x2C content) {\n\x09\x09this.start = start;\n\x09\x09this.end = end;\n\x09\x09this.original = content;\n\n\x09\x09this.intro = '';\n\x09\x09this.outro = '';\n\n\x09\x09this.content = content;\n\x09\x09this.storeName = false;\n\x09\x09this.edited = false;\n\n\x09\x09{\n\x09\x09\x09this.previous = null;\n\x09\x09\x09this.next = null;\n\x09\x09}\n\x09}\n\n\x09appendLeft(content) {\n\x09\x09this.outro += content;\n\x09}\n\n\x09appendRight(content) {\n\x09\x09this.intro = this.intro + content;\n\x09}\n\n\x09clone() {\n\x09\x09const chunk = new Chunk(this.start\x2C this.end\x2C this.original);\n\n\x09\x09chunk.intro = this.intro;\n\x09\x09chunk.outro = this.outro;\n\x09\x09chunk.content = this.content;\n\x09\x09chunk.storeName = this.storeName;\n\x09\x09chunk.edited = this.edited;\n\n\x09\x09return chunk;\n\x09}\n\n\x09contains(index) {\n\x09\x09return this.start < index && index < this.end;\n\x09}\n\n\x09eachNext(fn) {\n\x09\x09let chunk = this;\n\x09\x09while (chunk) {\n\x09\x09\x09fn(chunk);\n\x09\x09\x09chunk = chunk.next;\n\x09\x09}\n\x09}\n\n\x09eachPrevious(fn) {\n\x09\x09let chunk = this;\n\x09\x09while (chunk) {\n\x09\x09\x09fn(chunk);\n\x09\x09\x09chunk = chunk.previous;\n\x09\x09}\n\x09}\n\n\x09edit(content\x2C storeName\x2C contentOnly) {\n\x09\x09this.content = content;\n\x09\x09if (!contentOnly) {\n\x09\x09\x09this.intro = '';\n\x09\x09\x09this.outro = '';\n\x09\x09}\n\x09\x09this.storeName = storeName;\n\n\x09\x09this.edited = true;\n\n\x09\x09return this;\n\x09}\n\n\x09prependLeft(content) {\n\x09\x09this.outro = content + this.outro;\n\x09}\n\n\x09prependRight(content) {\n\x09\x09this.intro = content + this.intro;\n\x09}\n\n\x09split(index) {\n\x09\x09const sliceIndex = index - this.start;\n\n\x09\x09const originalBefore = this.original.slice(0\x2C sliceIndex);\n\x09\x09const originalAfter = this.original.slice(sliceIndex);\n\n\x09\x09this.original = originalBefore;\n\n\x09\x09const newChunk = new Chunk(index\x2C this.end\x2C originalAfter);\n\x09\x09newChunk.outro = this.outro;\n\x09\x09this.outro = '';\n\n\x09\x09this.end = index;\n\n\x09\x09if (this.edited) {\n\x09\x09\x09// after split we should save the edit content record into the correct chunk\n\x09\x09\x09// to make sure sourcemap correct\n\x09\x09\x09// For example:\n\x09\x09\x09// '  test'.trim()\n\x09\x09\x09//     split   -> '  ' + 'test'\n\x09\x09\x09//   \u2714\ufe0f edit    -> '' + 'test'\n\x09\x09\x09//   \u2716\ufe0f edit    -> 'test' + '' \n\x09\x09\x09// TODO is this block necessary?...\n\x09\x09\x09newChunk.edit(''\x2C false);\n\x09\x09\x09this.content = '';\n\x09\x09} else {\n\x09\x09\x09this.content = originalBefore;\n\x09\x09}\n\n\x09\x09newChunk.next = this.next;\n\x09\x09if (newChunk.next) newChunk.next.previous = newChunk;\n\x09\x09newChunk.previous = this;\n\x09\x09this.next = newChunk;\n\n\x09\x09return newChunk;\n\x09}\n\n\x09toString() {\n\x09\x09return this.intro + this.content + this.outro;\n\x09}\n\n\x09trimEnd(rx) {\n\x09\x09this.outro = this.outro.replace(rx\x2C '');\n\x09\x09if (this.outro.length) return true;\n\n\x09\x09const trimmed = this.content.replace(rx\x2C '');\n\n\x09\x09if (trimmed.length) {\n\x09\x09\x09if (trimmed !== this.content) {\n\x09\x09\x09\x09this.split(this.start + trimmed.length).edit(''\x2C undefined\x2C true);\n\x09\x09\x09\x09if (this.edited) {\n\x09\x09\x09\x09\x09// save the change\x2C if it has been edited\n\x09\x09\x09\x09\x09this.edit(trimmed\x2C this.storeName\x2C true);\n\x09\x09\x09\x09}\n\x09\x09\x09}\n\x09\x09\x09return true;\n\x09\x09} else {\n\x09\x09\x09this.edit(''\x2C undefined\x2C true);\n\n\x09\x09\x09this.intro = this.intro.replace(rx\x2C '');\n\x09\x09\x09if (this.intro.length) return true;\n\x09\x09}\n\x09}\n\n\x09trimStart(rx) {\n\x09\x09this.intro = this.intro.replace(rx\x2C '');\n\x09\x09if (this.intro.length) return true;\n\n\x09\x09const trimmed = this.content.replace(rx\x2C '');\n\n\x09\x09if (trimmed.length) {\n\x09\x09\x09if (trimmed !== this.content) {\n\x09\x09\x09\x09const newChunk = this.split(this.end - trimmed.length);\n\x09\x09\x09\x09if (this.edited) {\n\x09\x09\x09\x09\x09// save the change\x2C if it has been edited\n\x09\x09\x09\x09\x09newChunk.edit(trimmed\x2C this.storeName\x2C true);\n\x09\x09\x09\x09}\n\x09\x09\x09\x09this.edit(''\x2C undefined\x2C true);\n\x09\x09\x09}\n\x09\x09\x09return true;\n\x09\x09} else {\n\x09\x09\x09this.edit(''\x2C undefined\x2C true);\n\n\x09\x09\x09this.outro = this.outro.replace(rx\x2C '');\n\x09\x09\x09if (this.outro.length) return true;\n\x09\x09}\n\x09}\n};\n\nfunction getBtoa() {\n\x09if (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\x09\x09return (str) => window.btoa(unescape(encodeURIComponent(str)));\n\x09} else if (typeof Buffer === 'function') {\n\x09\x09return (str) => Buffer.from(str\x2C 'utf-8').toString('base64');\n\x09} else {\n\x09\x09return () => {\n\x09\x09\x09throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n\x09\x09};\n\x09}\n}\n\nconst btoa = /*#__PURE__*/ getBtoa();\n\nclass SourceMap {\n\x09constructor(properties) {\n\x09\x09this.version = 3;\n\x09\x09this.file = properties.file;\n\x09\x09this.sources = properties.sources;\n\x09\x09this.sourcesContent = properties.sourcesContent;\n\x09\x09this.names = properties.names;\n\x09\x09this.mappings = encode(properties.mappings);\n\x09\x09if (typeof properties.x_google_ignoreList !== 'undefined') {\n\x09\x09\x09this.x_google_ignoreList = properties.x_google_ignoreList;\n\x09\x09}\n\x09}\n\n\x09toString() {\n\x09\x09return JSON.stringify(this);\n\x09}\n\n\x09toUrl() {\n\x09\x09return 'data:application/json;charset=utf-8;base64\x2C' + btoa(this.toString());\n\x09}\n}\n\nfunction guessIndent(code) {\n\x09const lines = code.split('\\n');\n\n\x09const tabbed = lines.filter((line) => /^\\t+/.test(line));\n\x09const spaced = lines.filter((line) => /^ {2\x2C}/.test(line));\n\n\x09if (tabbed.length === 0 && spaced.length === 0) {\n\x09\x09return null;\n\x09}\n\n\x09// More lines tabbed than spaced? Assume tabs\x2C and\n\x09// default to tabs in the case of a tie (or nothing\n\x09// to go on)\n\x09if (tabbed.length >= spaced.length) {\n\x09\x09return '\\t';\n\x09}\n\n\x09// Otherwise\x2C we need to guess the multiple\n\x09const min = spaced.reduce((previous\x2C current) => {\n\x09\x09const numSpaces = /^ +/.exec(current)[0].length;\n\x09\x09return Math.min(numSpaces\x2C previous);\n\x09}\x2C Infinity);\n\n\x09return new Array(min + 1).join(' ');\n}\n\nfunction getRelativePath(from\x2C to) {\n\x09const fromParts = from.split(/[/\\\\]/);\n\x09const toParts = to.split(/[/\\\\]/);\n\n\x09fromParts.pop(); // get dirname\n\n\x09while (fromParts[0] === toParts[0]) {\n\x09\x09fromParts.shift();\n\x09\x09toParts.shift();\n\x09}\n\n\x09if (fromParts.length) {\n\x09\x09let i = fromParts.length;\n\x09\x09while (i--) fromParts[i] = '..';\n\x09}\n\n\x09return fromParts.concat(toParts).join('/');\n}\n\nconst toString$1 = Object.prototype.toString;\n\nfunction isObject$1(thing) {\n\x09return toString$1.call(thing) === '[object Object]';\n}\n\nfunction getLocator$1(source) {\n\x09const originalLines = source.split('\\n');\n\x09const lineOffsets = [];\n\n\x09for (let i = 0\x2C pos = 0; i < originalLines.length; i++) {\n\x09\x09lineOffsets.push(pos);\n\x09\x09pos += originalLines[i].length + 1;\n\x09}\n\n\x09return function locate(index) {\n\x09\x09let i = 0;\n\x09\x09let j = lineOffsets.length;\n\x09\x09while (i < j) {\n\x09\x09\x09const m = (i + j) >> 1;\n\x09\x09\x09if (index < lineOffsets[m]) {\n\x09\x09\x09\x09j = m;\n\x09\x09\x09} else {\n\x09\x09\x09\x09i = m + 1;\n\x09\x09\x09}\n\x09\x09}\n\x09\x09const line = i - 1;\n\x09\x09const column = index - lineOffsets[line];\n\x09\x09return { line\x2C column };\n\x09};\n}\n\nconst wordRegex = /\\w/;\n\nclass Mappings {\n\x09constructor(hires) {\n\x09\x09this.hires = hires;\n\x09\x09this.generatedCodeLine = 0;\n\x09\x09this.generatedCodeColumn = 0;\n\x09\x09this.raw = [];\n\x09\x09this.rawSegments = this.raw[this.generatedCodeLine] = [];\n\x09\x09this.pending = null;\n\x09}\n\n\x09addEdit(sourceIndex\x2C content\x2C loc\x2C nameIndex) {\n\x09\x09if (content.length) {\n\x09\x09\x09const segment = [this.generatedCodeColumn\x2C sourceIndex\x2C loc.line\x2C loc.column];\n\x09\x09\x09if (nameIndex >= 0) {\n\x09\x09\x09\x09segment.push(nameIndex);\n\x09\x09\x09}\n\x09\x09\x09this.rawSegments.push(segment);\n\x09\x09} else if (this.pending) {\n\x09\x09\x09this.rawSegments.push(this.pending);\n\x09\x09}\n\n\x09\x09this.advance(content);\n\x09\x09this.pending = null;\n\x09}\n\n\x09addUneditedChunk(sourceIndex\x2C chunk\x2C original\x2C loc\x2C sourcemapLocations) {\n\x09\x09let originalCharIndex = chunk.start;\n\x09\x09let first = true;\n\x09\x09// when iterating each char\x2C check if it's in a word boundary\n\x09\x09let charInHiresBoundary = false;\n\n\x09\x09while (originalCharIndex < chunk.end) {\n\x09\x09\x09if (this.hires || first || sourcemapLocations.has(originalCharIndex)) {\n\x09\x09\x09\x09const segment = [this.generatedCodeColumn\x2C sourceIndex\x2C loc.line\x2C loc.column];\n\n\x09\x09\x09\x09if (this.hires === 'boundary') {\n\x09\x09\x09\x09\x09// in hires "boundary"\x2C group segments per word boundary than per char\n\x09\x09\x09\x09\x09if (wordRegex.test(original[originalCharIndex])) {\n\x09\x09\x09\x09\x09\x09// for first char in the boundary found\x2C start the boundary by pushing a segment\n\x09\x09\x09\x09\x09\x09if (!charInHiresBoundary) {\n\x09\x09\x09\x09\x09\x09\x09this.rawSegments.push(segment);\n\x09\x09\x09\x09\x09\x09\x09charInHiresBoundary = true;\n\x09\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09\x09} else {\n\x09\x09\x09\x09\x09\x09// for non-word char\x2C end the boundary by pushing a segment\n\x09\x09\x09\x09\x09\x09this.rawSegments.push(segment);\n\x09\x09\x09\x09\x09\x09charInHiresBoundary = false;\n\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09} else {\n\x09\x09\x09\x09\x09this.rawSegments.push(segment);\n\x09\x09\x09\x09}\n\x09\x09\x09}\n\n\x09\x09\x09if (original[originalCharIndex] === '\\n') {\n\x09\x09\x09\x09loc.line += 1;\n\x09\x09\x09\x09loc.column = 0;\n\x09\x09\x09\x09this.generatedCodeLine += 1;\n\x09\x09\x09\x09this.raw[this.generatedCodeLine] = this.rawSegments = [];\n\x09\x09\x09\x09this.generatedCodeColumn = 0;\n\x09\x09\x09\x09first = true;\n\x09\x09\x09} else {\n\x09\x09\x09\x09loc.column += 1;\n\x09\x09\x09\x09this.generatedCodeColumn += 1;\n\x09\x09\x09\x09first = false;\n\x09\x09\x09}\n\n\x09\x09\x09originalCharIndex += 1;\n\x09\x09}\n\n\x09\x09this.pending = null;\n\x09}\n\n\x09advance(str) {\n\x09\x09if (!str) return;\n\n\x09\x09const lines = str.split('\\n');\n\n\x09\x09if (lines.length > 1) {\n\x09\x09\x09for (let i = 0; i < lines.length - 1; i++) {\n\x09\x09\x09\x09this.generatedCodeLine++;\n\x09\x09\x09\x09this.raw[this.generatedCodeLine] = this.rawSegments = [];\n\x09\x09\x09}\n\x09\x09\x09this.generatedCodeColumn = 0;\n\x09\x09}\n\n\x09\x09this.generatedCodeColumn += lines[lines.length - 1].length;\n\x09}\n}\n\nconst n = '\\n';\n\nconst warned = {\n\x09insertLeft: false\x2C\n\x09insertRight: false\x2C\n\x09storeName: false\x2C\n};\n\nclass MagicString {\n\x09constructor(string\x2C options = {}) {\n\x09\x09const chunk = new Chunk$1(0\x2C string.length\x2C string);\n\n\x09\x09Object.defineProperties(this\x2C {\n\x09\x09\x09original: { writable: true\x2C value: string }\x2C\n\x09\x09\x09outro: { writable: true\x2C value: '' }\x2C\n\x09\x09\x09intro: { writable: true\x2C value: '' }\x2C\n\x09\x09\x09firstChunk: { writable: true\x2C value: chunk }\x2C\n\x09\x09\x09lastChunk: { writable: true\x2C value: chunk }\x2C\n\x09\x09\x09lastSearchedChunk: { writable: true\x2C value: chunk }\x2C\n\x09\x09\x09byStart: { writable: true\x2C value: {} }\x2C\n\x09\x09\x09byEnd: { writable: true\x2C value: {} }\x2C\n\x09\x09\x09filename: { writable: true\x2C value: options.filename }\x2C\n\x09\x09\x09indentExclusionRanges: { writable: true\x2C value: options.indentExclusionRanges }\x2C\n\x09\x09\x09sourcemapLocations: { writable: true\x2C value: new BitSet() }\x2C\n\x09\x09\x09storedNames: { writable: true\x2C value: {} }\x2C\n\x09\x09\x09indentStr: { writable: true\x2C value: undefined }\x2C\n\x09\x09\x09ignoreList: { writable: true\x2C value: options.ignoreList }\x2C\n\x09\x09});\n\n\x09\x09this.byStart[0] = chunk;\n\x09\x09this.byEnd[string.length] = chunk;\n\x09}\n\n\x09addSourcemapLocation(char) {\n\x09\x09this.sourcemapLocations.add(char);\n\x09}\n\n\x09append(content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\x09\x09this.outro += content;\n\x09\x09return this;\n\x09}\n\n\x09appendLeft(index\x2C content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\x09\x09this._split(index);\n\n\x09\x09const chunk = this.byEnd[index];\n\n\x09\x09if (chunk) {\n\x09\x09\x09chunk.appendLeft(content);\n\x09\x09} else {\n\x09\x09\x09this.intro += content;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09appendRight(index\x2C content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\x09\x09this._split(index);\n\n\x09\x09const chunk = this.byStart[index];\n\n\x09\x09if (chunk) {\n\x09\x09\x09chunk.appendRight(content);\n\x09\x09} else {\n\x09\x09\x09this.outro += content;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09clone() {\n\x09\x09const cloned = new MagicString(this.original\x2C { filename: this.filename });\n\n\x09\x09let originalChunk = this.firstChunk;\n\x09\x09let clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());\n\n\x09\x09while (originalChunk) {\n\x09\x09\x09cloned.byStart[clonedChunk.start] = clonedChunk;\n\x09\x09\x09cloned.byEnd[clonedChunk.end] = clonedChunk;\n\n\x09\x09\x09const nextOriginalChunk = originalChunk.next;\n\x09\x09\x09const nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\x09\x09\x09if (nextClonedChunk) {\n\x09\x09\x09\x09clonedChunk.next = nextClonedChunk;\n\x09\x09\x09\x09nextClonedChunk.previous = clonedChunk;\n\n\x09\x09\x09\x09clonedChunk = nextClonedChunk;\n\x09\x09\x09}\n\n\x09\x09\x09originalChunk = nextOriginalChunk;\n\x09\x09}\n\n\x09\x09cloned.lastChunk = clonedChunk;\n\n\x09\x09if (this.indentExclusionRanges) {\n\x09\x09\x09cloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\x09\x09}\n\n\x09\x09cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);\n\n\x09\x09cloned.intro = this.intro;\n\x09\x09cloned.outro = this.outro;\n\n\x09\x09return cloned;\n\x09}\n\n\x09generateDecodedMap(options) {\n\x09\x09options = options || {};\n\n\x09\x09const sourceIndex = 0;\n\x09\x09const names = Object.keys(this.storedNames);\n\x09\x09const mappings = new Mappings(options.hires);\n\n\x09\x09const locate = getLocator$1(this.original);\n\n\x09\x09if (this.intro) {\n\x09\x09\x09mappings.advance(this.intro);\n\x09\x09}\n\n\x09\x09this.firstChunk.eachNext((chunk) => {\n\x09\x09\x09const loc = locate(chunk.start);\n\n\x09\x09\x09if (chunk.intro.length) mappings.advance(chunk.intro);\n\n\x09\x09\x09if (chunk.edited) {\n\x09\x09\x09\x09mappings.addEdit(\n\x09\x09\x09\x09\x09sourceIndex\x2C\n\x09\x09\x09\x09\x09chunk.content\x2C\n\x09\x09\x09\x09\x09loc\x2C\n\x09\x09\x09\x09\x09chunk.storeName ? names.indexOf(chunk.original) : -1\x2C\n\x09\x09\x09\x09);\n\x09\x09\x09} else {\n\x09\x09\x09\x09mappings.addUneditedChunk(sourceIndex\x2C chunk\x2C this.original\x2C loc\x2C this.sourcemapLocations);\n\x09\x09\x09}\n\n\x09\x09\x09if (chunk.outro.length) mappings.advance(chunk.outro);\n\x09\x09});\n\n\x09\x09return {\n\x09\x09\x09file: options.file ? options.file.split(/[/\\\\]/).pop() : undefined\x2C\n\x09\x09\x09sources: [\n\x09\x09\x09\x09options.source ? getRelativePath(options.file || ''\x2C options.source) : options.file || ''\x2C\n\x09\x09\x09]\x2C\n\x09\x09\x09sourcesContent: options.includeContent ? [this.original] : undefined\x2C\n\x09\x09\x09names\x2C\n\x09\x09\x09mappings: mappings.raw\x2C\n\x09\x09\x09x_google_ignoreList: this.ignoreList ? [sourceIndex] : undefined\x2C\n\x09\x09};\n\x09}\n\n\x09generateMap(options) {\n\x09\x09return new SourceMap(this.generateDecodedMap(options));\n\x09}\n\n\x09_ensureindentStr() {\n\x09\x09if (this.indentStr === undefined) {\n\x09\x09\x09this.indentStr = guessIndent(this.original);\n\x09\x09}\n\x09}\n\n\x09_getRawIndentString() {\n\x09\x09this._ensureindentStr();\n\x09\x09return this.indentStr;\n\x09}\n\n\x09getIndentString() {\n\x09\x09this._ensureindentStr();\n\x09\x09return this.indentStr === null ? '\\t' : this.indentStr;\n\x09}\n\n\x09indent(indentStr\x2C options) {\n\x09\x09const pattern = /^[^\\r\\n]/gm;\n\n\x09\x09if (isObject$1(indentStr)) {\n\x09\x09\x09options = indentStr;\n\x09\x09\x09indentStr = undefined;\n\x09\x09}\n\n\x09\x09if (indentStr === undefined) {\n\x09\x09\x09this._ensureindentStr();\n\x09\x09\x09indentStr = this.indentStr || '\\t';\n\x09\x09}\n\n\x09\x09if (indentStr === '') return this; // noop\n\n\x09\x09options = options || {};\n\n\x09\x09// Process exclusion ranges\n\x09\x09const isExcluded = {};\n\n\x09\x09if (options.exclude) {\n\x09\x09\x09const exclusions =\n\x09\x09\x09\x09typeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;\n\x09\x09\x09exclusions.forEach((exclusion) => {\n\x09\x09\x09\x09for (let i = exclusion[0]; i < exclusion[1]; i += 1) {\n\x09\x09\x09\x09\x09isExcluded[i] = true;\n\x09\x09\x09\x09}\n\x09\x09\x09});\n\x09\x09}\n\n\x09\x09let shouldIndentNextCharacter = options.indentStart !== false;\n\x09\x09const replacer = (match) => {\n\x09\x09\x09if (shouldIndentNextCharacter) return `${indentStr}${match}`;\n\x09\x09\x09shouldIndentNextCharacter = true;\n\x09\x09\x09return match;\n\x09\x09};\n\n\x09\x09this.intro = this.intro.replace(pattern\x2C replacer);\n\n\x09\x09let charIndex = 0;\n\x09\x09let chunk = this.firstChunk;\n\n\x09\x09while (chunk) {\n\x09\x09\x09const end = chunk.end;\n\n\x09\x09\x09if (chunk.edited) {\n\x09\x09\x09\x09if (!isExcluded[charIndex]) {\n\x09\x09\x09\x09\x09chunk.content = chunk.content.replace(pattern\x2C replacer);\n\n\x09\x09\x09\x09\x09if (chunk.content.length) {\n\x09\x09\x09\x09\x09\x09shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\\n';\n\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09}\n\x09\x09\x09} else {\n\x09\x09\x09\x09charIndex = chunk.start;\n\n\x09\x09\x09\x09while (charIndex < end) {\n\x09\x09\x09\x09\x09if (!isExcluded[charIndex]) {\n\x09\x09\x09\x09\x09\x09const char = this.original[charIndex];\n\n\x09\x09\x09\x09\x09\x09if (char === '\\n') {\n\x09\x09\x09\x09\x09\x09\x09shouldIndentNextCharacter = true;\n\x09\x09\x09\x09\x09\x09} else if (char !== '\\r' && shouldIndentNextCharacter) {\n\x09\x09\x09\x09\x09\x09\x09shouldIndentNextCharacter = false;\n\n\x09\x09\x09\x09\x09\x09\x09if (charIndex === chunk.start) {\n\x09\x09\x09\x09\x09\x09\x09\x09chunk.prependRight(indentStr);\n\x09\x09\x09\x09\x09\x09\x09} else {\n\x09\x09\x09\x09\x09\x09\x09\x09this._splitChunk(chunk\x2C charIndex);\n\x09\x09\x09\x09\x09\x09\x09\x09chunk = chunk.next;\n\x09\x09\x09\x09\x09\x09\x09\x09chunk.prependRight(indentStr);\n\x09\x09\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09\x09}\n\n\x09\x09\x09\x09\x09charIndex += 1;\n\x09\x09\x09\x09}\n\x09\x09\x09}\n\n\x09\x09\x09charIndex = chunk.end;\n\x09\x09\x09chunk = chunk.next;\n\x09\x09}\n\n\x09\x09this.outro = this.outro.replace(pattern\x2C replacer);\n\n\x09\x09return this;\n\x09}\n\n\x09insert() {\n\x09\x09throw new Error(\n\x09\x09\x09'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)'\x2C\n\x09\x09);\n\x09}\n\n\x09insertLeft(index\x2C content) {\n\x09\x09if (!warned.insertLeft) {\n\x09\x09\x09console.warn(\n\x09\x09\x09\x09'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'\x2C\n\x09\x09\x09); // eslint-disable-line no-console\n\x09\x09\x09warned.insertLeft = true;\n\x09\x09}\n\n\x09\x09return this.appendLeft(index\x2C content);\n\x09}\n\n\x09insertRight(index\x2C content) {\n\x09\x09if (!warned.insertRight) {\n\x09\x09\x09console.warn(\n\x09\x09\x09\x09'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'\x2C\n\x09\x09\x09); // eslint-disable-line no-console\n\x09\x09\x09warned.insertRight = true;\n\x09\x09}\n\n\x09\x09return this.prependRight(index\x2C content);\n\x09}\n\n\x09move(start\x2C end\x2C index) {\n\x09\x09if (index >= start && index <= end) throw new Error('Cannot move a selection inside itself');\n\n\x09\x09this._split(start);\n\x09\x09this._split(end);\n\x09\x09this._split(index);\n\n\x09\x09const first = this.byStart[start];\n\x09\x09const last = this.byEnd[end];\n\n\x09\x09const oldLeft = first.previous;\n\x09\x09const oldRight = last.next;\n\n\x09\x09const newRight = this.byStart[index];\n\x09\x09if (!newRight && last === this.lastChunk) return this;\n\x09\x09const newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\x09\x09if (oldLeft) oldLeft.next = oldRight;\n\x09\x09if (oldRight) oldRight.previous = oldLeft;\n\n\x09\x09if (newLeft) newLeft.next = first;\n\x09\x09if (newRight) newRight.previous = last;\n\n\x09\x09if (!first.previous) this.firstChunk = last.next;\n\x09\x09if (!last.next) {\n\x09\x09\x09this.lastChunk = first.previous;\n\x09\x09\x09this.lastChunk.next = null;\n\x09\x09}\n\n\x09\x09first.previous = newLeft;\n\x09\x09last.next = newRight || null;\n\n\x09\x09if (!newLeft) this.firstChunk = first;\n\x09\x09if (!newRight) this.lastChunk = last;\n\x09\x09return this;\n\x09}\n\n\x09overwrite(start\x2C end\x2C content\x2C options) {\n\x09\x09options = options || {};\n\x09\x09return this.update(start\x2C end\x2C content\x2C { ...options\x2C overwrite: !options.contentOnly });\n\x09}\n\n\x09update(start\x2C end\x2C content\x2C options) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('replacement content must be a string');\n\n\x09\x09while (start < 0) start += this.original.length;\n\x09\x09while (end < 0) end += this.original.length;\n\n\x09\x09if (end > this.original.length) throw new Error('end is out of bounds');\n\x09\x09if (start === end)\n\x09\x09\x09throw new Error(\n\x09\x09\x09\x09'Cannot overwrite a zero-length range \u2013 use appendLeft or prependRight instead'\x2C\n\x09\x09\x09);\n\n\x09\x09this._split(start);\n\x09\x09this._split(end);\n\n\x09\x09if (options === true) {\n\x09\x09\x09if (!warned.storeName) {\n\x09\x09\x09\x09console.warn(\n\x09\x09\x09\x09\x09'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'\x2C\n\x09\x09\x09\x09); // eslint-disable-line no-console\n\x09\x09\x09\x09warned.storeName = true;\n\x09\x09\x09}\n\n\x09\x09\x09options = { storeName: true };\n\x09\x09}\n\x09\x09const storeName = options !== undefined ? options.storeName : false;\n\x09\x09const overwrite = options !== undefined ? options.overwrite : false;\n\n\x09\x09if (storeName) {\n\x09\x09\x09const original = this.original.slice(start\x2C end);\n\x09\x09\x09Object.defineProperty(this.storedNames\x2C original\x2C {\n\x09\x09\x09\x09writable: true\x2C\n\x09\x09\x09\x09value: true\x2C\n\x09\x09\x09\x09enumerable: true\x2C\n\x09\x09\x09});\n\x09\x09}\n\n\x09\x09const first = this.byStart[start];\n\x09\x09const last = this.byEnd[end];\n\n\x09\x09if (first) {\n\x09\x09\x09let chunk = first;\n\x09\x09\x09while (chunk !== last) {\n\x09\x09\x09\x09if (chunk.next !== this.byStart[chunk.end]) {\n\x09\x09\x09\x09\x09throw new Error('Cannot overwrite across a split point');\n\x09\x09\x09\x09}\n\x09\x09\x09\x09chunk = chunk.next;\n\x09\x09\x09\x09chunk.edit(''\x2C false);\n\x09\x09\x09}\n\n\x09\x09\x09first.edit(content\x2C storeName\x2C !overwrite);\n\x09\x09} else {\n\x09\x09\x09// must be inserting at the end\n\x09\x09\x09const newChunk = new Chunk$1(start\x2C end\x2C '').edit(content\x2C storeName);\n\n\x09\x09\x09// TODO last chunk in the array may not be the last chunk\x2C if it's moved...\n\x09\x09\x09last.next = newChunk;\n\x09\x09\x09newChunk.previous = last;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09prepend(content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\x09\x09this.intro = content + this.intro;\n\x09\x09return this;\n\x09}\n\n\x09prependLeft(index\x2C content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\x09\x09this._split(index);\n\n\x09\x09const chunk = this.byEnd[index];\n\n\x09\x09if (chunk) {\n\x09\x09\x09chunk.prependLeft(content);\n\x09\x09} else {\n\x09\x09\x09this.intro = content + this.intro;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09prependRight(index\x2C content) {\n\x09\x09if (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\x09\x09this._split(index);\n\n\x09\x09const chunk = this.byStart[index];\n\n\x09\x09if (chunk) {\n\x09\x09\x09chunk.prependRight(content);\n\x09\x09} else {\n\x09\x09\x09this.outro = content + this.outro;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09remove(start\x2C end) {\n\x09\x09while (start < 0) start += this.original.length;\n\x09\x09while (end < 0) end += this.original.length;\n\n\x09\x09if (start === end) return this;\n\n\x09\x09if (start < 0 || end > this.original.length) throw new Error('Character is out of bounds');\n\x09\x09if (start > end) throw new Error('end must be greater than start');\n\n\x09\x09this._split(start);\n\x09\x09this._split(end);\n\n\x09\x09let chunk = this.byStart[start];\n\n\x09\x09while (chunk) {\n\x09\x09\x09chunk.intro = '';\n\x09\x09\x09chunk.outro = '';\n\x09\x09\x09chunk.edit('');\n\n\x09\x09\x09chunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09lastChar() {\n\x09\x09if (this.outro.length) return this.outro[this.outro.length - 1];\n\x09\x09let chunk = this.lastChunk;\n\x09\x09do {\n\x09\x09\x09if (chunk.outro.length) return chunk.outro[chunk.outro.length - 1];\n\x09\x09\x09if (chunk.content.length) return chunk.content[chunk.content.length - 1];\n\x09\x09\x09if (chunk.intro.length) return chunk.intro[chunk.intro.length - 1];\n\x09\x09} while ((chunk = chunk.previous));\n\x09\x09if (this.intro.length) return this.intro[this.intro.length - 1];\n\x09\x09return '';\n\x09}\n\n\x09lastLine() {\n\x09\x09let lineIndex = this.outro.lastIndexOf(n);\n\x09\x09if (lineIndex !== -1) return this.outro.substr(lineIndex + 1);\n\x09\x09let lineStr = this.outro;\n\x09\x09let chunk = this.lastChunk;\n\x09\x09do {\n\x09\x09\x09if (chunk.outro.length > 0) {\n\x09\x09\x09\x09lineIndex = chunk.outro.lastIndexOf(n);\n\x09\x09\x09\x09if (lineIndex !== -1) return chunk.outro.substr(lineIndex + 1) + lineStr;\n\x09\x09\x09\x09lineStr = chunk.outro + lineStr;\n\x09\x09\x09}\n\n\x09\x09\x09if (chunk.content.length > 0) {\n\x09\x09\x09\x09lineIndex = chunk.content.lastIndexOf(n);\n\x09\x09\x09\x09if (lineIndex !== -1) return chunk.content.substr(lineIndex + 1) + lineStr;\n\x09\x09\x09\x09lineStr = chunk.content + lineStr;\n\x09\x09\x09}\n\n\x09\x09\x09if (chunk.intro.length > 0) {\n\x09\x09\x09\x09lineIndex = chunk.intro.lastIndexOf(n);\n\x09\x09\x09\x09if (lineIndex !== -1) return chunk.intro.substr(lineIndex + 1) + lineStr;\n\x09\x09\x09\x09lineStr = chunk.intro + lineStr;\n\x09\x09\x09}\n\x09\x09} while ((chunk = chunk.previous));\n\x09\x09lineIndex = this.intro.lastIndexOf(n);\n\x09\x09if (lineIndex !== -1) return this.intro.substr(lineIndex + 1) + lineStr;\n\x09\x09return this.intro + lineStr;\n\x09}\n\n\x09slice(start = 0\x2C end = this.original.length) {\n\x09\x09while (start < 0) start += this.original.length;\n\x09\x09while (end < 0) end += this.original.length;\n\n\x09\x09let result = '';\n\n\x09\x09// find start chunk\n\x09\x09let chunk = this.firstChunk;\n\x09\x09while (chunk && (chunk.start > start || chunk.end <= start)) {\n\x09\x09\x09// found end chunk before start\n\x09\x09\x09if (chunk.start < end && chunk.end >= end) {\n\x09\x09\x09\x09return result;\n\x09\x09\x09}\n\n\x09\x09\x09chunk = chunk.next;\n\x09\x09}\n\n\x09\x09if (chunk && chunk.edited && chunk.start !== start)\n\x09\x09\x09throw new Error(`Cannot use replaced character ${start} as slice start anchor.`);\n\n\x09\x09const startChunk = chunk;\n\x09\x09while (chunk) {\n\x09\x09\x09if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {\n\x09\x09\x09\x09result += chunk.intro;\n\x09\x09\x09}\n\n\x09\x09\x09const containsEnd = chunk.start < end && chunk.end >= end;\n\x09\x09\x09if (containsEnd && chunk.edited && chunk.end !== end)\n\x09\x09\x09\x09throw new Error(`Cannot use replaced character ${end} as slice end anchor.`);\n\n\x09\x09\x09const sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\x09\x09\x09const sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\x09\x09\x09result += chunk.content.slice(sliceStart\x2C sliceEnd);\n\n\x09\x09\x09if (chunk.outro && (!containsEnd || chunk.end === end)) {\n\x09\x09\x09\x09result += chunk.outro;\n\x09\x09\x09}\n\n\x09\x09\x09if (containsEnd) {\n\x09\x09\x09\x09break;\n\x09\x09\x09}\n\n\x09\x09\x09chunk = chunk.next;\n\x09\x09}\n\n\x09\x09return result;\n\x09}\n\n\x09// TODO deprecate this? not really very useful\n\x09snip(start\x2C end) {\n\x09\x09const clone = this.clone();\n\x09\x09clone.remove(0\x2C start);\n\x09\x09clone.remove(end\x2C clone.original.length);\n\n\x09\x09return clone;\n\x09}\n\n\x09_split(index) {\n\x09\x09if (this.byStart[index] || this.byEnd[index]) return;\n\n\x09\x09let chunk = this.lastSearchedChunk;\n\x09\x09const searchForward = index > chunk.end;\n\n\x09\x09while (chunk) {\n\x09\x09\x09if (chunk.contains(index)) return this._splitChunk(chunk\x2C index);\n\n\x09\x09\x09chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];\n\x09\x09}\n\x09}\n\n\x09_splitChunk(chunk\x2C index) {\n\x09\x09if (chunk.edited && chunk.content.length) {\n\x09\x09\x09// zero-length edited chunks are a special case (overlapping replacements)\n\x09\x09\x09const loc = getLocator$1(this.original)(index);\n\x09\x09\x09throw new Error(\n\x09\x09\x09\x09`Cannot split a chunk that has already been edited (${loc.line}:${loc.column} \u2013 "${chunk.original}")`\x2C\n\x09\x09\x09);\n\x09\x09}\n\n\x09\x09const newChunk = chunk.split(index);\n\n\x09\x09this.byEnd[index] = chunk;\n\x09\x09this.byStart[index] = newChunk;\n\x09\x09this.byEnd[newChunk.end] = newChunk;\n\n\x09\x09if (chunk === this.lastChunk) this.lastChunk = newChunk;\n\n\x09\x09this.lastSearchedChunk = chunk;\n\x09\x09return true;\n\x09}\n\n\x09toString() {\n\x09\x09let str = this.intro;\n\n\x09\x09let chunk = this.firstChunk;\n\x09\x09while (chunk) {\n\x09\x09\x09str += chunk.toString();\n\x09\x09\x09chunk = chunk.next;\n\x09\x09}\n\n\x09\x09return str + this.outro;\n\x09}\n\n\x09isEmpty() {\n\x09\x09let chunk = this.firstChunk;\n\x09\x09do {\n\x09\x09\x09if (\n\x09\x09\x09\x09(chunk.intro.length && chunk.intro.trim()) ||\n\x09\x09\x09\x09(chunk.content.length && chunk.content.trim()) ||\n\x09\x09\x09\x09(chunk.outro.length && chunk.outro.trim())\n\x09\x09\x09)\n\x09\x09\x09\x09return false;\n\x09\x09} while ((chunk = chunk.next));\n\x09\x09return true;\n\x09}\n\n\x09length() {\n\x09\x09let chunk = this.firstChunk;\n\x09\x09let length = 0;\n\x09\x09do {\n\x09\x09\x09length += chunk.intro.length + chunk.content.length + chunk.outro.length;\n\x09\x09} while ((chunk = chunk.next));\n\x09\x09return length;\n\x09}\n\n\x09trimLines() {\n\x09\x09return this.trim('[\\\\r\\\\n]');\n\x09}\n\n\x09trim(charType) {\n\x09\x09return this.trimStart(charType).trimEnd(charType);\n\x09}\n\n\x09trimEndAborted(charType) {\n\x09\x09const rx = new RegExp((charType || '\\\\s') + '+$');\n\n\x09\x09this.outro = this.outro.replace(rx\x2C '');\n\x09\x09if (this.outro.length) return true;\n\n\x09\x09let chunk = this.lastChunk;\n\n\x09\x09do {\n\x09\x09\x09const end = chunk.end;\n\x09\x09\x09const aborted = chunk.trimEnd(rx);\n\n\x09\x09\x09// if chunk was trimmed\x2C we have a new lastChunk\n\x09\x09\x09if (chunk.end !== end) {\n\x09\x09\x09\x09if (this.lastChunk === chunk) {\n\x09\x09\x09\x09\x09this.lastChunk = chunk.next;\n\x09\x09\x09\x09}\n\n\x09\x09\x09\x09this.byEnd[chunk.end] = chunk;\n\x09\x09\x09\x09this.byStart[chunk.next.start] = chunk.next;\n\x09\x09\x09\x09this.byEnd[chunk.next.end] = chunk.next;\n\x09\x09\x09}\n\n\x09\x09\x09if (aborted) return true;\n\x09\x09\x09chunk = chunk.previous;\n\x09\x09} while (chunk);\n\n\x09\x09return false;\n\x09}\n\n\x09trimEnd(charType) {\n\x09\x09this.trimEndAborted(charType);\n\x09\x09return this;\n\x09}\n\x09trimStartAborted(charType) {\n\x09\x09const rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\x09\x09this.intro = this.intro.replace(rx\x2C '');\n\x09\x09if (this.intro.length) return true;\n\n\x09\x09let chunk = this.firstChunk;\n\n\x09\x09do {\n\x09\x09\x09const end = chunk.end;\n\x09\x09\x09const aborted = chunk.trimStart(rx);\n\n\x09\x09\x09if (chunk.end !== end) {\n\x09\x09\x09\x09// special case...\n\x09\x09\x09\x09if (chunk === this.lastChunk) this.lastChunk = chunk.next;\n\n\x09\x09\x09\x09this.byEnd[chunk.end] = chunk;\n\x09\x09\x09\x09this.byStart[chunk.next.start] = chunk.next;\n\x09\x09\x09\x09this.byEnd[chunk.next.end] = chunk.next;\n\x09\x09\x09}\n\n\x09\x09\x09if (aborted) return true;\n\x09\x09\x09chunk = chunk.next;\n\x09\x09} while (chunk);\n\n\x09\x09return false;\n\x09}\n\n\x09trimStart(charType) {\n\x09\x09this.trimStartAborted(charType);\n\x09\x09return this;\n\x09}\n\n\x09hasChanged() {\n\x09\x09return this.original !== this.toString();\n\x09}\n\n\x09_replaceRegexp(searchValue\x2C replacement) {\n\x09\x09function getReplacement(match\x2C str) {\n\x09\x09\x09if (typeof replacement === 'string') {\n\x09\x09\x09\x09return replacement.replace(/\\$(\\$|&|\\d+)/g\x2C (_\x2C i) => {\n\x09\x09\x09\x09\x09// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_a_parameter\n\x09\x09\x09\x09\x09if (i === '$') return '$';\n\x09\x09\x09\x09\x09if (i === '&') return match[0];\n\x09\x09\x09\x09\x09const num = +i;\n\x09\x09\x09\x09\x09if (num < match.length) return match[+i];\n\x09\x09\x09\x09\x09return `$${i}`;\n\x09\x09\x09\x09});\n\x09\x09\x09} else {\n\x09\x09\x09\x09return replacement(...match\x2C match.index\x2C str\x2C match.groups);\n\x09\x09\x09}\n\x09\x09}\n\x09\x09function matchAll(re\x2C str) {\n\x09\x09\x09let match;\n\x09\x09\x09const matches = [];\n\x09\x09\x09while ((match = re.exec(str))) {\n\x09\x09\x09\x09matches.push(match);\n\x09\x09\x09}\n\x09\x09\x09return matches;\n\x09\x09}\n\x09\x09if (searchValue.global) {\n\x09\x09\x09const matches = matchAll(searchValue\x2C this.original);\n\x09\x09\x09matches.forEach((match) => {\n\x09\x09\x09\x09if (match.index != null)\n\x09\x09\x09\x09\x09this.overwrite(\n\x09\x09\x09\x09\x09\x09match.index\x2C\n\x09\x09\x09\x09\x09\x09match.index + match[0].length\x2C\n\x09\x09\x09\x09\x09\x09getReplacement(match\x2C this.original)\x2C\n\x09\x09\x09\x09\x09);\n\x09\x09\x09});\n\x09\x09} else {\n\x09\x09\x09const match = this.original.match(searchValue);\n\x09\x09\x09if (match && match.index != null)\n\x09\x09\x09\x09this.overwrite(\n\x09\x09\x09\x09\x09match.index\x2C\n\x09\x09\x09\x09\x09match.index + match[0].length\x2C\n\x09\x09\x09\x09\x09getReplacement(match\x2C this.original)\x2C\n\x09\x09\x09\x09);\n\x09\x09}\n\x09\x09return this;\n\x09}\n\n\x09_replaceString(string\x2C replacement) {\n\x09\x09const { original } = this;\n\x09\x09const index = original.indexOf(string);\n\n\x09\x09if (index !== -1) {\n\x09\x09\x09this.overwrite(index\x2C index + string.length\x2C replacement);\n\x09\x09}\n\n\x09\x09return this;\n\x09}\n\n\x09replace(searchValue\x2C replacement) {\n\x09\x09if (typeof searchValue === 'string') {\n\x09\x09\x09return this._replaceString(searchValue\x2C replacement);\n\x09\x09}\n\n\x09\x09return this._replaceRegexp(searchValue\x2C replacement);\n\x09}\n\n\x09_replaceAllString(string\x2C replacement) {\n\x09\x09const { original } = this;\n\x09\x09const stringLength = string.length;\n\x09\x09for (\n\x09\x09\x09let index = original.indexOf(string);\n\x09\x09\x09index !== -1;\n\x09\x09\x09index = original.indexOf(string\x2C index + stringLength)\n\x09\x09) {\n\x09\x09\x09this.overwrite(index\x2C index + stringLength\x2C replacement);\n\x09\x09}\n\n\x09\x09return this;\n\x09}\n\n\x09replaceAll(searchValue\x2C replacement) {\n\x09\x09if (typeof searchValue === 'string') {\n\x09\x09\x09return this._replaceAllString(searchValue\x2C replacement);\n\x09\x09}\n\n\x09\x09if (!searchValue.global) {\n\x09\x09\x09throw new TypeError(\n\x09\x09\x09\x09'MagicString.prototype.replaceAll called with a non-global RegExp argument'\x2C\n\x09\x09\x09);\n\x09\x09}\n\n\x09\x09return this._replaceRegexp(searchValue\x2C replacement);\n\x09}\n}\n\nconst hasOwnProp = Object.prototype.hasOwnProperty;\n\nlet Bundle$1 = class Bundle {\n\x09constructor(options = {}) {\n\x09\x09this.intro = options.intro || '';\n\x09\x09this.separator = options.separator !== undefined ? options.separator : '\\n';\n\x09\x09this.sources = [];\n\x09\x09this.uniqueSources = [];\n\x09\x09this.uniqueSourceIndexByFilename = {};\n\x09}\n\n\x09addSource(source) {\n\x09\x09if (source instanceof MagicString) {\n\x09\x09\x09return this.addSource({\n\x09\x09\x09\x09content: source\x2C\n\x09\x09\x09\x09filename: source.filename\x2C\n\x09\x09\x09\x09separator: this.separator\x2C\n\x09\x09\x09});\n\x09\x09}\n\n\x09\x09if (!isObject$1(source) || !source.content) {\n\x09\x09\x09throw new Error(\n\x09\x09\x09\x09'bundle.addSource() takes an object with a `content` property\x2C which should be an instance of MagicString\x2C and an optional `filename`'\x2C\n\x09\x09\x09);\n\x09\x09}\n\n\x09\x09['filename'\x2C 'ignoreList'\x2C 'indentExclusionRanges'\x2C 'separator'].forEach((option) => {\n\x09\x09\x09if (!hasOwnProp.call(source\x2C option)) source[option] = source.content[option];\n\x09\x09});\n\n\x09\x09if (source.separator === undefined) {\n\x09\x09\x09// TODO there's a bunch of this sort of thing\x2C needs cleaning up\n\x09\x09\x09source.separator = this.separator;\n\x09\x09}\n\n\x09\x09if (source.filename) {\n\x09\x09\x09if (!hasOwnProp.call(this.uniqueSourceIndexByFilename\x2C source.filename)) {\n\x09\x09\x09\x09this.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;\n\x09\x09\x09\x09this.uniqueSources.push({ filename: source.filename\x2C content: source.content.original });\n\x09\x09\x09} else {\n\x09\x09\x09\x09const uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];\n\x09\x09\x09\x09if (source.content.original !== uniqueSource.content) {\n\x09\x09\x09\x09\x09throw new Error(`Illegal source: same filename (${source.filename})\x2C different contents`);\n\x09\x09\x09\x09}\n\x09\x09\x09}\n\x09\x09}\n\n\x09\x09this.sources.push(source);\n\x09\x09return this;\n\x09}\n\n\x09append(str\x2C options) {\n\x09\x09this.addSource({\n\x09\x09\x09content: new MagicString(str)\x2C\n\x09\x09\x09separator: (options && options.separator) || ''\x2C\n\x09\x09});\n\n\x09\x09return this;\n\x09}\n\n\x09clone() {\n\x09\x09const bundle = new Bundle({\n\x09\x09\x09intro: this.intro\x2C\n\x09\x09\x09separator: this.separator\x2C\n\x09\x09});\n\n\x09\x09this.sources.forEach((source) => {\n\x09\x09\x09bundle.addSource({\n\x09\x09\x09\x09filename: source.filename\x2C\n\x09\x09\x09\x09content: source.content.clone()\x2C\n\x09\x09\x09\x09separator: source.separator\x2C\n\x09\x09\x09});\n\x09\x09});\n\n\x09\x09return bundle;\n\x09}\n\n\x09generateDecodedMap(options = {}) {\n\x09\x09const names = [];\n\x09\x09let x_google_ignoreList = undefined;\n\x09\x09this.sources.forEach((source) => {\n\x09\x09\x09Object.keys(source.content.storedNames).forEach((name) => {\n\x09\x09\x09\x09if (!~names.indexOf(name)) names.push(name);\n\x09\x09\x09});\n\x09\x09});\n\n\x09\x09const mappings = new Mappings(options.hires);\n\n\x09\x09if (this.intro) {\n\x09\x09\x09mappings.advance(this.intro);\n\x09\x09}\n\n\x09\x09this.sources.forEach((source\x2C i) => {\n\x09\x09\x09if (i > 0) {\n\x09\x09\x09\x09mappings.advance(this.separator);\n\x09\x09\x09}\n\n\x09\x09\x09const sourceIndex = source.filename ? this.uniqueSourceIndexByFilename[source.filename] : -1;\n\x09\x09\x09const magicString = source.content;\n\x09\x09\x09const locate = getLocator$1(magicString.original);\n\n\x09\x09\x09if (magicString.intro) {\n\x09\x09\x09\x09mappings.advance(magicString.intro);\n\x09\x09\x09}\n\n\x09\x09\x09magicString.firstChunk.eachNext((chunk) => {\n\x09\x09\x09\x09const loc = locate(chunk.start);\n\n\x09\x09\x09\x09if (chunk.intro.length) mappings.advance(chunk.intro);\n\n\x09\x09\x09\x09if (source.filename) {\n\x09\x09\x09\x09\x09if (chunk.edited) {\n\x09\x09\x09\x09\x09\x09mappings.addEdit(\n\x09\x09\x09\x09\x09\x09\x09sourceIndex\x2C\n\x09\x09\x09\x09\x09\x09\x09chunk.content\x2C\n\x09\x09\x09\x09\x09\x09\x09loc\x2C\n\x09\x09\x09\x09\x09\x09\x09chunk.storeName ? names.indexOf(chunk.original) : -1\x2C\n\x09\x09\x09\x09\x09\x09);\n\x09\x09\x09\x09\x09} else {\n\x09\x09\x09\x09\x09\x09mappings.addUneditedChunk(\n\x09\x09\x09\x09\x09\x09\x09sourceIndex\x2C\n\x09\x09\x09\x09\x09\x09\x09chunk\x2C\n\x09\x09\x09\x09\x09\x09\x09magicString.original\x2C\n\x09\x09\x09\x09\x09\x09\x09loc\x2C\n\x09\x09\x09\x09\x09\x09\x09magicString.sourcemapLocations\x2C\n\x09\x09\x09\x09\x09\x09);\n\x09\x09\x09\x09\x09}\n\x09\x09\x09\x09} else {\n\x09\x09\x09\x09\x09mappings.advance(chunk.content);\n\x09\x09\x09\x09}\n\n\x09\x09\x09\x09if (chunk.outro.length) mappings.advance(chunk.outro);\n\x09\x09\x09});\n\n\x09\x09\x09if (magicString.outro) {\n\x09\x09\x09\x09mappings.advance(magicString.outro);\n\x09\x09\x09}\n\n\x09\x09\x09if (source.ignoreList && sourceIndex !== -1) {\n\x09\x09\x09\x09if (x_google_ignoreList === undefined) {\n\x09\x09\x09\x09\x09x_google_ignoreList = [];\n\x09\x09\x09\x09}\n\x09\x09\x09\x09x_google_ignoreList.push(sourceIndex);\n\x09\x09\x09}\n\x09\x09});\n\n\x09\x09return {\n\x09\x09\x09file: options.file ? options.file.split(/[/\\\\]/).pop() : undefined\x2C\n\x09\x09\x09sources: this.uniqueSources.map((source) => {\n\x09\x09\x09\x09return options.file ? getRelativePath(options.file\x2C source.filename) : source.filename;\n\x09\x09\x09})\x2C\n\x09\x09\x09sourcesContent: this.uniqueSources.map((source) => {\n\x09\x09\x09\x09return options.includeContent ? source.content : null;\n\x09\x09\x09})\x2C\n\x09\x09\x09names\x2C\n\x09\x09\x09mappings: mappings.raw\x2C\n\x09\x09\x09x_google_ignoreList\x2C\n\x09\x09};\n\x09}\n\n\x09generateMap(options) {\n\x09\x09return new SourceMap(this.generateDecodedMap(options));\n\x09}\n\n\x09getIndentString() {\n\x09\x09const indentStringCounts = {};\n\n\x09\x09this.sources.forEach((source) => {\n\x09\x09\x09const indentStr = source.content._getRawIndentString();\n\n\x09\x09\x09if (indentStr === null) return;\n\n\x09\x09\x09if (!indentStringCounts[indentStr]) indentStringCounts[indentStr] = 0;\n\x09\x09\x09indentStringCounts[indentStr] += 1;\n\x09\x09});\n\n\x09\x09return (\n\x09\x09\x09Object.keys(indentStringCounts).sort((a\x2C b) => {\n\x09\x09\x09\x09return indentStringCounts[a] - indentStringCounts[b];\n\x09\x09\x09})[0] || '\\t'\n\x09\x09);\n\x09}\n\n\x09indent(indentStr) {\n\x09\x09if (!arguments.length) {\n\x09\x09\x09indentStr = this.getIndentString();\n\x09\x09}\n\n\x09\x09if (indentStr === '') return this; // noop\n\n\x09\x09let trailingNewline = !this.intro || this.intro.slice(-1) === '\\n';\n\n\x09\x09this.sources.forEach((source\x2C i) => {\n\x09\x09\x09const separator = source.separator !== undefined ? source.separator : this.separator;\n\x09\x09\x09const indentStart = trailingNewline || (i > 0 && /\\r?\\n$/.test(separator));\n\n\x09\x09\x09source.content.indent(indentStr\x2C {\n\x09\x09\x09\x09exclude: source.indentExclusionRanges\x2C\n\x09\x09\x09\x09indentStart\x2C //: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\x09\x09\x09});\n\n\x09\x09\x09trailingNewline = source.content.lastChar() === '\\n';\n\x09\x09});\n\n\x09\x09if (this.intro) {\n\x09\x09\x09this.intro =\n\x09\x09\x09\x09indentStr +\n\x09\x09\x09\x09this.intro.replace(/^[^\\n]/gm\x2C (match\x2C index) => {\n\x09\x09\x09\x09\x09return index > 0 ? indentStr + match : match;\n\x09\x09\x09\x09});\n\x09\x09}\n\n\x09\x09return this;\n\x09}\n\n\x09prepend(str) {\n\x09\x09this.intro = str + this.intro;\n\x09\x09return this;\n\x09}\n\n\x09toString() {\n\x09\x09const body = this.sources\n\x09\x09\x09.map((source\x2C i) => {\n\x09\x09\x09\x09const separator = source.separator !== undefined ? source.separator : this.separator;\n\x09\x09\x09\x09const str = (i > 0 ? separator : '') + source.content.toString();\n\n\x09\x09\x09\x09return str;\n\x09\x09\x09})\n\x09\x09\x09.join('');\n\n\x09\x09return this.intro + body;\n\x09}\n\n\x09isEmpty() {\n\x09\x09if (this.intro.length && this.intro.trim()) return false;\n\x09\x09if (this.sources.some((source) => !source.content.isEmpty())) return false;\n\x09\x09return true;\n\x09}\n\n\x09length() {\n\x09\x09return this.sources.reduce(\n\x09\x09\x09(length\x2C source) => length + source.content.length()\x2C\n\x09\x09\x09this.intro.length\x2C\n\x09\x09);\n\x09}\n\n\x09trimLines() {\n\x09\x09return this.trim('[\\\\r\\\\n]');\n\x09}\n\n\x09trim(charType) {\n\x09\x09return this.trimStart(charType).trimEnd(charType);\n\x09}\n\n\x09trimStart(charType) {\n\x09\x09const rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\x09\x09this.intro = this.intro.replace(rx\x2C '');\n\n\x09\x09if (!this.intro) {\n\x09\x09\x09let source;\n\x09\x09\x09let i = 0;\n\n\x09\x09\x09do {\n\x09\x09\x09\x09source = this.sources[i++];\n\x09\x09\x09\x09if (!source) {\n\x09\x09\x09\x09\x09break;\n\x09\x09\x09\x09}\n\x09\x09\x09} while (!source.content.trimStartAborted(charType));\n\x09\x09}\n\n\x09\x09return this;\n\x09}\n\n\x09trimEnd(charType) {\n\x09\x09const rx = new RegExp((charType || '\\\\s') + '+$');\n\n\x09\x09let source;\n\x09\x09let i = this.sources.length - 1;\n\n\x09\x09do {\n\x09\x09\x09source = this.sources[i--];\n\x09\x09\x09if (!source) {\n\x09\x09\x09\x09this.intro = this.intro.replace(rx\x2C '');\n\x09\x09\x09\x09break;\n\x09\x09\x09}\n\x09\x09} while (!source.content.trimEndAborted(charType));\n\n\x09\x09return this;\n\x09}\n};\n\nconst ANY_SLASH_REGEX = /[/\\\\]/;\nfunction relative(from\x2C to) {\n    const fromParts = from.split(ANY_SLASH_REGEX).filter(Boolean);\n    const toParts = to.split(ANY_SLASH_REGEX).filter(Boolean);\n    if (fromParts[0] === '.')\n        fromParts.shift();\n    if (toParts[0] === '.')\n        toParts.shift();\n    while (fromParts[0] && toParts[0] && fromParts[0] === toParts[0]) {\n        fromParts.shift();\n        toParts.shift();\n    }\n    while (toParts[0] === '..' && fromParts.length > 0) {\n        toParts.shift();\n        fromParts.pop();\n    }\n    while (fromParts.pop()) {\n        toParts.unshift('..');\n    }\n    return toParts.join('/');\n}\n\nconst needsEscapeRegEx = /[\\n\\r'\\\\\\u2028\\u2029]/;\nconst quoteNewlineRegEx = /([\\n\\r'\\u2028\\u2029])/g;\nconst backSlashRegEx = /\\\\/g;\nfunction escapeId(id) {\n    if (!needsEscapeRegEx.test(id))\n        return id;\n    return id.replace(backSlashRegEx\x2C '\\\\\\\\').replace(quoteNewlineRegEx\x2C '\\\\$1');\n}\n\nconst ABSOLUTE_PATH_REGEX = /^(?:\\/|(?:[A-Za-z]:)?[/\\\\|])/;\nconst RELATIVE_PATH_REGEX = /^\\.?\\.(\\/|$)/;\nfunction isAbsolute(path) {\n    return ABSOLUTE_PATH_REGEX.test(path);\n}\nfunction isRelative(path) {\n    return RELATIVE_PATH_REGEX.test(path);\n}\nconst BACKSLASH_REGEX = /\\\\/g;\nfunction normalize(path) {\n    return path.replace(BACKSLASH_REGEX\x2C '/');\n}\n\nfunction getAliasName(id) {\n    const base = basename(id);\n    return base.slice(0\x2C Math.max(0\x2C base.length - extname(id).length));\n}\nfunction relativeId(id) {\n    if (!isAbsolute(id))\n        return id;\n    return relative(resolve()\x2C id);\n}\nfunction isPathFragment(name) {\n    // starting with "/"\x2C "./"\x2C "../"\x2C "C:/"\n    return (name[0] === '/' || (name[0] === '.' && (name[1] === '/' || name[1] === '.')) || isAbsolute(name));\n}\nconst UPPER_DIR_REGEX = /^(\\.\\.\\/)*\\.\\.$/;\nfunction getImportPath(importerId\x2C targetPath\x2C stripJsExtension\x2C ensureFileName) {\n    while (targetPath.startsWith('../')) {\n        targetPath = targetPath.slice(3);\n        importerId = '_/' + importerId;\n    }\n    let relativePath = normalize(relative(dirname(importerId)\x2C targetPath));\n    if (stripJsExtension && relativePath.endsWith('.js')) {\n        relativePath = relativePath.slice(0\x2C -3);\n    }\n    if (ensureFileName) {\n        if (relativePath === '')\n            return '../' + basename(targetPath);\n        if (UPPER_DIR_REGEX.test(relativePath)) {\n            return [...relativePath.split('/')\x2C '..'\x2C basename(targetPath)].join('/');\n        }\n    }\n    return relativePath ? (relativePath.startsWith('..') ? relativePath : './' + relativePath) : '.';\n}\n\nclass ExternalChunk {\n    constructor(module\x2C options\x2C inputBase) {\n        this.options = options;\n        this.inputBase = inputBase;\n        this.defaultVariableName = '';\n        this.namespaceVariableName = '';\n        this.variableName = '';\n        this.fileName = null;\n        this.importAssertions = null;\n        this.id = module.id;\n        this.moduleInfo = module.info;\n        this.renormalizeRenderPath = module.renormalizeRenderPath;\n        this.suggestedVariableName = module.suggestedVariableName;\n    }\n    getFileName() {\n        if (this.fileName) {\n            return this.fileName;\n        }\n        const { paths } = this.options;\n        return (this.fileName =\n            (typeof paths === 'function' ? paths(this.id) : paths[this.id]) ||\n                (this.renormalizeRenderPath ? normalize(relative$1(this.inputBase\x2C this.id)) : this.id));\n    }\n    getImportAssertions(snippets) {\n        return (this.importAssertions || (this.importAssertions = formatAssertions$1(this.options.format === 'es' &&\n            this.options.externalImportAssertions &&\n            this.moduleInfo.assertions\x2C snippets)));\n    }\n    getImportPath(importer) {\n        return escapeId(this.renormalizeRenderPath\n            ? getImportPath(importer\x2C this.getFileName()\x2C this.options.format === 'amd'\x2C false)\n            : this.getFileName());\n    }\n}\nfunction formatAssertions$1(assertions\x2C { getObject }) {\n    if (!assertions) {\n        return null;\n    }\n    const assertionEntries = Object.entries(assertions).map(([key\x2C value]) => [key\x2C `'${value}'`]);\n    if (assertionEntries.length > 0) {\n        return getObject(assertionEntries\x2C { lineBreakIndent: null });\n    }\n    return null;\n}\n\nfunction getOrCreate(map\x2C key\x2C init) {\n    const existing = map.get(key);\n    if (existing !== undefined) {\n        return existing;\n    }\n    const value = init();\n    map.set(key\x2C value);\n    return value;\n}\nfunction getNewSet() {\n    return new Set();\n}\nfunction getNewArray() {\n    return [];\n}\n\nconst UnknownKey = Symbol('Unknown Key');\nconst UnknownNonAccessorKey = Symbol('Unknown Non-Accessor Key');\nconst UnknownInteger = Symbol('Unknown Integer');\nconst SymbolToStringTag = Symbol('Symbol.toStringTag');\nconst EMPTY_PATH = [];\nconst UNKNOWN_PATH = [UnknownKey];\n// For deoptimizations\x2C this means we are modifying an unknown property but did\n// not lose track of the object or are creating a setter/getter;\n// For assignment effects it means we do not check for setter/getter effects\n// but only if something is mutated that is included\x2C which is relevant for\n// Object.defineProperty\nconst UNKNOWN_NON_ACCESSOR_PATH = [UnknownNonAccessorKey];\nconst UNKNOWN_INTEGER_PATH = [UnknownInteger];\nconst EntitiesKey = Symbol('Entities');\nclass PathTracker {\n    constructor() {\n        this.entityPaths = Object.create(null\x2C {\n            [EntitiesKey]: { value: new Set() }\n        });\n    }\n    trackEntityAtPathAndGetIfTracked(path\x2C entity) {\n        const trackedEntities = this.getEntities(path);\n        if (trackedEntities.has(entity))\n            return true;\n        trackedEntities.add(entity);\n        return false;\n    }\n    withTrackedEntityAtPath(path\x2C entity\x2C onUntracked\x2C returnIfTracked) {\n        const trackedEntities = this.getEntities(path);\n        if (trackedEntities.has(entity))\n            return returnIfTracked;\n        trackedEntities.add(entity);\n        const result = onUntracked();\n        trackedEntities.delete(entity);\n        return result;\n    }\n    getEntities(path) {\n        let currentPaths = this.entityPaths;\n        for (const pathSegment of path) {\n            currentPaths = currentPaths[pathSegment] =\n                currentPaths[pathSegment] ||\n                    Object.create(null\x2C { [EntitiesKey]: { value: new Set() } });\n        }\n        return currentPaths[EntitiesKey];\n    }\n}\nconst SHARED_RECURSION_TRACKER = new PathTracker();\nclass DiscriminatedPathTracker {\n    constructor() {\n        this.entityPaths = Object.create(null\x2C {\n            [EntitiesKey]: { value: new Map() }\n        });\n    }\n    trackEntityAtPathAndGetIfTracked(path\x2C discriminator\x2C entity) {\n        let currentPaths = this.entityPaths;\n        for (const pathSegment of path) {\n            currentPaths = currentPaths[pathSegment] =\n                currentPaths[pathSegment] ||\n                    Object.create(null\x2C { [EntitiesKey]: { value: new Map() } });\n        }\n        const trackedEntities = getOrCreate(currentPaths[EntitiesKey]\x2C discriminator\x2C (getNewSet));\n        if (trackedEntities.has(entity))\n            return true;\n        trackedEntities.add(entity);\n        return false;\n    }\n}\n\nconst UnknownValue = Symbol('Unknown Value');\nconst UnknownTruthyValue = Symbol('Unknown Truthy Value');\nclass ExpressionEntity {\n    constructor() {\n        this.included = false;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C _path\x2C _recursionTracker) {\n        deoptimizeInteraction(interaction);\n    }\n    deoptimizePath(_path) { }\n    /**\n     * If possible it returns a stringifyable literal value for this node that\n     * can be used for inlining or comparing values. Otherwise\x2C it should return\n     * UnknownValue.\n     */\n    getLiteralValueAtPath(_path\x2C _recursionTracker\x2C _origin) {\n        return UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(_path\x2C _interaction\x2C _recursionTracker\x2C _origin) {\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(_path\x2C _interaction\x2C _context) {\n        return true;\n    }\n    include(_context\x2C _includeChildrenRecursively\x2C _options) {\n        this.included = true;\n    }\n    includeCallArguments(context\x2C parameters) {\n        for (const argument of parameters) {\n            argument.include(context\x2C false);\n        }\n    }\n    shouldBeIncluded(_context) {\n        return true;\n    }\n}\nconst UNKNOWN_EXPRESSION = new (class UnknownExpression extends ExpressionEntity {\n})();\nconst UNKNOWN_RETURN_EXPRESSION = [\n    UNKNOWN_EXPRESSION\x2C\n    false\n];\nconst deoptimizeInteraction = (interaction) => {\n    for (const argument of interaction.args) {\n        argument?.deoptimizePath(UNKNOWN_PATH);\n    }\n};\n\nconst INTERACTION_ACCESSED = 0;\nconst INTERACTION_ASSIGNED = 1;\nconst INTERACTION_CALLED = 2;\nconst NODE_INTERACTION_UNKNOWN_ACCESS = {\n    args: [null]\x2C\n    type: INTERACTION_ACCESSED\n};\nconst NODE_INTERACTION_UNKNOWN_ASSIGNMENT = {\n    args: [null\x2C UNKNOWN_EXPRESSION]\x2C\n    type: INTERACTION_ASSIGNED\n};\n// While this is technically a call without arguments\x2C we can compare against\n// this reference in places where precise values or this argument would make a\n// difference\nconst NODE_INTERACTION_UNKNOWN_CALL = {\n    args: [null]\x2C\n    type: INTERACTION_CALLED\x2C\n    withNew: false\n};\n\nclass Variable extends ExpressionEntity {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.alwaysRendered = false;\n        this.forbiddenNames = null;\n        this.initReached = false;\n        this.isId = false;\n        this.isReassigned = false;\n        this.kind = null;\n        this.renderBaseName = null;\n        this.renderName = null;\n    }\n    /**\n     * Binds identifiers that reference this variable to this variable.\n     * Necessary to be able to change variable names.\n     */\n    addReference(_identifier) { }\n    /**\n     * Prevent this variable from being renamed to this name to avoid name\n     * collisions\n     */\n    forbidName(name) {\n        (this.forbiddenNames || (this.forbiddenNames = new Set())).add(name);\n    }\n    getBaseVariableName() {\n        return this.renderBaseName || this.renderName || this.name;\n    }\n    getName(getPropertyAccess\x2C useOriginalName) {\n        if (useOriginalName?.(this)) {\n            return this.name;\n        }\n        const name = this.renderName || this.name;\n        return this.renderBaseName ? `${this.renderBaseName}${getPropertyAccess(name)}` : name;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }\x2C _context) {\n        return type !== INTERACTION_ACCESSED || path.length > 0;\n    }\n    /**\n     * Marks this variable as being part of the bundle\x2C which is usually the case when one of\n     * its identifiers becomes part of the bundle. Returns true if it has not been included\n     * previously.\n     * Once a variable is included\x2C it should take care all its declarations are included.\n     */\n    include() {\n        this.included = true;\n    }\n    markCalledFromTryStatement() { }\n    setRenderNames(baseName\x2C name) {\n        this.renderBaseName = baseName;\n        this.renderName = name;\n    }\n}\n\nclass ExternalVariable extends Variable {\n    constructor(module\x2C name) {\n        super(name);\n        this.referenced = false;\n        this.module = module;\n        this.isNamespace = name === '*';\n    }\n    addReference(identifier) {\n        this.referenced = true;\n        if (this.name === 'default' || this.name === '*') {\n            this.module.suggestName(identifier.name);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > (this.isNamespace ? 1 : 0);\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            this.module.used = true;\n        }\n    }\n}\n\nconst BLANK = Object.freeze(Object.create(null));\nconst EMPTY_OBJECT = Object.freeze({});\nconst EMPTY_ARRAY = Object.freeze([]);\nconst EMPTY_SET = Object.freeze(new (class extends Set {\n    add() {\n        throw new Error('Cannot add to empty set');\n    }\n})());\n\nconst RESERVED_NAMES = new Set([\n    'await'\x2C\n    'break'\x2C\n    'case'\x2C\n    'catch'\x2C\n    'class'\x2C\n    'const'\x2C\n    'continue'\x2C\n    'debugger'\x2C\n    'default'\x2C\n    'delete'\x2C\n    'do'\x2C\n    'else'\x2C\n    'enum'\x2C\n    'eval'\x2C\n    'export'\x2C\n    'extends'\x2C\n    'false'\x2C\n    'finally'\x2C\n    'for'\x2C\n    'function'\x2C\n    'if'\x2C\n    'implements'\x2C\n    'import'\x2C\n    'in'\x2C\n    'instanceof'\x2C\n    'interface'\x2C\n    'let'\x2C\n    'NaN'\x2C\n    'new'\x2C\n    'null'\x2C\n    'package'\x2C\n    'private'\x2C\n    'protected'\x2C\n    'public'\x2C\n    'return'\x2C\n    'static'\x2C\n    'super'\x2C\n    'switch'\x2C\n    'this'\x2C\n    'throw'\x2C\n    'true'\x2C\n    'try'\x2C\n    'typeof'\x2C\n    'undefined'\x2C\n    'var'\x2C\n    'void'\x2C\n    'while'\x2C\n    'with'\x2C\n    'yield'\n]);\nconst RESERVED_NAMES$1 = RESERVED_NAMES;\n\nconst illegalCharacters = /[^\\w$]/g;\nconst startsWithDigit = (value) => /\\d/.test(value[0]);\nconst needsEscape = (value) => startsWithDigit(value) || RESERVED_NAMES$1.has(value) || value === 'arguments';\nfunction isLegal(value) {\n    if (needsEscape(value)) {\n        return false;\n    }\n    return !illegalCharacters.test(value);\n}\nfunction makeLegal(value) {\n    value = value\n        .replace(/-(\\w)/g\x2C (_\x2C letter) => letter.toUpperCase())\n        .replace(illegalCharacters\x2C '_');\n    if (needsEscape(value))\n        value = `_${value}`;\n    return value || '_';\n}\n\nconst LOGLEVEL_SILENT = 'silent';\nconst LOGLEVEL_ERROR = 'error';\nconst LOGLEVEL_WARN = 'warn';\nconst LOGLEVEL_INFO = 'info';\nconst LOGLEVEL_DEBUG = 'debug';\nconst logLevelPriority = {\n    [LOGLEVEL_DEBUG]: 0\x2C\n    [LOGLEVEL_INFO]: 1\x2C\n    [LOGLEVEL_SILENT]: 3\x2C\n    [LOGLEVEL_WARN]: 2\n};\n\n/** @typedef {import('./types').Location} Location */\n\n/**\n * @param {import('./types').Range} range\n * @param {number} index\n */\nfunction rangeContains(range\x2C index) {\n\x09return range.start <= index && index < range.end;\n}\n\n/**\n * @param {string} source\n * @param {import('./types').Options} [options]\n */\nfunction getLocator(source\x2C options = {}) {\n\x09const { offsetLine = 0\x2C offsetColumn = 0 } = options;\n\n\x09let start = 0;\n\x09const ranges = source.split('\\n').map((line\x2C i) => {\n\x09\x09const end = start + line.length + 1;\n\n\x09\x09/** @type {import('./types').Range} */\n\x09\x09const range = { start\x2C end\x2C line: i };\n\n\x09\x09start = end;\n\x09\x09return range;\n\x09});\n\n\x09let i = 0;\n\n\x09/**\n\x09 * @param {string | number} search\n\x09 * @param {number} [index]\n\x09 * @returns {Location | undefined}\n\x09 */\n\x09function locator(search\x2C index) {\n\x09\x09if (typeof search === 'string') {\n\x09\x09\x09search = source.indexOf(search\x2C index ?? 0);\n\x09\x09}\n\n\x09\x09if (search === -1) return undefined;\n\n\x09\x09let range = ranges[i];\n\n\x09\x09const d = search >= range.end ? 1 : -1;\n\n\x09\x09while (range) {\n\x09\x09\x09if (rangeContains(range\x2C search)) {\n\x09\x09\x09\x09return {\n\x09\x09\x09\x09\x09line: offsetLine + range.line\x2C\n\x09\x09\x09\x09\x09column: offsetColumn + search - range.start\x2C\n\x09\x09\x09\x09\x09character: search\n\x09\x09\x09\x09};\n\x09\x09\x09}\n\n\x09\x09\x09i += d;\n\x09\x09\x09range = ranges[i];\n\x09\x09}\n\x09}\n\n\x09return locator;\n}\n\n/**\n * @param {string} source\n * @param {string | number} search\n * @param {import('./types').Options} [options]\n * @returns {Location | undefined}\n */\nfunction locate(source\x2C search\x2C options) {\n\x09return getLocator(source\x2C options)(search\x2C options && options.startIndex);\n}\n\nfunction spaces(index) {\n    let result = '';\n    while (index--)\n        result += ' ';\n    return result;\n}\nfunction tabsToSpaces(value) {\n    return value.replace(/^\\t+/\x2C match => match.split('\\t').join('  '));\n}\nconst LINE_TRUNCATE_LENGTH = 120;\nconst MIN_CHARACTERS_SHOWN_AFTER_LOCATION = 10;\nconst ELLIPSIS = '...';\nfunction getCodeFrame(source\x2C line\x2C column) {\n    let lines = source.split('\\n');\n    // Needed if a plugin did not generate correct sourcemaps\n    if (line > lines.length)\n        return '';\n    const maxLineLength = Math.max(tabsToSpaces(lines[line - 1].slice(0\x2C column)).length +\n        MIN_CHARACTERS_SHOWN_AFTER_LOCATION +\n        ELLIPSIS.length\x2C LINE_TRUNCATE_LENGTH);\n    const frameStart = Math.max(0\x2C line - 3);\n    let frameEnd = Math.min(line + 2\x2C lines.length);\n    lines = lines.slice(frameStart\x2C frameEnd);\n    while (!/\\S/.test(lines[lines.length - 1])) {\n        lines.pop();\n        frameEnd -= 1;\n    }\n    const digits = String(frameEnd).length;\n    return lines\n        .map((sourceLine\x2C index) => {\n        const isErrorLine = frameStart + index + 1 === line;\n        let lineNumber = String(index + frameStart + 1);\n        while (lineNumber.length < digits)\n            lineNumber = ` ${lineNumber}`;\n        let displayedLine = tabsToSpaces(sourceLine);\n        if (displayedLine.length > maxLineLength) {\n            displayedLine = `${displayedLine.slice(0\x2C maxLineLength - ELLIPSIS.length)}${ELLIPSIS}`;\n        }\n        if (isErrorLine) {\n            const indicator = spaces(digits + 2 + tabsToSpaces(sourceLine.slice(0\x2C column)).length) + '^';\n            return `${lineNumber}: ${displayedLine}\\n${indicator}`;\n        }\n        return `${lineNumber}: ${displayedLine}`;\n    })\n        .join('\\n');\n}\n\nfunction printQuotedStringList(list\x2C verbs) {\n    const isSingleItem = list.length <= 1;\n    const quotedList = list.map(item => `"${item}"`);\n    let output = isSingleItem\n        ? quotedList[0]\n        : `${quotedList.slice(0\x2C -1).join('\x2C ')} and ${quotedList.slice(-1)[0]}`;\n    if (verbs) {\n        output += ` ${isSingleItem ? verbs[0] : verbs[1]}`;\n    }\n    return output;\n}\n\nfunction isValidUrl(url) {\n    try {\n        new URL(url);\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction getRollupUrl(snippet) {\n    return `https://rollupjs.org/${snippet}`;\n}\nfunction addTrailingSlashIfMissed(url) {\n    if (!url.endsWith('/')) {\n        return url + '/';\n    }\n    return url;\n}\n\n// troubleshooting\nconst URL_AVOIDING_EVAL = 'troubleshooting/#avoiding-eval';\nconst URL_NAME_IS_NOT_EXPORTED = 'troubleshooting/#error-name-is-not-exported-by-module';\nconst URL_THIS_IS_UNDEFINED = 'troubleshooting/#error-this-is-undefined';\nconst URL_TREATING_MODULE_AS_EXTERNAL_DEPENDENCY = 'troubleshooting/#warning-treating-module-as-external-dependency';\nconst URL_SOURCEMAP_IS_LIKELY_TO_BE_INCORRECT = 'troubleshooting/#warning-sourcemap-is-likely-to-be-incorrect';\n// configuration-options\nconst URL_MAXPARALLELFILEOPS = 'configuration-options/#maxparallelfileops';\nconst URL_OUTPUT_AMD_ID = 'configuration-options/#output-amd-id';\nconst URL_OUTPUT_AMD_BASEPATH = 'configuration-options/#output-amd-basepath';\nconst URL_OUTPUT_DIR = 'configuration-options/#output-dir';\nconst URL_OUTPUT_DYNAMICIMPORTFUNCTION = 'configuration-options/#output-dynamicimportfunction';\nconst URL_OUTPUT_EXPORTS = 'configuration-options/#output-exports';\nconst URL_OUTPUT_EXTEND = 'configuration-options/#output-extend';\nconst URL_OUTPUT_FORMAT = 'configuration-options/#output-format';\nconst URL_OUTPUT_GENERATEDCODE = 'configuration-options/#output-generatedcode';\nconst URL_OUTPUT_EXPERIMENTALDEEPCHUNKOPTIMIZATION = 'configuration-options/#output-experimentaldeepdynamicchunkoptimization';\nconst URL_OUTPUT_GENERATEDCODE_CONSTBINDINGS = 'configuration-options/#output-generatedcode-constbindings';\nconst URL_OUTPUT_GENERATEDCODE_SYMBOLS = 'configuration-options/#output-generatedcode-symbols';\nconst URL_OUTPUT_GLOBALS = 'configuration-options/#output-globals';\nconst URL_OUTPUT_INLINEDYNAMICIMPORTS = 'configuration-options/#output-inlinedynamicimports';\nconst URL_OUTPUT_INTEROP = 'configuration-options/#output-interop';\nconst URL_OUTPUT_MANUALCHUNKS = 'configuration-options/#output-manualchunks';\nconst URL_OUTPUT_NAME = 'configuration-options/#output-name';\nconst URL_OUTPUT_PRESERVEMODULES = 'configuration-options/#output-preservemodules';\nconst URL_OUTPUT_SOURCEMAPBASEURL = 'configuration-options/#output-sourcemapbaseurl';\nconst URL_OUTPUT_SOURCEMAPFILE = 'configuration-options/#output-sourcemapfile';\nconst URL_PRESERVEENTRYSIGNATURES = 'configuration-options/#preserveentrysignatures';\nconst URL_TREESHAKE = 'configuration-options/#treeshake';\nconst URL_TREESHAKE_MODULESIDEEFFECTS = 'configuration-options/#treeshake-modulesideeffects';\nconst URL_WATCH = 'configuration-options/#watch';\nconst URL_RENDERDYNAMICIMPORT = 'plugin-development/#renderdynamicimport';\nconst URL_THIS_GETMODULEIDS = 'plugin-development/#this-getmoduleids';\nconst URL_THIS_GETMODULEINFO = 'plugin-development/#this-getmoduleinfo';\n\nfunction error(base) {\n    if (!(base instanceof Error)) {\n        base = Object.assign(new Error(base.message)\x2C base);\n        Object.defineProperty(base\x2C 'name'\x2C { value: 'RollupError' });\n    }\n    throw base;\n}\nfunction augmentCodeLocation(properties\x2C pos\x2C source\x2C id) {\n    if (typeof pos === 'object') {\n        const { line\x2C column } = pos;\n        properties.loc = { column\x2C file: id\x2C line };\n    }\n    else {\n        properties.pos = pos;\n        const { line\x2C column } = locate(source\x2C pos\x2C { offsetLine: 1 });\n        properties.loc = { column\x2C file: id\x2C line };\n    }\n    if (properties.frame === undefined) {\n        const { line\x2C column } = properties.loc;\n        properties.frame = getCodeFrame(source\x2C line\x2C column);\n    }\n}\n// Error codes should be sorted alphabetically while errors should be sorted by\n// error code below\nconst ADDON_ERROR = 'ADDON_ERROR'\x2C ALREADY_CLOSED = 'ALREADY_CLOSED'\x2C AMBIGUOUS_EXTERNAL_NAMESPACES = 'AMBIGUOUS_EXTERNAL_NAMESPACES'\x2C ANONYMOUS_PLUGIN_CACHE = 'ANONYMOUS_PLUGIN_CACHE'\x2C ASSET_NOT_FINALISED = 'ASSET_NOT_FINALISED'\x2C ASSET_NOT_FOUND = 'ASSET_NOT_FOUND'\x2C ASSET_SOURCE_ALREADY_SET = 'ASSET_SOURCE_ALREADY_SET'\x2C ASSET_SOURCE_MISSING = 'ASSET_SOURCE_MISSING'\x2C BAD_LOADER = 'BAD_LOADER'\x2C CANNOT_CALL_NAMESPACE = 'CANNOT_CALL_NAMESPACE'\x2C CANNOT_EMIT_FROM_OPTIONS_HOOK = 'CANNOT_EMIT_FROM_OPTIONS_HOOK'\x2C CHUNK_NOT_GENERATED = 'CHUNK_NOT_GENERATED'\x2C CHUNK_INVALID = 'CHUNK_INVALID'\x2C CIRCULAR_DEPENDENCY = 'CIRCULAR_DEPENDENCY'\x2C CIRCULAR_REEXPORT = 'CIRCULAR_REEXPORT'\x2C CYCLIC_CROSS_CHUNK_REEXPORT = 'CYCLIC_CROSS_CHUNK_REEXPORT'\x2C DEPRECATED_FEATURE = 'DEPRECATED_FEATURE'\x2C DUPLICATE_PLUGIN_NAME = 'DUPLICATE_PLUGIN_NAME'\x2C EMPTY_BUNDLE = 'EMPTY_BUNDLE'\x2C EVAL = 'EVAL'\x2C EXTERNAL_MODULES_CANNOT_BE_INCLUDED_IN_MANUAL_CHUNKS = 'EXTERNAL_MODULES_CANNOT_BE_INCLUDED_IN_MANUAL_CHUNKS'\x2C EXTERNAL_MODULES_CANNOT_BE_TRANSFORMED_TO_MODULES = 'EXTERNAL_MODULES_CANNOT_BE_TRANSFORMED_TO_MODULES'\x2C EXTERNAL_SYNTHETIC_EXPORTS = 'EXTERNAL_SYNTHETIC_EXPORTS'\x2C FILE_NAME_CONFLICT = 'FILE_NAME_CONFLICT'\x2C FILE_NOT_FOUND = 'FILE_NOT_FOUND'\x2C FIRST_SIDE_EFFECT = 'FIRST_SIDE_EFFECT'\x2C ILLEGAL_IDENTIFIER_AS_NAME = 'ILLEGAL_IDENTIFIER_AS_NAME'\x2C ILLEGAL_REASSIGNMENT = 'ILLEGAL_REASSIGNMENT'\x2C INCONSISTENT_IMPORT_ASSERTIONS = 'INCONSISTENT_IMPORT_ASSERTIONS'\x2C INPUT_HOOK_IN_OUTPUT_PLUGIN = 'INPUT_HOOK_IN_OUTPUT_PLUGIN'\x2C INVALID_CHUNK = 'INVALID_CHUNK'\x2C INVALID_EXPORT_OPTION = 'INVALID_EXPORT_OPTION'\x2C INVALID_EXTERNAL_ID = 'INVALID_EXTERNAL_ID'\x2C INVALID_LOG_POSITION = 'INVALID_LOG_POSITION'\x2C INVALID_OPTION = 'INVALID_OPTION'\x2C INVALID_PLUGIN_HOOK = 'INVALID_PLUGIN_HOOK'\x2C INVALID_ROLLUP_PHASE = 'INVALID_ROLLUP_PHASE'\x2C INVALID_SETASSETSOURCE = 'INVALID_SETASSETSOURCE'\x2C INVALID_TLA_FORMAT = 'INVALID_TLA_FORMAT'\x2C MISSING_EXPORT = 'MISSING_EXPORT'\x2C MISSING_GLOBAL_NAME = 'MISSING_GLOBAL_NAME'\x2C MISSING_IMPLICIT_DEPENDANT = 'MISSING_IMPLICIT_DEPENDANT'\x2C MISSING_NAME_OPTION_FOR_IIFE_EXPORT = 'MISSING_NAME_OPTION_FOR_IIFE_EXPORT'\x2C MISSING_NODE_BUILTINS = 'MISSING_NODE_BUILTINS'\x2C MISSING_OPTION = 'MISSING_OPTION'\x2C MIXED_EXPORTS = 'MIXED_EXPORTS'\x2C MODULE_LEVEL_DIRECTIVE = 'MODULE_LEVEL_DIRECTIVE'\x2C NAMESPACE_CONFLICT = 'NAMESPACE_CONFLICT'\x2C NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE = 'NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE'\x2C OPTIMIZE_CHUNK_STATUS = 'OPTIMIZE_CHUNK_STATUS'\x2C PARSE_ERROR = 'PARSE_ERROR'\x2C PLUGIN_ERROR = 'PLUGIN_ERROR'\x2C SHIMMED_EXPORT = 'SHIMMED_EXPORT'\x2C SOURCEMAP_BROKEN = 'SOURCEMAP_BROKEN'\x2C SOURCEMAP_ERROR = 'SOURCEMAP_ERROR'\x2C SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT = 'SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT'\x2C THIS_IS_UNDEFINED = 'THIS_IS_UNDEFINED'\x2C UNEXPECTED_NAMED_IMPORT = 'UNEXPECTED_NAMED_IMPORT'\x2C UNKNOWN_OPTION = 'UNKNOWN_OPTION'\x2C UNRESOLVED_ENTRY = 'UNRESOLVED_ENTRY'\x2C UNRESOLVED_IMPORT = 'UNRESOLVED_IMPORT'\x2C UNUSED_EXTERNAL_IMPORT = 'UNUSED_EXTERNAL_IMPORT'\x2C VALIDATION_ERROR = 'VALIDATION_ERROR';\nfunction logAddonNotGenerated(message\x2C hook\x2C plugin) {\n    return {\n        code: ADDON_ERROR\x2C\n        message: `Could not retrieve "${hook}". Check configuration of plugin "${plugin}".\n\\tError Message: ${message}`\n    };\n}\nfunction logAlreadyClosed() {\n    return {\n        code: ALREADY_CLOSED\x2C\n        message: 'Bundle is already closed\x2C no more calls to "generate" or "write" are allowed.'\n    };\n}\nfunction logAmbiguousExternalNamespaces(binding\x2C reexportingModule\x2C usedModule\x2C sources) {\n    return {\n        binding\x2C\n        code: AMBIGUOUS_EXTERNAL_NAMESPACES\x2C\n        ids: sources\x2C\n        message: `Ambiguous external namespace resolution: "${relativeId(reexportingModule)}" re-exports "${binding}" from one of the external modules ${printQuotedStringList(sources.map(module => relativeId(module)))}\x2C guessing "${relativeId(usedModule)}".`\x2C\n        reexporter: reexportingModule\n    };\n}\nfunction logAnonymousPluginCache() {\n    return {\n        code: ANONYMOUS_PLUGIN_CACHE\x2C\n        message: 'A plugin is trying to use the Rollup cache but is not declaring a plugin name or cacheKey.'\n    };\n}\nfunction logAssetNotFinalisedForFileName(name) {\n    return {\n        code: ASSET_NOT_FINALISED\x2C\n        message: `Plugin error - Unable to get file name for asset "${name}". Ensure that the source is set and that generate is called first. If you reference assets via import.meta.ROLLUP_FILE_URL_<referenceId>\x2C you need to either have set their source after "renderStart" or need to provide an explicit "fileName" when emitting them.`\n    };\n}\nfunction logAssetReferenceIdNotFoundForSetSource(assetReferenceId) {\n    return {\n        code: ASSET_NOT_FOUND\x2C\n        message: `Plugin error - Unable to set the source for unknown asset "${assetReferenceId}".`\n    };\n}\nfunction logAssetSourceAlreadySet(name) {\n    return {\n        code: ASSET_SOURCE_ALREADY_SET\x2C\n        message: `Unable to set the source for asset "${name}"\x2C source already set.`\n    };\n}\nfunction logNoAssetSourceSet(assetName) {\n    return {\n        code: ASSET_SOURCE_MISSING\x2C\n        message: `Plugin error creating asset "${assetName}" - no asset source set.`\n    };\n}\nfunction logBadLoader(id) {\n    return {\n        code: BAD_LOADER\x2C\n        message: `Error loading "${relativeId(id)}": plugin load hook should return a string\x2C a { code\x2C map } object\x2C or nothing/null.`\n    };\n}\nfunction logCannotCallNamespace(name) {\n    return {\n        code: CANNOT_CALL_NAMESPACE\x2C\n        message: `Cannot call a namespace ("${name}").`\n    };\n}\nfunction logCannotEmitFromOptionsHook() {\n    return {\n        code: CANNOT_EMIT_FROM_OPTIONS_HOOK\x2C\n        message: `Cannot emit files or set asset sources in the "outputOptions" hook\x2C use the "renderStart" hook instead.`\n    };\n}\nfunction logChunkNotGeneratedForFileName(name) {\n    return {\n        code: CHUNK_NOT_GENERATED\x2C\n        message: `Plugin error - Unable to get file name for emitted chunk "${name}". You can only get file names once chunks have been generated after the "renderStart" hook.`\n    };\n}\nfunction logChunkInvalid({ fileName\x2C code }\x2C exception) {\n    const errorProperties = {\n        code: CHUNK_INVALID\x2C\n        message: `Chunk "${fileName}" is not valid JavaScript: ${exception.message}.`\n    };\n    augmentCodeLocation(errorProperties\x2C exception.loc\x2C code\x2C fileName);\n    return errorProperties;\n}\nfunction logCircularDependency(cyclePath) {\n    return {\n        code: CIRCULAR_DEPENDENCY\x2C\n        ids: cyclePath\x2C\n        message: `Circular dependency: ${cyclePath.map(relativeId).join(' -> ')}`\n    };\n}\nfunction logCircularReexport(exportName\x2C exporter) {\n    return {\n        code: CIRCULAR_REEXPORT\x2C\n        exporter\x2C\n        message: `"${exportName}" cannot be exported from "${relativeId(exporter)}" as it is a reexport that references itself.`\n    };\n}\nfunction logCyclicCrossChunkReexport(exportName\x2C exporter\x2C reexporter\x2C importer\x2C preserveModules) {\n    return {\n        code: CYCLIC_CROSS_CHUNK_REEXPORT\x2C\n        exporter\x2C\n        id: importer\x2C\n        message: `Export "${exportName}" of module "${relativeId(exporter)}" was reexported through module "${relativeId(reexporter)}" while both modules are dependencies of each other and will end up in different chunks by current Rollup settings. This scenario is not well supported at the moment as it will produce a circular dependency between chunks and will likely lead to broken execution order.\\nEither change the import in "${relativeId(importer)}" to point directly to the exporting module or ${preserveModules ? 'do not use "output.preserveModules"' : 'reconfigure "output.manualChunks"'} to ensure these modules end up in the same chunk.`\x2C\n        reexporter\n    };\n}\nfunction logDeprecation(deprecation\x2C urlSnippet\x2C plugin) {\n    return {\n        code: DEPRECATED_FEATURE\x2C\n        message: deprecation\x2C\n        url: getRollupUrl(urlSnippet)\x2C\n        ...(plugin ? { plugin } : {})\n    };\n}\nfunction logDuplicatePluginName(plugin) {\n    return {\n        code: DUPLICATE_PLUGIN_NAME\x2C\n        message: `The plugin name ${plugin} is being used twice in the same build. Plugin names must be distinct or provide a cacheKey (please post an issue to the plugin if you are a plugin user).`\n    };\n}\nfunction logEmptyChunk(chunkName) {\n    return {\n        code: EMPTY_BUNDLE\x2C\n        message: `Generated an empty chunk: "${chunkName}".`\x2C\n        names: [chunkName]\n    };\n}\nfunction logEval(id) {\n    return {\n        code: EVAL\x2C\n        id\x2C\n        message: `Use of eval in "${relativeId(id)}" is strongly discouraged as it poses security risks and may cause issues with minification.`\x2C\n        url: getRollupUrl(URL_AVOIDING_EVAL)\n    };\n}\nfunction logExternalSyntheticExports(id\x2C importer) {\n    return {\n        code: EXTERNAL_SYNTHETIC_EXPORTS\x2C\n        exporter: id\x2C\n        message: `External "${id}" cannot have "syntheticNamedExports" enabled (imported by "${relativeId(importer)}").`\n    };\n}\nfunction logFileNameConflict(fileName) {\n    return {\n        code: FILE_NAME_CONFLICT\x2C\n        message: `The emitted file "${fileName}" overwrites a previously emitted file of the same name.`\n    };\n}\nfunction logFileReferenceIdNotFoundForFilename(assetReferenceId) {\n    return {\n        code: FILE_NOT_FOUND\x2C\n        message: `Plugin error - Unable to get file name for unknown file "${assetReferenceId}".`\n    };\n}\nfunction logFirstSideEffect(source\x2C id\x2C { line\x2C column }) {\n    return {\n        code: FIRST_SIDE_EFFECT\x2C\n        message: `First side effect in ${relativeId(id)} is at (${line}:${column})\\n${getCodeFrame(source\x2C line\x2C column)}`\n    };\n}\nfunction logIllegalIdentifierAsName(name) {\n    return {\n        code: ILLEGAL_IDENTIFIER_AS_NAME\x2C\n        message: `Given name "${name}" is not a legal JS identifier. If you need this\x2C you can try "output.extend: true".`\x2C\n        url: getRollupUrl(URL_OUTPUT_EXTEND)\n    };\n}\nfunction logIllegalImportReassignment(name\x2C importingId) {\n    return {\n        code: ILLEGAL_REASSIGNMENT\x2C\n        message: `Illegal reassignment of import "${name}" in "${relativeId(importingId)}".`\n    };\n}\nfunction logInconsistentImportAssertions(existingAssertions\x2C newAssertions\x2C source\x2C importer) {\n    return {\n        code: INCONSISTENT_IMPORT_ASSERTIONS\x2C\n        message: `Module "${relativeId(importer)}" tried to import "${relativeId(source)}" with ${formatAssertions(newAssertions)} assertions\x2C but it was already imported elsewhere with ${formatAssertions(existingAssertions)} assertions. Please ensure that import assertions for the same module are always consistent.`\n    };\n}\nconst formatAssertions = (assertions) => {\n    const entries = Object.entries(assertions);\n    if (entries.length === 0)\n        return 'no';\n    return entries.map(([key\x2C value]) => `"${key}": "${value}"`).join('\x2C ');\n};\nfunction logInputHookInOutputPlugin(pluginName\x2C hookName) {\n    return {\n        code: INPUT_HOOK_IN_OUTPUT_PLUGIN\x2C\n        message: `The "${hookName}" hook used by the output plugin ${pluginName} is a build time hook and will not be run for that plugin. Either this plugin cannot be used as an output plugin\x2C or it should have an option to configure it as an output plugin.`\n    };\n}\nfunction logCannotAssignModuleToChunk(moduleId\x2C assignToAlias\x2C currentAlias) {\n    return {\n        code: INVALID_CHUNK\x2C\n        message: `Cannot assign "${relativeId(moduleId)}" to the "${assignToAlias}" chunk as it is already in the "${currentAlias}" chunk.`\n    };\n}\nfunction logInvalidExportOptionValue(optionValue) {\n    return {\n        code: INVALID_EXPORT_OPTION\x2C\n        message: `"output.exports" must be "default"\x2C "named"\x2C "none"\x2C "auto"\x2C or left unspecified (defaults to "auto")\x2C received "${optionValue}".`\x2C\n        url: getRollupUrl(URL_OUTPUT_EXPORTS)\n    };\n}\nfunction logIncompatibleExportOptionValue(optionValue\x2C keys\x2C entryModule) {\n    return {\n        code: INVALID_EXPORT_OPTION\x2C\n        message: `"${optionValue}" was specified for "output.exports"\x2C but entry module "${relativeId(entryModule)}" has the following exports: ${printQuotedStringList(keys)}`\x2C\n        url: getRollupUrl(URL_OUTPUT_EXPORTS)\n    };\n}\nfunction logInternalIdCannotBeExternal(source\x2C importer) {\n    return {\n        code: INVALID_EXTERNAL_ID\x2C\n        message: `"${source}" is imported as an external by "${relativeId(importer)}"\x2C but is already an existing non-external module id.`\n    };\n}\nfunction logInvalidLogPosition(plugin) {\n    return {\n        code: INVALID_LOG_POSITION\x2C\n        message: `Plugin "${plugin}" tried to add a file position to a log or warning. This is only supported in the "transform" hook at the moment and will be ignored.`\n    };\n}\nfunction logInvalidOption(option\x2C urlSnippet\x2C explanation\x2C value) {\n    return {\n        code: INVALID_OPTION\x2C\n        message: `Invalid value ${value === undefined ? '' : `${JSON.stringify(value)} `}for option "${option}" - ${explanation}.`\x2C\n        url: getRollupUrl(urlSnippet)\n    };\n}\nfunction logInvalidAddonPluginHook(hook\x2C plugin) {\n    return {\n        code: INVALID_PLUGIN_HOOK\x2C\n        hook\x2C\n        message: `Error running plugin hook "${hook}" for plugin "${plugin}"\x2C expected a string\x2C a function hook or an object with a "handler" string or function.`\x2C\n        plugin\n    };\n}\nfunction logInvalidFunctionPluginHook(hook\x2C plugin) {\n    return {\n        code: INVALID_PLUGIN_HOOK\x2C\n        hook\x2C\n        message: `Error running plugin hook "${hook}" for plugin "${plugin}"\x2C expected a function hook or an object with a "handler" function.`\x2C\n        plugin\n    };\n}\nfunction logInvalidRollupPhaseForAddWatchFile() {\n    return {\n        code: INVALID_ROLLUP_PHASE\x2C\n        message: `Cannot call "addWatchFile" after the build has finished.`\n    };\n}\nfunction logInvalidRollupPhaseForChunkEmission() {\n    return {\n        code: INVALID_ROLLUP_PHASE\x2C\n        message: `Cannot emit chunks after module loading has finished.`\n    };\n}\nfunction logInvalidSetAssetSourceCall() {\n    return {\n        code: INVALID_SETASSETSOURCE\x2C\n        message: `setAssetSource cannot be called in transform for caching reasons. Use emitFile with a source\x2C or call setAssetSource in another hook.`\n    };\n}\nfunction logInvalidFormatForTopLevelAwait(id\x2C format) {\n    return {\n        code: INVALID_TLA_FORMAT\x2C\n        id\x2C\n        message: `Module format "${format}" does not support top-level await. Use the "es" or "system" output formats rather.`\n    };\n}\nfunction logMissingExport(binding\x2C importingModule\x2C exporter) {\n    const isJson = extname(exporter) === '.json';\n    return {\n        binding\x2C\n        code: MISSING_EXPORT\x2C\n        exporter\x2C\n        id: importingModule\x2C\n        message: `"${binding}" is not exported by "${relativeId(exporter)}"\x2C imported by "${relativeId(importingModule)}".${isJson ? ' (Note that you need @rollup/plugin-json to import JSON files)' : ''}`\x2C\n        url: getRollupUrl(URL_NAME_IS_NOT_EXPORTED)\n    };\n}\nfunction logMissingGlobalName(externalId\x2C guess) {\n    return {\n        code: MISSING_GLOBAL_NAME\x2C\n        id: externalId\x2C\n        message: `No name was provided for external module "${externalId}" in "output.globals" \u2013 guessing "${guess}".`\x2C\n        names: [guess]\x2C\n        url: getRollupUrl(URL_OUTPUT_GLOBALS)\n    };\n}\nfunction logImplicitDependantCannotBeExternal(unresolvedId\x2C implicitlyLoadedBefore) {\n    return {\n        code: MISSING_IMPLICIT_DEPENDANT\x2C\n        message: `Module "${relativeId(unresolvedId)}" that should be implicitly loaded before "${relativeId(implicitlyLoadedBefore)}" cannot be external.`\n    };\n}\nfunction logUnresolvedImplicitDependant(unresolvedId\x2C implicitlyLoadedBefore) {\n    return {\n        code: MISSING_IMPLICIT_DEPENDANT\x2C\n        message: `Module "${relativeId(unresolvedId)}" that should be implicitly loaded before "${relativeId(implicitlyLoadedBefore)}" could not be resolved.`\n    };\n}\nfunction logImplicitDependantIsNotIncluded(module) {\n    const implicitDependencies = [...module.implicitlyLoadedBefore]\n        .map(dependency => relativeId(dependency.id))\n        .sort();\n    return {\n        code: MISSING_IMPLICIT_DEPENDANT\x2C\n        message: `Module "${relativeId(module.id)}" that should be implicitly loaded before ${printQuotedStringList(implicitDependencies)} is not included in the module graph. Either it was not imported by an included module or only via a tree-shaken dynamic import\x2C or no imported bindings were used and it had otherwise no side-effects.`\n    };\n}\nfunction logMissingNameOptionForIifeExport() {\n    return {\n        code: MISSING_NAME_OPTION_FOR_IIFE_EXPORT\x2C\n        message: `If you do not supply "output.name"\x2C you may not be able to access the exports of an IIFE bundle.`\x2C\n        url: getRollupUrl(URL_OUTPUT_NAME)\n    };\n}\nfunction logMissingNameOptionForUmdExport() {\n    return {\n        code: MISSING_NAME_OPTION_FOR_IIFE_EXPORT\x2C\n        message: 'You must supply "output.name" for UMD bundles that have exports so that the exports are accessible in environments without a module loader.'\x2C\n        url: getRollupUrl(URL_OUTPUT_NAME)\n    };\n}\nfunction logMissingNodeBuiltins(externalBuiltins) {\n    return {\n        code: MISSING_NODE_BUILTINS\x2C\n        ids: externalBuiltins\x2C\n        message: `Creating a browser bundle that depends on Node.js built-in modules (${printQuotedStringList(externalBuiltins)}). You might need to include https://github.com/FredKSchott/rollup-plugin-polyfill-node`\n    };\n}\n// eslint-disable-next-line unicorn/prevent-abbreviations\nfunction logMissingFileOrDirOption() {\n    return {\n        code: MISSING_OPTION\x2C\n        message: 'You must specify "output.file" or "output.dir" for the build.'\x2C\n        url: getRollupUrl(URL_OUTPUT_DIR)\n    };\n}\nfunction logMixedExport(facadeModuleId\x2C name) {\n    return {\n        code: MIXED_EXPORTS\x2C\n        id: facadeModuleId\x2C\n        message: `Entry module "${relativeId(facadeModuleId)}" is using named and default exports together. Consumers of your bundle will have to use \\`${name || 'chunk'}.default\\` to access the default export\x2C which may not be what you want. Use \\`output.exports: "named"\\` to disable this warning.`\x2C\n        url: getRollupUrl(URL_OUTPUT_EXPORTS)\n    };\n}\nfunction logModuleLevelDirective(directive\x2C id) {\n    return {\n        code: MODULE_LEVEL_DIRECTIVE\x2C\n        id\x2C\n        message: `Module level directives cause errors when bundled\x2C "${directive}" in "${relativeId(id)}" was ignored.`\n    };\n}\nfunction logNamespaceConflict(binding\x2C reexportingModuleId\x2C sources) {\n    return {\n        binding\x2C\n        code: NAMESPACE_CONFLICT\x2C\n        ids: sources\x2C\n        message: `Conflicting namespaces: "${relativeId(reexportingModuleId)}" re-exports "${binding}" from one of the modules ${printQuotedStringList(sources.map(moduleId => relativeId(moduleId)))} (will be ignored).`\x2C\n        reexporter: reexportingModuleId\n    };\n}\nfunction logNoTransformMapOrAstWithoutCode(pluginName) {\n    return {\n        code: NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE\x2C\n        message: `The plugin "${pluginName}" returned a "map" or "ast" without returning ` +\n            'a "code". This will be ignored.'\n    };\n}\nfunction logOptimizeChunkStatus(chunks\x2C smallChunks\x2C pointInTime) {\n    return {\n        code: OPTIMIZE_CHUNK_STATUS\x2C\n        message: `${pointInTime}\x2C there are\\n` +\n            `${chunks} chunks\x2C of which\\n` +\n            `${smallChunks} are below minChunkSize.`\n    };\n}\nfunction logParseError(error\x2C moduleId) {\n    let message = error.message.replace(/ \\(\\d+:\\d+\\)$/\x2C '');\n    if (moduleId.endsWith('.json')) {\n        message += ' (Note that you need @rollup/plugin-json to import JSON files)';\n    }\n    else if (!moduleId.endsWith('.js')) {\n        message += ' (Note that you need plugins to import files that are not JavaScript)';\n    }\n    return {\n        cause: error\x2C\n        code: PARSE_ERROR\x2C\n        id: moduleId\x2C\n        message\n    };\n}\nfunction logPluginError(error\x2C plugin\x2C { hook\x2C id } = {}) {\n    const code = error.code;\n    if (!error.pluginCode &&\n        code != null &&\n        (typeof code !== 'string' || (typeof code === 'string' && !code.startsWith('PLUGIN_')))) {\n        error.pluginCode = code;\n    }\n    error.code = PLUGIN_ERROR;\n    error.plugin = plugin;\n    if (hook) {\n        error.hook = hook;\n    }\n    if (id) {\n        error.id = id;\n    }\n    return error;\n}\nfunction logShimmedExport(id\x2C binding) {\n    return {\n        binding\x2C\n        code: SHIMMED_EXPORT\x2C\n        exporter: id\x2C\n        message: `Missing export "${binding}" has been shimmed in module "${relativeId(id)}".`\n    };\n}\nfunction logSourcemapBroken(plugin) {\n    return {\n        code: SOURCEMAP_BROKEN\x2C\n        message: `Sourcemap is likely to be incorrect: a plugin (${plugin}) was used to transform files\x2C but didn't generate a sourcemap for the transformation. Consult the plugin documentation for help`\x2C\n        plugin\x2C\n        url: getRollupUrl(URL_SOURCEMAP_IS_LIKELY_TO_BE_INCORRECT)\n    };\n}\nfunction logConflictingSourcemapSources(filename) {\n    return {\n        code: SOURCEMAP_BROKEN\x2C\n        message: `Multiple conflicting contents for sourcemap source ${filename}`\n    };\n}\nfunction logInvalidSourcemapForError(error\x2C id\x2C column\x2C line\x2C pos) {\n    return {\n        cause: error\x2C\n        code: SOURCEMAP_ERROR\x2C\n        id\x2C\n        loc: {\n            column\x2C\n            file: id\x2C\n            line\n        }\x2C\n        message: `Error when using sourcemap for reporting an error: ${error.message}`\x2C\n        pos\n    };\n}\nfunction logSyntheticNamedExportsNeedNamespaceExport(id\x2C syntheticNamedExportsOption) {\n    return {\n        code: SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT\x2C\n        exporter: id\x2C\n        message: `Module "${relativeId(id)}" that is marked with \\`syntheticNamedExports: ${JSON.stringify(syntheticNamedExportsOption)}\\` needs ${typeof syntheticNamedExportsOption === 'string' && syntheticNamedExportsOption !== 'default'\n            ? `an explicit export named "${syntheticNamedExportsOption}"`\n            : 'a default export'} that does not reexport an unresolved named export of the same module.`\n    };\n}\nfunction logThisIsUndefined() {\n    return {\n        code: THIS_IS_UNDEFINED\x2C\n        message: `The 'this' keyword is equivalent to 'undefined' at the top level of an ES module\x2C and has been rewritten`\x2C\n        url: getRollupUrl(URL_THIS_IS_UNDEFINED)\n    };\n}\nfunction logUnexpectedNamedImport(id\x2C imported\x2C isReexport) {\n    const importType = isReexport ? 'reexport' : 'import';\n    return {\n        code: UNEXPECTED_NAMED_IMPORT\x2C\n        exporter: id\x2C\n        message: `The named export "${imported}" was ${importType}ed from the external module "${relativeId(id)}" even though its interop type is "defaultOnly". Either remove or change this ${importType} or change the value of the "output.interop" option.`\x2C\n        url: getRollupUrl(URL_OUTPUT_INTEROP)\n    };\n}\nfunction logUnexpectedNamespaceReexport(id) {\n    return {\n        code: UNEXPECTED_NAMED_IMPORT\x2C\n        exporter: id\x2C\n        message: `There was a namespace "*" reexport from the external module "${relativeId(id)}" even though its interop type is "defaultOnly". This will be ignored as namespace reexports only reexport named exports. If this is not intended\x2C either remove or change this reexport or change the value of the "output.interop" option.`\x2C\n        url: getRollupUrl(URL_OUTPUT_INTEROP)\n    };\n}\nfunction logUnknownOption(optionType\x2C unknownOptions\x2C validOptions) {\n    return {\n        code: UNKNOWN_OPTION\x2C\n        message: `Unknown ${optionType}: ${unknownOptions.join('\x2C ')}. Allowed options: ${validOptions.join('\x2C ')}`\n    };\n}\nfunction logEntryCannotBeExternal(unresolvedId) {\n    return {\n        code: UNRESOLVED_ENTRY\x2C\n        message: `Entry module "${relativeId(unresolvedId)}" cannot be external.`\n    };\n}\nfunction logExternalModulesCannotBeIncludedInManualChunks(source) {\n    return {\n        code: EXTERNAL_MODULES_CANNOT_BE_INCLUDED_IN_MANUAL_CHUNKS\x2C\n        message: `"${source}" cannot be included in manualChunks because it is resolved as an external module by the "external" option or plugins.`\n    };\n}\nfunction logExternalModulesCannotBeTransformedToModules(source) {\n    return {\n        code: EXTERNAL_MODULES_CANNOT_BE_TRANSFORMED_TO_MODULES\x2C\n        message: `${source} is resolved as a module now\x2C but it was an external module before. Please check whether there are conflicts in your Rollup options "external" and "manualChunks"\x2C manualChunks cannot include external modules.`\n    };\n}\nfunction logUnresolvedEntry(unresolvedId) {\n    return {\n        code: UNRESOLVED_ENTRY\x2C\n        message: `Could not resolve entry module "${relativeId(unresolvedId)}".`\n    };\n}\nfunction logUnresolvedImport(source\x2C importer) {\n    return {\n        code: UNRESOLVED_IMPORT\x2C\n        exporter: source\x2C\n        id: importer\x2C\n        message: `Could not resolve "${source}" from "${relativeId(importer)}"`\n    };\n}\nfunction logUnresolvedImportTreatedAsExternal(source\x2C importer) {\n    return {\n        code: UNRESOLVED_IMPORT\x2C\n        exporter: source\x2C\n        id: importer\x2C\n        message: `"${source}" is imported by "${relativeId(importer)}"\x2C but could not be resolved \u2013 treating it as an external dependency.`\x2C\n        url: getRollupUrl(URL_TREATING_MODULE_AS_EXTERNAL_DEPENDENCY)\n    };\n}\nfunction logUnusedExternalImports(externalId\x2C names\x2C importers) {\n    return {\n        code: UNUSED_EXTERNAL_IMPORT\x2C\n        exporter: externalId\x2C\n        ids: importers\x2C\n        message: `${printQuotedStringList(names\x2C [\n            'is'\x2C\n            'are'\n        ])} imported from external module "${externalId}" but never used in ${printQuotedStringList(importers.map(importer => relativeId(importer)))}.`\x2C\n        names\n    };\n}\nfunction logFailedValidation(message) {\n    return {\n        code: VALIDATION_ERROR\x2C\n        message\n    };\n}\nfunction warnDeprecation(deprecation\x2C urlSnippet\x2C activeDeprecation\x2C options\x2C plugin) {\n    warnDeprecationWithOptions(deprecation\x2C urlSnippet\x2C activeDeprecation\x2C options.onLog\x2C options.strictDeprecations\x2C plugin);\n}\nfunction warnDeprecationWithOptions(deprecation\x2C urlSnippet\x2C activeDeprecation\x2C log\x2C strictDeprecations\x2C plugin) {\n    if (activeDeprecation || strictDeprecations) {\n        const warning = logDeprecation(deprecation\x2C urlSnippet\x2C plugin);\n        if (strictDeprecations) {\n            return error(warning);\n        }\n        log(LOGLEVEL_WARN\x2C warning);\n    }\n}\n\nclass ExternalModule {\n    constructor(options\x2C id\x2C moduleSideEffects\x2C meta\x2C renormalizeRenderPath\x2C assertions) {\n        this.options = options;\n        this.id = id;\n        this.renormalizeRenderPath = renormalizeRenderPath;\n        this.dynamicImporters = [];\n        this.execIndex = Infinity;\n        this.exportedVariables = new Map();\n        this.importers = [];\n        this.reexported = false;\n        this.used = false;\n        this.declarations = new Map();\n        this.mostCommonSuggestion = 0;\n        this.nameSuggestions = new Map();\n        this.suggestedVariableName = makeLegal(id.split(/[/\\\\]/).pop());\n        const { importers\x2C dynamicImporters } = this;\n        const info = (this.info = {\n            assertions\x2C\n            ast: null\x2C\n            code: null\x2C\n            dynamicallyImportedIdResolutions: EMPTY_ARRAY\x2C\n            dynamicallyImportedIds: EMPTY_ARRAY\x2C\n            get dynamicImporters() {\n                return dynamicImporters.sort();\n            }\x2C\n            exportedBindings: null\x2C\n            exports: null\x2C\n            hasDefaultExport: null\x2C\n            get hasModuleSideEffects() {\n                warnDeprecation('Accessing ModuleInfo.hasModuleSideEffects from plugins is deprecated. Please use ModuleInfo.moduleSideEffects instead.'\x2C URL_THIS_GETMODULEINFO\x2C true\x2C options);\n                return info.moduleSideEffects;\n            }\x2C\n            id\x2C\n            implicitlyLoadedAfterOneOf: EMPTY_ARRAY\x2C\n            implicitlyLoadedBefore: EMPTY_ARRAY\x2C\n            importedIdResolutions: EMPTY_ARRAY\x2C\n            importedIds: EMPTY_ARRAY\x2C\n            get importers() {\n                return importers.sort();\n            }\x2C\n            isEntry: false\x2C\n            isExternal: true\x2C\n            isIncluded: null\x2C\n            meta\x2C\n            moduleSideEffects\x2C\n            syntheticNamedExports: false\n        });\n        // Hide the deprecated key so that it only warns when accessed explicitly\n        Object.defineProperty(this.info\x2C 'hasModuleSideEffects'\x2C {\n            enumerable: false\n        });\n    }\n    getVariableForExportName(name) {\n        const declaration = this.declarations.get(name);\n        if (declaration)\n            return [declaration];\n        const externalVariable = new ExternalVariable(this\x2C name);\n        this.declarations.set(name\x2C externalVariable);\n        this.exportedVariables.set(externalVariable\x2C name);\n        return [externalVariable];\n    }\n    suggestName(name) {\n        const value = (this.nameSuggestions.get(name) ?? 0) + 1;\n        this.nameSuggestions.set(name\x2C value);\n        if (value > this.mostCommonSuggestion) {\n            this.mostCommonSuggestion = value;\n            this.suggestedVariableName = name;\n        }\n    }\n    warnUnusedImports() {\n        const unused = [...this.declarations]\n            .filter(([name\x2C declaration]) => name !== '*' && !declaration.included && !this.reexported && !declaration.referenced)\n            .map(([name]) => name);\n        if (unused.length === 0)\n            return;\n        const importersSet = new Set();\n        for (const name of unused) {\n            for (const importer of this.declarations.get(name).module.importers) {\n                importersSet.add(importer);\n            }\n        }\n        const importersArray = [...importersSet];\n        this.options.onLog(LOGLEVEL_WARN\x2C logUnusedExternalImports(this.id\x2C unused\x2C importersArray));\n    }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\x09return x && x.__esModule && Object.prototype.hasOwnProperty.call(x\x2C 'default') ? x['default'] : x;\n}\n\nfunction getAugmentedNamespace(n) {\n  if (n.__esModule) return n;\n  var f = n.default;\n\x09if (typeof f == "function") {\n\x09\x09var a = function a () {\n\x09\x09\x09if (this instanceof a) {\n        return Reflect.construct(f\x2C arguments\x2C this.constructor);\n\x09\x09\x09}\n\x09\x09\x09return f.apply(this\x2C arguments);\n\x09\x09};\n\x09\x09a.prototype = f.prototype;\n  } else a = {};\n  Object.defineProperty(a\x2C '__esModule'\x2C {value: true});\n\x09Object.keys(n).forEach(function (k) {\n\x09\x09var d = Object.getOwnPropertyDescriptor(n\x2C k);\n\x09\x09Object.defineProperty(a\x2C k\x2C d.get ? d : {\n\x09\x09\x09enumerable: true\x2C\n\x09\x09\x09get: function () {\n\x09\x09\x09\x09return n[k];\n\x09\x09\x09}\n\x09\x09});\n\x09});\n\x09return a;\n}\n\nvar utils$3 = {};\n\nconst path$1 = require$$0$1;\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1\x2C2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0\x2C1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\n\nconst POSIX_CHARS = {\n  DOT_LITERAL\x2C\n  PLUS_LITERAL\x2C\n  QMARK_LITERAL\x2C\n  SLASH_LITERAL\x2C\n  ONE_CHAR\x2C\n  QMARK\x2C\n  END_ANCHOR\x2C\n  DOTS_SLASH\x2C\n  NO_DOT\x2C\n  NO_DOTS\x2C\n  NO_DOT_SLASH\x2C\n  NO_DOTS_SLASH\x2C\n  QMARK_NO_DOT\x2C\n  STAR\x2C\n  START_ANCHOR\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS\x2C\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`\x2C\n  QMARK: WIN_NO_SLASH\x2C\n  STAR: `${WIN_NO_SLASH}*?`\x2C\n  DOTS_SLASH: `${DOT_LITERAL}{1\x2C2}(?:[${WIN_SLASH}]|$)`\x2C\n  NO_DOT: `(?!${DOT_LITERAL})`\x2C\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1\x2C2}(?:[${WIN_SLASH}]|$))`\x2C\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0\x2C1}(?:[${WIN_SLASH}]|$))`\x2C\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1\x2C2}(?:[${WIN_SLASH}]|$))`\x2C\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`\x2C\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`\x2C\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE$1 = {\n  alnum: 'a-zA-Z0-9'\x2C\n  alpha: 'a-zA-Z'\x2C\n  ascii: '\\\\x00-\\\\x7F'\x2C\n  blank: ' \\\\t'\x2C\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F'\x2C\n  digit: '0-9'\x2C\n  graph: '\\\\x21-\\\\x7E'\x2C\n  lower: 'a-z'\x2C\n  print: '\\\\x20-\\\\x7E '\x2C\n  punct: '\\\\-!"#$%&\\'()\\\\*+\x2C./:;<=>?@[\\\\]^_`{|}~'\x2C\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f'\x2C\n  upper: 'A-Z'\x2C\n  word: 'A-Za-z0-9_'\x2C\n  xdigit: 'A-Fa-f0-9'\n};\n\nvar constants$2 = {\n  MAX_LENGTH: 1024 * 64\x2C\n  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1\x2C\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g\x2C\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].\x2C$*+?^{}()|\\\\/]+/\x2C\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/\x2C\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g\x2C\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g\x2C\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g\x2C\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*'\x2C\n    '**/**': '**'\x2C\n    '**/**/**': '**'\n  }\x2C\n\n  // Digits\n  CHAR_0: 48\x2C /* 0 */\n  CHAR_9: 57\x2C /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65\x2C /* A */\n  CHAR_LOWERCASE_A: 97\x2C /* a */\n  CHAR_UPPERCASE_Z: 90\x2C /* Z */\n  CHAR_LOWERCASE_Z: 122\x2C /* z */\n\n  CHAR_LEFT_PARENTHESES: 40\x2C /* ( */\n  CHAR_RIGHT_PARENTHESES: 41\x2C /* ) */\n\n  CHAR_ASTERISK: 42\x2C /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38\x2C /* & */\n  CHAR_AT: 64\x2C /* @ */\n  CHAR_BACKWARD_SLASH: 92\x2C /* \\ */\n  CHAR_CARRIAGE_RETURN: 13\x2C /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94\x2C /* ^ */\n  CHAR_COLON: 58\x2C /* : */\n  CHAR_COMMA: 44\x2C /* \x2C */\n  CHAR_DOT: 46\x2C /* . */\n  CHAR_DOUBLE_QUOTE: 34\x2C /* " */\n  CHAR_EQUAL: 61\x2C /* = */\n  CHAR_EXCLAMATION_MARK: 33\x2C /* ! */\n  CHAR_FORM_FEED: 12\x2C /* \\f */\n  CHAR_FORWARD_SLASH: 47\x2C /* / */\n  CHAR_GRAVE_ACCENT: 96\x2C /* ` */\n  CHAR_HASH: 35\x2C /* # */\n  CHAR_HYPHEN_MINUS: 45\x2C /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60\x2C /* < */\n  CHAR_LEFT_CURLY_BRACE: 123\x2C /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91\x2C /* [ */\n  CHAR_LINE_FEED: 10\x2C /* \\n */\n  CHAR_NO_BREAK_SPACE: 160\x2C /* \\u00A0 */\n  CHAR_PERCENT: 37\x2C /* % */\n  CHAR_PLUS: 43\x2C /* + */\n  CHAR_QUESTION_MARK: 63\x2C /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62\x2C /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125\x2C /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93\x2C /* ] */\n  CHAR_SEMICOLON: 59\x2C /* ; */\n  CHAR_SINGLE_QUOTE: 39\x2C /* ' */\n  CHAR_SPACE: 32\x2C /*   */\n  CHAR_TAB: 9\x2C /* \\t */\n  CHAR_UNDERSCORE: 95\x2C /* _ */\n  CHAR_VERTICAL_LINE: 124\x2C /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279\x2C /* \\uFEFF */\n\n  SEP: path$1.sep\x2C\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate'\x2C open: '(?:(?!(?:'\x2C close: `))${chars.STAR})` }\x2C\n      '?': { type: 'qmark'\x2C open: '(?:'\x2C close: ')?' }\x2C\n      '+': { type: 'plus'\x2C open: '(?:'\x2C close: ')+' }\x2C\n      '*': { type: 'star'\x2C open: '(?:'\x2C close: ')*' }\x2C\n      '@': { type: 'at'\x2C open: '(?:'\x2C close: ')' }\n    };\n  }\x2C\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n\n(function (exports) {\n\n\x09const path = require$$0$1;\n\x09const win32 = process.platform === 'win32';\n\x09const {\n\x09  REGEX_BACKSLASH\x2C\n\x09  REGEX_REMOVE_BACKSLASH\x2C\n\x09  REGEX_SPECIAL_CHARS\x2C\n\x09  REGEX_SPECIAL_CHARS_GLOBAL\n\x09} = constants$2;\n\n\x09exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\x09exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\n\x09exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\n\x09exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL\x2C '\\\\$1');\n\x09exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH\x2C '/');\n\n\x09exports.removeBackslashes = str => {\n\x09  return str.replace(REGEX_REMOVE_BACKSLASH\x2C match => {\n\x09    return match === '\\\\' ? '' : match;\n\x09  });\n\x09};\n\n\x09exports.supportsLookbehinds = () => {\n\x09  const segs = process.version.slice(1).split('.').map(Number);\n\x09  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n\x09    return true;\n\x09  }\n\x09  return false;\n\x09};\n\n\x09exports.isWindows = options => {\n\x09  if (options && typeof options.windows === 'boolean') {\n\x09    return options.windows;\n\x09  }\n\x09  return win32 === true || path.sep === '\\\\';\n\x09};\n\n\x09exports.escapeLast = (input\x2C char\x2C lastIdx) => {\n\x09  const idx = input.lastIndexOf(char\x2C lastIdx);\n\x09  if (idx === -1) return input;\n\x09  if (input[idx - 1] === '\\\\') return exports.escapeLast(input\x2C char\x2C idx - 1);\n\x09  return `${input.slice(0\x2C idx)}\\\\${input.slice(idx)}`;\n\x09};\n\n\x09exports.removePrefix = (input\x2C state = {}) => {\n\x09  let output = input;\n\x09  if (output.startsWith('./')) {\n\x09    output = output.slice(2);\n\x09    state.prefix = './';\n\x09  }\n\x09  return output;\n\x09};\n\n\x09exports.wrapOutput = (input\x2C state = {}\x2C options = {}) => {\n\x09  const prepend = options.contains ? '' : '^';\n\x09  const append = options.contains ? '' : '$';\n\n\x09  let output = `${prepend}(?:${input})${append}`;\n\x09  if (state.negated === true) {\n\x09    output = `(?:^(?!${output}).*$)`;\n\x09  }\n\x09  return output;\n\x09}; \n} (utils$3));\n\nconst utils$2 = utils$3;\nconst {\n  CHAR_ASTERISK\x2C             /* * */\n  CHAR_AT\x2C                   /* @ */\n  CHAR_BACKWARD_SLASH\x2C       /* \\ */\n  CHAR_COMMA\x2C                /* \x2C */\n  CHAR_DOT\x2C                  /* . */\n  CHAR_EXCLAMATION_MARK\x2C     /* ! */\n  CHAR_FORWARD_SLASH\x2C        /* / */\n  CHAR_LEFT_CURLY_BRACE\x2C     /* { */\n  CHAR_LEFT_PARENTHESES\x2C     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET\x2C  /* [ */\n  CHAR_PLUS\x2C                 /* + */\n  CHAR_QUESTION_MARK\x2C        /* ? */\n  CHAR_RIGHT_CURLY_BRACE\x2C    /* } */\n  CHAR_RIGHT_PARENTHESES\x2C    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = constants$2;\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties\x2C like `isGlob`\x2C `path` (the leading non-glob\x2C if it exists)\x2C\n * `glob` (the actual pattern)\x2C `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true\x2C input: 'foo/bar/*.js'\x2C base: 'foo/bar'\x2C glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan$1 = (input\x2C options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: ''\x2C depth: 0\x2C isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: ''\x2C depth: 0\x2C isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0\x2C start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0\x2C lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0\x2C -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils$2.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils$2.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix\x2C\n    input\x2C\n    start\x2C\n    base\x2C\n    glob\x2C\n    isBrace\x2C\n    isBracket\x2C\n    isGlob\x2C\n    isExtglob\x2C\n    isGlobstar\x2C\n    negated\x2C\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n\x2C i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nvar scan_1 = scan$1;\n\nconst constants$1 = constants$2;\nconst utils$1 = utils$3;\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH\x2C\n  POSIX_REGEX_SOURCE\x2C\n  REGEX_NON_SPECIAL_CHARS\x2C\n  REGEX_SPECIAL_CHARS_BACKREF\x2C\n  REPLACEMENTS\n} = constants$1;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args\x2C options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args\x2C options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type\x2C char) => {\n  return `Missing ${type}: "${char}" - use "\\\\\\\\${char}" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse$2 = (input\x2C options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH\x2C opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}\x2C exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos'\x2C value: ''\x2C output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils$1.isWindows(options);\n\n  // create constants based on platform\x2C for windows or posix\n  const PLATFORM_CHARS = constants$1.globChars(win32);\n  const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL\x2C\n    PLUS_LITERAL\x2C\n    SLASH_LITERAL\x2C\n    ONE_CHAR\x2C\n    DOTS_SLASH\x2C\n    NO_DOT\x2C\n    NO_DOT_SLASH\x2C\n    NO_DOTS_SLASH\x2C\n    QMARK\x2C\n    QMARK_NO_DOT\x2C\n    STAR\x2C\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input\x2C\n    index: -1\x2C\n    start: 0\x2C\n    dot: opts.dot === true\x2C\n    consumed: ''\x2C\n    output: ''\x2C\n    prefix: ''\x2C\n    backtrack: false\x2C\n    negated: false\x2C\n    brackets: 0\x2C\n    braces: 0\x2C\n    parens: 0\x2C\n    quotes: 0\x2C\n    globstar: false\x2C\n    tokens\n  };\n\n  input = utils$1.removePrefix(input\x2C state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = ''\x2C num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible\x2C\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0\x2C -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type\x2C value) => {\n    const token = { ...EXTGLOB_CHARS[value]\x2C conditions: 1\x2C inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type\x2C value\x2C output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren'\x2C extglob: true\x2C value: advance()\x2C output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts\x2Ctsx}`) can follow after the closing parenthesis.\n        // In this case\x2C we need to parse the string and use it in the output of the original pattern.\n        // Suitable patterns: `/!(*.d).ts`\x2C `/!(*.d).{ts\x2Ctsx}`\x2C `**/!(*-dbg).@(js)`.\n        //\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n        const expression = parse$2(rest\x2C { ...options\x2C fastpaths: false }).output;\n\n        output = token.close = `)${expression})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren'\x2C extglob: true\x2C value\x2C output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF\x2C (m\x2C esc\x2C chars\x2C first\x2C rest\x2C index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g\x2C '');\n      } else {\n        output = output.replace(/\\\\+/g\x2C m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils$1.wrapOutput(output\x2C state\x2C options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text'\x2C value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text'\x2C value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class\x2C continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0\x2C idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string\x2C continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '"') {\n      value = utils$1.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text'\x2C value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren'\x2C value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening'\x2C '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren'\x2C value\x2C output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing'\x2C ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket'\x2C value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text'\x2C value\x2C output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening'\x2C '['));\n        }\n\n        push({ type: 'text'\x2C value\x2C output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils$1.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils$1.escapeRegex(prev.value);\n      state.output = state.output.slice(0\x2C -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing\x2C try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace'\x2C\n        value\x2C\n        output: '('\x2C\n        outputIndex: state.output.length\x2C\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text'\x2C value\x2C output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range\x2C opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0\x2C brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace'\x2C value\x2C output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text'\x2C value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === '\x2C') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma'\x2C value\x2C output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is "./"\x2C advance the start\n      // to the current index\x2C and don't add the "./" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like "!" and "." (not "./")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset "prev" to the first token\n        continue;\n      }\n\n      push({ type: 'slash'\x2C value\x2C output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text'\x2C value\x2C output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot'\x2C value\x2C output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark'\x2C value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils$1.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text'\x2C value\x2C output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark'\x2C value\x2C output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark'\x2C value\x2C output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate'\x2C value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus'\x2C value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus'\x2C value\x2C output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus'\x2C value });\n        continue;\n      }\n\n      push({ type: 'plus'\x2C value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at'\x2C extglob: true\x2C value\x2C output: '' });\n        continue;\n      }\n\n      push({ type: 'text'\x2C value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text'\x2C value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star'\x2C value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star'\x2C value\x2C output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star'\x2C value\x2C output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0\x2C 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**'\x2C 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0\x2C -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0\x2C -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash'\x2C value: '/'\x2C output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash'\x2C value: '/'\x2C output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0\x2C -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star'\x2C value\x2C output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing'\x2C ']'));\n    state.output = utils$1.escapeLast(state.output\x2C '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing'\x2C ')'));\n    state.output = utils$1.escapeLast(state.output\x2C '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing'\x2C '}'));\n    state.output = utils$1.escapeLast(state.output\x2C '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash'\x2C value: ''\x2C output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse$2.fastpaths = (input\x2C options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH\x2C opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}\x2C exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils$1.isWindows(options);\n\n  // create constants based on platform\x2C for windows or posix\n  const {\n    DOT_LITERAL\x2C\n    SLASH_LITERAL\x2C\n    ONE_CHAR\x2C\n    DOTS_SLASH\x2C\n    NO_DOT\x2C\n    NO_DOTS\x2C\n    NO_DOTS_SLASH\x2C\n    STAR\x2C\n    START_ANCHOR\n  } = constants$1.globChars(win32);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false\x2C prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils$1.removePrefix(input\x2C state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nvar parse_1 = parse$2;\n\nconst path = require$$0$1;\nconst scan = scan_1;\nconst parse$1 = parse_1;\nconst utils = utils$3;\nconst constants = constants$2;\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument\x2C\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that\x2C when true\x2C\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[\x2C options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch$1 = (glob\x2C options\x2C returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch$1(input\x2C options\x2C returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch$1.compileRe(glob\x2C options)\n    : picomatch$1.makeRe(glob\x2C options\x2C false\x2C true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options\x2C ignore: null\x2C onMatch: null\x2C onResult: null };\n    isIgnored = picomatch$1(opts.ignore\x2C ignoreOpts\x2C returnState);\n  }\n\n  const matcher = (input\x2C returnObject = false) => {\n    const { isMatch\x2C match\x2C output } = picomatch$1.test(input\x2C regex\x2C options\x2C { glob\x2C posix });\n    const result = { glob\x2C state\x2C regex\x2C posix\x2C input\x2C output\x2C match\x2C isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input\x2C regex[\x2C options]);\n *\n * console.log(picomatch.test('foo/bar'\x2C /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true\x2C match: [ 'foo/'\x2C 'foo'\x2C 'bar' ]\x2C output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch$1.test = (input\x2C regex\x2C options\x2C { glob\x2C posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false\x2C output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch$1.matchBase(input\x2C regex\x2C options\x2C posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match)\x2C match\x2C output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input\x2C glob[\x2C options]);\n * console.log(picomatch.matchBase('foo/bar.js'\x2C '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch$1.matchBase = (input\x2C glob\x2C options\x2C posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch$1.makeRe(glob\x2C options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string\x2C patterns[\x2C options]);\n *\n * console.log(picomatch.isMatch('a.a'\x2C ['b.*'\x2C '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a'\x2C 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch$1.isMatch = (str\x2C patterns\x2C options) => picomatch$1(patterns\x2C options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[\x2C options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch$1.parse = (pattern\x2C options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch$1.parse(p\x2C options));\n  return parse$1(pattern\x2C { ...options\x2C fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[\x2C options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./'\x2C\n *   input: '!./foo/*.js'\x2C\n *   start: 3\x2C\n *   base: 'foo'\x2C\n *   glob: '*.js'\x2C\n *   isBrace: false\x2C\n *   isBracket: false\x2C\n *   isGlob: true\x2C\n *   isExtglob: false\x2C\n *   isGlobstar: false\x2C\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch$1.scan = (input\x2C options) => scan(input\x2C options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors\x2C this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch$1.compileRe = (state\x2C options\x2C returnOutput = false\x2C returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch$1.toRegex(source\x2C options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[\x2C options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output\x2C instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch$1.makeRe = (input\x2C options = {}\x2C returnOutput = false\x2C returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false\x2C fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse$1.fastpaths(input\x2C options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse$1(input\x2C options);\n  }\n\n  return picomatch$1.compileRe(parsed\x2C options\x2C returnOutput\x2C returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[\x2C options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch$1.toRegex = (source\x2C options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source\x2C opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch$1.constants = constants;\n\n/**\n * Expose "picomatch"\n */\n\nvar picomatch_1 = picomatch$1;\n\nvar picomatch = picomatch_1;\n\nconst pm = /*@__PURE__*/getDefaultExportFromCjs(picomatch);\n\nconst extractors = {\n    ArrayPattern(names\x2C param) {\n        for (const element of param.elements) {\n            if (element)\n                extractors[element.type](names\x2C element);\n        }\n    }\x2C\n    AssignmentPattern(names\x2C param) {\n        extractors[param.left.type](names\x2C param.left);\n    }\x2C\n    Identifier(names\x2C param) {\n        names.push(param.name);\n    }\x2C\n    MemberExpression() { }\x2C\n    ObjectPattern(names\x2C param) {\n        for (const prop of param.properties) {\n            // @ts-ignore Typescript reports that this is not a valid type\n            if (prop.type === 'RestElement') {\n                extractors.RestElement(names\x2C prop);\n            }\n            else {\n                extractors[prop.value.type](names\x2C prop.value);\n            }\n        }\n    }\x2C\n    RestElement(names\x2C param) {\n        extractors[param.argument.type](names\x2C param.argument);\n    }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n    const names = [];\n    extractors[param.type](names\x2C param);\n    return names;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray$1(arg) {\n    return Array.isArray(arg);\n}\nfunction ensureArray$1(thing) {\n    if (isArray$1(thing))\n        return thing;\n    if (thing == null)\n        return [];\n    return [thing];\n}\n\nconst normalizePath = function normalizePath(filename) {\n    return filename.split(win32.sep).join(posix.sep);\n};\n\nfunction getMatcherString(id\x2C resolutionBase) {\n    if (resolutionBase === false || isAbsolute$1(id) || id.startsWith('**')) {\n        return normalizePath(id);\n    }\n    // resolve('') is valid and will default to process.cwd()\n    const basePath = normalizePath(resolve$1(resolutionBase || ''))\n        // escape all possible (posix + win) path characters that might interfere with regex\n        .replace(/[-^$*+?.()|[\\]{}]/g\x2C '\\\\$&');\n    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher\x2C also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return posix.join(basePath\x2C normalizePath(id));\n}\nconst createFilter = function createFilter(include\x2C exclude\x2C options) {\n    const resolutionBase = options && options.resolve;\n    const getMatcher = (id) => id instanceof RegExp\n        ? id\n        : {\n            test: (what) => {\n                // this refactor is a tad overly verbose but makes for easy debugging\n                const pattern = getMatcherString(id\x2C resolutionBase);\n                const fn = pm(pattern\x2C { dot: true });\n                const result = fn(what);\n                return result;\n            }\n        };\n    const includeMatchers = ensureArray$1(include).map(getMatcher);\n    const excludeMatchers = ensureArray$1(exclude).map(getMatcher);\n    return function result(id) {\n        if (typeof id !== 'string')\n            return false;\n        if (/\\0/.test(id))\n            return false;\n        const pathId = normalizePath(id);\n        for (let i = 0; i < excludeMatchers.length; ++i) {\n            const matcher = excludeMatchers[i];\n            if (matcher.test(pathId))\n                return false;\n        }\n        for (let i = 0; i < includeMatchers.length; ++i) {\n            const matcher = includeMatchers[i];\n            if (matcher.test(pathId))\n                return true;\n        }\n        return !includeMatchers.length;\n    };\n};\n\nconst reservedWords$1 = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords$1} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\n\nfunction createInclusionContext() {\n    return {\n        brokenFlow: false\x2C\n        hasBreak: false\x2C\n        hasContinue: false\x2C\n        includedCallArguments: new Set()\x2C\n        includedLabels: new Set()\n    };\n}\nfunction createHasEffectsContext() {\n    return {\n        accessed: new PathTracker()\x2C\n        assigned: new PathTracker()\x2C\n        brokenFlow: false\x2C\n        called: new DiscriminatedPathTracker()\x2C\n        hasBreak: false\x2C\n        hasContinue: false\x2C\n        ignore: {\n            breaks: false\x2C\n            continues: false\x2C\n            labels: new Set()\x2C\n            returnYield: false\x2C\n            this: false\n        }\x2C\n        includedLabels: new Set()\x2C\n        instantiated: new DiscriminatedPathTracker()\x2C\n        replacedVariableInits: new Map()\n    };\n}\n\nfunction assembleMemberDescriptions(memberDescriptions\x2C inheritedDescriptions = null) {\n    return Object.create(inheritedDescriptions\x2C memberDescriptions);\n}\nconst UNDEFINED_EXPRESSION = new (class UndefinedExpression extends ExpressionEntity {\n    getLiteralValueAtPath() {\n        return undefined;\n    }\n})();\nconst returnsUnknown = {\n    value: {\n        hasEffectsWhenCalled: null\x2C\n        returns: UNKNOWN_EXPRESSION\n    }\n};\nconst UNKNOWN_LITERAL_BOOLEAN = new (class UnknownBoolean extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalBooleanMembers\x2C path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalBooleanMembers\x2C path[0]\x2C interaction\x2C context);\n        }\n        return true;\n    }\n})();\nconst returnsBoolean = {\n    value: {\n        hasEffectsWhenCalled: null\x2C\n        returns: UNKNOWN_LITERAL_BOOLEAN\n    }\n};\nconst UNKNOWN_LITERAL_NUMBER = new (class UnknownNumber extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalNumberMembers\x2C path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalNumberMembers\x2C path[0]\x2C interaction\x2C context);\n        }\n        return true;\n    }\n})();\nconst returnsNumber = {\n    value: {\n        hasEffectsWhenCalled: null\x2C\n        returns: UNKNOWN_LITERAL_NUMBER\n    }\n};\nconst UNKNOWN_LITERAL_STRING = new (class UnknownString extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalStringMembers\x2C path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalStringMembers\x2C path[0]\x2C interaction\x2C context);\n        }\n        return true;\n    }\n})();\nconst returnsString = {\n    value: {\n        hasEffectsWhenCalled: null\x2C\n        returns: UNKNOWN_LITERAL_STRING\n    }\n};\nconst stringReplace = {\n    value: {\n        hasEffectsWhenCalled({ args }\x2C context) {\n            const argument1 = args[2];\n            return (args.length < 3 ||\n                (typeof argument1.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C {\n                    deoptimizeCache() { }\n                }) === 'symbol' &&\n                    argument1.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C NODE_INTERACTION_UNKNOWN_CALL\x2C context)));\n        }\x2C\n        returns: UNKNOWN_LITERAL_STRING\n    }\n};\nconst objectMembers = assembleMemberDescriptions({\n    hasOwnProperty: returnsBoolean\x2C\n    isPrototypeOf: returnsBoolean\x2C\n    propertyIsEnumerable: returnsBoolean\x2C\n    toLocaleString: returnsString\x2C\n    toString: returnsString\x2C\n    valueOf: returnsUnknown\n});\nconst literalBooleanMembers = assembleMemberDescriptions({\n    valueOf: returnsBoolean\n}\x2C objectMembers);\nconst literalNumberMembers = assembleMemberDescriptions({\n    toExponential: returnsString\x2C\n    toFixed: returnsString\x2C\n    toLocaleString: returnsString\x2C\n    toPrecision: returnsString\x2C\n    valueOf: returnsNumber\n}\x2C objectMembers);\n/**\n * RegExp are stateful when they have the global or sticky flags set.\n * But if we actually don't use them\x2C the side effect does not matter.\n * the check logic in `hasEffectsOnInteractionAtPath`.\n */\nconst literalRegExpMembers = assembleMemberDescriptions({\n    exec: returnsUnknown\x2C\n    test: returnsBoolean\n}\x2C objectMembers);\nconst literalStringMembers = assembleMemberDescriptions({\n    anchor: returnsString\x2C\n    at: returnsUnknown\x2C\n    big: returnsString\x2C\n    blink: returnsString\x2C\n    bold: returnsString\x2C\n    charAt: returnsString\x2C\n    charCodeAt: returnsNumber\x2C\n    codePointAt: returnsUnknown\x2C\n    concat: returnsString\x2C\n    endsWith: returnsBoolean\x2C\n    fixed: returnsString\x2C\n    fontcolor: returnsString\x2C\n    fontsize: returnsString\x2C\n    includes: returnsBoolean\x2C\n    indexOf: returnsNumber\x2C\n    italics: returnsString\x2C\n    lastIndexOf: returnsNumber\x2C\n    link: returnsString\x2C\n    localeCompare: returnsNumber\x2C\n    match: returnsUnknown\x2C\n    matchAll: returnsUnknown\x2C\n    normalize: returnsString\x2C\n    padEnd: returnsString\x2C\n    padStart: returnsString\x2C\n    repeat: returnsString\x2C\n    replace: stringReplace\x2C\n    replaceAll: stringReplace\x2C\n    search: returnsNumber\x2C\n    slice: returnsString\x2C\n    small: returnsString\x2C\n    split: returnsUnknown\x2C\n    startsWith: returnsBoolean\x2C\n    strike: returnsString\x2C\n    sub: returnsString\x2C\n    substr: returnsString\x2C\n    substring: returnsString\x2C\n    sup: returnsString\x2C\n    toLocaleLowerCase: returnsString\x2C\n    toLocaleUpperCase: returnsString\x2C\n    toLowerCase: returnsString\x2C\n    toString: returnsString\x2C\n    toUpperCase: returnsString\x2C\n    trim: returnsString\x2C\n    trimEnd: returnsString\x2C\n    trimLeft: returnsString\x2C\n    trimRight: returnsString\x2C\n    trimStart: returnsString\x2C\n    valueOf: returnsString\n}\x2C objectMembers);\nfunction getLiteralMembersForValue(value) {\n    if (value instanceof RegExp) {\n        return literalRegExpMembers;\n    }\n    switch (typeof value) {\n        case 'boolean': {\n            return literalBooleanMembers;\n        }\n        case 'number': {\n            return literalNumberMembers;\n        }\n        case 'string': {\n            return literalStringMembers;\n        }\n    }\n    return Object.create(null);\n}\nfunction hasMemberEffectWhenCalled(members\x2C memberName\x2C interaction\x2C context) {\n    if (typeof memberName !== 'string' || !members[memberName]) {\n        return true;\n    }\n    return members[memberName].hasEffectsWhenCalled?.(interaction\x2C context) || false;\n}\nfunction getMemberReturnExpressionWhenCalled(members\x2C memberName) {\n    if (typeof memberName !== 'string' || !members[memberName])\n        return UNKNOWN_RETURN_EXPRESSION;\n    return [members[memberName].returns\x2C false];\n}\n\n// AST walker module for Mozilla Parser API compatible trees\n\n\nfunction skipThrough(node\x2C st\x2C c) { c(node\x2C st); }\nfunction ignore(_node\x2C _st\x2C _c) {}\n\n// Node walkers.\n\nvar base$1 = {};\n\nbase$1.Program = base$1.BlockStatement = base$1.StaticBlock = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.body; i < list.length; i += 1)\n    {\n    var stmt = list[i];\n\n    c(stmt\x2C st\x2C "Statement");\n  }\n};\nbase$1.Statement = skipThrough;\nbase$1.EmptyStatement = ignore;\nbase$1.ExpressionStatement = base$1.ParenthesizedExpression = base$1.ChainExpression =\n  function (node\x2C st\x2C c) { return c(node.expression\x2C st\x2C "Expression"); };\nbase$1.IfStatement = function (node\x2C st\x2C c) {\n  c(node.test\x2C st\x2C "Expression");\n  c(node.consequent\x2C st\x2C "Statement");\n  if (node.alternate) { c(node.alternate\x2C st\x2C "Statement"); }\n};\nbase$1.LabeledStatement = function (node\x2C st\x2C c) { return c(node.body\x2C st\x2C "Statement"); };\nbase$1.BreakStatement = base$1.ContinueStatement = ignore;\nbase$1.WithStatement = function (node\x2C st\x2C c) {\n  c(node.object\x2C st\x2C "Expression");\n  c(node.body\x2C st\x2C "Statement");\n};\nbase$1.SwitchStatement = function (node\x2C st\x2C c) {\n  c(node.discriminant\x2C st\x2C "Expression");\n  for (var i$1 = 0\x2C list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n\n    if (cs.test) { c(cs.test\x2C st\x2C "Expression"); }\n    for (var i = 0\x2C list = cs.consequent; i < list.length; i += 1)\n      {\n      var cons = list[i];\n\n      c(cons\x2C st\x2C "Statement");\n    }\n  }\n};\nbase$1.SwitchCase = function (node\x2C st\x2C c) {\n  if (node.test) { c(node.test\x2C st\x2C "Expression"); }\n  for (var i = 0\x2C list = node.consequent; i < list.length; i += 1)\n    {\n    var cons = list[i];\n\n    c(cons\x2C st\x2C "Statement");\n  }\n};\nbase$1.ReturnStatement = base$1.YieldExpression = base$1.AwaitExpression = function (node\x2C st\x2C c) {\n  if (node.argument) { c(node.argument\x2C st\x2C "Expression"); }\n};\nbase$1.ThrowStatement = base$1.SpreadElement =\n  function (node\x2C st\x2C c) { return c(node.argument\x2C st\x2C "Expression"); };\nbase$1.TryStatement = function (node\x2C st\x2C c) {\n  c(node.block\x2C st\x2C "Statement");\n  if (node.handler) { c(node.handler\x2C st); }\n  if (node.finalizer) { c(node.finalizer\x2C st\x2C "Statement"); }\n};\nbase$1.CatchClause = function (node\x2C st\x2C c) {\n  if (node.param) { c(node.param\x2C st\x2C "Pattern"); }\n  c(node.body\x2C st\x2C "Statement");\n};\nbase$1.WhileStatement = base$1.DoWhileStatement = function (node\x2C st\x2C c) {\n  c(node.test\x2C st\x2C "Expression");\n  c(node.body\x2C st\x2C "Statement");\n};\nbase$1.ForStatement = function (node\x2C st\x2C c) {\n  if (node.init) { c(node.init\x2C st\x2C "ForInit"); }\n  if (node.test) { c(node.test\x2C st\x2C "Expression"); }\n  if (node.update) { c(node.update\x2C st\x2C "Expression"); }\n  c(node.body\x2C st\x2C "Statement");\n};\nbase$1.ForInStatement = base$1.ForOfStatement = function (node\x2C st\x2C c) {\n  c(node.left\x2C st\x2C "ForInit");\n  c(node.right\x2C st\x2C "Expression");\n  c(node.body\x2C st\x2C "Statement");\n};\nbase$1.ForInit = function (node\x2C st\x2C c) {\n  if (node.type === "VariableDeclaration") { c(node\x2C st); }\n  else { c(node\x2C st\x2C "Expression"); }\n};\nbase$1.DebuggerStatement = ignore;\n\nbase$1.FunctionDeclaration = function (node\x2C st\x2C c) { return c(node\x2C st\x2C "Function"); };\nbase$1.VariableDeclaration = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.declarations; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    c(decl\x2C st);\n  }\n};\nbase$1.VariableDeclarator = function (node\x2C st\x2C c) {\n  c(node.id\x2C st\x2C "Pattern");\n  if (node.init) { c(node.init\x2C st\x2C "Expression"); }\n};\n\nbase$1.Function = function (node\x2C st\x2C c) {\n  if (node.id) { c(node.id\x2C st\x2C "Pattern"); }\n  for (var i = 0\x2C list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    c(param\x2C st\x2C "Pattern");\n  }\n  c(node.body\x2C st\x2C node.expression ? "Expression" : "Statement");\n};\n\nbase$1.Pattern = function (node\x2C st\x2C c) {\n  if (node.type === "Identifier")\n    { c(node\x2C st\x2C "VariablePattern"); }\n  else if (node.type === "MemberExpression")\n    { c(node\x2C st\x2C "MemberPattern"); }\n  else\n    { c(node\x2C st); }\n};\nbase$1.VariablePattern = ignore;\nbase$1.MemberPattern = skipThrough;\nbase$1.RestElement = function (node\x2C st\x2C c) { return c(node.argument\x2C st\x2C "Pattern"); };\nbase$1.ArrayPattern = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt\x2C st\x2C "Pattern"); }\n  }\n};\nbase$1.ObjectPattern = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === "Property") {\n      if (prop.computed) { c(prop.key\x2C st\x2C "Expression"); }\n      c(prop.value\x2C st\x2C "Pattern");\n    } else if (prop.type === "RestElement") {\n      c(prop.argument\x2C st\x2C "Pattern");\n    }\n  }\n};\n\nbase$1.Expression = skipThrough;\nbase$1.ThisExpression = base$1.Super = base$1.MetaProperty = ignore;\nbase$1.ArrayExpression = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt\x2C st\x2C "Expression"); }\n  }\n};\nbase$1.ObjectExpression = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.properties; i < list.length; i += 1)\n    {\n    var prop = list[i];\n\n    c(prop\x2C st);\n  }\n};\nbase$1.FunctionExpression = base$1.ArrowFunctionExpression = base$1.FunctionDeclaration;\nbase$1.SequenceExpression = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.expressions; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    c(expr\x2C st\x2C "Expression");\n  }\n};\nbase$1.TemplateLiteral = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.quasis; i < list.length; i += 1)\n    {\n    var quasi = list[i];\n\n    c(quasi\x2C st);\n  }\n\n  for (var i$1 = 0\x2C list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\n    {\n    var expr = list$1[i$1];\n\n    c(expr\x2C st\x2C "Expression");\n  }\n};\nbase$1.TemplateElement = ignore;\nbase$1.UnaryExpression = base$1.UpdateExpression = function (node\x2C st\x2C c) {\n  c(node.argument\x2C st\x2C "Expression");\n};\nbase$1.BinaryExpression = base$1.LogicalExpression = function (node\x2C st\x2C c) {\n  c(node.left\x2C st\x2C "Expression");\n  c(node.right\x2C st\x2C "Expression");\n};\nbase$1.AssignmentExpression = base$1.AssignmentPattern = function (node\x2C st\x2C c) {\n  c(node.left\x2C st\x2C "Pattern");\n  c(node.right\x2C st\x2C "Expression");\n};\nbase$1.ConditionalExpression = function (node\x2C st\x2C c) {\n  c(node.test\x2C st\x2C "Expression");\n  c(node.consequent\x2C st\x2C "Expression");\n  c(node.alternate\x2C st\x2C "Expression");\n};\nbase$1.NewExpression = base$1.CallExpression = function (node\x2C st\x2C c) {\n  c(node.callee\x2C st\x2C "Expression");\n  if (node.arguments)\n    { for (var i = 0\x2C list = node.arguments; i < list.length; i += 1)\n      {\n        var arg = list[i];\n\n        c(arg\x2C st\x2C "Expression");\n      } }\n};\nbase$1.MemberExpression = function (node\x2C st\x2C c) {\n  c(node.object\x2C st\x2C "Expression");\n  if (node.computed) { c(node.property\x2C st\x2C "Expression"); }\n};\nbase$1.ExportNamedDeclaration = base$1.ExportDefaultDeclaration = function (node\x2C st\x2C c) {\n  if (node.declaration)\n    { c(node.declaration\x2C st\x2C node.type === "ExportNamedDeclaration" || node.declaration.id ? "Statement" : "Expression"); }\n  if (node.source) { c(node.source\x2C st\x2C "Expression"); }\n};\nbase$1.ExportAllDeclaration = function (node\x2C st\x2C c) {\n  if (node.exported)\n    { c(node.exported\x2C st); }\n  c(node.source\x2C st\x2C "Expression");\n};\nbase$1.ImportDeclaration = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.specifiers; i < list.length; i += 1)\n    {\n    var spec = list[i];\n\n    c(spec\x2C st);\n  }\n  c(node.source\x2C st\x2C "Expression");\n};\nbase$1.ImportExpression = function (node\x2C st\x2C c) {\n  c(node.source\x2C st\x2C "Expression");\n};\nbase$1.ImportSpecifier = base$1.ImportDefaultSpecifier = base$1.ImportNamespaceSpecifier = base$1.Identifier = base$1.PrivateIdentifier = base$1.Literal = ignore;\n\nbase$1.TaggedTemplateExpression = function (node\x2C st\x2C c) {\n  c(node.tag\x2C st\x2C "Expression");\n  c(node.quasi\x2C st\x2C "Expression");\n};\nbase$1.ClassDeclaration = base$1.ClassExpression = function (node\x2C st\x2C c) { return c(node\x2C st\x2C "Class"); };\nbase$1.Class = function (node\x2C st\x2C c) {\n  if (node.id) { c(node.id\x2C st\x2C "Pattern"); }\n  if (node.superClass) { c(node.superClass\x2C st\x2C "Expression"); }\n  c(node.body\x2C st);\n};\nbase$1.ClassBody = function (node\x2C st\x2C c) {\n  for (var i = 0\x2C list = node.body; i < list.length; i += 1)\n    {\n    var elt = list[i];\n\n    c(elt\x2C st);\n  }\n};\nbase$1.MethodDefinition = base$1.PropertyDefinition = base$1.Property = function (node\x2C st\x2C c) {\n  if (node.computed) { c(node.key\x2C st\x2C "Expression"); }\n  if (node.value) { c(node.value\x2C st\x2C "Expression"); }\n};\n\nconst ArrowFunctionExpression$1 = 'ArrowFunctionExpression';\nconst BinaryExpression$1 = 'BinaryExpression';\nconst BlockStatement$1 = 'BlockStatement';\nconst CallExpression$1 = 'CallExpression';\nconst ChainExpression$1 = 'ChainExpression';\nconst ConditionalExpression$1 = 'ConditionalExpression';\nconst ExportDefaultDeclaration$1 = 'ExportDefaultDeclaration';\nconst ExportNamedDeclaration$1 = 'ExportNamedDeclaration';\nconst ExpressionStatement$1 = 'ExpressionStatement';\nconst FunctionDeclaration$1 = 'FunctionDeclaration';\nconst Identifier$1 = 'Identifier';\nconst LogicalExpression$1 = 'LogicalExpression';\nconst NewExpression$1 = 'NewExpression';\nconst Program$1 = 'Program';\nconst Property$1 = 'Property';\nconst ReturnStatement$1 = 'ReturnStatement';\nconst SequenceExpression$1 = 'SequenceExpression';\nconst VariableDeclarator$1 = 'VariableDeclarator';\nconst VariableDeclaration$1 = 'VariableDeclaration';\n\n// this looks ridiculous\x2C but it prevents sourcemap tooling from mistaking\n// this for an actual sourceMappingURL\nlet SOURCEMAPPING_URL = 'sourceMa';\nSOURCEMAPPING_URL += 'ppingURL';\nconst whiteSpaceNoNewline = '[ \\\\f\\\\r\\\\t\\\\v\\\\u00a0\\\\u1680\\\\u2000-\\\\u200a\\\\u2028\\\\u2029\\\\u202f\\\\u205f\\\\u3000\\\\ufeff]';\nconst SOURCEMAPPING_URL_RE = new RegExp(`^#${whiteSpaceNoNewline}+${SOURCEMAPPING_URL}=.+`);\n\nconst ANNOTATION_KEY = '_rollupAnnotations';\nconst INVALID_COMMENT_KEY = '_rollupRemoved';\nfunction handlePureAnnotationsOfNode(node\x2C state\x2C type = node.type) {\n    const { annotations\x2C code } = state;\n    // eslint-disable-next-line unicorn/consistent-destructuring\n    let comment = annotations[state.annotationIndex];\n    while (comment && node.start >= comment.end) {\n        markPureNode(node\x2C comment\x2C code);\n        comment = annotations[++state.annotationIndex];\n    }\n    if (comment && comment.end <= node.end) {\n        base$1[type](node\x2C state\x2C handlePureAnnotationsOfNode);\n        // eslint-disable-next-line unicorn/consistent-destructuring\n        while ((comment = annotations[state.annotationIndex]) && comment.end <= node.end) {\n            ++state.annotationIndex;\n            annotateNode(node\x2C comment\x2C false);\n        }\n    }\n}\nconst neitherWithespaceNorBrackets = /[^\\s(]/g;\nconst noWhitespace = /\\S/g;\nfunction markPureNode(node\x2C comment\x2C code) {\n    const annotatedNodes = [];\n    let invalidAnnotation;\n    const codeInBetween = code.slice(comment.end\x2C node.start);\n    if (doesNotMatchOutsideComment(codeInBetween\x2C neitherWithespaceNorBrackets)) {\n        const parentStart = node.start;\n        while (true) {\n            annotatedNodes.push(node);\n            switch (node.type) {\n                case ExpressionStatement$1:\n                case ChainExpression$1: {\n                    node = node.expression;\n                    continue;\n                }\n                case SequenceExpression$1: {\n                    // if there are parentheses\x2C the annotation would apply to the entire expression\n                    if (doesNotMatchOutsideComment(code.slice(parentStart\x2C node.start)\x2C noWhitespace)) {\n                        node = node.expressions[0];\n                        continue;\n                    }\n                    invalidAnnotation = true;\n                    break;\n                }\n                case ConditionalExpression$1: {\n                    // if there are parentheses\x2C the annotation would apply to the entire expression\n                    if (doesNotMatchOutsideComment(code.slice(parentStart\x2C node.start)\x2C noWhitespace)) {\n                        node = node.test;\n                        continue;\n                    }\n                    invalidAnnotation = true;\n                    break;\n                }\n                case LogicalExpression$1:\n                case BinaryExpression$1: {\n                    // if there are parentheses\x2C the annotation would apply to the entire expression\n                    if (doesNotMatchOutsideComment(code.slice(parentStart\x2C node.start)\x2C noWhitespace)) {\n                        node = node.left;\n                        continue;\n                    }\n                    invalidAnnotation = true;\n                    break;\n                }\n                case ExportNamedDeclaration$1:\n                case ExportDefaultDeclaration$1: {\n                    node = node.declaration;\n                    continue;\n                }\n                case VariableDeclaration$1: {\n                    \n                    const declaration = node;\n                    if (declaration.kind === 'const') {\n                        // jsdoc only applies to the first declaration\n                        node = declaration.declarations[0].init;\n                        continue;\n                    }\n                    invalidAnnotation = true;\n                    break;\n                }\n                case VariableDeclarator$1: {\n                    node = node.init;\n                    continue;\n                }\n                case FunctionDeclaration$1:\n                case ArrowFunctionExpression$1:\n                case CallExpression$1:\n                case NewExpression$1: {\n                    break;\n                }\n                default: {\n                    invalidAnnotation = true;\n                }\n            }\n            break;\n        }\n    }\n    else {\n        invalidAnnotation = true;\n    }\n    if (invalidAnnotation) {\n        annotateNode(node\x2C comment\x2C false);\n    }\n    else {\n        for (const node of annotatedNodes) {\n            annotateNode(node\x2C comment\x2C true);\n        }\n    }\n}\nfunction doesNotMatchOutsideComment(code\x2C forbiddenChars) {\n    let nextMatch;\n    while ((nextMatch = forbiddenChars.exec(code)) !== null) {\n        if (nextMatch[0] === '/') {\n            const charCodeAfterSlash = code.charCodeAt(forbiddenChars.lastIndex);\n            if (charCodeAfterSlash === 42 /*"*"*/) {\n                forbiddenChars.lastIndex = code.indexOf('*/'\x2C forbiddenChars.lastIndex + 1) + 2;\n                continue;\n            }\n            else if (charCodeAfterSlash === 47 /*"/"*/) {\n                forbiddenChars.lastIndex = code.indexOf('\\n'\x2C forbiddenChars.lastIndex + 1) + 1;\n                continue;\n            }\n        }\n        forbiddenChars.lastIndex = 0;\n        return false;\n    }\n    return true;\n}\nconst annotationsRegexes = [\n    ['pure'\x2C /[#@]__PURE__/]\x2C\n    ['noSideEffects'\x2C /[#@]__NO_SIDE_EFFECTS__/]\n];\nfunction addAnnotations(comments\x2C esTreeAst\x2C code) {\n    const annotations = [];\n    const sourceMappingComments = [];\n    for (const comment of comments) {\n        for (const [annotationType\x2C regex] of annotationsRegexes) {\n            if (regex.test(comment.value)) {\n                annotations.push({ ...comment\x2C annotationType });\n            }\n        }\n        if (SOURCEMAPPING_URL_RE.test(comment.value)) {\n            sourceMappingComments.push(comment);\n        }\n    }\n    for (const comment of sourceMappingComments) {\n        annotateNode(esTreeAst\x2C comment\x2C false);\n    }\n    handlePureAnnotationsOfNode(esTreeAst\x2C {\n        annotationIndex: 0\x2C\n        annotations\x2C\n        code\n    });\n}\nfunction annotateNode(node\x2C comment\x2C valid) {\n    const key = valid ? ANNOTATION_KEY : INVALID_COMMENT_KEY;\n    const property = node[key];\n    if (property) {\n        property.push(comment);\n    }\n    else {\n        node[key] = [comment];\n    }\n}\n\nconst keys = {\n    // TODO this should be removed once ImportExpression follows official ESTree\n    //  specs with "null" as default\n    ImportExpression: ['arguments']\x2C\n    Literal: []\x2C\n    Program: ['body']\n};\nfunction getAndCreateKeys(esTreeNode) {\n    keys[esTreeNode.type] = Object.keys(esTreeNode).filter(key => typeof esTreeNode[key] === 'object' && key.charCodeAt(0) !== 95 /* _ */);\n    return keys[esTreeNode.type];\n}\n\nconst INCLUDE_PARAMETERS = 'variables';\nclass NodeBase extends ExpressionEntity {\n    constructor(esTreeNode\x2C parent\x2C parentScope\x2C keepEsTreeNode = false) {\n        super();\n        /**\n         * Nodes can apply custom deoptimizations once they become part of the\n         * executed code. To do this\x2C they must initialize this as false\x2C implement\n         * applyDeoptimizations and call this from include and hasEffects if they have\n         * custom handlers\n         */\n        this.deoptimized = false;\n        // Nodes can opt-in to keep the AST if needed during the build pipeline.\n        // Avoid true when possible as large AST takes up memory.\n        this.esTreeNode = keepEsTreeNode ? esTreeNode : null;\n        this.keys = keys[esTreeNode.type] || getAndCreateKeys(esTreeNode);\n        this.parent = parent;\n        this.context = parent.context;\n        this.createScope(parentScope);\n        this.parseNode(esTreeNode);\n        this.initialise();\n        this.context.magicString.addSourcemapLocation(this.start);\n        this.context.magicString.addSourcemapLocation(this.end);\n    }\n    addExportedVariables(_variables\x2C _exportNamesByVariable) { }\n    /**\n     * Override this to bind assignments to variables and do any initialisations\n     * that require the scopes to be populated with variables.\n     */\n    bind() {\n        for (const key of this.keys) {\n            const value = this[key];\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.bind();\n                }\n            }\n            else if (value) {\n                value.bind();\n            }\n        }\n    }\n    /**\n     * Override if this node should receive a different scope than the parent\n     * scope.\n     */\n    createScope(parentScope) {\n        this.scope = parentScope;\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const key of this.keys) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    if (child?.hasEffects(context))\n                        return true;\n                }\n            }\n            else if (value.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    hasEffectsAsAssignmentTarget(context\x2C _checkAccess) {\n        return (this.hasEffects(context) ||\n            this.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C this.assignmentInteraction\x2C context));\n    }\n    include(context\x2C includeChildrenRecursively\x2C _options) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        for (const key of this.keys) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.include(context\x2C includeChildrenRecursively);\n                }\n            }\n            else {\n                value.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    includeAsAssignmentTarget(context\x2C includeChildrenRecursively\x2C _deoptimizeAccess) {\n        this.include(context\x2C includeChildrenRecursively);\n    }\n    /**\n     * Override to perform special initialisation steps after the scope is\n     * initialised\n     */\n    initialise() { }\n    insertSemicolon(code) {\n        if (code.original[this.end - 1] !== ';') {\n            code.appendLeft(this.end\x2C ';');\n        }\n    }\n    parseNode(esTreeNode\x2C keepEsTreeNodeKeys) {\n        for (const [key\x2C value] of Object.entries(esTreeNode)) {\n            // That way\x2C we can override this function to add custom initialisation and then call super.parseNode\n            if (this.hasOwnProperty(key))\n                continue;\n            if (key.charCodeAt(0) === 95 /* _ */) {\n                if (key === ANNOTATION_KEY) {\n                    const annotations = value;\n                    this.annotations = annotations;\n                    if (this.context.options.treeshake.annotations) {\n                        this.annotationNoSideEffects = annotations.some(comment => comment.annotationType === 'noSideEffects');\n                        this.annotationPure = annotations.some(comment => comment.annotationType === 'pure');\n                    }\n                }\n                else if (key === INVALID_COMMENT_KEY) {\n                    for (const { start\x2C end } of value)\n                        this.context.magicString.remove(start\x2C end);\n                }\n            }\n            else if (typeof value !== 'object' || value === null) {\n                this[key] = value;\n            }\n            else if (Array.isArray(value)) {\n                this[key] = [];\n                for (const child of value) {\n                    this[key].push(child === null\n                        ? null\n                        : new (this.context.getNodeConstructor(child.type))(child\x2C this\x2C this.scope\x2C keepEsTreeNodeKeys?.includes(key)));\n                }\n            }\n            else {\n                this[key] = new (this.context.getNodeConstructor(value.type))(value\x2C this\x2C this.scope\x2C keepEsTreeNodeKeys?.includes(key));\n            }\n        }\n    }\n    render(code\x2C options) {\n        for (const key of this.keys) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.render(code\x2C options);\n                }\n            }\n            else {\n                value.render(code\x2C options);\n            }\n        }\n    }\n    setAssignedValue(value) {\n        this.assignmentInteraction = { args: [null\x2C value]\x2C type: INTERACTION_ASSIGNED };\n    }\n    shouldBeIncluded(context) {\n        return this.included || (!context.brokenFlow && this.hasEffects(createHasEffectsContext()));\n    }\n    /**\n     * Just deoptimize everything by default so that when e.g. we do not track\n     * something properly\x2C it is deoptimized.\n     * @protected\n     */\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        for (const key of this.keys) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.deoptimizePath(UNKNOWN_PATH);\n                }\n            }\n            else {\n                value.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass SpreadElement extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (path.length > 0) {\n            this.argument.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C [UnknownKey\x2C ...path]\x2C recursionTracker);\n        }\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const { propertyReadSideEffects } = this.context.options\n            .treeshake;\n        return (this.argument.hasEffects(context) ||\n            (propertyReadSideEffects &&\n                (propertyReadSideEffects === 'always' ||\n                    this.argument.hasEffectsOnInteractionAtPath(UNKNOWN_PATH\x2C NODE_INTERACTION_UNKNOWN_ACCESS\x2C context))));\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        // Only properties of properties of the argument could become subject to reassignment\n        // This will also reassign the return values of iterators\n        this.argument.deoptimizePath([UnknownKey\x2C UnknownKey]);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass Method extends ExpressionEntity {\n    constructor(description) {\n        super();\n        this.description = description;\n    }\n    deoptimizeArgumentsOnInteractionAtPath({ args\x2C type }\x2C path) {\n        if (type === INTERACTION_CALLED && path.length === 0 && this.description.mutatesSelfAsArray) {\n            args[0]?.deoptimizePath(UNKNOWN_INTEGER_PATH);\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C { args }) {\n        if (path.length > 0) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return [\n            this.description.returnsPrimitive ||\n                (this.description.returns === 'self'\n                    ? args[0] || UNKNOWN_EXPRESSION\n                    : this.description.returns())\x2C\n            false\n        ];\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const { type } = interaction;\n        if (path.length > (type === INTERACTION_ACCESSED ? 1 : 0)) {\n            return true;\n        }\n        if (type === INTERACTION_CALLED) {\n            const { args } = interaction;\n            if (this.description.mutatesSelfAsArray === true &&\n                args[0]?.hasEffectsOnInteractionAtPath(UNKNOWN_INTEGER_PATH\x2C NODE_INTERACTION_UNKNOWN_ASSIGNMENT\x2C context)) {\n                return true;\n            }\n            if (this.description.callsArgs) {\n                for (const argumentIndex of this.description.callsArgs) {\n                    if (args[argumentIndex + 1]?.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C NODE_INTERACTION_UNKNOWN_CALL\x2C context)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nconst METHOD_RETURNS_BOOLEAN = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: false\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_BOOLEAN\n    })\n];\nconst METHOD_RETURNS_STRING = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: false\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_STRING\n    })\n];\nconst METHOD_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: false\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: false\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\n\nconst INTEGER_REG_EXP = /^\\d+$/;\nclass ObjectEntity extends ExpressionEntity {\n    // If a PropertyMap is used\x2C this will be taken as propertiesAndGettersByKey\n    // and we assume there are no setters or getters\n    constructor(properties\x2C prototypeExpression\x2C immutable = false) {\n        super();\n        this.prototypeExpression = prototypeExpression;\n        this.immutable = immutable;\n        this.additionalExpressionsToBeDeoptimized = new Set();\n        this.allProperties = [];\n        this.deoptimizedPaths = Object.create(null);\n        this.expressionsToBeDeoptimizedByKey = Object.create(null);\n        this.gettersByKey = Object.create(null);\n        this.hasLostTrack = false;\n        this.hasUnknownDeoptimizedInteger = false;\n        this.hasUnknownDeoptimizedProperty = false;\n        this.propertiesAndGettersByKey = Object.create(null);\n        this.propertiesAndSettersByKey = Object.create(null);\n        this.settersByKey = Object.create(null);\n        this.unknownIntegerProps = [];\n        this.unmatchableGetters = [];\n        this.unmatchablePropertiesAndGetters = [];\n        this.unmatchableSetters = [];\n        if (Array.isArray(properties)) {\n            this.buildPropertyMaps(properties);\n        }\n        else {\n            this.propertiesAndGettersByKey = this.propertiesAndSettersByKey = properties;\n            for (const propertiesForKey of Object.values(properties)) {\n                this.allProperties.push(...propertiesForKey);\n            }\n        }\n    }\n    deoptimizeAllProperties(noAccessors) {\n        const isDeoptimized = this.hasLostTrack || this.hasUnknownDeoptimizedProperty;\n        if (noAccessors) {\n            this.hasUnknownDeoptimizedProperty = true;\n        }\n        else {\n            this.hasLostTrack = true;\n        }\n        if (isDeoptimized) {\n            return;\n        }\n        for (const properties of [\n            ...Object.values(this.propertiesAndGettersByKey)\x2C\n            ...Object.values(this.settersByKey)\n        ]) {\n            for (const property of properties) {\n                property.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        // While the prototype itself cannot be mutated\x2C each property can\n        this.prototypeExpression?.deoptimizePath([UnknownKey\x2C UnknownKey]);\n        this.deoptimizeCachedEntities();\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        const [key\x2C ...subPath] = path;\n        const { args\x2C type } = interaction;\n        if (this.hasLostTrack ||\n            // single paths that are deoptimized will not become getters or setters\n            ((type === INTERACTION_CALLED || path.length > 1) &&\n                (this.hasUnknownDeoptimizedProperty ||\n                    (typeof key === 'string' && this.deoptimizedPaths[key])))) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        const [propertiesForExactMatchByKey\x2C relevantPropertiesByKey\x2C relevantUnmatchableProperties] = type === INTERACTION_CALLED || path.length > 1\n            ? [\n                this.propertiesAndGettersByKey\x2C\n                this.propertiesAndGettersByKey\x2C\n                this.unmatchablePropertiesAndGetters\n            ]\n            : type === INTERACTION_ACCESSED\n                ? [this.propertiesAndGettersByKey\x2C this.gettersByKey\x2C this.unmatchableGetters]\n                : [this.propertiesAndSettersByKey\x2C this.settersByKey\x2C this.unmatchableSetters];\n        if (typeof key === 'string') {\n            if (propertiesForExactMatchByKey[key]) {\n                const properties = relevantPropertiesByKey[key];\n                if (properties) {\n                    for (const property of properties) {\n                        property.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C subPath\x2C recursionTracker);\n                    }\n                }\n                if (!this.immutable) {\n                    for (const argument of args) {\n                        if (argument) {\n                            this.additionalExpressionsToBeDeoptimized.add(argument);\n                        }\n                    }\n                }\n                return;\n            }\n            for (const property of relevantUnmatchableProperties) {\n                property.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C subPath\x2C recursionTracker);\n            }\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const property of this.unknownIntegerProps) {\n                    property.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C subPath\x2C recursionTracker);\n                }\n            }\n        }\n        else {\n            for (const properties of [\n                ...Object.values(relevantPropertiesByKey)\x2C\n                relevantUnmatchableProperties\n            ]) {\n                for (const property of properties) {\n                    property.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C subPath\x2C recursionTracker);\n                }\n            }\n            for (const property of this.unknownIntegerProps) {\n                property.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C subPath\x2C recursionTracker);\n            }\n        }\n        if (!this.immutable) {\n            for (const argument of args) {\n                if (argument) {\n                    this.additionalExpressionsToBeDeoptimized.add(argument);\n                }\n            }\n        }\n        this.prototypeExpression?.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizeIntegerProperties() {\n        if (this.hasLostTrack ||\n            this.hasUnknownDeoptimizedProperty ||\n            this.hasUnknownDeoptimizedInteger) {\n            return;\n        }\n        this.hasUnknownDeoptimizedInteger = true;\n        for (const [key\x2C propertiesAndGetters] of Object.entries(this.propertiesAndGettersByKey)) {\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const property of propertiesAndGetters) {\n                    property.deoptimizePath(UNKNOWN_PATH);\n                }\n            }\n        }\n        this.deoptimizeCachedIntegerEntities();\n    }\n    // Assumption: If only a specific path is deoptimized\x2C no accessors are created\n    deoptimizePath(path) {\n        if (this.hasLostTrack || this.immutable) {\n            return;\n        }\n        const key = path[0];\n        if (path.length === 1) {\n            if (typeof key !== 'string') {\n                if (key === UnknownInteger) {\n                    return this.deoptimizeIntegerProperties();\n                }\n                return this.deoptimizeAllProperties(key === UnknownNonAccessorKey);\n            }\n            if (!this.deoptimizedPaths[key]) {\n                this.deoptimizedPaths[key] = true;\n                // we only deoptimizeCache exact matches as in all other cases\x2C\n                // we do not return a literal value or return expression\n                const expressionsToBeDeoptimized = this.expressionsToBeDeoptimizedByKey[key];\n                if (expressionsToBeDeoptimized) {\n                    for (const expression of expressionsToBeDeoptimized) {\n                        expression.deoptimizeCache();\n                    }\n                }\n            }\n        }\n        const subPath = path.length === 1 ? UNKNOWN_PATH : path.slice(1);\n        for (const property of typeof key === 'string'\n            ? [\n                ...(this.propertiesAndGettersByKey[key] || this.unmatchablePropertiesAndGetters)\x2C\n                ...(this.settersByKey[key] || this.unmatchableSetters)\n            ]\n            : this.allProperties) {\n            property.deoptimizePath(subPath);\n        }\n        this.prototypeExpression?.deoptimizePath(path.length === 1 ? [...path\x2C UnknownKey] : path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (path.length === 0) {\n            return UnknownTruthyValue;\n        }\n        const key = path[0];\n        const expressionAtPath = this.getMemberExpressionAndTrackDeopt(key\x2C origin);\n        if (expressionAtPath) {\n            return expressionAtPath.getLiteralValueAtPath(path.slice(1)\x2C recursionTracker\x2C origin);\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n        }\n        if (path.length === 1) {\n            return undefined;\n        }\n        return UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        if (path.length === 0) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        const [key\x2C ...subPath] = path;\n        const expressionAtPath = this.getMemberExpressionAndTrackDeopt(key\x2C origin);\n        if (expressionAtPath) {\n            return expressionAtPath.getReturnExpressionWhenCalledAtPath(subPath\x2C interaction\x2C recursionTracker\x2C origin);\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const [key\x2C ...subPath] = path;\n        if (subPath.length > 0 || interaction.type === INTERACTION_CALLED) {\n            const expressionAtPath = this.getMemberExpression(key);\n            if (expressionAtPath) {\n                return expressionAtPath.hasEffectsOnInteractionAtPath(subPath\x2C interaction\x2C context);\n            }\n            if (this.prototypeExpression) {\n                return this.prototypeExpression.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n            }\n            return true;\n        }\n        if (key === UnknownNonAccessorKey)\n            return false;\n        if (this.hasLostTrack)\n            return true;\n        const [propertiesAndAccessorsByKey\x2C accessorsByKey\x2C unmatchableAccessors] = interaction.type === INTERACTION_ACCESSED\n            ? [this.propertiesAndGettersByKey\x2C this.gettersByKey\x2C this.unmatchableGetters]\n            : [this.propertiesAndSettersByKey\x2C this.settersByKey\x2C this.unmatchableSetters];\n        if (typeof key === 'string') {\n            if (propertiesAndAccessorsByKey[key]) {\n                const accessors = accessorsByKey[key];\n                if (accessors) {\n                    for (const accessor of accessors) {\n                        if (accessor.hasEffectsOnInteractionAtPath(subPath\x2C interaction\x2C context))\n                            return true;\n                    }\n                }\n                return false;\n            }\n            for (const accessor of unmatchableAccessors) {\n                if (accessor.hasEffectsOnInteractionAtPath(subPath\x2C interaction\x2C context)) {\n                    return true;\n                }\n            }\n        }\n        else {\n            for (const accessors of [...Object.values(accessorsByKey)\x2C unmatchableAccessors]) {\n                for (const accessor of accessors) {\n                    if (accessor.hasEffectsOnInteractionAtPath(subPath\x2C interaction\x2C context))\n                        return true;\n                }\n            }\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n        }\n        return false;\n    }\n    buildPropertyMaps(properties) {\n        const { allProperties\x2C propertiesAndGettersByKey\x2C propertiesAndSettersByKey\x2C settersByKey\x2C gettersByKey\x2C unknownIntegerProps\x2C unmatchablePropertiesAndGetters\x2C unmatchableGetters\x2C unmatchableSetters } = this;\n        const unmatchablePropertiesAndSetters = [];\n        for (let index = properties.length - 1; index >= 0; index--) {\n            const { key\x2C kind\x2C property } = properties[index];\n            allProperties.push(property);\n            if (typeof key === 'string') {\n                if (kind === 'set') {\n                    if (!propertiesAndSettersByKey[key]) {\n                        propertiesAndSettersByKey[key] = [property\x2C ...unmatchablePropertiesAndSetters];\n                        settersByKey[key] = [property\x2C ...unmatchableSetters];\n                    }\n                }\n                else if (kind === 'get') {\n                    if (!propertiesAndGettersByKey[key]) {\n                        propertiesAndGettersByKey[key] = [property\x2C ...unmatchablePropertiesAndGetters];\n                        gettersByKey[key] = [property\x2C ...unmatchableGetters];\n                    }\n                }\n                else {\n                    if (!propertiesAndSettersByKey[key]) {\n                        propertiesAndSettersByKey[key] = [property\x2C ...unmatchablePropertiesAndSetters];\n                    }\n                    if (!propertiesAndGettersByKey[key]) {\n                        propertiesAndGettersByKey[key] = [property\x2C ...unmatchablePropertiesAndGetters];\n                    }\n                }\n            }\n            else {\n                if (key === UnknownInteger) {\n                    unknownIntegerProps.push(property);\n                    continue;\n                }\n                if (kind === 'set')\n                    unmatchableSetters.push(property);\n                if (kind === 'get')\n                    unmatchableGetters.push(property);\n                if (kind !== 'get')\n                    unmatchablePropertiesAndSetters.push(property);\n                if (kind !== 'set')\n                    unmatchablePropertiesAndGetters.push(property);\n            }\n        }\n    }\n    deoptimizeCachedEntities() {\n        for (const expressionsToBeDeoptimized of Object.values(this.expressionsToBeDeoptimizedByKey)) {\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n        }\n        for (const expression of this.additionalExpressionsToBeDeoptimized) {\n            expression.deoptimizePath(UNKNOWN_PATH);\n        }\n    }\n    deoptimizeCachedIntegerEntities() {\n        for (const [key\x2C expressionsToBeDeoptimized] of Object.entries(this.expressionsToBeDeoptimizedByKey)) {\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const expression of expressionsToBeDeoptimized) {\n                    expression.deoptimizeCache();\n                }\n            }\n        }\n        for (const expression of this.additionalExpressionsToBeDeoptimized) {\n            expression.deoptimizePath(UNKNOWN_INTEGER_PATH);\n        }\n    }\n    getMemberExpression(key) {\n        if (this.hasLostTrack ||\n            this.hasUnknownDeoptimizedProperty ||\n            typeof key !== 'string' ||\n            (this.hasUnknownDeoptimizedInteger && INTEGER_REG_EXP.test(key)) ||\n            this.deoptimizedPaths[key]) {\n            return UNKNOWN_EXPRESSION;\n        }\n        const properties = this.propertiesAndGettersByKey[key];\n        if (properties?.length === 1) {\n            return properties[0];\n        }\n        if (properties ||\n            this.unmatchablePropertiesAndGetters.length > 0 ||\n            (this.unknownIntegerProps.length > 0 && INTEGER_REG_EXP.test(key))) {\n            return UNKNOWN_EXPRESSION;\n        }\n        return null;\n    }\n    getMemberExpressionAndTrackDeopt(key\x2C origin) {\n        if (typeof key !== 'string') {\n            return UNKNOWN_EXPRESSION;\n        }\n        const expression = this.getMemberExpression(key);\n        if (!(expression === UNKNOWN_EXPRESSION || this.immutable)) {\n            const expressionsToBeDeoptimized = (this.expressionsToBeDeoptimizedByKey[key] =\n                this.expressionsToBeDeoptimizedByKey[key] || []);\n            expressionsToBeDeoptimized.push(origin);\n        }\n        return expression;\n    }\n}\n\nconst isInteger = (property) => typeof property === 'string' && /^\\d+$/.test(property);\n// This makes sure unknown properties are not handled as "undefined" but as\n// "unknown" but without access side effects. An exception is done for numeric\n// properties as we do not expect new builtin properties to be numbers\x2C this\n// will improve tree-shaking for out-of-bounds array properties\nconst OBJECT_PROTOTYPE_FALLBACK = new (class ObjectPrototypeFallbackExpression extends ExpressionEntity {\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path) {\n        if (interaction.type === INTERACTION_CALLED && path.length === 1 && !isInteger(path[0])) {\n            deoptimizeInteraction(interaction);\n        }\n    }\n    getLiteralValueAtPath(path) {\n        // We ignore number properties as we do not expect new properties to be\n        // numbers and also want to keep handling out-of-bound array elements as\n        // "undefined"\n        return path.length === 1 && isInteger(path[0]) ? undefined : UnknownValue;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return path.length > 1 || type === INTERACTION_CALLED;\n    }\n})();\nconst OBJECT_PROTOTYPE = new ObjectEntity({\n    __proto__: null\x2C\n    hasOwnProperty: METHOD_RETURNS_BOOLEAN\x2C\n    isPrototypeOf: METHOD_RETURNS_BOOLEAN\x2C\n    propertyIsEnumerable: METHOD_RETURNS_BOOLEAN\x2C\n    toLocaleString: METHOD_RETURNS_STRING\x2C\n    toString: METHOD_RETURNS_STRING\x2C\n    valueOf: METHOD_RETURNS_UNKNOWN\n}\x2C OBJECT_PROTOTYPE_FALLBACK\x2C true);\n\nconst NEW_ARRAY_PROPERTIES = [\n    { key: UnknownInteger\x2C kind: 'init'\x2C property: UNKNOWN_EXPRESSION }\x2C\n    { key: 'length'\x2C kind: 'init'\x2C property: UNKNOWN_LITERAL_NUMBER }\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN = [\n    new Method({\n        callsArgs: [0]\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_BOOLEAN\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: [0]\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: true\x2C\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES\x2C ARRAY_PROTOTYPE)\x2C\n        returnsPrimitive: null\n    })\n];\nconst METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES\x2C ARRAY_PROTOTYPE)\x2C\n        returnsPrimitive: null\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: [0]\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES\x2C ARRAY_PROTOTYPE)\x2C\n        returnsPrimitive: null\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: true\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: true\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_DEOPTS_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: [0]\x2C\n        mutatesSelfAsArray: 'deopt-only'\x2C\n        returns: null\x2C\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_SELF = [\n    new Method({\n        callsArgs: null\x2C\n        mutatesSelfAsArray: true\x2C\n        returns: 'self'\x2C\n        returnsPrimitive: null\n    })\n];\nconst METHOD_CALLS_ARG_MUTATES_SELF_RETURNS_SELF = [\n    new Method({\n        callsArgs: [0]\x2C\n        mutatesSelfAsArray: true\x2C\n        returns: 'self'\x2C\n        returnsPrimitive: null\n    })\n];\nconst ARRAY_PROTOTYPE = new ObjectEntity({\n    __proto__: null\x2C\n    // We assume that accessors have effects as we do not track the accessed value afterwards\n    at: METHOD_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    concat: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    copyWithin: METHOD_MUTATES_SELF_RETURNS_SELF\x2C\n    entries: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    every: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN\x2C\n    fill: METHOD_MUTATES_SELF_RETURNS_SELF\x2C\n    filter: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    find: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    findIndex: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER\x2C\n    findLast: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    findLastIndex: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER\x2C\n    flat: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    flatMap: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    forEach: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    includes: METHOD_RETURNS_BOOLEAN\x2C\n    indexOf: METHOD_RETURNS_NUMBER\x2C\n    join: METHOD_RETURNS_STRING\x2C\n    keys: METHOD_RETURNS_UNKNOWN\x2C\n    lastIndexOf: METHOD_RETURNS_NUMBER\x2C\n    map: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    pop: METHOD_MUTATES_SELF_RETURNS_UNKNOWN\x2C\n    push: METHOD_MUTATES_SELF_RETURNS_NUMBER\x2C\n    reduce: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    reduceRight: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN\x2C\n    reverse: METHOD_MUTATES_SELF_RETURNS_SELF\x2C\n    shift: METHOD_MUTATES_SELF_RETURNS_UNKNOWN\x2C\n    slice: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY\x2C\n    some: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN\x2C\n    sort: METHOD_CALLS_ARG_MUTATES_SELF_RETURNS_SELF\x2C\n    splice: METHOD_MUTATES_SELF_RETURNS_NEW_ARRAY\x2C\n    toLocaleString: METHOD_RETURNS_STRING\x2C\n    toString: METHOD_RETURNS_STRING\x2C\n    unshift: METHOD_MUTATES_SELF_RETURNS_NUMBER\x2C\n    values: METHOD_DEOPTS_SELF_RETURNS_UNKNOWN\n}\x2C OBJECT_PROTOTYPE\x2C true);\n\nclass ArrayExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return this.getObjectEntity().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        let hasSpread = false;\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            if (element && (hasSpread || element instanceof SpreadElement)) {\n                hasSpread = true;\n                element.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.context.requestTreeshakingPass();\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        const properties = [\n            { key: 'length'\x2C kind: 'init'\x2C property: UNKNOWN_LITERAL_NUMBER }\n        ];\n        let hasSpread = false;\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            if (hasSpread || element instanceof SpreadElement) {\n                if (element) {\n                    hasSpread = true;\n                    properties.unshift({ key: UnknownInteger\x2C kind: 'init'\x2C property: element });\n                }\n            }\n            else if (element) {\n                properties.push({ key: String(index)\x2C kind: 'init'\x2C property: element });\n            }\n            else {\n                properties.push({ key: String(index)\x2C kind: 'init'\x2C property: UNDEFINED_EXPRESSION });\n            }\n        }\n        return (this.objectEntity = new ObjectEntity(properties\x2C ARRAY_PROTOTYPE));\n    }\n}\n\nclass ArrayPattern extends NodeBase {\n    addExportedVariables(variables\x2C exportNamesByVariable) {\n        for (const element of this.elements) {\n            element?.addExportedVariables(variables\x2C exportNamesByVariable);\n        }\n    }\n    declare(kind) {\n        const variables = [];\n        for (const element of this.elements) {\n            if (element !== null) {\n                variables.push(...element.declare(kind\x2C UNKNOWN_EXPRESSION));\n            }\n        }\n        return variables;\n    }\n    // Patterns can only be deoptimized at the empty path at the moment\n    deoptimizePath() {\n        for (const element of this.elements) {\n            element?.deoptimizePath(EMPTY_PATH);\n        }\n    }\n    // Patterns are only checked at the emtpy path at the moment\n    hasEffectsOnInteractionAtPath(_path\x2C interaction\x2C context) {\n        for (const element of this.elements) {\n            if (element?.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C interaction\x2C context))\n                return true;\n        }\n        return false;\n    }\n    markDeclarationReached() {\n        for (const element of this.elements) {\n            element?.markDeclarationReached();\n        }\n    }\n}\n\nclass LocalVariable extends Variable {\n    constructor(name\x2C declarator\x2C init\x2C context) {\n        super(name);\n        this.init = init;\n        this.calledFromTryStatement = false;\n        this.additionalInitializers = null;\n        this.expressionsToBeDeoptimized = [];\n        this.declarations = declarator ? [declarator] : [];\n        this.deoptimizationTracker = context.deoptimizationTracker;\n        this.module = context.module;\n    }\n    addDeclaration(identifier\x2C init) {\n        this.declarations.push(identifier);\n        this.markInitializersForDeoptimization().push(init);\n    }\n    consolidateInitializers() {\n        if (this.additionalInitializers) {\n            for (const initializer of this.additionalInitializers) {\n                initializer.deoptimizePath(UNKNOWN_PATH);\n            }\n            this.additionalInitializers = null;\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (this.isReassigned) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        recursionTracker.withTrackedEntityAtPath(path\x2C this.init\x2C () => this.init.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker)\x2C undefined);\n    }\n    deoptimizePath(path) {\n        if (this.isReassigned ||\n            this.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(path\x2C this)) {\n            return;\n        }\n        if (path.length === 0) {\n            if (!this.isReassigned) {\n                this.isReassigned = true;\n                const expressionsToBeDeoptimized = this.expressionsToBeDeoptimized;\n                this.expressionsToBeDeoptimized = EMPTY_ARRAY;\n                for (const expression of expressionsToBeDeoptimized) {\n                    expression.deoptimizeCache();\n                }\n                this.init.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        else {\n            this.init.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (this.isReassigned) {\n            return UnknownValue;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path\x2C this.init\x2C () => {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.init.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n        }\x2C UnknownValue);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        if (this.isReassigned) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path\x2C this.init\x2C () => {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.init.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n        }\x2C UNKNOWN_RETURN_EXPRESSION);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                if (this.isReassigned)\n                    return true;\n                return (!context.accessed.trackEntityAtPathAndGetIfTracked(path\x2C this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n            }\n            case INTERACTION_ASSIGNED: {\n                if (this.included)\n                    return true;\n                if (path.length === 0)\n                    return false;\n                if (this.isReassigned)\n                    return true;\n                return (!context.assigned.trackEntityAtPathAndGetIfTracked(path\x2C this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n            }\n            case INTERACTION_CALLED: {\n                if (this.isReassigned)\n                    return true;\n                return (!(interaction.withNew ? context.instantiated : context.called).trackEntityAtPathAndGetIfTracked(path\x2C interaction.args\x2C this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n            }\n        }\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            for (const declaration of this.declarations) {\n                // If node is a default export\x2C it can save a tree-shaking run to include the full declaration now\n                if (!declaration.included)\n                    declaration.include(createInclusionContext()\x2C false);\n                let node = declaration.parent;\n                while (!node.included) {\n                    // We do not want to properly include parents in case they are part of a dead branch\n                    // in which case .include() might pull in more dead code\n                    node.included = true;\n                    if (node.type === Program$1)\n                        break;\n                    node = node.parent;\n                }\n            }\n        }\n    }\n    includeCallArguments(context\x2C parameters) {\n        if (this.isReassigned || context.includedCallArguments.has(this.init)) {\n            for (const argument of parameters) {\n                argument.include(context\x2C false);\n            }\n        }\n        else {\n            context.includedCallArguments.add(this.init);\n            this.init.includeCallArguments(context\x2C parameters);\n            context.includedCallArguments.delete(this.init);\n        }\n    }\n    markCalledFromTryStatement() {\n        this.calledFromTryStatement = true;\n    }\n    markInitializersForDeoptimization() {\n        if (this.additionalInitializers === null) {\n            this.additionalInitializers = [this.init];\n            this.init = UNKNOWN_EXPRESSION;\n            this.isReassigned = true;\n        }\n        return this.additionalInitializers;\n    }\n    mergeDeclarations(variable) {\n        const { declarations } = this;\n        for (const declaration of variable.declarations) {\n            declarations.push(declaration);\n        }\n        const additionalInitializers = this.markInitializersForDeoptimization();\n        additionalInitializers.push(variable.init);\n        if (variable.additionalInitializers) {\n            for (const initializer of variable.additionalInitializers) {\n                additionalInitializers.push(initializer);\n            }\n        }\n    }\n}\n\nconst MAX_TRACKED_INTERACTIONS = 20;\nconst NO_INTERACTIONS = EMPTY_ARRAY;\nconst UNKNOWN_DEOPTIMIZED_FIELD = new Set([UnknownKey]);\nconst EMPTY_PATH_TRACKER = new PathTracker();\nconst UNKNOWN_DEOPTIMIZED_ENTITY = new Set([UNKNOWN_EXPRESSION]);\nclass ParameterVariable extends LocalVariable {\n    constructor(name\x2C declarator\x2C context) {\n        super(name\x2C declarator\x2C UNKNOWN_EXPRESSION\x2C context);\n        this.deoptimizationInteractions = [];\n        this.deoptimizations = new PathTracker();\n        this.deoptimizedFields = new Set();\n        this.entitiesToBeDeoptimized = new Set();\n    }\n    addEntityToBeDeoptimized(entity) {\n        if (entity === UNKNOWN_EXPRESSION) {\n            // As unknown expressions fully deoptimize all interactions\x2C we can clear\n            // the interaction cache at this point provided we keep this optimization\n            // in mind when adding new interactions\n            if (!this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION)) {\n                this.entitiesToBeDeoptimized.add(UNKNOWN_EXPRESSION);\n                for (const { interaction } of this.deoptimizationInteractions) {\n                    deoptimizeInteraction(interaction);\n                }\n                this.deoptimizationInteractions = NO_INTERACTIONS;\n            }\n        }\n        else if (this.deoptimizedFields.has(UnknownKey)) {\n            // This means that we already deoptimized all interactions and no longer\n            // track them\n            entity.deoptimizePath(UNKNOWN_PATH);\n        }\n        else if (!this.entitiesToBeDeoptimized.has(entity)) {\n            this.entitiesToBeDeoptimized.add(entity);\n            for (const field of this.deoptimizedFields) {\n                entity.deoptimizePath([field]);\n            }\n            for (const { interaction\x2C path } of this.deoptimizationInteractions) {\n                entity.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C SHARED_RECURSION_TRACKER);\n            }\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path) {\n        // For performance reasons\x2C we fully deoptimize all deeper interactions\n        if (path.length >= 2 ||\n            this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION) ||\n            this.deoptimizationInteractions.length >= MAX_TRACKED_INTERACTIONS ||\n            (path.length === 1 &&\n                (this.deoptimizedFields.has(UnknownKey) ||\n                    (interaction.type === INTERACTION_CALLED && this.deoptimizedFields.has(path[0]))))) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        if (!this.deoptimizations.trackEntityAtPathAndGetIfTracked(path\x2C interaction.args)) {\n            for (const entity of this.entitiesToBeDeoptimized) {\n                entity.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C SHARED_RECURSION_TRACKER);\n            }\n            if (!this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION)) {\n                this.deoptimizationInteractions.push({\n                    interaction\x2C\n                    path\n                });\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0 || this.deoptimizedFields.has(UnknownKey)) {\n            return;\n        }\n        const key = path[0];\n        if (this.deoptimizedFields.has(key)) {\n            return;\n        }\n        this.deoptimizedFields.add(key);\n        for (const entity of this.entitiesToBeDeoptimized) {\n            // We do not need a recursion tracker here as we already track whether\n            // this field is deoptimized\n            entity.deoptimizePath(path);\n        }\n        if (key === UnknownKey) {\n            // save some memory\n            this.deoptimizationInteractions = NO_INTERACTIONS;\n            this.deoptimizations = EMPTY_PATH_TRACKER;\n            this.deoptimizedFields = UNKNOWN_DEOPTIMIZED_FIELD;\n            this.entitiesToBeDeoptimized = UNKNOWN_DEOPTIMIZED_ENTITY;\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        // We deoptimize everything that is called as that will trivially deoptimize\n        // the corresponding return expressions as well and avoid badly performing\n        // and complicated alternatives\n        if (path.length === 0) {\n            this.deoptimizePath(UNKNOWN_PATH);\n        }\n        else if (!this.deoptimizedFields.has(path[0])) {\n            this.deoptimizePath([path[0]]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n}\n\nconst chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';\nconst base = 64;\nfunction toBase64(value) {\n    let outString = '';\n    do {\n        const currentDigit = value % base;\n        value = (value / base) | 0;\n        outString = chars[currentDigit] + outString;\n    } while (value !== 0);\n    return outString;\n}\n\nfunction getSafeName(baseName\x2C usedNames\x2C forbiddenNames) {\n    let safeName = baseName;\n    let count = 1;\n    while (usedNames.has(safeName) || RESERVED_NAMES$1.has(safeName) || forbiddenNames?.has(safeName)) {\n        safeName = `${baseName}$${toBase64(count++)}`;\n    }\n    usedNames.add(safeName);\n    return safeName;\n}\n\nlet Scope$1 = class Scope {\n    constructor() {\n        this.children = [];\n        this.variables = new Map();\n    }\n    addDeclaration(identifier\x2C context\x2C init\x2C _isHoisted) {\n        const name = identifier.name;\n        let variable = this.variables.get(name);\n        if (variable) {\n            variable.addDeclaration(identifier\x2C init);\n        }\n        else {\n            variable = new LocalVariable(identifier.name\x2C identifier\x2C init || UNDEFINED_EXPRESSION\x2C context);\n            this.variables.set(name\x2C variable);\n        }\n        return variable;\n    }\n    contains(name) {\n        return this.variables.has(name);\n    }\n    findVariable(_name) {\n        throw new Error('Internal Error: findVariable needs to be implemented by a subclass');\n    }\n};\n\nclass ChildScope extends Scope$1 {\n    constructor(parent) {\n        super();\n        this.accessedOutsideVariables = new Map();\n        this.parent = parent;\n        parent.children.push(this);\n    }\n    addAccessedDynamicImport(importExpression) {\n        (this.accessedDynamicImports || (this.accessedDynamicImports = new Set())).add(importExpression);\n        if (this.parent instanceof ChildScope) {\n            this.parent.addAccessedDynamicImport(importExpression);\n        }\n    }\n    addAccessedGlobals(globals\x2C accessedGlobalsByScope) {\n        const accessedGlobals = accessedGlobalsByScope.get(this) || new Set();\n        for (const name of globals) {\n            accessedGlobals.add(name);\n        }\n        accessedGlobalsByScope.set(this\x2C accessedGlobals);\n        if (this.parent instanceof ChildScope) {\n            this.parent.addAccessedGlobals(globals\x2C accessedGlobalsByScope);\n        }\n    }\n    addNamespaceMemberAccess(name\x2C variable) {\n        this.accessedOutsideVariables.set(name\x2C variable);\n        this.parent.addNamespaceMemberAccess(name\x2C variable);\n    }\n    addReturnExpression(expression) {\n        this.parent instanceof ChildScope && this.parent.addReturnExpression(expression);\n    }\n    addUsedOutsideNames(usedNames\x2C format\x2C exportNamesByVariable\x2C accessedGlobalsByScope) {\n        for (const variable of this.accessedOutsideVariables.values()) {\n            if (variable.included) {\n                usedNames.add(variable.getBaseVariableName());\n                if (format === 'system' && exportNamesByVariable.has(variable)) {\n                    usedNames.add('exports');\n                }\n            }\n        }\n        const accessedGlobals = accessedGlobalsByScope.get(this);\n        if (accessedGlobals) {\n            for (const name of accessedGlobals) {\n                usedNames.add(name);\n            }\n        }\n    }\n    contains(name) {\n        return this.variables.has(name) || this.parent.contains(name);\n    }\n    deconflict(format\x2C exportNamesByVariable\x2C accessedGlobalsByScope) {\n        const usedNames = new Set();\n        this.addUsedOutsideNames(usedNames\x2C format\x2C exportNamesByVariable\x2C accessedGlobalsByScope);\n        if (this.accessedDynamicImports) {\n            for (const importExpression of this.accessedDynamicImports) {\n                if (importExpression.inlineNamespace) {\n                    usedNames.add(importExpression.inlineNamespace.getBaseVariableName());\n                }\n            }\n        }\n        for (const [name\x2C variable] of this.variables) {\n            if (variable.included || variable.alwaysRendered) {\n                variable.setRenderNames(null\x2C getSafeName(name\x2C usedNames\x2C variable.forbiddenNames));\n            }\n        }\n        for (const scope of this.children) {\n            scope.deconflict(format\x2C exportNamesByVariable\x2C accessedGlobalsByScope);\n        }\n    }\n    findLexicalBoundary() {\n        return this.parent.findLexicalBoundary();\n    }\n    findVariable(name) {\n        const knownVariable = this.variables.get(name) || this.accessedOutsideVariables.get(name);\n        if (knownVariable) {\n            return knownVariable;\n        }\n        const variable = this.parent.findVariable(name);\n        this.accessedOutsideVariables.set(name\x2C variable);\n        return variable;\n    }\n}\n\nclass ParameterScope extends ChildScope {\n    constructor(parent\x2C context) {\n        super(parent);\n        this.parameters = [];\n        this.hasRest = false;\n        this.context = context;\n        this.hoistedBodyVarScope = new ChildScope(this);\n    }\n    /**\n     * Adds a parameter to this scope. Parameters must be added in the correct\n     * order\x2C i.e. from left to right.\n     */\n    addParameterDeclaration(identifier) {\n        const { name } = identifier;\n        const variable = new ParameterVariable(name\x2C identifier\x2C this.context);\n        const localVariable = this.hoistedBodyVarScope.variables.get(name);\n        if (localVariable) {\n            this.hoistedBodyVarScope.variables.set(name\x2C variable);\n            variable.mergeDeclarations(localVariable);\n        }\n        this.variables.set(name\x2C variable);\n        return variable;\n    }\n    addParameterVariables(parameters\x2C hasRest) {\n        this.parameters = parameters;\n        for (const parameterList of parameters) {\n            for (const parameter of parameterList) {\n                parameter.alwaysRendered = true;\n            }\n        }\n        this.hasRest = hasRest;\n    }\n    includeCallArguments(context\x2C parameters) {\n        let calledFromTryStatement = false;\n        let argumentIncluded = false;\n        const restParameter = this.hasRest && this.parameters[this.parameters.length - 1];\n        for (const checkedArgument of parameters) {\n            if (checkedArgument instanceof SpreadElement) {\n                for (const argument of parameters) {\n                    argument.include(context\x2C false);\n                }\n                break;\n            }\n        }\n        for (let index = parameters.length - 1; index >= 0; index--) {\n            const parameterVariables = this.parameters[index] || restParameter;\n            const argument = parameters[index];\n            if (parameterVariables) {\n                calledFromTryStatement = false;\n                if (parameterVariables.length === 0) {\n                    // handle empty destructuring\n                    argumentIncluded = true;\n                }\n                else {\n                    for (const variable of parameterVariables) {\n                        if (variable.included) {\n                            argumentIncluded = true;\n                        }\n                        if (variable.calledFromTryStatement) {\n                            calledFromTryStatement = true;\n                        }\n                    }\n                }\n            }\n            if (!argumentIncluded && argument.shouldBeIncluded(context)) {\n                argumentIncluded = true;\n            }\n            if (argumentIncluded) {\n                argument.include(context\x2C calledFromTryStatement);\n            }\n        }\n    }\n}\n\nclass ReturnValueScope extends ParameterScope {\n    constructor() {\n        super(...arguments);\n        this.returnExpression = null;\n        this.returnExpressions = [];\n    }\n    addReturnExpression(expression) {\n        this.returnExpressions.push(expression);\n    }\n    getReturnExpression() {\n        if (this.returnExpression === null)\n            this.updateReturnExpression();\n        return this.returnExpression;\n    }\n    updateReturnExpression() {\n        if (this.returnExpressions.length === 1) {\n            this.returnExpression = this.returnExpressions[0];\n        }\n        else {\n            this.returnExpression = UNKNOWN_EXPRESSION;\n            for (const expression of this.returnExpressions) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n    }\n}\n\n/** @typedef { import('estree').Node} Node */\n/** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */\n\n/**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns {boolean}\n */\nfunction is_reference (node\x2C parent) {\n\x09if (node.type === 'MemberExpression') {\n\x09\x09return !node.computed && is_reference(node.object\x2C node);\n\x09}\n\n\x09if (node.type === 'Identifier') {\n\x09\x09if (!parent) return true;\n\n\x09\x09switch (parent.type) {\n\x09\x09\x09// disregard `bar` in `foo.bar`\n\x09\x09\x09case 'MemberExpression': return parent.computed || node === parent.object;\n\n\x09\x09\x09// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n\x09\x09\x09case 'MethodDefinition': return parent.computed;\n\n\x09\x09\x09// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n\x09\x09\x09case 'PropertyDefinition': return parent.computed || node === parent.value;\n\n\x09\x09\x09// disregard the `bar` in `{ bar: foo }`\x2C but keep it in `{ [bar]: foo }`\n\x09\x09\x09case 'Property': return parent.computed || node === parent.value;\n\n\x09\x09\x09// disregard the `bar` in `export { foo as bar }` or\n\x09\x09\x09// the foo in `import { foo as bar }`\n\x09\x09\x09case 'ExportSpecifier':\n\x09\x09\x09case 'ImportSpecifier': return node === parent.local;\n\n\x09\x09\x09// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n\x09\x09\x09case 'LabeledStatement':\n\x09\x09\x09case 'BreakStatement':\n\x09\x09\x09case 'ContinueStatement': return false;\n\x09\x09\x09default: return true;\n\x09\x09}\n\x09}\n\n\x09return false;\n}\n\nconst PureFunctionKey = Symbol('PureFunction');\nconst getPureFunctions = ({ treeshake }) => {\n    const pureFunctions = Object.create(null);\n    for (const functionName of treeshake ? treeshake.manualPureFunctions : []) {\n        let currentFunctions = pureFunctions;\n        for (const pathSegment of functionName.split('.')) {\n            currentFunctions = currentFunctions[pathSegment] || (currentFunctions[pathSegment] = Object.create(null));\n        }\n        currentFunctions[PureFunctionKey] = true;\n    }\n    return pureFunctions;\n};\n\nconst doNothing = () => { };\n\n/* eslint sort-keys: "off" */\nconst ValueProperties = Symbol('Value Properties');\nconst getTruthyLiteralValue = () => UnknownTruthyValue;\nconst returnFalse = () => false;\nconst returnTrue = () => true;\nconst PURE = {\n    deoptimizeArgumentsOnCall: doNothing\x2C\n    getLiteralValue: getTruthyLiteralValue\x2C\n    hasEffectsWhenCalled: returnFalse\n};\nconst IMPURE = {\n    deoptimizeArgumentsOnCall: doNothing\x2C\n    getLiteralValue: getTruthyLiteralValue\x2C\n    hasEffectsWhenCalled: returnTrue\n};\nconst PURE_WITH_ARRAY = {\n    deoptimizeArgumentsOnCall: doNothing\x2C\n    getLiteralValue: getTruthyLiteralValue\x2C\n    hasEffectsWhenCalled({ args }) {\n        return args.length > 1 && !(args[1] instanceof ArrayExpression);\n    }\n};\nconst GETTER_ACCESS = {\n    deoptimizeArgumentsOnCall: doNothing\x2C\n    getLiteralValue: getTruthyLiteralValue\x2C\n    hasEffectsWhenCalled({ args }\x2C context) {\n        const [_thisArgument\x2C firstArgument] = args;\n        return (!(firstArgument instanceof ExpressionEntity) ||\n            firstArgument.hasEffectsOnInteractionAtPath(UNKNOWN_PATH\x2C NODE_INTERACTION_UNKNOWN_ACCESS\x2C context));\n    }\n};\n// We use shortened variables to reduce file size here\n/* OBJECT */\nconst O = {\n    __proto__: null\x2C\n    [ValueProperties]: IMPURE\n};\n/* PURE FUNCTION */\nconst PF = {\n    __proto__: null\x2C\n    [ValueProperties]: PURE\n};\n/* PURE FUNCTION IF FIRST ARG DOES NOT CONTAIN A GETTER */\nconst PF_NO_GETTER = {\n    __proto__: null\x2C\n    [ValueProperties]: GETTER_ACCESS\n};\n/* FUNCTION THAT MUTATES FIRST ARG WITHOUT TRIGGERING ACCESSORS */\nconst MUTATES_ARG_WITHOUT_ACCESSOR = {\n    __proto__: null\x2C\n    [ValueProperties]: {\n        deoptimizeArgumentsOnCall({ args: [\x2C firstArgument] }) {\n            firstArgument?.deoptimizePath(UNKNOWN_PATH);\n        }\x2C\n        getLiteralValue: getTruthyLiteralValue\x2C\n        hasEffectsWhenCalled({ args }\x2C context) {\n            return (args.length <= 1 ||\n                args[1].hasEffectsOnInteractionAtPath(UNKNOWN_NON_ACCESSOR_PATH\x2C NODE_INTERACTION_UNKNOWN_ASSIGNMENT\x2C context));\n        }\n    }\n};\n/* CONSTRUCTOR */\nconst C = {\n    __proto__: null\x2C\n    [ValueProperties]: IMPURE\x2C\n    prototype: O\n};\n/* PURE CONSTRUCTOR */\nconst PC = {\n    __proto__: null\x2C\n    [ValueProperties]: PURE\x2C\n    prototype: O\n};\nconst PC_WITH_ARRAY = {\n    __proto__: null\x2C\n    [ValueProperties]: PURE_WITH_ARRAY\x2C\n    prototype: O\n};\nconst ARRAY_TYPE = {\n    __proto__: null\x2C\n    [ValueProperties]: PURE\x2C\n    from: O\x2C\n    of: PF\x2C\n    prototype: O\n};\nconst INTL_MEMBER = {\n    __proto__: null\x2C\n    [ValueProperties]: PURE\x2C\n    supportedLocalesOf: PC\n};\nconst knownGlobals = {\n    // Placeholders for global objects to avoid shape mutations\n    global: O\x2C\n    globalThis: O\x2C\n    self: O\x2C\n    window: O\x2C\n    // Common globals\n    __proto__: null\x2C\n    [ValueProperties]: IMPURE\x2C\n    Array: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        from: O\x2C\n        isArray: PF\x2C\n        of: PF\x2C\n        prototype: O\n    }\x2C\n    ArrayBuffer: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        isView: PF\x2C\n        prototype: O\n    }\x2C\n    Atomics: O\x2C\n    BigInt: C\x2C\n    BigInt64Array: C\x2C\n    BigUint64Array: C\x2C\n    Boolean: PC\x2C\n    constructor: C\x2C\n    DataView: PC\x2C\n    Date: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        now: PF\x2C\n        parse: PF\x2C\n        prototype: O\x2C\n        UTC: PF\n    }\x2C\n    decodeURI: PF\x2C\n    decodeURIComponent: PF\x2C\n    encodeURI: PF\x2C\n    encodeURIComponent: PF\x2C\n    Error: PC\x2C\n    escape: PF\x2C\n    eval: O\x2C\n    EvalError: PC\x2C\n    Float32Array: ARRAY_TYPE\x2C\n    Float64Array: ARRAY_TYPE\x2C\n    Function: C\x2C\n    hasOwnProperty: O\x2C\n    Infinity: O\x2C\n    Int16Array: ARRAY_TYPE\x2C\n    Int32Array: ARRAY_TYPE\x2C\n    Int8Array: ARRAY_TYPE\x2C\n    isFinite: PF\x2C\n    isNaN: PF\x2C\n    isPrototypeOf: O\x2C\n    JSON: O\x2C\n    Map: PC_WITH_ARRAY\x2C\n    Math: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        abs: PF\x2C\n        acos: PF\x2C\n        acosh: PF\x2C\n        asin: PF\x2C\n        asinh: PF\x2C\n        atan: PF\x2C\n        atan2: PF\x2C\n        atanh: PF\x2C\n        cbrt: PF\x2C\n        ceil: PF\x2C\n        clz32: PF\x2C\n        cos: PF\x2C\n        cosh: PF\x2C\n        exp: PF\x2C\n        expm1: PF\x2C\n        floor: PF\x2C\n        fround: PF\x2C\n        hypot: PF\x2C\n        imul: PF\x2C\n        log: PF\x2C\n        log10: PF\x2C\n        log1p: PF\x2C\n        log2: PF\x2C\n        max: PF\x2C\n        min: PF\x2C\n        pow: PF\x2C\n        random: PF\x2C\n        round: PF\x2C\n        sign: PF\x2C\n        sin: PF\x2C\n        sinh: PF\x2C\n        sqrt: PF\x2C\n        tan: PF\x2C\n        tanh: PF\x2C\n        trunc: PF\n    }\x2C\n    NaN: O\x2C\n    Number: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        isFinite: PF\x2C\n        isInteger: PF\x2C\n        isNaN: PF\x2C\n        isSafeInteger: PF\x2C\n        parseFloat: PF\x2C\n        parseInt: PF\x2C\n        prototype: O\n    }\x2C\n    Object: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        create: PF\x2C\n        // Technically those can throw in certain situations\x2C but we ignore this as\n        // code that relies on this will hopefully wrap this in a try-catch\x2C which\n        // deoptimizes everything anyway\n        defineProperty: MUTATES_ARG_WITHOUT_ACCESSOR\x2C\n        defineProperties: MUTATES_ARG_WITHOUT_ACCESSOR\x2C\n        freeze: MUTATES_ARG_WITHOUT_ACCESSOR\x2C\n        getOwnPropertyDescriptor: PF\x2C\n        getOwnPropertyDescriptors: PF\x2C\n        getOwnPropertyNames: PF\x2C\n        getOwnPropertySymbols: PF\x2C\n        getPrototypeOf: PF\x2C\n        hasOwn: PF\x2C\n        is: PF\x2C\n        isExtensible: PF\x2C\n        isFrozen: PF\x2C\n        isSealed: PF\x2C\n        keys: PF\x2C\n        fromEntries: O\x2C\n        entries: PF_NO_GETTER\x2C\n        values: PF_NO_GETTER\x2C\n        prototype: O\n    }\x2C\n    parseFloat: PF\x2C\n    parseInt: PF\x2C\n    Promise: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        all: O\x2C\n        allSettled: O\x2C\n        any: O\x2C\n        prototype: O\x2C\n        race: O\x2C\n        reject: O\x2C\n        resolve: O\n    }\x2C\n    propertyIsEnumerable: O\x2C\n    Proxy: O\x2C\n    RangeError: PC\x2C\n    ReferenceError: PC\x2C\n    Reflect: O\x2C\n    RegExp: PC\x2C\n    Set: PC_WITH_ARRAY\x2C\n    SharedArrayBuffer: C\x2C\n    String: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        fromCharCode: PF\x2C\n        fromCodePoint: PF\x2C\n        prototype: O\x2C\n        raw: PF\n    }\x2C\n    Symbol: {\n        __proto__: null\x2C\n        [ValueProperties]: PURE\x2C\n        for: PF\x2C\n        keyFor: PF\x2C\n        prototype: O\x2C\n        toStringTag: {\n            __proto__: null\x2C\n            [ValueProperties]: {\n                deoptimizeArgumentsOnCall: doNothing\x2C\n                getLiteralValue() {\n                    return SymbolToStringTag;\n                }\x2C\n                hasEffectsWhenCalled: returnTrue\n            }\n        }\n    }\x2C\n    SyntaxError: PC\x2C\n    toLocaleString: O\x2C\n    toString: O\x2C\n    TypeError: PC\x2C\n    Uint16Array: ARRAY_TYPE\x2C\n    Uint32Array: ARRAY_TYPE\x2C\n    Uint8Array: ARRAY_TYPE\x2C\n    Uint8ClampedArray: ARRAY_TYPE\x2C\n    // Technically\x2C this is a global\x2C but it needs special handling\n    // undefined: ?\x2C\n    unescape: PF\x2C\n    URIError: PC\x2C\n    valueOf: O\x2C\n    WeakMap: PC_WITH_ARRAY\x2C\n    WeakSet: PC_WITH_ARRAY\x2C\n    // Additional globals shared by Node and Browser that are not strictly part of the language\n    clearInterval: C\x2C\n    clearTimeout: C\x2C\n    console: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        assert: C\x2C\n        clear: C\x2C\n        count: C\x2C\n        countReset: C\x2C\n        debug: C\x2C\n        dir: C\x2C\n        dirxml: C\x2C\n        error: C\x2C\n        exception: C\x2C\n        group: C\x2C\n        groupCollapsed: C\x2C\n        groupEnd: C\x2C\n        info: C\x2C\n        log: C\x2C\n        table: C\x2C\n        time: C\x2C\n        timeEnd: C\x2C\n        timeLog: C\x2C\n        trace: C\x2C\n        warn: C\n    }\x2C\n    Intl: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        Collator: INTL_MEMBER\x2C\n        DateTimeFormat: INTL_MEMBER\x2C\n        DisplayNames: INTL_MEMBER\x2C\n        ListFormat: INTL_MEMBER\x2C\n        Locale: INTL_MEMBER\x2C\n        NumberFormat: INTL_MEMBER\x2C\n        PluralRules: INTL_MEMBER\x2C\n        RelativeTimeFormat: INTL_MEMBER\x2C\n        Segmenter: INTL_MEMBER\n    }\x2C\n    setInterval: C\x2C\n    setTimeout: C\x2C\n    TextDecoder: C\x2C\n    TextEncoder: C\x2C\n    URL: {\n        __proto__: null\x2C\n        [ValueProperties]: IMPURE\x2C\n        prototype: O\x2C\n        canParse: PF\n    }\x2C\n    URLSearchParams: C\x2C\n    // Browser specific globals\n    AbortController: C\x2C\n    AbortSignal: C\x2C\n    addEventListener: O\x2C\n    alert: O\x2C\n    AnalyserNode: C\x2C\n    Animation: C\x2C\n    AnimationEvent: C\x2C\n    applicationCache: O\x2C\n    ApplicationCache: C\x2C\n    ApplicationCacheErrorEvent: C\x2C\n    atob: O\x2C\n    Attr: C\x2C\n    Audio: C\x2C\n    AudioBuffer: C\x2C\n    AudioBufferSourceNode: C\x2C\n    AudioContext: C\x2C\n    AudioDestinationNode: C\x2C\n    AudioListener: C\x2C\n    AudioNode: C\x2C\n    AudioParam: C\x2C\n    AudioProcessingEvent: C\x2C\n    AudioScheduledSourceNode: C\x2C\n    AudioWorkletNode: C\x2C\n    BarProp: C\x2C\n    BaseAudioContext: C\x2C\n    BatteryManager: C\x2C\n    BeforeUnloadEvent: C\x2C\n    BiquadFilterNode: C\x2C\n    Blob: C\x2C\n    BlobEvent: C\x2C\n    blur: O\x2C\n    BroadcastChannel: C\x2C\n    btoa: O\x2C\n    ByteLengthQueuingStrategy: C\x2C\n    Cache: C\x2C\n    caches: O\x2C\n    CacheStorage: C\x2C\n    cancelAnimationFrame: O\x2C\n    cancelIdleCallback: O\x2C\n    CanvasCaptureMediaStreamTrack: C\x2C\n    CanvasGradient: C\x2C\n    CanvasPattern: C\x2C\n    CanvasRenderingContext2D: C\x2C\n    ChannelMergerNode: C\x2C\n    ChannelSplitterNode: C\x2C\n    CharacterData: C\x2C\n    clientInformation: O\x2C\n    ClipboardEvent: C\x2C\n    close: O\x2C\n    closed: O\x2C\n    CloseEvent: C\x2C\n    Comment: C\x2C\n    CompositionEvent: C\x2C\n    confirm: O\x2C\n    ConstantSourceNode: C\x2C\n    ConvolverNode: C\x2C\n    CountQueuingStrategy: C\x2C\n    createImageBitmap: O\x2C\n    Credential: C\x2C\n    CredentialsContainer: C\x2C\n    crypto: O\x2C\n    Crypto: C\x2C\n    CryptoKey: C\x2C\n    CSS: C\x2C\n    CSSConditionRule: C\x2C\n    CSSFontFaceRule: C\x2C\n    CSSGroupingRule: C\x2C\n    CSSImportRule: C\x2C\n    CSSKeyframeRule: C\x2C\n    CSSKeyframesRule: C\x2C\n    CSSMediaRule: C\x2C\n    CSSNamespaceRule: C\x2C\n    CSSPageRule: C\x2C\n    CSSRule: C\x2C\n    CSSRuleList: C\x2C\n    CSSStyleDeclaration: C\x2C\n    CSSStyleRule: C\x2C\n    CSSStyleSheet: C\x2C\n    CSSSupportsRule: C\x2C\n    CustomElementRegistry: C\x2C\n    customElements: O\x2C\n    CustomEvent: C\x2C\n    DataTransfer: C\x2C\n    DataTransferItem: C\x2C\n    DataTransferItemList: C\x2C\n    defaultstatus: O\x2C\n    defaultStatus: O\x2C\n    DelayNode: C\x2C\n    DeviceMotionEvent: C\x2C\n    DeviceOrientationEvent: C\x2C\n    devicePixelRatio: O\x2C\n    dispatchEvent: O\x2C\n    document: O\x2C\n    Document: C\x2C\n    DocumentFragment: C\x2C\n    DocumentType: C\x2C\n    DOMError: C\x2C\n    DOMException: C\x2C\n    DOMImplementation: C\x2C\n    DOMMatrix: C\x2C\n    DOMMatrixReadOnly: C\x2C\n    DOMParser: C\x2C\n    DOMPoint: C\x2C\n    DOMPointReadOnly: C\x2C\n    DOMQuad: C\x2C\n    DOMRect: C\x2C\n    DOMRectReadOnly: C\x2C\n    DOMStringList: C\x2C\n    DOMStringMap: C\x2C\n    DOMTokenList: C\x2C\n    DragEvent: C\x2C\n    DynamicsCompressorNode: C\x2C\n    Element: C\x2C\n    ErrorEvent: C\x2C\n    Event: C\x2C\n    EventSource: C\x2C\n    EventTarget: C\x2C\n    external: O\x2C\n    fetch: O\x2C\n    File: C\x2C\n    FileList: C\x2C\n    FileReader: C\x2C\n    find: O\x2C\n    focus: O\x2C\n    FocusEvent: C\x2C\n    FontFace: C\x2C\n    FontFaceSetLoadEvent: C\x2C\n    FormData: C\x2C\n    frames: O\x2C\n    GainNode: C\x2C\n    Gamepad: C\x2C\n    GamepadButton: C\x2C\n    GamepadEvent: C\x2C\n    getComputedStyle: O\x2C\n    getSelection: O\x2C\n    HashChangeEvent: C\x2C\n    Headers: C\x2C\n    history: O\x2C\n    History: C\x2C\n    HTMLAllCollection: C\x2C\n    HTMLAnchorElement: C\x2C\n    HTMLAreaElement: C\x2C\n    HTMLAudioElement: C\x2C\n    HTMLBaseElement: C\x2C\n    HTMLBodyElement: C\x2C\n    HTMLBRElement: C\x2C\n    HTMLButtonElement: C\x2C\n    HTMLCanvasElement: C\x2C\n    HTMLCollection: C\x2C\n    HTMLContentElement: C\x2C\n    HTMLDataElement: C\x2C\n    HTMLDataListElement: C\x2C\n    HTMLDetailsElement: C\x2C\n    HTMLDialogElement: C\x2C\n    HTMLDirectoryElement: C\x2C\n    HTMLDivElement: C\x2C\n    HTMLDListElement: C\x2C\n    HTMLDocument: C\x2C\n    HTMLElement: C\x2C\n    HTMLEmbedElement: C\x2C\n    HTMLFieldSetElement: C\x2C\n    HTMLFontElement: C\x2C\n    HTMLFormControlsCollection: C\x2C\n    HTMLFormElement: C\x2C\n    HTMLFrameElement: C\x2C\n    HTMLFrameSetElement: C\x2C\n    HTMLHeadElement: C\x2C\n    HTMLHeadingElement: C\x2C\n    HTMLHRElement: C\x2C\n    HTMLHtmlElement: C\x2C\n    HTMLIFrameElement: C\x2C\n    HTMLImageElement: C\x2C\n    HTMLInputElement: C\x2C\n    HTMLLabelElement: C\x2C\n    HTMLLegendElement: C\x2C\n    HTMLLIElement: C\x2C\n    HTMLLinkElement: C\x2C\n    HTMLMapElement: C\x2C\n    HTMLMarqueeElement: C\x2C\n    HTMLMediaElement: C\x2C\n    HTMLMenuElement: C\x2C\n    HTMLMetaElement: C\x2C\n    HTMLMeterElement: C\x2C\n    HTMLModElement: C\x2C\n    HTMLObjectElement: C\x2C\n    HTMLOListElement: C\x2C\n    HTMLOptGroupElement: C\x2C\n    HTMLOptionElement: C\x2C\n    HTMLOptionsCollection: C\x2C\n    HTMLOutputElement: C\x2C\n    HTMLParagraphElement: C\x2C\n    HTMLParamElement: C\x2C\n    HTMLPictureElement: C\x2C\n    HTMLPreElement: C\x2C\n    HTMLProgressElement: C\x2C\n    HTMLQuoteElement: C\x2C\n    HTMLScriptElement: C\x2C\n    HTMLSelectElement: C\x2C\n    HTMLShadowElement: C\x2C\n    HTMLSlotElement: C\x2C\n    HTMLSourceElement: C\x2C\n    HTMLSpanElement: C\x2C\n    HTMLStyleElement: C\x2C\n    HTMLTableCaptionElement: C\x2C\n    HTMLTableCellElement: C\x2C\n    HTMLTableColElement: C\x2C\n    HTMLTableElement: C\x2C\n    HTMLTableRowElement: C\x2C\n    HTMLTableSectionElement: C\x2C\n    HTMLTemplateElement: C\x2C\n    HTMLTextAreaElement: C\x2C\n    HTMLTimeElement: C\x2C\n    HTMLTitleElement: C\x2C\n    HTMLTrackElement: C\x2C\n    HTMLUListElement: C\x2C\n    HTMLUnknownElement: C\x2C\n    HTMLVideoElement: C\x2C\n    IDBCursor: C\x2C\n    IDBCursorWithValue: C\x2C\n    IDBDatabase: C\x2C\n    IDBFactory: C\x2C\n    IDBIndex: C\x2C\n    IDBKeyRange: C\x2C\n    IDBObjectStore: C\x2C\n    IDBOpenDBRequest: C\x2C\n    IDBRequest: C\x2C\n    IDBTransaction: C\x2C\n    IDBVersionChangeEvent: C\x2C\n    IdleDeadline: C\x2C\n    IIRFilterNode: C\x2C\n    Image: C\x2C\n    ImageBitmap: C\x2C\n    ImageBitmapRenderingContext: C\x2C\n    ImageCapture: C\x2C\n    ImageData: C\x2C\n    indexedDB: O\x2C\n    innerHeight: O\x2C\n    innerWidth: O\x2C\n    InputEvent: C\x2C\n    IntersectionObserver: C\x2C\n    IntersectionObserverEntry: C\x2C\n    isSecureContext: O\x2C\n    KeyboardEvent: C\x2C\n    KeyframeEffect: C\x2C\n    length: O\x2C\n    localStorage: O\x2C\n    location: O\x2C\n    Location: C\x2C\n    locationbar: O\x2C\n    matchMedia: O\x2C\n    MediaDeviceInfo: C\x2C\n    MediaDevices: C\x2C\n    MediaElementAudioSourceNode: C\x2C\n    MediaEncryptedEvent: C\x2C\n    MediaError: C\x2C\n    MediaKeyMessageEvent: C\x2C\n    MediaKeySession: C\x2C\n    MediaKeyStatusMap: C\x2C\n    MediaKeySystemAccess: C\x2C\n    MediaList: C\x2C\n    MediaQueryList: C\x2C\n    MediaQueryListEvent: C\x2C\n    MediaRecorder: C\x2C\n    MediaSettingsRange: C\x2C\n    MediaSource: C\x2C\n    MediaStream: C\x2C\n    MediaStreamAudioDestinationNode: C\x2C\n    MediaStreamAudioSourceNode: C\x2C\n    MediaStreamEvent: C\x2C\n    MediaStreamTrack: C\x2C\n    MediaStreamTrackEvent: C\x2C\n    menubar: O\x2C\n    MessageChannel: C\x2C\n    MessageEvent: C\x2C\n    MessagePort: C\x2C\n    MIDIAccess: C\x2C\n    MIDIConnectionEvent: C\x2C\n    MIDIInput: C\x2C\n    MIDIInputMap: C\x2C\n    MIDIMessageEvent: C\x2C\n    MIDIOutput: C\x2C\n    MIDIOutputMap: C\x2C\n    MIDIPort: C\x2C\n    MimeType: C\x2C\n    MimeTypeArray: C\x2C\n    MouseEvent: C\x2C\n    moveBy: O\x2C\n    moveTo: O\x2C\n    MutationEvent: C\x2C\n    MutationObserver: C\x2C\n    MutationRecord: C\x2C\n    name: O\x2C\n    NamedNodeMap: C\x2C\n    NavigationPreloadManager: C\x2C\n    navigator: O\x2C\n    Navigator: C\x2C\n    NetworkInformation: C\x2C\n    Node: C\x2C\n    NodeFilter: O\x2C\n    NodeIterator: C\x2C\n    NodeList: C\x2C\n    Notification: C\x2C\n    OfflineAudioCompletionEvent: C\x2C\n    OfflineAudioContext: C\x2C\n    offscreenBuffering: O\x2C\n    OffscreenCanvas: C\x2C\n    open: O\x2C\n    openDatabase: O\x2C\n    Option: C\x2C\n    origin: O\x2C\n    OscillatorNode: C\x2C\n    outerHeight: O\x2C\n    outerWidth: O\x2C\n    PageTransitionEvent: C\x2C\n    pageXOffset: O\x2C\n    pageYOffset: O\x2C\n    PannerNode: C\x2C\n    parent: O\x2C\n    Path2D: C\x2C\n    PaymentAddress: C\x2C\n    PaymentRequest: C\x2C\n    PaymentRequestUpdateEvent: C\x2C\n    PaymentResponse: C\x2C\n    performance: O\x2C\n    Performance: C\x2C\n    PerformanceEntry: C\x2C\n    PerformanceLongTaskTiming: C\x2C\n    PerformanceMark: C\x2C\n    PerformanceMeasure: C\x2C\n    PerformanceNavigation: C\x2C\n    PerformanceNavigationTiming: C\x2C\n    PerformanceObserver: C\x2C\n    PerformanceObserverEntryList: C\x2C\n    PerformancePaintTiming: C\x2C\n    PerformanceResourceTiming: C\x2C\n    PerformanceTiming: C\x2C\n    PeriodicWave: C\x2C\n    Permissions: C\x2C\n    PermissionStatus: C\x2C\n    personalbar: O\x2C\n    PhotoCapabilities: C\x2C\n    Plugin: C\x2C\n    PluginArray: C\x2C\n    PointerEvent: C\x2C\n    PopStateEvent: C\x2C\n    postMessage: O\x2C\n    Presentation: C\x2C\n    PresentationAvailability: C\x2C\n    PresentationConnection: C\x2C\n    PresentationConnectionAvailableEvent: C\x2C\n    PresentationConnectionCloseEvent: C\x2C\n    PresentationConnectionList: C\x2C\n    PresentationReceiver: C\x2C\n    PresentationRequest: C\x2C\n    print: O\x2C\n    ProcessingInstruction: C\x2C\n    ProgressEvent: C\x2C\n    PromiseRejectionEvent: C\x2C\n    prompt: O\x2C\n    PushManager: C\x2C\n    PushSubscription: C\x2C\n    PushSubscriptionOptions: C\x2C\n    queueMicrotask: O\x2C\n    RadioNodeList: C\x2C\n    Range: C\x2C\n    ReadableStream: C\x2C\n    RemotePlayback: C\x2C\n    removeEventListener: O\x2C\n    Request: C\x2C\n    requestAnimationFrame: O\x2C\n    requestIdleCallback: O\x2C\n    resizeBy: O\x2C\n    ResizeObserver: C\x2C\n    ResizeObserverEntry: C\x2C\n    resizeTo: O\x2C\n    Response: C\x2C\n    RTCCertificate: C\x2C\n    RTCDataChannel: C\x2C\n    RTCDataChannelEvent: C\x2C\n    RTCDtlsTransport: C\x2C\n    RTCIceCandidate: C\x2C\n    RTCIceTransport: C\x2C\n    RTCPeerConnection: C\x2C\n    RTCPeerConnectionIceEvent: C\x2C\n    RTCRtpReceiver: C\x2C\n    RTCRtpSender: C\x2C\n    RTCSctpTransport: C\x2C\n    RTCSessionDescription: C\x2C\n    RTCStatsReport: C\x2C\n    RTCTrackEvent: C\x2C\n    screen: O\x2C\n    Screen: C\x2C\n    screenLeft: O\x2C\n    ScreenOrientation: C\x2C\n    screenTop: O\x2C\n    screenX: O\x2C\n    screenY: O\x2C\n    ScriptProcessorNode: C\x2C\n    scroll: O\x2C\n    scrollbars: O\x2C\n    scrollBy: O\x2C\n    scrollTo: O\x2C\n    scrollX: O\x2C\n    scrollY: O\x2C\n    SecurityPolicyViolationEvent: C\x2C\n    Selection: C\x2C\n    ServiceWorker: C\x2C\n    ServiceWorkerContainer: C\x2C\n    ServiceWorkerRegistration: C\x2C\n    sessionStorage: O\x2C\n    ShadowRoot: C\x2C\n    SharedWorker: C\x2C\n    SourceBuffer: C\x2C\n    SourceBufferList: C\x2C\n    speechSynthesis: O\x2C\n    SpeechSynthesisEvent: C\x2C\n    SpeechSynthesisUtterance: C\x2C\n    StaticRange: C\x2C\n    status: O\x2C\n    statusbar: O\x2C\n    StereoPannerNode: C\x2C\n    stop: O\x2C\n    Storage: C\x2C\n    StorageEvent: C\x2C\n    StorageManager: C\x2C\n    styleMedia: O\x2C\n    StyleSheet: C\x2C\n    StyleSheetList: C\x2C\n    SubtleCrypto: C\x2C\n    SVGAElement: C\x2C\n    SVGAngle: C\x2C\n    SVGAnimatedAngle: C\x2C\n    SVGAnimatedBoolean: C\x2C\n    SVGAnimatedEnumeration: C\x2C\n    SVGAnimatedInteger: C\x2C\n    SVGAnimatedLength: C\x2C\n    SVGAnimatedLengthList: C\x2C\n    SVGAnimatedNumber: C\x2C\n    SVGAnimatedNumberList: C\x2C\n    SVGAnimatedPreserveAspectRatio: C\x2C\n    SVGAnimatedRect: C\x2C\n    SVGAnimatedString: C\x2C\n    SVGAnimatedTransformList: C\x2C\n    SVGAnimateElement: C\x2C\n    SVGAnimateMotionElement: C\x2C\n    SVGAnimateTransformElement: C\x2C\n    SVGAnimationElement: C\x2C\n    SVGCircleElement: C\x2C\n    SVGClipPathElement: C\x2C\n    SVGComponentTransferFunctionElement: C\x2C\n    SVGDefsElement: C\x2C\n    SVGDescElement: C\x2C\n    SVGDiscardElement: C\x2C\n    SVGElement: C\x2C\n    SVGEllipseElement: C\x2C\n    SVGFEBlendElement: C\x2C\n    SVGFEColorMatrixElement: C\x2C\n    SVGFEComponentTransferElement: C\x2C\n    SVGFECompositeElement: C\x2C\n    SVGFEConvolveMatrixElement: C\x2C\n    SVGFEDiffuseLightingElement: C\x2C\n    SVGFEDisplacementMapElement: C\x2C\n    SVGFEDistantLightElement: C\x2C\n    SVGFEDropShadowElement: C\x2C\n    SVGFEFloodElement: C\x2C\n    SVGFEFuncAElement: C\x2C\n    SVGFEFuncBElement: C\x2C\n    SVGFEFuncGElement: C\x2C\n    SVGFEFuncRElement: C\x2C\n    SVGFEGaussianBlurElement: C\x2C\n    SVGFEImageElement: C\x2C\n    SVGFEMergeElement: C\x2C\n    SVGFEMergeNodeElement: C\x2C\n    SVGFEMorphologyElement: C\x2C\n    SVGFEOffsetElement: C\x2C\n    SVGFEPointLightElement: C\x2C\n    SVGFESpecularLightingElement: C\x2C\n    SVGFESpotLightElement: C\x2C\n    SVGFETileElement: C\x2C\n    SVGFETurbulenceElement: C\x2C\n    SVGFilterElement: C\x2C\n    SVGForeignObjectElement: C\x2C\n    SVGGElement: C\x2C\n    SVGGeometryElement: C\x2C\n    SVGGradientElement: C\x2C\n    SVGGraphicsElement: C\x2C\n    SVGImageElement: C\x2C\n    SVGLength: C\x2C\n    SVGLengthList: C\x2C\n    SVGLinearGradientElement: C\x2C\n    SVGLineElement: C\x2C\n    SVGMarkerElement: C\x2C\n    SVGMaskElement: C\x2C\n    SVGMatrix: C\x2C\n    SVGMetadataElement: C\x2C\n    SVGMPathElement: C\x2C\n    SVGNumber: C\x2C\n    SVGNumberList: C\x2C\n    SVGPathElement: C\x2C\n    SVGPatternElement: C\x2C\n    SVGPoint: C\x2C\n    SVGPointList: C\x2C\n    SVGPolygonElement: C\x2C\n    SVGPolylineElement: C\x2C\n    SVGPreserveAspectRatio: C\x2C\n    SVGRadialGradientElement: C\x2C\n    SVGRect: C\x2C\n    SVGRectElement: C\x2C\n    SVGScriptElement: C\x2C\n    SVGSetElement: C\x2C\n    SVGStopElement: C\x2C\n    SVGStringList: C\x2C\n    SVGStyleElement: C\x2C\n    SVGSVGElement: C\x2C\n    SVGSwitchElement: C\x2C\n    SVGSymbolElement: C\x2C\n    SVGTextContentElement: C\x2C\n    SVGTextElement: C\x2C\n    SVGTextPathElement: C\x2C\n    SVGTextPositioningElement: C\x2C\n    SVGTitleElement: C\x2C\n    SVGTransform: C\x2C\n    SVGTransformList: C\x2C\n    SVGTSpanElement: C\x2C\n    SVGUnitTypes: C\x2C\n    SVGUseElement: C\x2C\n    SVGViewElement: C\x2C\n    TaskAttributionTiming: C\x2C\n    Text: C\x2C\n    TextEvent: C\x2C\n    TextMetrics: C\x2C\n    TextTrack: C\x2C\n    TextTrackCue: C\x2C\n    TextTrackCueList: C\x2C\n    TextTrackList: C\x2C\n    TimeRanges: C\x2C\n    toolbar: O\x2C\n    top: O\x2C\n    Touch: C\x2C\n    TouchEvent: C\x2C\n    TouchList: C\x2C\n    TrackEvent: C\x2C\n    TransitionEvent: C\x2C\n    TreeWalker: C\x2C\n    UIEvent: C\x2C\n    ValidityState: C\x2C\n    visualViewport: O\x2C\n    VisualViewport: C\x2C\n    VTTCue: C\x2C\n    WaveShaperNode: C\x2C\n    WebAssembly: O\x2C\n    WebGL2RenderingContext: C\x2C\n    WebGLActiveInfo: C\x2C\n    WebGLBuffer: C\x2C\n    WebGLContextEvent: C\x2C\n    WebGLFramebuffer: C\x2C\n    WebGLProgram: C\x2C\n    WebGLQuery: C\x2C\n    WebGLRenderbuffer: C\x2C\n    WebGLRenderingContext: C\x2C\n    WebGLSampler: C\x2C\n    WebGLShader: C\x2C\n    WebGLShaderPrecisionFormat: C\x2C\n    WebGLSync: C\x2C\n    WebGLTexture: C\x2C\n    WebGLTransformFeedback: C\x2C\n    WebGLUniformLocation: C\x2C\n    WebGLVertexArrayObject: C\x2C\n    WebSocket: C\x2C\n    WheelEvent: C\x2C\n    Window: C\x2C\n    Worker: C\x2C\n    WritableStream: C\x2C\n    XMLDocument: C\x2C\n    XMLHttpRequest: C\x2C\n    XMLHttpRequestEventTarget: C\x2C\n    XMLHttpRequestUpload: C\x2C\n    XMLSerializer: C\x2C\n    XPathEvaluator: C\x2C\n    XPathExpression: C\x2C\n    XPathResult: C\x2C\n    XSLTProcessor: C\n};\nfor (const global of ['window'\x2C 'global'\x2C 'self'\x2C 'globalThis']) {\n    knownGlobals[global] = knownGlobals;\n}\nfunction getGlobalAtPath(path) {\n    let currentGlobal = knownGlobals;\n    for (const pathSegment of path) {\n        if (typeof pathSegment !== 'string') {\n            return null;\n        }\n        currentGlobal = currentGlobal[pathSegment];\n        if (!currentGlobal) {\n            return null;\n        }\n    }\n    return currentGlobal[ValueProperties];\n}\n\nclass GlobalVariable extends Variable {\n    constructor() {\n        super(...arguments);\n        // Ensure we use live-bindings for globals as we do not know if they have\n        // been reassigned\n        this.isReassigned = true;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        switch (interaction.type) {\n            // While there is no point in testing these cases as at the moment\x2C they\n            // are also covered via other means\x2C we keep them for completeness\n            case INTERACTION_ACCESSED:\n            case INTERACTION_ASSIGNED: {\n                if (!getGlobalAtPath([this.name\x2C ...path].slice(0\x2C -1))) {\n                    super.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n                }\n                return;\n            }\n            case INTERACTION_CALLED: {\n                const globalAtPath = getGlobalAtPath([this.name\x2C ...path]);\n                if (globalAtPath) {\n                    globalAtPath.deoptimizeArgumentsOnCall(interaction);\n                }\n                else {\n                    super.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n                }\n                return;\n            }\n        }\n    }\n    getLiteralValueAtPath(path\x2C _recursionTracker\x2C _origin) {\n        const globalAtPath = getGlobalAtPath([this.name\x2C ...path]);\n        return globalAtPath ? globalAtPath.getLiteralValue() : UnknownValue;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                if (path.length === 0) {\n                    // Technically\x2C "undefined" is a global variable of sorts\n                    return this.name !== 'undefined' && !getGlobalAtPath([this.name]);\n                }\n                return !getGlobalAtPath([this.name\x2C ...path].slice(0\x2C -1));\n            }\n            case INTERACTION_ASSIGNED: {\n                return true;\n            }\n            case INTERACTION_CALLED: {\n                const globalAtPath = getGlobalAtPath([this.name\x2C ...path]);\n                return !globalAtPath || globalAtPath.hasEffectsWhenCalled(interaction\x2C context);\n            }\n        }\n    }\n}\n\nconst tdzVariableKinds = {\n    __proto__: null\x2C\n    class: true\x2C\n    const: true\x2C\n    let: true\x2C\n    var: true\n};\nclass Identifier extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.variable = null;\n        this.isTDZAccess = null;\n    }\n    addExportedVariables(variables\x2C exportNamesByVariable) {\n        if (exportNamesByVariable.has(this.variable)) {\n            variables.push(this.variable);\n        }\n    }\n    bind() {\n        if (!this.variable && is_reference(this\x2C this.parent)) {\n            this.variable = this.scope.findVariable(this.name);\n            this.variable.addReference(this);\n        }\n    }\n    declare(kind\x2C init) {\n        let variable;\n        const { treeshake } = this.context.options;\n        switch (kind) {\n            case 'var': {\n                variable = this.scope.addDeclaration(this\x2C this.context\x2C init\x2C true);\n                if (treeshake && treeshake.correctVarValueBeforeDeclaration) {\n                    // Necessary to make sure the init is deoptimized. We cannot call deoptimizePath here.\n                    variable.markInitializersForDeoptimization();\n                }\n                break;\n            }\n            case 'function': {\n                // in strict mode\x2C functions are only hoisted within a scope but not across block scopes\n                variable = this.scope.addDeclaration(this\x2C this.context\x2C init\x2C false);\n                break;\n            }\n            case 'let':\n            case 'const':\n            case 'class': {\n                variable = this.scope.addDeclaration(this\x2C this.context\x2C init\x2C false);\n                break;\n            }\n            case 'parameter': {\n                variable = this.scope.addParameterDeclaration(this);\n                break;\n            }\n            /* istanbul ignore next */\n            default: {\n                /* istanbul ignore next */\n                throw new Error(`Internal Error: Unexpected identifier kind ${kind}.`);\n            }\n        }\n        variable.kind = kind;\n        return [(this.variable = variable)];\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        if (path.length === 0 && !this.scope.contains(this.name)) {\n            this.disallowImportReassignment();\n        }\n        // We keep conditional chaining because an unknown Node could have an\n        // Identifier as property that might be deoptimized by default\n        this.variable?.deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getVariableRespectingTDZ().getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        const [expression\x2C isPure] = this.getVariableRespectingTDZ().getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n        return [expression\x2C isPure || this.isPureFunction(path)];\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.isPossibleTDZ() && this.variable.kind !== 'var') {\n            return true;\n        }\n        return (this.context.options.treeshake.unknownGlobalSideEffects &&\n            this.variable instanceof GlobalVariable &&\n            !this.isPureFunction(EMPTY_PATH) &&\n            this.variable.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C NODE_INTERACTION_UNKNOWN_ACCESS\x2C context));\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                return (this.variable !== null &&\n                    !this.isPureFunction(path) &&\n                    this.getVariableRespectingTDZ().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n            }\n            case INTERACTION_ASSIGNED: {\n                return (path.length > 0 ? this.getVariableRespectingTDZ() : this.variable).hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n            }\n            case INTERACTION_CALLED: {\n                return (!this.isPureFunction(path) &&\n                    this.getVariableRespectingTDZ().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n            }\n        }\n    }\n    include() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.included) {\n            this.included = true;\n            if (this.variable !== null) {\n                this.context.includeVariableInModule(this.variable);\n            }\n        }\n    }\n    includeCallArguments(context\x2C parameters) {\n        this.variable.includeCallArguments(context\x2C parameters);\n    }\n    isPossibleTDZ() {\n        // return cached value to avoid issues with the next tree-shaking pass\n        if (this.isTDZAccess !== null)\n            return this.isTDZAccess;\n        if (!(this.variable instanceof LocalVariable &&\n            this.variable.kind &&\n            this.variable.kind in tdzVariableKinds &&\n            // we ignore possible TDZs due to circular module dependencies as\n            // otherwise we get many false positives\n            this.variable.module === this.context.module)) {\n            return (this.isTDZAccess = false);\n        }\n        let decl_id;\n        if (this.variable.declarations &&\n            this.variable.declarations.length === 1 &&\n            (decl_id = this.variable.declarations[0]) &&\n            this.start < decl_id.start &&\n            closestParentFunctionOrProgram(this) === closestParentFunctionOrProgram(decl_id)) {\n            // a variable accessed before its declaration\n            // in the same function or at top level of module\n            return (this.isTDZAccess = true);\n        }\n        if (!this.variable.initReached) {\n            // Either a const/let TDZ violation or\n            // var use before declaration was encountered.\n            return (this.isTDZAccess = true);\n        }\n        return (this.isTDZAccess = false);\n    }\n    markDeclarationReached() {\n        this.variable.initReached = true;\n    }\n    render(code\x2C { snippets: { getPropertyAccess }\x2C useOriginalName }\x2C { renderedParentType\x2C isCalleeOfRenderedParent\x2C isShorthandProperty } = BLANK) {\n        if (this.variable) {\n            const name = this.variable.getName(getPropertyAccess\x2C useOriginalName);\n            if (name !== this.name) {\n                code.overwrite(this.start\x2C this.end\x2C name\x2C {\n                    contentOnly: true\x2C\n                    storeName: true\n                });\n                if (isShorthandProperty) {\n                    code.prependRight(this.start\x2C `${this.name}: `);\n                }\n            }\n            // In strict mode\x2C any variable named "eval" must be the actual "eval" function\n            if (name === 'eval' &&\n                renderedParentType === CallExpression$1 &&\n                isCalleeOfRenderedParent) {\n                code.appendRight(this.start\x2C '0\x2C ');\n            }\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.variable instanceof LocalVariable) {\n            this.variable.consolidateInitializers();\n            this.context.requestTreeshakingPass();\n        }\n    }\n    disallowImportReassignment() {\n        return this.context.error(logIllegalImportReassignment(this.name\x2C this.context.module.id)\x2C this.start);\n    }\n    getVariableRespectingTDZ() {\n        if (this.isPossibleTDZ()) {\n            return UNKNOWN_EXPRESSION;\n        }\n        return this.variable;\n    }\n    isPureFunction(path) {\n        let currentPureFunction = this.context.manualPureFunctions[this.name];\n        for (const segment of path) {\n            if (currentPureFunction) {\n                if (currentPureFunction[PureFunctionKey]) {\n                    return true;\n                }\n                currentPureFunction = currentPureFunction[segment];\n            }\n            else {\n                return false;\n            }\n        }\n        return currentPureFunction?.[PureFunctionKey];\n    }\n}\nfunction closestParentFunctionOrProgram(node) {\n    while (node && !/^Program|Function/.test(node.type)) {\n        node = node.parent;\n    }\n    // one of: ArrowFunctionExpression\x2C FunctionDeclaration\x2C FunctionExpression or Program\n    return node;\n}\n\nfunction treeshakeNode(node\x2C code\x2C start\x2C end) {\n    code.remove(start\x2C end);\n    if (node.annotations) {\n        for (const annotation of node.annotations) {\n            if (annotation.start < start) {\n                code.remove(annotation.start\x2C annotation.end);\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\nfunction removeAnnotations(node\x2C code) {\n    if (!node.annotations && node.parent.type === ExpressionStatement$1) {\n        node = node.parent;\n    }\n    if (node.annotations) {\n        for (const annotation of node.annotations) {\n            code.remove(annotation.start\x2C annotation.end);\n        }\n    }\n}\n\nconst NO_SEMICOLON = { isNoStatement: true };\n// This assumes there are only white-space and comments between start and the string we are looking for\nfunction findFirstOccurrenceOutsideComment(code\x2C searchString\x2C start = 0) {\n    let searchPos\x2C charCodeAfterSlash;\n    searchPos = code.indexOf(searchString\x2C start);\n    while (true) {\n        start = code.indexOf('/'\x2C start);\n        if (start === -1 || start >= searchPos)\n            return searchPos;\n        charCodeAfterSlash = code.charCodeAt(++start);\n        ++start;\n        // With our assumption\x2C '/' always starts a comment. Determine comment type:\n        start =\n            charCodeAfterSlash === 47 /*"/"*/\n                ? code.indexOf('\\n'\x2C start) + 1\n                : code.indexOf('*/'\x2C start) + 2;\n        if (start > searchPos) {\n            searchPos = code.indexOf(searchString\x2C start);\n        }\n    }\n}\nconst NON_WHITESPACE = /\\S/g;\nfunction findNonWhiteSpace(code\x2C index) {\n    NON_WHITESPACE.lastIndex = index;\n    const result = NON_WHITESPACE.exec(code);\n    return result.index;\n}\n// This assumes "code" only contains white-space and comments\n// Returns position of line-comment if applicable\nfunction findFirstLineBreakOutsideComment(code) {\n    let lineBreakPos\x2C charCodeAfterSlash\x2C start = 0;\n    lineBreakPos = code.indexOf('\\n'\x2C start);\n    while (true) {\n        start = code.indexOf('/'\x2C start);\n        if (start === -1 || start > lineBreakPos)\n            return [lineBreakPos\x2C lineBreakPos + 1];\n        // With our assumption\x2C '/' always starts a comment. Determine comment type:\n        charCodeAfterSlash = code.charCodeAt(start + 1);\n        if (charCodeAfterSlash === 47 /*"/"*/)\n            return [start\x2C lineBreakPos + 1];\n        start = code.indexOf('*/'\x2C start + 3) + 2;\n        if (start > lineBreakPos) {\n            lineBreakPos = code.indexOf('\\n'\x2C start);\n        }\n    }\n}\nfunction renderStatementList(statements\x2C code\x2C start\x2C end\x2C options) {\n    let currentNode\x2C currentNodeStart\x2C currentNodeNeedsBoundaries\x2C nextNodeStart;\n    let nextNode = statements[0];\n    let nextNodeNeedsBoundaries = !nextNode.included || nextNode.needsBoundaries;\n    if (nextNodeNeedsBoundaries) {\n        nextNodeStart =\n            start + findFirstLineBreakOutsideComment(code.original.slice(start\x2C nextNode.start))[1];\n    }\n    for (let nextIndex = 1; nextIndex <= statements.length; nextIndex++) {\n        currentNode = nextNode;\n        currentNodeStart = nextNodeStart;\n        currentNodeNeedsBoundaries = nextNodeNeedsBoundaries;\n        nextNode = statements[nextIndex];\n        nextNodeNeedsBoundaries =\n            nextNode === undefined ? false : !nextNode.included || nextNode.needsBoundaries;\n        if (currentNodeNeedsBoundaries || nextNodeNeedsBoundaries) {\n            nextNodeStart =\n                currentNode.end +\n                    findFirstLineBreakOutsideComment(code.original.slice(currentNode.end\x2C nextNode === undefined ? end : nextNode.start))[1];\n            if (currentNode.included) {\n                currentNodeNeedsBoundaries\n                    ? currentNode.render(code\x2C options\x2C {\n                        end: nextNodeStart\x2C\n                        start: currentNodeStart\n                    })\n                    : currentNode.render(code\x2C options);\n            }\n            else {\n                treeshakeNode(currentNode\x2C code\x2C currentNodeStart\x2C nextNodeStart);\n            }\n        }\n        else {\n            currentNode.render(code\x2C options);\n        }\n    }\n}\n// This assumes that the first character is not part of the first node\nfunction getCommaSeparatedNodesWithBoundaries(nodes\x2C code\x2C start\x2C end) {\n    const splitUpNodes = [];\n    let node\x2C nextNodeStart\x2C contentEnd\x2C char;\n    let separator = start - 1;\n    for (const nextNode of nodes) {\n        if (node !== undefined) {\n            separator =\n                node.end +\n                    findFirstOccurrenceOutsideComment(code.original.slice(node.end\x2C nextNode.start)\x2C '\x2C');\n        }\n        nextNodeStart = contentEnd =\n            separator +\n                1 +\n                findFirstLineBreakOutsideComment(code.original.slice(separator + 1\x2C nextNode.start))[1];\n        while (((char = code.original.charCodeAt(nextNodeStart))\x2C\n            char === 32 /*" "*/ || char === 9 /*"\\t"*/ || char === 10 /*"\\n"*/ || char === 13) /*"\\r"*/)\n            nextNodeStart++;\n        if (node !== undefined) {\n            splitUpNodes.push({\n                contentEnd\x2C\n                end: nextNodeStart\x2C\n                node\x2C\n                separator\x2C\n                start\n            });\n        }\n        node = nextNode;\n        start = nextNodeStart;\n    }\n    splitUpNodes.push({\n        contentEnd: end\x2C\n        end\x2C\n        node: node\x2C\n        separator: null\x2C\n        start\n    });\n    return splitUpNodes;\n}\n// This assumes there are only white-space and comments between start and end\nfunction removeLineBreaks(code\x2C start\x2C end) {\n    while (true) {\n        const [removeStart\x2C removeEnd] = findFirstLineBreakOutsideComment(code.original.slice(start\x2C end));\n        if (removeStart === -1) {\n            break;\n        }\n        code.remove(start + removeStart\x2C (start += removeEnd));\n    }\n}\n\nclass BlockScope extends ChildScope {\n    addDeclaration(identifier\x2C context\x2C init\x2C isHoisted) {\n        if (isHoisted) {\n            const variable = this.parent.addDeclaration(identifier\x2C context\x2C init\x2C isHoisted);\n            // Necessary to make sure the init is deoptimized for conditional declarations.\n            // We cannot call deoptimizePath here.\n            variable.markInitializersForDeoptimization();\n            return variable;\n        }\n        else {\n            return super.addDeclaration(identifier\x2C context\x2C init\x2C false);\n        }\n    }\n}\n\nclass ExpressionStatement extends NodeBase {\n    initialise() {\n        if (this.directive &&\n            this.directive !== 'use strict' &&\n            this.parent.type === Program$1) {\n            this.context.log(LOGLEVEL_WARN\x2C \n            // This is necessary\x2C because either way (deleting or not) can lead to errors.\n            logModuleLevelDirective(this.directive\x2C this.context.module.id)\x2C this.start);\n        }\n    }\n    render(code\x2C options) {\n        super.render(code\x2C options);\n        if (this.included)\n            this.insertSemicolon(code);\n    }\n    shouldBeIncluded(context) {\n        if (this.directive && this.directive !== 'use strict')\n            return this.parent.type !== Program$1;\n        return super.shouldBeIncluded(context);\n    }\n    applyDeoptimizations() { }\n}\n\nclass BlockStatement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.directlyIncluded = false;\n    }\n    addImplicitReturnExpressionToScope() {\n        const lastStatement = this.body[this.body.length - 1];\n        if (!lastStatement || lastStatement.type !== ReturnStatement$1) {\n            this.scope.addReturnExpression(UNKNOWN_EXPRESSION);\n        }\n    }\n    createScope(parentScope) {\n        this.scope = this.parent.preventChildBlockScope\n            ? parentScope\n            : new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.deoptimizeBody)\n            return true;\n        for (const node of this.body) {\n            if (context.brokenFlow)\n                break;\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!(this.deoptimizeBody && this.directlyIncluded)) {\n            this.included = true;\n            this.directlyIncluded = true;\n            if (this.deoptimizeBody)\n                includeChildrenRecursively = true;\n            for (const node of this.body) {\n                if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                    node.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        const firstBodyStatement = this.body[0];\n        this.deoptimizeBody =\n            firstBodyStatement instanceof ExpressionStatement &&\n                firstBodyStatement.directive === 'use asm';\n    }\n    render(code\x2C options) {\n        if (this.body.length > 0) {\n            renderStatementList(this.body\x2C code\x2C this.start + 1\x2C this.end - 1\x2C options);\n        }\n        else {\n            super.render(code\x2C options);\n        }\n    }\n}\n\nclass RestElement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.declarationInit = null;\n    }\n    addExportedVariables(variables\x2C exportNamesByVariable) {\n        this.argument.addExportedVariables(variables\x2C exportNamesByVariable);\n    }\n    declare(kind\x2C init) {\n        this.declarationInit = init;\n        return this.argument.declare(kind\x2C UNKNOWN_EXPRESSION);\n    }\n    deoptimizePath(path) {\n        path.length === 0 && this.argument.deoptimizePath(EMPTY_PATH);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return (path.length > 0 ||\n            this.argument.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C interaction\x2C context));\n    }\n    markDeclarationReached() {\n        this.argument.markDeclarationReached();\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.declarationInit !== null) {\n            this.declarationInit.deoptimizePath([UnknownKey\x2C UnknownKey]);\n            this.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass FunctionBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n        this.deoptimizedReturn = false;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (interaction.type === INTERACTION_CALLED) {\n            const { parameters } = this.scope;\n            const { args } = interaction;\n            let hasRest = false;\n            for (let position = 0; position < args.length - 1; position++) {\n                const parameter = this.params[position];\n                // Only the "this" argument arg[0] can be null\n                const argument = args[position + 1];\n                if (hasRest || parameter instanceof RestElement) {\n                    hasRest = true;\n                    argument.deoptimizePath(UNKNOWN_PATH);\n                }\n                else if (parameter instanceof Identifier) {\n                    parameters[position][0].addEntityToBeDeoptimized(argument);\n                    this.addArgumentToBeDeoptimized(argument);\n                }\n                else if (parameter) {\n                    argument.deoptimizePath(UNKNOWN_PATH);\n                }\n                else {\n                    this.addArgumentToBeDeoptimized(argument);\n                }\n            }\n        }\n        else {\n            this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n        }\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n        if (path.length === 1 && path[0] === UnknownKey) {\n            // A reassignment of UNKNOWN_PATH is considered equivalent to having lost track\n            // which means the return expression needs to be reassigned\n            this.scope.getReturnExpression().deoptimizePath(UNKNOWN_PATH);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        if (path.length > 0) {\n            return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n        }\n        if (this.async) {\n            if (!this.deoptimizedReturn) {\n                this.deoptimizedReturn = true;\n                this.scope.getReturnExpression().deoptimizePath(UNKNOWN_PATH);\n                this.context.requestTreeshakingPass();\n            }\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return [this.scope.getReturnExpression()\x2C false];\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (path.length > 0 || interaction.type !== INTERACTION_CALLED) {\n            return this.getObjectEntity().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n        }\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (this.async) {\n            const { propertyReadSideEffects } = this.context.options\n                .treeshake;\n            const returnExpression = this.scope.getReturnExpression();\n            if (returnExpression.hasEffectsOnInteractionAtPath(['then']\x2C NODE_INTERACTION_UNKNOWN_CALL\x2C context) ||\n                (propertyReadSideEffects &&\n                    (propertyReadSideEffects === 'always' ||\n                        returnExpression.hasEffectsOnInteractionAtPath(['then']\x2C NODE_INTERACTION_UNKNOWN_ACCESS\x2C context)))) {\n                return true;\n            }\n        }\n        for (const parameter of this.params) {\n            if (parameter.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        const { brokenFlow } = context;\n        context.brokenFlow = false;\n        this.body.include(context\x2C includeChildrenRecursively);\n        context.brokenFlow = brokenFlow;\n    }\n    includeCallArguments(context\x2C parameters) {\n        this.scope.includeCallArguments(context\x2C parameters);\n    }\n    initialise() {\n        this.scope.addParameterVariables(this.params.map(parameter => parameter.declare('parameter'\x2C UNKNOWN_EXPRESSION))\x2C this.params[this.params.length - 1] instanceof RestElement);\n        if (this.body instanceof BlockStatement) {\n            this.body.addImplicitReturnExpressionToScope();\n        }\n        else {\n            this.scope.addReturnExpression(this.body);\n        }\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.body.type === BlockStatement$1) {\n            this.body = new BlockStatement(esTreeNode.body\x2C this\x2C this.scope.hoistedBodyVarScope);\n        }\n        super.parseNode(esTreeNode);\n    }\n    addArgumentToBeDeoptimized(_argument) { }\n    applyDeoptimizations() { }\n}\nFunctionBase.prototype.preventChildBlockScope = true;\n\nclass ArrowFunctionExpression extends FunctionBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    createScope(parentScope) {\n        this.scope = new ReturnValueScope(parentScope\x2C this.context);\n    }\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (super.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context)) {\n            return true;\n        }\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (interaction.type === INTERACTION_CALLED) {\n            const { ignore\x2C brokenFlow } = context;\n            context.ignore = {\n                breaks: false\x2C\n                continues: false\x2C\n                labels: new Set()\x2C\n                returnYield: true\x2C\n                this: false\n            };\n            if (this.body.hasEffects(context))\n                return true;\n            context.ignore = ignore;\n            context.brokenFlow = brokenFlow;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        super.include(context\x2C includeChildrenRecursively);\n        for (const parameter of this.params) {\n            if (!(parameter instanceof Identifier)) {\n                parameter.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        return (this.objectEntity = new ObjectEntity([]\x2C OBJECT_PROTOTYPE));\n    }\n}\n\nfunction getSystemExportStatement(exportedVariables\x2C { exportNamesByVariable\x2C snippets: { _\x2C getObject\x2C getPropertyAccess } }\x2C modifier = '') {\n    if (exportedVariables.length === 1 &&\n        exportNamesByVariable.get(exportedVariables[0]).length === 1) {\n        const variable = exportedVariables[0];\n        return `exports('${exportNamesByVariable.get(variable)}'\x2C${_}${variable.getName(getPropertyAccess)}${modifier})`;\n    }\n    else {\n        const fields = [];\n        for (const variable of exportedVariables) {\n            for (const exportName of exportNamesByVariable.get(variable)) {\n                fields.push([exportName\x2C variable.getName(getPropertyAccess) + modifier]);\n            }\n        }\n        return `exports(${getObject(fields\x2C { lineBreakIndent: null })})`;\n    }\n}\nfunction renderSystemExportExpression(exportedVariable\x2C expressionStart\x2C expressionEnd\x2C code\x2C { exportNamesByVariable\x2C snippets: { _ } }) {\n    code.prependRight(expressionStart\x2C `exports('${exportNamesByVariable.get(exportedVariable)}'\x2C${_}`);\n    code.appendLeft(expressionEnd\x2C ')');\n}\nfunction renderSystemExportFunction(exportedVariables\x2C expressionStart\x2C expressionEnd\x2C needsParens\x2C code\x2C options) {\n    const { _\x2C getDirectReturnIifeLeft } = options.snippets;\n    code.prependRight(expressionStart\x2C getDirectReturnIifeLeft(['v']\x2C `${getSystemExportStatement(exportedVariables\x2C options)}\x2C${_}v`\x2C { needsArrowReturnParens: true\x2C needsWrappedFunction: needsParens }));\n    code.appendLeft(expressionEnd\x2C ')');\n}\nfunction renderSystemExportSequenceAfterExpression(exportedVariable\x2C expressionStart\x2C expressionEnd\x2C needsParens\x2C code\x2C options) {\n    const { _\x2C getPropertyAccess } = options.snippets;\n    code.appendLeft(expressionEnd\x2C `\x2C${_}${getSystemExportStatement([exportedVariable]\x2C options)}\x2C${_}${exportedVariable.getName(getPropertyAccess)}`);\n    if (needsParens) {\n        code.prependRight(expressionStart\x2C '(');\n        code.appendLeft(expressionEnd\x2C ')');\n    }\n}\nfunction renderSystemExportSequenceBeforeExpression(exportedVariable\x2C expressionStart\x2C expressionEnd\x2C needsParens\x2C code\x2C options\x2C modifier) {\n    const { _ } = options.snippets;\n    code.prependRight(expressionStart\x2C `${getSystemExportStatement([exportedVariable]\x2C options\x2C modifier)}\x2C${_}`);\n    if (needsParens) {\n        code.prependRight(expressionStart\x2C '(');\n        code.appendLeft(expressionEnd\x2C ')');\n    }\n}\n\nclass ObjectPattern extends NodeBase {\n    addExportedVariables(variables\x2C exportNamesByVariable) {\n        for (const property of this.properties) {\n            if (property.type === Property$1) {\n                property.value.addExportedVariables(variables\x2C exportNamesByVariable);\n            }\n            else {\n                property.argument.addExportedVariables(variables\x2C exportNamesByVariable);\n            }\n        }\n    }\n    declare(kind\x2C init) {\n        const variables = [];\n        for (const property of this.properties) {\n            variables.push(...property.declare(kind\x2C init));\n        }\n        return variables;\n    }\n    deoptimizePath(path) {\n        if (path.length === 0) {\n            for (const property of this.properties) {\n                property.deoptimizePath(path);\n            }\n        }\n    }\n    hasEffectsOnInteractionAtPath(\n    // At the moment\x2C this is only triggered for assignment left-hand sides\x2C\n    // where the path is empty\n    _path\x2C interaction\x2C context) {\n        for (const property of this.properties) {\n            if (property.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C interaction\x2C context))\n                return true;\n        }\n        return false;\n    }\n    markDeclarationReached() {\n        for (const property of this.properties) {\n            property.markDeclarationReached();\n        }\n    }\n}\n\nclass AssignmentExpression extends NodeBase {\n    hasEffects(context) {\n        const { deoptimized\x2C left\x2C operator\x2C right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        // MemberExpressions do not access the property before assignments if the\n        // operator is '='.\n        return (right.hasEffects(context) || left.hasEffectsAsAssignmentTarget(context\x2C operator !== '='));\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return this.right.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        const { deoptimized\x2C left\x2C right\x2C operator } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        if (includeChildrenRecursively ||\n            operator !== '=' ||\n            left.included ||\n            left.hasEffectsAsAssignmentTarget(createHasEffectsContext()\x2C false)) {\n            left.includeAsAssignmentTarget(context\x2C includeChildrenRecursively\x2C operator !== '=');\n        }\n        right.include(context\x2C includeChildrenRecursively);\n    }\n    initialise() {\n        this.left.setAssignedValue(this.right);\n    }\n    render(code\x2C options\x2C { preventASI\x2C renderedParentType\x2C renderedSurroundingElement } = BLANK) {\n        const { left\x2C right\x2C start\x2C end\x2C parent } = this;\n        if (left.included) {\n            left.render(code\x2C options);\n            right.render(code\x2C options);\n        }\n        else {\n            const inclusionStart = findNonWhiteSpace(code.original\x2C findFirstOccurrenceOutsideComment(code.original\x2C '='\x2C left.end) + 1);\n            code.remove(start\x2C inclusionStart);\n            if (preventASI) {\n                removeLineBreaks(code\x2C inclusionStart\x2C right.start);\n            }\n            right.render(code\x2C options\x2C {\n                renderedParentType: renderedParentType || parent.type\x2C\n                renderedSurroundingElement: renderedSurroundingElement || parent.type\n            });\n        }\n        if (options.format === 'system') {\n            if (left instanceof Identifier) {\n                const variable = left.variable;\n                const exportNames = options.exportNamesByVariable.get(variable);\n                if (exportNames) {\n                    if (exportNames.length === 1) {\n                        renderSystemExportExpression(variable\x2C start\x2C end\x2C code\x2C options);\n                    }\n                    else {\n                        renderSystemExportSequenceAfterExpression(variable\x2C start\x2C end\x2C parent.type !== ExpressionStatement$1\x2C code\x2C options);\n                    }\n                    return;\n                }\n            }\n            else {\n                const systemPatternExports = [];\n                left.addExportedVariables(systemPatternExports\x2C options.exportNamesByVariable);\n                if (systemPatternExports.length > 0) {\n                    renderSystemExportFunction(systemPatternExports\x2C start\x2C end\x2C renderedSurroundingElement === ExpressionStatement$1\x2C code\x2C options);\n                    return;\n                }\n            }\n        }\n        if (left.included &&\n            left instanceof ObjectPattern &&\n            (renderedSurroundingElement === ExpressionStatement$1 ||\n                renderedSurroundingElement === ArrowFunctionExpression$1)) {\n            code.appendRight(start\x2C '(');\n            code.prependLeft(end\x2C ')');\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass AssignmentPattern extends NodeBase {\n    addExportedVariables(variables\x2C exportNamesByVariable) {\n        this.left.addExportedVariables(variables\x2C exportNamesByVariable);\n    }\n    declare(kind\x2C init) {\n        return this.left.declare(kind\x2C init);\n    }\n    deoptimizePath(path) {\n        path.length === 0 && this.left.deoptimizePath(path);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return (path.length > 0 || this.left.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C interaction\x2C context));\n    }\n    markDeclarationReached() {\n        this.left.markDeclarationReached();\n    }\n    render(code\x2C options\x2C { isShorthandProperty } = BLANK) {\n        this.left.render(code\x2C options\x2C { isShorthandProperty });\n        this.right.render(code\x2C options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass ArgumentsVariable extends LocalVariable {\n    constructor(context) {\n        super('arguments'\x2C null\x2C UNKNOWN_EXPRESSION\x2C context);\n        this.deoptimizedArguments = [];\n    }\n    addArgumentToBeDeoptimized(argument) {\n        if (this.included) {\n            argument.deoptimizePath(UNKNOWN_PATH);\n        }\n        else {\n            this.deoptimizedArguments.push(argument);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > 1;\n    }\n    include() {\n        super.include();\n        for (const argument of this.deoptimizedArguments) {\n            argument.deoptimizePath(UNKNOWN_PATH);\n        }\n        this.deoptimizedArguments.length = 0;\n    }\n}\n\nclass ThisVariable extends ParameterVariable {\n    constructor(context) {\n        super('this'\x2C null\x2C context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return (context.replacedVariableInits.get(this) || UNKNOWN_EXPRESSION).hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n}\n\nclass FunctionScope extends ReturnValueScope {\n    constructor(parent\x2C context) {\n        super(parent\x2C context);\n        this.variables.set('arguments'\x2C (this.argumentsVariable = new ArgumentsVariable(context)));\n        this.variables.set('this'\x2C (this.thisVariable = new ThisVariable(context)));\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n    includeCallArguments(context\x2C parameters) {\n        super.includeCallArguments(context\x2C parameters);\n        if (this.argumentsVariable.included) {\n            for (const argument of parameters) {\n                if (!argument.included) {\n                    argument.include(context\x2C false);\n                }\n            }\n        }\n    }\n}\n\nclass FunctionNode extends FunctionBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    createScope(parentScope) {\n        this.scope = new FunctionScope(parentScope\x2C this.context);\n        this.constructedEntity = new ObjectEntity(Object.create(null)\x2C OBJECT_PROTOTYPE);\n        // This makes sure that all deoptimizations of "this" are applied to the\n        // constructed entity.\n        this.scope.thisVariable.addEntityToBeDeoptimized(this.constructedEntity);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        super.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n        if (interaction.type === INTERACTION_CALLED && path.length === 0 && interaction.args[0]) {\n            // args[0] is the "this" argument\n            this.scope.thisVariable.addEntityToBeDeoptimized(interaction.args[0]);\n        }\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        return !!this.id?.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (super.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context))\n            return true;\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (interaction.type === INTERACTION_CALLED) {\n            const thisInit = context.replacedVariableInits.get(this.scope.thisVariable);\n            context.replacedVariableInits.set(this.scope.thisVariable\x2C interaction.withNew ? this.constructedEntity : UNKNOWN_EXPRESSION);\n            const { brokenFlow\x2C ignore\x2C replacedVariableInits } = context;\n            context.ignore = {\n                breaks: false\x2C\n                continues: false\x2C\n                labels: new Set()\x2C\n                returnYield: true\x2C\n                this: interaction.withNew\n            };\n            if (this.body.hasEffects(context))\n                return true;\n            context.brokenFlow = brokenFlow;\n            if (thisInit) {\n                replacedVariableInits.set(this.scope.thisVariable\x2C thisInit);\n            }\n            else {\n                replacedVariableInits.delete(this.scope.thisVariable);\n            }\n            context.ignore = ignore;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        super.include(context\x2C includeChildrenRecursively);\n        this.id?.include();\n        const hasArguments = this.scope.argumentsVariable.included;\n        for (const parameter of this.params) {\n            if (!(parameter instanceof Identifier) || hasArguments) {\n                parameter.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.id?.declare('function'\x2C this);\n    }\n    addArgumentToBeDeoptimized(argument) {\n        this.scope.argumentsVariable.addArgumentToBeDeoptimized(argument);\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        return (this.objectEntity = new ObjectEntity([\n            {\n                key: 'prototype'\x2C\n                kind: 'init'\x2C\n                property: new ObjectEntity([]\x2C OBJECT_PROTOTYPE)\n            }\n        ]\x2C OBJECT_PROTOTYPE));\n    }\n}\n\nclass AwaitExpression extends NodeBase {\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return true;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.included) {\n            this.included = true;\n            checkTopLevelAwait: if (!this.context.usesTopLevelAwait) {\n                let parent = this.parent;\n                do {\n                    if (parent instanceof FunctionNode || parent instanceof ArrowFunctionExpression)\n                        break checkTopLevelAwait;\n                } while ((parent = parent.parent));\n                this.context.usesTopLevelAwait = true;\n            }\n        }\n        this.argument.include(context\x2C includeChildrenRecursively);\n    }\n}\n\nconst binaryOperators = {\n    '!=': (left\x2C right) => left != right\x2C\n    '!==': (left\x2C right) => left !== right\x2C\n    '%': (left\x2C right) => left % right\x2C\n    '&': (left\x2C right) => left & right\x2C\n    '*': (left\x2C right) => left * right\x2C\n    // At the moment\x2C "**" will be transpiled to Math.pow\n    '**': (left\x2C right) => left ** right\x2C\n    '+': (left\x2C right) => left + right\x2C\n    '-': (left\x2C right) => left - right\x2C\n    '/': (left\x2C right) => left / right\x2C\n    '<': (left\x2C right) => left < right\x2C\n    '<<': (left\x2C right) => left << right\x2C\n    '<=': (left\x2C right) => left <= right\x2C\n    '==': (left\x2C right) => left == right\x2C\n    '===': (left\x2C right) => left === right\x2C\n    '>': (left\x2C right) => left > right\x2C\n    '>=': (left\x2C right) => left >= right\x2C\n    '>>': (left\x2C right) => left >> right\x2C\n    '>>>': (left\x2C right) => left >>> right\x2C\n    '^': (left\x2C right) => left ^ right\x2C\n    '|': (left\x2C right) => left | right\n    // We use the fallback for cases where we return something unknown\n    // in: () => UnknownValue\x2C\n    // instanceof: () => UnknownValue\x2C\n};\nclass BinaryExpression extends NodeBase {\n    deoptimizeCache() { }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (path.length > 0)\n            return UnknownValue;\n        const leftValue = this.left.getLiteralValueAtPath(EMPTY_PATH\x2C recursionTracker\x2C origin);\n        if (typeof leftValue === 'symbol')\n            return UnknownValue;\n        const rightValue = this.right.getLiteralValueAtPath(EMPTY_PATH\x2C recursionTracker\x2C origin);\n        if (typeof rightValue === 'symbol')\n            return UnknownValue;\n        const operatorFunction = binaryOperators[this.operator];\n        if (!operatorFunction)\n            return UnknownValue;\n        return operatorFunction(leftValue\x2C rightValue);\n    }\n    hasEffects(context) {\n        // support some implicit type coercion runtime errors\n        if (this.operator === '+' &&\n            this.parent instanceof ExpressionStatement &&\n            this.left.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this) === '') {\n            return true;\n        }\n        return super.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > 1;\n    }\n    render(code\x2C options\x2C { renderedSurroundingElement } = BLANK) {\n        this.left.render(code\x2C options\x2C { renderedSurroundingElement });\n        this.right.render(code\x2C options);\n    }\n}\n\nclass BreakStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.label) {\n            if (!context.ignore.labels.has(this.label.name))\n                return true;\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            if (!context.ignore.breaks)\n                return true;\n            context.hasBreak = true;\n        }\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context) {\n        this.included = true;\n        if (this.label) {\n            this.label.include();\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            context.hasBreak = true;\n        }\n        context.brokenFlow = true;\n    }\n}\n\nfunction renderCallArguments(code\x2C options\x2C node) {\n    if (node.arguments.length > 0) {\n        if (node.arguments[node.arguments.length - 1].included) {\n            for (const argument of node.arguments) {\n                argument.render(code\x2C options);\n            }\n        }\n        else {\n            let lastIncludedIndex = node.arguments.length - 2;\n            while (lastIncludedIndex >= 0 && !node.arguments[lastIncludedIndex].included) {\n                lastIncludedIndex--;\n            }\n            if (lastIncludedIndex >= 0) {\n                for (let index = 0; index <= lastIncludedIndex; index++) {\n                    node.arguments[index].render(code\x2C options);\n                }\n                code.remove(findFirstOccurrenceOutsideComment(code.original\x2C '\x2C'\x2C node.arguments[lastIncludedIndex].end)\x2C node.end - 1);\n            }\n            else {\n                code.remove(findFirstOccurrenceOutsideComment(code.original\x2C '('\x2C node.callee.end) + 1\x2C node.end - 1);\n            }\n        }\n    }\n}\n\nclass Literal extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath() { }\n    getLiteralValueAtPath(path) {\n        if (path.length > 0 ||\n            // unknown literals can also be null but do not start with an "n"\n            (this.value === null && this.context.code.charCodeAt(this.start) !== 110) ||\n            typeof this.value === 'bigint' ||\n            // to support shims for regular expressions\n            this.context.code.charCodeAt(this.start) === 47) {\n            return UnknownValue;\n        }\n        return this.value;\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length !== 1)\n            return UNKNOWN_RETURN_EXPRESSION;\n        return getMemberReturnExpressionWhenCalled(this.members\x2C path[0]);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                return path.length > (this.value === null ? 0 : 1);\n            }\n            case INTERACTION_ASSIGNED: {\n                return true;\n            }\n            case INTERACTION_CALLED: {\n                if (this.included &&\n                    this.value instanceof RegExp &&\n                    (this.value.global || this.value.sticky)) {\n                    return true;\n                }\n                return (path.length !== 1 ||\n                    hasMemberEffectWhenCalled(this.members\x2C path[0]\x2C interaction\x2C context));\n            }\n        }\n    }\n    initialise() {\n        this.members = getLiteralMembersForValue(this.value);\n    }\n    parseNode(esTreeNode) {\n        this.value = esTreeNode.value;\n        this.regex = esTreeNode.regex;\n        super.parseNode(esTreeNode);\n    }\n    render(code) {\n        if (typeof this.value === 'string') {\n            code.indentExclusionRanges.push([this.start + 1\x2C this.end - 1]);\n        }\n    }\n}\n\n// To avoid infinite recursions\nconst MAX_PATH_DEPTH = 7;\nfunction getResolvablePropertyKey(memberExpression) {\n    return memberExpression.computed\n        ? getResolvableComputedPropertyKey(memberExpression.property)\n        : memberExpression.property.name;\n}\nfunction getResolvableComputedPropertyKey(propertyKey) {\n    if (propertyKey instanceof Literal) {\n        return String(propertyKey.value);\n    }\n    return null;\n}\nfunction getPathIfNotComputed(memberExpression) {\n    const nextPathKey = memberExpression.propertyKey;\n    const object = memberExpression.object;\n    if (typeof nextPathKey === 'string') {\n        if (object instanceof Identifier) {\n            return [\n                { key: object.name\x2C pos: object.start }\x2C\n                { key: nextPathKey\x2C pos: memberExpression.property.start }\n            ];\n        }\n        if (object instanceof MemberExpression) {\n            const parentPath = getPathIfNotComputed(object);\n            return (parentPath && [...parentPath\x2C { key: nextPathKey\x2C pos: memberExpression.property.start }]);\n        }\n    }\n    return null;\n}\nfunction getStringFromPath(path) {\n    let pathString = path[0].key;\n    for (let index = 1; index < path.length; index++) {\n        pathString += '.' + path[index].key;\n    }\n    return pathString;\n}\nclass MemberExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.variable = null;\n        this.assignmentDeoptimized = false;\n        this.bound = false;\n        this.expressionsToBeDeoptimized = [];\n        this.isUndefined = false;\n    }\n    bind() {\n        this.bound = true;\n        const path = getPathIfNotComputed(this);\n        const baseVariable = path && this.scope.findVariable(path[0].key);\n        if (baseVariable?.isNamespace) {\n            const resolvedVariable = resolveNamespaceVariables(baseVariable\x2C path.slice(1)\x2C this.context);\n            if (!resolvedVariable) {\n                super.bind();\n            }\n            else if (resolvedVariable === 'undefined') {\n                this.isUndefined = true;\n            }\n            else {\n                this.variable = resolvedVariable;\n                this.scope.addNamespaceMemberAccess(getStringFromPath(path)\x2C resolvedVariable);\n            }\n        }\n        else {\n            super.bind();\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (this.variable) {\n            this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n        }\n        else if (!this.isUndefined) {\n            if (path.length < MAX_PATH_DEPTH) {\n                this.object.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C [this.getPropertyKey()\x2C ...path]\x2C recursionTracker);\n            }\n            else {\n                deoptimizeInteraction(interaction);\n            }\n        }\n    }\n    deoptimizeCache() {\n        const { expressionsToBeDeoptimized\x2C object } = this;\n        this.expressionsToBeDeoptimized = EMPTY_ARRAY;\n        this.propertyKey = UnknownKey;\n        object.deoptimizePath(UNKNOWN_PATH);\n        for (const expression of expressionsToBeDeoptimized) {\n            expression.deoptimizeCache();\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0)\n            this.disallowNamespaceReassignment();\n        if (this.variable) {\n            this.variable.deoptimizePath(path);\n        }\n        else if (!this.isUndefined && path.length < MAX_PATH_DEPTH) {\n            const propertyKey = this.getPropertyKey();\n            this.object.deoptimizePath([\n                propertyKey === UnknownKey ? UnknownNonAccessorKey : propertyKey\x2C\n                ...path\n            ]);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (this.variable) {\n            return this.variable.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n        }\n        if (this.isUndefined) {\n            return undefined;\n        }\n        if (this.propertyKey !== UnknownKey && path.length < MAX_PATH_DEPTH) {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.object.getLiteralValueAtPath([this.getPropertyKey()\x2C ...path]\x2C recursionTracker\x2C origin);\n        }\n        return UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        if (this.variable) {\n            return this.variable.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n        }\n        if (this.isUndefined) {\n            return [UNDEFINED_EXPRESSION\x2C false];\n        }\n        if (this.propertyKey !== UnknownKey && path.length < MAX_PATH_DEPTH) {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.object.getReturnExpressionWhenCalledAtPath([this.getPropertyKey()\x2C ...path]\x2C interaction\x2C recursionTracker\x2C origin);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return (this.property.hasEffects(context) ||\n            this.object.hasEffects(context) ||\n            this.hasAccessEffect(context));\n    }\n    hasEffectsAsAssignmentTarget(context\x2C checkAccess) {\n        if (checkAccess && !this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.assignmentDeoptimized)\n            this.applyAssignmentDeoptimization();\n        return (this.property.hasEffects(context) ||\n            this.object.hasEffects(context) ||\n            (checkAccess && this.hasAccessEffect(context)) ||\n            this.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C this.assignmentInteraction\x2C context));\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (this.variable) {\n            return this.variable.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n        }\n        if (this.isUndefined) {\n            return true;\n        }\n        if (path.length < MAX_PATH_DEPTH) {\n            return this.object.hasEffectsOnInteractionAtPath([this.getPropertyKey()\x2C ...path]\x2C interaction\x2C context);\n        }\n        return true;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.includeProperties(context\x2C includeChildrenRecursively);\n    }\n    includeAsAssignmentTarget(context\x2C includeChildrenRecursively\x2C deoptimizeAccess) {\n        if (!this.assignmentDeoptimized)\n            this.applyAssignmentDeoptimization();\n        if (deoptimizeAccess) {\n            this.include(context\x2C includeChildrenRecursively);\n        }\n        else {\n            this.includeProperties(context\x2C includeChildrenRecursively);\n        }\n    }\n    includeCallArguments(context\x2C parameters) {\n        if (this.variable) {\n            this.variable.includeCallArguments(context\x2C parameters);\n        }\n        else {\n            super.includeCallArguments(context\x2C parameters);\n        }\n    }\n    initialise() {\n        this.propertyKey = getResolvablePropertyKey(this);\n        this.accessInteraction = { args: [this.object]\x2C type: INTERACTION_ACCESSED };\n    }\n    isSkippedAsOptional(origin) {\n        return (!this.variable &&\n            !this.isUndefined &&\n            (this.object.isSkippedAsOptional?.(origin) ||\n                (this.optional &&\n                    this.object.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C origin) == null)));\n    }\n    render(code\x2C options\x2C { renderedParentType\x2C isCalleeOfRenderedParent\x2C renderedSurroundingElement } = BLANK) {\n        if (this.variable || this.isUndefined) {\n            const { snippets: { getPropertyAccess } } = options;\n            let replacement = this.variable ? this.variable.getName(getPropertyAccess) : 'undefined';\n            if (renderedParentType && isCalleeOfRenderedParent)\n                replacement = '0\x2C ' + replacement;\n            code.overwrite(this.start\x2C this.end\x2C replacement\x2C {\n                contentOnly: true\x2C\n                storeName: true\n            });\n        }\n        else {\n            if (renderedParentType && isCalleeOfRenderedParent) {\n                code.appendRight(this.start\x2C '0\x2C ');\n            }\n            this.object.render(code\x2C options\x2C { renderedSurroundingElement });\n            this.property.render(code\x2C options);\n        }\n    }\n    setAssignedValue(value) {\n        this.assignmentInteraction = {\n            args: [this.object\x2C value]\x2C\n            type: INTERACTION_ASSIGNED\n        };\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        const { propertyReadSideEffects } = this.context.options\n            .treeshake;\n        if (\n        // Namespaces are not bound and should not be deoptimized\n        this.bound &&\n            propertyReadSideEffects &&\n            !(this.variable || this.isUndefined)) {\n            const propertyKey = this.getPropertyKey();\n            this.object.deoptimizeArgumentsOnInteractionAtPath(this.accessInteraction\x2C [propertyKey]\x2C SHARED_RECURSION_TRACKER);\n            this.context.requestTreeshakingPass();\n        }\n    }\n    applyAssignmentDeoptimization() {\n        this.assignmentDeoptimized = true;\n        const { propertyReadSideEffects } = this.context.options\n            .treeshake;\n        if (\n        // Namespaces are not bound and should not be deoptimized\n        this.bound &&\n            propertyReadSideEffects &&\n            !(this.variable || this.isUndefined)) {\n            this.object.deoptimizeArgumentsOnInteractionAtPath(this.assignmentInteraction\x2C [this.getPropertyKey()]\x2C SHARED_RECURSION_TRACKER);\n            this.context.requestTreeshakingPass();\n        }\n    }\n    disallowNamespaceReassignment() {\n        if (this.object instanceof Identifier) {\n            const variable = this.scope.findVariable(this.object.name);\n            if (variable.isNamespace) {\n                if (this.variable) {\n                    this.context.includeVariableInModule(this.variable);\n                }\n                this.context.log(LOGLEVEL_WARN\x2C logIllegalImportReassignment(this.object.name\x2C this.context.module.id)\x2C this.start);\n            }\n        }\n    }\n    getPropertyKey() {\n        if (this.propertyKey === null) {\n            this.propertyKey = UnknownKey;\n            const value = this.property.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this);\n            return (this.propertyKey =\n                value === SymbolToStringTag\n                    ? value\n                    : typeof value === 'symbol'\n                        ? UnknownKey\n                        : String(value));\n        }\n        return this.propertyKey;\n    }\n    hasAccessEffect(context) {\n        const { propertyReadSideEffects } = this.context.options\n            .treeshake;\n        return (!(this.variable || this.isUndefined) &&\n            propertyReadSideEffects &&\n            (propertyReadSideEffects === 'always' ||\n                this.object.hasEffectsOnInteractionAtPath([this.getPropertyKey()]\x2C this.accessInteraction\x2C context)));\n    }\n    includeProperties(context\x2C includeChildrenRecursively) {\n        if (!this.included) {\n            this.included = true;\n            if (this.variable) {\n                this.context.includeVariableInModule(this.variable);\n            }\n        }\n        this.object.include(context\x2C includeChildrenRecursively);\n        this.property.include(context\x2C includeChildrenRecursively);\n    }\n}\nfunction resolveNamespaceVariables(baseVariable\x2C path\x2C astContext) {\n    if (path.length === 0)\n        return baseVariable;\n    if (!baseVariable.isNamespace || baseVariable instanceof ExternalVariable)\n        return null;\n    const exportName = path[0].key;\n    const variable = baseVariable.context.traceExport(exportName);\n    if (!variable) {\n        if (path.length === 1) {\n            const fileName = baseVariable.context.fileName;\n            astContext.log(LOGLEVEL_WARN\x2C logMissingExport(exportName\x2C astContext.module.id\x2C fileName)\x2C path[0].pos);\n            return 'undefined';\n        }\n        return null;\n    }\n    return resolveNamespaceVariables(variable\x2C path.slice(1)\x2C astContext);\n}\n\nclass CallExpressionBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.returnExpression = null;\n        this.deoptimizableDependentExpressions = [];\n        this.expressionsToBeDeoptimized = new Set();\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        const { args } = interaction;\n        const [returnExpression\x2C isPure] = this.getReturnExpression(recursionTracker);\n        if (isPure)\n            return;\n        const deoptimizedExpressions = args.filter(expression => !!expression && expression !== UNKNOWN_EXPRESSION);\n        if (deoptimizedExpressions.length === 0)\n            return;\n        if (returnExpression === UNKNOWN_EXPRESSION) {\n            for (const expression of deoptimizedExpressions) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        else {\n            recursionTracker.withTrackedEntityAtPath(path\x2C returnExpression\x2C () => {\n                for (const expression of deoptimizedExpressions) {\n                    this.expressionsToBeDeoptimized.add(expression);\n                }\n                returnExpression.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n            }\x2C null);\n        }\n    }\n    deoptimizeCache() {\n        if (this.returnExpression?.[0] !== UNKNOWN_EXPRESSION) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            const { deoptimizableDependentExpressions\x2C expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = EMPTY_SET;\n            this.deoptimizableDependentExpressions = EMPTY_ARRAY;\n            for (const expression of deoptimizableDependentExpressions) {\n                expression.deoptimizeCache();\n            }\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0 ||\n            this.context.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(path\x2C this)) {\n            return;\n        }\n        const [returnExpression] = this.getReturnExpression();\n        if (returnExpression !== UNKNOWN_EXPRESSION) {\n            returnExpression.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        const [returnExpression] = this.getReturnExpression(recursionTracker);\n        if (returnExpression === UNKNOWN_EXPRESSION) {\n            return UnknownValue;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path\x2C returnExpression\x2C () => {\n            this.deoptimizableDependentExpressions.push(origin);\n            return returnExpression.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n        }\x2C UnknownValue);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        const returnExpression = this.getReturnExpression(recursionTracker);\n        if (returnExpression[0] === UNKNOWN_EXPRESSION) {\n            return returnExpression;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path\x2C returnExpression\x2C () => {\n            this.deoptimizableDependentExpressions.push(origin);\n            const [expression\x2C isPure] = returnExpression[0].getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n            return [expression\x2C isPure || returnExpression[1]];\n        }\x2C UNKNOWN_RETURN_EXPRESSION);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const { type } = interaction;\n        if (type === INTERACTION_CALLED) {\n            const { args\x2C withNew } = interaction;\n            if ((withNew ? context.instantiated : context.called).trackEntityAtPathAndGetIfTracked(path\x2C args\x2C this)) {\n                return false;\n            }\n        }\n        else if ((type === INTERACTION_ASSIGNED\n            ? context.assigned\n            : context.accessed).trackEntityAtPathAndGetIfTracked(path\x2C this)) {\n            return false;\n        }\n        const [returnExpression\x2C isPure] = this.getReturnExpression();\n        return ((type === INTERACTION_ASSIGNED || !isPure) &&\n            returnExpression.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n    }\n}\n\nclass CallExpression extends CallExpressionBase {\n    bind() {\n        super.bind();\n        if (this.callee instanceof Identifier) {\n            const variable = this.scope.findVariable(this.callee.name);\n            if (variable.isNamespace) {\n                this.context.log(LOGLEVEL_WARN\x2C logCannotCallNamespace(this.callee.name)\x2C this.start);\n            }\n            if (this.callee.name === 'eval') {\n                this.context.log(LOGLEVEL_WARN\x2C logEval(this.context.module.id)\x2C this.start);\n            }\n        }\n        this.interaction = {\n            args: [\n                this.callee instanceof MemberExpression && !this.callee.variable\n                    ? this.callee.object\n                    : null\x2C\n                ...this.arguments\n            ]\x2C\n            type: INTERACTION_CALLED\x2C\n            withNew: false\n        };\n    }\n    hasEffects(context) {\n        try {\n            for (const argument of this.arguments) {\n                if (argument.hasEffects(context))\n                    return true;\n            }\n            if (this.annotationPure) {\n                return false;\n            }\n            return (this.callee.hasEffects(context) ||\n                this.callee.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C this.interaction\x2C context));\n        }\n        finally {\n            if (!this.deoptimized)\n                this.applyDeoptimizations();\n        }\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context\x2C includeChildrenRecursively);\n            if (includeChildrenRecursively === INCLUDE_PARAMETERS &&\n                this.callee instanceof Identifier &&\n                this.callee.variable) {\n                this.callee.variable.markCalledFromTryStatement();\n            }\n        }\n        else {\n            this.included = true;\n            this.callee.include(context\x2C false);\n        }\n        this.callee.includeCallArguments(context\x2C this.arguments);\n    }\n    isSkippedAsOptional(origin) {\n        return (this.callee.isSkippedAsOptional?.(origin) ||\n            (this.optional &&\n                this.callee.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C origin) == null));\n    }\n    render(code\x2C options\x2C { renderedSurroundingElement } = BLANK) {\n        this.callee.render(code\x2C options\x2C {\n            isCalleeOfRenderedParent: true\x2C\n            renderedSurroundingElement\n        });\n        renderCallArguments(code\x2C options\x2C this);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.callee.deoptimizeArgumentsOnInteractionAtPath(this.interaction\x2C EMPTY_PATH\x2C SHARED_RECURSION_TRACKER);\n        this.context.requestTreeshakingPass();\n    }\n    getReturnExpression(recursionTracker = SHARED_RECURSION_TRACKER) {\n        if (this.returnExpression === null) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            return (this.returnExpression = this.callee.getReturnExpressionWhenCalledAtPath(EMPTY_PATH\x2C this.interaction\x2C recursionTracker\x2C this));\n        }\n        return this.returnExpression;\n    }\n}\n\nclass CatchScope extends ParameterScope {\n    addDeclaration(identifier\x2C context\x2C init\x2C isHoisted) {\n        const existingParameter = this.variables.get(identifier.name);\n        if (existingParameter) {\n            // While we still create a hoisted declaration\x2C the initializer goes to\n            // the parameter. Note that technically\x2C the declaration now belongs to\n            // two variables\x2C which is not correct but should not cause issues.\n            this.parent.addDeclaration(identifier\x2C context\x2C UNDEFINED_EXPRESSION\x2C isHoisted);\n            existingParameter.addDeclaration(identifier\x2C init);\n            return existingParameter;\n        }\n        return this.parent.addDeclaration(identifier\x2C context\x2C init\x2C isHoisted);\n    }\n}\n\nclass CatchClause extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new CatchScope(parentScope\x2C this.context);\n    }\n    parseNode(esTreeNode) {\n        // Parameters need to be declared first as the logic is that initializers\n        // of hoisted body variables are associated with parameters of the same\n        // name instead of the variable\n        const { param } = esTreeNode;\n        if (param) {\n            this.param = new (this.context.getNodeConstructor(param.type))(param\x2C this\x2C this.scope);\n            this.param.declare('parameter'\x2C UNKNOWN_EXPRESSION);\n        }\n        super.parseNode(esTreeNode);\n    }\n}\n\nclass ChainExpression extends NodeBase {\n    // deoptimizations are not relevant as we are not caching values\n    deoptimizeCache() { }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (this.expression.isSkippedAsOptional(origin))\n            return undefined;\n        return this.expression.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        if (this.expression.isSkippedAsOptional(this))\n            return false;\n        return this.expression.hasEffects(context);\n    }\n}\n\nclass ClassBodyScope extends ChildScope {\n    constructor(parent\x2C classNode\x2C context) {\n        super(parent);\n        this.variables.set('this'\x2C (this.thisVariable = new LocalVariable('this'\x2C null\x2C classNode\x2C context)));\n        this.instanceScope = new ChildScope(this);\n        this.instanceScope.variables.set('this'\x2C new ThisVariable(context));\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n}\n\nclass ClassBody extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new ClassBodyScope(parentScope\x2C this.parent\x2C this.context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.context.includeVariableInModule(this.scope.thisVariable);\n        for (const definition of this.body) {\n            definition.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    parseNode(esTreeNode) {\n        const body = (this.body = []);\n        for (const definition of esTreeNode.body) {\n            body.push(new (this.context.getNodeConstructor(definition.type))(definition\x2C this\x2C definition.static ? this.scope : this.scope.instanceScope));\n        }\n        super.parseNode(esTreeNode);\n    }\n    applyDeoptimizations() { }\n}\n\nclass MethodBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.accessedValue = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (interaction.type === INTERACTION_ACCESSED && this.kind === 'get' && path.length === 0) {\n            return this.value.deoptimizeArgumentsOnInteractionAtPath({\n                args: interaction.args\x2C\n                type: INTERACTION_CALLED\x2C\n                withNew: false\n            }\x2C EMPTY_PATH\x2C recursionTracker);\n        }\n        if (interaction.type === INTERACTION_ASSIGNED && this.kind === 'set' && path.length === 0) {\n            return this.value.deoptimizeArgumentsOnInteractionAtPath({\n                args: interaction.args\x2C\n                type: INTERACTION_CALLED\x2C\n                withNew: false\n            }\x2C EMPTY_PATH\x2C recursionTracker);\n        }\n        this.getAccessedValue()[0].deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    // As getter properties directly receive their values from fixed function\n    // expressions\x2C there is no known situation where a getter is deoptimized.\n    deoptimizeCache() { }\n    deoptimizePath(path) {\n        this.getAccessedValue()[0].deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getAccessedValue()[0].getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.getAccessedValue()[0].getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        return this.key.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (this.kind === 'get' && interaction.type === INTERACTION_ACCESSED && path.length === 0) {\n            return this.value.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C {\n                args: interaction.args\x2C\n                type: INTERACTION_CALLED\x2C\n                withNew: false\n            }\x2C context);\n        }\n        // setters are only called for empty paths\n        if (this.kind === 'set' && interaction.type === INTERACTION_ASSIGNED) {\n            return this.value.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C {\n                args: interaction.args\x2C\n                type: INTERACTION_CALLED\x2C\n                withNew: false\n            }\x2C context);\n        }\n        return this.getAccessedValue()[0].hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    applyDeoptimizations() { }\n    getAccessedValue() {\n        if (this.accessedValue === null) {\n            if (this.kind === 'get') {\n                this.accessedValue = UNKNOWN_RETURN_EXPRESSION;\n                return (this.accessedValue = this.value.getReturnExpressionWhenCalledAtPath(EMPTY_PATH\x2C NODE_INTERACTION_UNKNOWN_CALL\x2C SHARED_RECURSION_TRACKER\x2C this));\n            }\n            else {\n                return (this.accessedValue = [this.value\x2C false]);\n            }\n        }\n        return this.accessedValue;\n    }\n}\n\nclass MethodDefinition extends MethodBase {\n    applyDeoptimizations() { }\n}\n\nclass ObjectMember extends ExpressionEntity {\n    constructor(object\x2C key) {\n        super();\n        this.object = object;\n        this.key = key;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.object.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C [this.key\x2C ...path]\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.object.deoptimizePath([this.key\x2C ...path]);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.object.getLiteralValueAtPath([this.key\x2C ...path]\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.object.getReturnExpressionWhenCalledAtPath([this.key\x2C ...path]\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return this.object.hasEffectsOnInteractionAtPath([this.key\x2C ...path]\x2C interaction\x2C context);\n    }\n}\n\nclass ClassNode extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    createScope(parentScope) {\n        this.scope = new ChildScope(parentScope);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizeCache() {\n        this.getObjectEntity().deoptimizeAllProperties();\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const initEffect = this.superClass?.hasEffects(context) || this.body.hasEffects(context);\n        this.id?.markDeclarationReached();\n        return initEffect || super.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return interaction.type === INTERACTION_CALLED && path.length === 0\n            ? !interaction.withNew ||\n                (this.classConstructor === null\n                    ? this.superClass?.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context)\n                    : this.classConstructor.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context)) ||\n                false\n            : this.getObjectEntity().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        this.superClass?.include(context\x2C includeChildrenRecursively);\n        this.body.include(context\x2C includeChildrenRecursively);\n        if (this.id) {\n            this.id.markDeclarationReached();\n            this.id.include();\n        }\n    }\n    initialise() {\n        this.id?.declare('class'\x2C this);\n        for (const method of this.body.body) {\n            if (method instanceof MethodDefinition && method.kind === 'constructor') {\n                this.classConstructor = method;\n                return;\n            }\n        }\n        this.classConstructor = null;\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        for (const definition of this.body.body) {\n            if (!(definition.static ||\n                (definition instanceof MethodDefinition && definition.kind === 'constructor'))) {\n                // Calls to methods are not tracked\x2C ensure that the return value is deoptimized\n                definition.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.context.requestTreeshakingPass();\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        const staticProperties = [];\n        const dynamicMethods = [];\n        for (const definition of this.body.body) {\n            const properties = definition.static ? staticProperties : dynamicMethods;\n            const definitionKind = definition.kind;\n            // Note that class fields do not end up on the prototype\n            if (properties === dynamicMethods && !definitionKind)\n                continue;\n            const kind = definitionKind === 'set' || definitionKind === 'get' ? definitionKind : 'init';\n            let key;\n            if (definition.computed) {\n                const keyValue = definition.key.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this);\n                if (typeof keyValue === 'symbol') {\n                    properties.push({ key: UnknownKey\x2C kind\x2C property: definition });\n                    continue;\n                }\n                else {\n                    key = String(keyValue);\n                }\n            }\n            else {\n                key =\n                    definition.key instanceof Identifier\n                        ? definition.key.name\n                        : String(definition.key.value);\n            }\n            properties.push({ key\x2C kind\x2C property: definition });\n        }\n        staticProperties.unshift({\n            key: 'prototype'\x2C\n            kind: 'init'\x2C\n            property: new ObjectEntity(dynamicMethods\x2C this.superClass ? new ObjectMember(this.superClass\x2C 'prototype') : OBJECT_PROTOTYPE)\n        });\n        return (this.objectEntity = new ObjectEntity(staticProperties\x2C this.superClass || OBJECT_PROTOTYPE));\n    }\n}\n\nclass ClassDeclaration extends ClassNode {\n    initialise() {\n        super.initialise();\n        if (this.id !== null) {\n            this.id.variable.isId = true;\n        }\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.id !== null) {\n            this.id = new Identifier(esTreeNode.id\x2C this\x2C this.scope.parent);\n        }\n        super.parseNode(esTreeNode);\n    }\n    render(code\x2C options) {\n        const { exportNamesByVariable\x2C format\x2C snippets: { _\x2C getPropertyAccess } } = options;\n        if (this.id) {\n            const { variable\x2C name } = this.id;\n            if (format === 'system' && exportNamesByVariable.has(variable)) {\n                code.appendLeft(this.end\x2C `${_}${getSystemExportStatement([variable]\x2C options)};`);\n            }\n            const renderedVariable = variable.getName(getPropertyAccess);\n            if (renderedVariable !== name) {\n                this.superClass?.render(code\x2C options);\n                this.body.render(code\x2C {\n                    ...options\x2C\n                    useOriginalName: (_variable) => _variable === variable\n                });\n                code.prependRight(this.start\x2C `let ${renderedVariable}${_}=${_}`);\n                code.prependLeft(this.end\x2C ';');\n                return;\n            }\n        }\n        super.render(code\x2C options);\n    }\n    applyDeoptimizations() {\n        super.applyDeoptimizations();\n        const { id\x2C scope } = this;\n        if (id) {\n            const { name\x2C variable } = id;\n            for (const accessedVariable of scope.accessedOutsideVariables.values()) {\n                if (accessedVariable !== variable) {\n                    accessedVariable.forbidName(name);\n                }\n            }\n        }\n    }\n}\n\nclass ClassExpression extends ClassNode {\n    render(code\x2C options\x2C { renderedSurroundingElement } = BLANK) {\n        super.render(code\x2C options);\n        if (renderedSurroundingElement === ExpressionStatement$1) {\n            code.appendRight(this.start\x2C '(');\n            code.prependLeft(this.end\x2C ')');\n        }\n    }\n}\n\nclass MultiExpression extends ExpressionEntity {\n    constructor(expressions) {\n        super();\n        this.expressions = expressions;\n        this.included = false;\n    }\n    deoptimizePath(path) {\n        for (const expression of this.expressions) {\n            expression.deoptimizePath(path);\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return [\n            new MultiExpression(this.expressions.map(expression => expression.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)[0]))\x2C\n            false\n        ];\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        for (const expression of this.expressions) {\n            if (expression.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context))\n                return true;\n        }\n        return false;\n    }\n}\n\nclass ConditionalExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.expressionsToBeDeoptimized = [];\n        this.isBranchResolutionAnalysed = false;\n        this.usedBranch = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.consequent.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n        this.alternate.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizeCache() {\n        if (this.usedBranch !== null) {\n            const unusedBranch = this.usedBranch === this.consequent ? this.alternate : this.consequent;\n            this.usedBranch = null;\n            unusedBranch.deoptimizePath(UNKNOWN_PATH);\n            const { expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = EMPTY_ARRAY;\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n        }\n    }\n    deoptimizePath(path) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.deoptimizePath(path);\n        }\n        else {\n            this.consequent.deoptimizePath(path);\n            this.alternate.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return UnknownValue;\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return [\n                new MultiExpression([\n                    this.consequent.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)[0]\x2C\n                    this.alternate.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)[0]\n                ])\x2C\n                false\n            ];\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return this.consequent.hasEffects(context) || this.alternate.hasEffects(context);\n        }\n        return usedBranch.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return (this.consequent.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) ||\n                this.alternate.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n        }\n        return usedBranch.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        const usedBranch = this.getUsedBranch();\n        if (includeChildrenRecursively || this.test.shouldBeIncluded(context) || usedBranch === null) {\n            this.test.include(context\x2C includeChildrenRecursively);\n            this.consequent.include(context\x2C includeChildrenRecursively);\n            this.alternate.include(context\x2C includeChildrenRecursively);\n        }\n        else {\n            usedBranch.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    includeCallArguments(context\x2C parameters) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.includeCallArguments(context\x2C parameters);\n        }\n        else {\n            this.consequent.includeCallArguments(context\x2C parameters);\n            this.alternate.includeCallArguments(context\x2C parameters);\n        }\n    }\n    render(code\x2C options\x2C { isCalleeOfRenderedParent\x2C preventASI\x2C renderedParentType\x2C renderedSurroundingElement } = BLANK) {\n        const usedBranch = this.getUsedBranch();\n        if (this.test.included) {\n            this.test.render(code\x2C options\x2C { renderedSurroundingElement });\n            this.consequent.render(code\x2C options);\n            this.alternate.render(code\x2C options);\n        }\n        else {\n            const colonPos = findFirstOccurrenceOutsideComment(code.original\x2C ':'\x2C this.consequent.end);\n            const inclusionStart = findNonWhiteSpace(code.original\x2C (this.consequent.included\n                ? findFirstOccurrenceOutsideComment(code.original\x2C '?'\x2C this.test.end)\n                : colonPos) + 1);\n            if (preventASI) {\n                removeLineBreaks(code\x2C inclusionStart\x2C usedBranch.start);\n            }\n            code.remove(this.start\x2C inclusionStart);\n            if (this.consequent.included) {\n                code.remove(colonPos\x2C this.end);\n            }\n            removeAnnotations(this\x2C code);\n            usedBranch.render(code\x2C options\x2C {\n                isCalleeOfRenderedParent\x2C\n                preventASI: true\x2C\n                renderedParentType: renderedParentType || this.parent.type\x2C\n                renderedSurroundingElement: renderedSurroundingElement || this.parent.type\n            });\n        }\n    }\n    getUsedBranch() {\n        if (this.isBranchResolutionAnalysed) {\n            return this.usedBranch;\n        }\n        this.isBranchResolutionAnalysed = true;\n        const testValue = this.test.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this);\n        return typeof testValue === 'symbol'\n            ? null\n            : (this.usedBranch = testValue ? this.consequent : this.alternate);\n    }\n}\n\nclass ContinueStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.label) {\n            if (!context.ignore.labels.has(this.label.name))\n                return true;\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            if (!context.ignore.continues)\n                return true;\n            context.hasContinue = true;\n        }\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context) {\n        this.included = true;\n        if (this.label) {\n            this.label.include();\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            context.hasContinue = true;\n        }\n        context.brokenFlow = true;\n    }\n}\n\nfunction hasLoopBodyEffects(context\x2C body) {\n    const { brokenFlow\x2C hasBreak\x2C hasContinue\x2C ignore } = context;\n    const { breaks\x2C continues } = ignore;\n    ignore.breaks = true;\n    ignore.continues = true;\n    context.hasBreak = false;\n    context.hasContinue = false;\n    if (body.hasEffects(context))\n        return true;\n    ignore.breaks = breaks;\n    ignore.continues = continues;\n    context.hasBreak = hasBreak;\n    context.hasContinue = hasContinue;\n    context.brokenFlow = brokenFlow;\n    return false;\n}\nfunction includeLoopBody(context\x2C body\x2C includeChildrenRecursively) {\n    const { brokenFlow\x2C hasBreak\x2C hasContinue } = context;\n    context.hasBreak = false;\n    context.hasContinue = false;\n    body.include(context\x2C includeChildrenRecursively\x2C { asSingleStatement: true });\n    context.hasBreak = hasBreak;\n    context.hasContinue = hasContinue;\n    context.brokenFlow = brokenFlow;\n}\n\nclass DoWhileStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context\x2C this.body);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.test.include(context\x2C includeChildrenRecursively);\n        includeLoopBody(context\x2C this.body\x2C includeChildrenRecursively);\n    }\n}\n\nclass EmptyStatement extends NodeBase {\n    hasEffects() {\n        return false;\n    }\n}\n\nclass ExportAllDeclaration extends NodeBase {\n    hasEffects() {\n        return false;\n    }\n    initialise() {\n        this.context.addExport(this);\n    }\n    render(code\x2C _options\x2C nodeRenderOptions) {\n        code.remove(nodeRenderOptions.start\x2C nodeRenderOptions.end);\n    }\n    applyDeoptimizations() { }\n}\nExportAllDeclaration.prototype.needsBoundaries = true;\n\nclass FunctionDeclaration extends FunctionNode {\n    initialise() {\n        super.initialise();\n        if (this.id !== null) {\n            this.id.variable.isId = true;\n        }\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.id !== null) {\n            this.id = new Identifier(esTreeNode.id\x2C this\x2C this.scope.parent);\n        }\n        super.parseNode(esTreeNode);\n    }\n}\n\n// The header ends at the first non-white-space after "default"\nfunction getDeclarationStart(code\x2C start) {\n    return findNonWhiteSpace(code\x2C findFirstOccurrenceOutsideComment(code\x2C 'default'\x2C start) + 7);\n}\nfunction getFunctionIdInsertPosition(code\x2C start) {\n    const declarationEnd = findFirstOccurrenceOutsideComment(code\x2C 'function'\x2C start) + 'function'.length;\n    code = code.slice(declarationEnd\x2C findFirstOccurrenceOutsideComment(code\x2C '('\x2C declarationEnd));\n    const generatorStarPos = findFirstOccurrenceOutsideComment(code\x2C '*');\n    if (generatorStarPos === -1) {\n        return declarationEnd;\n    }\n    return declarationEnd + generatorStarPos + 1;\n}\nclass ExportDefaultDeclaration extends NodeBase {\n    include(context\x2C includeChildrenRecursively) {\n        super.include(context\x2C includeChildrenRecursively);\n        if (includeChildrenRecursively) {\n            this.context.includeVariableInModule(this.variable);\n        }\n    }\n    initialise() {\n        const declaration = this.declaration;\n        this.declarationName =\n            (declaration.id && declaration.id.name) || this.declaration.name;\n        this.variable = this.scope.addExportDefaultDeclaration(this.declarationName || this.context.getModuleName()\x2C this\x2C this.context);\n        this.context.addExport(this);\n    }\n    render(code\x2C options\x2C nodeRenderOptions) {\n        const { start\x2C end } = nodeRenderOptions;\n        const declarationStart = getDeclarationStart(code.original\x2C this.start);\n        if (this.declaration instanceof FunctionDeclaration) {\n            this.renderNamedDeclaration(code\x2C declarationStart\x2C this.declaration.id === null\n                ? getFunctionIdInsertPosition(code.original\x2C declarationStart)\n                : null\x2C options);\n        }\n        else if (this.declaration instanceof ClassDeclaration) {\n            this.renderNamedDeclaration(code\x2C declarationStart\x2C this.declaration.id === null\n                ? findFirstOccurrenceOutsideComment(code.original\x2C 'class'\x2C start) + 'class'.length\n                : null\x2C options);\n        }\n        else if (this.variable.getOriginalVariable() !== this.variable) {\n            // Remove altogether to prevent re-declaring the same variable\n            treeshakeNode(this\x2C code\x2C start\x2C end);\n            return;\n        }\n        else if (this.variable.included) {\n            this.renderVariableDeclaration(code\x2C declarationStart\x2C options);\n        }\n        else {\n            code.remove(this.start\x2C declarationStart);\n            this.declaration.render(code\x2C options\x2C {\n                renderedSurroundingElement: ExpressionStatement$1\n            });\n            if (code.original[this.end - 1] !== ';') {\n                code.appendLeft(this.end\x2C ';');\n            }\n            return;\n        }\n        this.declaration.render(code\x2C options);\n    }\n    applyDeoptimizations() { }\n    renderNamedDeclaration(code\x2C declarationStart\x2C idInsertPosition\x2C options) {\n        const { exportNamesByVariable\x2C format\x2C snippets: { getPropertyAccess } } = options;\n        const name = this.variable.getName(getPropertyAccess);\n        // Remove `export default`\n        code.remove(this.start\x2C declarationStart);\n        if (idInsertPosition !== null) {\n            code.appendLeft(idInsertPosition\x2C ` ${name}`);\n        }\n        if (format === 'system' &&\n            this.declaration instanceof ClassDeclaration &&\n            exportNamesByVariable.has(this.variable)) {\n            code.appendLeft(this.end\x2C ` ${getSystemExportStatement([this.variable]\x2C options)};`);\n        }\n    }\n    renderVariableDeclaration(code\x2C declarationStart\x2C { format\x2C exportNamesByVariable\x2C snippets: { cnst\x2C getPropertyAccess } }) {\n        const hasTrailingSemicolon = code.original.charCodeAt(this.end - 1) === 59; /*";"*/\n        const systemExportNames = format === 'system' && exportNamesByVariable.get(this.variable);\n        if (systemExportNames) {\n            code.overwrite(this.start\x2C declarationStart\x2C `${cnst} ${this.variable.getName(getPropertyAccess)} = exports('${systemExportNames[0]}'\x2C `);\n            code.appendRight(hasTrailingSemicolon ? this.end - 1 : this.end\x2C ')' + (hasTrailingSemicolon ? '' : ';'));\n        }\n        else {\n            code.overwrite(this.start\x2C declarationStart\x2C `${cnst} ${this.variable.getName(getPropertyAccess)} = `);\n            if (!hasTrailingSemicolon) {\n                code.appendLeft(this.end\x2C ';');\n            }\n        }\n    }\n}\nExportDefaultDeclaration.prototype.needsBoundaries = true;\n\nclass ExportNamedDeclaration extends NodeBase {\n    bind() {\n        // Do not bind specifiers\n        this.declaration?.bind();\n    }\n    hasEffects(context) {\n        return !!this.declaration?.hasEffects(context);\n    }\n    initialise() {\n        this.context.addExport(this);\n    }\n    render(code\x2C options\x2C nodeRenderOptions) {\n        const { start\x2C end } = nodeRenderOptions;\n        if (this.declaration === null) {\n            code.remove(start\x2C end);\n        }\n        else {\n            code.remove(this.start\x2C this.declaration.start);\n            this.declaration.render(code\x2C options\x2C { end\x2C start });\n        }\n    }\n    applyDeoptimizations() { }\n}\nExportNamedDeclaration.prototype.needsBoundaries = true;\n\nclass ExportSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass ForInStatement extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        const { body\x2C deoptimized\x2C left\x2C right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        if (left.hasEffectsAsAssignmentTarget(context\x2C false) || right.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context\x2C body);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        const { body\x2C deoptimized\x2C left\x2C right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        left.includeAsAssignmentTarget(context\x2C includeChildrenRecursively || true\x2C false);\n        right.include(context\x2C includeChildrenRecursively);\n        includeLoopBody(context\x2C body\x2C includeChildrenRecursively);\n    }\n    initialise() {\n        this.left.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code\x2C options) {\n        this.left.render(code\x2C options\x2C NO_SEMICOLON);\n        this.right.render(code\x2C options\x2C NO_SEMICOLON);\n        // handle no space between "in" and the right side\n        if (code.original.charCodeAt(this.right.start - 1) === 110 /* n */) {\n            code.prependLeft(this.right.start\x2C ' ');\n        }\n        this.body.render(code\x2C options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass ForOfStatement extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        // Placeholder until proper Symbol.Iterator support\n        return true;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        const { body\x2C deoptimized\x2C left\x2C right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        left.includeAsAssignmentTarget(context\x2C includeChildrenRecursively || true\x2C false);\n        right.include(context\x2C includeChildrenRecursively);\n        includeLoopBody(context\x2C body\x2C includeChildrenRecursively);\n    }\n    initialise() {\n        this.left.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code\x2C options) {\n        this.left.render(code\x2C options\x2C NO_SEMICOLON);\n        this.right.render(code\x2C options\x2C NO_SEMICOLON);\n        // handle no space between "of" and the right side\n        if (code.original.charCodeAt(this.right.start - 1) === 102 /* f */) {\n            code.prependLeft(this.right.start\x2C ' ');\n        }\n        this.body.render(code\x2C options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass ForStatement extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.init?.hasEffects(context) ||\n            this.test?.hasEffects(context) ||\n            this.update?.hasEffects(context)) {\n            return true;\n        }\n        return hasLoopBodyEffects(context\x2C this.body);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.init?.include(context\x2C includeChildrenRecursively\x2C { asSingleStatement: true });\n        this.test?.include(context\x2C includeChildrenRecursively);\n        this.update?.include(context\x2C includeChildrenRecursively);\n        includeLoopBody(context\x2C this.body\x2C includeChildrenRecursively);\n    }\n    render(code\x2C options) {\n        this.init?.render(code\x2C options\x2C NO_SEMICOLON);\n        this.test?.render(code\x2C options\x2C NO_SEMICOLON);\n        this.update?.render(code\x2C options\x2C NO_SEMICOLON);\n        this.body.render(code\x2C options);\n    }\n}\n\nclass FunctionExpression extends FunctionNode {\n    render(code\x2C options\x2C { renderedSurroundingElement } = BLANK) {\n        super.render(code\x2C options);\n        if (renderedSurroundingElement === ExpressionStatement$1) {\n            code.appendRight(this.start\x2C '(');\n            code.prependLeft(this.end\x2C ')');\n        }\n    }\n}\n\nclass TrackingScope extends BlockScope {\n    constructor() {\n        super(...arguments);\n        this.hoistedDeclarations = [];\n    }\n    addDeclaration(identifier\x2C context\x2C init\x2C isHoisted) {\n        this.hoistedDeclarations.push(identifier);\n        return super.addDeclaration(identifier\x2C context\x2C init\x2C isHoisted);\n    }\n}\n\nconst unset = Symbol('unset');\nclass IfStatement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.testValue = unset;\n    }\n    deoptimizeCache() {\n        this.testValue = UnknownValue;\n    }\n    hasEffects(context) {\n        if (this.test.hasEffects(context)) {\n            return true;\n        }\n        const testValue = this.getTestValue();\n        if (typeof testValue === 'symbol') {\n            const { brokenFlow } = context;\n            if (this.consequent.hasEffects(context))\n                return true;\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            const consequentBrokenFlow = context.brokenFlow;\n            context.brokenFlow = brokenFlow;\n            if (this.alternate === null)\n                return false;\n            if (this.alternate.hasEffects(context))\n                return true;\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            context.brokenFlow = context.brokenFlow && consequentBrokenFlow;\n            return false;\n        }\n        return testValue ? this.consequent.hasEffects(context) : !!this.alternate?.hasEffects(context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        if (includeChildrenRecursively) {\n            this.includeRecursively(includeChildrenRecursively\x2C context);\n        }\n        else {\n            const testValue = this.getTestValue();\n            if (typeof testValue === 'symbol') {\n                this.includeUnknownTest(context);\n            }\n            else {\n                this.includeKnownTest(context\x2C testValue);\n            }\n        }\n    }\n    parseNode(esTreeNode) {\n        this.consequentScope = new TrackingScope(this.scope);\n        this.consequent = new (this.context.getNodeConstructor(esTreeNode.consequent.type))(esTreeNode.consequent\x2C this\x2C this.consequentScope);\n        if (esTreeNode.alternate) {\n            this.alternateScope = new TrackingScope(this.scope);\n            this.alternate = new (this.context.getNodeConstructor(esTreeNode.alternate.type))(esTreeNode.alternate\x2C this\x2C this.alternateScope);\n        }\n        super.parseNode(esTreeNode);\n    }\n    render(code\x2C options) {\n        const { snippets: { getPropertyAccess } } = options;\n        // Note that unknown test values are always included\n        const testValue = this.getTestValue();\n        const hoistedDeclarations = [];\n        const includesIfElse = this.test.included;\n        const noTreeshake = !this.context.options.treeshake;\n        if (includesIfElse) {\n            this.test.render(code\x2C options);\n        }\n        else {\n            code.remove(this.start\x2C this.consequent.start);\n        }\n        if (this.consequent.included && (noTreeshake || typeof testValue === 'symbol' || testValue)) {\n            this.consequent.render(code\x2C options);\n        }\n        else {\n            code.overwrite(this.consequent.start\x2C this.consequent.end\x2C includesIfElse ? ';' : '');\n            hoistedDeclarations.push(...this.consequentScope.hoistedDeclarations);\n        }\n        if (this.alternate) {\n            if (this.alternate.included && (noTreeshake || typeof testValue === 'symbol' || !testValue)) {\n                if (includesIfElse) {\n                    if (code.original.charCodeAt(this.alternate.start - 1) === 101) {\n                        code.prependLeft(this.alternate.start\x2C ' ');\n                    }\n                }\n                else {\n                    code.remove(this.consequent.end\x2C this.alternate.start);\n                }\n                this.alternate.render(code\x2C options);\n            }\n            else {\n                if (includesIfElse && this.shouldKeepAlternateBranch()) {\n                    code.overwrite(this.alternate.start\x2C this.end\x2C ';');\n                }\n                else {\n                    code.remove(this.consequent.end\x2C this.end);\n                }\n                hoistedDeclarations.push(...this.alternateScope.hoistedDeclarations);\n            }\n        }\n        this.renderHoistedDeclarations(hoistedDeclarations\x2C code\x2C getPropertyAccess);\n    }\n    applyDeoptimizations() { }\n    getTestValue() {\n        if (this.testValue === unset) {\n            return (this.testValue = this.test.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this));\n        }\n        return this.testValue;\n    }\n    includeKnownTest(context\x2C testValue) {\n        if (this.test.shouldBeIncluded(context)) {\n            this.test.include(context\x2C false);\n        }\n        if (testValue && this.consequent.shouldBeIncluded(context)) {\n            this.consequent.include(context\x2C false\x2C { asSingleStatement: true });\n        }\n        if (!testValue && this.alternate?.shouldBeIncluded(context)) {\n            this.alternate.include(context\x2C false\x2C { asSingleStatement: true });\n        }\n    }\n    includeRecursively(includeChildrenRecursively\x2C context) {\n        this.test.include(context\x2C includeChildrenRecursively);\n        this.consequent.include(context\x2C includeChildrenRecursively);\n        this.alternate?.include(context\x2C includeChildrenRecursively);\n    }\n    includeUnknownTest(context) {\n        this.test.include(context\x2C false);\n        const { brokenFlow } = context;\n        let consequentBrokenFlow = false;\n        if (this.consequent.shouldBeIncluded(context)) {\n            this.consequent.include(context\x2C false\x2C { asSingleStatement: true });\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            consequentBrokenFlow = context.brokenFlow;\n            context.brokenFlow = brokenFlow;\n        }\n        if (this.alternate?.shouldBeIncluded(context)) {\n            this.alternate.include(context\x2C false\x2C { asSingleStatement: true });\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            context.brokenFlow = context.brokenFlow && consequentBrokenFlow;\n        }\n    }\n    renderHoistedDeclarations(hoistedDeclarations\x2C code\x2C getPropertyAccess) {\n        const hoistedVariables = [\n            ...new Set(hoistedDeclarations.map(identifier => {\n                const variable = identifier.variable;\n                return variable.included ? variable.getName(getPropertyAccess) : '';\n            }))\n        ]\n            .filter(Boolean)\n            .join('\x2C ');\n        if (hoistedVariables) {\n            const parentType = this.parent.type;\n            const needsBraces = parentType !== Program$1 && parentType !== BlockStatement$1;\n            code.prependRight(this.start\x2C `${needsBraces ? '{ ' : ''}var ${hoistedVariables}; `);\n            if (needsBraces) {\n                code.appendLeft(this.end\x2C ` }`);\n            }\n        }\n    }\n    shouldKeepAlternateBranch() {\n        let currentParent = this.parent;\n        do {\n            if (currentParent instanceof IfStatement && currentParent.alternate) {\n                return true;\n            }\n            if (currentParent instanceof BlockStatement) {\n                return false;\n            }\n            currentParent = currentParent.parent;\n        } while (currentParent);\n        return false;\n    }\n}\n\nclass ImportAttribute extends NodeBase {\n}\n\nclass ImportDeclaration extends NodeBase {\n    // Do not bind specifiers or assertions\n    bind() { }\n    hasEffects() {\n        return false;\n    }\n    initialise() {\n        this.context.addImport(this);\n    }\n    render(code\x2C _options\x2C nodeRenderOptions) {\n        code.remove(nodeRenderOptions.start\x2C nodeRenderOptions.end);\n    }\n    applyDeoptimizations() { }\n}\nImportDeclaration.prototype.needsBoundaries = true;\n\nclass ImportDefaultSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nconst INTEROP_DEFAULT_VARIABLE = '_interopDefault';\nconst INTEROP_DEFAULT_COMPAT_VARIABLE = '_interopDefaultCompat';\nconst INTEROP_NAMESPACE_VARIABLE = '_interopNamespace';\nconst INTEROP_NAMESPACE_COMPAT_VARIABLE = '_interopNamespaceCompat';\nconst INTEROP_NAMESPACE_DEFAULT_VARIABLE = '_interopNamespaceDefault';\nconst INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE = '_interopNamespaceDefaultOnly';\nconst MERGE_NAMESPACES_VARIABLE = '_mergeNamespaces';\nconst defaultInteropHelpersByInteropType = {\n    auto: INTEROP_DEFAULT_VARIABLE\x2C\n    compat: INTEROP_DEFAULT_COMPAT_VARIABLE\x2C\n    default: null\x2C\n    defaultOnly: null\x2C\n    esModule: null\n};\nconst isDefaultAProperty = (interopType\x2C externalLiveBindings) => interopType === 'esModule' ||\n    (externalLiveBindings && (interopType === 'auto' || interopType === 'compat'));\nconst namespaceInteropHelpersByInteropType = {\n    auto: INTEROP_NAMESPACE_VARIABLE\x2C\n    compat: INTEROP_NAMESPACE_COMPAT_VARIABLE\x2C\n    default: INTEROP_NAMESPACE_DEFAULT_VARIABLE\x2C\n    defaultOnly: INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\x2C\n    esModule: null\n};\nconst canDefaultBeTakenFromNamespace = (interopType\x2C externalLiveBindings) => interopType !== 'esModule' && isDefaultAProperty(interopType\x2C externalLiveBindings);\nconst getHelpersBlock = (additionalHelpers\x2C accessedGlobals\x2C indent\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) => {\n    const usedHelpers = new Set(additionalHelpers);\n    for (const variable of HELPER_NAMES) {\n        if (accessedGlobals.has(variable)) {\n            usedHelpers.add(variable);\n        }\n    }\n    return HELPER_NAMES.map(variable => usedHelpers.has(variable)\n        ? HELPER_GENERATORS[variable](indent\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag\x2C usedHelpers)\n        : '').join('');\n};\nconst HELPER_GENERATORS = {\n    [INTEROP_DEFAULT_COMPAT_VARIABLE](_t\x2C snippets\x2C liveBindings) {\n        const { _\x2C getDirectReturnFunction\x2C n } = snippets;\n        const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n            functionReturn: true\x2C\n            lineBreakIndent: null\x2C\n            name: INTEROP_DEFAULT_COMPAT_VARIABLE\n        });\n        return (`${left}${getIsCompatNamespace(snippets)}${_}?${_}` +\n            `${liveBindings ? getDefaultLiveBinding(snippets) : getDefaultStatic(snippets)}${right}${n}${n}`);\n    }\x2C\n    [INTEROP_DEFAULT_VARIABLE](_t\x2C snippets\x2C liveBindings) {\n        const { _\x2C getDirectReturnFunction\x2C n } = snippets;\n        const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n            functionReturn: true\x2C\n            lineBreakIndent: null\x2C\n            name: INTEROP_DEFAULT_VARIABLE\n        });\n        return (`${left}e${_}&&${_}e.__esModule${_}?${_}` +\n            `${liveBindings ? getDefaultLiveBinding(snippets) : getDefaultStatic(snippets)}${right}${n}${n}`);\n    }\x2C\n    [INTEROP_NAMESPACE_COMPAT_VARIABLE](t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag\x2C usedHelpers) {\n        const { _\x2C getDirectReturnFunction\x2C n } = snippets;\n        if (usedHelpers.has(INTEROP_NAMESPACE_DEFAULT_VARIABLE)) {\n            const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n                functionReturn: true\x2C\n                lineBreakIndent: null\x2C\n                name: INTEROP_NAMESPACE_COMPAT_VARIABLE\n            });\n            return `${left}${getIsCompatNamespace(snippets)}${_}?${_}e${_}:${_}${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${right}${n}${n}`;\n        }\n        return (`function ${INTEROP_NAMESPACE_COMPAT_VARIABLE}(e)${_}{${n}` +\n            `${t}if${_}(${getIsCompatNamespace(snippets)})${_}return e;${n}` +\n            createNamespaceObject(t\x2C t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) +\n            `}${n}${n}`);\n    }\x2C\n    [INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE](_t\x2C snippets\x2C _liveBindings\x2C freeze\x2C namespaceToStringTag) {\n        const { getDirectReturnFunction\x2C getObject\x2C n } = snippets;\n        const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n            functionReturn: true\x2C\n            lineBreakIndent: null\x2C\n            name: INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\n        });\n        return `${left}${getFrozen(freeze\x2C getWithToStringTag(namespaceToStringTag\x2C getObject([\n            ['__proto__'\x2C 'null']\x2C\n            ['default'\x2C 'e']\n        ]\x2C { lineBreakIndent: null })\x2C snippets))}${right}${n}${n}`;\n    }\x2C\n    [INTEROP_NAMESPACE_DEFAULT_VARIABLE](t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) {\n        const { _\x2C n } = snippets;\n        return (`function ${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${_}{${n}` +\n            createNamespaceObject(t\x2C t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) +\n            `}${n}${n}`);\n    }\x2C\n    [INTEROP_NAMESPACE_VARIABLE](t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag\x2C usedHelpers) {\n        const { _\x2C getDirectReturnFunction\x2C n } = snippets;\n        if (usedHelpers.has(INTEROP_NAMESPACE_DEFAULT_VARIABLE)) {\n            const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n                functionReturn: true\x2C\n                lineBreakIndent: null\x2C\n                name: INTEROP_NAMESPACE_VARIABLE\n            });\n            return `${left}e${_}&&${_}e.__esModule${_}?${_}e${_}:${_}${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${right}${n}${n}`;\n        }\n        return (`function ${INTEROP_NAMESPACE_VARIABLE}(e)${_}{${n}` +\n            `${t}if${_}(e${_}&&${_}e.__esModule)${_}return e;${n}` +\n            createNamespaceObject(t\x2C t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) +\n            `}${n}${n}`);\n    }\x2C\n    [MERGE_NAMESPACES_VARIABLE](t\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) {\n        const { _\x2C cnst\x2C n } = snippets;\n        const useForEach = cnst === 'var' && liveBindings;\n        return (`function ${MERGE_NAMESPACES_VARIABLE}(n\x2C m)${_}{${n}` +\n            `${t}${loopOverNamespaces(`{${n}` +\n                `${t}${t}${t}if${_}(k${_}!==${_}'default'${_}&&${_}!(k in n))${_}{${n}` +\n                (liveBindings\n                    ? useForEach\n                        ? copyOwnPropertyLiveBinding\n                        : copyPropertyLiveBinding\n                    : copyPropertyStatic)(t\x2C t + t + t + t\x2C snippets) +\n                `${t}${t}${t}}${n}` +\n                `${t}${t}}`\x2C useForEach\x2C t\x2C snippets)}${n}` +\n            `${t}return ${getFrozen(freeze\x2C getWithToStringTag(namespaceToStringTag\x2C 'n'\x2C snippets))};${n}` +\n            `}${n}${n}`);\n    }\n};\nconst getDefaultLiveBinding = ({ _\x2C getObject }) => `e${_}:${_}${getObject([['default'\x2C 'e']]\x2C { lineBreakIndent: null })}`;\nconst getDefaultStatic = ({ _\x2C getPropertyAccess }) => `e${getPropertyAccess('default')}${_}:${_}e`;\nconst getIsCompatNamespace = ({ _ }) => `e${_}&&${_}typeof e${_}===${_}'object'${_}&&${_}'default'${_}in e`;\nconst createNamespaceObject = (t\x2C index\x2C snippets\x2C liveBindings\x2C freeze\x2C namespaceToStringTag) => {\n    const { _\x2C cnst\x2C getObject\x2C getPropertyAccess\x2C n\x2C s } = snippets;\n    const copyProperty = `{${n}` +\n        (liveBindings ? copyNonDefaultOwnPropertyLiveBinding : copyPropertyStatic)(t\x2C index + t + t\x2C snippets) +\n        `${index}${t}}`;\n    return (`${index}${cnst} n${_}=${_}Object.create(null${namespaceToStringTag\n        ? `\x2C${_}{${_}[Symbol.toStringTag]:${_}${getToStringTagValue(getObject)}${_}}`\n        : ''});${n}` +\n        `${index}if${_}(e)${_}{${n}` +\n        `${index}${t}${loopOverKeys(copyProperty\x2C !liveBindings\x2C snippets)}${n}` +\n        `${index}}${n}` +\n        `${index}n${getPropertyAccess('default')}${_}=${_}e;${n}` +\n        `${index}return ${getFrozen(freeze\x2C 'n')}${s}${n}`);\n};\nconst loopOverKeys = (body\x2C allowVariableLoopVariable\x2C { _\x2C cnst\x2C getFunctionIntro\x2C s }) => cnst !== 'var' || allowVariableLoopVariable\n    ? `for${_}(${cnst} k in e)${_}${body}`\n    : `Object.keys(e).forEach(${getFunctionIntro(['k']\x2C {\n        isAsync: false\x2C\n        name: null\n    })}${body})${s}`;\nconst loopOverNamespaces = (body\x2C useForEach\x2C t\x2C { _\x2C cnst\x2C getDirectReturnFunction\x2C getFunctionIntro\x2C n }) => {\n    if (useForEach) {\n        const [left\x2C right] = getDirectReturnFunction(['e']\x2C {\n            functionReturn: false\x2C\n            lineBreakIndent: { base: t\x2C t }\x2C\n            name: null\n        });\n        return (`m.forEach(${left}` +\n            `e${_}&&${_}typeof e${_}!==${_}'string'${_}&&${_}!Array.isArray(e)${_}&&${_}Object.keys(e).forEach(${getFunctionIntro(['k']\x2C {\n                isAsync: false\x2C\n                name: null\n            })}${body})${right});`);\n    }\n    return (`for${_}(var i${_}=${_}0;${_}i${_}<${_}m.length;${_}i++)${_}{${n}` +\n        `${t}${t}${cnst} e${_}=${_}m[i];${n}` +\n        `${t}${t}if${_}(typeof e${_}!==${_}'string'${_}&&${_}!Array.isArray(e))${_}{${_}for${_}(${cnst} k in e)${_}${body}${_}}${n}${t}}`);\n};\nconst copyNonDefaultOwnPropertyLiveBinding = (t\x2C index\x2C snippets) => {\n    const { _\x2C n } = snippets;\n    return (`${index}if${_}(k${_}!==${_}'default')${_}{${n}` +\n        copyOwnPropertyLiveBinding(t\x2C index + t\x2C snippets) +\n        `${index}}${n}`);\n};\nconst copyOwnPropertyLiveBinding = (t\x2C index\x2C { _\x2C cnst\x2C getDirectReturnFunction\x2C n }) => {\n    const [left\x2C right] = getDirectReturnFunction([]\x2C {\n        functionReturn: true\x2C\n        lineBreakIndent: null\x2C\n        name: null\n    });\n    return (`${index}${cnst} d${_}=${_}Object.getOwnPropertyDescriptor(e\x2C${_}k);${n}` +\n        `${index}Object.defineProperty(n\x2C${_}k\x2C${_}d.get${_}?${_}d${_}:${_}{${n}` +\n        `${index}${t}enumerable:${_}true\x2C${n}` +\n        `${index}${t}get:${_}${left}e[k]${right}${n}` +\n        `${index}});${n}`);\n};\nconst copyPropertyLiveBinding = (t\x2C index\x2C { _\x2C cnst\x2C getDirectReturnFunction\x2C n }) => {\n    const [left\x2C right] = getDirectReturnFunction([]\x2C {\n        functionReturn: true\x2C\n        lineBreakIndent: null\x2C\n        name: null\n    });\n    return (`${index}${cnst} d${_}=${_}Object.getOwnPropertyDescriptor(e\x2C${_}k);${n}` +\n        `${index}if${_}(d)${_}{${n}` +\n        `${index}${t}Object.defineProperty(n\x2C${_}k\x2C${_}d.get${_}?${_}d${_}:${_}{${n}` +\n        `${index}${t}${t}enumerable:${_}true\x2C${n}` +\n        `${index}${t}${t}get:${_}${left}e[k]${right}${n}` +\n        `${index}${t}});${n}` +\n        `${index}}${n}`);\n};\nconst copyPropertyStatic = (_t\x2C index\x2C { _\x2C n }) => `${index}n[k]${_}=${_}e[k];${n}`;\nconst getFrozen = (freeze\x2C fragment) => freeze ? `Object.freeze(${fragment})` : fragment;\nconst getWithToStringTag = (namespaceToStringTag\x2C fragment\x2C { _\x2C getObject }) => namespaceToStringTag\n    ? `Object.defineProperty(${fragment}\x2C${_}Symbol.toStringTag\x2C${_}${getToStringTagValue(getObject)})`\n    : fragment;\nconst HELPER_NAMES = Object.keys(HELPER_GENERATORS);\nfunction getToStringTagValue(getObject) {\n    return getObject([['value'\x2C "'Module'"]]\x2C {\n        lineBreakIndent: null\n    });\n}\n\nfunction isReassignedExportsMember(variable\x2C exportNamesByVariable) {\n    return (variable.renderBaseName !== null && exportNamesByVariable.has(variable) && variable.isReassigned);\n}\n\nclass VariableDeclarator extends NodeBase {\n    declareDeclarator(kind) {\n        this.id.declare(kind\x2C this.init || UNDEFINED_EXPRESSION);\n    }\n    deoptimizePath(path) {\n        this.id.deoptimizePath(path);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const initEffect = this.init?.hasEffects(context);\n        this.id.markDeclarationReached();\n        return initEffect || this.id.hasEffects(context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        const { deoptimized\x2C id\x2C init } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        init?.include(context\x2C includeChildrenRecursively);\n        id.markDeclarationReached();\n        if (includeChildrenRecursively || id.shouldBeIncluded(context)) {\n            id.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    render(code\x2C options) {\n        const { exportNamesByVariable\x2C snippets: { _\x2C getPropertyAccess } } = options;\n        const { end\x2C id\x2C init\x2C start } = this;\n        const renderId = id.included;\n        if (renderId) {\n            id.render(code\x2C options);\n        }\n        else {\n            const operatorPos = findFirstOccurrenceOutsideComment(code.original\x2C '='\x2C id.end);\n            code.remove(start\x2C findNonWhiteSpace(code.original\x2C operatorPos + 1));\n        }\n        if (init) {\n            if (id instanceof Identifier && init instanceof ClassExpression && !init.id) {\n                const renderedVariable = id.variable.getName(getPropertyAccess);\n                if (renderedVariable !== id.name) {\n                    code.appendLeft(init.start + 5\x2C ` ${id.name}`);\n                }\n            }\n            init.render(code\x2C options\x2C renderId ? BLANK : { renderedSurroundingElement: ExpressionStatement$1 });\n        }\n        else if (id instanceof Identifier &&\n            isReassignedExportsMember(id.variable\x2C exportNamesByVariable)) {\n            code.appendLeft(end\x2C `${_}=${_}void 0`);\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        const { id\x2C init } = this;\n        if (init && id instanceof Identifier && init instanceof ClassExpression && !init.id) {\n            const { name\x2C variable } = id;\n            for (const accessedVariable of init.scope.accessedOutsideVariables.values()) {\n                if (accessedVariable !== variable) {\n                    accessedVariable.forbidName(name);\n                }\n            }\n        }\n    }\n}\n\n// TODO once ImportExpression follows official ESTree specs with "null" as\n//  default\x2C keys.ts should be updated\nclass ImportExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.inlineNamespace = null;\n        this.assertions = null;\n        this.mechanism = null;\n        this.namespaceExportName = undefined;\n        this.resolution = null;\n        this.resolutionString = null;\n    }\n    // Do not bind assertions\n    bind() {\n        this.source.bind();\n    }\n    /**\n     * Get imported variables for deterministic usage\x2C valid cases are:\n     *\n     * - `const { foo } = await import('bar')`.\n     * - `(await import('bar')).foo`\n     * - `import('bar').then(({ foo }) => {})`\n     *\n     * Returns empty array if it's side-effect only import.\n     * Returns undefined if it's not fully deterministic.\n     */\n    getDeterministicImportedNames() {\n        const parent1 = this.parent;\n        // Side-effect only: import('bar')\n        if (parent1 instanceof ExpressionStatement) {\n            return EMPTY_ARRAY;\n        }\n        if (parent1 instanceof AwaitExpression) {\n            const parent2 = parent1.parent;\n            // Side-effect only: await import('bar')\n            if (parent2 instanceof ExpressionStatement) {\n                return EMPTY_ARRAY;\n            }\n            // Case 1: const { foo } = await import('bar')\n            if (parent2 instanceof VariableDeclarator) {\n                const declaration = parent2.id;\n                return declaration instanceof ObjectPattern\n                    ? getDeterministicObjectDestructure(declaration)\n                    : undefined;\n            }\n            // Case 2: (await import('bar')).foo\n            if (parent2 instanceof MemberExpression) {\n                const id = parent2.property;\n                if (!parent2.computed && id instanceof Identifier) {\n                    return [id.name];\n                }\n            }\n            return;\n        }\n        // Case 3: import('bar').then(({ foo }) => {})\n        if (parent1 instanceof MemberExpression) {\n            const callExpression = parent1.parent;\n            const property = parent1.property;\n            if (!(callExpression instanceof CallExpression) || !(property instanceof Identifier)) {\n                return;\n            }\n            const memberName = property.name;\n            // side-effect only\x2C when only chaining .catch or .finally\n            if (callExpression.parent instanceof ExpressionStatement &&\n                ['catch'\x2C 'finally'].includes(memberName)) {\n                return EMPTY_ARRAY;\n            }\n            if (memberName !== 'then')\n                return;\n            // Side-effect only: import('bar').then()\n            if (callExpression.arguments.length === 0) {\n                return EMPTY_ARRAY;\n            }\n            const argument = callExpression.arguments[0];\n            if (callExpression.arguments.length !== 1 ||\n                !(argument instanceof ArrowFunctionExpression || argument instanceof FunctionExpression)) {\n                return;\n            }\n            // Side-effect only: import('bar').then(() => {})\n            if (argument.params.length === 0) {\n                return EMPTY_ARRAY;\n            }\n            const declaration = argument.params[0];\n            if (argument.params.length === 1 && declaration instanceof ObjectPattern) {\n                return getDeterministicObjectDestructure(declaration);\n            }\n            return;\n        }\n    }\n    hasEffects() {\n        return true;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.included) {\n            this.included = true;\n            this.context.includeDynamicImport(this);\n            this.scope.addAccessedDynamicImport(this);\n        }\n        this.source.include(context\x2C includeChildrenRecursively);\n    }\n    initialise() {\n        this.context.addDynamicImport(this);\n    }\n    parseNode(esTreeNode) {\n        // Keep the source AST to be used by renderDynamicImport\n        super.parseNode(esTreeNode\x2C ['source']);\n    }\n    render(code\x2C options) {\n        const { snippets: { _\x2C getDirectReturnFunction\x2C getObject\x2C getPropertyAccess } } = options;\n        if (this.inlineNamespace) {\n            const [left\x2C right] = getDirectReturnFunction([]\x2C {\n                functionReturn: true\x2C\n                lineBreakIndent: null\x2C\n                name: null\n            });\n            code.overwrite(this.start\x2C this.end\x2C `Promise.resolve().then(${left}${this.inlineNamespace.getName(getPropertyAccess)}${right})`);\n            return;\n        }\n        if (this.mechanism) {\n            code.overwrite(this.start\x2C findFirstOccurrenceOutsideComment(code.original\x2C '('\x2C this.start + 6) + 1\x2C this.mechanism.left);\n            code.overwrite(this.end - 1\x2C this.end\x2C this.mechanism.right);\n        }\n        if (this.resolutionString) {\n            code.overwrite(this.source.start\x2C this.source.end\x2C this.resolutionString);\n            if (this.namespaceExportName) {\n                const [left\x2C right] = getDirectReturnFunction(['n']\x2C {\n                    functionReturn: true\x2C\n                    lineBreakIndent: null\x2C\n                    name: null\n                });\n                code.prependLeft(this.end\x2C `.then(${left}n.${this.namespaceExportName}${right})`);\n            }\n        }\n        else {\n            this.source.render(code\x2C options);\n        }\n        if (this.assertions !== true) {\n            if (this.arguments) {\n                code.overwrite(this.source.end\x2C this.end - 1\x2C ''\x2C { contentOnly: true });\n            }\n            if (this.assertions) {\n                code.appendLeft(this.end - 1\x2C `\x2C${_}${getObject([['assert'\x2C this.assertions]]\x2C {\n                    lineBreakIndent: null\n                })}`);\n            }\n        }\n    }\n    setExternalResolution(exportMode\x2C resolution\x2C options\x2C snippets\x2C pluginDriver\x2C accessedGlobalsByScope\x2C resolutionString\x2C namespaceExportName\x2C assertions) {\n        const { format } = options;\n        this.inlineNamespace = null;\n        this.resolution = resolution;\n        this.resolutionString = resolutionString;\n        this.namespaceExportName = namespaceExportName;\n        this.assertions = assertions;\n        const accessedGlobals = [...(accessedImportGlobals[format] || [])];\n        let helper;\n        ({ helper\x2C mechanism: this.mechanism } = this.getDynamicImportMechanismAndHelper(resolution\x2C exportMode\x2C options\x2C snippets\x2C pluginDriver));\n        if (helper) {\n            accessedGlobals.push(helper);\n        }\n        if (accessedGlobals.length > 0) {\n            this.scope.addAccessedGlobals(accessedGlobals\x2C accessedGlobalsByScope);\n        }\n    }\n    setInternalResolution(inlineNamespace) {\n        this.inlineNamespace = inlineNamespace;\n    }\n    applyDeoptimizations() { }\n    getDynamicImportMechanismAndHelper(resolution\x2C exportMode\x2C { compact\x2C dynamicImportFunction\x2C dynamicImportInCjs\x2C format\x2C generatedCode: { arrowFunctions }\x2C interop }\x2C { _\x2C getDirectReturnFunction\x2C getDirectReturnIifeLeft }\x2C pluginDriver) {\n        const mechanism = pluginDriver.hookFirstSync('renderDynamicImport'\x2C [\n            {\n                customResolution: typeof this.resolution === 'string' ? this.resolution : null\x2C\n                format\x2C\n                moduleId: this.context.module.id\x2C\n                targetModuleId: this.resolution && typeof this.resolution !== 'string' ? this.resolution.id : null\n            }\n        ]);\n        if (mechanism) {\n            return { helper: null\x2C mechanism };\n        }\n        const hasDynamicTarget = !this.resolution || typeof this.resolution === 'string';\n        switch (format) {\n            case 'cjs': {\n                if (dynamicImportInCjs &&\n                    (!resolution || typeof resolution === 'string' || resolution instanceof ExternalModule)) {\n                    return { helper: null\x2C mechanism: null };\n                }\n                const helper = getInteropHelper(resolution\x2C exportMode\x2C interop);\n                let left = `require(`;\n                let right = `)`;\n                if (helper) {\n                    left = `/*#__PURE__*/${helper}(${left}`;\n                    right += ')';\n                }\n                const [functionLeft\x2C functionRight] = getDirectReturnFunction([]\x2C {\n                    functionReturn: true\x2C\n                    lineBreakIndent: null\x2C\n                    name: null\n                });\n                left = `Promise.resolve().then(${functionLeft}${left}`;\n                right += `${functionRight})`;\n                if (!arrowFunctions && hasDynamicTarget) {\n                    left = getDirectReturnIifeLeft(['t']\x2C `${left}t${right}`\x2C {\n                        needsArrowReturnParens: false\x2C\n                        needsWrappedFunction: true\n                    });\n                    right = ')';\n                }\n                return {\n                    helper\x2C\n                    mechanism: { left\x2C right }\n                };\n            }\n            case 'amd': {\n                const resolve = compact ? 'c' : 'resolve';\n                const reject = compact ? 'e' : 'reject';\n                const helper = getInteropHelper(resolution\x2C exportMode\x2C interop);\n                const [resolveLeft\x2C resolveRight] = getDirectReturnFunction(['m']\x2C {\n                    functionReturn: false\x2C\n                    lineBreakIndent: null\x2C\n                    name: null\n                });\n                const resolveNamespace = helper\n                    ? `${resolveLeft}${resolve}(/*#__PURE__*/${helper}(m))${resolveRight}`\n                    : resolve;\n                const [handlerLeft\x2C handlerRight] = getDirectReturnFunction([resolve\x2C reject]\x2C {\n                    functionReturn: false\x2C\n                    lineBreakIndent: null\x2C\n                    name: null\n                });\n                let left = `new Promise(${handlerLeft}require([`;\n                let right = `]\x2C${_}${resolveNamespace}\x2C${_}${reject})${handlerRight})`;\n                if (!arrowFunctions && hasDynamicTarget) {\n                    left = getDirectReturnIifeLeft(['t']\x2C `${left}t${right}`\x2C {\n                        needsArrowReturnParens: false\x2C\n                        needsWrappedFunction: true\n                    });\n                    right = ')';\n                }\n                return {\n                    helper\x2C\n                    mechanism: { left\x2C right }\n                };\n            }\n            case 'system': {\n                return {\n                    helper: null\x2C\n                    mechanism: {\n                        left: 'module.import('\x2C\n                        right: ')'\n                    }\n                };\n            }\n            case 'es': {\n                if (dynamicImportFunction) {\n                    return {\n                        helper: null\x2C\n                        mechanism: {\n                            left: `${dynamicImportFunction}(`\x2C\n                            right: ')'\n                        }\n                    };\n                }\n            }\n        }\n        return { helper: null\x2C mechanism: null };\n    }\n}\nfunction getInteropHelper(resolution\x2C exportMode\x2C interop) {\n    return exportMode === 'external'\n        ? namespaceInteropHelpersByInteropType[interop(resolution instanceof ExternalModule ? resolution.id : null)]\n        : exportMode === 'default'\n            ? INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\n            : null;\n}\nconst accessedImportGlobals = {\n    amd: ['require']\x2C\n    cjs: ['require']\x2C\n    system: ['module']\n};\nfunction getDeterministicObjectDestructure(objectPattern) {\n    const variables = [];\n    for (const property of objectPattern.properties) {\n        if (property.type === 'RestElement' || property.computed || property.key.type !== 'Identifier')\n            return;\n        variables.push(property.key.name);\n    }\n    return variables;\n}\n\nclass ImportNamespaceSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass ImportSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass LabeledStatement extends NodeBase {\n    hasEffects(context) {\n        const brokenFlow = context.brokenFlow;\n        context.ignore.labels.add(this.label.name);\n        if (this.body.hasEffects(context))\n            return true;\n        context.ignore.labels.delete(this.label.name);\n        if (context.includedLabels.has(this.label.name)) {\n            context.includedLabels.delete(this.label.name);\n            context.brokenFlow = brokenFlow;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        const brokenFlow = context.brokenFlow;\n        this.body.include(context\x2C includeChildrenRecursively);\n        if (includeChildrenRecursively || context.includedLabels.has(this.label.name)) {\n            this.label.include();\n            context.includedLabels.delete(this.label.name);\n            context.brokenFlow = brokenFlow;\n        }\n    }\n    render(code\x2C options) {\n        if (this.label.included) {\n            this.label.render(code\x2C options);\n        }\n        else {\n            code.remove(this.start\x2C findNonWhiteSpace(code.original\x2C findFirstOccurrenceOutsideComment(code.original\x2C ':'\x2C this.label.end) + 1));\n        }\n        this.body.render(code\x2C options);\n    }\n}\n\nclass LogicalExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        // We collect deoptimization information if usedBranch !== null\n        this.expressionsToBeDeoptimized = [];\n        this.isBranchResolutionAnalysed = false;\n        this.usedBranch = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.left.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n        this.right.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizeCache() {\n        if (this.usedBranch) {\n            const unusedBranch = this.usedBranch === this.left ? this.right : this.left;\n            this.usedBranch = null;\n            unusedBranch.deoptimizePath(UNKNOWN_PATH);\n            const { context\x2C expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = EMPTY_ARRAY;\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n            // Request another pass because we need to ensure "include" runs again if\n            // it is rendered\n            context.requestTreeshakingPass();\n        }\n    }\n    deoptimizePath(path) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.deoptimizePath(path);\n        }\n        else {\n            this.left.deoptimizePath(path);\n            this.right.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return UnknownValue;\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return [\n                new MultiExpression([\n                    this.left.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)[0]\x2C\n                    this.right.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)[0]\n                ])\x2C\n                false\n            ];\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        if (this.left.hasEffects(context)) {\n            return true;\n        }\n        if (this.getUsedBranch() !== this.left) {\n            return this.right.hasEffects(context);\n        }\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return (this.left.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) ||\n                this.right.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context));\n        }\n        return usedBranch.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        const usedBranch = this.getUsedBranch();\n        if (includeChildrenRecursively ||\n            (usedBranch === this.right && this.left.shouldBeIncluded(context)) ||\n            !usedBranch) {\n            this.left.include(context\x2C includeChildrenRecursively);\n            this.right.include(context\x2C includeChildrenRecursively);\n        }\n        else {\n            usedBranch.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    render(code\x2C options\x2C { isCalleeOfRenderedParent\x2C preventASI\x2C renderedParentType\x2C renderedSurroundingElement } = BLANK) {\n        if (!this.left.included || !this.right.included) {\n            const operatorPos = findFirstOccurrenceOutsideComment(code.original\x2C this.operator\x2C this.left.end);\n            if (this.right.included) {\n                const removePos = findNonWhiteSpace(code.original\x2C operatorPos + 2);\n                code.remove(this.start\x2C removePos);\n                if (preventASI) {\n                    removeLineBreaks(code\x2C removePos\x2C this.right.start);\n                }\n            }\n            else {\n                code.remove(operatorPos\x2C this.end);\n            }\n            removeAnnotations(this\x2C code);\n            this.getUsedBranch().render(code\x2C options\x2C {\n                isCalleeOfRenderedParent\x2C\n                preventASI\x2C\n                renderedParentType: renderedParentType || this.parent.type\x2C\n                renderedSurroundingElement: renderedSurroundingElement || this.parent.type\n            });\n        }\n        else {\n            this.left.render(code\x2C options\x2C {\n                preventASI\x2C\n                renderedSurroundingElement\n            });\n            this.right.render(code\x2C options);\n        }\n    }\n    getUsedBranch() {\n        if (!this.isBranchResolutionAnalysed) {\n            this.isBranchResolutionAnalysed = true;\n            const leftValue = this.left.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this);\n            if (typeof leftValue === 'symbol') {\n                return null;\n            }\n            else {\n                this.usedBranch =\n                    (this.operator === '||' && leftValue) ||\n                        (this.operator === '&&' && !leftValue) ||\n                        (this.operator === '??' && leftValue != null)\n                        ? this.left\n                        : this.right;\n            }\n        }\n        return this.usedBranch;\n    }\n}\n\nconst FILE_PREFIX = 'ROLLUP_FILE_URL_';\nconst IMPORT = 'import';\nclass MetaProperty extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.metaProperty = null;\n        this.preliminaryChunkId = null;\n        this.referenceId = null;\n    }\n    getReferencedFileName(outputPluginDriver) {\n        const { meta: { name }\x2C metaProperty } = this;\n        if (name === IMPORT && metaProperty?.startsWith(FILE_PREFIX)) {\n            return outputPluginDriver.getFileName(metaProperty.slice(FILE_PREFIX.length));\n        }\n        return null;\n    }\n    hasEffects() {\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return path.length > 1 || type !== INTERACTION_ACCESSED;\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            if (this.meta.name === IMPORT) {\n                this.context.addImportMeta(this);\n                const parent = this.parent;\n                const metaProperty = (this.metaProperty =\n                    parent instanceof MemberExpression && typeof parent.propertyKey === 'string'\n                        ? parent.propertyKey\n                        : null);\n                if (metaProperty?.startsWith(FILE_PREFIX)) {\n                    this.referenceId = metaProperty.slice(FILE_PREFIX.length);\n                }\n            }\n        }\n    }\n    render(code\x2C { format\x2C pluginDriver\x2C snippets }) {\n        const { context: { module: { id: moduleId } }\x2C meta: { name }\x2C metaProperty\x2C parent\x2C preliminaryChunkId\x2C referenceId\x2C start\x2C end } = this;\n        if (name !== IMPORT)\n            return;\n        const chunkId = preliminaryChunkId;\n        if (referenceId) {\n            const fileName = pluginDriver.getFileName(referenceId);\n            const relativePath = normalize(relative$1(dirname(chunkId)\x2C fileName));\n            const replacement = pluginDriver.hookFirstSync('resolveFileUrl'\x2C [\n                { chunkId\x2C fileName\x2C format\x2C moduleId\x2C referenceId\x2C relativePath }\n            ]) || relativeUrlMechanisms[format](relativePath);\n            code.overwrite(parent.start\x2C parent.end\x2C replacement\x2C { contentOnly: true });\n            return;\n        }\n        const replacement = pluginDriver.hookFirstSync('resolveImportMeta'\x2C [\n            metaProperty\x2C\n            { chunkId\x2C format\x2C moduleId }\n        ]) || importMetaMechanisms[format]?.(metaProperty\x2C { chunkId\x2C snippets });\n        if (typeof replacement === 'string') {\n            if (parent instanceof MemberExpression) {\n                code.overwrite(parent.start\x2C parent.end\x2C replacement\x2C { contentOnly: true });\n            }\n            else {\n                code.overwrite(start\x2C end\x2C replacement\x2C { contentOnly: true });\n            }\n        }\n    }\n    setResolution(format\x2C accessedGlobalsByScope\x2C preliminaryChunkId) {\n        this.preliminaryChunkId = preliminaryChunkId;\n        const accessedGlobals = (this.metaProperty?.startsWith(FILE_PREFIX) ? accessedFileUrlGlobals : accessedMetaUrlGlobals)[format];\n        if (accessedGlobals.length > 0) {\n            this.scope.addAccessedGlobals(accessedGlobals\x2C accessedGlobalsByScope);\n        }\n    }\n}\nconst accessedMetaUrlGlobals = {\n    amd: ['document'\x2C 'module'\x2C 'URL']\x2C\n    cjs: ['document'\x2C 'require'\x2C 'URL']\x2C\n    es: []\x2C\n    iife: ['document'\x2C 'URL']\x2C\n    system: ['module']\x2C\n    umd: ['document'\x2C 'require'\x2C 'URL']\n};\nconst accessedFileUrlGlobals = {\n    amd: ['document'\x2C 'require'\x2C 'URL']\x2C\n    cjs: ['document'\x2C 'require'\x2C 'URL']\x2C\n    es: []\x2C\n    iife: ['document'\x2C 'URL']\x2C\n    system: ['module'\x2C 'URL']\x2C\n    umd: ['document'\x2C 'require'\x2C 'URL']\n};\nconst getResolveUrl = (path\x2C URL = 'URL') => `new ${URL}(${path}).href`;\nconst getRelativeUrlFromDocument = (relativePath\x2C umd = false) => getResolveUrl(`'${escapeId(relativePath)}'\x2C ${umd ? `typeof document === 'undefined' ? location.href : ` : ''}document.currentScript && document.currentScript.src || document.baseURI`);\nconst getGenericImportMetaMechanism = (getUrl) => (property\x2C { chunkId }) => {\n    const urlMechanism = getUrl(chunkId);\n    return property === null\n        ? `({ url: ${urlMechanism} })`\n        : property === 'url'\n            ? urlMechanism\n            : 'undefined';\n};\nconst getFileUrlFromFullPath = (path) => `require('u' + 'rl').pathToFileURL(${path}).href`;\nconst getFileUrlFromRelativePath = (path) => getFileUrlFromFullPath(`__dirname + '/${path}'`);\nconst getUrlFromDocument = (chunkId\x2C umd = false) => `${umd ? `typeof document === 'undefined' ? location.href : ` : ''}(document.currentScript && document.currentScript.src || new URL('${escapeId(chunkId)}'\x2C document.baseURI).href)`;\nconst relativeUrlMechanisms = {\n    amd: relativePath => {\n        if (relativePath[0] !== '.')\n            relativePath = './' + relativePath;\n        return getResolveUrl(`require.toUrl('${relativePath}')\x2C document.baseURI`);\n    }\x2C\n    cjs: relativePath => `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(relativePath)} : ${getRelativeUrlFromDocument(relativePath)})`\x2C\n    es: relativePath => getResolveUrl(`'${relativePath}'\x2C import.meta.url`)\x2C\n    iife: relativePath => getRelativeUrlFromDocument(relativePath)\x2C\n    system: relativePath => getResolveUrl(`'${relativePath}'\x2C module.meta.url`)\x2C\n    umd: relativePath => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromRelativePath(relativePath)} : ${getRelativeUrlFromDocument(relativePath\x2C true)})`\n};\nconst importMetaMechanisms = {\n    amd: getGenericImportMetaMechanism(() => getResolveUrl(`module.uri\x2C document.baseURI`))\x2C\n    cjs: getGenericImportMetaMechanism(chunkId => `(typeof document === 'undefined' ? ${getFileUrlFromFullPath('__filename')} : ${getUrlFromDocument(chunkId)})`)\x2C\n    iife: getGenericImportMetaMechanism(chunkId => getUrlFromDocument(chunkId))\x2C\n    system: (property\x2C { snippets: { getPropertyAccess } }) => property === null ? `module.meta` : `module.meta${getPropertyAccess(property)}`\x2C\n    umd: getGenericImportMetaMechanism(chunkId => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromFullPath('__filename')} : ${getUrlFromDocument(chunkId\x2C true)})`)\n};\n\nclass NewExpression extends NodeBase {\n    hasEffects(context) {\n        try {\n            for (const argument of this.arguments) {\n                if (argument.hasEffects(context))\n                    return true;\n            }\n            if (this.annotationPure) {\n                return false;\n            }\n            return (this.callee.hasEffects(context) ||\n                this.callee.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C this.interaction\x2C context));\n        }\n        finally {\n            if (!this.deoptimized)\n                this.applyDeoptimizations();\n        }\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return path.length > 0 || type !== INTERACTION_ACCESSED;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context\x2C includeChildrenRecursively);\n        }\n        else {\n            this.included = true;\n            this.callee.include(context\x2C false);\n        }\n        this.callee.includeCallArguments(context\x2C this.arguments);\n    }\n    initialise() {\n        this.interaction = {\n            args: [null\x2C ...this.arguments]\x2C\n            type: INTERACTION_CALLED\x2C\n            withNew: true\n        };\n    }\n    render(code\x2C options) {\n        this.callee.render(code\x2C options);\n        renderCallArguments(code\x2C options\x2C this);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.callee.deoptimizeArgumentsOnInteractionAtPath(this.interaction\x2C EMPTY_PATH\x2C SHARED_RECURSION_TRACKER);\n        this.context.requestTreeshakingPass();\n    }\n}\n\nclass ObjectExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizeCache() {\n        this.getObjectEntity().deoptimizeAllProperties();\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return this.getObjectEntity().hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    render(code\x2C options\x2C { renderedSurroundingElement } = BLANK) {\n        super.render(code\x2C options);\n        if (renderedSurroundingElement === ExpressionStatement$1 ||\n            renderedSurroundingElement === ArrowFunctionExpression$1) {\n            code.appendRight(this.start\x2C '(');\n            code.prependLeft(this.end\x2C ')');\n        }\n    }\n    applyDeoptimizations() { }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        let prototype = OBJECT_PROTOTYPE;\n        const properties = [];\n        for (const property of this.properties) {\n            if (property instanceof SpreadElement) {\n                properties.push({ key: UnknownKey\x2C kind: 'init'\x2C property });\n                continue;\n            }\n            let key;\n            if (property.computed) {\n                const keyValue = property.key.getLiteralValueAtPath(EMPTY_PATH\x2C SHARED_RECURSION_TRACKER\x2C this);\n                if (typeof keyValue === 'symbol') {\n                    properties.push({ key: UnknownKey\x2C kind: property.kind\x2C property });\n                    continue;\n                }\n                else {\n                    key = String(keyValue);\n                }\n            }\n            else {\n                key =\n                    property.key instanceof Identifier\n                        ? property.key.name\n                        : String(property.key.value);\n                if (key === '__proto__' && property.kind === 'init') {\n                    prototype =\n                        property.value instanceof Literal && property.value.value === null\n                            ? null\n                            : property.value;\n                    continue;\n                }\n            }\n            properties.push({ key\x2C kind: property.kind\x2C property });\n        }\n        return (this.objectEntity = new ObjectEntity(properties\x2C prototype));\n    }\n}\n\nclass PrivateIdentifier extends NodeBase {\n}\n\nclass Program extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.hasCachedEffect = null;\n        this.hasLoggedEffect = false;\n    }\n    hasCachedEffects() {\n        if (!this.included) {\n            return false;\n        }\n        return this.hasCachedEffect === null\n            ? (this.hasCachedEffect = this.hasEffects(createHasEffectsContext()))\n            : this.hasCachedEffect;\n    }\n    hasEffects(context) {\n        for (const node of this.body) {\n            if (node.hasEffects(context)) {\n                if (this.context.options.experimentalLogSideEffects && !this.hasLoggedEffect) {\n                    this.hasLoggedEffect = true;\n                    const { code\x2C log\x2C module } = this.context;\n                    log(LOGLEVEL_INFO\x2C logFirstSideEffect(code\x2C module.id\x2C locate(code\x2C node.start\x2C { offsetLine: 1 }))\x2C node.start);\n                }\n                return (this.hasCachedEffect = true);\n            }\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        for (const node of this.body) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context)) {\n                node.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    render(code\x2C options) {\n        let start = this.start;\n        if (code.original.startsWith('#!')) {\n            start = Math.min(code.original.indexOf('\\n') + 1\x2C this.end);\n            code.remove(0\x2C start);\n        }\n        if (this.body.length > 0) {\n            // Keep all consecutive lines that start with a comment\n            while (code.original[start] === '/' && /[*/]/.test(code.original[start + 1])) {\n                const firstLineBreak = findFirstLineBreakOutsideComment(code.original.slice(start\x2C this.body[0].start));\n                if (firstLineBreak[0] === -1) {\n                    break;\n                }\n                start += firstLineBreak[1];\n            }\n            renderStatementList(this.body\x2C code\x2C start\x2C this.end\x2C options);\n        }\n        else {\n            super.render(code\x2C options);\n        }\n    }\n    applyDeoptimizations() { }\n}\n\nclass Property extends MethodBase {\n    constructor() {\n        super(...arguments);\n        this.declarationInit = null;\n    }\n    declare(kind\x2C init) {\n        this.declarationInit = init;\n        return this.value.declare(kind\x2C UNKNOWN_EXPRESSION);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const propertyReadSideEffects = this.context.options.treeshake\n            .propertyReadSideEffects;\n        return ((this.parent.type === 'ObjectPattern' && propertyReadSideEffects === 'always') ||\n            this.key.hasEffects(context) ||\n            this.value.hasEffects(context));\n    }\n    markDeclarationReached() {\n        this.value.markDeclarationReached();\n    }\n    render(code\x2C options) {\n        if (!this.shorthand) {\n            this.key.render(code\x2C options);\n        }\n        this.value.render(code\x2C options\x2C { isShorthandProperty: this.shorthand });\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.declarationInit !== null) {\n            this.declarationInit.deoptimizePath([UnknownKey\x2C UnknownKey]);\n            this.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass PropertyDefinition extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.value?.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.value?.deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.value\n            ? this.value.getLiteralValueAtPath(path\x2C recursionTracker\x2C origin)\n            : UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin) {\n        return this.value\n            ? this.value.getReturnExpressionWhenCalledAtPath(path\x2C interaction\x2C recursionTracker\x2C origin)\n            : UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffects(context) {\n        return this.key.hasEffects(context) || (this.static && !!this.value?.hasEffects(context));\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return !this.value || this.value.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    applyDeoptimizations() { }\n}\n\nclass ReturnStatement extends NodeBase {\n    hasEffects(context) {\n        if (!context.ignore.returnYield || this.argument?.hasEffects(context))\n            return true;\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.argument?.include(context\x2C includeChildrenRecursively);\n        context.brokenFlow = true;\n    }\n    initialise() {\n        this.scope.addReturnExpression(this.argument || UNKNOWN_EXPRESSION);\n    }\n    render(code\x2C options) {\n        if (this.argument) {\n            this.argument.render(code\x2C options\x2C { preventASI: true });\n            if (this.argument.start === this.start + 6 /* 'return'.length */) {\n                code.prependLeft(this.start + 6\x2C ' ');\n            }\n        }\n    }\n}\n\nclass SequenceExpression extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.expressions[this.expressions.length - 1].deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.expressions[this.expressions.length - 1].deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        return this.expressions[this.expressions.length - 1].getLiteralValueAtPath(path\x2C recursionTracker\x2C origin);\n    }\n    hasEffects(context) {\n        for (const expression of this.expressions) {\n            if (expression.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        return this.expressions[this.expressions.length - 1].hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        const lastExpression = this.expressions[this.expressions.length - 1];\n        for (const expression of this.expressions) {\n            if (includeChildrenRecursively ||\n                (expression === lastExpression && !(this.parent instanceof ExpressionStatement)) ||\n                expression.shouldBeIncluded(context))\n                expression.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    render(code\x2C options\x2C { renderedParentType\x2C isCalleeOfRenderedParent\x2C preventASI } = BLANK) {\n        let includedNodes = 0;\n        let lastSeparatorPos = null;\n        const lastNode = this.expressions[this.expressions.length - 1];\n        for (const { node\x2C separator\x2C start\x2C end } of getCommaSeparatedNodesWithBoundaries(this.expressions\x2C code\x2C this.start\x2C this.end)) {\n            if (!node.included) {\n                treeshakeNode(node\x2C code\x2C start\x2C end);\n                continue;\n            }\n            includedNodes++;\n            lastSeparatorPos = separator;\n            if (includedNodes === 1 && preventASI) {\n                removeLineBreaks(code\x2C start\x2C node.start);\n            }\n            if (includedNodes === 1) {\n                const parentType = renderedParentType || this.parent.type;\n                node.render(code\x2C options\x2C {\n                    isCalleeOfRenderedParent: isCalleeOfRenderedParent && node === lastNode\x2C\n                    renderedParentType: parentType\x2C\n                    renderedSurroundingElement: parentType\n                });\n            }\n            else {\n                node.render(code\x2C options);\n            }\n        }\n        if (lastSeparatorPos) {\n            code.remove(lastSeparatorPos\x2C this.end);\n        }\n    }\n}\n\nclass StaticBlock extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        for (const node of this.body) {\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        for (const node of this.body) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                node.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    render(code\x2C options) {\n        if (this.body.length > 0) {\n            const bodyStartPos = findFirstOccurrenceOutsideComment(code.original.slice(this.start\x2C this.end)\x2C '{') + 1;\n            renderStatementList(this.body\x2C code\x2C this.start + bodyStartPos\x2C this.end - 1\x2C options);\n        }\n        else {\n            super.render(code\x2C options);\n        }\n    }\n}\n\nclass Super extends NodeBase {\n    bind() {\n        this.variable = this.scope.findVariable('this');\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.variable.deoptimizePath(path);\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            this.context.includeVariableInModule(this.variable);\n        }\n    }\n}\n\nclass SwitchCase extends NodeBase {\n    hasEffects(context) {\n        if (this.test?.hasEffects(context))\n            return true;\n        for (const node of this.consequent) {\n            if (context.brokenFlow)\n                break;\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.test?.include(context\x2C includeChildrenRecursively);\n        for (const node of this.consequent) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                node.include(context\x2C includeChildrenRecursively);\n        }\n    }\n    render(code\x2C options\x2C nodeRenderOptions) {\n        if (this.consequent.length > 0) {\n            this.test && this.test.render(code\x2C options);\n            const testEnd = this.test\n                ? this.test.end\n                : findFirstOccurrenceOutsideComment(code.original\x2C 'default'\x2C this.start) + 7;\n            const consequentStart = findFirstOccurrenceOutsideComment(code.original\x2C ':'\x2C testEnd) + 1;\n            renderStatementList(this.consequent\x2C code\x2C consequentStart\x2C nodeRenderOptions.end\x2C options);\n        }\n        else {\n            super.render(code\x2C options);\n        }\n    }\n}\nSwitchCase.prototype.needsBoundaries = true;\n\nclass SwitchStatement extends NodeBase {\n    createScope(parentScope) {\n        this.parentScope = parentScope;\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.discriminant.hasEffects(context))\n            return true;\n        const { brokenFlow\x2C hasBreak\x2C ignore } = context;\n        const { breaks } = ignore;\n        ignore.breaks = true;\n        context.hasBreak = false;\n        let onlyHasBrokenFlow = true;\n        for (const switchCase of this.cases) {\n            if (switchCase.hasEffects(context))\n                return true;\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            onlyHasBrokenFlow && (onlyHasBrokenFlow = context.brokenFlow && !context.hasBreak);\n            context.hasBreak = false;\n            context.brokenFlow = brokenFlow;\n        }\n        if (this.defaultCase !== null) {\n            context.brokenFlow = onlyHasBrokenFlow;\n        }\n        ignore.breaks = breaks;\n        context.hasBreak = hasBreak;\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.discriminant.include(context\x2C includeChildrenRecursively);\n        const { brokenFlow\x2C hasBreak } = context;\n        context.hasBreak = false;\n        let onlyHasBrokenFlow = true;\n        let isCaseIncluded = includeChildrenRecursively ||\n            (this.defaultCase !== null && this.defaultCase < this.cases.length - 1);\n        for (let caseIndex = this.cases.length - 1; caseIndex >= 0; caseIndex--) {\n            const switchCase = this.cases[caseIndex];\n            if (switchCase.included) {\n                isCaseIncluded = true;\n            }\n            if (!isCaseIncluded) {\n                const hasEffectsContext = createHasEffectsContext();\n                hasEffectsContext.ignore.breaks = true;\n                isCaseIncluded = switchCase.hasEffects(hasEffectsContext);\n            }\n            if (isCaseIncluded) {\n                switchCase.include(context\x2C includeChildrenRecursively);\n                // eslint-disable-next-line unicorn/consistent-destructuring\n                onlyHasBrokenFlow && (onlyHasBrokenFlow = context.brokenFlow && !context.hasBreak);\n                context.hasBreak = false;\n                context.brokenFlow = brokenFlow;\n            }\n            else {\n                onlyHasBrokenFlow = brokenFlow;\n            }\n        }\n        if (isCaseIncluded && this.defaultCase !== null) {\n            context.brokenFlow = onlyHasBrokenFlow;\n        }\n        context.hasBreak = hasBreak;\n    }\n    initialise() {\n        for (let caseIndex = 0; caseIndex < this.cases.length; caseIndex++) {\n            if (this.cases[caseIndex].test === null) {\n                this.defaultCase = caseIndex;\n                return;\n            }\n        }\n        this.defaultCase = null;\n    }\n    parseNode(esTreeNode) {\n        this.discriminant = new (this.context.getNodeConstructor(esTreeNode.discriminant.type))(esTreeNode.discriminant\x2C this\x2C this.parentScope);\n        super.parseNode(esTreeNode);\n    }\n    render(code\x2C options) {\n        this.discriminant.render(code\x2C options);\n        if (this.cases.length > 0) {\n            renderStatementList(this.cases\x2C code\x2C this.cases[0].start\x2C this.end - 1\x2C options);\n        }\n    }\n}\n\nclass TaggedTemplateExpression extends CallExpressionBase {\n    bind() {\n        super.bind();\n        if (this.tag.type === Identifier$1) {\n            const name = this.tag.name;\n            const variable = this.scope.findVariable(name);\n            if (variable.isNamespace) {\n                this.context.log(LOGLEVEL_WARN\x2C logCannotCallNamespace(name)\x2C this.start);\n            }\n        }\n    }\n    hasEffects(context) {\n        try {\n            for (const argument of this.quasi.expressions) {\n                if (argument.hasEffects(context))\n                    return true;\n            }\n            return (this.tag.hasEffects(context) ||\n                this.tag.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C this.interaction\x2C context));\n        }\n        finally {\n            if (!this.deoptimized)\n                this.applyDeoptimizations();\n        }\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context\x2C includeChildrenRecursively);\n        }\n        else {\n            this.included = true;\n            this.tag.include(context\x2C includeChildrenRecursively);\n            this.quasi.include(context\x2C includeChildrenRecursively);\n        }\n        this.tag.includeCallArguments(context\x2C this.args);\n        const [returnExpression] = this.getReturnExpression();\n        if (!returnExpression.included) {\n            returnExpression.include(context\x2C false);\n        }\n    }\n    initialise() {\n        this.args = [UNKNOWN_EXPRESSION\x2C ...this.quasi.expressions];\n        this.interaction = {\n            args: [\n                this.tag instanceof MemberExpression && !this.tag.variable ? this.tag.object : null\x2C\n                ...this.args\n            ]\x2C\n            type: INTERACTION_CALLED\x2C\n            withNew: false\n        };\n    }\n    render(code\x2C options) {\n        this.tag.render(code\x2C options\x2C { isCalleeOfRenderedParent: true });\n        this.quasi.render(code\x2C options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.tag.deoptimizeArgumentsOnInteractionAtPath(this.interaction\x2C EMPTY_PATH\x2C SHARED_RECURSION_TRACKER);\n        this.context.requestTreeshakingPass();\n    }\n    getReturnExpression(recursionTracker = SHARED_RECURSION_TRACKER) {\n        if (this.returnExpression === null) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            return (this.returnExpression = this.tag.getReturnExpressionWhenCalledAtPath(EMPTY_PATH\x2C this.interaction\x2C recursionTracker\x2C this));\n        }\n        return this.returnExpression;\n    }\n}\n\nclass TemplateElement extends NodeBase {\n    // Do not try to bind value\n    bind() { }\n    hasEffects() {\n        return false;\n    }\n    include() {\n        this.included = true;\n    }\n    parseNode(esTreeNode) {\n        this.value = esTreeNode.value;\n        super.parseNode(esTreeNode);\n    }\n    render() { }\n}\n\nclass TemplateLiteral extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath() { }\n    getLiteralValueAtPath(path) {\n        if (path.length > 0 || this.quasis.length !== 1) {\n            return UnknownValue;\n        }\n        return this.quasis[0].value.cooked;\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length !== 1) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return getMemberReturnExpressionWhenCalled(literalStringMembers\x2C path[0]);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalStringMembers\x2C path[0]\x2C interaction\x2C context);\n        }\n        return true;\n    }\n    render(code\x2C options) {\n        code.indentExclusionRanges.push([this.start\x2C this.end]);\n        super.render(code\x2C options);\n    }\n}\n\nclass UndefinedVariable extends Variable {\n    constructor() {\n        super('undefined');\n    }\n    getLiteralValueAtPath() {\n        return undefined;\n    }\n}\n\nclass ExportDefaultVariable extends LocalVariable {\n    constructor(name\x2C exportDefaultDeclaration\x2C context) {\n        super(name\x2C exportDefaultDeclaration\x2C exportDefaultDeclaration.declaration\x2C context);\n        this.hasId = false;\n        this.originalId = null;\n        this.originalVariable = null;\n        const declaration = exportDefaultDeclaration.declaration;\n        if ((declaration instanceof FunctionDeclaration || declaration instanceof ClassDeclaration) &&\n            declaration.id) {\n            this.hasId = true;\n            this.originalId = declaration.id;\n        }\n        else if (declaration instanceof Identifier) {\n            this.originalId = declaration;\n        }\n    }\n    addReference(identifier) {\n        if (!this.hasId) {\n            this.name = identifier.name;\n        }\n    }\n    forbidName(name) {\n        const original = this.getOriginalVariable();\n        if (original === this) {\n            super.forbidName(name);\n        }\n        else {\n            original.forbidName(name);\n        }\n    }\n    getAssignedVariableName() {\n        return (this.originalId && this.originalId.name) || null;\n    }\n    getBaseVariableName() {\n        const original = this.getOriginalVariable();\n        return original === this ? super.getBaseVariableName() : original.getBaseVariableName();\n    }\n    getDirectOriginalVariable() {\n        return this.originalId &&\n            (this.hasId ||\n                !(this.originalId.isPossibleTDZ() ||\n                    this.originalId.variable.isReassigned ||\n                    this.originalId.variable instanceof UndefinedVariable ||\n                    // this avoids a circular dependency\n                    'syntheticNamespace' in this.originalId.variable))\n            ? this.originalId.variable\n            : null;\n    }\n    getName(getPropertyAccess) {\n        const original = this.getOriginalVariable();\n        return original === this\n            ? super.getName(getPropertyAccess)\n            : original.getName(getPropertyAccess);\n    }\n    getOriginalVariable() {\n        if (this.originalVariable)\n            return this.originalVariable;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let original = this;\n        let currentVariable;\n        const checkedVariables = new Set();\n        do {\n            checkedVariables.add(original);\n            currentVariable = original;\n            original = currentVariable.getDirectOriginalVariable();\n        } while (original instanceof ExportDefaultVariable && !checkedVariables.has(original));\n        return (this.originalVariable = original || currentVariable);\n    }\n}\n\nclass ModuleScope extends ChildScope {\n    constructor(parent\x2C context) {\n        super(parent);\n        this.context = context;\n        this.variables.set('this'\x2C new LocalVariable('this'\x2C null\x2C UNDEFINED_EXPRESSION\x2C context));\n    }\n    addExportDefaultDeclaration(name\x2C exportDefaultDeclaration\x2C context) {\n        const variable = new ExportDefaultVariable(name\x2C exportDefaultDeclaration\x2C context);\n        this.variables.set('default'\x2C variable);\n        return variable;\n    }\n    addNamespaceMemberAccess() { }\n    deconflict(format\x2C exportNamesByVariable\x2C accessedGlobalsByScope) {\n        // all module level variables are already deconflicted when deconflicting the chunk\n        for (const scope of this.children)\n            scope.deconflict(format\x2C exportNamesByVariable\x2C accessedGlobalsByScope);\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n    findVariable(name) {\n        const knownVariable = this.variables.get(name) || this.accessedOutsideVariables.get(name);\n        if (knownVariable) {\n            return knownVariable;\n        }\n        const variable = this.context.traceVariable(name) || this.parent.findVariable(name);\n        if (variable instanceof GlobalVariable) {\n            this.accessedOutsideVariables.set(name\x2C variable);\n        }\n        return variable;\n    }\n}\n\nclass ThisExpression extends NodeBase {\n    bind() {\n        this.variable = this.scope.findVariable('this');\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.variable.deoptimizePath(path);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        if (path.length === 0) {\n            return interaction.type !== INTERACTION_ACCESSED;\n        }\n        return this.variable.hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context);\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            this.context.includeVariableInModule(this.variable);\n        }\n    }\n    initialise() {\n        this.alias =\n            this.scope.findLexicalBoundary() instanceof ModuleScope ? this.context.moduleContext : null;\n        if (this.alias === 'undefined') {\n            this.context.log(LOGLEVEL_WARN\x2C logThisIsUndefined()\x2C this.start);\n        }\n    }\n    render(code) {\n        if (this.alias !== null) {\n            code.overwrite(this.start\x2C this.end\x2C this.alias\x2C {\n                contentOnly: false\x2C\n                storeName: true\n            });\n        }\n    }\n}\n\nclass ThrowStatement extends NodeBase {\n    hasEffects() {\n        return true;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.argument.include(context\x2C includeChildrenRecursively);\n        context.brokenFlow = true;\n    }\n    render(code\x2C options) {\n        this.argument.render(code\x2C options\x2C { preventASI: true });\n        if (this.argument.start === this.start + 5 /* 'throw'.length */) {\n            code.prependLeft(this.start + 5\x2C ' ');\n        }\n    }\n}\n\nclass TryStatement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.directlyIncluded = false;\n        this.includedLabelsAfterBlock = null;\n    }\n    hasEffects(context) {\n        return ((this.context.options.treeshake.tryCatchDeoptimization\n            ? this.block.body.length > 0\n            : this.block.hasEffects(context)) || !!this.finalizer?.hasEffects(context));\n    }\n    include(context\x2C includeChildrenRecursively) {\n        const tryCatchDeoptimization = this.context.options.treeshake\n            ?.tryCatchDeoptimization;\n        const { brokenFlow\x2C includedLabels } = context;\n        if (!this.directlyIncluded || !tryCatchDeoptimization) {\n            this.included = true;\n            this.directlyIncluded = true;\n            this.block.include(context\x2C tryCatchDeoptimization ? INCLUDE_PARAMETERS : includeChildrenRecursively);\n            if (includedLabels.size > 0) {\n                this.includedLabelsAfterBlock = [...includedLabels];\n            }\n            context.brokenFlow = brokenFlow;\n        }\n        else if (this.includedLabelsAfterBlock) {\n            for (const label of this.includedLabelsAfterBlock) {\n                includedLabels.add(label);\n            }\n        }\n        if (this.handler !== null) {\n            this.handler.include(context\x2C includeChildrenRecursively);\n            context.brokenFlow = brokenFlow;\n        }\n        this.finalizer?.include(context\x2C includeChildrenRecursively);\n    }\n}\n\nconst unaryOperators = {\n    '!': value => !value\x2C\n    '+': value => +value\x2C\n    '-': value => -value\x2C\n    delete: () => UnknownValue\x2C\n    typeof: value => typeof value\x2C\n    void: () => undefined\x2C\n    '~': value => ~value\n};\nclass UnaryExpression extends NodeBase {\n    getLiteralValueAtPath(path\x2C recursionTracker\x2C origin) {\n        if (path.length > 0)\n            return UnknownValue;\n        const argumentValue = this.argument.getLiteralValueAtPath(EMPTY_PATH\x2C recursionTracker\x2C origin);\n        if (typeof argumentValue === 'symbol')\n            return UnknownValue;\n        return unaryOperators[this.operator](argumentValue);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.operator === 'typeof' && this.argument instanceof Identifier)\n            return false;\n        return (this.argument.hasEffects(context) ||\n            (this.operator === 'delete' &&\n                this.argument.hasEffectsOnInteractionAtPath(EMPTY_PATH\x2C NODE_INTERACTION_UNKNOWN_ASSIGNMENT\x2C context)));\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > (this.operator === 'void' ? 0 : 1);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.operator === 'delete') {\n            this.argument.deoptimizePath(EMPTY_PATH);\n            this.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass UnknownNode extends NodeBase {\n    hasEffects() {\n        return true;\n    }\n    include(context) {\n        super.include(context\x2C true);\n    }\n}\n\nclass UpdateExpression extends NodeBase {\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return this.argument.hasEffectsAsAssignmentTarget(context\x2C true);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C { type }) {\n        return path.length > 1 || type !== INTERACTION_ACCESSED;\n    }\n    include(context\x2C includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        this.argument.includeAsAssignmentTarget(context\x2C includeChildrenRecursively\x2C true);\n    }\n    initialise() {\n        this.argument.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code\x2C options) {\n        const { exportNamesByVariable\x2C format\x2C snippets: { _ } } = options;\n        this.argument.render(code\x2C options);\n        if (format === 'system') {\n            const variable = this.argument.variable;\n            const exportNames = exportNamesByVariable.get(variable);\n            if (exportNames) {\n                if (this.prefix) {\n                    if (exportNames.length === 1) {\n                        renderSystemExportExpression(variable\x2C this.start\x2C this.end\x2C code\x2C options);\n                    }\n                    else {\n                        renderSystemExportSequenceAfterExpression(variable\x2C this.start\x2C this.end\x2C this.parent.type !== ExpressionStatement$1\x2C code\x2C options);\n                    }\n                }\n                else {\n                    const operator = this.operator[0];\n                    renderSystemExportSequenceBeforeExpression(variable\x2C this.start\x2C this.end\x2C this.parent.type !== ExpressionStatement$1\x2C code\x2C options\x2C `${_}${operator}${_}1`);\n                }\n            }\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.argument.deoptimizePath(EMPTY_PATH);\n        if (this.argument instanceof Identifier) {\n            const variable = this.scope.findVariable(this.argument.name);\n            variable.isReassigned = true;\n        }\n        this.context.requestTreeshakingPass();\n    }\n}\n\nfunction areAllDeclarationsIncludedAndNotExported(declarations\x2C exportNamesByVariable) {\n    for (const declarator of declarations) {\n        if (!declarator.id.included)\n            return false;\n        if (declarator.id.type === Identifier$1) {\n            if (exportNamesByVariable.has(declarator.id.variable))\n                return false;\n        }\n        else {\n            const exportedVariables = [];\n            declarator.id.addExportedVariables(exportedVariables\x2C exportNamesByVariable);\n            if (exportedVariables.length > 0)\n                return false;\n        }\n    }\n    return true;\n}\nclass VariableDeclaration extends NodeBase {\n    deoptimizePath() {\n        for (const declarator of this.declarations) {\n            declarator.deoptimizePath(EMPTY_PATH);\n        }\n    }\n    hasEffectsOnInteractionAtPath() {\n        return false;\n    }\n    include(context\x2C includeChildrenRecursively\x2C { asSingleStatement } = BLANK) {\n        this.included = true;\n        for (const declarator of this.declarations) {\n            if (includeChildrenRecursively || declarator.shouldBeIncluded(context))\n                declarator.include(context\x2C includeChildrenRecursively);\n            const { id\x2C init } = declarator;\n            if (asSingleStatement) {\n                id.include(context\x2C includeChildrenRecursively);\n            }\n            if (init &&\n                id.included &&\n                !init.included &&\n                (id instanceof ObjectPattern || id instanceof ArrayPattern)) {\n                init.include(context\x2C includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        for (const declarator of this.declarations) {\n            declarator.declareDeclarator(this.kind);\n        }\n    }\n    render(code\x2C options\x2C nodeRenderOptions = BLANK) {\n        if (areAllDeclarationsIncludedAndNotExported(this.declarations\x2C options.exportNamesByVariable)) {\n            for (const declarator of this.declarations) {\n                declarator.render(code\x2C options);\n            }\n            if (!nodeRenderOptions.isNoStatement &&\n                code.original.charCodeAt(this.end - 1) !== 59 /*";"*/) {\n                code.appendLeft(this.end\x2C ';');\n            }\n        }\n        else {\n            this.renderReplacedDeclarations(code\x2C options);\n        }\n    }\n    applyDeoptimizations() { }\n    renderDeclarationEnd(code\x2C separatorString\x2C lastSeparatorPos\x2C actualContentEnd\x2C renderedContentEnd\x2C systemPatternExports\x2C options) {\n        if (code.original.charCodeAt(this.end - 1) === 59 /*";"*/) {\n            code.remove(this.end - 1\x2C this.end);\n        }\n        separatorString += ';';\n        if (lastSeparatorPos === null) {\n            code.appendLeft(renderedContentEnd\x2C separatorString);\n        }\n        else {\n            if (code.original.charCodeAt(actualContentEnd - 1) === 10 /*"\\n"*/ &&\n                (code.original.charCodeAt(this.end) === 10 /*"\\n"*/ ||\n                    code.original.charCodeAt(this.end) === 13) /*"\\r"*/) {\n                actualContentEnd--;\n                if (code.original.charCodeAt(actualContentEnd) === 13 /*"\\r"*/) {\n                    actualContentEnd--;\n                }\n            }\n            if (actualContentEnd === lastSeparatorPos + 1) {\n                code.overwrite(lastSeparatorPos\x2C renderedContentEnd\x2C separatorString);\n            }\n            else {\n                code.overwrite(lastSeparatorPos\x2C lastSeparatorPos + 1\x2C separatorString);\n                code.remove(actualContentEnd\x2C renderedContentEnd);\n            }\n        }\n        if (systemPatternExports.length > 0) {\n            code.appendLeft(renderedContentEnd\x2C ` ${getSystemExportStatement(systemPatternExports\x2C options)};`);\n        }\n    }\n    renderReplacedDeclarations(code\x2C options) {\n        const separatedNodes = getCommaSeparatedNodesWithBoundaries(this.declarations\x2C code\x2C this.start + this.kind.length\x2C this.end - (code.original.charCodeAt(this.end - 1) === 59 /*";"*/ ? 1 : 0));\n        let actualContentEnd\x2C renderedContentEnd;\n        renderedContentEnd = findNonWhiteSpace(code.original\x2C this.start + this.kind.length);\n        let lastSeparatorPos = renderedContentEnd - 1;\n        code.remove(this.start\x2C lastSeparatorPos);\n        let isInDeclaration = false;\n        let hasRenderedContent = false;\n        let separatorString = ''\x2C leadingString\x2C nextSeparatorString;\n        const aggregatedSystemExports = [];\n        const singleSystemExport = gatherSystemExportsAndGetSingleExport(separatedNodes\x2C options\x2C aggregatedSystemExports);\n        for (const { node\x2C start\x2C separator\x2C contentEnd\x2C end } of separatedNodes) {\n            if (!node.included) {\n                code.remove(start\x2C end);\n                continue;\n            }\n            node.render(code\x2C options);\n            leadingString = '';\n            nextSeparatorString = '';\n            if (!node.id.included ||\n                (node.id instanceof Identifier &&\n                    isReassignedExportsMember(node.id.variable\x2C options.exportNamesByVariable))) {\n                if (hasRenderedContent) {\n                    separatorString += ';';\n                }\n                isInDeclaration = false;\n            }\n            else {\n                if (singleSystemExport && singleSystemExport === node.id.variable) {\n                    const operatorPos = findFirstOccurrenceOutsideComment(code.original\x2C '='\x2C node.id.end);\n                    renderSystemExportExpression(singleSystemExport\x2C findNonWhiteSpace(code.original\x2C operatorPos + 1)\x2C separator === null ? contentEnd : separator\x2C code\x2C options);\n                }\n                if (isInDeclaration) {\n                    separatorString += '\x2C';\n                }\n                else {\n                    if (hasRenderedContent) {\n                        separatorString += ';';\n                    }\n                    leadingString += `${this.kind} `;\n                    isInDeclaration = true;\n                }\n            }\n            if (renderedContentEnd === lastSeparatorPos + 1) {\n                code.overwrite(lastSeparatorPos\x2C renderedContentEnd\x2C separatorString + leadingString);\n            }\n            else {\n                code.overwrite(lastSeparatorPos\x2C lastSeparatorPos + 1\x2C separatorString);\n                code.appendLeft(renderedContentEnd\x2C leadingString);\n            }\n            actualContentEnd = contentEnd;\n            renderedContentEnd = end;\n            hasRenderedContent = true;\n            lastSeparatorPos = separator;\n            separatorString = nextSeparatorString;\n        }\n        this.renderDeclarationEnd(code\x2C separatorString\x2C lastSeparatorPos\x2C actualContentEnd\x2C renderedContentEnd\x2C aggregatedSystemExports\x2C options);\n    }\n}\nfunction gatherSystemExportsAndGetSingleExport(separatedNodes\x2C options\x2C aggregatedSystemExports) {\n    let singleSystemExport = null;\n    if (options.format === 'system') {\n        for (const { node } of separatedNodes) {\n            if (node.id instanceof Identifier &&\n                node.init &&\n                aggregatedSystemExports.length === 0 &&\n                options.exportNamesByVariable.get(node.id.variable)?.length === 1) {\n                singleSystemExport = node.id.variable;\n                aggregatedSystemExports.push(singleSystemExport);\n            }\n            else {\n                node.id.addExportedVariables(aggregatedSystemExports\x2C options.exportNamesByVariable);\n            }\n        }\n        if (aggregatedSystemExports.length > 1) {\n            singleSystemExport = null;\n        }\n        else if (singleSystemExport) {\n            aggregatedSystemExports.length = 0;\n        }\n    }\n    return singleSystemExport;\n}\n\nclass WhileStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context\x2C this.body);\n    }\n    include(context\x2C includeChildrenRecursively) {\n        this.included = true;\n        this.test.include(context\x2C includeChildrenRecursively);\n        includeLoopBody(context\x2C this.body\x2C includeChildrenRecursively);\n    }\n}\n\nclass YieldExpression extends NodeBase {\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return !(context.ignore.returnYield && !this.argument?.hasEffects(context));\n    }\n    render(code\x2C options) {\n        if (this.argument) {\n            this.argument.render(code\x2C options\x2C { preventASI: true });\n            if (this.argument.start === this.start + 5 /* 'yield'.length */) {\n                code.prependLeft(this.start + 5\x2C ' ');\n            }\n        }\n    }\n}\n\nconst nodeConstructors = {\n    ArrayExpression\x2C\n    ArrayPattern\x2C\n    ArrowFunctionExpression\x2C\n    AssignmentExpression\x2C\n    AssignmentPattern\x2C\n    AwaitExpression\x2C\n    BinaryExpression\x2C\n    BlockStatement\x2C\n    BreakStatement\x2C\n    CallExpression\x2C\n    CatchClause\x2C\n    ChainExpression\x2C\n    ClassBody\x2C\n    ClassDeclaration\x2C\n    ClassExpression\x2C\n    ConditionalExpression\x2C\n    ContinueStatement\x2C\n    DoWhileStatement\x2C\n    EmptyStatement\x2C\n    ExportAllDeclaration\x2C\n    ExportDefaultDeclaration\x2C\n    ExportNamedDeclaration\x2C\n    ExportSpecifier\x2C\n    ExpressionStatement\x2C\n    ForInStatement\x2C\n    ForOfStatement\x2C\n    ForStatement\x2C\n    FunctionDeclaration\x2C\n    FunctionExpression\x2C\n    Identifier\x2C\n    IfStatement\x2C\n    ImportAttribute\x2C\n    ImportDeclaration\x2C\n    ImportDefaultSpecifier\x2C\n    ImportExpression\x2C\n    ImportNamespaceSpecifier\x2C\n    ImportSpecifier\x2C\n    LabeledStatement\x2C\n    Literal\x2C\n    LogicalExpression\x2C\n    MemberExpression\x2C\n    MetaProperty\x2C\n    MethodDefinition\x2C\n    NewExpression\x2C\n    ObjectExpression\x2C\n    ObjectPattern\x2C\n    PrivateIdentifier\x2C\n    Program\x2C\n    Property\x2C\n    PropertyDefinition\x2C\n    RestElement\x2C\n    ReturnStatement\x2C\n    SequenceExpression\x2C\n    SpreadElement\x2C\n    StaticBlock\x2C\n    Super\x2C\n    SwitchCase\x2C\n    SwitchStatement\x2C\n    TaggedTemplateExpression\x2C\n    TemplateElement\x2C\n    TemplateLiteral\x2C\n    ThisExpression\x2C\n    ThrowStatement\x2C\n    TryStatement\x2C\n    UnaryExpression\x2C\n    UnknownNode\x2C\n    UpdateExpression\x2C\n    VariableDeclaration\x2C\n    VariableDeclarator\x2C\n    WhileStatement\x2C\n    YieldExpression\n};\n\nconst MISSING_EXPORT_SHIM_VARIABLE = '_missingExportShim';\n\nclass ExportShimVariable extends Variable {\n    constructor(module) {\n        super(MISSING_EXPORT_SHIM_VARIABLE);\n        this.module = module;\n    }\n    include() {\n        super.include();\n        this.module.needsExportShim = true;\n    }\n}\n\nclass NamespaceVariable extends Variable {\n    constructor(context) {\n        super(context.getModuleName());\n        this.memberVariables = null;\n        this.mergedNamespaces = [];\n        this.referencedEarly = false;\n        this.references = [];\n        this.context = context;\n        this.module = context.module;\n    }\n    addReference(identifier) {\n        this.references.push(identifier);\n        this.name = identifier.name;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path\x2C recursionTracker) {\n        if (path.length > 1 || (path.length === 1 && interaction.type === INTERACTION_CALLED)) {\n            const key = path[0];\n            if (typeof key === 'string') {\n                this.getMemberVariables()[key]?.deoptimizeArgumentsOnInteractionAtPath(interaction\x2C path.slice(1)\x2C recursionTracker);\n            }\n            else {\n                deoptimizeInteraction(interaction);\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length > 1) {\n            const key = path[0];\n            if (typeof key === 'string') {\n                this.getMemberVariables()[key]?.deoptimizePath(path.slice(1));\n            }\n        }\n    }\n    getLiteralValueAtPath(path) {\n        if (path[0] === SymbolToStringTag) {\n            return 'Module';\n        }\n        return UnknownValue;\n    }\n    getMemberVariables() {\n        if (this.memberVariables) {\n            return this.memberVariables;\n        }\n        const memberVariables = Object.create(null);\n        const sortedExports = [...this.context.getExports()\x2C ...this.context.getReexports()].sort();\n        for (const name of sortedExports) {\n            if (name[0] !== '*' && name !== this.module.info.syntheticNamedExports) {\n                const exportedVariable = this.context.traceExport(name);\n                if (exportedVariable) {\n                    memberVariables[name] = exportedVariable;\n                }\n            }\n        }\n        return (this.memberVariables = memberVariables);\n    }\n    hasEffectsOnInteractionAtPath(path\x2C interaction\x2C context) {\n        const { type } = interaction;\n        if (path.length === 0) {\n            // This can only be a call anyway\n            return true;\n        }\n        if (path.length === 1 && type !== INTERACTION_CALLED) {\n            return type === INTERACTION_ASSIGNED;\n        }\n        const key = path[0];\n        if (typeof key !== 'string') {\n            return true;\n        }\n        const memberVariable = this.getMemberVariables()[key];\n        return (!memberVariable ||\n            memberVariable.hasEffectsOnInteractionAtPath(path.slice(1)\x2C interaction\x2C context));\n    }\n    include() {\n        this.included = true;\n        this.context.includeAllExports();\n    }\n    prepare(accessedGlobalsByScope) {\n        if (this.mergedNamespaces.length > 0) {\n            this.module.scope.addAccessedGlobals([MERGE_NAMESPACES_VARIABLE]\x2C accessedGlobalsByScope);\n        }\n    }\n    renderBlock(options) {\n        const { exportNamesByVariable\x2C format\x2C freeze\x2C indent: t\x2C namespaceToStringTag\x2C snippets: { _\x2C cnst\x2C getObject\x2C getPropertyAccess\x2C n\x2C s } } = options;\n        const memberVariables = this.getMemberVariables();\n        const members = Object.entries(memberVariables)\n            .filter(([_\x2C variable]) => variable.included)\n            .map(([name\x2C variable]) => {\n            if (this.referencedEarly || variable.isReassigned || variable === this) {\n                return [\n                    null\x2C\n                    `get ${name}${_}()${_}{${_}return ${variable.getName(getPropertyAccess)}${s}${_}}`\n                ];\n            }\n            return [name\x2C variable.getName(getPropertyAccess)];\n        });\n        members.unshift([null\x2C `__proto__:${_}null`]);\n        let output = getObject(members\x2C { lineBreakIndent: { base: ''\x2C t } });\n        if (this.mergedNamespaces.length > 0) {\n            const assignmentArguments = this.mergedNamespaces.map(variable => variable.getName(getPropertyAccess));\n            output = `/*#__PURE__*/${MERGE_NAMESPACES_VARIABLE}(${output}\x2C${_}[${assignmentArguments.join(`\x2C${_}`)}])`;\n        }\n        else {\n            // The helper to merge namespaces will also take care of freezing and toStringTag\n            if (namespaceToStringTag) {\n                output = `/*#__PURE__*/Object.defineProperty(${output}\x2C${_}Symbol.toStringTag\x2C${_}${getToStringTagValue(getObject)})`;\n            }\n            if (freeze) {\n                output = `/*#__PURE__*/Object.freeze(${output})`;\n            }\n        }\n        const name = this.getName(getPropertyAccess);\n        output = `${cnst} ${name}${_}=${_}${output};`;\n        if (format === 'system' && exportNamesByVariable.has(this)) {\n            output += `${n}${getSystemExportStatement([this]\x2C options)};`;\n        }\n        return output;\n    }\n    renderFirst() {\n        return this.referencedEarly;\n    }\n    setMergedNamespaces(mergedNamespaces) {\n        this.mergedNamespaces = mergedNamespaces;\n        const moduleExecIndex = this.context.getModuleExecIndex();\n        for (const identifier of this.references) {\n            if (identifier.context.getModuleExecIndex() <= moduleExecIndex) {\n                this.referencedEarly = true;\n                break;\n            }\n        }\n    }\n}\nNamespaceVariable.prototype.isNamespace = true;\n\nclass SyntheticNamedExportVariable extends Variable {\n    constructor(context\x2C name\x2C syntheticNamespace) {\n        super(name);\n        this.baseVariable = null;\n        this.context = context;\n        this.module = context.module;\n        this.syntheticNamespace = syntheticNamespace;\n    }\n    getBaseVariable() {\n        if (this.baseVariable)\n            return this.baseVariable;\n        let baseVariable = this.syntheticNamespace;\n        while (baseVariable instanceof ExportDefaultVariable ||\n            baseVariable instanceof SyntheticNamedExportVariable) {\n            if (baseVariable instanceof ExportDefaultVariable) {\n                const original = baseVariable.getOriginalVariable();\n                if (original === baseVariable)\n                    break;\n                baseVariable = original;\n            }\n            if (baseVariable instanceof SyntheticNamedExportVariable) {\n                baseVariable = baseVariable.syntheticNamespace;\n            }\n        }\n        return (this.baseVariable = baseVariable);\n    }\n    getBaseVariableName() {\n        return this.syntheticNamespace.getBaseVariableName();\n    }\n    getName(getPropertyAccess) {\n        return `${this.syntheticNamespace.getName(getPropertyAccess)}${getPropertyAccess(this.name)}`;\n    }\n    include() {\n        this.included = true;\n        this.context.includeVariableInModule(this.syntheticNamespace);\n    }\n    setRenderNames(baseName\x2C name) {\n        super.setRenderNames(baseName\x2C name);\n    }\n}\n\nvar BuildPhase;\n(function (BuildPhase) {\n    BuildPhase[BuildPhase["LOAD_AND_PARSE"] = 0] = "LOAD_AND_PARSE";\n    BuildPhase[BuildPhase["ANALYSE"] = 1] = "ANALYSE";\n    BuildPhase[BuildPhase["GENERATE"] = 2] = "GENERATE";\n})(BuildPhase || (BuildPhase = {}));\n\nconst sourceMapCache = new WeakMap();\n/**\n * This clears the decoded array and falls back to the encoded string form.\n * Sourcemap mappings arrays can be very large and holding on to them for longer\n * than is necessary leads to poor heap utilization.\n */\nfunction resetCacheToEncoded(cache) {\n    if (cache.encodedMappings === undefined && cache.decodedMappings) {\n        cache.encodedMappings = encode(cache.decodedMappings);\n    }\n    cache.decodedMappings = undefined;\n}\nfunction resetSourcemapCache(map\x2C sourcemapChain) {\n    if (map) {\n        const cache = sourceMapCache.get(map);\n        if (cache) {\n            resetCacheToEncoded(cache);\n        }\n    }\n    if (!sourcemapChain) {\n        return;\n    }\n    for (const map of sourcemapChain) {\n        if (map.missing)\n            continue;\n        resetSourcemapCache(map);\n    }\n}\nfunction decodedSourcemap(map) {\n    if (!map)\n        return null;\n    if (typeof map === 'string') {\n        map = JSON.parse(map);\n    }\n    if (!map.mappings) {\n        return {\n            mappings: []\x2C\n            names: []\x2C\n            sources: []\x2C\n            version: 3\n        };\n    }\n    const originalMappings = map.mappings;\n    const isAlreadyDecoded = Array.isArray(originalMappings);\n    const cache = {\n        decodedMappings: isAlreadyDecoded ? originalMappings : undefined\x2C\n        encodedMappings: isAlreadyDecoded ? undefined : originalMappings\n    };\n    const decodedMap = {\n        ...map\x2C\n        // By moving mappings behind an accessor\x2C we can avoid unneeded computation for cases\n        // where the mappings field is never actually accessed. This appears to greatly reduce\n        // the overhead of sourcemap decoding in terms of both compute time and memory usage.\n        get mappings() {\n            if (cache.decodedMappings) {\n                return cache.decodedMappings;\n            }\n            // If decodedMappings doesn't exist then encodedMappings should.\n            // The only scenario where cache.encodedMappings should be undefined is if the map\n            // this was constructed from was already decoded\x2C or if mappings was set to a new\n            // decoded string. In either case\x2C this line shouldn't get hit.\n            cache.decodedMappings = cache.encodedMappings ? decode(cache.encodedMappings) : [];\n            cache.encodedMappings = undefined;\n            return cache.decodedMappings;\n        }\n    };\n    sourceMapCache.set(decodedMap\x2C cache);\n    return decodedMap;\n}\n\nfunction getId(m) {\n    return m.id;\n}\n\nfunction getOriginalLocation(sourcemapChain\x2C location) {\n    const filteredSourcemapChain = sourcemapChain.filter((sourcemap) => !sourcemap.missing);\n    traceSourcemap: while (filteredSourcemapChain.length > 0) {\n        const sourcemap = filteredSourcemapChain.pop();\n        const line = sourcemap.mappings[location.line - 1];\n        if (line) {\n            const filteredLine = line.filter((segment) => segment.length > 1);\n            const lastSegment = filteredLine[filteredLine.length - 1];\n            for (const segment of filteredLine) {\n                if (segment[0] >= location.column || segment === lastSegment) {\n                    location = {\n                        column: segment[3]\x2C\n                        line: segment[2] + 1\n                    };\n                    continue traceSourcemap;\n                }\n            }\n        }\n        throw new Error("Can't resolve original location of error.");\n    }\n    return location;\n}\n\nfunction getAssertionsFromImportExpression(node) {\n    const assertProperty = node.arguments?.[0]?.properties.find((property) => getPropertyKey(property) === 'assert')?.value;\n    if (!assertProperty) {\n        return EMPTY_OBJECT;\n    }\n    const assertFields = assertProperty.properties\n        .map(property => {\n        const key = getPropertyKey(property);\n        if (typeof key === 'string' &&\n            typeof property.value.value === 'string') {\n            return [key\x2C property.value.value];\n        }\n        return null;\n    })\n        .filter((property) => !!property);\n    if (assertFields.length > 0) {\n        return Object.fromEntries(assertFields);\n    }\n    return EMPTY_OBJECT;\n}\nconst getPropertyKey = (property) => {\n    const key = property.key;\n    return key && (key.name || key.value);\n};\nfunction getAssertionsFromImportExportDeclaration(assertions) {\n    return assertions?.length\n        ? Object.fromEntries(assertions.map(assertion => [getPropertyKey(assertion)\x2C assertion.value.value]))\n        : EMPTY_OBJECT;\n}\nfunction doAssertionsDiffer(assertionA\x2C assertionB) {\n    const keysA = Object.keys(assertionA);\n    return (keysA.length !== Object.keys(assertionB).length ||\n        keysA.some(key => assertionA[key] !== assertionB[key]));\n}\n\nlet timers = new Map();\nfunction getPersistedLabel(label\x2C level) {\n    switch (level) {\n        case 1: {\n            return `# ${label}`;\n        }\n        case 2: {\n            return `## ${label}`;\n        }\n        case 3: {\n            return label;\n        }\n        default: {\n            return `${'  '.repeat(level - 4)}- ${label}`;\n        }\n    }\n}\nfunction timeStartImpl(label\x2C level = 3) {\n    label = getPersistedLabel(label\x2C level);\n    const startMemory = process$1.memoryUsage().heapUsed;\n    const startTime = performance.now();\n    const timer = timers.get(label);\n    if (timer === undefined) {\n        timers.set(label\x2C {\n            memory: 0\x2C\n            startMemory\x2C\n            startTime\x2C\n            time: 0\x2C\n            totalMemory: 0\n        });\n    }\n    else {\n        timer.startMemory = startMemory;\n        timer.startTime = startTime;\n    }\n}\nfunction timeEndImpl(label\x2C level = 3) {\n    label = getPersistedLabel(label\x2C level);\n    const timer = timers.get(label);\n    if (timer !== undefined) {\n        const currentMemory = process$1.memoryUsage().heapUsed;\n        timer.memory += currentMemory - timer.startMemory;\n        timer.time += performance.now() - timer.startTime;\n        timer.totalMemory = Math.max(timer.totalMemory\x2C currentMemory);\n    }\n}\nfunction getTimings() {\n    const newTimings = {};\n    for (const [label\x2C { memory\x2C time\x2C totalMemory }] of timers) {\n        newTimings[label] = [time\x2C memory\x2C totalMemory];\n    }\n    return newTimings;\n}\nlet timeStart = doNothing;\nlet timeEnd = doNothing;\nconst TIMED_PLUGIN_HOOKS = [\n    'augmentChunkHash'\x2C\n    'buildEnd'\x2C\n    'buildStart'\x2C\n    'generateBundle'\x2C\n    'load'\x2C\n    'moduleParsed'\x2C\n    'options'\x2C\n    'outputOptions'\x2C\n    'renderChunk'\x2C\n    'renderDynamicImport'\x2C\n    'renderStart'\x2C\n    'resolveDynamicImport'\x2C\n    'resolveFileUrl'\x2C\n    'resolveId'\x2C\n    'resolveImportMeta'\x2C\n    'shouldTransformCachedModule'\x2C\n    'transform'\x2C\n    'writeBundle'\n];\nfunction getPluginWithTimers(plugin\x2C index) {\n    for (const hook of TIMED_PLUGIN_HOOKS) {\n        if (hook in plugin) {\n            let timerLabel = `plugin ${index}`;\n            if (plugin.name) {\n                timerLabel += ` (${plugin.name})`;\n            }\n            timerLabel += ` - ${hook}`;\n            const handler = function (...parameters) {\n                timeStart(timerLabel\x2C 4);\n                const result = hookFunction.apply(this\x2C parameters);\n                timeEnd(timerLabel\x2C 4);\n                return result;\n            };\n            let hookFunction;\n            if (typeof plugin[hook].handler === 'function') {\n                hookFunction = plugin[hook].handler;\n                plugin[hook].handler = handler;\n            }\n            else {\n                hookFunction = plugin[hook];\n                plugin[hook] = handler;\n            }\n        }\n    }\n    return plugin;\n}\nfunction initialiseTimers(inputOptions) {\n    if (inputOptions.perf) {\n        timers = new Map();\n        timeStart = timeStartImpl;\n        timeEnd = timeEndImpl;\n        inputOptions.plugins = inputOptions.plugins.map(getPluginWithTimers);\n    }\n    else {\n        timeStart = doNothing;\n        timeEnd = doNothing;\n    }\n}\n\nfunction markModuleAndImpureDependenciesAsExecuted(baseModule) {\n    baseModule.isExecuted = true;\n    const modules = [baseModule];\n    const visitedModules = new Set();\n    for (const module of modules) {\n        for (const dependency of [...module.dependencies\x2C ...module.implicitlyLoadedBefore]) {\n            if (!(dependency instanceof ExternalModule) &&\n                !dependency.isExecuted &&\n                (dependency.info.moduleSideEffects || module.implicitlyLoadedBefore.has(dependency)) &&\n                !visitedModules.has(dependency.id)) {\n                dependency.isExecuted = true;\n                visitedModules.add(dependency.id);\n                modules.push(dependency);\n            }\n        }\n    }\n}\n\nconst MISSING_EXPORT_SHIM_DESCRIPTION = {\n    identifier: null\x2C\n    localName: MISSING_EXPORT_SHIM_VARIABLE\n};\nfunction getVariableForExportNameRecursive(target\x2C name\x2C importerForSideEffects\x2C isExportAllSearch\x2C searchedNamesAndModules = new Map()) {\n    const searchedModules = searchedNamesAndModules.get(name);\n    if (searchedModules) {\n        if (searchedModules.has(target)) {\n            return isExportAllSearch ? [null] : error(logCircularReexport(name\x2C target.id));\n        }\n        searchedModules.add(target);\n    }\n    else {\n        searchedNamesAndModules.set(name\x2C new Set([target]));\n    }\n    return target.getVariableForExportName(name\x2C {\n        importerForSideEffects\x2C\n        isExportAllSearch\x2C\n        searchedNamesAndModules\n    });\n}\nfunction getAndExtendSideEffectModules(variable\x2C module) {\n    const sideEffectModules = getOrCreate(module.sideEffectDependenciesByVariable\x2C variable\x2C (getNewSet));\n    let currentVariable = variable;\n    const referencedVariables = new Set([currentVariable]);\n    while (true) {\n        const importingModule = currentVariable.module;\n        currentVariable =\n            currentVariable instanceof ExportDefaultVariable\n                ? currentVariable.getDirectOriginalVariable()\n                : currentVariable instanceof SyntheticNamedExportVariable\n                    ? currentVariable.syntheticNamespace\n                    : null;\n        if (!currentVariable || referencedVariables.has(currentVariable)) {\n            break;\n        }\n        referencedVariables.add(currentVariable);\n        sideEffectModules.add(importingModule);\n        const originalSideEffects = importingModule.sideEffectDependenciesByVariable.get(currentVariable);\n        if (originalSideEffects) {\n            for (const module of originalSideEffects) {\n                sideEffectModules.add(module);\n            }\n        }\n    }\n    return sideEffectModules;\n}\nclass Module {\n    constructor(graph\x2C id\x2C options\x2C isEntry\x2C moduleSideEffects\x2C syntheticNamedExports\x2C meta\x2C assertions) {\n        this.graph = graph;\n        this.id = id;\n        this.options = options;\n        this.alternativeReexportModules = new Map();\n        this.chunkFileNames = new Set();\n        this.chunkNames = [];\n        this.cycles = new Set();\n        this.dependencies = new Set();\n        this.dynamicDependencies = new Set();\n        this.dynamicImporters = [];\n        this.dynamicImports = [];\n        this.execIndex = Infinity;\n        this.implicitlyLoadedAfter = new Set();\n        this.implicitlyLoadedBefore = new Set();\n        this.importDescriptions = new Map();\n        this.importMetas = [];\n        this.importedFromNotTreeshaken = false;\n        this.importers = [];\n        this.includedDynamicImporters = [];\n        this.includedImports = new Set();\n        this.isExecuted = false;\n        this.isUserDefinedEntryPoint = false;\n        this.needsExportShim = false;\n        this.sideEffectDependenciesByVariable = new Map();\n        this.sourcesWithAssertions = new Map();\n        this.allExportNames = null;\n        this.ast = null;\n        this.exportAllModules = [];\n        this.exportAllSources = new Set();\n        this.exportNamesByVariable = null;\n        this.exportShimVariable = new ExportShimVariable(this);\n        this.exports = new Map();\n        this.namespaceReexportsByName = new Map();\n        this.reexportDescriptions = new Map();\n        this.relevantDependencies = null;\n        this.syntheticExports = new Map();\n        this.syntheticNamespace = null;\n        this.transformDependencies = [];\n        this.transitiveReexports = null;\n        this.excludeFromSourcemap = /\\0/.test(id);\n        this.context = options.moduleContext(id);\n        this.preserveSignature = this.options.preserveEntrySignatures;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const module = this;\n        const { dynamicImports\x2C dynamicImporters\x2C exportAllSources\x2C exports\x2C implicitlyLoadedAfter\x2C implicitlyLoadedBefore\x2C importers\x2C reexportDescriptions\x2C sourcesWithAssertions } = this;\n        this.info = {\n            assertions\x2C\n            ast: null\x2C\n            code: null\x2C\n            get dynamicallyImportedIdResolutions() {\n                return dynamicImports\n                    .map(({ argument }) => typeof argument === 'string' && module.resolvedIds[argument])\n                    .filter(Boolean);\n            }\x2C\n            get dynamicallyImportedIds() {\n                // We cannot use this.dynamicDependencies because this is needed before\n                // dynamicDependencies are populated\n                return dynamicImports.map(({ id }) => id).filter((id) => id != null);\n            }\x2C\n            get dynamicImporters() {\n                return dynamicImporters.sort();\n            }\x2C\n            get exportedBindings() {\n                const exportBindings = { '.': [...exports.keys()] };\n                for (const [name\x2C { source }] of reexportDescriptions) {\n                    (exportBindings[source] ?? (exportBindings[source] = [])).push(name);\n                }\n                for (const source of exportAllSources) {\n                    (exportBindings[source] ?? (exportBindings[source] = [])).push('*');\n                }\n                return exportBindings;\n            }\x2C\n            get exports() {\n                return [\n                    ...exports.keys()\x2C\n                    ...reexportDescriptions.keys()\x2C\n                    ...[...exportAllSources].map(() => '*')\n                ];\n            }\x2C\n            get hasDefaultExport() {\n                // This information is only valid after parsing\n                if (!module.ast) {\n                    return null;\n                }\n                return module.exports.has('default') || reexportDescriptions.has('default');\n            }\x2C\n            get hasModuleSideEffects() {\n                warnDeprecation('Accessing ModuleInfo.hasModuleSideEffects from plugins is deprecated. Please use ModuleInfo.moduleSideEffects instead.'\x2C URL_THIS_GETMODULEINFO\x2C true\x2C options);\n                return this.moduleSideEffects;\n            }\x2C\n            id\x2C\n            get implicitlyLoadedAfterOneOf() {\n                // eslint-disable-next-line unicorn/prefer-spread\n                return Array.from(implicitlyLoadedAfter\x2C getId).sort();\n            }\x2C\n            get implicitlyLoadedBefore() {\n                // eslint-disable-next-line unicorn/prefer-spread\n                return Array.from(implicitlyLoadedBefore\x2C getId).sort();\n            }\x2C\n            get importedIdResolutions() {\n                // eslint-disable-next-line unicorn/prefer-spread\n                return Array.from(sourcesWithAssertions.keys()\x2C source => module.resolvedIds[source]).filter(Boolean);\n            }\x2C\n            get importedIds() {\n                // We cannot use this.dependencies because this is needed before\n                // dependencies are populated\n                // eslint-disable-next-line unicorn/prefer-spread\n                return Array.from(sourcesWithAssertions.keys()\x2C source => module.resolvedIds[source]?.id).filter(Boolean);\n            }\x2C\n            get importers() {\n                return importers.sort();\n            }\x2C\n            isEntry\x2C\n            isExternal: false\x2C\n            get isIncluded() {\n                if (graph.phase !== BuildPhase.GENERATE) {\n                    return null;\n                }\n                return module.isIncluded();\n            }\x2C\n            meta: { ...meta }\x2C\n            moduleSideEffects\x2C\n            syntheticNamedExports\n        };\n        // Hide the deprecated key so that it only warns when accessed explicitly\n        // eslint-disable-next-line unicorn/consistent-destructuring\n        Object.defineProperty(this.info\x2C 'hasModuleSideEffects'\x2C {\n            enumerable: false\n        });\n    }\n    basename() {\n        const base = basename(this.id);\n        const extension = extname(this.id);\n        return makeLegal(extension ? base.slice(0\x2C -extension.length) : base);\n    }\n    bindReferences() {\n        this.ast.bind();\n    }\n    error(properties\x2C pos) {\n        this.addLocationToLogProps(properties\x2C pos);\n        return error(properties);\n    }\n    // sum up the length of all ast nodes that are included\n    estimateSize() {\n        let size = 0;\n        for (const node of this.ast.body) {\n            if (node.included) {\n                size += node.end - node.start;\n            }\n        }\n        return size;\n    }\n    getAllExportNames() {\n        if (this.allExportNames) {\n            return this.allExportNames;\n        }\n        this.allExportNames = new Set([...this.exports.keys()\x2C ...this.reexportDescriptions.keys()]);\n        for (const module of this.exportAllModules) {\n            if (module instanceof ExternalModule) {\n                this.allExportNames.add(`*${module.id}`);\n                continue;\n            }\n            for (const name of module.getAllExportNames()) {\n                if (name !== 'default')\n                    this.allExportNames.add(name);\n            }\n        }\n        // We do not count the synthetic namespace as a regular export to hide it\n        // from entry signatures and namespace objects\n        if (typeof this.info.syntheticNamedExports === 'string') {\n            this.allExportNames.delete(this.info.syntheticNamedExports);\n        }\n        return this.allExportNames;\n    }\n    getDependenciesToBeIncluded() {\n        if (this.relevantDependencies)\n            return this.relevantDependencies;\n        this.relevantDependencies = new Set();\n        const necessaryDependencies = new Set();\n        const alwaysCheckedDependencies = new Set();\n        const dependencyVariables = new Set(this.includedImports);\n        if (this.info.isEntry ||\n            this.includedDynamicImporters.length > 0 ||\n            this.namespace.included ||\n            this.implicitlyLoadedAfter.size > 0) {\n            for (const exportName of [...this.getReexports()\x2C ...this.getExports()]) {\n                const [exportedVariable] = this.getVariableForExportName(exportName);\n                if (exportedVariable?.included) {\n                    dependencyVariables.add(exportedVariable);\n                }\n            }\n        }\n        for (let variable of dependencyVariables) {\n            const sideEffectDependencies = this.sideEffectDependenciesByVariable.get(variable);\n            if (sideEffectDependencies) {\n                for (const module of sideEffectDependencies) {\n                    alwaysCheckedDependencies.add(module);\n                }\n            }\n            if (variable instanceof SyntheticNamedExportVariable) {\n                variable = variable.getBaseVariable();\n            }\n            else if (variable instanceof ExportDefaultVariable) {\n                variable = variable.getOriginalVariable();\n            }\n            necessaryDependencies.add(variable.module);\n        }\n        if (!this.options.treeshake || this.info.moduleSideEffects === 'no-treeshake') {\n            for (const dependency of this.dependencies) {\n                this.relevantDependencies.add(dependency);\n            }\n        }\n        else {\n            this.addRelevantSideEffectDependencies(this.relevantDependencies\x2C necessaryDependencies\x2C alwaysCheckedDependencies);\n        }\n        for (const dependency of necessaryDependencies) {\n            this.relevantDependencies.add(dependency);\n        }\n        return this.relevantDependencies;\n    }\n    getExportNamesByVariable() {\n        if (this.exportNamesByVariable) {\n            return this.exportNamesByVariable;\n        }\n        const exportNamesByVariable = new Map();\n        for (const exportName of this.getAllExportNames()) {\n            let [tracedVariable] = this.getVariableForExportName(exportName);\n            if (tracedVariable instanceof ExportDefaultVariable) {\n                tracedVariable = tracedVariable.getOriginalVariable();\n            }\n            if (!tracedVariable ||\n                !(tracedVariable.included || tracedVariable instanceof ExternalVariable)) {\n                continue;\n            }\n            const existingExportNames = exportNamesByVariable.get(tracedVariable);\n            if (existingExportNames) {\n                existingExportNames.push(exportName);\n            }\n            else {\n                exportNamesByVariable.set(tracedVariable\x2C [exportName]);\n            }\n        }\n        return (this.exportNamesByVariable = exportNamesByVariable);\n    }\n    getExports() {\n        return [...this.exports.keys()];\n    }\n    getReexports() {\n        if (this.transitiveReexports) {\n            return this.transitiveReexports;\n        }\n        // to avoid infinite recursion when using circular `export * from X`\n        this.transitiveReexports = [];\n        const reexports = new Set(this.reexportDescriptions.keys());\n        for (const module of this.exportAllModules) {\n            if (module instanceof ExternalModule) {\n                reexports.add(`*${module.id}`);\n            }\n            else {\n                for (const name of [...module.getReexports()\x2C ...module.getExports()]) {\n                    if (name !== 'default')\n                        reexports.add(name);\n                }\n            }\n        }\n        return (this.transitiveReexports = [...reexports]);\n    }\n    getRenderedExports() {\n        // only direct exports are counted here\x2C not reexports at all\n        const renderedExports = [];\n        const removedExports = [];\n        for (const exportName of this.exports.keys()) {\n            const [variable] = this.getVariableForExportName(exportName);\n            (variable && variable.included ? renderedExports : removedExports).push(exportName);\n        }\n        return { removedExports\x2C renderedExports };\n    }\n    getSyntheticNamespace() {\n        if (this.syntheticNamespace === null) {\n            this.syntheticNamespace = undefined;\n            [this.syntheticNamespace] = this.getVariableForExportName(typeof this.info.syntheticNamedExports === 'string'\n                ? this.info.syntheticNamedExports\n                : 'default'\x2C { onlyExplicit: true });\n        }\n        if (!this.syntheticNamespace) {\n            return error(logSyntheticNamedExportsNeedNamespaceExport(this.id\x2C this.info.syntheticNamedExports));\n        }\n        return this.syntheticNamespace;\n    }\n    getVariableForExportName(name\x2C { importerForSideEffects\x2C isExportAllSearch\x2C onlyExplicit\x2C searchedNamesAndModules } = EMPTY_OBJECT) {\n        if (name[0] === '*') {\n            if (name.length === 1) {\n                // export * from './other'\n                return [this.namespace];\n            }\n            // export * from 'external'\n            const module = this.graph.modulesById.get(name.slice(1));\n            return module.getVariableForExportName('*');\n        }\n        // export { foo } from './other'\n        const reexportDeclaration = this.reexportDescriptions.get(name);\n        if (reexportDeclaration) {\n            const [variable] = getVariableForExportNameRecursive(reexportDeclaration.module\x2C reexportDeclaration.localName\x2C importerForSideEffects\x2C false\x2C searchedNamesAndModules);\n            if (!variable) {\n                return this.error(logMissingExport(reexportDeclaration.localName\x2C this.id\x2C reexportDeclaration.module.id)\x2C reexportDeclaration.start);\n            }\n            if (importerForSideEffects) {\n                setAlternativeExporterIfCyclic(variable\x2C importerForSideEffects\x2C this);\n                if (this.info.moduleSideEffects) {\n                    getOrCreate(importerForSideEffects.sideEffectDependenciesByVariable\x2C variable\x2C (getNewSet)).add(this);\n                }\n            }\n            return [variable];\n        }\n        const exportDeclaration = this.exports.get(name);\n        if (exportDeclaration) {\n            if (exportDeclaration === MISSING_EXPORT_SHIM_DESCRIPTION) {\n                return [this.exportShimVariable];\n            }\n            const name = exportDeclaration.localName;\n            const variable = this.traceVariable(name\x2C {\n                importerForSideEffects\x2C\n                searchedNamesAndModules\n            });\n            if (importerForSideEffects) {\n                setAlternativeExporterIfCyclic(variable\x2C importerForSideEffects\x2C this);\n                getOrCreate(importerForSideEffects.sideEffectDependenciesByVariable\x2C variable\x2C (getNewSet)).add(this);\n            }\n            return [variable];\n        }\n        if (onlyExplicit) {\n            return [null];\n        }\n        if (name !== 'default') {\n            const foundNamespaceReexport = this.namespaceReexportsByName.get(name) ??\n                this.getVariableFromNamespaceReexports(name\x2C importerForSideEffects\x2C searchedNamesAndModules);\n            this.namespaceReexportsByName.set(name\x2C foundNamespaceReexport);\n            if (foundNamespaceReexport[0]) {\n                return foundNamespaceReexport;\n            }\n        }\n        if (this.info.syntheticNamedExports) {\n            return [\n                getOrCreate(this.syntheticExports\x2C name\x2C () => new SyntheticNamedExportVariable(this.astContext\x2C name\x2C this.getSyntheticNamespace()))\n            ];\n        }\n        // we don't want to create shims when we are just\n        // probing export * modules for exports\n        if (!isExportAllSearch && this.options.shimMissingExports) {\n            this.shimMissingExport(name);\n            return [this.exportShimVariable];\n        }\n        return [null];\n    }\n    hasEffects() {\n        return this.info.moduleSideEffects === 'no-treeshake' || this.ast.hasCachedEffects();\n    }\n    include() {\n        const context = createInclusionContext();\n        if (this.ast.shouldBeIncluded(context))\n            this.ast.include(context\x2C false);\n    }\n    includeAllExports(includeNamespaceMembers) {\n        if (!this.isExecuted) {\n            markModuleAndImpureDependenciesAsExecuted(this);\n            this.graph.needsTreeshakingPass = true;\n        }\n        for (const exportName of this.exports.keys()) {\n            if (includeNamespaceMembers || exportName !== this.info.syntheticNamedExports) {\n                const variable = this.getVariableForExportName(exportName)[0];\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n            }\n        }\n        for (const name of this.getReexports()) {\n            const [variable] = this.getVariableForExportName(name);\n            if (variable) {\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n                if (variable instanceof ExternalVariable) {\n                    variable.module.reexported = true;\n                }\n            }\n        }\n        if (includeNamespaceMembers) {\n            this.namespace.setMergedNamespaces(this.includeAndGetAdditionalMergedNamespaces());\n        }\n    }\n    includeAllInBundle() {\n        this.ast.include(createInclusionContext()\x2C true);\n        this.includeAllExports(false);\n    }\n    includeExportsByNames(names) {\n        if (!this.isExecuted) {\n            markModuleAndImpureDependenciesAsExecuted(this);\n            this.graph.needsTreeshakingPass = true;\n        }\n        let includeNamespaceMembers = false;\n        for (const name of names) {\n            const variable = this.getVariableForExportName(name)[0];\n            if (variable) {\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n            }\n            if (!this.exports.has(name) && !this.reexportDescriptions.has(name)) {\n                includeNamespaceMembers = true;\n            }\n        }\n        if (includeNamespaceMembers) {\n            this.namespace.setMergedNamespaces(this.includeAndGetAdditionalMergedNamespaces());\n        }\n    }\n    isIncluded() {\n        // Modules where this.ast is missing have been loaded via this.load and are\n        // not yet fully processed\x2C hence they cannot be included.\n        return (this.ast &&\n            (this.ast.included ||\n                this.namespace.included ||\n                this.importedFromNotTreeshaken ||\n                this.exportShimVariable.included));\n    }\n    linkImports() {\n        this.addModulesToImportDescriptions(this.importDescriptions);\n        this.addModulesToImportDescriptions(this.reexportDescriptions);\n        const externalExportAllModules = [];\n        for (const source of this.exportAllSources) {\n            const module = this.graph.modulesById.get(this.resolvedIds[source].id);\n            if (module instanceof ExternalModule) {\n                externalExportAllModules.push(module);\n                continue;\n            }\n            this.exportAllModules.push(module);\n        }\n        this.exportAllModules.push(...externalExportAllModules);\n    }\n    log(level\x2C properties\x2C pos) {\n        this.addLocationToLogProps(properties\x2C pos);\n        this.options.onLog(level\x2C properties);\n    }\n    render(options) {\n        const source = this.magicString.clone();\n        this.ast.render(source\x2C options);\n        source.trim();\n        const { usesTopLevelAwait } = this.astContext;\n        if (usesTopLevelAwait && options.format !== 'es' && options.format !== 'system') {\n            return error(logInvalidFormatForTopLevelAwait(this.id\x2C options.format));\n        }\n        return { source\x2C usesTopLevelAwait };\n    }\n    setSource({ ast\x2C code\x2C customTransformCache\x2C originalCode\x2C originalSourcemap\x2C resolvedIds\x2C sourcemapChain\x2C transformDependencies\x2C transformFiles\x2C ...moduleOptions }) {\n        timeStart('generate ast'\x2C 3);\n        this.info.code = code;\n        this.originalCode = originalCode;\n        // We need to call decodedSourcemap on the input in case they were hydrated from json in the cache and don't\n        // have the lazy evaluation cache configured. Right now this isn't enforced by the type system because the\n        // RollupCache stores `ExistingDecodedSourcemap` instead of `ExistingRawSourcemap`\n        this.originalSourcemap = decodedSourcemap(originalSourcemap);\n        this.sourcemapChain = sourcemapChain.map(mapOrMissing => mapOrMissing.missing ? mapOrMissing : decodedSourcemap(mapOrMissing));\n        // If coming from cache and this value is already fully decoded\x2C we want to re-encode here to save memory.\n        resetSourcemapCache(this.originalSourcemap\x2C this.sourcemapChain);\n        if (transformFiles) {\n            this.transformFiles = transformFiles;\n        }\n        this.transformDependencies = transformDependencies;\n        this.customTransformCache = customTransformCache;\n        this.updateOptions(moduleOptions);\n        const moduleAst = ast ?? this.tryParse();\n        timeEnd('generate ast'\x2C 3);\n        timeStart('analyze ast'\x2C 3);\n        this.resolvedIds = resolvedIds ?? Object.create(null);\n        // By default\x2C `id` is the file name. Custom resolvers and loaders\n        // can change that\x2C but it makes sense to use it for the source file name\n        const fileName = this.id;\n        this.magicString = new MagicString(code\x2C {\n            filename: (this.excludeFromSourcemap ? null : fileName)\x2C\n            indentExclusionRanges: []\n        });\n        this.astContext = {\n            addDynamicImport: this.addDynamicImport.bind(this)\x2C\n            addExport: this.addExport.bind(this)\x2C\n            addImport: this.addImport.bind(this)\x2C\n            addImportMeta: this.addImportMeta.bind(this)\x2C\n            code\x2C\n            deoptimizationTracker: this.graph.deoptimizationTracker\x2C\n            error: this.error.bind(this)\x2C\n            fileName\x2C\n            getExports: this.getExports.bind(this)\x2C\n            getModuleExecIndex: () => this.execIndex\x2C\n            getModuleName: this.basename.bind(this)\x2C\n            getNodeConstructor: (name) => nodeConstructors[name] || nodeConstructors.UnknownNode\x2C\n            getReexports: this.getReexports.bind(this)\x2C\n            importDescriptions: this.importDescriptions\x2C\n            includeAllExports: () => this.includeAllExports(true)\x2C\n            includeDynamicImport: this.includeDynamicImport.bind(this)\x2C\n            includeVariableInModule: this.includeVariableInModule.bind(this)\x2C\n            log: this.log.bind(this)\x2C\n            magicString: this.magicString\x2C\n            manualPureFunctions: this.graph.pureFunctions\x2C\n            module: this\x2C\n            moduleContext: this.context\x2C\n            options: this.options\x2C\n            requestTreeshakingPass: () => (this.graph.needsTreeshakingPass = true)\x2C\n            traceExport: (name) => this.getVariableForExportName(name)[0]\x2C\n            traceVariable: this.traceVariable.bind(this)\x2C\n            usesTopLevelAwait: false\n        };\n        this.scope = new ModuleScope(this.graph.scope\x2C this.astContext);\n        this.namespace = new NamespaceVariable(this.astContext);\n        this.ast = new Program(moduleAst\x2C { context: this.astContext\x2C type: 'Module' }\x2C this.scope);\n        // Assign AST directly if has existing one as there's no way to drop it from memory.\n        // If cache is enabled\x2C also assign directly as otherwise it takes more CPU and memory to re-compute.\n        if (ast || this.options.cache !== false) {\n            this.info.ast = moduleAst;\n        }\n        else {\n            // Make lazy and apply LRU cache to not hog the memory\n            Object.defineProperty(this.info\x2C 'ast'\x2C {\n                get: () => {\n                    if (this.graph.astLru.has(fileName)) {\n                        return this.graph.astLru.get(fileName);\n                    }\n                    else {\n                        const parsedAst = this.tryParse();\n                        this.graph.astLru.set(fileName\x2C parsedAst);\n                        return parsedAst;\n                    }\n                }\n            });\n        }\n        timeEnd('analyze ast'\x2C 3);\n    }\n    toJSON() {\n        return {\n            assertions: this.info.assertions\x2C\n            ast: this.info.ast\x2C\n            code: this.info.code\x2C\n            customTransformCache: this.customTransformCache\x2C\n            // eslint-disable-next-line unicorn/prefer-spread\n            dependencies: Array.from(this.dependencies\x2C getId)\x2C\n            id: this.id\x2C\n            meta: this.info.meta\x2C\n            moduleSideEffects: this.info.moduleSideEffects\x2C\n            originalCode: this.originalCode\x2C\n            originalSourcemap: this.originalSourcemap\x2C\n            resolvedIds: this.resolvedIds\x2C\n            sourcemapChain: this.sourcemapChain\x2C\n            syntheticNamedExports: this.info.syntheticNamedExports\x2C\n            transformDependencies: this.transformDependencies\x2C\n            transformFiles: this.transformFiles\n        };\n    }\n    traceVariable(name\x2C { importerForSideEffects\x2C isExportAllSearch\x2C searchedNamesAndModules } = EMPTY_OBJECT) {\n        const localVariable = this.scope.variables.get(name);\n        if (localVariable) {\n            return localVariable;\n        }\n        const importDescription = this.importDescriptions.get(name);\n        if (importDescription) {\n            const otherModule = importDescription.module;\n            if (otherModule instanceof Module && importDescription.name === '*') {\n                return otherModule.namespace;\n            }\n            const [declaration] = getVariableForExportNameRecursive(otherModule\x2C importDescription.name\x2C importerForSideEffects || this\x2C isExportAllSearch\x2C searchedNamesAndModules);\n            if (!declaration) {\n                return this.error(logMissingExport(importDescription.name\x2C this.id\x2C otherModule.id)\x2C importDescription.start);\n            }\n            return declaration;\n        }\n        return null;\n    }\n    updateOptions({ meta\x2C moduleSideEffects\x2C syntheticNamedExports }) {\n        if (moduleSideEffects != null) {\n            this.info.moduleSideEffects = moduleSideEffects;\n        }\n        if (syntheticNamedExports != null) {\n            this.info.syntheticNamedExports = syntheticNamedExports;\n        }\n        if (meta != null) {\n            Object.assign(this.info.meta\x2C meta);\n        }\n    }\n    addDynamicImport(node) {\n        let argument = node.source;\n        if (argument instanceof TemplateLiteral) {\n            if (argument.quasis.length === 1 && argument.quasis[0].value.cooked) {\n                argument = argument.quasis[0].value.cooked;\n            }\n        }\n        else if (argument instanceof Literal && typeof argument.value === 'string') {\n            argument = argument.value;\n        }\n        this.dynamicImports.push({ argument\x2C id: null\x2C node\x2C resolution: null });\n    }\n    addExport(node) {\n        if (node instanceof ExportDefaultDeclaration) {\n            // export default foo;\n            this.exports.set('default'\x2C {\n                identifier: node.variable.getAssignedVariableName()\x2C\n                localName: 'default'\n            });\n        }\n        else if (node instanceof ExportAllDeclaration) {\n            const source = node.source.value;\n            this.addSource(source\x2C node);\n            if (node.exported) {\n                // export * as name from './other'\n                const name = node.exported.name;\n                this.reexportDescriptions.set(name\x2C {\n                    localName: '*'\x2C\n                    module: null\x2C\n                    source\x2C\n                    start: node.start\n                });\n            }\n            else {\n                // export * from './other'\n                this.exportAllSources.add(source);\n            }\n        }\n        else if (node.source instanceof Literal) {\n            // export { name } from './other'\n            const source = node.source.value;\n            this.addSource(source\x2C node);\n            for (const { exported\x2C local\x2C start } of node.specifiers) {\n                const name = exported instanceof Literal ? exported.value : exported.name;\n                this.reexportDescriptions.set(name\x2C {\n                    localName: local instanceof Literal ? local.value : local.name\x2C\n                    module: null\x2C\n                    source\x2C\n                    start\n                });\n            }\n        }\n        else if (node.declaration) {\n            const declaration = node.declaration;\n            if (declaration instanceof VariableDeclaration) {\n                // export var { foo\x2C bar } = ...\n                // export var foo = 1\x2C bar = 2;\n                for (const declarator of declaration.declarations) {\n                    for (const localName of extractAssignedNames(declarator.id)) {\n                        this.exports.set(localName\x2C { identifier: null\x2C localName });\n                    }\n                }\n            }\n            else {\n                // export function foo () {}\n                const localName = declaration.id.name;\n                this.exports.set(localName\x2C { identifier: null\x2C localName });\n            }\n        }\n        else {\n            // export { foo\x2C bar\x2C baz }\n            for (const { local\x2C exported } of node.specifiers) {\n                // except for reexports\x2C local must be an Identifier\n                const localName = local.name;\n                const exportedName = exported instanceof Identifier ? exported.name : exported.value;\n                this.exports.set(exportedName\x2C { identifier: null\x2C localName });\n            }\n        }\n    }\n    addImport(node) {\n        const source = node.source.value;\n        this.addSource(source\x2C node);\n        for (const specifier of node.specifiers) {\n            const name = specifier instanceof ImportDefaultSpecifier\n                ? 'default'\n                : specifier instanceof ImportNamespaceSpecifier\n                    ? '*'\n                    : specifier.imported instanceof Identifier\n                        ? specifier.imported.name\n                        : specifier.imported.value;\n            this.importDescriptions.set(specifier.local.name\x2C {\n                module: null\x2C\n                name\x2C\n                source\x2C\n                start: specifier.start\n            });\n        }\n    }\n    addImportMeta(node) {\n        this.importMetas.push(node);\n    }\n    addLocationToLogProps(properties\x2C pos) {\n        properties.id = this.id;\n        properties.pos = pos;\n        let code = this.info.code;\n        const location = locate(code\x2C pos\x2C { offsetLine: 1 });\n        if (location) {\n            let { column\x2C line } = location;\n            try {\n                ({ column\x2C line } = getOriginalLocation(this.sourcemapChain\x2C { column\x2C line }));\n                code = this.originalCode;\n            }\n            catch (error_) {\n                this.options.onLog(LOGLEVEL_WARN\x2C logInvalidSourcemapForError(error_\x2C this.id\x2C column\x2C line\x2C pos));\n            }\n            augmentCodeLocation(properties\x2C { column\x2C line }\x2C code\x2C this.id);\n        }\n    }\n    addModulesToImportDescriptions(importDescription) {\n        for (const specifier of importDescription.values()) {\n            const { id } = this.resolvedIds[specifier.source];\n            specifier.module = this.graph.modulesById.get(id);\n        }\n    }\n    addRelevantSideEffectDependencies(relevantDependencies\x2C necessaryDependencies\x2C alwaysCheckedDependencies) {\n        const handledDependencies = new Set();\n        const addSideEffectDependencies = (possibleDependencies) => {\n            for (const dependency of possibleDependencies) {\n                if (handledDependencies.has(dependency)) {\n                    continue;\n                }\n                handledDependencies.add(dependency);\n                if (necessaryDependencies.has(dependency)) {\n                    relevantDependencies.add(dependency);\n                    continue;\n                }\n                if (!(dependency.info.moduleSideEffects || alwaysCheckedDependencies.has(dependency))) {\n                    continue;\n                }\n                if (dependency instanceof ExternalModule || dependency.hasEffects()) {\n                    relevantDependencies.add(dependency);\n                    continue;\n                }\n                addSideEffectDependencies(dependency.dependencies);\n            }\n        };\n        addSideEffectDependencies(this.dependencies);\n        addSideEffectDependencies(alwaysCheckedDependencies);\n    }\n    addSource(source\x2C declaration) {\n        const parsedAssertions = getAssertionsFromImportExportDeclaration(declaration.assertions);\n        const existingAssertions = this.sourcesWithAssertions.get(source);\n        if (existingAssertions) {\n            if (doAssertionsDiffer(existingAssertions\x2C parsedAssertions)) {\n                this.log(LOGLEVEL_WARN\x2C logInconsistentImportAssertions(existingAssertions\x2C parsedAssertions\x2C source\x2C this.id)\x2C declaration.start);\n            }\n        }\n        else {\n            this.sourcesWithAssertions.set(source\x2C parsedAssertions);\n        }\n    }\n    getVariableFromNamespaceReexports(name\x2C importerForSideEffects\x2C searchedNamesAndModules) {\n        let foundSyntheticDeclaration = null;\n        const foundInternalDeclarations = new Map();\n        const foundExternalDeclarations = new Set();\n        for (const module of this.exportAllModules) {\n            // Synthetic namespaces should not hide "regular" exports of the same name\n            if (module.info.syntheticNamedExports === name) {\n                continue;\n            }\n            const [variable\x2C indirectExternal] = getVariableForExportNameRecursive(module\x2C name\x2C importerForSideEffects\x2C true\x2C \n            // We are creating a copy to handle the case where the same binding is\n            // imported through different namespace reexports gracefully\n            copyNameToModulesMap(searchedNamesAndModules));\n            if (module instanceof ExternalModule || indirectExternal) {\n                foundExternalDeclarations.add(variable);\n            }\n            else if (variable instanceof SyntheticNamedExportVariable) {\n                if (!foundSyntheticDeclaration) {\n                    foundSyntheticDeclaration = variable;\n                }\n            }\n            else if (variable) {\n                foundInternalDeclarations.set(variable\x2C module);\n            }\n        }\n        if (foundInternalDeclarations.size > 0) {\n            const foundDeclarationList = [...foundInternalDeclarations];\n            const usedDeclaration = foundDeclarationList[0][0];\n            if (foundDeclarationList.length === 1) {\n                return [usedDeclaration];\n            }\n            this.options.onLog(LOGLEVEL_WARN\x2C logNamespaceConflict(name\x2C this.id\x2C foundDeclarationList.map(([\x2C module]) => module.id)));\n            // TODO we are pretending it was not found while it should behave like "undefined"\n            return [null];\n        }\n        if (foundExternalDeclarations.size > 0) {\n            const foundDeclarationList = [...foundExternalDeclarations];\n            const usedDeclaration = foundDeclarationList[0];\n            if (foundDeclarationList.length > 1) {\n                this.options.onLog(LOGLEVEL_WARN\x2C logAmbiguousExternalNamespaces(name\x2C this.id\x2C usedDeclaration.module.id\x2C foundDeclarationList.map(declaration => declaration.module.id)));\n            }\n            return [usedDeclaration\x2C true];\n        }\n        if (foundSyntheticDeclaration) {\n            return [foundSyntheticDeclaration];\n        }\n        return [null];\n    }\n    includeAndGetAdditionalMergedNamespaces() {\n        const externalNamespaces = new Set();\n        const syntheticNamespaces = new Set();\n        for (const module of [this\x2C ...this.exportAllModules]) {\n            if (module instanceof ExternalModule) {\n                const [externalVariable] = module.getVariableForExportName('*');\n                externalVariable.include();\n                this.includedImports.add(externalVariable);\n                externalNamespaces.add(externalVariable);\n            }\n            else if (module.info.syntheticNamedExports) {\n                const syntheticNamespace = module.getSyntheticNamespace();\n                syntheticNamespace.include();\n                this.includedImports.add(syntheticNamespace);\n                syntheticNamespaces.add(syntheticNamespace);\n            }\n        }\n        return [...syntheticNamespaces\x2C ...externalNamespaces];\n    }\n    includeDynamicImport(node) {\n        const resolution = this.dynamicImports.find(dynamicImport => dynamicImport.node === node).resolution;\n        if (resolution instanceof Module) {\n            resolution.includedDynamicImporters.push(this);\n            const importedNames = this.options.treeshake\n                ? node.getDeterministicImportedNames()\n                : undefined;\n            if (importedNames) {\n                resolution.includeExportsByNames(importedNames);\n            }\n            else {\n                resolution.includeAllExports(true);\n            }\n        }\n    }\n    includeVariable(variable) {\n        const variableModule = variable.module;\n        if (variable.included) {\n            if (variableModule instanceof Module && variableModule !== this) {\n                getAndExtendSideEffectModules(variable\x2C this);\n            }\n        }\n        else {\n            variable.include();\n            this.graph.needsTreeshakingPass = true;\n            if (variableModule instanceof Module) {\n                if (!variableModule.isExecuted) {\n                    markModuleAndImpureDependenciesAsExecuted(variableModule);\n                }\n                if (variableModule !== this) {\n                    const sideEffectModules = getAndExtendSideEffectModules(variable\x2C this);\n                    for (const module of sideEffectModules) {\n                        if (!module.isExecuted) {\n                            markModuleAndImpureDependenciesAsExecuted(module);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    includeVariableInModule(variable) {\n        this.includeVariable(variable);\n        const variableModule = variable.module;\n        if (variableModule && variableModule !== this) {\n            this.includedImports.add(variable);\n        }\n    }\n    shimMissingExport(name) {\n        this.options.onLog(LOGLEVEL_WARN\x2C logShimmedExport(this.id\x2C name));\n        this.exports.set(name\x2C MISSING_EXPORT_SHIM_DESCRIPTION);\n    }\n    tryParse() {\n        try {\n            return this.graph.contextParse(this.info.code);\n        }\n        catch (error_) {\n            return this.error(logParseError(error_\x2C this.id)\x2C error_.pos);\n        }\n    }\n}\n// if there is a cyclic import in the reexport chain\x2C we should not\n// import from the original module but from the cyclic module to not\n// mess up execution order.\nfunction setAlternativeExporterIfCyclic(variable\x2C importer\x2C reexporter) {\n    if (variable.module instanceof Module && variable.module !== reexporter) {\n        const exporterCycles = variable.module.cycles;\n        if (exporterCycles.size > 0) {\n            const importerCycles = reexporter.cycles;\n            for (const cycleSymbol of importerCycles) {\n                if (exporterCycles.has(cycleSymbol)) {\n                    importer.alternativeReexportModules.set(variable\x2C reexporter);\n                    break;\n                }\n            }\n        }\n    }\n}\nconst copyNameToModulesMap = (searchedNamesAndModules) => searchedNamesAndModules &&\n    // eslint-disable-next-line unicorn/prefer-spread\n    new Map(Array.from(searchedNamesAndModules\x2C ([name\x2C modules]) => [name\x2C new Set(modules)]));\n\nfunction removeJsExtension(name) {\n    return name.endsWith('.js') ? name.slice(0\x2C -3) : name;\n}\n\nfunction getCompleteAmdId(options\x2C chunkId) {\n    if (options.autoId) {\n        return `${options.basePath ? options.basePath + '/' : ''}${removeJsExtension(chunkId)}`;\n    }\n    return options.id ?? '';\n}\n\nfunction getExportBlock$1(exports\x2C dependencies\x2C namedExportsMode\x2C interop\x2C snippets\x2C t\x2C externalLiveBindings\x2C mechanism = 'return ') {\n    const { _\x2C getDirectReturnFunction\x2C getFunctionIntro\x2C getPropertyAccess\x2C n\x2C s } = snippets;\n    if (!namedExportsMode) {\n        return `${n}${n}${mechanism}${getSingleDefaultExport(exports\x2C dependencies\x2C interop\x2C externalLiveBindings\x2C getPropertyAccess)};`;\n    }\n    let exportBlock = '';\n    for (const { defaultVariableName\x2C importPath\x2C isChunk\x2C name\x2C namedExportsMode: depNamedExportsMode\x2C namespaceVariableName\x2C reexports } of dependencies) {\n        if (reexports && namedExportsMode) {\n            for (const specifier of reexports) {\n                if (specifier.reexported !== '*') {\n                    const importName = getReexportedImportName(name\x2C specifier.imported\x2C depNamedExportsMode\x2C isChunk\x2C defaultVariableName\x2C namespaceVariableName\x2C interop\x2C importPath\x2C externalLiveBindings\x2C getPropertyAccess);\n                    if (exportBlock)\n                        exportBlock += n;\n                    if (specifier.imported !== '*' && specifier.needsLiveBinding) {\n                        const [left\x2C right] = getDirectReturnFunction([]\x2C {\n                            functionReturn: true\x2C\n                            lineBreakIndent: null\x2C\n                            name: null\n                        });\n                        exportBlock +=\n                            `Object.defineProperty(exports\x2C${_}'${specifier.reexported}'\x2C${_}{${n}` +\n                                `${t}enumerable:${_}true\x2C${n}` +\n                                `${t}get:${_}${left}${importName}${right}${n}});`;\n                    }\n                    else {\n                        exportBlock += `exports${getPropertyAccess(specifier.reexported)}${_}=${_}${importName};`;\n                    }\n                }\n            }\n        }\n    }\n    for (const { exported\x2C local } of exports) {\n        const lhs = `exports${getPropertyAccess(exported)}`;\n        const rhs = local;\n        if (lhs !== rhs) {\n            if (exportBlock)\n                exportBlock += n;\n            exportBlock += `${lhs}${_}=${_}${rhs};`;\n        }\n    }\n    for (const { name\x2C reexports } of dependencies) {\n        if (reexports && namedExportsMode) {\n            for (const specifier of reexports) {\n                if (specifier.reexported === '*') {\n                    if (exportBlock)\n                        exportBlock += n;\n                    const copyPropertyIfNecessary = `{${n}${t}if${_}(k${_}!==${_}'default'${_}&&${_}!Object.prototype.hasOwnProperty.call(exports\x2C${_}k))${_}${getDefineProperty(name\x2C specifier.needsLiveBinding\x2C t\x2C snippets)}${s}${n}}`;\n                    exportBlock += `Object.keys(${name}).forEach(${getFunctionIntro(['k']\x2C {\n                        isAsync: false\x2C\n                        name: null\n                    })}${copyPropertyIfNecessary});`;\n                }\n            }\n        }\n    }\n    if (exportBlock) {\n        return `${n}${n}${exportBlock}`;\n    }\n    return '';\n}\nfunction getSingleDefaultExport(exports\x2C dependencies\x2C interop\x2C externalLiveBindings\x2C getPropertyAccess) {\n    if (exports.length > 0) {\n        return exports[0].local;\n    }\n    else {\n        for (const { defaultVariableName\x2C importPath\x2C isChunk\x2C name\x2C namedExportsMode: depNamedExportsMode\x2C namespaceVariableName\x2C reexports } of dependencies) {\n            if (reexports) {\n                return getReexportedImportName(name\x2C reexports[0].imported\x2C depNamedExportsMode\x2C isChunk\x2C defaultVariableName\x2C namespaceVariableName\x2C interop\x2C importPath\x2C externalLiveBindings\x2C getPropertyAccess);\n            }\n        }\n    }\n}\nfunction getReexportedImportName(moduleVariableName\x2C imported\x2C depNamedExportsMode\x2C isChunk\x2C defaultVariableName\x2C namespaceVariableName\x2C interop\x2C moduleId\x2C externalLiveBindings\x2C getPropertyAccess) {\n    if (imported === 'default') {\n        if (!isChunk) {\n            const moduleInterop = interop(moduleId);\n            const variableName = defaultInteropHelpersByInteropType[moduleInterop]\n                ? defaultVariableName\n                : moduleVariableName;\n            return isDefaultAProperty(moduleInterop\x2C externalLiveBindings)\n                ? `${variableName}${getPropertyAccess('default')}`\n                : variableName;\n        }\n        return depNamedExportsMode\n            ? `${moduleVariableName}${getPropertyAccess('default')}`\n            : moduleVariableName;\n    }\n    if (imported === '*') {\n        return (isChunk ? !depNamedExportsMode : namespaceInteropHelpersByInteropType[interop(moduleId)])\n            ? namespaceVariableName\n            : moduleVariableName;\n    }\n    return `${moduleVariableName}${getPropertyAccess(imported)}`;\n}\nfunction getEsModuleValue(getObject) {\n    return getObject([['value'\x2C 'true']]\x2C {\n        lineBreakIndent: null\n    });\n}\nfunction getNamespaceMarkers(hasNamedExports\x2C addEsModule\x2C addNamespaceToStringTag\x2C { _\x2C getObject }) {\n    if (hasNamedExports) {\n        if (addEsModule) {\n            if (addNamespaceToStringTag) {\n                return `Object.defineProperties(exports\x2C${_}${getObject([\n                    ['__esModule'\x2C getEsModuleValue(getObject)]\x2C\n                    [null\x2C `[Symbol.toStringTag]:${_}${getToStringTagValue(getObject)}`]\n                ]\x2C {\n                    lineBreakIndent: null\n                })});`;\n            }\n            return `Object.defineProperty(exports\x2C${_}'__esModule'\x2C${_}${getEsModuleValue(getObject)});`;\n        }\n        if (addNamespaceToStringTag) {\n            return `Object.defineProperty(exports\x2C${_}Symbol.toStringTag\x2C${_}${getToStringTagValue(getObject)});`;\n        }\n    }\n    return '';\n}\nconst getDefineProperty = (name\x2C needsLiveBinding\x2C t\x2C { _\x2C getDirectReturnFunction\x2C n }) => {\n    if (needsLiveBinding) {\n        const [left\x2C right] = getDirectReturnFunction([]\x2C {\n            functionReturn: true\x2C\n            lineBreakIndent: null\x2C\n            name: null\n        });\n        return (`Object.defineProperty(exports\x2C${_}k\x2C${_}{${n}` +\n            `${t}${t}enumerable:${_}true\x2C${n}` +\n            `${t}${t}get:${_}${left}${name}[k]${right}${n}${t}})`);\n    }\n    return `exports[k]${_}=${_}${name}[k]`;\n};\n\nfunction getInteropBlock(dependencies\x2C interop\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag\x2C accessedGlobals\x2C indent\x2C snippets) {\n    const { _\x2C cnst\x2C n } = snippets;\n    const neededInteropHelpers = new Set();\n    const interopStatements = [];\n    const addInteropStatement = (helperVariableName\x2C helper\x2C dependencyVariableName) => {\n        neededInteropHelpers.add(helper);\n        interopStatements.push(`${cnst} ${helperVariableName}${_}=${_}/*#__PURE__*/${helper}(${dependencyVariableName});`);\n    };\n    for (const { defaultVariableName\x2C imports\x2C importPath\x2C isChunk\x2C name\x2C namedExportsMode\x2C namespaceVariableName\x2C reexports } of dependencies) {\n        if (isChunk) {\n            for (const { imported\x2C reexported } of [\n                ...(imports || [])\x2C\n                ...(reexports || [])\n            ]) {\n                if (imported === '*' && reexported !== '*') {\n                    if (!namedExportsMode) {\n                        addInteropStatement(namespaceVariableName\x2C INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\x2C name);\n                    }\n                    break;\n                }\n            }\n        }\n        else {\n            const moduleInterop = interop(importPath);\n            let hasDefault = false;\n            let hasNamespace = false;\n            for (const { imported\x2C reexported } of [\n                ...(imports || [])\x2C\n                ...(reexports || [])\n            ]) {\n                let helper;\n                let variableName;\n                if (imported === 'default') {\n                    if (!hasDefault) {\n                        hasDefault = true;\n                        if (defaultVariableName !== namespaceVariableName) {\n                            variableName = defaultVariableName;\n                            helper = defaultInteropHelpersByInteropType[moduleInterop];\n                        }\n                    }\n                }\n                else if (imported === '*' && reexported !== '*' && !hasNamespace) {\n                    hasNamespace = true;\n                    helper = namespaceInteropHelpersByInteropType[moduleInterop];\n                    variableName = namespaceVariableName;\n                }\n                if (helper) {\n                    addInteropStatement(variableName\x2C helper\x2C name);\n                }\n            }\n        }\n    }\n    return `${getHelpersBlock(neededInteropHelpers\x2C accessedGlobals\x2C indent\x2C snippets\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag)}${interopStatements.length > 0 ? `${interopStatements.join(n)}${n}${n}` : ''}`;\n}\n\nfunction addJsExtension(name) {\n    return name.endsWith('.js') ? name : name + '.js';\n}\n\n// AMD resolution will only respect the AMD baseUrl if the .js extension is omitted.\n// The assumption is that this makes sense for all relative ids:\n// https://requirejs.org/docs/api.html#jsfiles\nfunction updateExtensionForRelativeAmdId(id\x2C forceJsExtensionForImports) {\n    if (id[0] !== '.') {\n        return id;\n    }\n    return forceJsExtensionForImports ? addJsExtension(id) : removeJsExtension(id);\n}\n\nconst require$$0 = [\n\x09"assert"\x2C\n\x09"async_hooks"\x2C\n\x09"buffer"\x2C\n\x09"child_process"\x2C\n\x09"cluster"\x2C\n\x09"console"\x2C\n\x09"constants"\x2C\n\x09"crypto"\x2C\n\x09"dgram"\x2C\n\x09"diagnostics_channel"\x2C\n\x09"dns"\x2C\n\x09"domain"\x2C\n\x09"events"\x2C\n\x09"fs"\x2C\n\x09"http"\x2C\n\x09"http2"\x2C\n\x09"https"\x2C\n\x09"inspector"\x2C\n\x09"module"\x2C\n\x09"net"\x2C\n\x09"os"\x2C\n\x09"path"\x2C\n\x09"perf_hooks"\x2C\n\x09"process"\x2C\n\x09"punycode"\x2C\n\x09"querystring"\x2C\n\x09"readline"\x2C\n\x09"repl"\x2C\n\x09"stream"\x2C\n\x09"string_decoder"\x2C\n\x09"timers"\x2C\n\x09"tls"\x2C\n\x09"trace_events"\x2C\n\x09"tty"\x2C\n\x09"url"\x2C\n\x09"util"\x2C\n\x09"v8"\x2C\n\x09"vm"\x2C\n\x09"wasi"\x2C\n\x09"worker_threads"\x2C\n\x09"zlib"\n];\n\nvar _static = require$$0;\n\nconst builtinModules = /*@__PURE__*/getDefaultExportFromCjs(_static);\n\nconst nodeBuiltins = new Set([\n    ...builtinModules\x2C\n    // TODO\n    // remove once builtin-modules includes PR: https://github.com/sindresorhus/builtin-modules/pull/17\n    'assert/strict'\x2C\n    'dns/promises'\x2C\n    'fs/promises'\x2C\n    'path/posix'\x2C\n    'path/win32'\x2C\n    'readline/promises'\x2C\n    'stream/consumers'\x2C\n    'stream/promises'\x2C\n    'stream/web'\x2C\n    'timers/promises'\x2C\n    'util/types'\n]);\nfunction warnOnBuiltins(log\x2C dependencies) {\n    const externalBuiltins = dependencies\n        .map(({ importPath }) => importPath)\n        .filter(importPath => nodeBuiltins.has(importPath) || importPath.startsWith('node:'));\n    if (externalBuiltins.length === 0)\n        return;\n    log(LOGLEVEL_WARN\x2C logMissingNodeBuiltins(externalBuiltins));\n}\n\nfunction amd(magicString\x2C { accessedGlobals\x2C dependencies\x2C exports\x2C hasDefaultExport\x2C hasExports\x2C id\x2C indent: t\x2C intro\x2C isEntryFacade\x2C isModuleFacade\x2C namedExportsMode\x2C log\x2C outro\x2C snippets }\x2C { amd\x2C esModule\x2C externalLiveBindings\x2C freeze\x2C interop\x2C namespaceToStringTag\x2C strict }) {\n    warnOnBuiltins(log\x2C dependencies);\n    const deps = dependencies.map(m => `'${updateExtensionForRelativeAmdId(m.importPath\x2C amd.forceJsExtensionForImports)}'`);\n    const parameters = dependencies.map(m => m.name);\n    const { n\x2C getNonArrowFunctionIntro\x2C _ } = snippets;\n    if (namedExportsMode && hasExports) {\n        parameters.unshift(`exports`);\n        deps.unshift(`'exports'`);\n    }\n    if (accessedGlobals.has('require')) {\n        parameters.unshift('require');\n        deps.unshift(`'require'`);\n    }\n    if (accessedGlobals.has('module')) {\n        parameters.unshift('module');\n        deps.unshift(`'module'`);\n    }\n    const completeAmdId = getCompleteAmdId(amd\x2C id);\n    const defineParameters = (completeAmdId ? `'${completeAmdId}'\x2C${_}` : ``) +\n        (deps.length > 0 ? `[${deps.join(`\x2C${_}`)}]\x2C${_}` : ``);\n    const useStrict = strict ? `${_}'use strict';` : '';\n    magicString.prepend(`${intro}${getInteropBlock(dependencies\x2C interop\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag\x2C accessedGlobals\x2C t\x2C snippets)}`);\n    const exportBlock = getExportBlock$1(exports\x2C dependencies\x2C namedExportsMode\x2C interop\x2C snippets\x2C t\x2C externalLiveBindings);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports\x2C isEntryFacade && (esModule === true || (esModule === 'if-default-prop' && hasDefaultExport))\x2C isModuleFacade && namespaceToStringTag\x2C snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .indent(t)\n        // factory function should be wrapped by parentheses to avoid lazy parsing\x2C\n        // cf. https://v8.dev/blog/preparser#pife\n        .prepend(`${amd.define}(${defineParameters}(${getNonArrowFunctionIntro(parameters\x2C {\n        isAsync: false\x2C\n        name: null\n    })}{${useStrict}${n}${n}`)\n        .append(`${n}${n}}));`);\n}\n\nfunction cjs(magicString\x2C { accessedGlobals\x2C dependencies\x2C exports\x2C hasDefaultExport\x2C hasExports\x2C indent: t\x2C intro\x2C isEntryFacade\x2C isModuleFacade\x2C namedExportsMode\x2C outro\x2C snippets }\x2C { compact\x2C esModule\x2C externalLiveBindings\x2C freeze\x2C interop\x2C namespaceToStringTag\x2C strict }) {\n    const { _\x2C n } = snippets;\n    const useStrict = strict ? `'use strict';${n}${n}` : '';\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports\x2C isEntryFacade && (esModule === true || (esModule === 'if-default-prop' && hasDefaultExport))\x2C isModuleFacade && namespaceToStringTag\x2C snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers += n + n;\n    }\n    const importBlock = getImportBlock$1(dependencies\x2C snippets\x2C compact);\n    const interopBlock = getInteropBlock(dependencies\x2C interop\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag\x2C accessedGlobals\x2C t\x2C snippets);\n    magicString.prepend(`${useStrict}${intro}${namespaceMarkers}${importBlock}${interopBlock}`);\n    const exportBlock = getExportBlock$1(exports\x2C dependencies\x2C namedExportsMode\x2C interop\x2C snippets\x2C t\x2C externalLiveBindings\x2C `module.exports${_}=${_}`);\n    magicString.append(`${exportBlock}${outro}`);\n}\nfunction getImportBlock$1(dependencies\x2C { _\x2C cnst\x2C n }\x2C compact) {\n    let importBlock = '';\n    let definingVariable = false;\n    for (const { importPath\x2C name\x2C reexports\x2C imports } of dependencies) {\n        if (!reexports && !imports) {\n            if (importBlock) {\n                importBlock += compact && !definingVariable ? '\x2C' : `;${n}`;\n            }\n            definingVariable = false;\n            importBlock += `require('${importPath}')`;\n        }\n        else {\n            importBlock += compact && definingVariable ? '\x2C' : `${importBlock ? `;${n}` : ''}${cnst} `;\n            definingVariable = true;\n            importBlock += `${name}${_}=${_}require('${importPath}')`;\n        }\n    }\n    if (importBlock) {\n        return `${importBlock};${n}${n}`;\n    }\n    return '';\n}\n\nfunction es(magicString\x2C { accessedGlobals\x2C indent: t\x2C intro\x2C outro\x2C dependencies\x2C exports\x2C snippets }\x2C { externalLiveBindings\x2C freeze\x2C namespaceToStringTag }) {\n    const { n } = snippets;\n    const importBlock = getImportBlock(dependencies\x2C snippets);\n    if (importBlock.length > 0)\n        intro += importBlock.join(n) + n + n;\n    intro += getHelpersBlock(null\x2C accessedGlobals\x2C t\x2C snippets\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag);\n    if (intro)\n        magicString.prepend(intro);\n    const exportBlock = getExportBlock(exports\x2C snippets);\n    if (exportBlock.length > 0)\n        magicString.append(n + n + exportBlock.join(n).trim());\n    if (outro)\n        magicString.append(outro);\n    magicString.trim();\n}\nfunction getImportBlock(dependencies\x2C { _ }) {\n    const importBlock = [];\n    for (const { importPath\x2C reexports\x2C imports\x2C name\x2C assertions } of dependencies) {\n        const assertion = assertions ? `${_}assert${_}${assertions}` : '';\n        const pathWithAssertion = `'${importPath}'${assertion};`;\n        if (!reexports && !imports) {\n            importBlock.push(`import${_}${pathWithAssertion}`);\n            continue;\n        }\n        if (imports) {\n            let defaultImport = null;\n            let starImport = null;\n            const importedNames = [];\n            for (const specifier of imports) {\n                if (specifier.imported === 'default') {\n                    defaultImport = specifier;\n                }\n                else if (specifier.imported === '*') {\n                    starImport = specifier;\n                }\n                else {\n                    importedNames.push(specifier);\n                }\n            }\n            if (starImport) {\n                importBlock.push(`import${_}*${_}as ${starImport.local} from${_}${pathWithAssertion}`);\n            }\n            if (defaultImport && importedNames.length === 0) {\n                importBlock.push(`import ${defaultImport.local} from${_}${pathWithAssertion}`);\n            }\n            else if (importedNames.length > 0) {\n                importBlock.push(`import ${defaultImport ? `${defaultImport.local}\x2C${_}` : ''}{${_}${importedNames\n                    .map(specifier => specifier.imported === specifier.local\n                    ? specifier.imported\n                    : `${specifier.imported} as ${specifier.local}`)\n                    .join(`\x2C${_}`)}${_}}${_}from${_}${pathWithAssertion}`);\n            }\n        }\n        if (reexports) {\n            let starExport = null;\n            const namespaceReexports = [];\n            const namedReexports = [];\n            for (const specifier of reexports) {\n                if (specifier.reexported === '*') {\n                    starExport = specifier;\n                }\n                else if (specifier.imported === '*') {\n                    namespaceReexports.push(specifier);\n                }\n                else {\n                    namedReexports.push(specifier);\n                }\n            }\n            if (starExport) {\n                importBlock.push(`export${_}*${_}from${_}${pathWithAssertion}`);\n            }\n            if (namespaceReexports.length > 0) {\n                if (!imports ||\n                    !imports.some(specifier => specifier.imported === '*' && specifier.local === name)) {\n                    importBlock.push(`import${_}*${_}as ${name} from${_}${pathWithAssertion}`);\n                }\n                for (const specifier of namespaceReexports) {\n                    importBlock.push(`export${_}{${_}${name === specifier.reexported ? name : `${name} as ${specifier.reexported}`} };`);\n                }\n            }\n            if (namedReexports.length > 0) {\n                importBlock.push(`export${_}{${_}${namedReexports\n                    .map(specifier => specifier.imported === specifier.reexported\n                    ? specifier.imported\n                    : `${specifier.imported} as ${specifier.reexported}`)\n                    .join(`\x2C${_}`)}${_}}${_}from${_}${pathWithAssertion}`);\n            }\n        }\n    }\n    return importBlock;\n}\nfunction getExportBlock(exports\x2C { _\x2C cnst }) {\n    const exportBlock = [];\n    const exportDeclaration = [];\n    for (const specifier of exports) {\n        if (specifier.expression) {\n            exportBlock.push(`${cnst} ${specifier.local}${_}=${_}${specifier.expression};`);\n        }\n        exportDeclaration.push(specifier.exported === specifier.local\n            ? specifier.local\n            : `${specifier.local} as ${specifier.exported}`);\n    }\n    if (exportDeclaration.length > 0) {\n        exportBlock.push(`export${_}{${_}${exportDeclaration.join(`\x2C${_}`)}${_}};`);\n    }\n    return exportBlock;\n}\n\nconst keypath = (keypath\x2C getPropertyAccess) => keypath.split('.').map(getPropertyAccess).join('');\n\nfunction setupNamespace(name\x2C root\x2C globals\x2C { _\x2C getPropertyAccess\x2C s }\x2C compact) {\n    const parts = name.split('.');\n    parts[0] = (typeof globals === 'function' ? globals(parts[0]) : globals[parts[0]]) || parts[0];\n    parts.pop();\n    let propertyPath = root;\n    return (parts\n        .map(part => {\n        propertyPath += getPropertyAccess(part);\n        return `${propertyPath}${_}=${_}${propertyPath}${_}||${_}{}${s}`;\n    })\n        .join(compact ? '\x2C' : '\\n') + (compact && parts.length > 0 ? ';' : '\\n'));\n}\nfunction assignToDeepVariable(deepName\x2C root\x2C globals\x2C assignment\x2C { _\x2C getPropertyAccess }) {\n    const parts = deepName.split('.');\n    parts[0] = (typeof globals === 'function' ? globals(parts[0]) : globals[parts[0]]) || parts[0];\n    const last = parts.pop();\n    let propertyPath = root;\n    let deepAssignment = [\n        ...parts.map(part => {\n            propertyPath += getPropertyAccess(part);\n            return `${propertyPath}${_}=${_}${propertyPath}${_}||${_}{}`;\n        })\x2C\n        `${propertyPath}${getPropertyAccess(last)}`\n    ].join(`\x2C${_}`) + `${_}=${_}${assignment}`;\n    if (parts.length > 0) {\n        deepAssignment = `(${deepAssignment})`;\n    }\n    return deepAssignment;\n}\n\nfunction trimEmptyImports(dependencies) {\n    let index = dependencies.length;\n    while (index--) {\n        const { imports\x2C reexports } = dependencies[index];\n        if (imports || reexports) {\n            return dependencies.slice(0\x2C index + 1);\n        }\n    }\n    return [];\n}\n\nfunction iife(magicString\x2C { accessedGlobals\x2C dependencies\x2C exports\x2C hasDefaultExport\x2C hasExports\x2C indent: t\x2C intro\x2C namedExportsMode\x2C log\x2C outro\x2C snippets }\x2C { compact\x2C esModule\x2C extend\x2C freeze\x2C externalLiveBindings\x2C globals\x2C interop\x2C name\x2C namespaceToStringTag\x2C strict }) {\n    const { _\x2C getNonArrowFunctionIntro\x2C getPropertyAccess\x2C n } = snippets;\n    const isNamespaced = name && name.includes('.');\n    const useVariableAssignment = !extend && !isNamespaced;\n    if (name && useVariableAssignment && !isLegal(name)) {\n        return error(logIllegalIdentifierAsName(name));\n    }\n    warnOnBuiltins(log\x2C dependencies);\n    const external = trimEmptyImports(dependencies);\n    const deps = external.map(dep => dep.globalName || 'null');\n    const parameters = external.map(m => m.name);\n    if (hasExports && !name) {\n        log(LOGLEVEL_WARN\x2C logMissingNameOptionForIifeExport());\n    }\n    if (namedExportsMode && hasExports) {\n        if (extend) {\n            deps.unshift(`this${keypath(name\x2C getPropertyAccess)}${_}=${_}this${keypath(name\x2C getPropertyAccess)}${_}||${_}{}`);\n            parameters.unshift('exports');\n        }\n        else {\n            deps.unshift('{}');\n            parameters.unshift('exports');\n        }\n    }\n    const useStrict = strict ? `${t}'use strict';${n}` : '';\n    const interopBlock = getInteropBlock(dependencies\x2C interop\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag\x2C accessedGlobals\x2C t\x2C snippets);\n    magicString.prepend(`${intro}${interopBlock}`);\n    let wrapperIntro = `(${getNonArrowFunctionIntro(parameters\x2C {\n        isAsync: false\x2C\n        name: null\n    })}{${n}${useStrict}${n}`;\n    if (hasExports) {\n        if (name && !(extend && namedExportsMode)) {\n            wrapperIntro =\n                (useVariableAssignment ? `var ${name}` : `this${keypath(name\x2C getPropertyAccess)}`) +\n                    `${_}=${_}${wrapperIntro}`;\n        }\n        if (isNamespaced) {\n            wrapperIntro = setupNamespace(name\x2C 'this'\x2C globals\x2C snippets\x2C compact) + wrapperIntro;\n        }\n    }\n    let wrapperOutro = `${n}${n}})(${deps.join(`\x2C${_}`)});`;\n    if (hasExports && !extend && namedExportsMode) {\n        wrapperOutro = `${n}${n}${t}return exports;${wrapperOutro}`;\n    }\n    const exportBlock = getExportBlock$1(exports\x2C dependencies\x2C namedExportsMode\x2C interop\x2C snippets\x2C t\x2C externalLiveBindings);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports\x2C esModule === true || (esModule === 'if-default-prop' && hasDefaultExport)\x2C namespaceToStringTag\x2C snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .indent(t)\n        .prepend(wrapperIntro)\n        .append(wrapperOutro);\n}\n\nfunction system(magicString\x2C { accessedGlobals\x2C dependencies\x2C exports\x2C hasExports\x2C indent: t\x2C intro\x2C snippets\x2C outro\x2C usesTopLevelAwait }\x2C { externalLiveBindings\x2C freeze\x2C name\x2C namespaceToStringTag\x2C strict\x2C systemNullSetters }) {\n    const { _\x2C getFunctionIntro\x2C getNonArrowFunctionIntro\x2C n\x2C s } = snippets;\n    const { importBindings\x2C setters\x2C starExcludes } = analyzeDependencies(dependencies\x2C exports\x2C t\x2C snippets);\n    const registeredName = name ? `'${name}'\x2C${_}` : '';\n    const wrapperParameters = accessedGlobals.has('module')\n        ? ['exports'\x2C 'module']\n        : hasExports\n            ? ['exports']\n            : [];\n    // factory function should be wrapped by parentheses to avoid lazy parsing\x2C\n    // cf. https://v8.dev/blog/preparser#pife\n    let wrapperStart = `System.register(${registeredName}[` +\n        dependencies.map(({ importPath }) => `'${importPath}'`).join(`\x2C${_}`) +\n        `]\x2C${_}(${getNonArrowFunctionIntro(wrapperParameters\x2C {\n            isAsync: false\x2C\n            name: null\n        })}{${n}${t}${strict ? "'use strict';" : ''}` +\n        getStarExcludesBlock(starExcludes\x2C t\x2C snippets) +\n        getImportBindingsBlock(importBindings\x2C t\x2C snippets) +\n        `${n}${t}return${_}{${setters.length > 0\n            ? `${n}${t}${t}setters:${_}[${setters\n                .map(setter => setter\n                ? `${getFunctionIntro(['module']\x2C {\n                    isAsync: false\x2C\n                    name: null\n                })}{${n}${t}${t}${t}${setter}${n}${t}${t}}`\n                : systemNullSetters\n                    ? `null`\n                    : `${getFunctionIntro([]\x2C { isAsync: false\x2C name: null })}{}`)\n                .join(`\x2C${_}`)}]\x2C`\n            : ''}${n}`;\n    wrapperStart += `${t}${t}execute:${_}(${getNonArrowFunctionIntro([]\x2C {\n        isAsync: usesTopLevelAwait\x2C\n        name: null\n    })}{${n}${n}`;\n    const wrapperEnd = `${t}${t}})${n}${t}}${s}${n}}));`;\n    magicString\n        .prepend(intro +\n        getHelpersBlock(null\x2C accessedGlobals\x2C t\x2C snippets\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag) +\n        getHoistedExportsBlock(exports\x2C t\x2C snippets))\n        .append(`${outro}${n}${n}` +\n        getSyntheticExportsBlock(exports\x2C t\x2C snippets) +\n        getMissingExportsBlock(exports\x2C t\x2C snippets))\n        .indent(`${t}${t}${t}`)\n        .append(wrapperEnd)\n        .prepend(wrapperStart);\n}\nfunction analyzeDependencies(dependencies\x2C exports\x2C t\x2C { _\x2C cnst\x2C getObject\x2C getPropertyAccess\x2C n }) {\n    const importBindings = [];\n    const setters = [];\n    let starExcludes = null;\n    for (const { imports\x2C reexports } of dependencies) {\n        const setter = [];\n        if (imports) {\n            for (const specifier of imports) {\n                importBindings.push(specifier.local);\n                if (specifier.imported === '*') {\n                    setter.push(`${specifier.local}${_}=${_}module;`);\n                }\n                else {\n                    setter.push(`${specifier.local}${_}=${_}module${getPropertyAccess(specifier.imported)};`);\n                }\n            }\n        }\n        if (reexports) {\n            const reexportedNames = [];\n            let hasStarReexport = false;\n            for (const { imported\x2C reexported } of reexports) {\n                if (reexported === '*') {\n                    hasStarReexport = true;\n                }\n                else {\n                    reexportedNames.push([\n                        reexported\x2C\n                        imported === '*' ? 'module' : `module${getPropertyAccess(imported)}`\n                    ]);\n                }\n            }\n            if (reexportedNames.length > 1 || hasStarReexport) {\n                const exportMapping = getObject(reexportedNames\x2C { lineBreakIndent: null });\n                if (hasStarReexport) {\n                    if (!starExcludes) {\n                        starExcludes = getStarExcludes({ dependencies\x2C exports });\n                    }\n                    setter.push(`${cnst} setter${_}=${_}${exportMapping};`\x2C `for${_}(${cnst} name in module)${_}{`\x2C `${t}if${_}(!_starExcludes[name])${_}setter[name]${_}=${_}module[name];`\x2C '}'\x2C 'exports(setter);');\n                }\n                else {\n                    setter.push(`exports(${exportMapping});`);\n                }\n            }\n            else {\n                const [key\x2C value] = reexportedNames[0];\n                setter.push(`exports('${key}'\x2C${_}${value});`);\n            }\n        }\n        setters.push(setter.join(`${n}${t}${t}${t}`));\n    }\n    return { importBindings\x2C setters\x2C starExcludes };\n}\nconst getStarExcludes = ({ dependencies\x2C exports }) => {\n    const starExcludes = new Set(exports.map(expt => expt.exported));\n    starExcludes.add('default');\n    for (const { reexports } of dependencies) {\n        if (reexports) {\n            for (const reexport of reexports) {\n                if (reexport.reexported !== '*')\n                    starExcludes.add(reexport.reexported);\n            }\n        }\n    }\n    return starExcludes;\n};\nconst getStarExcludesBlock = (starExcludes\x2C t\x2C { _\x2C cnst\x2C getObject\x2C n }) => starExcludes\n    ? `${n}${t}${cnst} _starExcludes${_}=${_}${getObject([...starExcludes].map(property => [property\x2C '1'])\x2C { lineBreakIndent: { base: t\x2C t } })};`\n    : '';\nconst getImportBindingsBlock = (importBindings\x2C t\x2C { _\x2C n }) => (importBindings.length > 0 ? `${n}${t}var ${importBindings.join(`\x2C${_}`)};` : '');\nconst getHoistedExportsBlock = (exports\x2C t\x2C snippets) => getExportsBlock(exports.filter(expt => expt.hoisted).map(expt => ({ name: expt.exported\x2C value: expt.local }))\x2C t\x2C snippets);\nfunction getExportsBlock(exports\x2C t\x2C { _\x2C n }) {\n    if (exports.length === 0) {\n        return '';\n    }\n    if (exports.length === 1) {\n        return `exports('${exports[0].name}'\x2C${_}${exports[0].value});${n}${n}`;\n    }\n    return (`exports({${n}` +\n        exports.map(({ name\x2C value }) => `${t}${name}:${_}${value}`).join(`\x2C${n}`) +\n        `${n}});${n}${n}`);\n}\nconst getSyntheticExportsBlock = (exports\x2C t\x2C snippets) => getExportsBlock(exports\n    .filter(expt => expt.expression)\n    .map(expt => ({ name: expt.exported\x2C value: expt.local }))\x2C t\x2C snippets);\nconst getMissingExportsBlock = (exports\x2C t\x2C snippets) => getExportsBlock(exports\n    .filter(expt => expt.local === MISSING_EXPORT_SHIM_VARIABLE)\n    .map(expt => ({ name: expt.exported\x2C value: MISSING_EXPORT_SHIM_VARIABLE }))\x2C t\x2C snippets);\n\nfunction globalProperty(name\x2C globalVariable\x2C getPropertyAccess) {\n    if (!name)\n        return 'null';\n    return `${globalVariable}${keypath(name\x2C getPropertyAccess)}`;\n}\nfunction safeAccess(name\x2C globalVariable\x2C { _\x2C getPropertyAccess }) {\n    let propertyPath = globalVariable;\n    return name\n        .split('.')\n        .map(part => (propertyPath += getPropertyAccess(part)))\n        .join(`${_}&&${_}`);\n}\nfunction umd(magicString\x2C { accessedGlobals\x2C dependencies\x2C exports\x2C hasDefaultExport\x2C hasExports\x2C id\x2C indent: t\x2C intro\x2C namedExportsMode\x2C log\x2C outro\x2C snippets }\x2C { amd\x2C compact\x2C esModule\x2C extend\x2C externalLiveBindings\x2C freeze\x2C interop\x2C name\x2C namespaceToStringTag\x2C globals\x2C noConflict\x2C strict }) {\n    const { _\x2C cnst\x2C getFunctionIntro\x2C getNonArrowFunctionIntro\x2C getPropertyAccess\x2C n\x2C s } = snippets;\n    const factoryVariable = compact ? 'f' : 'factory';\n    const globalVariable = compact ? 'g' : 'global';\n    if (hasExports && !name) {\n        return error(logMissingNameOptionForUmdExport());\n    }\n    warnOnBuiltins(log\x2C dependencies);\n    const amdDeps = dependencies.map(m => `'${updateExtensionForRelativeAmdId(m.importPath\x2C amd.forceJsExtensionForImports)}'`);\n    const cjsDeps = dependencies.map(m => `require('${m.importPath}')`);\n    const trimmedImports = trimEmptyImports(dependencies);\n    const globalDeps = trimmedImports.map(module => globalProperty(module.globalName\x2C globalVariable\x2C getPropertyAccess));\n    const factoryParameters = trimmedImports.map(m => m.name);\n    if (namedExportsMode && (hasExports || noConflict)) {\n        amdDeps.unshift(`'exports'`);\n        cjsDeps.unshift(`exports`);\n        globalDeps.unshift(assignToDeepVariable(name\x2C globalVariable\x2C globals\x2C `${extend ? `${globalProperty(name\x2C globalVariable\x2C getPropertyAccess)}${_}||${_}` : ''}{}`\x2C snippets));\n        factoryParameters.unshift('exports');\n    }\n    const completeAmdId = getCompleteAmdId(amd\x2C id);\n    const amdParameters = (completeAmdId ? `'${completeAmdId}'\x2C${_}` : ``) +\n        (amdDeps.length > 0 ? `[${amdDeps.join(`\x2C${_}`)}]\x2C${_}` : ``);\n    const define = amd.define;\n    const cjsExport = !namedExportsMode && hasExports ? `module.exports${_}=${_}` : ``;\n    const useStrict = strict ? `${_}'use strict';${n}` : ``;\n    let iifeExport;\n    if (noConflict) {\n        const noConflictExportsVariable = compact ? 'e' : 'exports';\n        let factory;\n        if (!namedExportsMode && hasExports) {\n            factory = `${cnst} ${noConflictExportsVariable}${_}=${_}${assignToDeepVariable(name\x2C globalVariable\x2C globals\x2C `${factoryVariable}(${globalDeps.join(`\x2C${_}`)})`\x2C snippets)};`;\n        }\n        else {\n            const module = globalDeps.shift();\n            factory =\n                `${cnst} ${noConflictExportsVariable}${_}=${_}${module};${n}` +\n                    `${t}${t}${factoryVariable}(${[noConflictExportsVariable\x2C ...globalDeps].join(`\x2C${_}`)});`;\n        }\n        iifeExport =\n            `(${getFunctionIntro([]\x2C { isAsync: false\x2C name: null })}{${n}` +\n                `${t}${t}${cnst} current${_}=${_}${safeAccess(name\x2C globalVariable\x2C snippets)};${n}` +\n                `${t}${t}${factory}${n}` +\n                `${t}${t}${noConflictExportsVariable}.noConflict${_}=${_}${getFunctionIntro([]\x2C {\n                    isAsync: false\x2C\n                    name: null\n                })}{${_}` +\n                `${globalProperty(name\x2C globalVariable\x2C getPropertyAccess)}${_}=${_}current;${_}return ${noConflictExportsVariable}${s}${_}};${n}` +\n                `${t}})()`;\n    }\n    else {\n        iifeExport = `${factoryVariable}(${globalDeps.join(`\x2C${_}`)})`;\n        if (!namedExportsMode && hasExports) {\n            iifeExport = assignToDeepVariable(name\x2C globalVariable\x2C globals\x2C iifeExport\x2C snippets);\n        }\n    }\n    const iifeNeedsGlobal = hasExports || (noConflict && namedExportsMode) || globalDeps.length > 0;\n    const wrapperParameters = [factoryVariable];\n    if (iifeNeedsGlobal) {\n        wrapperParameters.unshift(globalVariable);\n    }\n    const globalArgument = iifeNeedsGlobal ? `this\x2C${_}` : '';\n    const iifeStart = iifeNeedsGlobal\n        ? `(${globalVariable}${_}=${_}typeof globalThis${_}!==${_}'undefined'${_}?${_}globalThis${_}:${_}${globalVariable}${_}||${_}self\x2C${_}`\n        : '';\n    const iifeEnd = iifeNeedsGlobal ? ')' : '';\n    const cjsIntro = iifeNeedsGlobal\n        ? `${t}typeof exports${_}===${_}'object'${_}&&${_}typeof module${_}!==${_}'undefined'${_}?` +\n            `${_}${cjsExport}${factoryVariable}(${cjsDeps.join(`\x2C${_}`)})${_}:${n}`\n        : '';\n    const wrapperIntro = `(${getNonArrowFunctionIntro(wrapperParameters\x2C { isAsync: false\x2C name: null })}{${n}` +\n        cjsIntro +\n        `${t}typeof ${define}${_}===${_}'function'${_}&&${_}${define}.amd${_}?${_}${define}(${amdParameters}${factoryVariable})${_}:${n}` +\n        `${t}${iifeStart}${iifeExport}${iifeEnd};${n}` +\n        // factory function should be wrapped by parentheses to avoid lazy parsing\x2C\n        // cf. https://v8.dev/blog/preparser#pife\n        `})(${globalArgument}(${getNonArrowFunctionIntro(factoryParameters\x2C {\n            isAsync: false\x2C\n            name: null\n        })}{${useStrict}${n}`;\n    const wrapperOutro = n + n + '}));';\n    magicString.prepend(`${intro}${getInteropBlock(dependencies\x2C interop\x2C externalLiveBindings\x2C freeze\x2C namespaceToStringTag\x2C accessedGlobals\x2C t\x2C snippets)}`);\n    const exportBlock = getExportBlock$1(exports\x2C dependencies\x2C namedExportsMode\x2C interop\x2C snippets\x2C t\x2C externalLiveBindings);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports\x2C esModule === true || (esModule === 'if-default-prop' && hasDefaultExport)\x2C namespaceToStringTag\x2C snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .trim()\n        .indent(t)\n        .append(wrapperOutro)\n        .prepend(wrapperIntro);\n}\n\nconst finalisers = { amd\x2C cjs\x2C es\x2C iife\x2C system\x2C umd };\n\nconst concatSeparator = (out\x2C next) => (next ? `${out}\\n${next}` : out);\nconst concatDblSeparator = (out\x2C next) => (next ? `${out}\\n\\n${next}` : out);\nasync function createAddons(options\x2C outputPluginDriver\x2C chunk) {\n    try {\n        let [banner\x2C footer\x2C intro\x2C outro] = await Promise.all([\n            outputPluginDriver.hookReduceValue('banner'\x2C options.banner(chunk)\x2C [chunk]\x2C concatSeparator)\x2C\n            outputPluginDriver.hookReduceValue('footer'\x2C options.footer(chunk)\x2C [chunk]\x2C concatSeparator)\x2C\n            outputPluginDriver.hookReduceValue('intro'\x2C options.intro(chunk)\x2C [chunk]\x2C concatDblSeparator)\x2C\n            outputPluginDriver.hookReduceValue('outro'\x2C options.outro(chunk)\x2C [chunk]\x2C concatDblSeparator)\n        ]);\n        if (intro)\n            intro += '\\n\\n';\n        if (outro)\n            outro = `\\n\\n${outro}`;\n        if (banner)\n            banner += '\\n';\n        if (footer)\n            footer = '\\n' + footer;\n        return { banner\x2C footer\x2C intro\x2C outro };\n    }\n    catch (error_) {\n        return error(logAddonNotGenerated(error_.message\x2C error_.hook\x2C error_.plugin));\n    }\n}\n\nconst DECONFLICT_IMPORTED_VARIABLES_BY_FORMAT = {\n    amd: deconflictImportsOther\x2C\n    cjs: deconflictImportsOther\x2C\n    es: deconflictImportsEsmOrSystem\x2C\n    iife: deconflictImportsOther\x2C\n    system: deconflictImportsEsmOrSystem\x2C\n    umd: deconflictImportsOther\n};\nfunction deconflictChunk(modules\x2C dependenciesToBeDeconflicted\x2C imports\x2C usedNames\x2C format\x2C interop\x2C preserveModules\x2C externalLiveBindings\x2C chunkByModule\x2C externalChunkByModule\x2C syntheticExports\x2C exportNamesByVariable\x2C accessedGlobalsByScope\x2C includedNamespaces) {\n    const reversedModules = [...modules].reverse();\n    for (const module of reversedModules) {\n        module.scope.addUsedOutsideNames(usedNames\x2C format\x2C exportNamesByVariable\x2C accessedGlobalsByScope);\n    }\n    deconflictTopLevelVariables(usedNames\x2C reversedModules\x2C includedNamespaces);\n    DECONFLICT_IMPORTED_VARIABLES_BY_FORMAT[format](usedNames\x2C imports\x2C dependenciesToBeDeconflicted\x2C interop\x2C preserveModules\x2C externalLiveBindings\x2C chunkByModule\x2C externalChunkByModule\x2C syntheticExports);\n    for (const module of reversedModules) {\n        module.scope.deconflict(format\x2C exportNamesByVariable\x2C accessedGlobalsByScope);\n    }\n}\nfunction deconflictImportsEsmOrSystem(usedNames\x2C imports\x2C dependenciesToBeDeconflicted\x2C _interop\x2C preserveModules\x2C _externalLiveBindings\x2C chunkByModule\x2C externalChunkByModule\x2C syntheticExports) {\n    // This is needed for namespace reexports\n    for (const dependency of dependenciesToBeDeconflicted.dependencies) {\n        if (preserveModules || dependency instanceof ExternalChunk) {\n            dependency.variableName = getSafeName(dependency.suggestedVariableName\x2C usedNames\x2C null);\n        }\n    }\n    for (const variable of imports) {\n        const module = variable.module;\n        const name = variable.name;\n        if (variable.isNamespace && (preserveModules || module instanceof ExternalModule)) {\n            variable.setRenderNames(null\x2C (module instanceof ExternalModule\n                ? externalChunkByModule.get(module)\n                : chunkByModule.get(module)).variableName);\n        }\n        else if (module instanceof ExternalModule && name === 'default') {\n            variable.setRenderNames(null\x2C getSafeName([...module.exportedVariables].some(([exportedVariable\x2C exportedName]) => exportedName === '*' && exportedVariable.included)\n                ? module.suggestedVariableName + '__default'\n                : module.suggestedVariableName\x2C usedNames\x2C variable.forbiddenNames));\n        }\n        else {\n            variable.setRenderNames(null\x2C getSafeName(name\x2C usedNames\x2C variable.forbiddenNames));\n        }\n    }\n    for (const variable of syntheticExports) {\n        variable.setRenderNames(null\x2C getSafeName(variable.name\x2C usedNames\x2C variable.forbiddenNames));\n    }\n}\nfunction deconflictImportsOther(usedNames\x2C imports\x2C { deconflictedDefault\x2C deconflictedNamespace\x2C dependencies }\x2C interop\x2C preserveModules\x2C externalLiveBindings\x2C chunkByModule\x2C externalChunkByModule) {\n    for (const chunk of dependencies) {\n        chunk.variableName = getSafeName(chunk.suggestedVariableName\x2C usedNames\x2C null);\n    }\n    for (const chunk of deconflictedNamespace) {\n        chunk.namespaceVariableName = getSafeName(`${chunk.suggestedVariableName}__namespace`\x2C usedNames\x2C null);\n    }\n    for (const externalModule of deconflictedDefault) {\n        externalModule.defaultVariableName =\n            deconflictedNamespace.has(externalModule) &&\n                canDefaultBeTakenFromNamespace(interop(externalModule.id)\x2C externalLiveBindings)\n                ? externalModule.namespaceVariableName\n                : getSafeName(`${externalModule.suggestedVariableName}__default`\x2C usedNames\x2C null);\n    }\n    for (const variable of imports) {\n        const module = variable.module;\n        if (module instanceof ExternalModule) {\n            const chunk = externalChunkByModule.get(module);\n            const name = variable.name;\n            if (name === 'default') {\n                const moduleInterop = interop(module.id);\n                const variableName = defaultInteropHelpersByInteropType[moduleInterop]\n                    ? chunk.defaultVariableName\n                    : chunk.variableName;\n                if (isDefaultAProperty(moduleInterop\x2C externalLiveBindings)) {\n                    variable.setRenderNames(variableName\x2C 'default');\n                }\n                else {\n                    variable.setRenderNames(null\x2C variableName);\n                }\n            }\n            else if (name === '*') {\n                variable.setRenderNames(null\x2C namespaceInteropHelpersByInteropType[interop(module.id)]\n                    ? chunk.namespaceVariableName\n                    : chunk.variableName);\n            }\n            else {\n                // if the second parameter is `null`\x2C it uses its "name" for the property name\n                variable.setRenderNames(chunk.variableName\x2C null);\n            }\n        }\n        else {\n            const chunk = chunkByModule.get(module);\n            if (preserveModules && variable.isNamespace) {\n                variable.setRenderNames(null\x2C chunk.exportMode === 'default' ? chunk.namespaceVariableName : chunk.variableName);\n            }\n            else if (chunk.exportMode === 'default') {\n                variable.setRenderNames(null\x2C chunk.variableName);\n            }\n            else {\n                variable.setRenderNames(chunk.variableName\x2C chunk.getVariableExportName(variable));\n            }\n        }\n    }\n}\nfunction deconflictTopLevelVariables(usedNames\x2C modules\x2C includedNamespaces) {\n    for (const module of modules) {\n        for (const variable of module.scope.variables.values()) {\n            if (variable.included &&\n                // this will only happen for exports in some formats\n                !(variable.renderBaseName ||\n                    (variable instanceof ExportDefaultVariable && variable.getOriginalVariable() !== variable))) {\n                variable.setRenderNames(null\x2C getSafeName(variable.name\x2C usedNames\x2C variable.forbiddenNames));\n            }\n        }\n        if (includedNamespaces.has(module)) {\n            const namespace = module.namespace;\n            namespace.setRenderNames(null\x2C getSafeName(namespace.name\x2C usedNames\x2C namespace.forbiddenNames));\n        }\n    }\n}\n\nfunction assignExportsToMangledNames(exports\x2C exportsByName\x2C exportNamesByVariable) {\n    let nameIndex = 0;\n    for (const variable of exports) {\n        let [exportName] = variable.name;\n        if (exportsByName.has(exportName)) {\n            do {\n                exportName = toBase64(++nameIndex);\n                // skip past leading number identifiers\n                if (exportName.charCodeAt(0) === 49 /* '1' */) {\n                    nameIndex += 9 * 64 ** (exportName.length - 1);\n                    exportName = toBase64(nameIndex);\n                }\n            } while (RESERVED_NAMES$1.has(exportName) || exportsByName.has(exportName));\n        }\n        exportsByName.set(exportName\x2C variable);\n        exportNamesByVariable.set(variable\x2C [exportName]);\n    }\n}\nfunction assignExportsToNames(exports\x2C exportsByName\x2C exportNamesByVariable) {\n    for (const variable of exports) {\n        let nameIndex = 0;\n        let exportName = variable.name;\n        while (exportsByName.has(exportName)) {\n            exportName = variable.name + '$' + ++nameIndex;\n        }\n        exportsByName.set(exportName\x2C variable);\n        exportNamesByVariable.set(variable\x2C [exportName]);\n    }\n}\n\nfunction getExportMode(chunk\x2C { exports: exportMode\x2C name\x2C format }\x2C facadeModuleId\x2C log) {\n    const exportKeys = chunk.getExportNames();\n    if (exportMode === 'default') {\n        if (exportKeys.length !== 1 || exportKeys[0] !== 'default') {\n            return error(logIncompatibleExportOptionValue('default'\x2C exportKeys\x2C facadeModuleId));\n        }\n    }\n    else if (exportMode === 'none' && exportKeys.length > 0) {\n        return error(logIncompatibleExportOptionValue('none'\x2C exportKeys\x2C facadeModuleId));\n    }\n    if (exportMode === 'auto') {\n        if (exportKeys.length === 0) {\n            exportMode = 'none';\n        }\n        else if (exportKeys.length === 1 && exportKeys[0] === 'default') {\n            exportMode = 'default';\n        }\n        else {\n            if (format !== 'es' && format !== 'system' && exportKeys.includes('default')) {\n                log(LOGLEVEL_WARN\x2C logMixedExport(facadeModuleId\x2C name));\n            }\n            exportMode = 'named';\n        }\n    }\n    return exportMode;\n}\n\nfunction guessIndentString(code) {\n    const lines = code.split('\\n');\n    const tabbed = lines.filter(line => /^\\t+/.test(line));\n    const spaced = lines.filter(line => /^ {2\x2C}/.test(line));\n    if (tabbed.length === 0 && spaced.length === 0) {\n        return null;\n    }\n    // More lines tabbed than spaced? Assume tabs\x2C and\n    // default to tabs in the case of a tie (or nothing\n    // to go on)\n    if (tabbed.length >= spaced.length) {\n        return '\\t';\n    }\n    // Otherwise\x2C we need to guess the multiple\n    const min = spaced.reduce((previous\x2C current) => {\n        const numberSpaces = /^ +/.exec(current)[0].length;\n        return Math.min(numberSpaces\x2C previous);\n    }\x2C Infinity);\n    return ' '.repeat(min);\n}\nfunction getIndentString(modules\x2C options) {\n    if (options.indent !== true)\n        return options.indent;\n    for (const module of modules) {\n        const indent = guessIndentString(module.originalCode);\n        if (indent !== null)\n            return indent;\n    }\n    return '\\t';\n}\n\nfunction getStaticDependencies(chunk\x2C orderedModules\x2C chunkByModule\x2C externalChunkByModule) {\n    const staticDependencyBlocks = [];\n    const handledDependencies = new Set();\n    for (let modulePos = orderedModules.length - 1; modulePos >= 0; modulePos--) {\n        const module = orderedModules[modulePos];\n        if (!handledDependencies.has(module)) {\n            const staticDependencies = [];\n            addStaticDependencies(module\x2C staticDependencies\x2C handledDependencies\x2C chunk\x2C chunkByModule\x2C externalChunkByModule);\n            staticDependencyBlocks.unshift(staticDependencies);\n        }\n    }\n    const dependencies = new Set();\n    for (const block of staticDependencyBlocks) {\n        for (const dependency of block) {\n            dependencies.add(dependency);\n        }\n    }\n    return dependencies;\n}\nfunction addStaticDependencies(module\x2C staticDependencies\x2C handledModules\x2C chunk\x2C chunkByModule\x2C externalChunkByModule) {\n    const dependencies = module.getDependenciesToBeIncluded();\n    for (const dependency of dependencies) {\n        if (dependency instanceof ExternalModule) {\n            staticDependencies.push(externalChunkByModule.get(dependency));\n            continue;\n        }\n        const dependencyChunk = chunkByModule.get(dependency);\n        if (dependencyChunk !== chunk) {\n            staticDependencies.push(dependencyChunk);\n            continue;\n        }\n        if (!handledModules.has(dependency)) {\n            handledModules.add(dependency);\n            addStaticDependencies(dependency\x2C staticDependencies\x2C handledModules\x2C chunk\x2C chunkByModule\x2C externalChunkByModule);\n        }\n    }\n}\n\n// Four random characters from the private use area to minimize risk of\n// conflicts\nconst hashPlaceholderLeft = '!~{';\nconst hashPlaceholderRight = '}~';\nconst hashPlaceholderOverhead = hashPlaceholderLeft.length + hashPlaceholderRight.length;\n// This is the size of a sha256\nconst maxHashSize = 64;\nconst defaultHashSize = 8;\nconst getHashPlaceholderGenerator = () => {\n    let nextIndex = 0;\n    return (optionName\x2C hashSize = defaultHashSize) => {\n        if (hashSize > maxHashSize) {\n            return error(logFailedValidation(`Hashes cannot be longer than ${maxHashSize} characters\x2C received ${hashSize}. Check the "${optionName}" option.`));\n        }\n        const placeholder = `${hashPlaceholderLeft}${toBase64(++nextIndex).padStart(hashSize - hashPlaceholderOverhead\x2C '0')}${hashPlaceholderRight}`;\n        if (placeholder.length > hashSize) {\n            return error(logFailedValidation(`To generate hashes for this number of chunks (currently ${nextIndex})\x2C you need a minimum hash size of ${placeholder.length}\x2C received ${hashSize}. Check the "${optionName}" option.`));\n        }\n        return placeholder;\n    };\n};\nconst REPLACER_REGEX = new RegExp(`${hashPlaceholderLeft}[0-9a-zA-Z_$]{1\x2C${maxHashSize - hashPlaceholderOverhead}}${hashPlaceholderRight}`\x2C 'g');\nconst replacePlaceholders = (code\x2C hashesByPlaceholder) => code.replace(REPLACER_REGEX\x2C placeholder => hashesByPlaceholder.get(placeholder) || placeholder);\nconst replaceSinglePlaceholder = (code\x2C placeholder\x2C value) => code.replace(REPLACER_REGEX\x2C match => (match === placeholder ? value : match));\nconst replacePlaceholdersWithDefaultAndGetContainedPlaceholders = (code\x2C placeholders) => {\n    const containedPlaceholders = new Set();\n    const transformedCode = code.replace(REPLACER_REGEX\x2C placeholder => {\n        if (placeholders.has(placeholder)) {\n            containedPlaceholders.add(placeholder);\n            return `${hashPlaceholderLeft}${'0'.repeat(placeholder.length - hashPlaceholderOverhead)}${hashPlaceholderRight}`;\n        }\n        return placeholder;\n    });\n    return { containedPlaceholders\x2C transformedCode };\n};\n\nconst lowercaseBundleKeys = Symbol('bundleKeys');\nconst FILE_PLACEHOLDER = {\n    type: 'placeholder'\n};\nconst getOutputBundle = (outputBundleBase) => {\n    const reservedLowercaseBundleKeys = new Set();\n    return new Proxy(outputBundleBase\x2C {\n        deleteProperty(target\x2C key) {\n            if (typeof key === 'string') {\n                reservedLowercaseBundleKeys.delete(key.toLowerCase());\n            }\n            return Reflect.deleteProperty(target\x2C key);\n        }\x2C\n        get(target\x2C key) {\n            if (key === lowercaseBundleKeys) {\n                return reservedLowercaseBundleKeys;\n            }\n            return Reflect.get(target\x2C key);\n        }\x2C\n        set(target\x2C key\x2C value) {\n            if (typeof key === 'string') {\n                reservedLowercaseBundleKeys.add(key.toLowerCase());\n            }\n            return Reflect.set(target\x2C key\x2C value);\n        }\n    });\n};\nconst removeUnreferencedAssets = (outputBundle) => {\n    const unreferencedAssets = new Set();\n    const bundleEntries = Object.values(outputBundle);\n    for (const asset of bundleEntries) {\n        asset.type === 'asset' && asset.needsCodeReference && unreferencedAssets.add(asset.fileName);\n    }\n    for (const chunk of bundleEntries) {\n        if (chunk.type === 'chunk') {\n            for (const referencedFile of chunk.referencedFiles) {\n                unreferencedAssets.has(referencedFile) && unreferencedAssets.delete(referencedFile);\n            }\n        }\n    }\n    for (const file of unreferencedAssets) {\n        delete outputBundle[file];\n    }\n};\n\nfunction renderNamePattern(pattern\x2C patternName\x2C replacements) {\n    if (isPathFragment(pattern))\n        return error(logFailedValidation(`Invalid pattern "${pattern}" for "${patternName}"\x2C patterns can be neither absolute nor relative paths. If you want your files to be stored in a subdirectory\x2C write its name without a leading slash like this: subdirectory/pattern.`));\n    return pattern.replace(/\\[(\\w+)(:\\d+)?]/g\x2C (_match\x2C type\x2C size) => {\n        if (!replacements.hasOwnProperty(type) || (size && type !== 'hash')) {\n            return error(logFailedValidation(`"[${type}${size || ''}]" is not a valid placeholder in the "${patternName}" pattern.`));\n        }\n        const replacement = replacements[type](size && Number.parseInt(size.slice(1)));\n        if (isPathFragment(replacement))\n            return error(logFailedValidation(`Invalid substitution "${replacement}" for placeholder "[${type}]" in "${patternName}" pattern\x2C can be neither absolute nor relative path.`));\n        return replacement;\n    });\n}\nfunction makeUnique(name\x2C { [lowercaseBundleKeys]: reservedLowercaseBundleKeys }) {\n    if (!reservedLowercaseBundleKeys.has(name.toLowerCase()))\n        return name;\n    const extension = extname(name);\n    name = name.slice(0\x2C Math.max(0\x2C name.length - extension.length));\n    let uniqueName\x2C uniqueIndex = 1;\n    while (reservedLowercaseBundleKeys.has((uniqueName = name + ++uniqueIndex + extension).toLowerCase()))\n        ;\n    return uniqueName;\n}\n\nconst NON_ASSET_EXTENSIONS = new Set([\n    '.js'\x2C\n    '.jsx'\x2C\n    '.ts'\x2C\n    '.tsx'\x2C\n    '.mjs'\x2C\n    '.mts'\x2C\n    '.cjs'\x2C\n    '.cts'\n]);\nfunction getGlobalName(chunk\x2C globals\x2C hasExports\x2C log) {\n    const globalName = typeof globals === 'function' ? globals(chunk.id) : globals[chunk.id];\n    if (globalName) {\n        return globalName;\n    }\n    if (hasExports) {\n        log(LOGLEVEL_WARN\x2C logMissingGlobalName(chunk.id\x2C chunk.variableName));\n        return chunk.variableName;\n    }\n}\nclass Chunk {\n    constructor(orderedModules\x2C inputOptions\x2C outputOptions\x2C unsetOptions\x2C pluginDriver\x2C modulesById\x2C chunkByModule\x2C externalChunkByModule\x2C facadeChunkByModule\x2C includedNamespaces\x2C manualChunkAlias\x2C getPlaceholder\x2C bundle\x2C inputBase\x2C snippets) {\n        this.orderedModules = orderedModules;\n        this.inputOptions = inputOptions;\n        this.outputOptions = outputOptions;\n        this.unsetOptions = unsetOptions;\n        this.pluginDriver = pluginDriver;\n        this.modulesById = modulesById;\n        this.chunkByModule = chunkByModule;\n        this.externalChunkByModule = externalChunkByModule;\n        this.facadeChunkByModule = facadeChunkByModule;\n        this.includedNamespaces = includedNamespaces;\n        this.manualChunkAlias = manualChunkAlias;\n        this.getPlaceholder = getPlaceholder;\n        this.bundle = bundle;\n        this.inputBase = inputBase;\n        this.snippets = snippets;\n        this.entryModules = [];\n        this.exportMode = 'named';\n        this.facadeModule = null;\n        this.namespaceVariableName = '';\n        this.variableName = '';\n        this.accessedGlobalsByScope = new Map();\n        this.dependencies = new Set();\n        this.dynamicEntryModules = [];\n        this.dynamicName = null;\n        this.exportNamesByVariable = new Map();\n        this.exports = new Set();\n        this.exportsByName = new Map();\n        this.fileName = null;\n        this.implicitEntryModules = [];\n        this.implicitlyLoadedBefore = new Set();\n        this.imports = new Set();\n        this.includedDynamicImports = null;\n        this.includedReexportsByModule = new Map();\n        // This may be updated in the constructor\n        this.isEmpty = true;\n        this.name = null;\n        this.needsExportsShim = false;\n        this.preRenderedChunkInfo = null;\n        this.preliminaryFileName = null;\n        this.renderedChunkInfo = null;\n        this.renderedDependencies = null;\n        this.renderedModules = Object.create(null);\n        this.sortedExportNames = null;\n        this.strictFacade = false;\n        this.execIndex = orderedModules.length > 0 ? orderedModules[0].execIndex : Infinity;\n        const chunkModules = new Set(orderedModules);\n        for (const module of orderedModules) {\n            chunkByModule.set(module\x2C this);\n            if (module.namespace.included && !outputOptions.preserveModules) {\n                includedNamespaces.add(module);\n            }\n            if (this.isEmpty && module.isIncluded()) {\n                this.isEmpty = false;\n            }\n            if (module.info.isEntry || outputOptions.preserveModules) {\n                this.entryModules.push(module);\n            }\n            for (const importer of module.includedDynamicImporters) {\n                if (!chunkModules.has(importer)) {\n                    this.dynamicEntryModules.push(module);\n                    // Modules with synthetic exports need an artificial namespace for dynamic imports\n                    if (module.info.syntheticNamedExports) {\n                        includedNamespaces.add(module);\n                        this.exports.add(module.namespace);\n                    }\n                }\n            }\n            if (module.implicitlyLoadedAfter.size > 0) {\n                this.implicitEntryModules.push(module);\n            }\n        }\n        this.suggestedVariableName = makeLegal(this.generateVariableName());\n    }\n    static generateFacade(inputOptions\x2C outputOptions\x2C unsetOptions\x2C pluginDriver\x2C modulesById\x2C chunkByModule\x2C externalChunkByModule\x2C facadeChunkByModule\x2C includedNamespaces\x2C facadedModule\x2C facadeName\x2C getPlaceholder\x2C bundle\x2C inputBase\x2C snippets) {\n        const chunk = new Chunk([]\x2C inputOptions\x2C outputOptions\x2C unsetOptions\x2C pluginDriver\x2C modulesById\x2C chunkByModule\x2C externalChunkByModule\x2C facadeChunkByModule\x2C includedNamespaces\x2C null\x2C getPlaceholder\x2C bundle\x2C inputBase\x2C snippets);\n        chunk.assignFacadeName(facadeName\x2C facadedModule);\n        if (!facadeChunkByModule.has(facadedModule)) {\n            facadeChunkByModule.set(facadedModule\x2C chunk);\n        }\n        for (const dependency of facadedModule.getDependenciesToBeIncluded()) {\n            chunk.dependencies.add(dependency instanceof Module\n                ? chunkByModule.get(dependency)\n                : externalChunkByModule.get(dependency));\n        }\n        if (!chunk.dependencies.has(chunkByModule.get(facadedModule)) &&\n            facadedModule.info.moduleSideEffects &&\n            facadedModule.hasEffects()) {\n            chunk.dependencies.add(chunkByModule.get(facadedModule));\n        }\n        chunk.ensureReexportsAreAvailableForModule(facadedModule);\n        chunk.facadeModule = facadedModule;\n        chunk.strictFacade = true;\n        return chunk;\n    }\n    canModuleBeFacade(module\x2C exposedVariables) {\n        const moduleExportNamesByVariable = module.getExportNamesByVariable();\n        // All exports of this chunk need to be exposed by the candidate module\n        for (const exposedVariable of this.exports) {\n            if (!moduleExportNamesByVariable.has(exposedVariable)) {\n                return false;\n            }\n        }\n        // Additionally\x2C we need to expose namespaces of dynamic entries that are not the facade module and exports from other entry modules\n        for (const exposedVariable of exposedVariables) {\n            if (!(exposedVariable.module === module ||\n                moduleExportNamesByVariable.has(exposedVariable) ||\n                (exposedVariable instanceof SyntheticNamedExportVariable &&\n                    moduleExportNamesByVariable.has(exposedVariable.getBaseVariable())))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    finalizeChunk(code\x2C map\x2C hashesByPlaceholder) {\n        const renderedChunkInfo = this.getRenderedChunkInfo();\n        const finalize = (code) => replacePlaceholders(code\x2C hashesByPlaceholder);\n        const preliminaryFileName = renderedChunkInfo.fileName;\n        const fileName = (this.fileName = finalize(preliminaryFileName));\n        return {\n            ...renderedChunkInfo\x2C\n            code\x2C\n            dynamicImports: renderedChunkInfo.dynamicImports.map(finalize)\x2C\n            fileName\x2C\n            implicitlyLoadedBefore: renderedChunkInfo.implicitlyLoadedBefore.map(finalize)\x2C\n            importedBindings: Object.fromEntries(Object.entries(renderedChunkInfo.importedBindings).map(([fileName\x2C bindings]) => [\n                finalize(fileName)\x2C\n                bindings\n            ]))\x2C\n            imports: renderedChunkInfo.imports.map(finalize)\x2C\n            map\x2C\n            preliminaryFileName\x2C\n            referencedFiles: renderedChunkInfo.referencedFiles.map(finalize)\n        };\n    }\n    generateExports() {\n        this.sortedExportNames = null;\n        const remainingExports = new Set(this.exports);\n        if (this.facadeModule !== null &&\n            (this.facadeModule.preserveSignature !== false || this.strictFacade)) {\n            const exportNamesByVariable = this.facadeModule.getExportNamesByVariable();\n            for (const [variable\x2C exportNames] of exportNamesByVariable) {\n                this.exportNamesByVariable.set(variable\x2C [...exportNames]);\n                for (const exportName of exportNames) {\n                    this.exportsByName.set(exportName\x2C variable);\n                }\n                remainingExports.delete(variable);\n            }\n        }\n        if (this.outputOptions.minifyInternalExports) {\n            assignExportsToMangledNames(remainingExports\x2C this.exportsByName\x2C this.exportNamesByVariable);\n        }\n        else {\n            assignExportsToNames(remainingExports\x2C this.exportsByName\x2C this.exportNamesByVariable);\n        }\n        if (this.outputOptions.preserveModules || (this.facadeModule && this.facadeModule.info.isEntry))\n            this.exportMode = getExportMode(this\x2C this.outputOptions\x2C this.facadeModule.id\x2C this.inputOptions.onLog);\n    }\n    generateFacades() {\n        const facades = [];\n        const entryModules = new Set([...this.entryModules\x2C ...this.implicitEntryModules]);\n        const exposedVariables = new Set(this.dynamicEntryModules.map(({ namespace }) => namespace));\n        for (const module of entryModules) {\n            if (module.preserveSignature) {\n                for (const exportedVariable of module.getExportNamesByVariable().keys()) {\n                    // We need to expose all entry exports from this chunk\n                    if (this.chunkByModule.get(exportedVariable.module) === this) {\n                        exposedVariables.add(exportedVariable);\n                    }\n                }\n            }\n        }\n        for (const module of entryModules) {\n            // eslint-disable-next-line unicorn/prefer-spread\n            const requiredFacades = Array.from(new Set(module.chunkNames.filter(({ isUserDefined }) => isUserDefined).map(({ name }) => name))\x2C \n            // mapping must run after Set 'name' dedupe\n            name => ({\n                name\n            }));\n            if (requiredFacades.length === 0 && module.isUserDefinedEntryPoint) {\n                requiredFacades.push({});\n            }\n            // eslint-disable-next-line unicorn/prefer-spread\n            requiredFacades.push(...Array.from(module.chunkFileNames\x2C fileName => ({ fileName })));\n            if (requiredFacades.length === 0) {\n                requiredFacades.push({});\n            }\n            if (!this.facadeModule) {\n                const needsStrictFacade = !this.outputOptions.preserveModules &&\n                    (module.preserveSignature === 'strict' ||\n                        (module.preserveSignature === 'exports-only' &&\n                            module.getExportNamesByVariable().size > 0));\n                if (!needsStrictFacade || this.canModuleBeFacade(module\x2C exposedVariables)) {\n                    this.facadeModule = module;\n                    this.facadeChunkByModule.set(module\x2C this);\n                    if (module.preserveSignature) {\n                        this.strictFacade = needsStrictFacade;\n                    }\n                    this.assignFacadeName(requiredFacades.shift()\x2C module\x2C this.outputOptions.preserveModules);\n                }\n            }\n            for (const facadeName of requiredFacades) {\n                facades.push(Chunk.generateFacade(this.inputOptions\x2C this.outputOptions\x2C this.unsetOptions\x2C this.pluginDriver\x2C this.modulesById\x2C this.chunkByModule\x2C this.externalChunkByModule\x2C this.facadeChunkByModule\x2C this.includedNamespaces\x2C module\x2C facadeName\x2C this.getPlaceholder\x2C this.bundle\x2C this.inputBase\x2C this.snippets));\n            }\n        }\n        for (const module of this.dynamicEntryModules) {\n            if (module.info.syntheticNamedExports)\n                continue;\n            if (!this.facadeModule && this.canModuleBeFacade(module\x2C exposedVariables)) {\n                this.facadeModule = module;\n                this.facadeChunkByModule.set(module\x2C this);\n                this.strictFacade = true;\n                this.dynamicName = getChunkNameFromModule(module);\n            }\n            else if (this.facadeModule === module &&\n                !this.strictFacade &&\n                this.canModuleBeFacade(module\x2C exposedVariables)) {\n                this.strictFacade = true;\n            }\n            else if (!this.facadeChunkByModule.get(module)?.strictFacade) {\n                this.includedNamespaces.add(module);\n                this.exports.add(module.namespace);\n            }\n        }\n        if (!this.outputOptions.preserveModules) {\n            this.addNecessaryImportsForFacades();\n        }\n        return facades;\n    }\n    getChunkName() {\n        return (this.name ?? (this.name = this.outputOptions.sanitizeFileName(this.getFallbackChunkName())));\n    }\n    getExportNames() {\n        return (this.sortedExportNames ?? (this.sortedExportNames = [...this.exportsByName.keys()].sort()));\n    }\n    getFileName() {\n        return this.fileName || this.getPreliminaryFileName().fileName;\n    }\n    getImportPath(importer) {\n        return escapeId(getImportPath(importer\x2C this.getFileName()\x2C this.outputOptions.format === 'amd' && !this.outputOptions.amd.forceJsExtensionForImports\x2C true));\n    }\n    getPreliminaryFileName() {\n        if (this.preliminaryFileName) {\n            return this.preliminaryFileName;\n        }\n        let fileName;\n        let hashPlaceholder = null;\n        const { chunkFileNames\x2C entryFileNames\x2C file\x2C format\x2C preserveModules } = this.outputOptions;\n        if (file) {\n            fileName = basename(file);\n        }\n        else if (this.fileName === null) {\n            const [pattern\x2C patternName] = preserveModules || this.facadeModule?.isUserDefinedEntryPoint\n                ? [entryFileNames\x2C 'output.entryFileNames']\n                : [chunkFileNames\x2C 'output.chunkFileNames'];\n            fileName = renderNamePattern(typeof pattern === 'function' ? pattern(this.getPreRenderedChunkInfo()) : pattern\x2C patternName\x2C {\n                format: () => format\x2C\n                hash: size => hashPlaceholder || (hashPlaceholder = this.getPlaceholder(patternName\x2C size))\x2C\n                name: () => this.getChunkName()\n            });\n            if (!hashPlaceholder) {\n                fileName = makeUnique(fileName\x2C this.bundle);\n            }\n        }\n        else {\n            fileName = this.fileName;\n        }\n        if (!hashPlaceholder) {\n            this.bundle[fileName] = FILE_PLACEHOLDER;\n        }\n        // Caching is essential to not conflict with the file name reservation above\n        return (this.preliminaryFileName = { fileName\x2C hashPlaceholder });\n    }\n    getRenderedChunkInfo() {\n        if (this.renderedChunkInfo) {\n            return this.renderedChunkInfo;\n        }\n        return (this.renderedChunkInfo = {\n            ...this.getPreRenderedChunkInfo()\x2C\n            dynamicImports: this.getDynamicDependencies().map(resolveFileName)\x2C\n            fileName: this.getFileName()\x2C\n            // eslint-disable-next-line unicorn/prefer-spread\n            implicitlyLoadedBefore: Array.from(this.implicitlyLoadedBefore\x2C resolveFileName)\x2C\n            importedBindings: getImportedBindingsPerDependency(this.getRenderedDependencies()\x2C resolveFileName)\x2C\n            // eslint-disable-next-line unicorn/prefer-spread\n            imports: Array.from(this.dependencies\x2C resolveFileName)\x2C\n            modules: this.renderedModules\x2C\n            referencedFiles: this.getReferencedFiles()\n        });\n    }\n    getVariableExportName(variable) {\n        if (this.outputOptions.preserveModules && variable instanceof NamespaceVariable) {\n            return '*';\n        }\n        return this.exportNamesByVariable.get(variable)[0];\n    }\n    link() {\n        this.dependencies = getStaticDependencies(this\x2C this.orderedModules\x2C this.chunkByModule\x2C this.externalChunkByModule);\n        for (const module of this.orderedModules) {\n            this.addImplicitlyLoadedBeforeFromModule(module);\n            this.setUpChunkImportsAndExportsForModule(module);\n        }\n    }\n    async render() {\n        const { dependencies\x2C exportMode\x2C facadeModule\x2C inputOptions: { onLog }\x2C outputOptions\x2C pluginDriver\x2C snippets } = this;\n        const { format\x2C hoistTransitiveImports\x2C preserveModules } = outputOptions;\n        // for static and dynamic entry points\x2C add transitive dependencies to this\n        // chunk's dependencies to avoid loading latency\n        if (hoistTransitiveImports && !preserveModules && facadeModule !== null) {\n            for (const dep of dependencies) {\n                if (dep instanceof Chunk)\n                    this.inlineChunkDependencies(dep);\n            }\n        }\n        const preliminaryFileName = this.getPreliminaryFileName();\n        const { accessedGlobals\x2C indent\x2C magicString\x2C renderedSource\x2C usedModules\x2C usesTopLevelAwait } = this.renderModules(preliminaryFileName.fileName);\n        const renderedDependencies = [...this.getRenderedDependencies().values()];\n        const renderedExports = exportMode === 'none' ? [] : this.getChunkExportDeclarations(format);\n        let hasExports = renderedExports.length > 0;\n        let hasDefaultExport = false;\n        for (const renderedDependence of renderedDependencies) {\n            const { reexports } = renderedDependence;\n            if (reexports?.length) {\n                hasExports = true;\n                if (!hasDefaultExport && reexports.some(reexport => reexport.reexported === 'default')) {\n                    hasDefaultExport = true;\n                }\n                if (format === 'es') {\n                    renderedDependence.reexports = reexports.filter(\n                    // eslint-disable-next-line unicorn/prefer-array-some\n                    ({ reexported }) => !renderedExports.find(({ exported }) => exported === reexported));\n                }\n            }\n        }\n        if (!hasDefaultExport) {\n            for (const { exported } of renderedExports) {\n                if (exported === 'default') {\n                    hasDefaultExport = true;\n                    break;\n                }\n            }\n        }\n        const { intro\x2C outro\x2C banner\x2C footer } = await createAddons(outputOptions\x2C pluginDriver\x2C this.getRenderedChunkInfo());\n        finalisers[format](renderedSource\x2C {\n            accessedGlobals\x2C\n            dependencies: renderedDependencies\x2C\n            exports: renderedExports\x2C\n            hasDefaultExport\x2C\n            hasExports\x2C\n            id: preliminaryFileName.fileName\x2C\n            indent\x2C\n            intro\x2C\n            isEntryFacade: preserveModules || (facadeModule !== null && facadeModule.info.isEntry)\x2C\n            isModuleFacade: facadeModule !== null\x2C\n            log: onLog\x2C\n            namedExportsMode: exportMode !== 'default'\x2C\n            outro\x2C\n            snippets\x2C\n            usesTopLevelAwait\n        }\x2C outputOptions);\n        if (banner)\n            magicString.prepend(banner);\n        if (footer)\n            magicString.append(footer);\n        return {\n            chunk: this\x2C\n            magicString\x2C\n            preliminaryFileName\x2C\n            usedModules\n        };\n    }\n    addImplicitlyLoadedBeforeFromModule(baseModule) {\n        const { chunkByModule\x2C implicitlyLoadedBefore } = this;\n        for (const module of baseModule.implicitlyLoadedBefore) {\n            const chunk = chunkByModule.get(module);\n            if (chunk && chunk !== this) {\n                implicitlyLoadedBefore.add(chunk);\n            }\n        }\n    }\n    addNecessaryImportsForFacades() {\n        for (const [module\x2C variables] of this.includedReexportsByModule) {\n            if (this.includedNamespaces.has(module)) {\n                for (const variable of variables) {\n                    this.imports.add(variable);\n                }\n            }\n        }\n    }\n    assignFacadeName({ fileName\x2C name }\x2C facadedModule\x2C preservePath) {\n        if (fileName) {\n            this.fileName = fileName;\n        }\n        else {\n            this.name = this.outputOptions.sanitizeFileName(name ||\n                (preservePath\n                    ? this.getPreserveModulesChunkNameFromModule(facadedModule)\n                    : getChunkNameFromModule(facadedModule)));\n        }\n    }\n    checkCircularDependencyImport(variable\x2C importingModule) {\n        const variableModule = variable.module;\n        if (variableModule instanceof Module) {\n            const exportChunk = this.chunkByModule.get(variableModule);\n            let alternativeReexportModule;\n            do {\n                alternativeReexportModule = importingModule.alternativeReexportModules.get(variable);\n                if (alternativeReexportModule) {\n                    const exportingChunk = this.chunkByModule.get(alternativeReexportModule);\n                    if (exportingChunk !== exportChunk) {\n                        this.inputOptions.onLog(LOGLEVEL_WARN\x2C logCyclicCrossChunkReexport(\n                        // Namespaces do not have an export name\n                        variableModule.getExportNamesByVariable().get(variable)?.[0] || '*'\x2C variableModule.id\x2C alternativeReexportModule.id\x2C importingModule.id\x2C this.outputOptions.preserveModules));\n                    }\n                    importingModule = alternativeReexportModule;\n                }\n            } while (alternativeReexportModule);\n        }\n    }\n    ensureReexportsAreAvailableForModule(module) {\n        const includedReexports = [];\n        const map = module.getExportNamesByVariable();\n        for (const exportedVariable of map.keys()) {\n            const isSynthetic = exportedVariable instanceof SyntheticNamedExportVariable;\n            const importedVariable = isSynthetic ? exportedVariable.getBaseVariable() : exportedVariable;\n            this.checkCircularDependencyImport(importedVariable\x2C module);\n            // When preserving modules\x2C we do not create namespace objects but directly\n            // use the actual namespaces\x2C which would be broken by this logic.\n            if (!(importedVariable instanceof NamespaceVariable && this.outputOptions.preserveModules)) {\n                const exportingModule = importedVariable.module;\n                if (exportingModule instanceof Module) {\n                    const chunk = this.chunkByModule.get(exportingModule);\n                    if (chunk && chunk !== this) {\n                        chunk.exports.add(importedVariable);\n                        includedReexports.push(importedVariable);\n                        if (isSynthetic) {\n                            this.imports.add(importedVariable);\n                        }\n                    }\n                }\n            }\n        }\n        if (includedReexports.length > 0) {\n            this.includedReexportsByModule.set(module\x2C includedReexports);\n        }\n    }\n    generateVariableName() {\n        if (this.manualChunkAlias) {\n            return this.manualChunkAlias;\n        }\n        const moduleForNaming = this.entryModules[0] ||\n            this.implicitEntryModules[0] ||\n            this.dynamicEntryModules[0] ||\n            this.orderedModules[this.orderedModules.length - 1];\n        if (moduleForNaming) {\n            return getChunkNameFromModule(moduleForNaming);\n        }\n        return 'chunk';\n    }\n    getChunkExportDeclarations(format) {\n        const exports = [];\n        for (const exportName of this.getExportNames()) {\n            if (exportName[0] === '*')\n                continue;\n            const variable = this.exportsByName.get(exportName);\n            if (!(variable instanceof SyntheticNamedExportVariable)) {\n                const module = variable.module;\n                if (module) {\n                    const chunk = this.chunkByModule.get(module);\n                    if (chunk !== this) {\n                        if (!chunk || format !== 'es') {\n                            continue;\n                        }\n                        const chunkDep = this.renderedDependencies.get(chunk);\n                        if (!chunkDep) {\n                            continue;\n                        }\n                        const { imports\x2C reexports } = chunkDep;\n                        const importedByReexported = reexports?.find(({ reexported }) => reexported === exportName);\n                        const isImported = imports?.find(({ imported }) => imported === importedByReexported?.imported);\n                        if (!isImported) {\n                            continue;\n                        }\n                    }\n                }\n            }\n            let expression = null;\n            let hoisted = false;\n            let local = variable.getName(this.snippets.getPropertyAccess);\n            if (variable instanceof LocalVariable) {\n                for (const declaration of variable.declarations) {\n                    if (declaration.parent instanceof FunctionDeclaration ||\n                        (declaration instanceof ExportDefaultDeclaration &&\n                            declaration.declaration instanceof FunctionDeclaration)) {\n                        hoisted = true;\n                        break;\n                    }\n                }\n            }\n            else if (variable instanceof SyntheticNamedExportVariable) {\n                expression = local;\n                if (format === 'es') {\n                    local = variable.renderName;\n                }\n            }\n            exports.push({\n                exported: exportName\x2C\n                expression\x2C\n                hoisted\x2C\n                local\n            });\n        }\n        return exports;\n    }\n    getDependenciesToBeDeconflicted(addNonNamespacesAndInteropHelpers\x2C addDependenciesWithoutBindings\x2C interop) {\n        const dependencies = new Set();\n        const deconflictedDefault = new Set();\n        const deconflictedNamespace = new Set();\n        for (const variable of [...this.exportNamesByVariable.keys()\x2C ...this.imports]) {\n            if (addNonNamespacesAndInteropHelpers || variable.isNamespace) {\n                const module = variable.module;\n                if (module instanceof ExternalModule) {\n                    const chunk = this.externalChunkByModule.get(module);\n                    dependencies.add(chunk);\n                    if (addNonNamespacesAndInteropHelpers) {\n                        if (variable.name === 'default') {\n                            if (defaultInteropHelpersByInteropType[interop(module.id)]) {\n                                deconflictedDefault.add(chunk);\n                            }\n                        }\n                        else if (variable.name === '*' &&\n                            namespaceInteropHelpersByInteropType[interop(module.id)]) {\n                            deconflictedNamespace.add(chunk);\n                        }\n                    }\n                }\n                else {\n                    const chunk = this.chunkByModule.get(module);\n                    if (chunk !== this) {\n                        dependencies.add(chunk);\n                        if (addNonNamespacesAndInteropHelpers &&\n                            chunk.exportMode === 'default' &&\n                            variable.isNamespace) {\n                            deconflictedNamespace.add(chunk);\n                        }\n                    }\n                }\n            }\n        }\n        if (addDependenciesWithoutBindings) {\n            for (const dependency of this.dependencies) {\n                dependencies.add(dependency);\n            }\n        }\n        return { deconflictedDefault\x2C deconflictedNamespace\x2C dependencies };\n    }\n    getDynamicDependencies() {\n        return this.getIncludedDynamicImports()\n            .map(resolvedDynamicImport => resolvedDynamicImport.facadeChunk ||\n            resolvedDynamicImport.chunk ||\n            resolvedDynamicImport.externalChunk ||\n            resolvedDynamicImport.resolution)\n            .filter((resolution) => resolution !== this &&\n            (resolution instanceof Chunk || resolution instanceof ExternalChunk));\n    }\n    getDynamicImportStringAndAssertions(resolution\x2C fileName) {\n        if (resolution instanceof ExternalModule) {\n            const chunk = this.externalChunkByModule.get(resolution);\n            return [`'${chunk.getImportPath(fileName)}'`\x2C chunk.getImportAssertions(this.snippets)];\n        }\n        return [\n            resolution || ''\x2C\n            (this.outputOptions.format === 'es' && this.outputOptions.externalImportAssertions) || null\n        ];\n    }\n    getFallbackChunkName() {\n        if (this.manualChunkAlias) {\n            return this.manualChunkAlias;\n        }\n        if (this.dynamicName) {\n            return this.dynamicName;\n        }\n        if (this.fileName) {\n            return getAliasName(this.fileName);\n        }\n        return getAliasName(this.orderedModules[this.orderedModules.length - 1].id);\n    }\n    getImportSpecifiers() {\n        const { interop } = this.outputOptions;\n        const importsByDependency = new Map();\n        for (const variable of this.imports) {\n            const module = variable.module;\n            let dependency;\n            let imported;\n            if (module instanceof ExternalModule) {\n                dependency = this.externalChunkByModule.get(module);\n                imported = variable.name;\n                if (imported !== 'default' && imported !== '*' && interop(module.id) === 'defaultOnly') {\n                    return error(logUnexpectedNamedImport(module.id\x2C imported\x2C false));\n                }\n            }\n            else {\n                dependency = this.chunkByModule.get(module);\n                imported = dependency.getVariableExportName(variable);\n            }\n            getOrCreate(importsByDependency\x2C dependency\x2C getNewArray).push({\n                imported\x2C\n                local: variable.getName(this.snippets.getPropertyAccess)\n            });\n        }\n        return importsByDependency;\n    }\n    getIncludedDynamicImports() {\n        if (this.includedDynamicImports) {\n            return this.includedDynamicImports;\n        }\n        const includedDynamicImports = [];\n        for (const module of this.orderedModules) {\n            for (const { node\x2C resolution } of module.dynamicImports) {\n                if (!node.included) {\n                    continue;\n                }\n                includedDynamicImports.push(resolution instanceof Module\n                    ? {\n                        chunk: this.chunkByModule.get(resolution)\x2C\n                        externalChunk: null\x2C\n                        facadeChunk: this.facadeChunkByModule.get(resolution)\x2C\n                        node\x2C\n                        resolution\n                    }\n                    : resolution instanceof ExternalModule\n                        ? {\n                            chunk: null\x2C\n                            externalChunk: this.externalChunkByModule.get(resolution)\x2C\n                            facadeChunk: null\x2C\n                            node\x2C\n                            resolution\n                        }\n                        : { chunk: null\x2C externalChunk: null\x2C facadeChunk: null\x2C node\x2C resolution });\n            }\n        }\n        return (this.includedDynamicImports = includedDynamicImports);\n    }\n    getPreRenderedChunkInfo() {\n        if (this.preRenderedChunkInfo) {\n            return this.preRenderedChunkInfo;\n        }\n        const { dynamicEntryModules\x2C facadeModule\x2C implicitEntryModules\x2C orderedModules } = this;\n        return (this.preRenderedChunkInfo = {\n            exports: this.getExportNames()\x2C\n            facadeModuleId: facadeModule && facadeModule.id\x2C\n            isDynamicEntry: dynamicEntryModules.length > 0\x2C\n            isEntry: !!facadeModule?.info.isEntry\x2C\n            isImplicitEntry: implicitEntryModules.length > 0\x2C\n            moduleIds: orderedModules.map(({ id }) => id)\x2C\n            name: this.getChunkName()\x2C\n            type: 'chunk'\n        });\n    }\n    getPreserveModulesChunkNameFromModule(module) {\n        const predefinedChunkName = getPredefinedChunkNameFromModule(module);\n        if (predefinedChunkName)\n            return predefinedChunkName;\n        const { preserveModulesRoot\x2C sanitizeFileName } = this.outputOptions;\n        const sanitizedId = sanitizeFileName(normalize(module.id.split(QUERY_HASH_REGEX\x2C 1)[0]));\n        const extensionName = extname(sanitizedId);\n        const idWithoutExtension = NON_ASSET_EXTENSIONS.has(extensionName)\n            ? sanitizedId.slice(0\x2C -extensionName.length)\n            : sanitizedId;\n        if (isAbsolute(idWithoutExtension)) {\n            return preserveModulesRoot && resolve(idWithoutExtension).startsWith(preserveModulesRoot)\n                ? idWithoutExtension.slice(preserveModulesRoot.length).replace(/^[/\\\\]/\x2C '')\n                : relative(this.inputBase\x2C idWithoutExtension);\n        }\n        else {\n            return `_virtual/${basename(idWithoutExtension)}`;\n        }\n    }\n    getReexportSpecifiers() {\n        const { externalLiveBindings\x2C interop } = this.outputOptions;\n        const reexportSpecifiers = new Map();\n        for (let exportName of this.getExportNames()) {\n            let dependency;\n            let imported;\n            let needsLiveBinding = false;\n            if (exportName[0] === '*') {\n                const id = exportName.slice(1);\n                if (interop(id) === 'defaultOnly') {\n                    this.inputOptions.onLog(LOGLEVEL_WARN\x2C logUnexpectedNamespaceReexport(id));\n                }\n                needsLiveBinding = externalLiveBindings;\n                dependency = this.externalChunkByModule.get(this.modulesById.get(id));\n                imported = exportName = '*';\n            }\n            else {\n                const variable = this.exportsByName.get(exportName);\n                if (variable instanceof SyntheticNamedExportVariable)\n                    continue;\n                const module = variable.module;\n                if (module instanceof Module) {\n                    dependency = this.chunkByModule.get(module);\n                    if (dependency === this)\n                        continue;\n                    imported = dependency.getVariableExportName(variable);\n                    needsLiveBinding = variable.isReassigned;\n                }\n                else {\n                    dependency = this.externalChunkByModule.get(module);\n                    imported = variable.name;\n                    if (imported !== 'default' && imported !== '*' && interop(module.id) === 'defaultOnly') {\n                        return error(logUnexpectedNamedImport(module.id\x2C imported\x2C true));\n                    }\n                    needsLiveBinding =\n                        externalLiveBindings &&\n                            (imported !== 'default' || isDefaultAProperty(interop(module.id)\x2C true));\n                }\n            }\n            getOrCreate(reexportSpecifiers\x2C dependency\x2C getNewArray).push({\n                imported\x2C\n                needsLiveBinding\x2C\n                reexported: exportName\n            });\n        }\n        return reexportSpecifiers;\n    }\n    getReferencedFiles() {\n        const referencedFiles = new Set();\n        for (const module of this.orderedModules) {\n            for (const meta of module.importMetas) {\n                const fileName = meta.getReferencedFileName(this.pluginDriver);\n                if (fileName) {\n                    referencedFiles.add(fileName);\n                }\n            }\n        }\n        return [...referencedFiles];\n    }\n    getRenderedDependencies() {\n        if (this.renderedDependencies) {\n            return this.renderedDependencies;\n        }\n        const importSpecifiers = this.getImportSpecifiers();\n        const reexportSpecifiers = this.getReexportSpecifiers();\n        const renderedDependencies = new Map();\n        const fileName = this.getFileName();\n        for (const dep of this.dependencies) {\n            const imports = importSpecifiers.get(dep) || null;\n            const reexports = reexportSpecifiers.get(dep) || null;\n            const namedExportsMode = dep instanceof ExternalChunk || dep.exportMode !== 'default';\n            const importPath = dep.getImportPath(fileName);\n            renderedDependencies.set(dep\x2C {\n                assertions: dep instanceof ExternalChunk ? dep.getImportAssertions(this.snippets) : null\x2C\n                defaultVariableName: dep.defaultVariableName\x2C\n                globalName: dep instanceof ExternalChunk &&\n                    (this.outputOptions.format === 'umd' || this.outputOptions.format === 'iife') &&\n                    getGlobalName(dep\x2C this.outputOptions.globals\x2C (imports || reexports) !== null\x2C this.inputOptions.onLog)\x2C\n                importPath\x2C\n                imports\x2C\n                isChunk: dep instanceof Chunk\x2C\n                name: dep.variableName\x2C\n                namedExportsMode\x2C\n                namespaceVariableName: dep.namespaceVariableName\x2C\n                reexports\n            });\n        }\n        return (this.renderedDependencies = renderedDependencies);\n    }\n    inlineChunkDependencies(chunk) {\n        for (const dep of chunk.dependencies) {\n            if (this.dependencies.has(dep))\n                continue;\n            this.dependencies.add(dep);\n            if (dep instanceof Chunk) {\n                this.inlineChunkDependencies(dep);\n            }\n        }\n    }\n    // This method changes properties on the AST before rendering and must not be async\n    renderModules(fileName) {\n        const { accessedGlobalsByScope\x2C dependencies\x2C exportNamesByVariable\x2C includedNamespaces\x2C inputOptions: { onLog }\x2C isEmpty\x2C orderedModules\x2C outputOptions\x2C pluginDriver\x2C renderedModules\x2C snippets } = this;\n        const { compact\x2C dynamicImportFunction\x2C format\x2C freeze\x2C namespaceToStringTag } = outputOptions;\n        const { _\x2C cnst\x2C n } = snippets;\n        this.setDynamicImportResolutions(fileName);\n        this.setImportMetaResolutions(fileName);\n        this.setIdentifierRenderResolutions();\n        const magicString = new Bundle$1({ separator: `${n}${n}` });\n        const indent = getIndentString(orderedModules\x2C outputOptions);\n        const usedModules = [];\n        let hoistedSource = '';\n        const accessedGlobals = new Set();\n        const renderedModuleSources = new Map();\n        const renderOptions = {\n            dynamicImportFunction\x2C\n            exportNamesByVariable\x2C\n            format\x2C\n            freeze\x2C\n            indent\x2C\n            namespaceToStringTag\x2C\n            pluginDriver\x2C\n            snippets\x2C\n            useOriginalName: null\n        };\n        let usesTopLevelAwait = false;\n        for (const module of orderedModules) {\n            let renderedLength = 0;\n            let source;\n            if (module.isIncluded() || includedNamespaces.has(module)) {\n                const rendered = module.render(renderOptions);\n                ({ source } = rendered);\n                usesTopLevelAwait || (usesTopLevelAwait = rendered.usesTopLevelAwait);\n                renderedLength = source.length();\n                if (renderedLength) {\n                    if (compact && source.lastLine().includes('//'))\n                        source.append('\\n');\n                    renderedModuleSources.set(module\x2C source);\n                    magicString.addSource(source);\n                    usedModules.push(module);\n                }\n                const namespace = module.namespace;\n                if (includedNamespaces.has(module)) {\n                    const rendered = namespace.renderBlock(renderOptions);\n                    if (namespace.renderFirst())\n                        hoistedSource += n + rendered;\n                    else\n                        magicString.addSource(new MagicString(rendered));\n                }\n                const accessedGlobalVariables = accessedGlobalsByScope.get(module.scope);\n                if (accessedGlobalVariables) {\n                    for (const name of accessedGlobalVariables) {\n                        accessedGlobals.add(name);\n                    }\n                }\n            }\n            const { renderedExports\x2C removedExports } = module.getRenderedExports();\n            renderedModules[module.id] = {\n                get code() {\n                    return source?.toString() ?? null;\n                }\x2C\n                originalLength: module.originalCode.length\x2C\n                removedExports\x2C\n                renderedExports\x2C\n                renderedLength\n            };\n        }\n        if (hoistedSource)\n            magicString.prepend(hoistedSource + n + n);\n        // eslint-disable-next-line unicorn/consistent-destructuring\n        if (this.needsExportsShim) {\n            magicString.prepend(`${n}${cnst} ${MISSING_EXPORT_SHIM_VARIABLE}${_}=${_}void 0;${n}${n}`);\n        }\n        const renderedSource = compact ? magicString : magicString.trim();\n        if (isEmpty && this.getExportNames().length === 0 && dependencies.size === 0) {\n            onLog(LOGLEVEL_WARN\x2C logEmptyChunk(this.getChunkName()));\n        }\n        return { accessedGlobals\x2C indent\x2C magicString\x2C renderedSource\x2C usedModules\x2C usesTopLevelAwait };\n    }\n    setDynamicImportResolutions(fileName) {\n        const { accessedGlobalsByScope\x2C outputOptions\x2C pluginDriver\x2C snippets } = this;\n        for (const resolvedDynamicImport of this.getIncludedDynamicImports()) {\n            if (resolvedDynamicImport.chunk) {\n                const { chunk\x2C facadeChunk\x2C node\x2C resolution } = resolvedDynamicImport;\n                if (chunk === this) {\n                    node.setInternalResolution(resolution.namespace);\n                }\n                else {\n                    node.setExternalResolution((facadeChunk || chunk).exportMode\x2C resolution\x2C outputOptions\x2C snippets\x2C pluginDriver\x2C accessedGlobalsByScope\x2C `'${(facadeChunk || chunk).getImportPath(fileName)}'`\x2C !facadeChunk?.strictFacade && chunk.exportNamesByVariable.get(resolution.namespace)[0]\x2C null);\n                }\n            }\n            else {\n                const { node\x2C resolution } = resolvedDynamicImport;\n                const [resolutionString\x2C assertions] = this.getDynamicImportStringAndAssertions(resolution\x2C fileName);\n                node.setExternalResolution('external'\x2C resolution\x2C outputOptions\x2C snippets\x2C pluginDriver\x2C accessedGlobalsByScope\x2C resolutionString\x2C false\x2C assertions);\n            }\n        }\n    }\n    setIdentifierRenderResolutions() {\n        const { format\x2C interop\x2C namespaceToStringTag\x2C preserveModules\x2C externalLiveBindings } = this.outputOptions;\n        const syntheticExports = new Set();\n        for (const exportName of this.getExportNames()) {\n            const exportVariable = this.exportsByName.get(exportName);\n            if (format !== 'es' &&\n                format !== 'system' &&\n                exportVariable.isReassigned &&\n                !exportVariable.isId) {\n                exportVariable.setRenderNames('exports'\x2C exportName);\n            }\n            else if (exportVariable instanceof SyntheticNamedExportVariable) {\n                syntheticExports.add(exportVariable);\n            }\n            else {\n                exportVariable.setRenderNames(null\x2C null);\n            }\n        }\n        for (const module of this.orderedModules) {\n            if (module.needsExportShim) {\n                this.needsExportsShim = true;\n                break;\n            }\n        }\n        const usedNames = new Set(['Object'\x2C 'Promise']);\n        if (this.needsExportsShim) {\n            usedNames.add(MISSING_EXPORT_SHIM_VARIABLE);\n        }\n        if (namespaceToStringTag) {\n            usedNames.add('Symbol');\n        }\n        switch (format) {\n            case 'system': {\n                usedNames.add('module').add('exports');\n                break;\n            }\n            case 'es': {\n                break;\n            }\n            case 'cjs': {\n                usedNames.add('module').add('require').add('__filename').add('__dirname');\n            }\n            // fallthrough\n            default: {\n                usedNames.add('exports');\n                for (const helper of HELPER_NAMES) {\n                    usedNames.add(helper);\n                }\n            }\n        }\n        deconflictChunk(this.orderedModules\x2C this.getDependenciesToBeDeconflicted(format !== 'es' && format !== 'system'\x2C format === 'amd' || format === 'umd' || format === 'iife'\x2C interop)\x2C this.imports\x2C usedNames\x2C format\x2C interop\x2C preserveModules\x2C externalLiveBindings\x2C this.chunkByModule\x2C this.externalChunkByModule\x2C syntheticExports\x2C this.exportNamesByVariable\x2C this.accessedGlobalsByScope\x2C this.includedNamespaces);\n    }\n    setImportMetaResolutions(fileName) {\n        const { accessedGlobalsByScope\x2C includedNamespaces\x2C orderedModules\x2C outputOptions: { format } } = this;\n        for (const module of orderedModules) {\n            for (const importMeta of module.importMetas) {\n                importMeta.setResolution(format\x2C accessedGlobalsByScope\x2C fileName);\n            }\n            if (includedNamespaces.has(module)) {\n                module.namespace.prepare(accessedGlobalsByScope);\n            }\n        }\n    }\n    setUpChunkImportsAndExportsForModule(module) {\n        const moduleImports = new Set(module.includedImports);\n        // when we are not preserving modules\x2C we need to make all namespace variables available for\n        // rendering the namespace object\n        if (!this.outputOptions.preserveModules && this.includedNamespaces.has(module)) {\n            const memberVariables = module.namespace.getMemberVariables();\n            for (const variable of Object.values(memberVariables)) {\n                if (variable.included) {\n                    moduleImports.add(variable);\n                }\n            }\n        }\n        for (let variable of moduleImports) {\n            if (variable instanceof ExportDefaultVariable) {\n                variable = variable.getOriginalVariable();\n            }\n            if (variable instanceof SyntheticNamedExportVariable) {\n                variable = variable.getBaseVariable();\n            }\n            const chunk = this.chunkByModule.get(variable.module);\n            if (chunk !== this) {\n                this.imports.add(variable);\n                if (variable.module instanceof Module) {\n                    this.checkCircularDependencyImport(variable\x2C module);\n                    // When preserving modules\x2C we do not create namespace objects but directly\n                    // use the actual namespaces\x2C which would be broken by this logic.\n                    if (!(variable instanceof NamespaceVariable && this.outputOptions.preserveModules)) {\n                        chunk.exports.add(variable);\n                    }\n                }\n            }\n        }\n        if (this.includedNamespaces.has(module) ||\n            (module.info.isEntry && module.preserveSignature !== false) ||\n            module.includedDynamicImporters.some(importer => this.chunkByModule.get(importer) !== this)) {\n            this.ensureReexportsAreAvailableForModule(module);\n        }\n        for (const { node\x2C resolution } of module.dynamicImports) {\n            if (node.included &&\n                resolution instanceof Module &&\n                this.chunkByModule.get(resolution) === this &&\n                !this.includedNamespaces.has(resolution)) {\n                this.includedNamespaces.add(resolution);\n                this.ensureReexportsAreAvailableForModule(resolution);\n            }\n        }\n    }\n}\nfunction getChunkNameFromModule(module) {\n    return getPredefinedChunkNameFromModule(module) ?? getAliasName(module.id);\n}\nfunction getPredefinedChunkNameFromModule(module) {\n    return (module.chunkNames.find(({ isUserDefined }) => isUserDefined)?.name ?? module.chunkNames[0]?.name);\n}\nfunction getImportedBindingsPerDependency(renderedDependencies\x2C resolveFileName) {\n    const importedBindingsPerDependency = {};\n    for (const [dependency\x2C declaration] of renderedDependencies) {\n        const specifiers = new Set();\n        if (declaration.imports) {\n            for (const { imported } of declaration.imports) {\n                specifiers.add(imported);\n            }\n        }\n        if (declaration.reexports) {\n            for (const { imported } of declaration.reexports) {\n                specifiers.add(imported);\n            }\n        }\n        importedBindingsPerDependency[resolveFileName(dependency)] = [...specifiers];\n    }\n    return importedBindingsPerDependency;\n}\nconst QUERY_HASH_REGEX = /[#?]/;\nconst resolveFileName = (dependency) => dependency.getFileName();\n\n/**\n * Concatenate a number of iterables to a new iterable without fully evaluating\n * their iterators. Useful when e.g. working with large sets or lists and when\n * there is a chance that the iterators will not be fully exhausted.\n */\nfunction* concatLazy(iterables) {\n    for (const iterable of iterables) {\n        yield* iterable;\n    }\n}\n\n/**\n * At its core\x2C the algorithm first starts from each static or dynamic entry\n * point and then assigns that entry point to all modules than can be reached\n * via static imports. We call this the *dependent entry points* of that\n * module.\n *\n * Then we group all modules with the same dependent entry points into chunks\n * as those modules will always be loaded together.\n *\n * One non-trivial optimization we can apply is that dynamic entries are\n * different from static entries in so far as when a dynamic import occurs\x2C\n * some\n * modules are already in memory. If some of these modules are also\n * dependencies\n * of the dynamic entry\x2C then it does not make sense to create a separate chunk\n * for them. Instead\x2C the dynamic import target can load them from the\n * importing\n * chunk.\n *\n * With regard to chunking\x2C if B is implicitly loaded after A\x2C then this can be\n * handled the same way as if there was a dynamic import A => B.\n *\n * Example:\n * Assume A -> B (A imports B)\x2C A => C (A dynamically imports C) and C -> B.\n * Then the initial algorithm would assign A into the A chunk\x2C C into the C\n * chunk and B into the AC chunk\x2C i.e. the chunk with the dependent entry\n * points\n * A and C.\n * However we know that C can only be loaded from A\x2C so A and its dependency B\n * must already be in memory when C is loaded. So it is enough to create only\n * two chunks A containing [AB] and C containing [C].\n *\n * So we do not assign the dynamic entry C as dependent entry point to modules\n * that are already loaded.\n *\n * In a more complex example\x2C let us assume that we have entry points X and Y.\n * Further\x2C let us assume\n * X -> A\x2C X -> B\x2C X -> C\x2C\n * Y -> A\x2C Y -> B\x2C\n * A => D\x2C\n * D -> B\x2C D -> C\n * So without dynamic import optimization\x2C the dependent entry points are\n * A: XY\x2C B: DXY\x2C C: DX\x2C D: D\x2C X: X\x2C Y: Y\x2C\n * so we would for now create six chunks.\n *\n * Now D is loaded only after A is loaded. But A is loaded if either X is\n * loaded\n * or Y is loaded. So the modules that are already in memory when D is loaded\n * are the intersection of all modules that X depends on with all modules that\n * Y\n * depends on\x2C which in this case are the modules A and B.\n * We could also say they are all modules that have both X and Y as dependent\n * entry points.\n *\n * So we can remove D as dependent entry point from A and B\x2C which means they\n * both now have only XY as dependent entry points and can be merged into the\n * same chunk.\n *\n * Now let us extend this to the most general case where we have several\n * dynamic\n * importers for one dynamic entry point.\n *\n * In the most general form\x2C it works like this:\n * For each dynamic entry point\x2C we have a number of dynamic importers\x2C which\n * are the modules importing it. Using the previous ideas\x2C we can determine\n * the modules already in memory for each dynamic importer by looking for all\n * modules that have all the dependent entry points of the dynamic importer as\n * dependent entry points.\n * So the modules that are guaranteed to be in memory when the dynamic entry\n * point is loaded are the intersection of the modules already in memory for\n * each dynamic importer.\n *\n * Assuming that A => D and B => D and A has dependent entry points XY and B\n * has\n * dependent entry points YZ\x2C then the modules guaranteed to be in memory are\n * all modules that have at least XYZ as dependent entry points.\n * We call XYZ the *dynamically dependent entry points* of D.\n *\n * Now there is one last case to consider: If one of the dynamically dependent\n * entries is itself a dynamic entry\x2C then any module is in memory that either\n * is a dependency of that dynamic entry or again has the dynamic dependent\n * entries of that dynamic entry as dependent entry points.\n *\n * A naive algorithm for this proved to be costly as it contained an O(n^3)\n * complexity with regard to dynamic entries that blew up for very large\n * projects.\n *\n * If we have an efficient way to do Set operations\x2C an alternative approach\n * would be to instead collect already loaded modules per dynamic entry. And as\n * all chunks from the initial grouping would behave the same\x2C we can instead\n * collect already loaded chunks for a performance improvement.\n *\n * To do that efficiently\x2C need\n * - a Map of dynamic imports per dynamic entry\x2C which contains all dynamic\n *   imports that can be triggered by a dynamic entry\n * - a Map of static dependencies per entry\n * - a Map of already loaded chunks per entry that we initially populate with\n *   empty Sets for static entries and Sets containing all entries for dynamic\n *   entries\n *\n * For efficient operations\x2C we assign each entry a numerical index and\n * represent Sets of Chunks as BigInt values where each chunk corresponds to a\n * bit index. Then thw last two maps can be represented as arrays of BigInt\n * values.\n *\n * Then we iterate through each dynamic entry. We set the already loaded modules\n * to the intersection of the previously already loaded modules with the union\n * of the already loaded modules of that chunk with its static dependencies.\n *\n * If the already loaded modules changed\x2C then we use the Map of dynamic imports\n * per dynamic entry to marks all dynamic entry dependencies as "dirty" and put\n * them back into the iteration. As an additional optimization\x2C we note for\n * each dynamic entry which dynamic dependent entries have changed and only\n * intersect those entries again on subsequent interations.\n *\n * Then we remove the dynamic entries from the list of dependent entries for\n * those chunks that are already loaded for that dynamic entry and create\n * another round of chunks.\n */\nfunction getChunkAssignments(entries\x2C manualChunkAliasByEntry\x2C minChunkSize\x2C log) {\n    const { chunkDefinitions\x2C modulesInManualChunks } = getChunkDefinitionsFromManualChunks(manualChunkAliasByEntry);\n    const { allEntries\x2C dependentEntriesByModule\x2C dynamicallyDependentEntriesByDynamicEntry\x2C dynamicImportsByEntry } = analyzeModuleGraph(entries);\n    // Each chunk is identified by its position in this array\n    const initialChunks = getChunksFromDependentEntries(getModulesWithDependentEntries(dependentEntriesByModule\x2C modulesInManualChunks));\n    // This mutates initialChunks but also clears\n    // dynamicallyDependentEntriesByDynamicEntry as side effect\n    removeUnnecessaryDependentEntries(initialChunks\x2C dynamicallyDependentEntriesByDynamicEntry\x2C dynamicImportsByEntry\x2C allEntries);\n    chunkDefinitions.push(...getOptimizedChunks(getChunksFromDependentEntries(initialChunks)\x2C allEntries.length\x2C minChunkSize\x2C log).map(({ modules }) => ({\n        alias: null\x2C\n        modules\n    })));\n    return chunkDefinitions;\n}\nfunction getChunkDefinitionsFromManualChunks(manualChunkAliasByEntry) {\n    const chunkDefinitions = [];\n    const modulesInManualChunks = new Set(manualChunkAliasByEntry.keys());\n    const manualChunkModulesByAlias = Object.create(null);\n    for (const [entry\x2C alias] of manualChunkAliasByEntry) {\n        addStaticDependenciesToManualChunk(entry\x2C (manualChunkModulesByAlias[alias] || (manualChunkModulesByAlias[alias] = []))\x2C modulesInManualChunks);\n    }\n    for (const [alias\x2C modules] of Object.entries(manualChunkModulesByAlias)) {\n        chunkDefinitions.push({ alias\x2C modules });\n    }\n    return { chunkDefinitions\x2C modulesInManualChunks };\n}\nfunction addStaticDependenciesToManualChunk(entry\x2C manualChunkModules\x2C modulesInManualChunks) {\n    const modulesToHandle = new Set([entry]);\n    for (const module of modulesToHandle) {\n        modulesInManualChunks.add(module);\n        manualChunkModules.push(module);\n        for (const dependency of module.dependencies) {\n            if (!(dependency instanceof ExternalModule || modulesInManualChunks.has(dependency))) {\n                modulesToHandle.add(dependency);\n            }\n        }\n    }\n}\nfunction analyzeModuleGraph(entries) {\n    const dynamicEntryModules = new Set();\n    const dependentEntriesByModule = new Map();\n    const dynamicImportModulesByEntry = [];\n    const allEntriesSet = new Set(entries);\n    let entryIndex = 0;\n    for (const currentEntry of allEntriesSet) {\n        const dynamicImportsForCurrentEntry = new Set();\n        dynamicImportModulesByEntry.push(dynamicImportsForCurrentEntry);\n        const modulesToHandle = new Set([currentEntry]);\n        for (const module of modulesToHandle) {\n            getOrCreate(dependentEntriesByModule\x2C module\x2C (getNewSet)).add(entryIndex);\n            for (const dependency of module.getDependenciesToBeIncluded()) {\n                if (!(dependency instanceof ExternalModule)) {\n                    modulesToHandle.add(dependency);\n                }\n            }\n            for (const { resolution } of module.dynamicImports) {\n                if (resolution instanceof Module &&\n                    resolution.includedDynamicImporters.length > 0 &&\n                    !allEntriesSet.has(resolution)) {\n                    dynamicEntryModules.add(resolution);\n                    allEntriesSet.add(resolution);\n                    dynamicImportsForCurrentEntry.add(resolution);\n                }\n            }\n            for (const dependency of module.implicitlyLoadedBefore) {\n                if (!allEntriesSet.has(dependency)) {\n                    dynamicEntryModules.add(dependency);\n                    allEntriesSet.add(dependency);\n                }\n            }\n        }\n        entryIndex++;\n    }\n    const allEntries = [...allEntriesSet];\n    const { dynamicEntries\x2C dynamicImportsByEntry } = getDynamicEntries(allEntries\x2C dynamicEntryModules\x2C dynamicImportModulesByEntry);\n    return {\n        allEntries\x2C\n        dependentEntriesByModule\x2C\n        dynamicallyDependentEntriesByDynamicEntry: getDynamicallyDependentEntriesByDynamicEntry(dependentEntriesByModule\x2C dynamicEntries\x2C allEntries)\x2C\n        dynamicImportsByEntry\n    };\n}\nfunction getDynamicEntries(allEntries\x2C dynamicEntryModules\x2C dynamicImportModulesByEntry) {\n    const entryIndexByModule = new Map();\n    const dynamicEntries = new Set();\n    for (const [entryIndex\x2C entry] of allEntries.entries()) {\n        entryIndexByModule.set(entry\x2C entryIndex);\n        if (dynamicEntryModules.has(entry)) {\n            dynamicEntries.add(entryIndex);\n        }\n    }\n    const dynamicImportsByEntry = [];\n    for (const dynamicImportModules of dynamicImportModulesByEntry) {\n        const dynamicImports = new Set();\n        for (const dynamicEntry of dynamicImportModules) {\n            dynamicImports.add(entryIndexByModule.get(dynamicEntry));\n        }\n        dynamicImportsByEntry.push(dynamicImports);\n    }\n    return { dynamicEntries\x2C dynamicImportsByEntry };\n}\nfunction getDynamicallyDependentEntriesByDynamicEntry(dependentEntriesByModule\x2C dynamicEntries\x2C allEntries) {\n    const dynamicallyDependentEntriesByDynamicEntry = new Map();\n    for (const dynamicEntryIndex of dynamicEntries) {\n        const dynamicallyDependentEntries = getOrCreate(dynamicallyDependentEntriesByDynamicEntry\x2C dynamicEntryIndex\x2C (getNewSet));\n        const dynamicEntry = allEntries[dynamicEntryIndex];\n        for (const importer of concatLazy([\n            dynamicEntry.includedDynamicImporters\x2C\n            dynamicEntry.implicitlyLoadedAfter\n        ])) {\n            for (const entry of dependentEntriesByModule.get(importer)) {\n                dynamicallyDependentEntries.add(entry);\n            }\n        }\n    }\n    return dynamicallyDependentEntriesByDynamicEntry;\n}\nfunction getChunksFromDependentEntries(modulesWithDependentEntries) {\n    var _a;\n    const chunkModules = Object.create(null);\n    for (const { dependentEntries\x2C modules } of modulesWithDependentEntries) {\n        let chunkSignature = 0n;\n        for (const entryIndex of dependentEntries) {\n            chunkSignature |= 1n << BigInt(entryIndex);\n        }\n        (chunkModules[_a = String(chunkSignature)] || (chunkModules[_a] = {\n            dependentEntries: new Set(dependentEntries)\x2C\n            modules: []\n        })).modules.push(...modules);\n    }\n    return Object.values(chunkModules);\n}\nfunction* getModulesWithDependentEntries(dependentEntriesByModule\x2C modulesInManualChunks) {\n    for (const [module\x2C dependentEntries] of dependentEntriesByModule) {\n        if (!modulesInManualChunks.has(module)) {\n            yield { dependentEntries\x2C modules: [module] };\n        }\n    }\n}\n/**\n * This removes all unnecessary dynamic entries from the dependenEntries in its\n * first argument. It will also consume its second argument\x2C so if\n * dynamicallyDependentEntriesByDynamicEntry is ever needed after this\x2C we\n * should make a copy.\n */\nfunction removeUnnecessaryDependentEntries(chunks\x2C dynamicallyDependentEntriesByDynamicEntry\x2C dynamicImportsByEntry\x2C allEntries) {\n    // The indices correspond to the indices in allEntries. The chunks correspond\n    // to bits in the bigint values where chunk 0 is the lowest bit.\n    const staticDependenciesPerEntry = allEntries.map(() => 0n);\n    const alreadyLoadedChunksPerEntry = allEntries.map((_entry\x2C entryIndex) => dynamicallyDependentEntriesByDynamicEntry.has(entryIndex) ? -1n : 0n);\n    // This toggles the bits for each chunk that is a dependency of an entry\n    let chunkMask = 1n;\n    for (const { dependentEntries } of chunks) {\n        for (const entryIndex of dependentEntries) {\n            staticDependenciesPerEntry[entryIndex] |= chunkMask;\n        }\n        chunkMask <<= 1n;\n    }\n    // Warning: This will consume dynamicallyDependentEntriesByDynamicEntry.\n    // If we no longer want this\x2C we should make a copy here.\n    const updatedDynamicallyDependentEntriesByDynamicEntry = dynamicallyDependentEntriesByDynamicEntry;\n    for (const [dynamicEntryIndex\x2C updatedDynamicallyDependentEntries] of updatedDynamicallyDependentEntriesByDynamicEntry) {\n        updatedDynamicallyDependentEntriesByDynamicEntry.delete(dynamicEntryIndex);\n        const previousLoadedModules = alreadyLoadedChunksPerEntry[dynamicEntryIndex];\n        let newLoadedModules = previousLoadedModules;\n        for (const entryIndex of updatedDynamicallyDependentEntries) {\n            newLoadedModules &=\n                staticDependenciesPerEntry[entryIndex] | alreadyLoadedChunksPerEntry[entryIndex];\n        }\n        if (newLoadedModules !== previousLoadedModules) {\n            alreadyLoadedChunksPerEntry[dynamicEntryIndex] = newLoadedModules;\n            for (const dynamicImport of dynamicImportsByEntry[dynamicEntryIndex]) {\n                getOrCreate(updatedDynamicallyDependentEntriesByDynamicEntry\x2C dynamicImport\x2C (getNewSet)).add(dynamicEntryIndex);\n            }\n        }\n    }\n    // Remove entries from dependent entries if a chunk is already loaded without\n    // that entry.\n    chunkMask = 1n;\n    for (const { dependentEntries } of chunks) {\n        for (const entryIndex of dependentEntries) {\n            if ((alreadyLoadedChunksPerEntry[entryIndex] & chunkMask) === chunkMask) {\n                dependentEntries.delete(entryIndex);\n            }\n        }\n        chunkMask <<= 1n;\n    }\n}\n/**\n * This function tries to get rid of small chunks by merging them with other\n * chunks.\n *\n * We can only merge chunks safely if after the merge\x2C loading any entry point\n * in any allowed order will not trigger side effects that should not have been\n * triggered. While side effects are usually things like global function calls\x2C\n * global variable mutations or potentially thrown errors\x2C details do not\n * matter here\x2C and we just discern chunks without side effects (pure chunks)\n * from other chunks.\n *\n * As a first step\x2C we assign each pre-generated chunk with side effects a\n * label. I.e. we have side effect "A" if the non-pure chunk "A" is loaded.\n *\n * Now to determine the side effects of loading a chunk\x2C one also has to take\n * the side effects of its dependencies into account. So if A depends on B\n * (A -> B) and both have side effects\x2C loading A triggers effects AB.\n *\n * Now from the previous step we know that each chunk is uniquely determine by\n * the entry points that depend on it and cause it to load\x2C which we will call\n * its dependent entry points.\n *\n * E.g. if X -> A and Y -> A\x2C then the dependent entry points of A are XY.\n * Starting from that idea\x2C we can determine a set of chunks\u2014and thus a set\n * of side effects\u2014that must have been triggered if a certain chunk has been\n * loaded. Basically\x2C it is the intersection of all chunks loaded by the\n * dependent entry points of a given chunk. We call the corresponding side\n * effects the correlated side effects of that chunk.\n *\n * Example:\n * X -> ABC\x2C Y -> ADE\x2C A-> F\x2C B -> D\n * Then taking dependencies into account\x2C X -> ABCDF\x2C Y -> ADEF\n * The intersection is ADF. So we know that when A is loaded\x2C D and F must also\n * be in memory even though neither D nor A is a dependency of the other.\n * If all have side effects\x2C we call ADF the correlated side effects of A. The\n * correlated side effects need to remain constant when merging chunks.\n *\n * In contrast\x2C we have the dependency side effects of A\x2C which represents\n * the side effects we trigger if we directly load A. In this example\x2C the\n * dependency side effects are AF.\n * For entry chunks\x2C dependency and correlated side effects are the same.\n *\n * With these concepts\x2C merging chunks is allowed if the correlated side\n * effects of each entry do not change. Thus\x2C we are allowed to merge two\n * chunks if\n *\n * a) the dependency side effects of each chunk are a subset of the correlated\n *    side effects of the other chunk\x2C so no additional side effects are\n *    triggered for any entry\x2C or\n * b) The dependent entry points of chunk A are a subset of the dependent entry\n *    points of chunk B while the dependency side effects of A are a subset of\n *    the correlated side effects of B. Because in that scenario\x2C whenever A is\n *    loaded\x2C B is loaded as well. But there are cases when B is loaded where A\n *    is not loaded. So if we merge the chunks\x2C all dependency side effects of\n *    A will be added to the correlated side effects of B\x2C and as the latter is\n *    not allowed to change\x2C the former need to be a subset of the latter.\n *\n * Another consideration when merging small chunks into other chunks is to\n * avoid\n * that too much additional code is loaded. This is achieved when the dependent\n * entries of the small chunk are a subset of the dependent entries of the\n * other\n * chunk. Because then when the small chunk is loaded\x2C the other chunk was\n * loaded/in memory anyway\x2C so at most when the other chunk is loaded\x2C the\n * additional size of the small chunk is loaded unnecessarily.\n *\n * So the algorithm performs merges in two passes:\n *\n * 1. First we try to merge small chunks A only into other chunks B if the\n *    dependent entries of A are a subset of the dependent entries of B and the\n *    dependency side effects of A are a subset of the correlated side effects\n *    of B.\n * 2. Only then for all remaining small chunks\x2C we look for arbitrary merges\n *    following the rule (a)\x2C starting with the smallest chunks to look for\n *    possible merge targets.\n */\nfunction getOptimizedChunks(initialChunks\x2C numberOfEntries\x2C minChunkSize\x2C log) {\n    timeStart('optimize chunks'\x2C 3);\n    const chunkPartition = getPartitionedChunks(initialChunks\x2C numberOfEntries\x2C minChunkSize);\n    if (!chunkPartition) {\n        timeEnd('optimize chunks'\x2C 3);\n        return initialChunks; // the actual modules\n    }\n    minChunkSize > 1 &&\n        log('info'\x2C logOptimizeChunkStatus(initialChunks.length\x2C chunkPartition.small.size\x2C 'Initially'));\n    mergeChunks(chunkPartition\x2C minChunkSize);\n    minChunkSize > 1 &&\n        log('info'\x2C logOptimizeChunkStatus(chunkPartition.small.size + chunkPartition.big.size\x2C chunkPartition.small.size\x2C 'After merging chunks'));\n    timeEnd('optimize chunks'\x2C 3);\n    return [...chunkPartition.small\x2C ...chunkPartition.big];\n}\nfunction getPartitionedChunks(initialChunks\x2C numberOfEntries\x2C minChunkSize) {\n    const smallChunks = [];\n    const bigChunks = [];\n    const chunkByModule = new Map();\n    const sizeByAtom = [];\n    let sideEffectAtoms = 0n;\n    let containedAtoms = 1n;\n    for (const { dependentEntries\x2C modules } of initialChunks) {\n        const chunkDescription = {\n            containedAtoms\x2C\n            correlatedAtoms: 0n\x2C\n            dependencies: new Set()\x2C\n            dependentChunks: new Set()\x2C\n            dependentEntries\x2C\n            modules\x2C\n            pure: true\x2C\n            size: 0\n        };\n        let size = 0;\n        let pure = true;\n        for (const module of modules) {\n            chunkByModule.set(module\x2C chunkDescription);\n            // Unfortunately\x2C we cannot take tree-shaking into account here because\n            // rendering did not happen yet\x2C but we can detect empty modules\n            if (module.isIncluded()) {\n                pure && (pure = !module.hasEffects());\n                // we use a trivial size for the default minChunkSize to improve\n                // performance\n                size += minChunkSize > 1 ? module.estimateSize() : 1;\n            }\n        }\n        chunkDescription.pure = pure;\n        chunkDescription.size = size;\n        sizeByAtom.push(size);\n        if (!pure) {\n            sideEffectAtoms |= containedAtoms;\n        }\n        (size < minChunkSize ? smallChunks : bigChunks).push(chunkDescription);\n        containedAtoms <<= 1n;\n    }\n    // If there are no small chunks\x2C we will not optimize\n    if (smallChunks.length === 0) {\n        return null;\n    }\n    sideEffectAtoms |= addChunkDependenciesAndAtomsAndGetSideEffectAtoms([bigChunks\x2C smallChunks]\x2C chunkByModule\x2C numberOfEntries\x2C containedAtoms);\n    return {\n        big: new Set(bigChunks)\x2C\n        sideEffectAtoms\x2C\n        sizeByAtom\x2C\n        small: new Set(smallChunks)\n    };\n}\nfunction mergeChunks(chunkPartition\x2C minChunkSize) {\n    const { small } = chunkPartition;\n    for (const mergedChunk of small) {\n        const bestTargetChunk = findBestMergeTarget(mergedChunk\x2C chunkPartition\x2C \n        // In the default case\x2C we do not accept size increases\n        minChunkSize <= 1 ? 1 : Infinity);\n        if (bestTargetChunk) {\n            const { containedAtoms\x2C correlatedAtoms\x2C modules\x2C pure\x2C size } = mergedChunk;\n            small.delete(mergedChunk);\n            getChunksInPartition(bestTargetChunk\x2C minChunkSize\x2C chunkPartition).delete(bestTargetChunk);\n            bestTargetChunk.modules.push(...modules);\n            bestTargetChunk.size += size;\n            bestTargetChunk.pure && (bestTargetChunk.pure = pure);\n            const { dependencies\x2C dependentChunks\x2C dependentEntries } = bestTargetChunk;\n            bestTargetChunk.correlatedAtoms &= correlatedAtoms;\n            bestTargetChunk.containedAtoms |= containedAtoms;\n            for (const entry of mergedChunk.dependentEntries) {\n                dependentEntries.add(entry);\n            }\n            for (const dependency of mergedChunk.dependencies) {\n                dependencies.add(dependency);\n                dependency.dependentChunks.delete(mergedChunk);\n                dependency.dependentChunks.add(bestTargetChunk);\n            }\n            for (const dependentChunk of mergedChunk.dependentChunks) {\n                dependentChunks.add(dependentChunk);\n                dependentChunk.dependencies.delete(mergedChunk);\n                dependentChunk.dependencies.add(bestTargetChunk);\n            }\n            dependencies.delete(bestTargetChunk);\n            dependentChunks.delete(bestTargetChunk);\n            getChunksInPartition(bestTargetChunk\x2C minChunkSize\x2C chunkPartition).add(bestTargetChunk);\n        }\n    }\n}\nfunction addChunkDependenciesAndAtomsAndGetSideEffectAtoms(chunkLists\x2C chunkByModule\x2C numberOfEntries\x2C nextAtomSignature) {\n    const signatureByExternalModule = new Map();\n    let sideEffectAtoms = 0n;\n    const atomsByEntry = [];\n    for (let index = 0; index < numberOfEntries; index++) {\n        atomsByEntry.push(0n);\n    }\n    for (const chunks of chunkLists) {\n        chunks.sort(compareChunkSize);\n        for (const chunk of chunks) {\n            const { dependencies\x2C dependentEntries\x2C modules } = chunk;\n            for (const module of modules) {\n                for (const dependency of module.getDependenciesToBeIncluded()) {\n                    if (dependency instanceof ExternalModule) {\n                        if (dependency.info.moduleSideEffects) {\n                            chunk.containedAtoms |= getOrCreate(signatureByExternalModule\x2C dependency\x2C () => {\n                                const signature = nextAtomSignature;\n                                nextAtomSignature <<= 1n;\n                                sideEffectAtoms |= signature;\n                                return signature;\n                            });\n                        }\n                    }\n                    else {\n                        const dependencyChunk = chunkByModule.get(dependency);\n                        if (dependencyChunk && dependencyChunk !== chunk) {\n                            dependencies.add(dependencyChunk);\n                            dependencyChunk.dependentChunks.add(chunk);\n                        }\n                    }\n                }\n            }\n            const { containedAtoms } = chunk;\n            for (const entryIndex of dependentEntries) {\n                atomsByEntry[entryIndex] |= containedAtoms;\n            }\n        }\n    }\n    for (const chunks of chunkLists) {\n        for (const chunk of chunks) {\n            const { dependentEntries } = chunk;\n            // Correlated atoms are the intersection of all entry atoms\n            chunk.correlatedAtoms = -1n;\n            for (const entryIndex of dependentEntries) {\n                chunk.correlatedAtoms &= atomsByEntry[entryIndex];\n            }\n        }\n    }\n    return sideEffectAtoms;\n}\nfunction findBestMergeTarget(mergedChunk\x2C { big\x2C sideEffectAtoms\x2C sizeByAtom\x2C small }\x2C smallestAdditionalSize) {\n    let bestTargetChunk = null;\n    // In the default case\x2C we do not accept size increases\n    for (const targetChunk of concatLazy([small\x2C big])) {\n        if (mergedChunk === targetChunk)\n            continue;\n        const additionalSizeAfterMerge = getAdditionalSizeAfterMerge(mergedChunk\x2C targetChunk\x2C smallestAdditionalSize\x2C sideEffectAtoms\x2C sizeByAtom);\n        if (additionalSizeAfterMerge < smallestAdditionalSize) {\n            bestTargetChunk = targetChunk;\n            if (additionalSizeAfterMerge === 0)\n                break;\n            smallestAdditionalSize = additionalSizeAfterMerge;\n        }\n    }\n    return bestTargetChunk;\n}\nfunction getChunksInPartition(chunk\x2C minChunkSize\x2C chunkPartition) {\n    return chunk.size < minChunkSize ? chunkPartition.small : chunkPartition.big;\n}\nfunction compareChunkSize({ size: sizeA }\x2C { size: sizeB }) {\n    return sizeA - sizeB;\n}\n/**\n * Determine the additional unused code size that would be added by merging the\n * two chunks. This is not an exact measurement but rather an upper bound. If\n * the merge produces cycles or adds non-correlated side effects\x2C `Infinity`\n * is returned.\n * Merging will not produce cycles if none of the direct non-merged\n * dependencies of a chunk have the other chunk as a transitive dependency.\n */\nfunction getAdditionalSizeAfterMerge(mergedChunk\x2C targetChunk\x2C \n// The maximum additional unused code size allowed to be added by the merge\x2C\n// taking dependencies into account\x2C needs to be below this number\ncurrentAdditionalSize\x2C sideEffectAtoms\x2C sizeByAtom) {\n    const firstSize = getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(mergedChunk\x2C targetChunk\x2C currentAdditionalSize\x2C sideEffectAtoms\x2C sizeByAtom);\n    return firstSize < currentAdditionalSize\n        ? firstSize +\n            getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(targetChunk\x2C mergedChunk\x2C currentAdditionalSize - firstSize\x2C sideEffectAtoms\x2C sizeByAtom)\n        : Infinity;\n}\nfunction getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(dependentChunk\x2C dependencyChunk\x2C currentAdditionalSize\x2C sideEffectAtoms\x2C sizeByAtom) {\n    const { correlatedAtoms } = dependencyChunk;\n    let dependencyAtoms = dependentChunk.containedAtoms;\n    const dependentContainedSideEffects = dependencyAtoms & sideEffectAtoms;\n    if ((correlatedAtoms & dependentContainedSideEffects) !== dependentContainedSideEffects) {\n        return Infinity;\n    }\n    const chunksToCheck = new Set(dependentChunk.dependencies);\n    for (const { dependencies\x2C containedAtoms } of chunksToCheck) {\n        dependencyAtoms |= containedAtoms;\n        const containedSideEffects = containedAtoms & sideEffectAtoms;\n        if ((correlatedAtoms & containedSideEffects) !== containedSideEffects) {\n            return Infinity;\n        }\n        for (const dependency of dependencies) {\n            if (dependency === dependencyChunk) {\n                return Infinity;\n            }\n            chunksToCheck.add(dependency);\n        }\n    }\n    return getAtomsSizeIfBelowLimit(dependencyAtoms & ~correlatedAtoms\x2C currentAdditionalSize\x2C sizeByAtom);\n}\nfunction getAtomsSizeIfBelowLimit(atoms\x2C currentAdditionalSize\x2C sizeByAtom) {\n    let size = 0;\n    let atomIndex = 0;\n    let atomSignature = 1n;\n    const { length } = sizeByAtom;\n    for (; atomIndex < length; atomIndex++) {\n        if ((atoms & atomSignature) === atomSignature) {\n            size += sizeByAtom[atomIndex];\n        }\n        atomSignature <<= 1n;\n        if (size >= currentAdditionalSize) {\n            return Infinity;\n        }\n    }\n    return size;\n}\n\n// ported from https://github.com/substack/node-commondir\nfunction commondir(files) {\n    if (files.length === 0)\n        return '/';\n    if (files.length === 1)\n        return dirname(files[0]);\n    const commonSegments = files.slice(1).reduce((commonSegments\x2C file) => {\n        const pathSegements = file.split(/\\/+|\\\\+/);\n        let index;\n        for (index = 0; commonSegments[index] === pathSegements[index] &&\n            index < Math.min(commonSegments.length\x2C pathSegements.length); index++)\n            ;\n        return commonSegments.slice(0\x2C index);\n    }\x2C files[0].split(/\\/+|\\\\+/));\n    // Windows correctly handles paths with forward-slashes\n    return commonSegments.length > 1 ? commonSegments.join('/') : '/';\n}\n\nconst compareExecIndex = (unitA\x2C unitB) => unitA.execIndex > unitB.execIndex ? 1 : -1;\nfunction sortByExecutionOrder(units) {\n    units.sort(compareExecIndex);\n}\nfunction analyseModuleExecution(entryModules) {\n    let nextExecIndex = 0;\n    const cyclePaths = [];\n    const analysedModules = new Set();\n    const dynamicImports = new Set();\n    const parents = new Map();\n    const orderedModules = [];\n    const analyseModule = (module) => {\n        if (module instanceof Module) {\n            for (const dependency of module.dependencies) {\n                if (parents.has(dependency)) {\n                    if (!analysedModules.has(dependency)) {\n                        cyclePaths.push(getCyclePath(dependency\x2C module\x2C parents));\n                    }\n                    continue;\n                }\n                parents.set(dependency\x2C module);\n                analyseModule(dependency);\n            }\n            for (const dependency of module.implicitlyLoadedBefore) {\n                dynamicImports.add(dependency);\n            }\n            for (const { resolution } of module.dynamicImports) {\n                if (resolution instanceof Module) {\n                    dynamicImports.add(resolution);\n                }\n            }\n            orderedModules.push(module);\n        }\n        module.execIndex = nextExecIndex++;\n        analysedModules.add(module);\n    };\n    for (const currentEntry of entryModules) {\n        if (!parents.has(currentEntry)) {\n            parents.set(currentEntry\x2C null);\n            analyseModule(currentEntry);\n        }\n    }\n    for (const currentEntry of dynamicImports) {\n        if (!parents.has(currentEntry)) {\n            parents.set(currentEntry\x2C null);\n            analyseModule(currentEntry);\n        }\n    }\n    return { cyclePaths\x2C orderedModules };\n}\nfunction getCyclePath(module\x2C parent\x2C parents) {\n    const cycleSymbol = Symbol(module.id);\n    const path = [module.id];\n    let nextModule = parent;\n    module.cycles.add(cycleSymbol);\n    while (nextModule !== module) {\n        nextModule.cycles.add(cycleSymbol);\n        path.push(nextModule.id);\n        nextModule = parents.get(nextModule);\n    }\n    path.push(path[0]);\n    path.reverse();\n    return path;\n}\n\nfunction getGenerateCodeSnippets({ compact\x2C generatedCode: { arrowFunctions\x2C constBindings\x2C objectShorthand\x2C reservedNamesAsProps } }) {\n    const { _\x2C n\x2C s } = compact ? { _: ''\x2C n: ''\x2C s: '' } : { _: ' '\x2C n: '\\n'\x2C s: ';' };\n    const cnst = constBindings ? 'const' : 'var';\n    const getNonArrowFunctionIntro = (parameters\x2C { isAsync\x2C name }) => `${isAsync ? `async ` : ''}function${name ? ` ${name}` : ''}${_}(${parameters.join(`\x2C${_}`)})${_}`;\n    const getFunctionIntro = arrowFunctions\n        ? (parameters\x2C { isAsync\x2C name }) => {\n            const singleParameter = parameters.length === 1;\n            const asyncString = isAsync ? `async${singleParameter ? ' ' : _}` : '';\n            return `${name ? `${cnst} ${name}${_}=${_}` : ''}${asyncString}${singleParameter ? parameters[0] : `(${parameters.join(`\x2C${_}`)})`}${_}=>${_}`;\n        }\n        : getNonArrowFunctionIntro;\n    const getDirectReturnFunction = (parameters\x2C { functionReturn\x2C lineBreakIndent\x2C name }) => [\n        `${getFunctionIntro(parameters\x2C {\n            isAsync: false\x2C\n            name\n        })}${arrowFunctions\n            ? lineBreakIndent\n                ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}`\n                : ''\n            : `{${lineBreakIndent ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}` : _}${functionReturn ? 'return ' : ''}`}`\x2C\n        arrowFunctions\n            ? `${name ? ';' : ''}${lineBreakIndent ? `${n}${lineBreakIndent.base}` : ''}`\n            : `${s}${lineBreakIndent ? `${n}${lineBreakIndent.base}` : _}}`\n    ];\n    const isValidPropertyName = reservedNamesAsProps\n        ? (name) => validPropertyName.test(name)\n        : (name) => !RESERVED_NAMES$1.has(name) && validPropertyName.test(name);\n    return {\n        _\x2C\n        cnst\x2C\n        getDirectReturnFunction\x2C\n        getDirectReturnIifeLeft: (parameters\x2C returned\x2C { needsArrowReturnParens\x2C needsWrappedFunction }) => {\n            const [left\x2C right] = getDirectReturnFunction(parameters\x2C {\n                functionReturn: true\x2C\n                lineBreakIndent: null\x2C\n                name: null\n            });\n            return `${wrapIfNeeded(`${left}${wrapIfNeeded(returned\x2C arrowFunctions && needsArrowReturnParens)}${right}`\x2C arrowFunctions || needsWrappedFunction)}(`;\n        }\x2C\n        getFunctionIntro\x2C\n        getNonArrowFunctionIntro\x2C\n        getObject(fields\x2C { lineBreakIndent }) {\n            const prefix = lineBreakIndent ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}` : _;\n            return `{${fields\n                .map(([key\x2C value]) => {\n                if (key === null)\n                    return `${prefix}${value}`;\n                const needsQuotes = !isValidPropertyName(key);\n                return key === value && objectShorthand && !needsQuotes\n                    ? prefix + key\n                    : `${prefix}${needsQuotes ? `'${key}'` : key}:${_}${value}`;\n            })\n                .join(`\x2C`)}${fields.length === 0 ? '' : lineBreakIndent ? `${n}${lineBreakIndent.base}` : _}}`;\n        }\x2C\n        getPropertyAccess: (name) => isValidPropertyName(name) ? `.${name}` : `[${JSON.stringify(name)}]`\x2C\n        n\x2C\n        s\n    };\n}\nconst wrapIfNeeded = (code\x2C needsParens) => needsParens ? `(${code})` : code;\nconst validPropertyName = /^(?!\\d)[\\w$]+$/;\n\nclass Source {\n    constructor(filename\x2C content) {\n        this.isOriginal = true;\n        this.filename = filename;\n        this.content = content;\n    }\n    traceSegment(line\x2C column\x2C name) {\n        return { column\x2C line\x2C name\x2C source: this };\n    }\n}\nclass Link {\n    constructor(map\x2C sources) {\n        this.sources = sources;\n        this.names = map.names;\n        this.mappings = map.mappings;\n    }\n    traceMappings() {\n        const sources = [];\n        const sourceIndexMap = new Map();\n        const sourcesContent = [];\n        const names = [];\n        const nameIndexMap = new Map();\n        const mappings = [];\n        for (const line of this.mappings) {\n            const tracedLine = [];\n            for (const segment of line) {\n                if (segment.length === 1)\n                    continue;\n                const source = this.sources[segment[1]];\n                if (!source)\n                    continue;\n                const traced = source.traceSegment(segment[2]\x2C segment[3]\x2C segment.length === 5 ? this.names[segment[4]] : '');\n                if (traced) {\n                    const { column\x2C line\x2C name\x2C source: { content\x2C filename } } = traced;\n                    let sourceIndex = sourceIndexMap.get(filename);\n                    if (sourceIndex === undefined) {\n                        sourceIndex = sources.length;\n                        sources.push(filename);\n                        sourceIndexMap.set(filename\x2C sourceIndex);\n                        sourcesContent[sourceIndex] = content;\n                    }\n                    else if (sourcesContent[sourceIndex] == null) {\n                        sourcesContent[sourceIndex] = content;\n                    }\n                    else if (content != null && sourcesContent[sourceIndex] !== content) {\n                        return error(logConflictingSourcemapSources(filename));\n                    }\n                    const tracedSegment = [segment[0]\x2C sourceIndex\x2C line\x2C column];\n                    if (name) {\n                        let nameIndex = nameIndexMap.get(name);\n                        if (nameIndex === undefined) {\n                            nameIndex = names.length;\n                            names.push(name);\n                            nameIndexMap.set(name\x2C nameIndex);\n                        }\n                        tracedSegment[4] = nameIndex;\n                    }\n                    tracedLine.push(tracedSegment);\n                }\n            }\n            mappings.push(tracedLine);\n        }\n        return { mappings\x2C names\x2C sources\x2C sourcesContent };\n    }\n    traceSegment(line\x2C column\x2C name) {\n        const segments = this.mappings[line];\n        if (!segments)\n            return null;\n        // binary search through segments for the given column\n        let searchStart = 0;\n        let searchEnd = segments.length - 1;\n        while (searchStart <= searchEnd) {\n            const m = (searchStart + searchEnd) >> 1;\n            const segment = segments[m];\n            // If a sourcemap does not have sufficient resolution to contain a\n            // necessary mapping\x2C e.g. because it only contains line information\x2C we\n            // use the best approximation we could find\n            if (segment[0] === column || searchStart === searchEnd) {\n                if (segment.length == 1)\n                    return null;\n                const source = this.sources[segment[1]];\n                if (!source)\n                    return null;\n                return source.traceSegment(segment[2]\x2C segment[3]\x2C segment.length === 5 ? this.names[segment[4]] : name);\n            }\n            if (segment[0] > column) {\n                searchEnd = m - 1;\n            }\n            else {\n                searchStart = m + 1;\n            }\n        }\n        return null;\n    }\n}\nfunction getLinkMap(log) {\n    return function linkMap(source\x2C map) {\n        if (!map.missing) {\n            return new Link(map\x2C [source]);\n        }\n        log(LOGLEVEL_WARN\x2C logSourcemapBroken(map.plugin));\n        return new Link({\n            mappings: []\x2C\n            names: []\n        }\x2C [source]);\n    };\n}\nfunction getCollapsedSourcemap(id\x2C originalCode\x2C originalSourcemap\x2C sourcemapChain\x2C linkMap) {\n    let source;\n    if (originalSourcemap) {\n        const sources = originalSourcemap.sources;\n        const sourcesContent = originalSourcemap.sourcesContent || [];\n        const directory = dirname(id) || '.';\n        const sourceRoot = originalSourcemap.sourceRoot || '.';\n        const baseSources = sources.map((source\x2C index) => new Source(resolve(directory\x2C sourceRoot\x2C source)\x2C sourcesContent[index]));\n        source = new Link(originalSourcemap\x2C baseSources);\n    }\n    else {\n        source = new Source(id\x2C originalCode);\n    }\n    return sourcemapChain.reduce(linkMap\x2C source);\n}\nfunction collapseSourcemaps(file\x2C map\x2C modules\x2C bundleSourcemapChain\x2C excludeContent\x2C log) {\n    const linkMap = getLinkMap(log);\n    const moduleSources = modules\n        .filter(module => !module.excludeFromSourcemap)\n        .map(module => getCollapsedSourcemap(module.id\x2C module.originalCode\x2C module.originalSourcemap\x2C module.sourcemapChain\x2C linkMap));\n    const link = new Link(map\x2C moduleSources);\n    const source = bundleSourcemapChain.reduce(linkMap\x2C link);\n    let { sources\x2C sourcesContent\x2C names\x2C mappings } = source.traceMappings();\n    if (file) {\n        const directory = dirname(file);\n        sources = sources.map((source) => relative$1(directory\x2C source));\n        file = basename(file);\n    }\n    sourcesContent = (excludeContent ? null : sourcesContent);\n    for (const module of modules) {\n        resetSourcemapCache(module.originalSourcemap\x2C module.sourcemapChain);\n    }\n    return new SourceMap({ file\x2C mappings\x2C names\x2C sources\x2C sourcesContent });\n}\nfunction collapseSourcemap(id\x2C originalCode\x2C originalSourcemap\x2C sourcemapChain\x2C log) {\n    if (sourcemapChain.length === 0) {\n        return originalSourcemap;\n    }\n    const source = getCollapsedSourcemap(id\x2C originalCode\x2C originalSourcemap\x2C sourcemapChain\x2C getLinkMap(log));\n    const map = source.traceMappings();\n    return decodedSourcemap({ version: 3\x2C ...map });\n}\n\nconst createHash = () => createHash$1('sha256');\n\nasync function renderChunks(chunks\x2C bundle\x2C pluginDriver\x2C outputOptions\x2C log) {\n    timeStart('render chunks'\x2C 2);\n    reserveEntryChunksInBundle(chunks);\n    const renderedChunks = await Promise.all(chunks.map(chunk => chunk.render()));\n    timeEnd('render chunks'\x2C 2);\n    timeStart('transform chunks'\x2C 2);\n    const chunkGraph = getChunkGraph(chunks);\n    const { nonHashedChunksWithPlaceholders\x2C renderedChunksByPlaceholder\x2C hashDependenciesByPlaceholder } = await transformChunksAndGenerateContentHashes(renderedChunks\x2C chunkGraph\x2C outputOptions\x2C pluginDriver\x2C log);\n    const hashesByPlaceholder = generateFinalHashes(renderedChunksByPlaceholder\x2C hashDependenciesByPlaceholder\x2C bundle);\n    addChunksToBundle(renderedChunksByPlaceholder\x2C hashesByPlaceholder\x2C bundle\x2C nonHashedChunksWithPlaceholders\x2C pluginDriver\x2C outputOptions);\n    timeEnd('transform chunks'\x2C 2);\n}\nfunction reserveEntryChunksInBundle(chunks) {\n    for (const chunk of chunks) {\n        if (chunk.facadeModule && chunk.facadeModule.isUserDefinedEntryPoint) {\n            // reserves name in bundle as side effect if it does not contain a hash\n            chunk.getPreliminaryFileName();\n        }\n    }\n}\nfunction getChunkGraph(chunks) {\n    return Object.fromEntries(chunks.map(chunk => {\n        const renderedChunkInfo = chunk.getRenderedChunkInfo();\n        return [renderedChunkInfo.fileName\x2C renderedChunkInfo];\n    }));\n}\nasync function transformChunk(magicString\x2C fileName\x2C usedModules\x2C chunkGraph\x2C options\x2C outputPluginDriver\x2C log) {\n    let map = null;\n    const sourcemapChain = [];\n    let code = await outputPluginDriver.hookReduceArg0('renderChunk'\x2C [magicString.toString()\x2C chunkGraph[fileName]\x2C options\x2C { chunks: chunkGraph }]\x2C (code\x2C result\x2C plugin) => {\n        if (result == null)\n            return code;\n        if (typeof result === 'string')\n            result = {\n                code: result\x2C\n                map: undefined\n            };\n        // strict null check allows 'null' maps to not be pushed to the chain\x2C while 'undefined' gets the missing map warning\n        if (result.map !== null) {\n            const map = decodedSourcemap(result.map);\n            sourcemapChain.push(map || { missing: true\x2C plugin: plugin.name });\n        }\n        return result.code;\n    });\n    const { compact\x2C dir\x2C file\x2C sourcemap\x2C sourcemapExcludeSources\x2C sourcemapFile\x2C sourcemapPathTransform\x2C sourcemapIgnoreList } = options;\n    if (!compact && code[code.length - 1] !== '\\n')\n        code += '\\n';\n    if (sourcemap) {\n        timeStart('sourcemaps'\x2C 3);\n        let resultingFile;\n        if (file)\n            resultingFile = resolve(sourcemapFile || file);\n        else if (dir)\n            resultingFile = resolve(dir\x2C fileName);\n        else\n            resultingFile = resolve(fileName);\n        const decodedMap = magicString.generateDecodedMap({});\n        map = collapseSourcemaps(resultingFile\x2C decodedMap\x2C usedModules\x2C sourcemapChain\x2C sourcemapExcludeSources\x2C log);\n        for (let sourcesIndex = 0; sourcesIndex < map.sources.length; ++sourcesIndex) {\n            let sourcePath = map.sources[sourcesIndex];\n            const sourcemapPath = `${resultingFile}.map`;\n            const ignoreList = sourcemapIgnoreList(sourcePath\x2C sourcemapPath);\n            if (typeof ignoreList !== 'boolean') {\n                error(logFailedValidation('sourcemapIgnoreList function must return a boolean.'));\n            }\n            if (ignoreList) {\n                if (map.x_google_ignoreList === undefined) {\n                    map.x_google_ignoreList = [];\n                }\n                if (!map.x_google_ignoreList.includes(sourcesIndex)) {\n                    map.x_google_ignoreList.push(sourcesIndex);\n                }\n            }\n            if (sourcemapPathTransform) {\n                sourcePath = sourcemapPathTransform(sourcePath\x2C sourcemapPath);\n                if (typeof sourcePath !== 'string') {\n                    error(logFailedValidation(`sourcemapPathTransform function must return a string.`));\n                }\n            }\n            map.sources[sourcesIndex] = normalize(sourcePath);\n        }\n        timeEnd('sourcemaps'\x2C 3);\n    }\n    return {\n        code\x2C\n        map\n    };\n}\nasync function transformChunksAndGenerateContentHashes(renderedChunks\x2C chunkGraph\x2C outputOptions\x2C pluginDriver\x2C log) {\n    const nonHashedChunksWithPlaceholders = [];\n    const renderedChunksByPlaceholder = new Map();\n    const hashDependenciesByPlaceholder = new Map();\n    const placeholders = new Set();\n    for (const { preliminaryFileName: { hashPlaceholder } } of renderedChunks) {\n        if (hashPlaceholder)\n            placeholders.add(hashPlaceholder);\n    }\n    await Promise.all(renderedChunks.map(async ({ chunk\x2C preliminaryFileName: { fileName\x2C hashPlaceholder }\x2C magicString\x2C usedModules }) => {\n        const transformedChunk = {\n            chunk\x2C\n            fileName\x2C\n            ...(await transformChunk(magicString\x2C fileName\x2C usedModules\x2C chunkGraph\x2C outputOptions\x2C pluginDriver\x2C log))\n        };\n        const { code } = transformedChunk;\n        if (hashPlaceholder) {\n            // To create a reproducible content-only hash\x2C all placeholders are\n            // replaced with the same value before hashing\n            const { containedPlaceholders\x2C transformedCode } = replacePlaceholdersWithDefaultAndGetContainedPlaceholders(code\x2C placeholders);\n            const hash = createHash().update(transformedCode);\n            const hashAugmentation = pluginDriver.hookReduceValueSync('augmentChunkHash'\x2C ''\x2C [chunk.getRenderedChunkInfo()]\x2C (augmentation\x2C pluginHash) => {\n                if (pluginHash) {\n                    augmentation += pluginHash;\n                }\n                return augmentation;\n            });\n            if (hashAugmentation) {\n                hash.update(hashAugmentation);\n            }\n            renderedChunksByPlaceholder.set(hashPlaceholder\x2C transformedChunk);\n            hashDependenciesByPlaceholder.set(hashPlaceholder\x2C {\n                containedPlaceholders\x2C\n                contentHash: hash.digest('hex')\n            });\n        }\n        else {\n            nonHashedChunksWithPlaceholders.push(transformedChunk);\n        }\n    }));\n    return {\n        hashDependenciesByPlaceholder\x2C\n        nonHashedChunksWithPlaceholders\x2C\n        renderedChunksByPlaceholder\n    };\n}\nfunction generateFinalHashes(renderedChunksByPlaceholder\x2C hashDependenciesByPlaceholder\x2C bundle) {\n    const hashesByPlaceholder = new Map();\n    for (const [placeholder\x2C { fileName }] of renderedChunksByPlaceholder) {\n        let hash = createHash();\n        const hashDependencyPlaceholders = new Set([placeholder]);\n        for (const dependencyPlaceholder of hashDependencyPlaceholders) {\n            const { containedPlaceholders\x2C contentHash } = hashDependenciesByPlaceholder.get(dependencyPlaceholder);\n            hash.update(contentHash);\n            for (const containedPlaceholder of containedPlaceholders) {\n                // When looping over a map\x2C setting an entry only causes a new iteration if the key is new\n                hashDependencyPlaceholders.add(containedPlaceholder);\n            }\n        }\n        let finalFileName;\n        let finalHash;\n        do {\n            // In case of a hash collision\x2C create a hash of the hash\n            if (finalHash) {\n                hash = createHash().update(finalHash);\n            }\n            finalHash = hash.digest('hex').slice(0\x2C placeholder.length);\n            finalFileName = replaceSinglePlaceholder(fileName\x2C placeholder\x2C finalHash);\n        } while (bundle[lowercaseBundleKeys].has(finalFileName.toLowerCase()));\n        bundle[finalFileName] = FILE_PLACEHOLDER;\n        hashesByPlaceholder.set(placeholder\x2C finalHash);\n    }\n    return hashesByPlaceholder;\n}\nfunction addChunksToBundle(renderedChunksByPlaceholder\x2C hashesByPlaceholder\x2C bundle\x2C nonHashedChunksWithPlaceholders\x2C pluginDriver\x2C options) {\n    for (const { chunk\x2C code\x2C fileName\x2C map } of renderedChunksByPlaceholder.values()) {\n        let updatedCode = replacePlaceholders(code\x2C hashesByPlaceholder);\n        const finalFileName = replacePlaceholders(fileName\x2C hashesByPlaceholder);\n        if (map) {\n            map.file = replacePlaceholders(map.file\x2C hashesByPlaceholder);\n            updatedCode += emitSourceMapAndGetComment(finalFileName\x2C map\x2C pluginDriver\x2C options);\n        }\n        bundle[finalFileName] = chunk.finalizeChunk(updatedCode\x2C map\x2C hashesByPlaceholder);\n    }\n    for (const { chunk\x2C code\x2C fileName\x2C map } of nonHashedChunksWithPlaceholders) {\n        let updatedCode = hashesByPlaceholder.size > 0 ? replacePlaceholders(code\x2C hashesByPlaceholder) : code;\n        if (map) {\n            updatedCode += emitSourceMapAndGetComment(fileName\x2C map\x2C pluginDriver\x2C options);\n        }\n        bundle[fileName] = chunk.finalizeChunk(updatedCode\x2C map\x2C hashesByPlaceholder);\n    }\n}\nfunction emitSourceMapAndGetComment(fileName\x2C map\x2C pluginDriver\x2C { sourcemap\x2C sourcemapBaseUrl }) {\n    let url;\n    if (sourcemap === 'inline') {\n        url = map.toUrl();\n    }\n    else {\n        const sourcemapFileName = `${basename(fileName)}.map`;\n        url = sourcemapBaseUrl\n            ? new URL(sourcemapFileName\x2C sourcemapBaseUrl).toString()\n            : sourcemapFileName;\n        pluginDriver.emitFile({ fileName: `${fileName}.map`\x2C source: map.toString()\x2C type: 'asset' });\n    }\n    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}\\n`;\n}\n\nclass Bundle {\n    constructor(outputOptions\x2C unsetOptions\x2C inputOptions\x2C pluginDriver\x2C graph) {\n        this.outputOptions = outputOptions;\n        this.unsetOptions = unsetOptions;\n        this.inputOptions = inputOptions;\n        this.pluginDriver = pluginDriver;\n        this.graph = graph;\n        this.facadeChunkByModule = new Map();\n        this.includedNamespaces = new Set();\n    }\n    async generate(isWrite) {\n        timeStart('GENERATE'\x2C 1);\n        const outputBundleBase = Object.create(null);\n        const outputBundle = getOutputBundle(outputBundleBase);\n        this.pluginDriver.setOutputBundle(outputBundle\x2C this.outputOptions);\n        try {\n            timeStart('initialize render'\x2C 2);\n            await this.pluginDriver.hookParallel('renderStart'\x2C [this.outputOptions\x2C this.inputOptions]);\n            timeEnd('initialize render'\x2C 2);\n            timeStart('generate chunks'\x2C 2);\n            const getHashPlaceholder = getHashPlaceholderGenerator();\n            const chunks = await this.generateChunks(outputBundle\x2C getHashPlaceholder);\n            if (chunks.length > 1) {\n                validateOptionsForMultiChunkOutput(this.outputOptions\x2C this.inputOptions.onLog);\n            }\n            this.pluginDriver.setChunkInformation(this.facadeChunkByModule);\n            for (const chunk of chunks) {\n                chunk.generateExports();\n            }\n            timeEnd('generate chunks'\x2C 2);\n            await renderChunks(chunks\x2C outputBundle\x2C this.pluginDriver\x2C this.outputOptions\x2C this.inputOptions.onLog);\n        }\n        catch (error_) {\n            await this.pluginDriver.hookParallel('renderError'\x2C [error_]);\n            throw error_;\n        }\n        removeUnreferencedAssets(outputBundle);\n        timeStart('generate bundle'\x2C 2);\n        await this.pluginDriver.hookSeq('generateBundle'\x2C [\n            this.outputOptions\x2C\n            outputBundle\x2C\n            isWrite\n        ]);\n        this.finaliseAssets(outputBundle);\n        timeEnd('generate bundle'\x2C 2);\n        timeEnd('GENERATE'\x2C 1);\n        return outputBundleBase;\n    }\n    async addManualChunks(manualChunks) {\n        const manualChunkAliasByEntry = new Map();\n        const chunkEntries = await Promise.all(Object.entries(manualChunks).map(async ([alias\x2C files]) => ({\n            alias\x2C\n            entries: await this.graph.moduleLoader.addAdditionalModules(files\x2C true)\n        })));\n        for (const { alias\x2C entries } of chunkEntries) {\n            for (const entry of entries) {\n                addModuleToManualChunk(alias\x2C entry\x2C manualChunkAliasByEntry);\n            }\n        }\n        return manualChunkAliasByEntry;\n    }\n    assignManualChunks(getManualChunk) {\n        // eslint-disable-next-line unicorn/prefer-module\n        const manualChunkAliasesWithEntry = [];\n        const manualChunksApi = {\n            getModuleIds: () => this.graph.modulesById.keys()\x2C\n            getModuleInfo: this.graph.getModuleInfo\n        };\n        for (const module of this.graph.modulesById.values()) {\n            if (module instanceof Module) {\n                const manualChunkAlias = getManualChunk(module.id\x2C manualChunksApi);\n                if (typeof manualChunkAlias === 'string') {\n                    manualChunkAliasesWithEntry.push([manualChunkAlias\x2C module]);\n                }\n            }\n        }\n        manualChunkAliasesWithEntry.sort(([aliasA]\x2C [aliasB]) => aliasA > aliasB ? 1 : aliasA < aliasB ? -1 : 0);\n        const manualChunkAliasByEntry = new Map();\n        for (const [alias\x2C module] of manualChunkAliasesWithEntry) {\n            addModuleToManualChunk(alias\x2C module\x2C manualChunkAliasByEntry);\n        }\n        return manualChunkAliasByEntry;\n    }\n    finaliseAssets(bundle) {\n        if (this.outputOptions.validate) {\n            for (const file of Object.values(bundle)) {\n                if ('code' in file) {\n                    try {\n                        this.graph.contextParse(file.code\x2C {\n                            ecmaVersion: 'latest'\n                        });\n                    }\n                    catch (error_) {\n                        this.inputOptions.onLog(LOGLEVEL_WARN\x2C logChunkInvalid(file\x2C error_));\n                    }\n                }\n            }\n        }\n        this.pluginDriver.finaliseAssets();\n    }\n    async generateChunks(bundle\x2C getHashPlaceholder) {\n        const { experimentalMinChunkSize\x2C inlineDynamicImports\x2C manualChunks\x2C preserveModules } = this.outputOptions;\n        const manualChunkAliasByEntry = typeof manualChunks === 'object'\n            ? await this.addManualChunks(manualChunks)\n            : this.assignManualChunks(manualChunks);\n        const snippets = getGenerateCodeSnippets(this.outputOptions);\n        const includedModules = getIncludedModules(this.graph.modulesById);\n        const inputBase = commondir(getAbsoluteEntryModulePaths(includedModules\x2C preserveModules));\n        const externalChunkByModule = getExternalChunkByModule(this.graph.modulesById\x2C this.outputOptions\x2C inputBase);\n        const chunks = [];\n        const chunkByModule = new Map();\n        for (const { alias\x2C modules } of inlineDynamicImports\n            ? [{ alias: null\x2C modules: includedModules }]\n            : preserveModules\n                ? includedModules.map(module => ({ alias: null\x2C modules: [module] }))\n                : getChunkAssignments(this.graph.entryModules\x2C manualChunkAliasByEntry\x2C experimentalMinChunkSize\x2C this.inputOptions.onLog)) {\n            sortByExecutionOrder(modules);\n            const chunk = new Chunk(modules\x2C this.inputOptions\x2C this.outputOptions\x2C this.unsetOptions\x2C this.pluginDriver\x2C this.graph.modulesById\x2C chunkByModule\x2C externalChunkByModule\x2C this.facadeChunkByModule\x2C this.includedNamespaces\x2C alias\x2C getHashPlaceholder\x2C bundle\x2C inputBase\x2C snippets);\n            chunks.push(chunk);\n        }\n        for (const chunk of chunks) {\n            chunk.link();\n        }\n        const facades = [];\n        for (const chunk of chunks) {\n            facades.push(...chunk.generateFacades());\n        }\n        return [...chunks\x2C ...facades];\n    }\n}\nfunction validateOptionsForMultiChunkOutput(outputOptions\x2C log) {\n    if (outputOptions.format === 'umd' || outputOptions.format === 'iife')\n        return error(logInvalidOption('output.format'\x2C URL_OUTPUT_FORMAT\x2C 'UMD and IIFE output formats are not supported for code-splitting builds'\x2C outputOptions.format));\n    if (typeof outputOptions.file === 'string')\n        return error(logInvalidOption('output.file'\x2C URL_OUTPUT_DIR\x2C 'when building multiple chunks\x2C the "output.dir" option must be used\x2C not "output.file". To inline dynamic imports\x2C set the "inlineDynamicImports" option'));\n    if (outputOptions.sourcemapFile)\n        return error(logInvalidOption('output.sourcemapFile'\x2C URL_OUTPUT_SOURCEMAPFILE\x2C '"output.sourcemapFile" is only supported for single-file builds'));\n    if (!outputOptions.amd.autoId && outputOptions.amd.id)\n        log(LOGLEVEL_WARN\x2C logInvalidOption('output.amd.id'\x2C URL_OUTPUT_AMD_ID\x2C 'this option is only properly supported for single-file builds. Use "output.amd.autoId" and "output.amd.basePath" instead'));\n}\nfunction getIncludedModules(modulesById) {\n    const includedModules = [];\n    for (const module of modulesById.values()) {\n        if (module instanceof Module &&\n            (module.isIncluded() || module.info.isEntry || module.includedDynamicImporters.length > 0)) {\n            includedModules.push(module);\n        }\n    }\n    return includedModules;\n}\nfunction getAbsoluteEntryModulePaths(includedModules\x2C preserveModules) {\n    const absoluteEntryModulePaths = [];\n    for (const module of includedModules) {\n        if ((module.info.isEntry || preserveModules) && isAbsolute(module.id)) {\n            absoluteEntryModulePaths.push(module.id);\n        }\n    }\n    return absoluteEntryModulePaths;\n}\nfunction getExternalChunkByModule(modulesById\x2C outputOptions\x2C inputBase) {\n    const externalChunkByModule = new Map();\n    for (const module of modulesById.values()) {\n        if (module instanceof ExternalModule) {\n            externalChunkByModule.set(module\x2C new ExternalChunk(module\x2C outputOptions\x2C inputBase));\n        }\n    }\n    return externalChunkByModule;\n}\nfunction addModuleToManualChunk(alias\x2C module\x2C manualChunkAliasByEntry) {\n    const existingAlias = manualChunkAliasByEntry.get(module);\n    if (typeof existingAlias === 'string' && existingAlias !== alias) {\n        return error(logCannotAssignModuleToChunk(module.id\x2C alias\x2C existingAlias));\n    }\n    manualChunkAliasByEntry.set(module\x2C alias);\n}\n\n// This file was generated. Do not modify manually!\nvar astralIdentifierCodes = [509\x2C 0\x2C 227\x2C 0\x2C 150\x2C 4\x2C 294\x2C 9\x2C 1368\x2C 2\x2C 2\x2C 1\x2C 6\x2C 3\x2C 41\x2C 2\x2C 5\x2C 0\x2C 166\x2C 1\x2C 574\x2C 3\x2C 9\x2C 9\x2C 370\x2C 1\x2C 81\x2C 2\x2C 71\x2C 10\x2C 50\x2C 3\x2C 123\x2C 2\x2C 54\x2C 14\x2C 32\x2C 10\x2C 3\x2C 1\x2C 11\x2C 3\x2C 46\x2C 10\x2C 8\x2C 0\x2C 46\x2C 9\x2C 7\x2C 2\x2C 37\x2C 13\x2C 2\x2C 9\x2C 6\x2C 1\x2C 45\x2C 0\x2C 13\x2C 2\x2C 49\x2C 13\x2C 9\x2C 3\x2C 2\x2C 11\x2C 83\x2C 11\x2C 7\x2C 0\x2C 3\x2C 0\x2C 158\x2C 11\x2C 6\x2C 9\x2C 7\x2C 3\x2C 56\x2C 1\x2C 2\x2C 6\x2C 3\x2C 1\x2C 3\x2C 2\x2C 10\x2C 0\x2C 11\x2C 1\x2C 3\x2C 6\x2C 4\x2C 4\x2C 193\x2C 17\x2C 10\x2C 9\x2C 5\x2C 0\x2C 82\x2C 19\x2C 13\x2C 9\x2C 214\x2C 6\x2C 3\x2C 8\x2C 28\x2C 1\x2C 83\x2C 16\x2C 16\x2C 9\x2C 82\x2C 12\x2C 9\x2C 9\x2C 84\x2C 14\x2C 5\x2C 9\x2C 243\x2C 14\x2C 166\x2C 9\x2C 71\x2C 5\x2C 2\x2C 1\x2C 3\x2C 3\x2C 2\x2C 0\x2C 2\x2C 1\x2C 13\x2C 9\x2C 120\x2C 6\x2C 3\x2C 6\x2C 4\x2C 0\x2C 29\x2C 9\x2C 41\x2C 6\x2C 2\x2C 3\x2C 9\x2C 0\x2C 10\x2C 10\x2C 47\x2C 15\x2C 406\x2C 7\x2C 2\x2C 7\x2C 17\x2C 9\x2C 57\x2C 21\x2C 2\x2C 13\x2C 123\x2C 5\x2C 4\x2C 0\x2C 2\x2C 1\x2C 2\x2C 6\x2C 2\x2C 0\x2C 9\x2C 9\x2C 49\x2C 4\x2C 2\x2C 1\x2C 2\x2C 4\x2C 9\x2C 9\x2C 330\x2C 3\x2C 10\x2C 1\x2C 2\x2C 0\x2C 49\x2C 6\x2C 4\x2C 4\x2C 14\x2C 9\x2C 5351\x2C 0\x2C 7\x2C 14\x2C 13835\x2C 9\x2C 87\x2C 9\x2C 39\x2C 4\x2C 60\x2C 6\x2C 26\x2C 9\x2C 1014\x2C 0\x2C 2\x2C 54\x2C 8\x2C 3\x2C 82\x2C 0\x2C 12\x2C 1\x2C 19628\x2C 1\x2C 4706\x2C 45\x2C 3\x2C 22\x2C 543\x2C 4\x2C 4\x2C 5\x2C 9\x2C 7\x2C 3\x2C 6\x2C 31\x2C 3\x2C 149\x2C 2\x2C 1418\x2C 49\x2C 513\x2C 54\x2C 5\x2C 49\x2C 9\x2C 0\x2C 15\x2C 0\x2C 23\x2C 4\x2C 2\x2C 14\x2C 1361\x2C 6\x2C 2\x2C 16\x2C 3\x2C 6\x2C 2\x2C 1\x2C 2\x2C 4\x2C 101\x2C 0\x2C 161\x2C 6\x2C 10\x2C 9\x2C 357\x2C 0\x2C 62\x2C 13\x2C 499\x2C 13\x2C 983\x2C 6\x2C 110\x2C 6\x2C 6\x2C 9\x2C 4759\x2C 9\x2C 787719\x2C 239];\n\n// This file was generated. Do not modify manually!\nvar astralIdentifierStartCodes = [0\x2C 11\x2C 2\x2C 25\x2C 2\x2C 18\x2C 2\x2C 1\x2C 2\x2C 14\x2C 3\x2C 13\x2C 35\x2C 122\x2C 70\x2C 52\x2C 268\x2C 28\x2C 4\x2C 48\x2C 48\x2C 31\x2C 14\x2C 29\x2C 6\x2C 37\x2C 11\x2C 29\x2C 3\x2C 35\x2C 5\x2C 7\x2C 2\x2C 4\x2C 43\x2C 157\x2C 19\x2C 35\x2C 5\x2C 35\x2C 5\x2C 39\x2C 9\x2C 51\x2C 13\x2C 10\x2C 2\x2C 14\x2C 2\x2C 6\x2C 2\x2C 1\x2C 2\x2C 10\x2C 2\x2C 14\x2C 2\x2C 6\x2C 2\x2C 1\x2C 68\x2C 310\x2C 10\x2C 21\x2C 11\x2C 7\x2C 25\x2C 5\x2C 2\x2C 41\x2C 2\x2C 8\x2C 70\x2C 5\x2C 3\x2C 0\x2C 2\x2C 43\x2C 2\x2C 1\x2C 4\x2C 0\x2C 3\x2C 22\x2C 11\x2C 22\x2C 10\x2C 30\x2C 66\x2C 18\x2C 2\x2C 1\x2C 11\x2C 21\x2C 11\x2C 25\x2C 71\x2C 55\x2C 7\x2C 1\x2C 65\x2C 0\x2C 16\x2C 3\x2C 2\x2C 2\x2C 2\x2C 28\x2C 43\x2C 28\x2C 4\x2C 28\x2C 36\x2C 7\x2C 2\x2C 27\x2C 28\x2C 53\x2C 11\x2C 21\x2C 11\x2C 18\x2C 14\x2C 17\x2C 111\x2C 72\x2C 56\x2C 50\x2C 14\x2C 50\x2C 14\x2C 35\x2C 349\x2C 41\x2C 7\x2C 1\x2C 79\x2C 28\x2C 11\x2C 0\x2C 9\x2C 21\x2C 43\x2C 17\x2C 47\x2C 20\x2C 28\x2C 22\x2C 13\x2C 52\x2C 58\x2C 1\x2C 3\x2C 0\x2C 14\x2C 44\x2C 33\x2C 24\x2C 27\x2C 35\x2C 30\x2C 0\x2C 3\x2C 0\x2C 9\x2C 34\x2C 4\x2C 0\x2C 13\x2C 47\x2C 15\x2C 3\x2C 22\x2C 0\x2C 2\x2C 0\x2C 36\x2C 17\x2C 2\x2C 24\x2C 20\x2C 1\x2C 64\x2C 6\x2C 2\x2C 0\x2C 2\x2C 3\x2C 2\x2C 14\x2C 2\x2C 9\x2C 8\x2C 46\x2C 39\x2C 7\x2C 3\x2C 1\x2C 3\x2C 21\x2C 2\x2C 6\x2C 2\x2C 1\x2C 2\x2C 4\x2C 4\x2C 0\x2C 19\x2C 0\x2C 13\x2C 4\x2C 159\x2C 52\x2C 19\x2C 3\x2C 21\x2C 2\x2C 31\x2C 47\x2C 21\x2C 1\x2C 2\x2C 0\x2C 185\x2C 46\x2C 42\x2C 3\x2C 37\x2C 47\x2C 21\x2C 0\x2C 60\x2C 42\x2C 14\x2C 0\x2C 72\x2C 26\x2C 38\x2C 6\x2C 186\x2C 43\x2C 117\x2C 63\x2C 32\x2C 7\x2C 3\x2C 0\x2C 3\x2C 7\x2C 2\x2C 1\x2C 2\x2C 23\x2C 16\x2C 0\x2C 2\x2C 0\x2C 95\x2C 7\x2C 3\x2C 38\x2C 17\x2C 0\x2C 2\x2C 0\x2C 29\x2C 0\x2C 11\x2C 39\x2C 8\x2C 0\x2C 22\x2C 0\x2C 12\x2C 45\x2C 20\x2C 0\x2C 19\x2C 72\x2C 264\x2C 8\x2C 2\x2C 36\x2C 18\x2C 0\x2C 50\x2C 29\x2C 113\x2C 6\x2C 2\x2C 1\x2C 2\x2C 37\x2C 22\x2C 0\x2C 26\x2C 5\x2C 2\x2C 1\x2C 2\x2C 31\x2C 15\x2C 0\x2C 328\x2C 18\x2C 16\x2C 0\x2C 2\x2C 12\x2C 2\x2C 33\x2C 125\x2C 0\x2C 80\x2C 921\x2C 103\x2C 110\x2C 18\x2C 195\x2C 2637\x2C 96\x2C 16\x2C 1071\x2C 18\x2C 5\x2C 4026\x2C 582\x2C 8634\x2C 568\x2C 8\x2C 30\x2C 18\x2C 78\x2C 18\x2C 29\x2C 19\x2C 47\x2C 17\x2C 3\x2C 32\x2C 20\x2C 6\x2C 18\x2C 689\x2C 63\x2C 129\x2C 74\x2C 6\x2C 0\x2C 67\x2C 12\x2C 65\x2C 1\x2C 2\x2C 0\x2C 29\x2C 6135\x2C 9\x2C 1237\x2C 43\x2C 8\x2C 8936\x2C 3\x2C 2\x2C 6\x2C 2\x2C 1\x2C 2\x2C 290\x2C 16\x2C 0\x2C 30\x2C 2\x2C 3\x2C 0\x2C 15\x2C 3\x2C 9\x2C 395\x2C 2309\x2C 106\x2C 6\x2C 12\x2C 4\x2C 8\x2C 8\x2C 9\x2C 5991\x2C 84\x2C 2\x2C 70\x2C 2\x2C 1\x2C 3\x2C 0\x2C 3\x2C 1\x2C 3\x2C 3\x2C 2\x2C 11\x2C 2\x2C 0\x2C 2\x2C 6\x2C 2\x2C 64\x2C 2\x2C 3\x2C 3\x2C 7\x2C 2\x2C 6\x2C 2\x2C 27\x2C 2\x2C 3\x2C 2\x2C 4\x2C 2\x2C 0\x2C 4\x2C 6\x2C 2\x2C 339\x2C 3\x2C 24\x2C 2\x2C 24\x2C 2\x2C 30\x2C 2\x2C 24\x2C 2\x2C 30\x2C 2\x2C 24\x2C 2\x2C 30\x2C 2\x2C 24\x2C 2\x2C 30\x2C 2\x2C 24\x2C 2\x2C 7\x2C 1845\x2C 30\x2C 7\x2C 5\x2C 262\x2C 61\x2C 147\x2C 44\x2C 11\x2C 6\x2C 17\x2C 0\x2C 322\x2C 29\x2C 19\x2C 43\x2C 485\x2C 27\x2C 757\x2C 6\x2C 2\x2C 3\x2C 2\x2C 1\x2C 2\x2C 14\x2C 2\x2C 196\x2C 60\x2C 67\x2C 8\x2C 0\x2C 1205\x2C 3\x2C 2\x2C 26\x2C 2\x2C 1\x2C 2\x2C 0\x2C 3\x2C 0\x2C 2\x2C 9\x2C 2\x2C 3\x2C 2\x2C 0\x2C 2\x2C 0\x2C 7\x2C 0\x2C 5\x2C 0\x2C 2\x2C 0\x2C 2\x2C 0\x2C 2\x2C 2\x2C 2\x2C 1\x2C 2\x2C 0\x2C 3\x2C 0\x2C 2\x2C 0\x2C 2\x2C 0\x2C 2\x2C 0\x2C 2\x2C 0\x2C 2\x2C 1\x2C 2\x2C 0\x2C 3\x2C 3\x2C 2\x2C 6\x2C 2\x2C 3\x2C 2\x2C 3\x2C 2\x2C 0\x2C 2\x2C 9\x2C 2\x2C 16\x2C 6\x2C 2\x2C 2\x2C 4\x2C 2\x2C 16\x2C 4421\x2C 42719\x2C 33\x2C 4153\x2C 7\x2C 221\x2C 3\x2C 5761\x2C 15\x2C 7472\x2C 3104\x2C 541\x2C 1507\x2C 4938\x2C 6\x2C 4191];\n\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierChars = "\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f";\n\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000\x2C and each pair of numbers represents an\n// offset to the next range\x2C and then a size of the range.\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"\x2C\n  5: "class enum extends super const export import"\x2C\n  6: "enum"\x2C\n  strict: "implements interface let package private protected public static yield"\x2C\n  strictBind: "eval arguments"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";\n\nvar keywords$1 = {\n  5: ecma5AndLessKeywords\x2C\n  "5module": ecma5AndLessKeywords + " export import"\x2C\n  6: ecma5AndLessKeywords + " const class extends export import super"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\nvar nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");\nvar nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code\x2C set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n  return false\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code\x2C astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code\x2C astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code\x2C astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code\x2C astralIdentifierStartCodes) || isInAstralSet(code\x2C astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained\x2C information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore\x2C to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus\x2C a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop\x2C which is important\n// to know when parsing a label\x2C in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label\x2C conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name\x2C prec) {\n  return new TokenType(name\x2C {beforeExpr: true\x2C binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}\x2C startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name\x2C options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords[name] = new TokenType(name\x2C options)\n}\n\nvar types$1 = {\n  num: new TokenType("num"\x2C startsExpr)\x2C\n  regexp: new TokenType("regexp"\x2C startsExpr)\x2C\n  string: new TokenType("string"\x2C startsExpr)\x2C\n  name: new TokenType("name"\x2C startsExpr)\x2C\n  privateId: new TokenType("privateId"\x2C startsExpr)\x2C\n  eof: new TokenType("eof")\x2C\n\n  // Punctuation token types.\n  bracketL: new TokenType("["\x2C {beforeExpr: true\x2C startsExpr: true})\x2C\n  bracketR: new TokenType("]")\x2C\n  braceL: new TokenType("{"\x2C {beforeExpr: true\x2C startsExpr: true})\x2C\n  braceR: new TokenType("}")\x2C\n  parenL: new TokenType("("\x2C {beforeExpr: true\x2C startsExpr: true})\x2C\n  parenR: new TokenType(")")\x2C\n  comma: new TokenType("\x2C"\x2C beforeExpr)\x2C\n  semi: new TokenType(";"\x2C beforeExpr)\x2C\n  colon: new TokenType(":"\x2C beforeExpr)\x2C\n  dot: new TokenType(".")\x2C\n  question: new TokenType("?"\x2C beforeExpr)\x2C\n  questionDot: new TokenType("?.")\x2C\n  arrow: new TokenType("=>"\x2C beforeExpr)\x2C\n  template: new TokenType("template")\x2C\n  invalidTemplate: new TokenType("invalidTemplate")\x2C\n  ellipsis: new TokenType("..."\x2C beforeExpr)\x2C\n  backQuote: new TokenType("`"\x2C startsExpr)\x2C\n  dollarBraceL: new TokenType("${"\x2C {beforeExpr: true\x2C startsExpr: true})\x2C\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`\x2C when present\x2C specifies that this operator is a binary\n  // operator\x2C and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`\x2C `+=`\x2C `-=` etcetera\x2C which act as\n  // binary operators with a very low precedence\x2C that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType("="\x2C {beforeExpr: true\x2C isAssign: true})\x2C\n  assign: new TokenType("_="\x2C {beforeExpr: true\x2C isAssign: true})\x2C\n  incDec: new TokenType("++/--"\x2C {prefix: true\x2C postfix: true\x2C startsExpr: true})\x2C\n  prefix: new TokenType("!/~"\x2C {beforeExpr: true\x2C prefix: true\x2C startsExpr: true})\x2C\n  logicalOR: binop("||"\x2C 1)\x2C\n  logicalAND: binop("&&"\x2C 2)\x2C\n  bitwiseOR: binop("|"\x2C 3)\x2C\n  bitwiseXOR: binop("^"\x2C 4)\x2C\n  bitwiseAND: binop("&"\x2C 5)\x2C\n  equality: binop("==/!=/===/!=="\x2C 6)\x2C\n  relational: binop("</>/<=/>="\x2C 7)\x2C\n  bitShift: binop("<</>>/>>>"\x2C 8)\x2C\n  plusMin: new TokenType("+/-"\x2C {beforeExpr: true\x2C binop: 9\x2C prefix: true\x2C startsExpr: true})\x2C\n  modulo: binop("%"\x2C 10)\x2C\n  star: binop("*"\x2C 10)\x2C\n  slash: binop("/"\x2C 10)\x2C\n  starstar: new TokenType("**"\x2C {beforeExpr: true})\x2C\n  coalesce: binop("??"\x2C 1)\x2C\n\n  // Keyword token types.\n  _break: kw("break")\x2C\n  _case: kw("case"\x2C beforeExpr)\x2C\n  _catch: kw("catch")\x2C\n  _continue: kw("continue")\x2C\n  _debugger: kw("debugger")\x2C\n  _default: kw("default"\x2C beforeExpr)\x2C\n  _do: kw("do"\x2C {isLoop: true\x2C beforeExpr: true})\x2C\n  _else: kw("else"\x2C beforeExpr)\x2C\n  _finally: kw("finally")\x2C\n  _for: kw("for"\x2C {isLoop: true})\x2C\n  _function: kw("function"\x2C startsExpr)\x2C\n  _if: kw("if")\x2C\n  _return: kw("return"\x2C beforeExpr)\x2C\n  _switch: kw("switch")\x2C\n  _throw: kw("throw"\x2C beforeExpr)\x2C\n  _try: kw("try")\x2C\n  _var: kw("var")\x2C\n  _const: kw("const")\x2C\n  _while: kw("while"\x2C {isLoop: true})\x2C\n  _with: kw("with")\x2C\n  _new: kw("new"\x2C {beforeExpr: true\x2C startsExpr: true})\x2C\n  _this: kw("this"\x2C startsExpr)\x2C\n  _super: kw("super"\x2C startsExpr)\x2C\n  _class: kw("class"\x2C startsExpr)\x2C\n  _extends: kw("extends"\x2C beforeExpr)\x2C\n  _export: kw("export")\x2C\n  _import: kw("import"\x2C startsExpr)\x2C\n  _null: kw("null"\x2C startsExpr)\x2C\n  _true: kw("true"\x2C startsExpr)\x2C\n  _false: kw("false"\x2C startsExpr)\x2C\n  _in: kw("in"\x2C {beforeExpr: true\x2C binop: 7})\x2C\n  _instanceof: kw("instanceof"\x2C {beforeExpr: true\x2C binop: 7})\x2C\n  _typeof: kw("typeof"\x2C {beforeExpr: true\x2C prefix: true\x2C startsExpr: true})\x2C\n  _void: kw("void"\x2C {beforeExpr: true\x2C prefix: true\x2C startsExpr: true})\x2C\n  _delete: kw("delete"\x2C {beforeExpr: true\x2C prefix: true\x2C startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source\x2C "g");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nfunction nextLineBreak(code\x2C from\x2C end) {\n  if ( end === void 0 ) end = code.length;\n\n  for (var i = from; i < end; i++) {\n    var next = code.charCodeAt(i);\n    if (isNewLine(next))\n      { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n  }\n  return -1\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\nvar hasOwn = Object.hasOwn || (function (obj\x2C propName) { return (\n  hasOwnProperty.call(obj\x2C propName)\n); });\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === "[object Array]"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp("^(?:" + words.replace(/ /g\x2C "|") + ")$")\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800\x2C (code & 1023) + 0xDC00)\n}\n\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n// These are used when `options.locations` is on\x2C for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line\x2C col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line\x2C this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p\x2C start\x2C end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input\x2C offset) {\n  for (var line = 1\x2C cur = 0;;) {\n    var nextBreak = nextLineBreak(input\x2C cur\x2C offset);\n    if (nextBreak < 0) { return new Position(line\x2C offset - cur) }\n    ++line;\n    cur = nextBreak;\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3\x2C 5\x2C 6 (or 2015)\x2C 7 (2016)\x2C 8 (2017)\x2C 9 (2018)\x2C 10\n  // (2019)\x2C 11 (2020)\x2C 12 (2021)\x2C 13 (2022)\x2C 14 (2023)\x2C or `"latest"`\n  // (the latest version the library supports). This influences\n  // support for strict mode\x2C the set of reserved words\x2C and support\n  // for new syntax features.\n  ecmaVersion: null\x2C\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `"script"` or `"module"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: "script"\x2C\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset\x2C and if `locations` is\n  // enabled\x2C it is given the location as a `{line\x2C column}` object\n  // as second argument.\n  onInsertedSemicolon: null\x2C\n  // `onTrailingComma` is similar to `onInsertedSemicolon`\x2C but for\n  // trailing commas.\n  onTrailingComma: null\x2C\n  // By default\x2C reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value "never"\x2C reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null\x2C\n  // When enabled\x2C a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false\x2C\n  // When enabled\x2C import/export statements are not constrained to\n  // appearing at the top of the program\x2C and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false\x2C\n  // By default\x2C await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled\x2C await identifiers are allowed to appear at the top-level scope\x2C\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null\x2C\n  // When enabled\x2C super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null\x2C\n  // When enabled\x2C hashbang directive in the beginning of file is\n  // allowed and treated as a line comment. Enabled by default when\n  // `ecmaVersion` >= 2023.\n  allowHashBang: false\x2C\n  // By default\x2C the parser will verify that private properties are\n  // only used in places where they are valid and have been declared.\n  // Set this to false to turn such checks off.\n  checkPrivateFields: true\x2C\n  // When `locations` is on\x2C `loc` properties holding objects with\n  // `start` and `end` properties in `{line\x2C column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false\x2C\n  // A function can be passed as `onToken` option\x2C which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback\u2014that will corrupt its internal state.\n  onToken: null\x2C\n  // A function can be passed as `onComment` option\x2C which will\n  // cause Acorn to call that function with `(block\x2C text\x2C start\x2C\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment\x2C\n  // `text` is the content of the comment\x2C and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on\x2C two more parameters are\n  // passed\x2C the full `{line\x2C column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback\u2014that will corrupt its internal state.\n  onComment: null\x2C\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node\x2C rather than\n  // the `loc` object\x2C which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start\x2C\n  // end]` array with the same numbers\x2C set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false\x2C\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null\x2C\n  // When `locations` is on\x2C you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null\x2C\n  // This value\x2C if given\x2C is stored in every node\x2C whether\n  // `locations` is on or off.\n  directSourceFile: null\x2C\n  // When enabled\x2C parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && hasOwn(opts\x2C opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === "latest") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn("Since Acorn 8.0.0\x2C options.ecmaVersion is required.\\nDefaulting to 2020\x2C but this will stop working in the future.");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (!opts || opts.allowHashBang == null)\n    { options.allowHashBang = options.ecmaVersion >= 14; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options\x2C options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options\x2C array) {\n  return function(block\x2C text\x2C start\x2C end\x2C startLoc\x2C endLoc) {\n    var comment = {\n      type: block ? "Block" : "Line"\x2C\n      value: text\x2C\n      start: start\x2C\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this\x2C startLoc\x2C endLoc); }\n    if (options.ranges)\n      { comment.range = [start\x2C end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1\x2C\n    SCOPE_FUNCTION = 2\x2C\n    SCOPE_ASYNC = 4\x2C\n    SCOPE_GENERATOR = 8\x2C\n    SCOPE_ARROW = 16\x2C\n    SCOPE_SIMPLE_CATCH = 32\x2C\n    SCOPE_SUPER = 64\x2C\n    SCOPE_DIRECT_SUPER = 128\x2C\n    SCOPE_CLASS_STATIC_BLOCK = 256\x2C\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\nfunction functionFlags(async\x2C generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0\x2C // Not a binding\n    BIND_VAR = 1\x2C // Var-style binding\n    BIND_LEXICAL = 2\x2C // Let- or const-style binding\n    BIND_FUNCTION = 3\x2C // Function declaration\n    BIND_SIMPLE_CATCH = 4\x2C // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options\x2C input\x2C startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);\n  var reserved = "";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === "module") { reserved += " await"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf("\\n"\x2C startPos - 1) + 1;\n    this.curLine = this.input.slice(0\x2C this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types$1.eof;\n  // For tokens that include more information than their type\x2C the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And\x2C if locations are used\x2C the {line\x2C column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === "module";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled\x2C skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0\x2C 2) === "#!")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition\x2C all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true }\x2CinGenerator: { configurable: true }\x2CinAsync: { configurable: true }\x2CcanAwait: { configurable: true }\x2CallowSuper: { configurable: true }\x2CallowDirectSuper: { configurable: true }\x2CtreatFunctionsAsVar: { configurable: true }\x2CallowNewDotTarget: { configurable: true }\x2CinClassStaticBlock: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\n\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\nprototypeAccessors.allowNewDotTarget.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n};\n\nprototypeAccessors.inClassStaticBlock.get = function () {\n  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n};\n\nParser.extend = function extend () {\n    var plugins = []\x2C len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input\x2C options) {\n  return new this(options\x2C input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input\x2C pos\x2C options) {\n  var parser = new this(options\x2C input\x2C pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input\x2C options) {\n  return new this(options\x2C input)\n};\n\nObject.defineProperties( Parser.prototype\x2C prototypeAccessors );\n\nvar pp$9 = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|"((?:\\\\.|[^"\\\\])*?)")/;\npp$9.strictDirective = function(start) {\n  if (this.options.ecmaVersion < 5) { return false }\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === "use strict") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input)\x2C end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === ";" || next === "}" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=\x2C?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))\n    }\n    start += match[0].length;\n\n    // Skip semicolon\x2C if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === ";")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type\x2C and if yes\x2C consumes it as a side effect.\n\npp$9.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp$9.isContextual = function(name) {\n  return this.type === types$1.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp$9.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp$9.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp$9.canInsertSemicolon = function() {\n  return this.type === types$1.eof ||\n    this.type === types$1.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.start))\n};\n\npp$9.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd\x2C this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon\x2C or\x2C failing that\x2C see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp$9.semicolon = function() {\n  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp$9.afterTrailingComma = function(tokType\x2C notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart\x2C this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found\x2C consume it\x2C otherwise\x2C\n// raise an unexpected token error.\n\npp$9.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp$9.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start\x2C "Unexpected token");\n};\n\nvar DestructuringErrors = function DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n};\n\npp$9.checkPatternErrors = function(refDestructuringErrors\x2C isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma\x2C "Comma is not permitted after the rest element"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens\x2C isAssign ? "Assigning to rvalue" : "Parenthesized pattern"); }\n};\n\npp$9.checkExpressionErrors = function(refDestructuringErrors\x2C andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign\x2C "Shorthand property assignments are valid only in destructuring patterns"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto\x2C "Redefinition of __proto__ property"); }\n};\n\npp$9.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos\x2C "Yield expression cannot be a default value"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos\x2C "Await expression cannot be a default value"); }\n};\n\npp$9.isSimpleAssignTarget = function(expr) {\n  if (expr.type === "ParenthesizedExpression")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === "Identifier" || expr.type === "MemberExpression"\n};\n\nvar pp$8 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser\x2C reads any number of\n// statements\x2C and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present\x2C the statements will be appended\n// to its body instead of creating a new node.\n\npp$8.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types$1.eof) {\n    var stmt = this.parseStatement(null\x2C true\x2C exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0\x2C list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start\x2C ("Export '" + name + "' is not defined"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node\x2C "Program")\n};\n\nvar loopLabel = {kind: "loop"}\x2C switchLabel = {kind: "switch"};\n\npp$8.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length\x2C nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases\x2C determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However\x2C `let [` is an explicit negative lookahead for\n  // ExpressionStatement\x2C so special-case it first.\n  if (nextCh === 91 || nextCh === 92) { return true } // '['\x2C '/'\n  if (context) { return false }\n\n  if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{'\x2C astral\n  if (isIdentifierStart(nextCh\x2C true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos)\x2C true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next\x2C pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length\x2C after;\n  return !lineBreak.test(this.input.slice(this.pos\x2C next)) &&\n    this.input.slice(next\x2C next + 8) === "function" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator\x2C parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`\x2C where looking at the previous token\n// does not help.\n\npp$8.parseStatement = function(context\x2C topLevel\x2C exports) {\n  var starttype = this.type\x2C node = this.startNode()\x2C kind;\n\n  if (this.isLet(context)) {\n    starttype = types$1._var;\n    kind = "let";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse\x2C some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node\x2C starttype.keyword)\n  case types$1._debugger: return this.parseDebuggerStatement(node)\n  case types$1._do: return this.parseDoStatement(node)\n  case types$1._for: return this.parseForStatement(node)\n  case types$1._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works\x2C but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node\x2C false\x2C !context)\n  case types$1._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node\x2C true)\n  case types$1._if: return this.parseIfStatement(node)\n  case types$1._return: return this.parseReturnStatement(node)\n  case types$1._switch: return this.parseSwitchStatement(node)\n  case types$1._throw: return this.parseThrowStatement(node)\n  case types$1._try: return this.parseTryStatement(node)\n  case types$1._const: case types$1._var:\n    kind = kind || this.value;\n    if (context && kind !== "var") { this.unexpected(); }\n    return this.parseVarStatement(node\x2C kind)\n  case types$1._while: return this.parseWhileStatement(node)\n  case types$1._with: return this.parseWithStatement(node)\n  case types$1.braceL: return this.parseBlock(true\x2C node)\n  case types$1.semi: return this.parseEmptyStatement(node)\n  case types$1._export:\n  case types$1._import:\n    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length\x2C nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node\x2C this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start\x2C "'import' and 'export' may only appear at the top level"); }\n      if (!this.inModule)\n        { this.raise(this.start\x2C "'import' and 'export' may appear only with 'sourceType: module'"); }\n    }\n    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node\x2C exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace\x2C it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression\x2C and afterwards\x2C if the\n    // next token is a colon and the expression was a simple\n    // Identifier node\x2C we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node\x2C true\x2C !context)\n    }\n\n    var maybeName = this.value\x2C expr = this.parseExpression();\n    if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon))\n      { return this.parseLabeledStatement(node\x2C maybeName\x2C expr\x2C context) }\n    else { return this.parseExpressionStatement(node\x2C expr) }\n  }\n};\n\npp$8.parseBreakContinueStatement = function(node\x2C keyword) {\n  var isBreak = keyword === "break";\n  this.next();\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types$1.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start\x2C "Unsyntactic " + keyword); }\n  return this.finishNode(node\x2C isBreak ? "BreakStatement" : "ContinueStatement")\n};\n\npp$8.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node\x2C "DebuggerStatement")\n};\n\npp$8.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement("do");\n  this.labels.pop();\n  this.expect(types$1._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types$1.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node\x2C "DoWhileStatement")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically\x2C we have to parse the init `var`\n// statement or expression\x2C disallowing the `in` operator (see\n// the second parameter to `parseExpression`)\x2C and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis)\x2C it\n// is a regular `for` loop.\n\npp$8.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types$1.parenL);\n  if (this.type === types$1.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node\x2C null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types$1._var || this.type === types$1._const || isLet) {\n    var init$1 = this.startNode()\x2C kind = isLet ? "let" : this.value;\n    this.next();\n    this.parseVar(init$1\x2C true\x2C kind);\n    this.finishNode(init$1\x2C "VariableDeclaration");\n    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node\x2C init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node\x2C init$1)\n  }\n  var startsWithLet = this.isContextual("let")\x2C isForOf = false;\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(awaitAt > -1 ? "await" : true\x2C refDestructuringErrors);\n  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types$1._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    if (startsWithLet && isForOf) { this.raise(init.start\x2C "The left-hand side of a for-of loop may not start with 'let'."); }\n    this.toAssignable(init\x2C false\x2C refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node\x2C init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors\x2C true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node\x2C init)\n};\n\npp$8.parseFunctionStatement = function(node\x2C isAsync\x2C declarationPosition) {\n  this.next();\n  return this.parseFunction(node\x2C FUNC_STATEMENT$1 | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT)\x2C false\x2C isAsync)\n};\n\npp$8.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches\x2C but only in non-strict mode\n  node.consequent = this.parseStatement("if");\n  node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;\n  return this.finishNode(node\x2C "IfStatement")\n};\n\npp$8.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start\x2C "'return' outside of function"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`)\x2C the keywords with\n  // optional arguments\x2C we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node\x2C "ReturnStatement")\n};\n\npp$8.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types$1.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types$1.braceR;) {\n    if (this.type === types$1._case || this.type === types$1._default) {\n      var isCase = this.type === types$1._case;\n      if (cur) { this.finishNode(cur\x2C "SwitchCase"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart\x2C "Multiple default clauses"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types$1.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur\x2C "SwitchCase"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node\x2C "SwitchStatement")\n};\n\npp$8.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.start)))\n    { this.raise(this.lastTokEnd\x2C "Illegal newline after throw"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node\x2C "ThrowStatement")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty$1 = [];\n\npp$8.parseCatchClauseParam = function() {\n  var param = this.parseBindingAtom();\n  var simple = param.type === "Identifier";\n  this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n  this.checkLValPattern(param\x2C simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n  this.expect(types$1.parenR);\n\n  return param\n};\n\npp$8.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types$1._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types$1.parenL)) {\n      clause.param = this.parseCatchClauseParam();\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause\x2C "CatchClause");\n  }\n  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start\x2C "Missing catch or finally clause"); }\n  return this.finishNode(node\x2C "TryStatement")\n};\n\npp$8.parseVarStatement = function(node\x2C kind\x2C allowMissingInitializer) {\n  this.next();\n  this.parseVar(node\x2C false\x2C kind\x2C allowMissingInitializer);\n  this.semicolon();\n  return this.finishNode(node\x2C "VariableDeclaration")\n};\n\npp$8.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement("while");\n  this.labels.pop();\n  return this.finishNode(node\x2C "WhileStatement")\n};\n\npp$8.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start\x2C "'with' in strict mode"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement("with");\n  return this.finishNode(node\x2C "WithStatement")\n};\n\npp$8.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node\x2C "EmptyStatement")\n};\n\npp$8.parseLabeledStatement = function(node\x2C maybeName\x2C expr\x2C context) {\n  for (var i$1 = 0\x2C list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start\x2C "Label '" + maybeName + "' is already declared");\n  } }\n  var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName\x2C kind: kind\x2C statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node\x2C "LabeledStatement")\n};\n\npp$8.parseExpressionStatement = function(node\x2C expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node\x2C "ExpressionStatement")\n};\n\n// Parse a semicolon-enclosed block of statements\x2C handling `"use\n// strict"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$8.parseBlock = function(createNewLexicalScope\x2C node\x2C exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types$1.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node\x2C "BlockStatement")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$8.parseFor = function(node\x2C init) {\n  node.init = init;\n  this.expect(types$1.semi);\n  node.test = this.type === types$1.semi ? null : this.parseExpression();\n  this.expect(types$1.semi);\n  node.update = this.type === types$1.parenR ? null : this.parseExpression();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement("for");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node\x2C "ForStatement")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop\x2C which are almost\n// same from parser's perspective.\n\npp$8.parseForIn = function(node\x2C init) {\n  var isForIn = this.type === types$1._in;\n  this.next();\n\n  if (\n    init.type === "VariableDeclaration" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== "var" ||\n      init.declarations[0].id.type !== "Identifier"\n    )\n  ) {\n    this.raise(\n      init.start\x2C\n      ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement("for");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node\x2C isForIn ? "ForInStatement" : "ForOfStatement")\n};\n\n// Parse a list of variable declarations.\n\npp$8.parseVar = function(node\x2C isFor\x2C kind\x2C allowMissingInitializer) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl\x2C kind);\n    if (this.eat(types$1.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (!allowMissingInitializer && kind === "const" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {\n      this.unexpected();\n    } else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {\n      this.raise(this.lastTokEnd\x2C "Complex binding patterns require an initialization value");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl\x2C "VariableDeclarator"));\n    if (!this.eat(types$1.comma)) { break }\n  }\n  return node\n};\n\npp$8.parseVarId = function(decl\x2C kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id\x2C kind === "var" ? BIND_VAR : BIND_LEXICAL\x2C false);\n};\n\nvar FUNC_STATEMENT$1 = 1\x2C FUNC_HANGING_STATEMENT = 2\x2C FUNC_NULLABLE_ID$1 = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0\x2C as it is only called with false\npp$8.parseFunction = function(node\x2C statement\x2C allowExpressionBody\x2C isAsync\x2C forInit) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types$1.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT$1) {\n    node.id = (statement & FUNC_NULLABLE_ID$1) && this.type !== types$1.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode\x2C then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise\x2C the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id\x2C (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos\x2C oldAwaitPos = this.awaitPos\x2C oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async\x2C node.generator));\n\n  if (!(statement & FUNC_STATEMENT$1))\n    { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node\x2C allowExpressionBody\x2C false\x2C forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node\x2C (statement & FUNC_STATEMENT$1) ? "FunctionDeclaration" : "FunctionExpression")\n};\n\npp$8.parseFunctionParams = function(node) {\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR\x2C false\x2C this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$8.parseClass = function(node\x2C isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node\x2C isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types$1.braceL);\n  while (this.type !== types$1.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === "MethodDefinition" && element.kind === "constructor") {\n        if (hadConstructor) { this.raiseRecoverable(element.start\x2C "Duplicate constructor in the same class"); }\n        hadConstructor = true;\n      } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap\x2C element)) {\n        this.raiseRecoverable(element.key.start\x2C ("Identifier '#" + (element.key.name) + "' has already been declared"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody\x2C "ClassBody");\n  this.exitClassBody();\n  return this.finishNode(node\x2C isStatement ? "ClassDeclaration" : "ClassExpression")\n};\n\npp$8.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types$1.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = "";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = "method";\n  var isStatic = false;\n\n  if (this.eatContextual("static")) {\n    // Parse static init block\n    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n      this.parseClassStaticBlock(node);\n      return node\n    }\n    if (this.isClassElementNameStart() || this.type === types$1.star) {\n      isStatic = true;\n    } else {\n      keyName = "static";\n    }\n  }\n  node.static = isStatic;\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {\n    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = "async";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual("get") || this.eatContextual("set")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async'\x2C 'get'\x2C 'set'\x2C or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart\x2C this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key\x2C "Identifier");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node\x2C "constructor");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== "method") { this.raise(node.key.start\x2C "Constructor can't have get/set modifier"); }\n    node.kind = isConstructor ? "constructor" : kind;\n    this.parseClassMethod(node\x2C isGenerator\x2C isAsync\x2C allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$8.isClassElementNameStart = function() {\n  return (\n    this.type === types$1.name ||\n    this.type === types$1.privateId ||\n    this.type === types$1.num ||\n    this.type === types$1.string ||\n    this.type === types$1.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$8.parseClassElementName = function(element) {\n  if (this.type === types$1.privateId) {\n    if (this.value === "constructor") {\n      this.raise(this.start\x2C "Classes can't have an element named '#constructor'");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$8.parseClassMethod = function(method\x2C isGenerator\x2C isAsync\x2C allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === "constructor") {\n    if (isGenerator) { this.raise(key.start\x2C "Constructor can't be a generator"); }\n    if (isAsync) { this.raise(key.start\x2C "Constructor can't be an async method"); }\n  } else if (method.static && checkKeyName(method\x2C "prototype")) {\n    this.raise(key.start\x2C "Classes may not have a static property named prototype");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator\x2C isAsync\x2C allowsDirectSuper);\n\n  // Check value\n  if (method.kind === "get" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start\x2C "getter should have no params"); }\n  if (method.kind === "set" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start\x2C "setter should have exactly one param"); }\n  if (method.kind === "set" && value.params[0].type === "RestElement")\n    { this.raiseRecoverable(value.params[0].start\x2C "Setter cannot use rest params"); }\n\n  return this.finishNode(method\x2C "MethodDefinition")\n};\n\npp$8.parseClassField = function(field) {\n  if (checkKeyName(field\x2C "constructor")) {\n    this.raise(field.key.start\x2C "Classes can't have a field named 'constructor'");\n  } else if (field.static && checkKeyName(field\x2C "prototype")) {\n    this.raise(field.key.start\x2C "Classes can't have a static field named 'prototype'");\n  }\n\n  if (this.eat(types$1.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field\x2C "PropertyDefinition")\n};\n\npp$8.parseClassStaticBlock = function(node) {\n  node.body = [];\n\n  var oldLabels = this.labels;\n  this.labels = [];\n  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  this.next();\n  this.exitScope();\n  this.labels = oldLabels;\n\n  return this.finishNode(node\x2C "StaticBlock")\n};\n\npp$8.parseClassId = function(node\x2C isStatement) {\n  if (this.type === types$1.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id\x2C BIND_LEXICAL\x2C false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$8.parseClassSuper = function(node) {\n  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null\x2C false) : null;\n};\n\npp$8.enterClassBody = function() {\n  var element = {declared: Object.create(null)\x2C used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$8.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  if (!this.options.checkPrivateFields) { return }\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!hasOwn(declared\x2C id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start\x2C ("Private field '#" + (id.name) + "' must be declared in an enclosing class"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap\x2C element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = "true";\n  if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {\n    next = (element.static ? "s" : "i") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === "iget" && next === "iset" ||\n    curr === "iset" && next === "iget" ||\n    curr === "sget" && next === "sset" ||\n    curr === "sset" && next === "sget"\n  ) {\n    privateNameMap[name] = "true";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node\x2C name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === "Identifier" && key.name === name ||\n    key.type === "Literal" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$8.parseExportAllDeclaration = function(node\x2C exports) {\n  if (this.options.ecmaVersion >= 11) {\n    if (this.eatContextual("as")) {\n      node.exported = this.parseModuleExportName();\n      this.checkExport(exports\x2C node.exported\x2C this.lastTokStart);\n    } else {\n      node.exported = null;\n    }\n  }\n  this.expectContextual("from");\n  if (this.type !== types$1.string) { this.unexpected(); }\n  node.source = this.parseExprAtom();\n  this.semicolon();\n  return this.finishNode(node\x2C "ExportAllDeclaration")\n};\n\npp$8.parseExport = function(node\x2C exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types$1.star)) {\n    return this.parseExportAllDeclaration(node\x2C exports)\n  }\n  if (this.eat(types$1._default)) { // export default ...\n    this.checkExport(exports\x2C "default"\x2C this.lastTokStart);\n    node.declaration = this.parseExportDefaultDeclaration();\n    return this.finishNode(node\x2C "ExportDefaultDeclaration")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseExportDeclaration(node);\n    if (node.declaration.type === "VariableDeclaration")\n      { this.checkVariableExport(exports\x2C node.declaration.declarations); }\n    else\n      { this.checkExport(exports\x2C node.declaration.id\x2C node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x\x2C y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual("from")) {\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0\x2C list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n\n        if (spec.local.type === "Literal") {\n          this.raise(spec.local.start\x2C "A string literal cannot be used as an exported binding without `from`.");\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node\x2C "ExportNamedDeclaration")\n};\n\npp$8.parseExportDeclaration = function(node) {\n  return this.parseStatement(null)\n};\n\npp$8.parseExportDefaultDeclaration = function() {\n  var isAsync;\n  if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n    var fNode = this.startNode();\n    this.next();\n    if (isAsync) { this.next(); }\n    return this.parseFunction(fNode\x2C FUNC_STATEMENT$1 | FUNC_NULLABLE_ID$1\x2C false\x2C isAsync)\n  } else if (this.type === types$1._class) {\n    var cNode = this.startNode();\n    return this.parseClass(cNode\x2C "nullableID")\n  } else {\n    var declaration = this.parseMaybeAssign();\n    this.semicolon();\n    return declaration\n  }\n};\n\npp$8.checkExport = function(exports\x2C name\x2C pos) {\n  if (!exports) { return }\n  if (typeof name !== "string")\n    { name = name.type === "Identifier" ? name.name : name.value; }\n  if (hasOwn(exports\x2C name))\n    { this.raiseRecoverable(pos\x2C "Duplicate export '" + name + "'"); }\n  exports[name] = true;\n};\n\npp$8.checkPatternExport = function(exports\x2C pat) {\n  var type = pat.type;\n  if (type === "Identifier")\n    { this.checkExport(exports\x2C pat\x2C pat.start); }\n  else if (type === "ObjectPattern")\n    { for (var i = 0\x2C list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports\x2C prop);\n      } }\n  else if (type === "ArrayPattern")\n    { for (var i$1 = 0\x2C list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports\x2C elt); }\n    } }\n  else if (type === "Property")\n    { this.checkPatternExport(exports\x2C pat.value); }\n  else if (type === "AssignmentPattern")\n    { this.checkPatternExport(exports\x2C pat.left); }\n  else if (type === "RestElement")\n    { this.checkPatternExport(exports\x2C pat.argument); }\n  else if (type === "ParenthesizedExpression")\n    { this.checkPatternExport(exports\x2C pat.expression); }\n};\n\npp$8.checkVariableExport = function(exports\x2C decls) {\n  if (!exports) { return }\n  for (var i = 0\x2C list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports\x2C decl.id);\n  }\n};\n\npp$8.shouldParseExportStatement = function() {\n  return this.type.keyword === "var" ||\n    this.type.keyword === "const" ||\n    this.type.keyword === "class" ||\n    this.type.keyword === "function" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$8.parseExportSpecifier = function(exports) {\n  var node = this.startNode();\n  node.local = this.parseModuleExportName();\n\n  node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;\n  this.checkExport(\n    exports\x2C\n    node.exported\x2C\n    node.exported.start\n  );\n\n  return this.finishNode(node\x2C "ExportSpecifier")\n};\n\npp$8.parseExportSpecifiers = function(exports) {\n  var nodes = []\x2C first = true;\n  // export { x\x2C y as z } [from '...']\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    nodes.push(this.parseExportSpecifier(exports));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$8.parseImport = function(node) {\n  this.next();\n\n  // import '...'\n  if (this.type === types$1.string) {\n    node.specifiers = empty$1;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual("from");\n    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node\x2C "ImportDeclaration")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$8.parseImportSpecifier = function() {\n  var node = this.startNode();\n  node.imported = this.parseModuleExportName();\n\n  if (this.eatContextual("as")) {\n    node.local = this.parseIdent();\n  } else {\n    this.checkUnreserved(node.imported);\n    node.local = node.imported;\n  }\n  this.checkLValSimple(node.local\x2C BIND_LEXICAL);\n\n  return this.finishNode(node\x2C "ImportSpecifier")\n};\n\npp$8.parseImportDefaultSpecifier = function() {\n  // import defaultObj\x2C { x\x2C y as z } from '...'\n  var node = this.startNode();\n  node.local = this.parseIdent();\n  this.checkLValSimple(node.local\x2C BIND_LEXICAL);\n  return this.finishNode(node\x2C "ImportDefaultSpecifier")\n};\n\npp$8.parseImportNamespaceSpecifier = function() {\n  var node = this.startNode();\n  this.next();\n  this.expectContextual("as");\n  node.local = this.parseIdent();\n  this.checkLValSimple(node.local\x2C BIND_LEXICAL);\n  return this.finishNode(node\x2C "ImportNamespaceSpecifier")\n};\n\npp$8.parseImportSpecifiers = function() {\n  var nodes = []\x2C first = true;\n  if (this.type === types$1.name) {\n    nodes.push(this.parseImportDefaultSpecifier());\n    if (!this.eat(types$1.comma)) { return nodes }\n  }\n  if (this.type === types$1.star) {\n    nodes.push(this.parseImportNamespaceSpecifier());\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    nodes.push(this.parseImportSpecifier());\n  }\n  return nodes\n};\n\npp$8.parseModuleExportName = function() {\n  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n    var stringLiteral = this.parseLiteral(this.value);\n    if (loneSurrogate.test(stringLiteral.value)) {\n      this.raise(stringLiteral.start\x2C "An export name cannot include a lone surrogate.");\n    }\n    return stringLiteral\n  }\n  return this.parseIdent(true)\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1\x2C -1);\n  }\n};\npp$8.isDirectiveCandidate = function(statement) {\n  return (\n    this.options.ecmaVersion >= 5 &&\n    statement.type === "ExpressionStatement" &&\n    statement.expression.type === "Literal" &&\n    typeof statement.expression.value === "string" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === "\\"" || this.input[statement.start] === "'")\n  )\n};\n\nvar pp$7 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$7.toAssignable = function(node\x2C isBinding\x2C refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case "Identifier":\n      if (this.inAsync && node.name === "await")\n        { this.raise(node.start\x2C "Cannot use 'await' as identifier inside an async function"); }\n      break\n\n    case "ObjectPattern":\n    case "ArrayPattern":\n    case "AssignmentPattern":\n    case "RestElement":\n      break\n\n    case "ObjectExpression":\n      node.type = "ObjectPattern";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors\x2C true); }\n      for (var i = 0\x2C list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop\x2C isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield\x2C Await] :\n        //     `...` DestructuringAssignmentTarget[Yield\x2C Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === "RestElement" &&\n          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")\n        ) {\n          this.raise(prop.argument.start\x2C "Unexpected token");\n        }\n      }\n      break\n\n    case "Property":\n      // AssignmentProperty has type === "Property"\n      if (node.kind !== "init") { this.raise(node.key.start\x2C "Object pattern can't contain getter or setter"); }\n      this.toAssignable(node.value\x2C isBinding);\n      break\n\n    case "ArrayExpression":\n      node.type = "ArrayPattern";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors\x2C true); }\n      this.toAssignableList(node.elements\x2C isBinding);\n      break\n\n    case "SpreadElement":\n      node.type = "RestElement";\n      this.toAssignable(node.argument\x2C isBinding);\n      if (node.argument.type === "AssignmentPattern")\n        { this.raise(node.argument.start\x2C "Rest elements cannot have a default value"); }\n      break\n\n    case "AssignmentExpression":\n      if (node.operator !== "=") { this.raise(node.left.end\x2C "Only '=' operator can be used for specifying default value."); }\n      node.type = "AssignmentPattern";\n      delete node.operator;\n      this.toAssignable(node.left\x2C isBinding);\n      break\n\n    case "ParenthesizedExpression":\n      this.toAssignable(node.expression\x2C isBinding\x2C refDestructuringErrors);\n      break\n\n    case "ChainExpression":\n      this.raiseRecoverable(node.start\x2C "Optional chaining cannot appear in left-hand side");\n      break\n\n    case "MemberExpression":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start\x2C "Assigning to rvalue");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors\x2C true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$7.toAssignableList = function(exprList\x2C isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt\x2C isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$7.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false\x2C refDestructuringErrors);\n  return this.finishNode(node\x2C "SpreadElement")\n};\n\npp$7.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node\x2C "RestElement")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$7.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types$1.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types$1.bracketR\x2C true\x2C true);\n      return this.finishNode(node\x2C "ArrayPattern")\n\n    case types$1.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$7.parseBindingList = function(close\x2C allowEmpty\x2C allowTrailingComma\x2C allowModifiers) {\n  var elts = []\x2C first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types$1.comma); }\n    if (allowEmpty && this.type === types$1.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types$1.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types$1.comma) { this.raiseRecoverable(this.start\x2C "Comma is not permitted after the rest element"); }\n      this.expect(close);\n      break\n    } else {\n      elts.push(this.parseAssignableListItem(allowModifiers));\n    }\n  }\n  return elts\n};\n\npp$7.parseAssignableListItem = function(allowModifiers) {\n  var elem = this.parseMaybeDefault(this.start\x2C this.startLoc);\n  this.parseBindingListItem(elem);\n  return elem\n};\n\npp$7.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$7.parseMaybeDefault = function(startPos\x2C startLoc\x2C left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n  var node = this.startNodeAt(startPos\x2C startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node\x2C "AssignmentPattern")\n};\n\n// The following three functions all verify that a node is an lvalue \u2014\n// something that can be bound\x2C or assigned to. In order to do so\x2C they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names\x2C if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g.\x2C object and array\n// destructuring)\x2C the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere\x2C like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += \u2026;\n//     import a from '\u2026';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports\x2C as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = \u2026);\n//     const a = \u2026;\n//     try { \u2026 } catch (a) { \u2026 }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports\x2C as well as default assignment\n//   patterns\x2C rest elements\x2C and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case\x2C function parameters also use checkLValInnerPattern()\x2C\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs\x2C\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment\x2C then bindingType should be set to BIND_NONE. Otherwise\x2C it\n// should be set to the appropriate BIND_* constant\x2C like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType\x2C then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e.\x2C bindingType is BIND_NONE).\n\npp$7.checkLValSimple = function(expr\x2C bindingType\x2C checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case "Identifier":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start\x2C (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === "let")\n        { this.raiseRecoverable(expr.start\x2C "let is disallowed as a lexically bound name"); }\n      if (checkClashes) {\n        if (hasOwn(checkClashes\x2C expr.name))\n          { this.raiseRecoverable(expr.start\x2C "Argument name clash"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name\x2C bindingType\x2C expr.start); }\n    }\n    break\n\n  case "ChainExpression":\n    this.raiseRecoverable(expr.start\x2C "Optional chaining cannot appear in left-hand side");\n    break\n\n  case "MemberExpression":\n    if (isBind) { this.raiseRecoverable(expr.start\x2C "Binding member expression"); }\n    break\n\n  case "ParenthesizedExpression":\n    if (isBind) { this.raiseRecoverable(expr.start\x2C "Binding parenthesized expression"); }\n    return this.checkLValSimple(expr.expression\x2C bindingType\x2C checkClashes)\n\n  default:\n    this.raise(expr.start\x2C (isBind ? "Binding" : "Assigning to") + " rvalue");\n  }\n};\n\npp$7.checkLValPattern = function(expr\x2C bindingType\x2C checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case "ObjectPattern":\n    for (var i = 0\x2C list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop\x2C bindingType\x2C checkClashes);\n    }\n    break\n\n  case "ArrayPattern":\n    for (var i$1 = 0\x2C list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem\x2C bindingType\x2C checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr\x2C bindingType\x2C checkClashes);\n  }\n};\n\npp$7.checkLValInnerPattern = function(expr\x2C bindingType\x2C checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case "Property":\n    // AssignmentProperty has type === "Property"\n    this.checkLValInnerPattern(expr.value\x2C bindingType\x2C checkClashes);\n    break\n\n  case "AssignmentPattern":\n    this.checkLValPattern(expr.left\x2C bindingType\x2C checkClashes);\n    break\n\n  case "RestElement":\n    this.checkLValPattern(expr.argument\x2C bindingType\x2C checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr\x2C bindingType\x2C checkClashes);\n  }\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\nvar TokContext = function TokContext(token\x2C isExpr\x2C preserveSpace\x2C override\x2C generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types = {\n  b_stat: new TokContext("{"\x2C false)\x2C\n  b_expr: new TokContext("{"\x2C true)\x2C\n  b_tmpl: new TokContext("${"\x2C false)\x2C\n  p_stat: new TokContext("("\x2C false)\x2C\n  p_expr: new TokContext("("\x2C true)\x2C\n  q_tmpl: new TokContext("`"\x2C true\x2C true\x2C function (p) { return p.tryReadTemplateToken(); })\x2C\n  f_stat: new TokContext("function"\x2C false)\x2C\n  f_expr: new TokContext("function"\x2C true)\x2C\n  f_expr_gen: new TokContext("function"\x2C true\x2C false\x2C null\x2C true)\x2C\n  f_gen: new TokContext("function"\x2C false\x2C false\x2C null\x2C true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n};\n\npp$6.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types.f_expr || parent === types.f_stat)\n    { return true }\n  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.start)) }\n  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n    { return true }\n  if (prevType === types$1.braceL)\n    { return parent === types.b_stat }\n  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$6.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === "function")\n      { return context.generator }\n  }\n  return false\n};\n\npp$6.updateContext = function(prevType) {\n  var update\x2C type = this.type;\n  if (type.keyword && prevType === types$1.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this\x2C prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Used to handle egde cases when token context could not be inferred correctly during tokenization phase\n\npp$6.overrideContext = function(tokenCtx) {\n  if (this.curContext() !== tokenCtx) {\n    this.context[this.context.length - 1] = tokenCtx;\n  }\n};\n\n// Token-specific context update code\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext().token === "function") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes$1.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types$1._else &&\n      !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.start))) &&\n      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n    { this.context.push(types.f_expr); }\n  else\n    { this.context.push(types.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes$1.star.updateContext = function(prevType) {\n  if (prevType === types$1._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types.f_expr)\n      { this.context[index] = types.f_expr_gen; }\n    else\n      { this.context[index] = types.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes$1.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n    if (this.value === "of" && !this.exprAllowed ||\n        this.value === "yield" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements\x2C and recursively calling those\x2C each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example\x2C the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first\x2C and\n// in turn calls the function that parses `[]` subscripts \u2014 that\n// way\x2C it'll receive the node for `x[1]` already parsed\x2C and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence\x2C because it is much more compact than using\n// the technique outlined above\x2C which uses different\x2C nesting\n// functions to specify precedence\x2C for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\nvar pp$5 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash \u2014\n// either with each other or with an init property \u2014 and in\n// strict mode\x2C init properties are also not allowed to be repeated.\n\npp$5.checkPropClash = function(prop\x2C propHash\x2C refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case "Identifier": name = key.name; break\n  case "Literal": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === "__proto__" && kind === "init") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0) {\n            refDestructuringErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raiseRecoverable(key.start\x2C "Redefinition of __proto__ property");\n        }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = "$" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === "init") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start\x2C "Redefinition of property"); }\n  } else {\n    other = propHash[name] = {\n      init: false\x2C\n      get: false\x2C\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest\x2C from the most general expression type at the top to\n// 'atomic'\x2C nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse\x2C\n// and\x2C *if* the syntactic construct they handle is present\x2C wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$5.parseExpression = function(forInit\x2C refDestructuringErrors) {\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit\x2C refDestructuringErrors);\n  if (this.type === types$1.comma) {\n    var node = this.startNodeAt(startPos\x2C startLoc);\n    node.expressions = [expr];\n    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit\x2C refDestructuringErrors)); }\n    return this.finishNode(node\x2C "SequenceExpression")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$5.parseMaybeAssign = function(forInit\x2C refDestructuringErrors\x2C afterLeftParse) {\n  if (this.isContextual("yield")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`\x2C but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false\x2C oldParenAssign = -1\x2C oldTrailingComma = -1\x2C oldDoubleProto = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldDoubleProto = refDestructuringErrors.doubleProto;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  if (this.type === types$1.parenL || this.type === types$1.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === "await";\n  }\n  var left = this.parseMaybeConditional(forInit\x2C refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this\x2C left\x2C startPos\x2C startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos\x2C startLoc);\n    node.operator = this.value;\n    if (this.type === types$1.eq)\n      { left = this.toAssignable(left\x2C false\x2C refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types$1.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n    return this.finishNode(node\x2C "AssignmentExpression")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors\x2C true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$5.parseMaybeConditional = function(forInit\x2C refDestructuringErrors) {\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit\x2C refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types$1.question)) {\n    var node = this.startNodeAt(startPos\x2C startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types$1.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node\x2C "ConditionalExpression")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$5.parseExprOps = function(forInit\x2C refDestructuringErrors) {\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors\x2C false\x2C false\x2C forInit);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr\x2C startPos\x2C startLoc\x2C -1\x2C forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$5.parseExprOp = function(left\x2C leftStartPos\x2C leftStartLoc\x2C minPrec\x2C forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types$1._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n      var coalesce = this.type === types$1.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words\x2C `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types$1.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start\x2C startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null\x2C false\x2C false\x2C forInit)\x2C startPos\x2C startLoc\x2C prec\x2C forInit);\n      var node = this.buildBinary(leftStartPos\x2C leftStartLoc\x2C left\x2C right\x2C op\x2C logical || coalesce);\n      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n        this.raiseRecoverable(this.start\x2C "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");\n      }\n      return this.parseExprOp(node\x2C leftStartPos\x2C leftStartLoc\x2C minPrec\x2C forInit)\n    }\n  }\n  return left\n};\n\npp$5.buildBinary = function(startPos\x2C startLoc\x2C left\x2C right\x2C op\x2C logical) {\n  if (right.type === "PrivateIdentifier") { this.raise(right.start\x2C "Private identifier can only be left side of binary expression"); }\n  var node = this.startNodeAt(startPos\x2C startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node\x2C logical ? "LogicalExpression" : "BinaryExpression")\n};\n\n// Parse unary operators\x2C both prefix and postfix.\n\npp$5.parseMaybeUnary = function(refDestructuringErrors\x2C sawUnary\x2C incDec\x2C forInit) {\n  var startPos = this.start\x2C startLoc = this.startLoc\x2C expr;\n  if (this.isContextual("await") && this.canAwait) {\n    expr = this.parseAwait(forInit);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode()\x2C update = this.type === types$1.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null\x2C true\x2C update\x2C forInit);\n    this.checkExpressionErrors(refDestructuringErrors\x2C true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === "delete" &&\n             node.argument.type === "Identifier")\n      { this.raiseRecoverable(node.start\x2C "Deleting local variable in strict mode"); }\n    else if (node.operator === "delete" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start\x2C "Private fields can not be deleted"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node\x2C update ? "UpdateExpression" : "UnaryExpression");\n  } else if (!sawUnary && this.type === types$1.privateId) {\n    if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) { this.unexpected(); }\n    expr = this.parsePrivateIdent();\n    // only could be private fields in 'in'\x2C such as #x in obj\n    if (this.type !== types$1._in) { this.unexpected(); }\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors\x2C forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos\x2C startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1\x2C "UpdateExpression");\n    }\n  }\n\n  if (!incDec && this.eat(types$1.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos\x2C startLoc\x2C expr\x2C this.parseMaybeUnary(null\x2C false\x2C false\x2C forInit)\x2C "**"\x2C false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" ||\n    node.type === "ChainExpression" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call\x2C dot\x2C and `[]`-subscript expressions.\n\npp$5.parseExprSubscripts = function(refDestructuringErrors\x2C forInit) {\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors\x2C forInit);\n  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart\x2C this.lastTokEnd) !== ")")\n    { return expr }\n  var result = this.parseSubscripts(expr\x2C startPos\x2C startLoc\x2C false\x2C forInit);\n  if (refDestructuringErrors && result.type === "MemberExpression") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$5.parseSubscripts = function(base\x2C startPos\x2C startLoc\x2C noCalls\x2C forInit) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base\x2C startPos\x2C startLoc\x2C noCalls\x2C maybeAsyncArrow\x2C optionalChained\x2C forInit);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === "ArrowFunctionExpression") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos\x2C startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode\x2C "ChainExpression");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$5.shouldParseAsyncArrow = function() {\n  return !this.canInsertSemicolon() && this.eat(types$1.arrow)\n};\n\npp$5.parseSubscriptAsyncArrow = function(startPos\x2C startLoc\x2C exprList\x2C forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos\x2C startLoc)\x2C exprList\x2C true\x2C forInit)\n};\n\npp$5.parseSubscript = function(base\x2C startPos\x2C startLoc\x2C noCalls\x2C maybeAsyncArrow\x2C optionalChained\x2C forInit) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types$1.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart\x2C "Optional chaining cannot appear in the callee of new expressions"); }\n\n  var computed = this.eat(types$1.bracketL);\n  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n    var node = this.startNodeAt(startPos\x2C startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types$1.bracketR);\n    } else if (this.type === types$1.privateId && base.type !== "Super") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== "never");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node\x2C "MemberExpression");\n  } else if (!noCalls && this.eat(types$1.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors\x2C oldYieldPos = this.yieldPos\x2C oldAwaitPos = this.awaitPos\x2C oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types$1.parenR\x2C this.options.ecmaVersion >= 8\x2C false\x2C refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n      this.checkPatternErrors(refDestructuringErrors\x2C false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos\x2C "Cannot use 'await' as identifier inside an async function"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseSubscriptAsyncArrow(startPos\x2C startLoc\x2C exprList\x2C forInit)\n    }\n    this.checkExpressionErrors(refDestructuringErrors\x2C true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos\x2C startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1\x2C "CallExpression");\n  } else if (this.type === types$1.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start\x2C "Optional chaining cannot appear in the tag of tagged template expressions");\n    }\n    var node$2 = this.startNodeAt(startPos\x2C startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2\x2C "TaggedTemplateExpression");\n  }\n  return base\n};\n\n// Parse an atomic expression \u2014 either a single token that is an\n// expression\x2C an expression started by a keyword like `function` or\n// `new`\x2C or an expression wrapped in punctuation like `()`\x2C `[]`\x2C\n// or `{}`.\n\npp$5.parseExprAtom = function(refDestructuringErrors\x2C forInit\x2C forNew) {\n  // If a division operator appears in an expression position\x2C the\n  // tokenizer got confused\x2C and we force it to read a regexp instead.\n  if (this.type === types$1.slash) { this.readRegexp(); }\n\n  var node\x2C canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types$1._super:\n    if (!this.allowSuper)\n      { this.raise(this.start\x2C "'super' keyword outside a method"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types$1.parenL && !this.allowDirectSuper)\n      { this.raise(node.start\x2C "super() call outside constructor of a subclass"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node\x2C "Super")\n\n  case types$1._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node\x2C "ThisExpression")\n\n  case types$1.name:\n    var startPos = this.start\x2C startLoc = this.startLoc\x2C containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n      this.overrideContext(types.f_expr);\n      return this.parseFunction(this.startNodeAt(startPos\x2C startLoc)\x2C 0\x2C false\x2C true\x2C forInit)\n    }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types$1.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos\x2C startLoc)\x2C [id]\x2C false\x2C forInit) }\n      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos\x2C startLoc)\x2C [id]\x2C true\x2C forInit)\n      }\n    }\n    return id\n\n  case types$1.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern\x2C flags: value.flags};\n    return node\n\n  case types$1.num: case types$1.string:\n    return this.parseLiteral(this.value)\n\n  case types$1._null: case types$1._true: case types$1._false:\n    node = this.startNode();\n    node.value = this.type === types$1._null ? null : this.type === types$1._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node\x2C "Literal")\n\n  case types$1.parenL:\n    var start = this.start\x2C expr = this.parseParenAndDistinguishExpression(canBeArrow\x2C forInit);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types$1.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types$1.bracketR\x2C true\x2C true\x2C refDestructuringErrors);\n    return this.finishNode(node\x2C "ArrayExpression")\n\n  case types$1.braceL:\n    this.overrideContext(types.b_expr);\n    return this.parseObj(false\x2C refDestructuringErrors)\n\n  case types$1._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node\x2C 0)\n\n  case types$1._class:\n    return this.parseClass(this.startNode()\x2C false)\n\n  case types$1._new:\n    return this.parseNew()\n\n  case types$1.backQuote:\n    return this.parseTemplate()\n\n  case types$1._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport(forNew)\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    return this.parseExprAtomDefault()\n  }\n};\n\npp$5.parseExprAtomDefault = function() {\n  this.unexpected();\n};\n\npp$5.parseExprImport = function(forNew) {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences\x2C it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start\x2C "Escape sequence in keyword import"); }\n  var meta = this.parseIdent(true);\n\n  if (this.type === types$1.parenL && !forNew) {\n    return this.parseDynamicImport(node)\n  } else if (this.type === types$1.dot) {\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  } else {\n    this.unexpected();\n  }\n};\n\npp$5.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types$1.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n      this.raiseRecoverable(errorPos\x2C "Trailing comma is not allowed in import()");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node\x2C "ImportExpression")\n};\n\npp$5.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== "meta")\n    { this.raiseRecoverable(node.property.start\x2C "The only valid meta property for import is 'import.meta'"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start\x2C "'import.meta' must not contain escaped characters"); }\n  if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start\x2C "Cannot use 'import.meta' outside a module"); }\n\n  return this.finishNode(node\x2C "MetaProperty")\n};\n\npp$5.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start\x2C this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0\x2C -1).replace(/_/g\x2C ""); }\n  this.next();\n  return this.finishNode(node\x2C "Literal")\n};\n\npp$5.parseParenExpression = function() {\n  this.expect(types$1.parenL);\n  var val = this.parseExpression();\n  this.expect(types$1.parenR);\n  return val\n};\n\npp$5.shouldParseArrow = function(exprList) {\n  return !this.canInsertSemicolon()\n};\n\npp$5.parseParenAndDistinguishExpression = function(canBeArrow\x2C forInit) {\n  var startPos = this.start\x2C startLoc = this.startLoc\x2C val\x2C allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start\x2C innerStartLoc = this.startLoc;\n    var exprList = []\x2C first = true\x2C lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors\x2C oldYieldPos = this.yieldPos\x2C oldAwaitPos = this.awaitPos\x2C spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types$1.parenR) {\n      first ? first = false : this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR\x2C true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types$1.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types$1.comma) {\n          this.raiseRecoverable(\n            this.start\x2C\n            "Comma is not permitted after the rest element"\n          );\n        }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false\x2C refDestructuringErrors\x2C this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.lastTokEnd\x2C innerEndLoc = this.lastTokEndLoc;\n    this.expect(types$1.parenR);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors\x2C false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos\x2C startLoc\x2C exprList\x2C forInit)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors\x2C true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos\x2C innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val\x2C "SequenceExpression"\x2C innerEndPos\x2C innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos\x2C startLoc);\n    par.expression = val;\n    return this.finishNode(par\x2C "ParenthesizedExpression")\n  } else {\n    return val\n  }\n};\n\npp$5.parseParenItem = function(item) {\n  return item\n};\n\npp$5.parseParenArrowList = function(startPos\x2C startLoc\x2C exprList\x2C forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos\x2C startLoc)\x2C exprList\x2C false\x2C forInit)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression\x2C but not a call \u2014 at least\x2C\n// not without wrapping it in parentheses. Thus\x2C it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp$5.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start\x2C "Escape sequence in keyword new"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== "target")\n      { this.raiseRecoverable(node.property.start\x2C "The only valid meta property for new is 'new.target'"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start\x2C "'new.target' must not contain escaped characters"); }\n    if (!this.allowNewDotTarget)\n      { this.raiseRecoverable(node.start\x2C "'new.target' can only be used in functions and class static block"); }\n    return this.finishNode(node\x2C "MetaProperty")\n  }\n  var startPos = this.start\x2C startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(null\x2C false\x2C true)\x2C startPos\x2C startLoc\x2C true\x2C false);\n  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR\x2C this.options.ecmaVersion >= 8\x2C false); }\n  else { node.arguments = empty; }\n  return this.finishNode(node\x2C "NewExpression")\n};\n\n// Parse template expression.\n\npp$5.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types$1.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start\x2C "Bad escape sequence in untagged template literal");\n    }\n    elem.value = {\n      raw: this.value\x2C\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start\x2C this.end).replace(/\\r\\n?/g\x2C "\\n")\x2C\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types$1.backQuote;\n  return this.finishNode(elem\x2C "TemplateElement")\n};\n\npp$5.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types$1.eof) { this.raise(this.pos\x2C "Unterminated template literal"); }\n    this.expect(types$1.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types$1.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node\x2C "TemplateLiteral")\n};\n\npp$5.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&\n    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$5.parseObj = function(isPattern\x2C refDestructuringErrors) {\n  var node = this.startNode()\x2C first = true\x2C propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern\x2C refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop\x2C propHash\x2C refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node\x2C isPattern ? "ObjectPattern" : "ObjectExpression")\n};\n\npp$5.parseProperty = function(isPattern\x2C refDestructuringErrors) {\n  var prop = this.startNode()\x2C isGenerator\x2C isAsync\x2C startPos\x2C startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types$1.comma) {\n        this.raiseRecoverable(this.start\x2C "Comma is not permitted after the rest element");\n      }\n      return this.finishNode(prop\x2C "RestElement")\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false\x2C refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop\x2C "SpreadElement")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types$1.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n    this.parsePropertyName(prop);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop\x2C isPattern\x2C isGenerator\x2C isAsync\x2C startPos\x2C startLoc\x2C refDestructuringErrors\x2C containsEsc);\n  return this.finishNode(prop\x2C "Property")\n};\n\npp$5.parseGetterSetter = function(prop) {\n  prop.kind = prop.key.name;\n  this.parsePropertyName(prop);\n  prop.value = this.parseMethod(false);\n  var paramCount = prop.kind === "get" ? 0 : 1;\n  if (prop.value.params.length !== paramCount) {\n    var start = prop.value.start;\n    if (prop.kind === "get")\n      { this.raiseRecoverable(start\x2C "getter should have no params"); }\n    else\n      { this.raiseRecoverable(start\x2C "setter should have exactly one param"); }\n  } else {\n    if (prop.kind === "set" && prop.value.params[0].type === "RestElement")\n      { this.raiseRecoverable(prop.value.params[0].start\x2C "Setter cannot use rest params"); }\n  }\n};\n\npp$5.parsePropertyValue = function(prop\x2C isPattern\x2C isGenerator\x2C isAsync\x2C startPos\x2C startLoc\x2C refDestructuringErrors\x2C containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types$1.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types$1.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start\x2C this.startLoc) : this.parseMaybeAssign(false\x2C refDestructuringErrors);\n    prop.kind = "init";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = "init";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator\x2C isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&\n             (prop.key.name === "get" || prop.key.name === "set") &&\n             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.parseGetterSetter(prop);\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === "await" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = "init";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos\x2C startLoc\x2C this.copyNode(prop.key));\n    } else if (this.type === types$1.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos\x2C startLoc\x2C this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$5.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types$1.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")\n};\n\n// Initialize empty function node.\n\npp$5.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$5.parseMethod = function(isGenerator\x2C isAsync\x2C allowDirectSuper) {\n  var node = this.startNode()\x2C oldYieldPos = this.yieldPos\x2C oldAwaitPos = this.awaitPos\x2C oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync\x2C node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR\x2C false\x2C this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node\x2C false\x2C true\x2C false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node\x2C "FunctionExpression")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$5.parseArrowExpression = function(node\x2C params\x2C isAsync\x2C forInit) {\n  var oldYieldPos = this.yieldPos\x2C oldAwaitPos = this.awaitPos\x2C oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync\x2C false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params\x2C true);\n  this.parseFunctionBody(node\x2C true\x2C false\x2C forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node\x2C "ArrowFunctionExpression")\n};\n\n// Parse function body and check parameters.\n\npp$5.parseFunctionBody = function(node\x2C isArrowFunction\x2C isMethod\x2C forInit) {\n  var isExpression = isArrowFunction && this.type !== types$1.braceL;\n  var oldStrict = this.strict\x2C useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign(forInit);\n    node.expression = true;\n    this.checkParams(node\x2C false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function\x2C verify that argument names\n      // are not repeated\x2C and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start\x2C "Illegal 'use strict' directive in function with non-simple parameter list"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node\x2C !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode\x2C e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id\x2C BIND_OUTSIDE); }\n    node.body = this.parseBlock(false\x2C undefined\x2C useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$5.isSimpleParamList = function(params) {\n  for (var i = 0\x2C list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== "Identifier") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using "eval"\n// or "arguments" and duplicate parameters.\n\npp$5.checkParams = function(node\x2C allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0\x2C list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param\x2C BIND_VAR\x2C allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions\x2C and returns them as\n// an array. `close` is the token type that ends the list\x2C and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$5.parseExprList = function(close\x2C allowTrailingComma\x2C allowEmpty\x2C refDestructuringErrors) {\n  var elts = []\x2C first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types$1.comma)\n      { elt = null; }\n    else if (this.type === types$1.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false\x2C refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$5.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === "yield")\n    { this.raiseRecoverable(start\x2C "Cannot use 'yield' as identifier inside a generator"); }\n  if (this.inAsync && name === "await")\n    { this.raiseRecoverable(start\x2C "Cannot use 'await' as identifier inside an async function"); }\n  if (this.currentThisScope().inClassFieldInit && name === "arguments")\n    { this.raiseRecoverable(start\x2C "Cannot use 'arguments' in class field initializer"); }\n  if (this.inClassStaticBlock && (name === "arguments" || name === "await"))\n    { this.raise(start\x2C ("Cannot use " + name + " in class static initialization block")); }\n  if (this.keywords.test(name))\n    { this.raise(start\x2C ("Unexpected keyword '" + name + "'")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start\x2C end).indexOf("\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === "await")\n      { this.raiseRecoverable(start\x2C "Cannot use keyword 'await' outside an async function"); }\n    this.raiseRecoverable(start\x2C ("The keyword '" + name + "' is reserved"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties)\x2C it will also convert keywords into\n// identifiers.\n\npp$5.parseIdent = function(liberal) {\n  var node = this.parseIdentNode();\n  this.next(!!liberal);\n  this.finishNode(node\x2C "Identifier");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === "await" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$5.parseIdentNode = function() {\n  var node = this.startNode();\n  if (this.type === types$1.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot\x2C this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === "class" || node.name === "function") &&\n      (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  return node\n};\n\npp$5.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types$1.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node\x2C "PrivateIdentifier");\n\n  // For validating existence\n  if (this.options.checkPrivateFields) {\n    if (this.privateNameStack.length === 0) {\n      this.raise(node.start\x2C ("Private field '#" + (node.name) + "' must be declared in an enclosing class"));\n    } else {\n      this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n    }\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$5.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types$1.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node\x2C "YieldExpression")\n};\n\npp$5.parseAwait = function(forInit) {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null\x2C true\x2C false\x2C forInit);\n  return this.finishNode(node\x2C "AwaitExpression")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error\x2C attaches the position to the end\n// of the error message\x2C and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos\x2C message) {\n  var loc = getLineInfo(this.input\x2C pos);\n  message += " (" + loc.line + ":" + loc.column + ")";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine\x2C this.pos - this.lineStart)\n  }\n};\n\nvar pp$3 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$3.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$3.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function\x2C or script\x2C function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$3.declareName = function(name\x2C bindingType\x2C pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos\x2C ("Identifier '" + name + "' has already been declared")); }\n};\n\npp$3.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$3.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$3.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`\x2C `new.target`\x2C `super()`\x2C `super.property`\x2C and `super[property]`.\npp$3.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser\x2C pos\x2C loc) {\n  this.type = "";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser\x2C loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos\x2C 0]; }\n};\n\n// Start an AST node\x2C attaching a start offset.\n\nvar pp$2 = Parser.prototype;\n\npp$2.startNode = function() {\n  return new Node(this\x2C this.start\x2C this.startLoc)\n};\n\npp$2.startNodeAt = function(pos\x2C loc) {\n  return new Node(this\x2C pos\x2C loc)\n};\n\n// Finish an AST node\x2C adding `type` and `end` properties.\n\nfunction finishNodeAt(node\x2C type\x2C pos\x2C loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$2.finishNode = function(node\x2C type) {\n  return finishNodeAt.call(this\x2C node\x2C type\x2C this.lastTokEnd\x2C this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$2.finishNodeAt = function(node\x2C type\x2C pos\x2C loc) {\n  return finishNodeAt.call(this\x2C node\x2C type\x2C pos\x2C loc)\n};\n\npp$2.copyNode = function(node) {\n  var newNode = new Node(this\x2C node.start\x2C this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// This file contains Unicode properties extracted from the ECMAScript specification.\n// The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";\nvar ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar ecma14BinaryProperties = ecma13BinaryProperties;\n\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties\x2C\n  10: ecma10BinaryProperties\x2C\n  11: ecma11BinaryProperties\x2C\n  12: ecma12BinaryProperties\x2C\n  13: ecma13BinaryProperties\x2C\n  14: ecma14BinaryProperties\n};\n\n// #table-binary-unicode-properties-of-strings\nvar ecma14BinaryPropertiesOfStrings = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";\n\nvar unicodeBinaryPropertiesOfStrings = {\n  9: ""\x2C\n  10: ""\x2C\n  11: ""\x2C\n  12: ""\x2C\n  13: ""\x2C\n  14: ecma14BinaryPropertiesOfStrings\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";\nvar ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";\nvar ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";\nvar ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";\nvar ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";\nvar ecma14ScriptValues = ecma13ScriptValues + " Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz";\n\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues\x2C\n  10: ecma10ScriptValues\x2C\n  11: ecma11ScriptValues\x2C\n  12: ecma12ScriptValues\x2C\n  13: ecma13ScriptValues\x2C\n  14: ecma14ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues)\x2C\n    binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion])\x2C\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues)\x2C\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nfor (var i = 0\x2C list = [9\x2C 10\x2C 11\x2C 12\x2C 13\x2C 14]; i < list.length; i += 1) {\n  var ecmaVersion = list[i];\n\n  buildUnicodeData(ecmaVersion);\n}\n\nvar pp$1 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n  this.source = "";\n  this.flags = "";\n  this.start = 0;\n  this.switchU = false;\n  this.switchV = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = "";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start\x2C pattern\x2C flags) {\n  var unicodeSets = flags.indexOf("v") !== -1;\n  var unicode = flags.indexOf("u") !== -1;\n  this.start = start | 0;\n  this.source = pattern + "";\n  this.flags = flags;\n  if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n    this.switchU = true;\n    this.switchV = true;\n    this.switchN = true;\n  } else {\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchV = false;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  }\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start\x2C ("Invalid regular expression: /" + (this.source) + "/: " + message));\n};\n\n// If u flag is given\x2C this returns the code point at the index (it combines a surrogate pair).\n// Otherwise\x2C this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i\x2C forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i\x2C forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i)\x2C next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos\x2C forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos\x2C forceU)\x2C forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos\x2C forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch\x2C forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nRegExpValidationState.prototype.eatChars = function eatChars (chs\x2C forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var pos = this.pos;\n  for (var i = 0\x2C list = chs; i < list.length; i += 1) {\n    var ch = list[i];\n\n      var current = this.at(pos\x2C forceU);\n    if (current === -1 || current !== ch) {\n      return false\n    }\n    pos = this.nextIndex(pos\x2C forceU);\n  }\n  this.pos = pos;\n  return true\n};\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  var u = false;\n  var v = false;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start\x2C "Invalid regular expression flag");\n    }\n    if (flags.indexOf(flag\x2C i + 1) > -1) {\n      this.raise(state.start\x2C "Duplicate regular expression flag");\n    }\n    if (flag === "u") { u = true; }\n    if (flag === "v") { v = true; }\n  }\n  if (this.options.ecmaVersion >= 15 && u && v) {\n    this.raise(state.start\x2C "Invalid regular expression flag");\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U\x2C ~N]|. If the result of\n  // parsing contains a |GroupName|\x2C reparse with the goal symbol\n  // |Pattern[~U\x2C +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar\x2C if any elements of _P_\n  // were not matched by the parse\x2C or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = "";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise("Unmatched ')'");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise("Lone quantifier brackets");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise("Invalid escape");\n  }\n  for (var i = 0\x2C list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise("Invalid named capture referenced");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state\x2C true)) {\n    state.raise("Nothing to repeat");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise("Lone quantifier brackets");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise("Invalid quantifier");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^\x2C $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise("Unterminated group");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state\x2C noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state\x2C noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state\x2C noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state\x2C noError)\n  )\n};\npp$1.regexp_eatBracedQuantifier = function(state\x2C noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0\x2C max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* \x2C */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise("numbers out of order in {} quantifier");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise("Incomplete quantifier");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise("Unterminated group");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise("Invalid group");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise("Unterminated group");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state\x2C true)) {\n    state.raise("Nothing to repeat");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise("Duplicate capture group name");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise("Invalid group");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n  state.lastStringValue = "";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise("Invalid capture group name");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = "";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state\x2C forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch\x2C true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state\x2C forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch\x2C true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise("Invalid unicode escape");\n    }\n    state.raise("Invalid escape");\n  }\n  return false\n};\npp$1.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise("Invalid named reference");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state\x2C false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$1.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state\x2C forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state\x2C 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state\x2C 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise("Invalid unicode escape");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// Return values used by character set parsing methods\x2C needed to\n// forbid negation of sets that can match strings.\nvar CharSetNone = 0; // Nothing parsed\nvar CharSetOk = 1; // Construct parsed\x2C cannot contain strings\nvar CharSetString = 2; // Construct parsed\x2C can contain strings\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return CharSetOk\n  }\n\n  var negate = false;\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    ((negate = ch === 0x50 /* P */) || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    var result;\n    if (\n      state.eat(0x7B /* { */) &&\n      (result = this.regexp_eatUnicodePropertyValueExpression(state)) &&\n      state.eat(0x7D /* } */)\n    ) {\n      if (negate && result === CharSetString) { state.raise("Invalid property name"); }\n      return result\n    }\n    state.raise("Invalid property name");\n  }\n\n  return CharSetNone\n};\n\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state\x2C name\x2C value);\n      return CharSetOk\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    return this.regexp_validateUnicodePropertyNameOrValue(state\x2C nameOrValue)\n  }\n  return CharSetNone\n};\n\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state\x2C name\x2C value) {\n  if (!hasOwn(state.unicodeProperties.nonBinary\x2C name))\n    { state.raise("Invalid property name"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise("Invalid property value"); }\n};\n\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state\x2C nameOrValue) {\n  if (state.unicodeProperties.binary.test(nameOrValue)) { return CharSetOk }\n  if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) { return CharSetString }\n  state.raise("Invalid property name");\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = "";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== ""\n};\n\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = "";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== ""\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    var negate = state.eat(0x5E /* ^ */);\n    var result = this.regexp_classContents(state);\n    if (!state.eat(0x5D /* ] */))\n      { state.raise("Unterminated character class"); }\n    if (negate && result === CharSetString)\n      { state.raise("Negated character class may contain strings"); }\n    return true\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassContents\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\npp$1.regexp_classContents = function(state) {\n  if (state.current() === 0x5D /* ] */) { return CharSetOk }\n  if (state.switchV) { return this.regexp_classSetExpression(state) }\n  this.regexp_nonEmptyClassRanges(state);\n  return CharSetOk\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_nonEmptyClassRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise("Invalid character class");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise("Range out of order in character class");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise("Invalid class escape");\n      }\n      state.raise("Invalid escape");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetExpression\n// https://tc39.es/ecma262/#prod-ClassUnion\n// https://tc39.es/ecma262/#prod-ClassIntersection\n// https://tc39.es/ecma262/#prod-ClassSubtraction\npp$1.regexp_classSetExpression = function(state) {\n  var result = CharSetOk\x2C subResult;\n  if (this.regexp_eatClassSetRange(state)) ; else if (subResult = this.regexp_eatClassSetOperand(state)) {\n    if (subResult === CharSetString) { result = CharSetString; }\n    // https://tc39.es/ecma262/#prod-ClassIntersection\n    var start = state.pos;\n    while (state.eatChars([0x26\x2C 0x26] /* && */)) {\n      if (\n        state.current() !== 0x26 /* & */ &&\n        (subResult = this.regexp_eatClassSetOperand(state))\n      ) {\n        if (subResult !== CharSetString) { result = CharSetOk; }\n        continue\n      }\n      state.raise("Invalid character in character class");\n    }\n    if (start !== state.pos) { return result }\n    // https://tc39.es/ecma262/#prod-ClassSubtraction\n    while (state.eatChars([0x2D\x2C 0x2D] /* -- */)) {\n      if (this.regexp_eatClassSetOperand(state)) { continue }\n      state.raise("Invalid character in character class");\n    }\n    if (start !== state.pos) { return result }\n  } else {\n    state.raise("Invalid character in character class");\n  }\n  // https://tc39.es/ecma262/#prod-ClassUnion\n  for (;;) {\n    if (this.regexp_eatClassSetRange(state)) { continue }\n    subResult = this.regexp_eatClassSetOperand(state);\n    if (!subResult) { return result }\n    if (subResult === CharSetString) { result = CharSetString; }\n  }\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetRange\npp$1.regexp_eatClassSetRange = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatClassSetCharacter(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassSetCharacter(state)) {\n      var right = state.lastIntValue;\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise("Range out of order in character class");\n      }\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetOperand\npp$1.regexp_eatClassSetOperand = function(state) {\n  if (this.regexp_eatClassSetCharacter(state)) { return CharSetOk }\n  return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state)\n};\n\n// https://tc39.es/ecma262/#prod-NestedClass\npp$1.regexp_eatNestedClass = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5B /* [ */)) {\n    var negate = state.eat(0x5E /* ^ */);\n    var result = this.regexp_classContents(state);\n    if (state.eat(0x5D /* ] */)) {\n      if (negate && result === CharSetString) {\n        state.raise("Negated character class may contain strings");\n      }\n      return result\n    }\n    state.pos = start;\n  }\n  if (state.eat(0x5C /* \\ */)) {\n    var result$1 = this.regexp_eatCharacterClassEscape(state);\n    if (result$1) {\n      return result$1\n    }\n    state.pos = start;\n  }\n  return null\n};\n\n// https://tc39.es/ecma262/#prod-ClassStringDisjunction\npp$1.regexp_eatClassStringDisjunction = function(state) {\n  var start = state.pos;\n  if (state.eatChars([0x5C\x2C 0x71] /* \\q */)) {\n    if (state.eat(0x7B /* { */)) {\n      var result = this.regexp_classStringDisjunctionContents(state);\n      if (state.eat(0x7D /* } */)) {\n        return result\n      }\n    } else {\n      // Make the same message as V8.\n      state.raise("Invalid escape");\n    }\n    state.pos = start;\n  }\n  return null\n};\n\n// https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\npp$1.regexp_classStringDisjunctionContents = function(state) {\n  var result = this.regexp_classString(state);\n  while (state.eat(0x7C /* | */)) {\n    if (this.regexp_classString(state) === CharSetString) { result = CharSetString; }\n  }\n  return result\n};\n\n// https://tc39.es/ecma262/#prod-ClassString\n// https://tc39.es/ecma262/#prod-NonEmptyClassString\npp$1.regexp_classString = function(state) {\n  var count = 0;\n  while (this.regexp_eatClassSetCharacter(state)) { count++; }\n  return count === 1 ? CharSetOk : CharSetString\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetCharacter\npp$1.regexp_eatClassSetCharacter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (\n      this.regexp_eatCharacterEscape(state) ||\n      this.regexp_eatClassSetReservedPunctuator(state)\n    ) {\n      return true\n    }\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n    state.pos = start;\n    return false\n  }\n  var ch = state.current();\n  if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) { return false }\n  if (isClassSetSyntaxCharacter(ch)) { return false }\n  state.advance();\n  state.lastIntValue = ch;\n  return true\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\nfunction isClassSetReservedDoublePunctuatorCharacter(ch) {\n  return (\n    ch === 0x21 /* ! */ ||\n    ch >= 0x23 /* # */ && ch <= 0x26 /* & */ ||\n    ch >= 0x2A /* * */ && ch <= 0x2C /* \x2C */ ||\n    ch === 0x2E /* . */ ||\n    ch >= 0x3A /* : */ && ch <= 0x40 /* @ */ ||\n    ch === 0x5E /* ^ */ ||\n    ch === 0x60 /* ` */ ||\n    ch === 0x7E /* ~ */\n  )\n}\n\n// https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\nfunction isClassSetSyntaxCharacter(ch) {\n  return (\n    ch === 0x28 /* ( */ ||\n    ch === 0x29 /* ) */ ||\n    ch === 0x2D /* - */ ||\n    ch === 0x2F /* / */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5D /* ] */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\npp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n  var ch = state.current();\n  if (isClassSetReservedPunctuator(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\nfunction isClassSetReservedPunctuator(ch) {\n  return (\n    ch === 0x21 /* ! */ ||\n    ch === 0x23 /* # */ ||\n    ch === 0x25 /* % */ ||\n    ch === 0x26 /* & */ ||\n    ch === 0x2C /* \x2C */ ||\n    ch === 0x2D /* - */ ||\n    ch >= 0x3A /* : */ && ch <= 0x3E /* > */ ||\n    ch === 0x40 /* @ */ ||\n    ch === 0x60 /* ` */ ||\n    ch === 0x7E /* ~ */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state\x2C 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise("Invalid escape");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state\x2C length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally\x2C tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p\x2C p.startLoc\x2C p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start\x2C p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Move to the next token\n\npp.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start\x2C "Escape sequence in keyword " + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment\x2C make parsers iterable\nif (typeof Symbol !== "undefined")\n  { pp[Symbol.iterator] = function() {\n    var this$1$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1$1.getToken();\n        return {\n          done: token.type === types$1.eof\x2C\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`"use strict"; 010;` should fail).\n\n// Read a single token\x2C updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers\x2C so '\\' also dispatches to that.\n  if (isIdentifierStart(code\x2C this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos\x2C end = this.input.indexOf("*/"\x2C this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2\x2C "Unterminated comment"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    for (var nextBreak = (void 0)\x2C pos = start; (nextBreak = nextLineBreak(this.input\x2C pos\x2C this.pos)) > -1;) {\n      ++this.curLine;\n      pos = this.lineStart = nextBreak;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true\x2C this.input.slice(start + 2\x2C end)\x2C start\x2C this.pos\x2C\n                           startLoc\x2C this.curPosition()); }\n};\n\npp.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false\x2C this.input.slice(start + startSkip\x2C this.pos)\x2C start\x2C this.pos\x2C\n                           startLoc\x2C this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments\x2C and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`\x2C `val`\x2C and\n// maintains `context` and `exprAllowed`\x2C and skips the space after\n// the token\x2C so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type\x2C val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure\x2C because it works in character codes rather\n// than characters\x2C and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types$1.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types$1.dot)\n  }\n};\n\npp.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types$1.assign\x2C 2) }\n  return this.finishOp(types$1.slash\x2C 1)\n};\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types$1.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types$1.assign\x2C size + 1) }\n  return this.finishOp(tokentype\x2C size)\n};\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types$1.assign\x2C 3) }\n    }\n    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND\x2C 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign\x2C 2) }\n  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND\x2C 1)\n};\n\npp.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.assign\x2C 2) }\n  return this.finishOp(types$1.bitwiseXOR\x2C 1)\n};\n\npp.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd\x2C this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types$1.incDec\x2C 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign\x2C 2) }\n  return this.finishOp(types$1.plusMin\x2C 1)\n};\n\npp.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign\x2C size + 1) }\n    return this.finishOp(types$1.bitShift\x2C size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`\x2C an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types$1.relational\x2C size)\n};\n\npp.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.equality\x2C this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types$1.arrow)\n  }\n  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix\x2C 1)\n};\n\npp.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot\x2C 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types$1.assign\x2C 3) }\n      }\n      return this.finishOp(types$1.coalesce\x2C 2)\n    }\n  }\n  return this.finishOp(types$1.question\x2C 1)\n};\n\npp.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code\x2C true) || code === 92 /* '\\' */) {\n      return this.finishToken(types$1.privateId\x2C this.readWord1())\n    }\n  }\n\n  this.raise(this.pos\x2C "Unexpected character '" + codePointToString(code) + "'");\n};\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types$1.parenL)\n  case 41: ++this.pos; return this.finishToken(types$1.parenR)\n  case 59: ++this.pos; return this.finishToken(types$1.semi)\n  case 44: ++this.pos; return this.finishToken(types$1.comma)\n  case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n  case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n  case 123: ++this.pos; return this.finishToken(types$1.braceL)\n  case 125: ++this.pos; return this.finishToken(types$1.braceR)\n  case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types$1.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x'\x2C '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o'\x2C '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b'\x2C '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer\x2C octal\n  // number\x2C or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '"'\x2C "'"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument\x2C and returns a token\n  // of the type given by its first argument.\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types$1.prefix\x2C 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos\x2C "Unexpected character '" + codePointToString(code) + "'");\n};\n\npp.finishOp = function(type\x2C size) {\n  var str = this.input.slice(this.pos\x2C this.pos + size);\n  this.pos += size;\n  return this.finishToken(type\x2C str)\n};\n\npp.readRegexp = function() {\n  var escaped\x2C inClass\x2C start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start\x2C "Unterminated regular expression"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start\x2C "Unterminated regular expression"); }\n    if (!escaped) {\n      if (ch === "[") { inClass = true; }\n      else if (ch === "]" && inClass) { inClass = false; }\n      else if (ch === "/" && !inClass) { break }\n      escaped = ch === "\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start\x2C this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start\x2C pattern\x2C flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern\x2C flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types$1.regexp\x2C {pattern: pattern\x2C flags: flags\x2C value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read\x2C the integer value otherwise. When `len` is given\x2C this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix\x2C len\x2C maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case\x2C disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x\x2C0o\x2C0b)\n  // and isn't fraction part nor exponent part. In that case\x2C if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos\x2C total = 0\x2C lastCode = 0;\n  for (var i = 0\x2C e = len == null ? Infinity : len; i < e; ++i\x2C ++this.pos) {\n    var code = this.input.charCodeAt(this.pos)\x2C val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos\x2C "Numeric separator is not allowed in legacy octal numeric literals"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos\x2C "Numeric separator must be exactly one underscore"); }\n      if (i === 0) { this.raiseRecoverable(this.pos\x2C "Numeric separator is not allowed at the first of digits"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1\x2C "Numeric separator is not allowed at the last of digits"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str\x2C isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str\x2C 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g\x2C ""))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== "function") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g\x2C ""))\n}\n\npp.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2\x2C "Expected number in radix " + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start\x2C this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos\x2C "Identifier directly after number"); }\n  return this.finishToken(types$1.num\x2C val)\n};\n\n// Read an integer\x2C octal integer\x2C or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10\x2C undefined\x2C true) === null) { this.raise(start\x2C "Invalid number"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start\x2C "Invalid number"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start\x2C this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos\x2C "Identifier directly after number"); }\n    return this.finishToken(types$1.num\x2C val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start\x2C this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start\x2C "Invalid number"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos\x2C "Identifier directly after number"); }\n\n  var val = stringToNumber(this.input.slice(start\x2C this.pos)\x2C octal);\n  return this.finishToken(types$1.num\x2C val)\n};\n\n// Read a string value\x2C interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos)\x2C code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf("}"\x2C this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos\x2C "Code point out of bounds"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\npp.readString = function(quote) {\n  var out = ""\x2C chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start\x2C "Unterminated string constant"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart\x2C this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else if (ch === 0x2028 || ch === 0x2029) {\n      if (this.options.ecmaVersion < 10) { this.raise(this.start\x2C "Unterminated string constant"); }\n      ++this.pos;\n      if (this.options.locations) {\n        this.curLine++;\n        this.lineStart = this.pos;\n      }\n    } else {\n      if (isNewLine(ch)) { this.raise(this.start\x2C "Unterminated string constant"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart\x2C this.pos++);\n  return this.finishToken(types$1.string\x2C out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp.invalidStringToken = function(position\x2C message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position\x2C message);\n  }\n};\n\npp.readTmplToken = function() {\n  var out = ""\x2C chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start\x2C "Unterminated template"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`'\x2C '${'\n      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types$1.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types$1.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart\x2C this.pos);\n      return this.finishToken(types$1.template\x2C out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart\x2C this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart\x2C this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += "\\n";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end\x2C without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case "\\\\":\n      ++this.pos;\n      break\n\n    case "$":\n      if (this.input[this.pos + 1] !== "{") {\n        break\n      }\n\n    // falls through\n    case "`":\n      return this.finishToken(types$1.invalidTemplate\x2C this.input.slice(this.start\x2C this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start\x2C "Unterminated template");\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return "\\n" // 'n' -> '\\n'\n  case 114: return "\\r" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return "\\t" // 't' -> '\\t'\n  case 98: return "\\b" // 'b' -> '\\b'\n  case 118: return "\\u000b" // 'v' -> '\\u000b'\n  case 102: return "\\f" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return ""\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1\x2C\n        "Invalid escape sequence"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos\x2C\n        "Invalid escape sequence in template string"\n      );\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1\x2C 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr\x2C 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0\x2C -1);\n        octal = parseInt(octalStr\x2C 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length\x2C\n          inTemplate\n            ? "Octal literal in template string"\n            : "Octal literal in strict mode"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return ""\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x'\x2C '\\u'\x2C '\\U').\n\npp.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16\x2C len);\n  if (n === null) { this.invalidStringToken(codePos\x2C "Bad character escape sequence"); }\n  return n\n};\n\n// Read an identifier\x2C and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars\x2C adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false;\n  var word = ""\x2C first = true\x2C chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch\x2C astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // "\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart\x2C this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // "u"\n        { this.invalidStringToken(this.pos\x2C "Expecting Unicode escape sequence \\\\uXXXX"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc\x2C astral))\n        { this.invalidStringToken(escStart\x2C "Invalid Unicode escape"); }\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart\x2C this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  var word = this.readWord1();\n  var type = types$1.name;\n  if (this.keywords.test(word)) {\n    type = keywords[word];\n  }\n  return this.finishToken(type\x2C word)\n};\n\n// Acorn is a tiny\x2C fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke\x2C Ingvar Stepanyan\x2C and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// [walk]: util/walk.js\n\n\nvar version = "8.10.0";\n\nParser.acorn = {\n  Parser: Parser\x2C\n  version: version\x2C\n  defaultOptions: defaultOptions\x2C\n  Position: Position\x2C\n  SourceLocation: SourceLocation\x2C\n  getLineInfo: getLineInfo\x2C\n  Node: Node\x2C\n  TokenType: TokenType\x2C\n  tokTypes: types$1\x2C\n  keywordTypes: keywords\x2C\n  TokContext: TokContext\x2C\n  tokContexts: types\x2C\n  isIdentifierChar: isIdentifierChar\x2C\n  isIdentifierStart: isIdentifierStart\x2C\n  Token: Token\x2C\n  isNewLine: isNewLine\x2C\n  lineBreak: lineBreak\x2C\n  lineBreakG: lineBreakG\x2C\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input\x2C options) {\n  return Parser.parse(input\x2C options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input\x2C pos\x2C options) {\n  return Parser.parseExpressionAt(input\x2C pos\x2C options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input\x2C options) {\n  return Parser.tokenizer(input\x2C options)\n}\n\nconst _acorn = /*#__PURE__*/Object.defineProperty({\n  __proto__: null\x2C\n  Node\x2C\n  Parser\x2C\n  Position\x2C\n  SourceLocation\x2C\n  TokContext\x2C\n  Token\x2C\n  TokenType\x2C\n  defaultOptions\x2C\n  getLineInfo\x2C\n  isIdentifierChar\x2C\n  isIdentifierStart\x2C\n  isNewLine\x2C\n  keywordTypes: keywords\x2C\n  lineBreak\x2C\n  lineBreakG\x2C\n  nonASCIIwhitespace\x2C\n  parse\x2C\n  parseExpressionAt\x2C\n  tokContexts: types\x2C\n  tokTypes: types$1\x2C\n  tokenizer\x2C\n  version\n}\x2C Symbol.toStringTag\x2C { value: 'Module' });\n\nfunction flru (max) {\n\x09var num\x2C curr\x2C prev;\n\x09var limit = max || 1;\n\n\x09function keep(key\x2C value) {\n\x09\x09if (++num > limit) {\n\x09\x09\x09prev = curr;\n\x09\x09\x09reset(1);\n\x09\x09\x09++num;\n\x09\x09}\n\x09\x09curr[key] = value;\n\x09}\n\n\x09function reset(isPartial) {\n\x09\x09num = 0;\n\x09\x09curr = Object.create(null);\n\x09\x09isPartial || (prev=Object.create(null));\n\x09}\n\n\x09reset();\n\n\x09return {\n\x09\x09clear: reset\x2C\n\x09\x09has: function (key) {\n\x09\x09\x09return curr[key] !== void 0 || prev[key] !== void 0;\n\x09\x09}\x2C\n\x09\x09get: function (key) {\n\x09\x09\x09var val = curr[key];\n\x09\x09\x09if (val !== void 0) return val;\n\x09\x09\x09if ((val=prev[key]) !== void 0) {\n\x09\x09\x09\x09keep(key\x2C val);\n\x09\x09\x09\x09return val;\n\x09\x09\x09}\n\x09\x09}\x2C\n\x09\x09set: function (key\x2C value) {\n\x09\x09\x09if (curr[key] !== void 0) {\n\x09\x09\x09\x09curr[key] = value;\n\x09\x09\x09} else {\n\x09\x09\x09\x09keep(key\x2C value);\n\x09\x09\x09}\n\x09\x09}\n\x09};\n}\n\nfunction resolveIdViaPlugins(source\x2C importer\x2C pluginDriver\x2C moduleLoaderResolveId\x2C skip\x2C customOptions\x2C isEntry\x2C assertions) {\n    let skipped = null;\n    let replaceContext = null;\n    if (skip) {\n        skipped = new Set();\n        for (const skippedCall of skip) {\n            if (source === skippedCall.source && importer === skippedCall.importer) {\n                skipped.add(skippedCall.plugin);\n            }\n        }\n        replaceContext = (pluginContext\x2C plugin) => ({\n            ...pluginContext\x2C\n            resolve: (source\x2C importer\x2C { assertions\x2C custom\x2C isEntry\x2C skipSelf } = BLANK) => moduleLoaderResolveId(source\x2C importer\x2C custom\x2C isEntry\x2C assertions || EMPTY_OBJECT\x2C skipSelf ? [...skip\x2C { importer\x2C plugin\x2C source }] : skip)\n        });\n    }\n    return pluginDriver.hookFirstAndGetPlugin('resolveId'\x2C [source\x2C importer\x2C { assertions\x2C custom: customOptions\x2C isEntry }]\x2C replaceContext\x2C skipped);\n}\n\nasync function resolveId(source\x2C importer\x2C preserveSymlinks\x2C pluginDriver\x2C moduleLoaderResolveId\x2C skip\x2C customOptions\x2C isEntry\x2C assertions) {\n    const pluginResult = await resolveIdViaPlugins(source\x2C importer\x2C pluginDriver\x2C moduleLoaderResolveId\x2C skip\x2C customOptions\x2C isEntry\x2C assertions);\n    if (pluginResult != null) {\n        const [resolveIdResult\x2C plugin] = pluginResult;\n        if (typeof resolveIdResult === 'object' && !resolveIdResult.resolvedBy) {\n            return {\n                ...resolveIdResult\x2C\n                resolvedBy: plugin.name\n            };\n        }\n        if (typeof resolveIdResult === 'string') {\n            return {\n                id: resolveIdResult\x2C\n                resolvedBy: plugin.name\n            };\n        }\n        return resolveIdResult;\n    }\n    // external modules (non-entry modules that start with neither '.' or '/')\n    // are skipped at this stage.\n    if (importer !== undefined && !isAbsolute(source) && source[0] !== '.')\n        return null;\n    // `resolve` processes paths from right to left\x2C prepending them until an\n    // absolute path is created. Absolute importees therefore shortcircuit the\n    // resolve call and require no special handing on our part.\n    // See https://nodejs.org/api/path.html#path_path_resolve_paths\n    return addJsExtensionIfNecessary(importer ? resolve(dirname(importer)\x2C source) : resolve(source)\x2C preserveSymlinks);\n}\nasync function addJsExtensionIfNecessary(file\x2C preserveSymlinks) {\n    return ((await findFile(file\x2C preserveSymlinks)) ??\n        (await findFile(file + '.mjs'\x2C preserveSymlinks)) ??\n        (await findFile(file + '.js'\x2C preserveSymlinks)));\n}\nasync function findFile(file\x2C preserveSymlinks) {\n    try {\n        const stats = await lstat(file);\n        if (!preserveSymlinks && stats.isSymbolicLink())\n            return await findFile(await realpath(file)\x2C preserveSymlinks);\n        if ((preserveSymlinks && stats.isSymbolicLink()) || stats.isFile()) {\n            // check case\n            const name = basename(file);\n            const files = await readdir(dirname(file));\n            if (files.includes(name))\n                return file;\n        }\n    }\n    catch {\n        // suppress\n    }\n}\n\nconst ANONYMOUS_PLUGIN_PREFIX = 'at position ';\nconst ANONYMOUS_OUTPUT_PLUGIN_PREFIX = 'at output position ';\n\nfunction createPluginCache(cache) {\n    return {\n        delete(id) {\n            return delete cache[id];\n        }\x2C\n        get(id) {\n            const item = cache[id];\n            if (!item)\n                return;\n            item[0] = 0;\n            return item[1];\n        }\x2C\n        has(id) {\n            const item = cache[id];\n            if (!item)\n                return false;\n            item[0] = 0;\n            return true;\n        }\x2C\n        set(id\x2C value) {\n            cache[id] = [0\x2C value];\n        }\n    };\n}\nfunction getTrackedPluginCache(pluginCache\x2C onUse) {\n    return {\n        delete(id) {\n            onUse();\n            return pluginCache.delete(id);\n        }\x2C\n        get(id) {\n            onUse();\n            return pluginCache.get(id);\n        }\x2C\n        has(id) {\n            onUse();\n            return pluginCache.has(id);\n        }\x2C\n        set(id\x2C value) {\n            onUse();\n            return pluginCache.set(id\x2C value);\n        }\n    };\n}\nconst NO_CACHE = {\n    delete() {\n        return false;\n    }\x2C\n    get() {\n        return undefined;\n    }\x2C\n    has() {\n        return false;\n    }\x2C\n    set() { }\n};\nfunction uncacheablePluginError(pluginName) {\n    if (pluginName.startsWith(ANONYMOUS_PLUGIN_PREFIX) ||\n        pluginName.startsWith(ANONYMOUS_OUTPUT_PLUGIN_PREFIX)) {\n        return error(logAnonymousPluginCache());\n    }\n    return error(logDuplicatePluginName(pluginName));\n}\nfunction getCacheForUncacheablePlugin(pluginName) {\n    return {\n        delete() {\n            return uncacheablePluginError(pluginName);\n        }\x2C\n        get() {\n            return uncacheablePluginError(pluginName);\n        }\x2C\n        has() {\n            return uncacheablePluginError(pluginName);\n        }\x2C\n        set() {\n            return uncacheablePluginError(pluginName);\n        }\n    };\n}\n\nasync function asyncFlatten(array) {\n    do {\n        array = (await Promise.all(array)).flat(Infinity);\n    } while (array.some((v) => v?.then));\n    return array;\n}\n\nconst getOnLog = (config\x2C logLevel\x2C printLog = defaultPrintLog) => {\n    const { onwarn\x2C onLog } = config;\n    const defaultOnLog = getDefaultOnLog(printLog\x2C onwarn);\n    if (onLog) {\n        const minimalPriority = logLevelPriority[logLevel];\n        return (level\x2C log) => onLog(level\x2C addLogToString(log)\x2C (level\x2C handledLog) => {\n            if (level === LOGLEVEL_ERROR) {\n                return error(normalizeLog(handledLog));\n            }\n            if (logLevelPriority[level] >= minimalPriority) {\n                defaultOnLog(level\x2C normalizeLog(handledLog));\n            }\n        });\n    }\n    return defaultOnLog;\n};\nconst getDefaultOnLog = (printLog\x2C onwarn) => onwarn\n    ? (level\x2C log) => {\n        if (level === LOGLEVEL_WARN) {\n            onwarn(addLogToString(log)\x2C warning => printLog(LOGLEVEL_WARN\x2C normalizeLog(warning)));\n        }\n        else {\n            printLog(level\x2C log);\n        }\n    }\n    : printLog;\nconst addLogToString = (log) => {\n    Object.defineProperty(log\x2C 'toString'\x2C {\n        value: () => getExtendedLogMessage(log)\x2C\n        writable: true\n    });\n    return log;\n};\nconst normalizeLog = (log) => typeof log === 'string'\n    ? { message: log }\n    : typeof log === 'function'\n        ? normalizeLog(log())\n        : log;\nconst getExtendedLogMessage = (log) => {\n    let prefix = '';\n    if (log.plugin) {\n        prefix += `(${log.plugin} plugin) `;\n    }\n    if (log.loc) {\n        prefix += `${relativeId(log.loc.file)} (${log.loc.line}:${log.loc.column}) `;\n    }\n    return prefix + log.message;\n};\nconst defaultPrintLog = (level\x2C log) => {\n    const message = getExtendedLogMessage(log);\n    switch (level) {\n        case LOGLEVEL_WARN: {\n            return console.warn(message);\n        }\n        case LOGLEVEL_DEBUG: {\n            return console.debug(message);\n        }\n        default: {\n            return console.info(message);\n        }\n    }\n};\nfunction warnUnknownOptions(passedOptions\x2C validOptions\x2C optionType\x2C log\x2C ignoredKeys = /$./) {\n    const validOptionSet = new Set(validOptions);\n    const unknownOptions = Object.keys(passedOptions).filter(key => !(validOptionSet.has(key) || ignoredKeys.test(key)));\n    if (unknownOptions.length > 0) {\n        log(LOGLEVEL_WARN\x2C logUnknownOption(optionType\x2C unknownOptions\x2C [...validOptionSet].sort()));\n    }\n}\nconst treeshakePresets = {\n    recommended: {\n        annotations: true\x2C\n        correctVarValueBeforeDeclaration: false\x2C\n        manualPureFunctions: EMPTY_ARRAY\x2C\n        moduleSideEffects: () => true\x2C\n        propertyReadSideEffects: true\x2C\n        tryCatchDeoptimization: true\x2C\n        unknownGlobalSideEffects: false\n    }\x2C\n    safest: {\n        annotations: true\x2C\n        correctVarValueBeforeDeclaration: true\x2C\n        manualPureFunctions: EMPTY_ARRAY\x2C\n        moduleSideEffects: () => true\x2C\n        propertyReadSideEffects: true\x2C\n        tryCatchDeoptimization: true\x2C\n        unknownGlobalSideEffects: true\n    }\x2C\n    smallest: {\n        annotations: true\x2C\n        correctVarValueBeforeDeclaration: false\x2C\n        manualPureFunctions: EMPTY_ARRAY\x2C\n        moduleSideEffects: () => false\x2C\n        propertyReadSideEffects: false\x2C\n        tryCatchDeoptimization: false\x2C\n        unknownGlobalSideEffects: false\n    }\n};\nconst generatedCodePresets = {\n    es2015: {\n        arrowFunctions: true\x2C\n        constBindings: true\x2C\n        objectShorthand: true\x2C\n        reservedNamesAsProps: true\x2C\n        symbols: true\n    }\x2C\n    es5: {\n        arrowFunctions: false\x2C\n        constBindings: false\x2C\n        objectShorthand: false\x2C\n        reservedNamesAsProps: true\x2C\n        symbols: false\n    }\n};\nconst objectifyOption = (value) => value && typeof value === 'object' ? value : {};\nconst objectifyOptionWithPresets = (presets\x2C optionName\x2C urlSnippet\x2C additionalValues) => (value) => {\n    if (typeof value === 'string') {\n        const preset = presets[value];\n        if (preset) {\n            return preset;\n        }\n        error(logInvalidOption(optionName\x2C urlSnippet\x2C `valid values are ${additionalValues}${printQuotedStringList(Object.keys(presets))}. You can also supply an object for more fine-grained control`\x2C value));\n    }\n    return objectifyOption(value);\n};\nconst getOptionWithPreset = (value\x2C presets\x2C optionName\x2C urlSnippet\x2C additionalValues) => {\n    const presetName = value?.preset;\n    if (presetName) {\n        const preset = presets[presetName];\n        if (preset) {\n            return { ...preset\x2C ...value };\n        }\n        else {\n            error(logInvalidOption(`${optionName}.preset`\x2C urlSnippet\x2C `valid values are ${printQuotedStringList(Object.keys(presets))}`\x2C presetName));\n        }\n    }\n    return objectifyOptionWithPresets(presets\x2C optionName\x2C urlSnippet\x2C additionalValues)(value);\n};\nconst normalizePluginOption = async (plugins) => (await asyncFlatten([plugins])).filter(Boolean);\n\nasync function transform(source\x2C module\x2C pluginDriver\x2C log) {\n    const id = module.id;\n    const sourcemapChain = [];\n    let originalSourcemap = source.map === null ? null : decodedSourcemap(source.map);\n    const originalCode = source.code;\n    let ast = source.ast;\n    const transformDependencies = [];\n    const emittedFiles = [];\n    let customTransformCache = false;\n    const useCustomTransformCache = () => (customTransformCache = true);\n    let pluginName = '';\n    let currentSource = source.code;\n    function transformReducer(previousCode\x2C result\x2C plugin) {\n        let code;\n        let map;\n        if (typeof result === 'string') {\n            code = result;\n        }\n        else if (result && typeof result === 'object') {\n            module.updateOptions(result);\n            if (result.code == null) {\n                if (result.map || result.ast) {\n                    log(LOGLEVEL_WARN\x2C logNoTransformMapOrAstWithoutCode(plugin.name));\n                }\n                return previousCode;\n            }\n            ({ code\x2C map\x2C ast } = result);\n        }\n        else {\n            return previousCode;\n        }\n        // strict null check allows 'null' maps to not be pushed to the chain\x2C\n        // while 'undefined' gets the missing map warning\n        if (map !== null) {\n            sourcemapChain.push(decodedSourcemap(typeof map === 'string' ? JSON.parse(map) : map) || {\n                missing: true\x2C\n                plugin: plugin.name\n            });\n        }\n        currentSource = code;\n        return code;\n    }\n    const getLogHandler = (handler) => (log\x2C pos) => {\n        log = normalizeLog(log);\n        if (pos)\n            augmentCodeLocation(log\x2C pos\x2C currentSource\x2C id);\n        log.id = id;\n        log.hook = 'transform';\n        handler(log);\n    };\n    let code;\n    try {\n        code = await pluginDriver.hookReduceArg0('transform'\x2C [currentSource\x2C id]\x2C transformReducer\x2C (pluginContext\x2C plugin) => {\n            pluginName = plugin.name;\n            return {\n                ...pluginContext\x2C\n                addWatchFile(id) {\n                    transformDependencies.push(id);\n                    pluginContext.addWatchFile(id);\n                }\x2C\n                cache: customTransformCache\n                    ? pluginContext.cache\n                    : getTrackedPluginCache(pluginContext.cache\x2C useCustomTransformCache)\x2C\n                debug: getLogHandler(pluginContext.debug)\x2C\n                emitFile(emittedFile) {\n                    emittedFiles.push(emittedFile);\n                    return pluginDriver.emitFile(emittedFile);\n                }\x2C\n                error(error_\x2C pos) {\n                    if (typeof error_ === 'string')\n                        error_ = { message: error_ };\n                    if (pos)\n                        augmentCodeLocation(error_\x2C pos\x2C currentSource\x2C id);\n                    error_.id = id;\n                    error_.hook = 'transform';\n                    return pluginContext.error(error_);\n                }\x2C\n                getCombinedSourcemap() {\n                    const combinedMap = collapseSourcemap(id\x2C originalCode\x2C originalSourcemap\x2C sourcemapChain\x2C log);\n                    if (!combinedMap) {\n                        const magicString = new MagicString(originalCode);\n                        return magicString.generateMap({ hires: true\x2C includeContent: true\x2C source: id });\n                    }\n                    if (originalSourcemap !== combinedMap) {\n                        originalSourcemap = combinedMap;\n                        sourcemapChain.length = 0;\n                    }\n                    return new SourceMap({\n                        ...combinedMap\x2C\n                        file: null\x2C\n                        sourcesContent: combinedMap.sourcesContent\n                    });\n                }\x2C\n                info: getLogHandler(pluginContext.info)\x2C\n                setAssetSource() {\n                    return this.error(logInvalidSetAssetSourceCall());\n                }\x2C\n                warn: getLogHandler(pluginContext.warn)\n            };\n        });\n    }\n    catch (error_) {\n        return error(logPluginError(error_\x2C pluginName\x2C { hook: 'transform'\x2C id }));\n    }\n    if (!customTransformCache && // files emitted by a transform hook need to be emitted again if the hook is skipped\n        emittedFiles.length > 0)\n        module.transformFiles = emittedFiles;\n    return {\n        ast\x2C\n        code\x2C\n        customTransformCache\x2C\n        originalCode\x2C\n        originalSourcemap\x2C\n        sourcemapChain\x2C\n        transformDependencies\n    };\n}\n\nconst RESOLVE_DEPENDENCIES = 'resolveDependencies';\nclass ModuleLoader {\n    constructor(graph\x2C modulesById\x2C options\x2C pluginDriver) {\n        this.graph = graph;\n        this.modulesById = modulesById;\n        this.options = options;\n        this.pluginDriver = pluginDriver;\n        this.implicitEntryModules = new Set();\n        this.indexedEntryModules = [];\n        this.latestLoadModulesPromise = Promise.resolve();\n        this.moduleLoadPromises = new Map();\n        this.modulesWithLoadedDependencies = new Set();\n        this.nextChunkNamePriority = 0;\n        this.nextEntryModuleIndex = 0;\n        this.resolveId = async (source\x2C importer\x2C customOptions\x2C isEntry\x2C assertions\x2C skip = null) => this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(this.options.external(source\x2C importer\x2C false)\n            ? false\n            : await resolveId(source\x2C importer\x2C this.options.preserveSymlinks\x2C this.pluginDriver\x2C this.resolveId\x2C skip\x2C customOptions\x2C typeof isEntry === 'boolean' ? isEntry : !importer\x2C assertions)\x2C importer\x2C source)\x2C assertions);\n        this.hasModuleSideEffects = options.treeshake\n            ? options.treeshake.moduleSideEffects\n            : () => true;\n    }\n    async addAdditionalModules(unresolvedModules\x2C isAddForManualChunks) {\n        const result = this.extendLoadModulesPromise(Promise.all(unresolvedModules.map(id => this.loadEntryModule(id\x2C false\x2C undefined\x2C null\x2C isAddForManualChunks))));\n        await this.awaitLoadModulesPromise();\n        return result;\n    }\n    async addEntryModules(unresolvedEntryModules\x2C isUserDefined) {\n        const firstEntryModuleIndex = this.nextEntryModuleIndex;\n        this.nextEntryModuleIndex += unresolvedEntryModules.length;\n        const firstChunkNamePriority = this.nextChunkNamePriority;\n        this.nextChunkNamePriority += unresolvedEntryModules.length;\n        const newEntryModules = await this.extendLoadModulesPromise(Promise.all(unresolvedEntryModules.map(({ id\x2C importer }) => this.loadEntryModule(id\x2C true\x2C importer\x2C null))).then(entryModules => {\n            for (const [index\x2C entryModule] of entryModules.entries()) {\n                entryModule.isUserDefinedEntryPoint =\n                    entryModule.isUserDefinedEntryPoint || isUserDefined;\n                addChunkNamesToModule(entryModule\x2C unresolvedEntryModules[index]\x2C isUserDefined\x2C firstChunkNamePriority + index);\n                const existingIndexedModule = this.indexedEntryModules.find(indexedModule => indexedModule.module === entryModule);\n                if (existingIndexedModule) {\n                    existingIndexedModule.index = Math.min(existingIndexedModule.index\x2C firstEntryModuleIndex + index);\n                }\n                else {\n                    this.indexedEntryModules.push({\n                        index: firstEntryModuleIndex + index\x2C\n                        module: entryModule\n                    });\n                }\n            }\n            this.indexedEntryModules.sort(({ index: indexA }\x2C { index: indexB }) => indexA > indexB ? 1 : -1);\n            return entryModules;\n        }));\n        await this.awaitLoadModulesPromise();\n        return {\n            entryModules: this.indexedEntryModules.map(({ module }) => module)\x2C\n            implicitEntryModules: [...this.implicitEntryModules]\x2C\n            newEntryModules\n        };\n    }\n    async emitChunk({ fileName\x2C id\x2C importer\x2C name\x2C implicitlyLoadedAfterOneOf\x2C preserveSignature }) {\n        const unresolvedModule = {\n            fileName: fileName || null\x2C\n            id\x2C\n            importer\x2C\n            name: name || null\n        };\n        const module = implicitlyLoadedAfterOneOf\n            ? await this.addEntryWithImplicitDependants(unresolvedModule\x2C implicitlyLoadedAfterOneOf)\n            : (await this.addEntryModules([unresolvedModule]\x2C false)).newEntryModules[0];\n        if (preserveSignature != null) {\n            module.preserveSignature = preserveSignature;\n        }\n        return module;\n    }\n    async preloadModule(resolvedId) {\n        const module = await this.fetchModule(this.getResolvedIdWithDefaults(resolvedId\x2C EMPTY_OBJECT)\x2C undefined\x2C false\x2C resolvedId.resolveDependencies ? RESOLVE_DEPENDENCIES : true);\n        return module.info;\n    }\n    addEntryWithImplicitDependants(unresolvedModule\x2C implicitlyLoadedAfter) {\n        const chunkNamePriority = this.nextChunkNamePriority++;\n        return this.extendLoadModulesPromise(this.loadEntryModule(unresolvedModule.id\x2C false\x2C unresolvedModule.importer\x2C null).then(async (entryModule) => {\n            addChunkNamesToModule(entryModule\x2C unresolvedModule\x2C false\x2C chunkNamePriority);\n            if (!entryModule.info.isEntry) {\n                this.implicitEntryModules.add(entryModule);\n                const implicitlyLoadedAfterModules = await Promise.all(implicitlyLoadedAfter.map(id => this.loadEntryModule(id\x2C false\x2C unresolvedModule.importer\x2C entryModule.id)));\n                for (const module of implicitlyLoadedAfterModules) {\n                    entryModule.implicitlyLoadedAfter.add(module);\n                }\n                for (const dependant of entryModule.implicitlyLoadedAfter) {\n                    dependant.implicitlyLoadedBefore.add(entryModule);\n                }\n            }\n            return entryModule;\n        }));\n    }\n    async addModuleSource(id\x2C importer\x2C module) {\n        let source;\n        try {\n            source = await this.graph.fileOperationQueue.run(async () => (await this.pluginDriver.hookFirst('load'\x2C [id])) ?? (await readFile(id\x2C 'utf8')));\n        }\n        catch (error_) {\n            let message = `Could not load ${id}`;\n            if (importer)\n                message += ` (imported by ${relativeId(importer)})`;\n            message += `: ${error_.message}`;\n            error_.message = message;\n            throw error_;\n        }\n        const sourceDescription = typeof source === 'string'\n            ? { code: source }\n            : source != null && typeof source === 'object' && typeof source.code === 'string'\n                ? source\n                : error(logBadLoader(id));\n        const cachedModule = this.graph.cachedModules.get(id);\n        if (cachedModule &&\n            !cachedModule.customTransformCache &&\n            cachedModule.originalCode === sourceDescription.code &&\n            !(await this.pluginDriver.hookFirst('shouldTransformCachedModule'\x2C [\n                {\n                    ast: cachedModule.ast\x2C\n                    code: cachedModule.code\x2C\n                    id: cachedModule.id\x2C\n                    meta: cachedModule.meta\x2C\n                    moduleSideEffects: cachedModule.moduleSideEffects\x2C\n                    resolvedSources: cachedModule.resolvedIds\x2C\n                    syntheticNamedExports: cachedModule.syntheticNamedExports\n                }\n            ]))) {\n            if (cachedModule.transformFiles) {\n                for (const emittedFile of cachedModule.transformFiles)\n                    this.pluginDriver.emitFile(emittedFile);\n            }\n            module.setSource(cachedModule);\n        }\n        else {\n            module.updateOptions(sourceDescription);\n            module.setSource(await transform(sourceDescription\x2C module\x2C this.pluginDriver\x2C this.options.onLog));\n        }\n    }\n    async awaitLoadModulesPromise() {\n        let startingPromise;\n        do {\n            startingPromise = this.latestLoadModulesPromise;\n            await startingPromise;\n        } while (startingPromise !== this.latestLoadModulesPromise);\n    }\n    extendLoadModulesPromise(loadNewModulesPromise) {\n        this.latestLoadModulesPromise = Promise.all([\n            loadNewModulesPromise\x2C\n            this.latestLoadModulesPromise\n        ]);\n        this.latestLoadModulesPromise.catch(() => {\n            /* Avoid unhandled Promise rejections */\n        });\n        return loadNewModulesPromise;\n    }\n    async fetchDynamicDependencies(module\x2C resolveDynamicImportPromises) {\n        const dependencies = await Promise.all(resolveDynamicImportPromises.map(resolveDynamicImportPromise => resolveDynamicImportPromise.then(async ([dynamicImport\x2C resolvedId]) => {\n            if (resolvedId === null)\n                return null;\n            if (typeof resolvedId === 'string') {\n                dynamicImport.resolution = resolvedId;\n                return null;\n            }\n            return (dynamicImport.resolution = await this.fetchResolvedDependency(relativeId(resolvedId.id)\x2C module.id\x2C resolvedId));\n        })));\n        for (const dependency of dependencies) {\n            if (dependency) {\n                module.dynamicDependencies.add(dependency);\n                dependency.dynamicImporters.push(module.id);\n            }\n        }\n    }\n    // If this is a preload\x2C then this method always waits for the dependencies of\n    // the module to be resolved.\n    // Otherwise\x2C if the module does not exist\x2C it waits for the module and all\n    // its dependencies to be loaded.\n    // Otherwise\x2C it returns immediately.\n    async fetchModule({ assertions\x2C id\x2C meta\x2C moduleSideEffects\x2C syntheticNamedExports }\x2C importer\x2C isEntry\x2C isPreload) {\n        const existingModule = this.modulesById.get(id);\n        if (existingModule instanceof Module) {\n            if (importer && doAssertionsDiffer(assertions\x2C existingModule.info.assertions)) {\n                this.options.onLog(LOGLEVEL_WARN\x2C logInconsistentImportAssertions(existingModule.info.assertions\x2C assertions\x2C id\x2C importer));\n            }\n            await this.handleExistingModule(existingModule\x2C isEntry\x2C isPreload);\n            return existingModule;\n        }\n        if (existingModule instanceof ExternalModule) {\n            return error(logExternalModulesCannotBeTransformedToModules(existingModule.id));\n        }\n        const module = new Module(this.graph\x2C id\x2C this.options\x2C isEntry\x2C moduleSideEffects\x2C syntheticNamedExports\x2C meta\x2C assertions);\n        this.modulesById.set(id\x2C module);\n        this.graph.watchFiles[id] = true;\n        const loadPromise = this.addModuleSource(id\x2C importer\x2C module).then(() => [\n            this.getResolveStaticDependencyPromises(module)\x2C\n            this.getResolveDynamicImportPromises(module)\x2C\n            loadAndResolveDependenciesPromise\n        ]);\n        const loadAndResolveDependenciesPromise = waitForDependencyResolution(loadPromise).then(() => this.pluginDriver.hookParallel('moduleParsed'\x2C [module.info]));\n        loadAndResolveDependenciesPromise.catch(() => {\n            /* avoid unhandled promise rejections */\n        });\n        this.moduleLoadPromises.set(module\x2C loadPromise);\n        const resolveDependencyPromises = await loadPromise;\n        if (!isPreload) {\n            await this.fetchModuleDependencies(module\x2C ...resolveDependencyPromises);\n        }\n        else if (isPreload === RESOLVE_DEPENDENCIES) {\n            await loadAndResolveDependenciesPromise;\n        }\n        return module;\n    }\n    async fetchModuleDependencies(module\x2C resolveStaticDependencyPromises\x2C resolveDynamicDependencyPromises\x2C loadAndResolveDependenciesPromise) {\n        if (this.modulesWithLoadedDependencies.has(module)) {\n            return;\n        }\n        this.modulesWithLoadedDependencies.add(module);\n        await Promise.all([\n            this.fetchStaticDependencies(module\x2C resolveStaticDependencyPromises)\x2C\n            this.fetchDynamicDependencies(module\x2C resolveDynamicDependencyPromises)\n        ]);\n        module.linkImports();\n        // To handle errors when resolving dependencies or in moduleParsed\n        await loadAndResolveDependenciesPromise;\n    }\n    fetchResolvedDependency(source\x2C importer\x2C resolvedId) {\n        if (resolvedId.external) {\n            const { assertions\x2C external\x2C id\x2C moduleSideEffects\x2C meta } = resolvedId;\n            let externalModule = this.modulesById.get(id);\n            if (!externalModule) {\n                externalModule = new ExternalModule(this.options\x2C id\x2C moduleSideEffects\x2C meta\x2C external !== 'absolute' && isAbsolute(id)\x2C assertions);\n                this.modulesById.set(id\x2C externalModule);\n            }\n            else if (!(externalModule instanceof ExternalModule)) {\n                return error(logInternalIdCannotBeExternal(source\x2C importer));\n            }\n            else if (doAssertionsDiffer(externalModule.info.assertions\x2C assertions)) {\n                this.options.onLog(LOGLEVEL_WARN\x2C logInconsistentImportAssertions(externalModule.info.assertions\x2C assertions\x2C source\x2C importer));\n            }\n            return Promise.resolve(externalModule);\n        }\n        return this.fetchModule(resolvedId\x2C importer\x2C false\x2C false);\n    }\n    async fetchStaticDependencies(module\x2C resolveStaticDependencyPromises) {\n        for (const dependency of await Promise.all(resolveStaticDependencyPromises.map(resolveStaticDependencyPromise => resolveStaticDependencyPromise.then(([source\x2C resolvedId]) => this.fetchResolvedDependency(source\x2C module.id\x2C resolvedId))))) {\n            module.dependencies.add(dependency);\n            dependency.importers.push(module.id);\n        }\n        if (!this.options.treeshake || module.info.moduleSideEffects === 'no-treeshake') {\n            for (const dependency of module.dependencies) {\n                if (dependency instanceof Module) {\n                    dependency.importedFromNotTreeshaken = true;\n                }\n            }\n        }\n    }\n    getNormalizedResolvedIdWithoutDefaults(resolveIdResult\x2C importer\x2C source) {\n        const { makeAbsoluteExternalsRelative } = this.options;\n        if (resolveIdResult) {\n            if (typeof resolveIdResult === 'object') {\n                const external = resolveIdResult.external || this.options.external(resolveIdResult.id\x2C importer\x2C true);\n                return {\n                    ...resolveIdResult\x2C\n                    external: external &&\n                        (external === 'relative' ||\n                            !isAbsolute(resolveIdResult.id) ||\n                            (external === true &&\n                                isNotAbsoluteExternal(resolveIdResult.id\x2C source\x2C makeAbsoluteExternalsRelative)) ||\n                            'absolute')\n                };\n            }\n            const external = this.options.external(resolveIdResult\x2C importer\x2C true);\n            return {\n                external: external &&\n                    (isNotAbsoluteExternal(resolveIdResult\x2C source\x2C makeAbsoluteExternalsRelative) ||\n                        'absolute')\x2C\n                id: external && makeAbsoluteExternalsRelative\n                    ? normalizeRelativeExternalId(resolveIdResult\x2C importer)\n                    : resolveIdResult\n            };\n        }\n        const id = makeAbsoluteExternalsRelative\n            ? normalizeRelativeExternalId(source\x2C importer)\n            : source;\n        if (resolveIdResult !== false && !this.options.external(id\x2C importer\x2C true)) {\n            return null;\n        }\n        return {\n            external: isNotAbsoluteExternal(id\x2C source\x2C makeAbsoluteExternalsRelative) || 'absolute'\x2C\n            id\n        };\n    }\n    getResolveDynamicImportPromises(module) {\n        return module.dynamicImports.map(async (dynamicImport) => {\n            const resolvedId = await this.resolveDynamicImport(module\x2C typeof dynamicImport.argument === 'string'\n                ? dynamicImport.argument\n                : dynamicImport.argument.esTreeNode\x2C module.id\x2C getAssertionsFromImportExpression(dynamicImport.node));\n            if (resolvedId && typeof resolvedId === 'object') {\n                dynamicImport.id = resolvedId.id;\n            }\n            return [dynamicImport\x2C resolvedId];\n        });\n    }\n    getResolveStaticDependencyPromises(module) {\n        // eslint-disable-next-line unicorn/prefer-spread\n        return Array.from(module.sourcesWithAssertions\x2C async ([source\x2C assertions]) => [\n            source\x2C\n            (module.resolvedIds[source] =\n                module.resolvedIds[source] ||\n                    this.handleInvalidResolvedId(await this.resolveId(source\x2C module.id\x2C EMPTY_OBJECT\x2C false\x2C assertions)\x2C source\x2C module.id\x2C assertions))\n        ]);\n    }\n    getResolvedIdWithDefaults(resolvedId\x2C assertions) {\n        if (!resolvedId) {\n            return null;\n        }\n        const external = resolvedId.external || false;\n        return {\n            assertions: resolvedId.assertions || assertions\x2C\n            external\x2C\n            id: resolvedId.id\x2C\n            meta: resolvedId.meta || {}\x2C\n            moduleSideEffects: resolvedId.moduleSideEffects ?? this.hasModuleSideEffects(resolvedId.id\x2C !!external)\x2C\n            resolvedBy: resolvedId.resolvedBy ?? 'rollup'\x2C\n            syntheticNamedExports: resolvedId.syntheticNamedExports ?? false\n        };\n    }\n    async handleExistingModule(module\x2C isEntry\x2C isPreload) {\n        const loadPromise = this.moduleLoadPromises.get(module);\n        if (isPreload) {\n            return isPreload === RESOLVE_DEPENDENCIES\n                ? waitForDependencyResolution(loadPromise)\n                : loadPromise;\n        }\n        if (isEntry) {\n            module.info.isEntry = true;\n            this.implicitEntryModules.delete(module);\n            for (const dependant of module.implicitlyLoadedAfter) {\n                dependant.implicitlyLoadedBefore.delete(module);\n            }\n            module.implicitlyLoadedAfter.clear();\n        }\n        return this.fetchModuleDependencies(module\x2C ...(await loadPromise));\n    }\n    handleInvalidResolvedId(resolvedId\x2C source\x2C importer\x2C assertions) {\n        if (resolvedId === null) {\n            if (isRelative(source)) {\n                return error(logUnresolvedImport(source\x2C importer));\n            }\n            this.options.onLog(LOGLEVEL_WARN\x2C logUnresolvedImportTreatedAsExternal(source\x2C importer));\n            return {\n                assertions\x2C\n                external: true\x2C\n                id: source\x2C\n                meta: {}\x2C\n                moduleSideEffects: this.hasModuleSideEffects(source\x2C true)\x2C\n                resolvedBy: 'rollup'\x2C\n                syntheticNamedExports: false\n            };\n        }\n        else if (resolvedId.external && resolvedId.syntheticNamedExports) {\n            this.options.onLog(LOGLEVEL_WARN\x2C logExternalSyntheticExports(source\x2C importer));\n        }\n        return resolvedId;\n    }\n    async loadEntryModule(unresolvedId\x2C isEntry\x2C importer\x2C implicitlyLoadedBefore\x2C isLoadForManualChunks = false) {\n        const resolveIdResult = await resolveId(unresolvedId\x2C importer\x2C this.options.preserveSymlinks\x2C this.pluginDriver\x2C this.resolveId\x2C null\x2C EMPTY_OBJECT\x2C true\x2C EMPTY_OBJECT);\n        if (resolveIdResult == null) {\n            return error(implicitlyLoadedBefore === null\n                ? logUnresolvedEntry(unresolvedId)\n                : logUnresolvedImplicitDependant(unresolvedId\x2C implicitlyLoadedBefore));\n        }\n        const isExternalModules = typeof resolveIdResult === 'object' && resolveIdResult.external;\n        if (resolveIdResult === false || isExternalModules) {\n            return error(implicitlyLoadedBefore === null\n                ? isExternalModules && isLoadForManualChunks\n                    ? logExternalModulesCannotBeIncludedInManualChunks(unresolvedId)\n                    : logEntryCannotBeExternal(unresolvedId)\n                : logImplicitDependantCannotBeExternal(unresolvedId\x2C implicitlyLoadedBefore));\n        }\n        return this.fetchModule(this.getResolvedIdWithDefaults(typeof resolveIdResult === 'object'\n            ? resolveIdResult\n            : { id: resolveIdResult }\x2C EMPTY_OBJECT)\x2C undefined\x2C isEntry\x2C false);\n    }\n    async resolveDynamicImport(module\x2C specifier\x2C importer\x2C assertions) {\n        const resolution = await this.pluginDriver.hookFirst('resolveDynamicImport'\x2C [\n            specifier\x2C\n            importer\x2C\n            { assertions }\n        ]);\n        if (typeof specifier !== 'string') {\n            if (typeof resolution === 'string') {\n                return resolution;\n            }\n            if (!resolution) {\n                return null;\n            }\n            return this.getResolvedIdWithDefaults(resolution\x2C assertions);\n        }\n        if (resolution == null) {\n            const existingResolution = module.resolvedIds[specifier];\n            if (existingResolution) {\n                if (doAssertionsDiffer(existingResolution.assertions\x2C assertions)) {\n                    this.options.onLog(LOGLEVEL_WARN\x2C logInconsistentImportAssertions(existingResolution.assertions\x2C assertions\x2C specifier\x2C importer));\n                }\n                return existingResolution;\n            }\n            return (module.resolvedIds[specifier] = this.handleInvalidResolvedId(await this.resolveId(specifier\x2C module.id\x2C EMPTY_OBJECT\x2C false\x2C assertions)\x2C specifier\x2C module.id\x2C assertions));\n        }\n        return this.handleInvalidResolvedId(this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(resolution\x2C importer\x2C specifier)\x2C assertions)\x2C specifier\x2C importer\x2C assertions);\n    }\n}\nfunction normalizeRelativeExternalId(source\x2C importer) {\n    return isRelative(source)\n        ? importer\n            ? resolve(importer\x2C '..'\x2C source)\n            : resolve(source)\n        : source;\n}\nfunction addChunkNamesToModule(module\x2C { fileName\x2C name }\x2C isUserDefined\x2C priority) {\n    if (fileName !== null) {\n        module.chunkFileNames.add(fileName);\n    }\n    else if (name !== null) {\n        // Always keep chunkNames sorted by priority\n        let namePosition = 0;\n        while (module.chunkNames[namePosition]?.priority < priority)\n            namePosition++;\n        module.chunkNames.splice(namePosition\x2C 0\x2C { isUserDefined\x2C name\x2C priority });\n    }\n}\nfunction isNotAbsoluteExternal(id\x2C source\x2C makeAbsoluteExternalsRelative) {\n    return (makeAbsoluteExternalsRelative === true ||\n        (makeAbsoluteExternalsRelative === 'ifRelativeSource' && isRelative(source)) ||\n        !isAbsolute(id));\n}\nasync function waitForDependencyResolution(loadPromise) {\n    const [resolveStaticDependencyPromises\x2C resolveDynamicImportPromises] = await loadPromise;\n    return Promise.all([...resolveStaticDependencyPromises\x2C ...resolveDynamicImportPromises]);\n}\n\nclass GlobalScope extends Scope$1 {\n    constructor() {\n        super();\n        this.parent = null;\n        this.variables.set('undefined'\x2C new UndefinedVariable());\n    }\n    findVariable(name) {\n        let variable = this.variables.get(name);\n        if (!variable) {\n            variable = new GlobalVariable(name);\n            this.variables.set(name\x2C variable);\n        }\n        return variable;\n    }\n}\n\nfunction getSourceHash(source) {\n    return createHash().update(source).digest('hex');\n}\nfunction generateAssetFileName(name\x2C source\x2C sourceHash\x2C outputOptions\x2C bundle) {\n    const emittedName = outputOptions.sanitizeFileName(name || 'asset');\n    return makeUnique(renderNamePattern(typeof outputOptions.assetFileNames === 'function'\n        ? outputOptions.assetFileNames({ name\x2C source\x2C type: 'asset' })\n        : outputOptions.assetFileNames\x2C 'output.assetFileNames'\x2C {\n        ext: () => extname(emittedName).slice(1)\x2C\n        extname: () => extname(emittedName)\x2C\n        hash: size => sourceHash.slice(0\x2C Math.max(0\x2C size || defaultHashSize))\x2C\n        name: () => emittedName.slice(0\x2C Math.max(0\x2C emittedName.length - extname(emittedName).length))\n    })\x2C bundle);\n}\nfunction reserveFileNameInBundle(fileName\x2C { bundle }\x2C log) {\n    if (bundle[lowercaseBundleKeys].has(fileName.toLowerCase())) {\n        log(LOGLEVEL_WARN\x2C logFileNameConflict(fileName));\n    }\n    else {\n        bundle[fileName] = FILE_PLACEHOLDER;\n    }\n}\nconst emittedFileTypes = new Set(['chunk'\x2C 'asset'\x2C 'prebuilt-chunk']);\nfunction hasValidType(emittedFile) {\n    return Boolean(emittedFile &&\n        emittedFileTypes.has(emittedFile.type));\n}\nfunction hasValidName(emittedFile) {\n    const validatedName = emittedFile.fileName || emittedFile.name;\n    return !validatedName || (typeof validatedName === 'string' && !isPathFragment(validatedName));\n}\nfunction getValidSource(source\x2C emittedFile\x2C fileReferenceId) {\n    if (!(typeof source === 'string' || source instanceof Uint8Array)) {\n        const assetName = emittedFile.fileName || emittedFile.name || fileReferenceId;\n        return error(logFailedValidation(`Could not set source for ${typeof assetName === 'string' ? `asset "${assetName}"` : 'unnamed asset'}\x2C asset source needs to be a string\x2C Uint8Array or Buffer.`));\n    }\n    return source;\n}\nfunction getAssetFileName(file\x2C referenceId) {\n    if (typeof file.fileName !== 'string') {\n        return error(logAssetNotFinalisedForFileName(file.name || referenceId));\n    }\n    return file.fileName;\n}\nfunction getChunkFileName(file\x2C facadeChunkByModule) {\n    if (file.fileName) {\n        return file.fileName;\n    }\n    if (facadeChunkByModule) {\n        return facadeChunkByModule.get(file.module).getFileName();\n    }\n    return error(logChunkNotGeneratedForFileName(file.fileName || file.name));\n}\nclass FileEmitter {\n    constructor(graph\x2C options\x2C baseFileEmitter) {\n        this.graph = graph;\n        this.options = options;\n        this.facadeChunkByModule = null;\n        this.nextIdBase = 1;\n        this.output = null;\n        this.outputFileEmitters = [];\n        this.emitFile = (emittedFile) => {\n            if (!hasValidType(emittedFile)) {\n                return error(logFailedValidation(`Emitted files must be of type "asset"\x2C "chunk" or "prebuilt-chunk"\x2C received "${emittedFile && emittedFile.type}".`));\n            }\n            if (emittedFile.type === 'prebuilt-chunk') {\n                return this.emitPrebuiltChunk(emittedFile);\n            }\n            if (!hasValidName(emittedFile)) {\n                return error(logFailedValidation(`The "fileName" or "name" properties of emitted chunks and assets must be strings that are neither absolute nor relative paths\x2C received "${emittedFile.fileName || emittedFile.name}".`));\n            }\n            if (emittedFile.type === 'chunk') {\n                return this.emitChunk(emittedFile);\n            }\n            return this.emitAsset(emittedFile);\n        };\n        this.finaliseAssets = () => {\n            for (const [referenceId\x2C emittedFile] of this.filesByReferenceId) {\n                if (emittedFile.type === 'asset' && typeof emittedFile.fileName !== 'string')\n                    return error(logNoAssetSourceSet(emittedFile.name || referenceId));\n            }\n        };\n        this.getFileName = (fileReferenceId) => {\n            const emittedFile = this.filesByReferenceId.get(fileReferenceId);\n            if (!emittedFile)\n                return error(logFileReferenceIdNotFoundForFilename(fileReferenceId));\n            if (emittedFile.type === 'chunk') {\n                return getChunkFileName(emittedFile\x2C this.facadeChunkByModule);\n            }\n            if (emittedFile.type === 'prebuilt-chunk') {\n                return emittedFile.fileName;\n            }\n            return getAssetFileName(emittedFile\x2C fileReferenceId);\n        };\n        this.setAssetSource = (referenceId\x2C requestedSource) => {\n            const consumedFile = this.filesByReferenceId.get(referenceId);\n            if (!consumedFile)\n                return error(logAssetReferenceIdNotFoundForSetSource(referenceId));\n            if (consumedFile.type !== 'asset') {\n                return error(logFailedValidation(`Asset sources can only be set for emitted assets but "${referenceId}" is an emitted chunk.`));\n            }\n            if (consumedFile.source !== undefined) {\n                return error(logAssetSourceAlreadySet(consumedFile.name || referenceId));\n            }\n            const source = getValidSource(requestedSource\x2C consumedFile\x2C referenceId);\n            if (this.output) {\n                this.finalizeAdditionalAsset(consumedFile\x2C source\x2C this.output);\n            }\n            else {\n                consumedFile.source = source;\n                for (const emitter of this.outputFileEmitters) {\n                    emitter.finalizeAdditionalAsset(consumedFile\x2C source\x2C emitter.output);\n                }\n            }\n        };\n        this.setChunkInformation = (facadeChunkByModule) => {\n            this.facadeChunkByModule = facadeChunkByModule;\n        };\n        this.setOutputBundle = (bundle\x2C outputOptions) => {\n            const output = (this.output = {\n                bundle\x2C\n                fileNamesBySource: new Map()\x2C\n                outputOptions\n            });\n            for (const emittedFile of this.filesByReferenceId.values()) {\n                if (emittedFile.fileName) {\n                    reserveFileNameInBundle(emittedFile.fileName\x2C output\x2C this.options.onLog);\n                }\n            }\n            const consumedAssetsByHash = new Map();\n            for (const consumedFile of this.filesByReferenceId.values()) {\n                if (consumedFile.type === 'asset' && consumedFile.source !== undefined) {\n                    if (consumedFile.fileName) {\n                        this.finalizeAdditionalAsset(consumedFile\x2C consumedFile.source\x2C output);\n                    }\n                    else {\n                        const sourceHash = getSourceHash(consumedFile.source);\n                        getOrCreate(consumedAssetsByHash\x2C sourceHash\x2C () => []).push(consumedFile);\n                    }\n                }\n                else if (consumedFile.type === 'prebuilt-chunk') {\n                    this.output.bundle[consumedFile.fileName] = this.createPrebuiltChunk(consumedFile);\n                }\n            }\n            for (const [sourceHash\x2C consumedFiles] of consumedAssetsByHash) {\n                this.finalizeAssetsWithSameSource(consumedFiles\x2C sourceHash\x2C output);\n            }\n        };\n        this.filesByReferenceId = baseFileEmitter\n            ? new Map(baseFileEmitter.filesByReferenceId)\n            : new Map();\n        baseFileEmitter?.addOutputFileEmitter(this);\n    }\n    addOutputFileEmitter(outputFileEmitter) {\n        this.outputFileEmitters.push(outputFileEmitter);\n    }\n    assignReferenceId(file\x2C idBase) {\n        let referenceId = idBase;\n        do {\n            referenceId = createHash().update(referenceId).digest('hex').slice(0\x2C 8);\n        } while (this.filesByReferenceId.has(referenceId) ||\n            this.outputFileEmitters.some(({ filesByReferenceId }) => filesByReferenceId.has(referenceId)));\n        file.referenceId = referenceId;\n        this.filesByReferenceId.set(referenceId\x2C file);\n        for (const { filesByReferenceId } of this.outputFileEmitters) {\n            filesByReferenceId.set(referenceId\x2C file);\n        }\n        return referenceId;\n    }\n    createPrebuiltChunk(prebuiltChunk) {\n        return {\n            code: prebuiltChunk.code\x2C\n            dynamicImports: []\x2C\n            exports: prebuiltChunk.exports || []\x2C\n            facadeModuleId: null\x2C\n            fileName: prebuiltChunk.fileName\x2C\n            implicitlyLoadedBefore: []\x2C\n            importedBindings: {}\x2C\n            imports: []\x2C\n            isDynamicEntry: false\x2C\n            isEntry: false\x2C\n            isImplicitEntry: false\x2C\n            map: prebuiltChunk.map || null\x2C\n            moduleIds: []\x2C\n            modules: {}\x2C\n            name: prebuiltChunk.fileName\x2C\n            preliminaryFileName: prebuiltChunk.fileName\x2C\n            referencedFiles: []\x2C\n            type: 'chunk'\n        };\n    }\n    emitAsset(emittedAsset) {\n        const source = emittedAsset.source === undefined\n            ? undefined\n            : getValidSource(emittedAsset.source\x2C emittedAsset\x2C null);\n        const consumedAsset = {\n            fileName: emittedAsset.fileName\x2C\n            name: emittedAsset.name\x2C\n            needsCodeReference: !!emittedAsset.needsCodeReference\x2C\n            referenceId: ''\x2C\n            source\x2C\n            type: 'asset'\n        };\n        const referenceId = this.assignReferenceId(consumedAsset\x2C emittedAsset.fileName || emittedAsset.name || String(this.nextIdBase++));\n        if (this.output) {\n            this.emitAssetWithReferenceId(consumedAsset\x2C this.output);\n        }\n        else {\n            for (const fileEmitter of this.outputFileEmitters) {\n                fileEmitter.emitAssetWithReferenceId(consumedAsset\x2C fileEmitter.output);\n            }\n        }\n        return referenceId;\n    }\n    emitAssetWithReferenceId(consumedAsset\x2C output) {\n        const { fileName\x2C source } = consumedAsset;\n        if (fileName) {\n            reserveFileNameInBundle(fileName\x2C output\x2C this.options.onLog);\n        }\n        if (source !== undefined) {\n            this.finalizeAdditionalAsset(consumedAsset\x2C source\x2C output);\n        }\n    }\n    emitChunk(emittedChunk) {\n        if (this.graph.phase > BuildPhase.LOAD_AND_PARSE) {\n            return error(logInvalidRollupPhaseForChunkEmission());\n        }\n        if (typeof emittedChunk.id !== 'string') {\n            return error(logFailedValidation(`Emitted chunks need to have a valid string id\x2C received "${emittedChunk.id}"`));\n        }\n        const consumedChunk = {\n            fileName: emittedChunk.fileName\x2C\n            module: null\x2C\n            name: emittedChunk.name || emittedChunk.id\x2C\n            referenceId: ''\x2C\n            type: 'chunk'\n        };\n        this.graph.moduleLoader\n            .emitChunk(emittedChunk)\n            .then(module => (consumedChunk.module = module))\n            .catch(() => {\n            // Avoid unhandled Promise rejection as the error will be thrown later\n            // once module loading has finished\n        });\n        return this.assignReferenceId(consumedChunk\x2C emittedChunk.id);\n    }\n    emitPrebuiltChunk(emitPrebuiltChunk) {\n        if (typeof emitPrebuiltChunk.code !== 'string') {\n            return error(logFailedValidation(`Emitted prebuilt chunks need to have a valid string code\x2C received "${emitPrebuiltChunk.code}".`));\n        }\n        if (typeof emitPrebuiltChunk.fileName !== 'string' ||\n            isPathFragment(emitPrebuiltChunk.fileName)) {\n            return error(logFailedValidation(`The "fileName" property of emitted prebuilt chunks must be strings that are neither absolute nor relative paths\x2C received "${emitPrebuiltChunk.fileName}".`));\n        }\n        const consumedPrebuiltChunk = {\n            code: emitPrebuiltChunk.code\x2C\n            exports: emitPrebuiltChunk.exports\x2C\n            fileName: emitPrebuiltChunk.fileName\x2C\n            map: emitPrebuiltChunk.map\x2C\n            referenceId: ''\x2C\n            type: 'prebuilt-chunk'\n        };\n        const referenceId = this.assignReferenceId(consumedPrebuiltChunk\x2C consumedPrebuiltChunk.fileName);\n        if (this.output) {\n            this.output.bundle[consumedPrebuiltChunk.fileName] =\n                this.createPrebuiltChunk(consumedPrebuiltChunk);\n        }\n        return referenceId;\n    }\n    finalizeAdditionalAsset(consumedFile\x2C source\x2C { bundle\x2C fileNamesBySource\x2C outputOptions }) {\n        let { fileName\x2C needsCodeReference\x2C referenceId } = consumedFile;\n        // Deduplicate assets if an explicit fileName is not provided\n        if (!fileName) {\n            const sourceHash = getSourceHash(source);\n            fileName = fileNamesBySource.get(sourceHash);\n            if (!fileName) {\n                fileName = generateAssetFileName(consumedFile.name\x2C source\x2C sourceHash\x2C outputOptions\x2C bundle);\n                fileNamesBySource.set(sourceHash\x2C fileName);\n            }\n        }\n        // We must not modify the original assets to avoid interaction between outputs\n        const assetWithFileName = { ...consumedFile\x2C fileName\x2C source };\n        this.filesByReferenceId.set(referenceId\x2C assetWithFileName);\n        const existingAsset = bundle[fileName];\n        if (existingAsset?.type === 'asset') {\n            existingAsset.needsCodeReference && (existingAsset.needsCodeReference = needsCodeReference);\n        }\n        else {\n            bundle[fileName] = {\n                fileName\x2C\n                name: consumedFile.name\x2C\n                needsCodeReference\x2C\n                source\x2C\n                type: 'asset'\n            };\n        }\n    }\n    finalizeAssetsWithSameSource(consumedFiles\x2C sourceHash\x2C { bundle\x2C fileNamesBySource\x2C outputOptions }) {\n        let fileName = '';\n        let usedConsumedFile;\n        let needsCodeReference = true;\n        for (const consumedFile of consumedFiles) {\n            needsCodeReference && (needsCodeReference = consumedFile.needsCodeReference);\n            const assetFileName = generateAssetFileName(consumedFile.name\x2C consumedFile.source\x2C sourceHash\x2C outputOptions\x2C bundle);\n            if (!fileName ||\n                assetFileName.length < fileName.length ||\n                (assetFileName.length === fileName.length && assetFileName < fileName)) {\n                fileName = assetFileName;\n                usedConsumedFile = consumedFile;\n            }\n        }\n        fileNamesBySource.set(sourceHash\x2C fileName);\n        for (const consumedFile of consumedFiles) {\n            // We must not modify the original assets to avoid interaction between outputs\n            const assetWithFileName = { ...consumedFile\x2C fileName };\n            this.filesByReferenceId.set(consumedFile.referenceId\x2C assetWithFileName);\n        }\n        bundle[fileName] = {\n            fileName\x2C\n            name: usedConsumedFile.name\x2C\n            needsCodeReference\x2C\n            source: usedConsumedFile.source\x2C\n            type: 'asset'\n        };\n    }\n}\n\nfunction getLogHandler(level\x2C code\x2C logger\x2C pluginName\x2C logLevel) {\n    if (logLevelPriority[level] < logLevelPriority[logLevel]) {\n        return doNothing;\n    }\n    return (log\x2C pos) => {\n        if (pos != null) {\n            logger(LOGLEVEL_WARN\x2C logInvalidLogPosition(pluginName));\n        }\n        log = normalizeLog(log);\n        if (log.code && !log.pluginCode) {\n            log.pluginCode = log.code;\n        }\n        log.code = code;\n        log.plugin = pluginName;\n        logger(level\x2C log);\n    };\n}\n\nfunction getPluginContext(plugin\x2C pluginCache\x2C graph\x2C options\x2C fileEmitter\x2C existingPluginNames) {\n    const { logLevel\x2C onLog } = options;\n    let cacheable = true;\n    if (typeof plugin.cacheKey !== 'string') {\n        if (plugin.name.startsWith(ANONYMOUS_PLUGIN_PREFIX) ||\n            plugin.name.startsWith(ANONYMOUS_OUTPUT_PLUGIN_PREFIX) ||\n            existingPluginNames.has(plugin.name)) {\n            cacheable = false;\n        }\n        else {\n            existingPluginNames.add(plugin.name);\n        }\n    }\n    let cacheInstance;\n    if (!pluginCache) {\n        cacheInstance = NO_CACHE;\n    }\n    else if (cacheable) {\n        const cacheKey = plugin.cacheKey || plugin.name;\n        cacheInstance = createPluginCache(pluginCache[cacheKey] || (pluginCache[cacheKey] = Object.create(null)));\n    }\n    else {\n        cacheInstance = getCacheForUncacheablePlugin(plugin.name);\n    }\n    return {\n        addWatchFile(id) {\n            if (graph.phase >= BuildPhase.GENERATE) {\n                return this.error(logInvalidRollupPhaseForAddWatchFile());\n            }\n            graph.watchFiles[id] = true;\n        }\x2C\n        cache: cacheInstance\x2C\n        debug: getLogHandler(LOGLEVEL_DEBUG\x2C 'PLUGIN_LOG'\x2C onLog\x2C plugin.name\x2C logLevel)\x2C\n        emitFile: fileEmitter.emitFile.bind(fileEmitter)\x2C\n        error(error_) {\n            return error(logPluginError(normalizeLog(error_)\x2C plugin.name));\n        }\x2C\n        getFileName: fileEmitter.getFileName\x2C\n        getModuleIds: () => graph.modulesById.keys()\x2C\n        getModuleInfo: graph.getModuleInfo\x2C\n        getWatchFiles: () => Object.keys(graph.watchFiles)\x2C\n        info: getLogHandler(LOGLEVEL_INFO\x2C 'PLUGIN_LOG'\x2C onLog\x2C plugin.name\x2C logLevel)\x2C\n        load(resolvedId) {\n            return graph.moduleLoader.preloadModule(resolvedId);\n        }\x2C\n        meta: {\n            rollupVersion: version$1\x2C\n            watchMode: graph.watchMode\n        }\x2C\n        get moduleIds() {\n            function* wrappedModuleIds() {\n                // We are wrapping this in a generator to only show the message once we are actually iterating\n                warnDeprecation(`Accessing "this.moduleIds" on the plugin context by plugin ${plugin.name} is deprecated. The "this.getModuleIds" plugin context function should be used instead.`\x2C URL_THIS_GETMODULEIDS\x2C true\x2C options\x2C plugin.name);\n                yield* moduleIds;\n            }\n            const moduleIds = graph.modulesById.keys();\n            return wrappedModuleIds();\n        }\x2C\n        parse: graph.contextParse.bind(graph)\x2C\n        resolve(source\x2C importer\x2C { assertions\x2C custom\x2C isEntry\x2C skipSelf } = BLANK) {\n            return graph.moduleLoader.resolveId(source\x2C importer\x2C custom\x2C isEntry\x2C assertions || EMPTY_OBJECT\x2C skipSelf ? [{ importer\x2C plugin\x2C source }] : null);\n        }\x2C\n        setAssetSource: fileEmitter.setAssetSource\x2C\n        warn: getLogHandler(LOGLEVEL_WARN\x2C 'PLUGIN_WARNING'\x2C onLog\x2C plugin.name\x2C logLevel)\n    };\n}\n\n// This will make sure no input hook is omitted\nconst inputHookNames = {\n    buildEnd: 1\x2C\n    buildStart: 1\x2C\n    closeBundle: 1\x2C\n    closeWatcher: 1\x2C\n    load: 1\x2C\n    moduleParsed: 1\x2C\n    onLog: 1\x2C\n    options: 1\x2C\n    resolveDynamicImport: 1\x2C\n    resolveId: 1\x2C\n    shouldTransformCachedModule: 1\x2C\n    transform: 1\x2C\n    watchChange: 1\n};\nconst inputHooks = Object.keys(inputHookNames);\nclass PluginDriver {\n    constructor(graph\x2C options\x2C userPlugins\x2C pluginCache\x2C basePluginDriver) {\n        this.graph = graph;\n        this.options = options;\n        this.pluginCache = pluginCache;\n        this.sortedPlugins = new Map();\n        this.unfulfilledActions = new Set();\n        this.fileEmitter = new FileEmitter(graph\x2C options\x2C basePluginDriver && basePluginDriver.fileEmitter);\n        this.emitFile = this.fileEmitter.emitFile.bind(this.fileEmitter);\n        this.getFileName = this.fileEmitter.getFileName.bind(this.fileEmitter);\n        this.finaliseAssets = this.fileEmitter.finaliseAssets.bind(this.fileEmitter);\n        this.setChunkInformation = this.fileEmitter.setChunkInformation.bind(this.fileEmitter);\n        this.setOutputBundle = this.fileEmitter.setOutputBundle.bind(this.fileEmitter);\n        this.plugins = [...(basePluginDriver ? basePluginDriver.plugins : [])\x2C ...userPlugins];\n        const existingPluginNames = new Set();\n        this.pluginContexts = new Map(this.plugins.map(plugin => [\n            plugin\x2C\n            getPluginContext(plugin\x2C pluginCache\x2C graph\x2C options\x2C this.fileEmitter\x2C existingPluginNames)\n        ]));\n        if (basePluginDriver) {\n            for (const plugin of userPlugins) {\n                for (const hook of inputHooks) {\n                    if (hook in plugin) {\n                        options.onLog(LOGLEVEL_WARN\x2C logInputHookInOutputPlugin(plugin.name\x2C hook));\n                    }\n                }\n            }\n        }\n    }\n    createOutputPluginDriver(plugins) {\n        return new PluginDriver(this.graph\x2C this.options\x2C plugins\x2C this.pluginCache\x2C this);\n    }\n    getUnfulfilledHookActions() {\n        return this.unfulfilledActions;\n    }\n    // chains\x2C first non-null result stops and returns\n    hookFirst(hookName\x2C parameters\x2C replaceContext\x2C skipped) {\n        return this.hookFirstAndGetPlugin(hookName\x2C parameters\x2C replaceContext\x2C skipped).then(result => result && result[0]);\n    }\n    // chains\x2C first non-null result stops and returns result and last plugin\n    async hookFirstAndGetPlugin(hookName\x2C parameters\x2C replaceContext\x2C skipped) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            if (skipped?.has(plugin))\n                continue;\n            const result = await this.runHook(hookName\x2C parameters\x2C plugin\x2C replaceContext);\n            if (result != null)\n                return [result\x2C plugin];\n        }\n        return null;\n    }\n    // chains synchronously\x2C first non-null result stops and returns\n    hookFirstSync(hookName\x2C parameters\x2C replaceContext) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const result = this.runHookSync(hookName\x2C parameters\x2C plugin\x2C replaceContext);\n            if (result != null)\n                return result;\n        }\n        return null;\n    }\n    // parallel\x2C ignores returns\n    async hookParallel(hookName\x2C parameters\x2C replaceContext) {\n        const parallelPromises = [];\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            if (plugin[hookName].sequential) {\n                await Promise.all(parallelPromises);\n                parallelPromises.length = 0;\n                await this.runHook(hookName\x2C parameters\x2C plugin\x2C replaceContext);\n            }\n            else {\n                parallelPromises.push(this.runHook(hookName\x2C parameters\x2C plugin\x2C replaceContext));\n            }\n        }\n        await Promise.all(parallelPromises);\n    }\n    // chains\x2C reduces returned value\x2C handling the reduced value as the first hook argument\n    hookReduceArg0(hookName\x2C [argument0\x2C ...rest]\x2C reduce\x2C replaceContext) {\n        let promise = Promise.resolve(argument0);\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            promise = promise.then(argument0 => this.runHook(hookName\x2C [argument0\x2C ...rest]\x2C plugin\x2C replaceContext).then(result => reduce.call(this.pluginContexts.get(plugin)\x2C argument0\x2C result\x2C plugin)));\n        }\n        return promise;\n    }\n    // chains synchronously\x2C reduces returned value\x2C handling the reduced value as the first hook argument\n    hookReduceArg0Sync(hookName\x2C [argument0\x2C ...rest]\x2C reduce\x2C replaceContext) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const parameters = [argument0\x2C ...rest];\n            const result = this.runHookSync(hookName\x2C parameters\x2C plugin\x2C replaceContext);\n            argument0 = reduce.call(this.pluginContexts.get(plugin)\x2C argument0\x2C result\x2C plugin);\n        }\n        return argument0;\n    }\n    // chains\x2C reduces returned value to type string\x2C handling the reduced value separately. permits hooks as values.\n    async hookReduceValue(hookName\x2C initialValue\x2C parameters\x2C reducer) {\n        const results = [];\n        const parallelResults = [];\n        for (const plugin of this.getSortedPlugins(hookName\x2C validateAddonPluginHandler)) {\n            if (plugin[hookName].sequential) {\n                results.push(...(await Promise.all(parallelResults)));\n                parallelResults.length = 0;\n                results.push(await this.runHook(hookName\x2C parameters\x2C plugin));\n            }\n            else {\n                parallelResults.push(this.runHook(hookName\x2C parameters\x2C plugin));\n            }\n        }\n        results.push(...(await Promise.all(parallelResults)));\n        return results.reduce(reducer\x2C await initialValue);\n    }\n    // chains synchronously\x2C reduces returned value to type T\x2C handling the reduced value separately. permits hooks as values.\n    hookReduceValueSync(hookName\x2C initialValue\x2C parameters\x2C reduce\x2C replaceContext) {\n        let accumulator = initialValue;\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const result = this.runHookSync(hookName\x2C parameters\x2C plugin\x2C replaceContext);\n            accumulator = reduce.call(this.pluginContexts.get(plugin)\x2C accumulator\x2C result\x2C plugin);\n        }\n        return accumulator;\n    }\n    // chains\x2C ignores returns\n    hookSeq(hookName\x2C parameters\x2C replaceContext) {\n        let promise = Promise.resolve();\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            promise = promise.then(() => this.runHook(hookName\x2C parameters\x2C plugin\x2C replaceContext));\n        }\n        return promise.then(noReturn);\n    }\n    getSortedPlugins(hookName\x2C validateHandler) {\n        return getOrCreate(this.sortedPlugins\x2C hookName\x2C () => getSortedValidatedPlugins(hookName\x2C this.plugins\x2C validateHandler));\n    }\n    // Implementation signature\n    runHook(hookName\x2C parameters\x2C plugin\x2C replaceContext) {\n        // We always filter for plugins that support the hook before running it\n        const hook = plugin[hookName];\n        const handler = typeof hook === 'object' ? hook.handler : hook;\n        let context = this.pluginContexts.get(plugin);\n        if (replaceContext) {\n            context = replaceContext(context\x2C plugin);\n        }\n        let action = null;\n        return Promise.resolve()\n            .then(() => {\n            if (typeof handler !== 'function') {\n                return handler;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            const hookResult = handler.apply(context\x2C parameters);\n            if (!hookResult?.then) {\n                // short circuit for non-thenables and non-Promises\n                return hookResult;\n            }\n            // Track pending hook actions to properly error out when\n            // unfulfilled promises cause rollup to abruptly and confusingly\n            // exit with a successful 0 return code but without producing any\n            // output\x2C errors or warnings.\n            action = [plugin.name\x2C hookName\x2C parameters];\n            this.unfulfilledActions.add(action);\n            // Although it would be more elegant to just return hookResult here\n            // and put the .then() handler just above the .catch() handler below\x2C\n            // doing so would subtly change the defacto async event dispatch order\n            // which at least one test and some plugins in the wild may depend on.\n            return Promise.resolve(hookResult).then(result => {\n                // action was fulfilled\n                this.unfulfilledActions.delete(action);\n                return result;\n            });\n        })\n            .catch(error_ => {\n            if (action !== null) {\n                // action considered to be fulfilled since error being handled\n                this.unfulfilledActions.delete(action);\n            }\n            return error(logPluginError(error_\x2C plugin.name\x2C { hook: hookName }));\n        });\n    }\n    /**\n     * Run a sync plugin hook and return the result.\n     * @param hookName Name of the plugin hook. Must be in `PluginHooks`.\n     * @param args Arguments passed to the plugin hook.\n     * @param plugin The acutal plugin\n     * @param replaceContext When passed\x2C the plugin context can be overridden.\n     */\n    runHookSync(hookName\x2C parameters\x2C plugin\x2C replaceContext) {\n        const hook = plugin[hookName];\n        const handler = typeof hook === 'object' ? hook.handler : hook;\n        let context = this.pluginContexts.get(plugin);\n        if (replaceContext) {\n            context = replaceContext(context\x2C plugin);\n        }\n        try {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            return handler.apply(context\x2C parameters);\n        }\n        catch (error_) {\n            return error(logPluginError(error_\x2C plugin.name\x2C { hook: hookName }));\n        }\n    }\n}\nfunction getSortedValidatedPlugins(hookName\x2C plugins\x2C validateHandler = validateFunctionPluginHandler) {\n    const pre = [];\n    const normal = [];\n    const post = [];\n    for (const plugin of plugins) {\n        const hook = plugin[hookName];\n        if (hook) {\n            if (typeof hook === 'object') {\n                validateHandler(hook.handler\x2C hookName\x2C plugin);\n                if (hook.order === 'pre') {\n                    pre.push(plugin);\n                    continue;\n                }\n                if (hook.order === 'post') {\n                    post.push(plugin);\n                    continue;\n                }\n            }\n            else {\n                validateHandler(hook\x2C hookName\x2C plugin);\n            }\n            normal.push(plugin);\n        }\n    }\n    return [...pre\x2C ...normal\x2C ...post];\n}\nfunction validateFunctionPluginHandler(handler\x2C hookName\x2C plugin) {\n    if (typeof handler !== 'function') {\n        error(logInvalidFunctionPluginHook(hookName\x2C plugin.name));\n    }\n}\nfunction validateAddonPluginHandler(handler\x2C hookName\x2C plugin) {\n    if (typeof handler !== 'string' && typeof handler !== 'function') {\n        return error(logInvalidAddonPluginHook(hookName\x2C plugin.name));\n    }\n}\nfunction noReturn() { }\n\nclass Queue {\n    constructor(maxParallel) {\n        this.maxParallel = maxParallel;\n        this.queue = [];\n        this.workerCount = 0;\n    }\n    run(task) {\n        return new Promise((resolve\x2C reject) => {\n            this.queue.push({ reject\x2C resolve\x2C task });\n            this.work();\n        });\n    }\n    async work() {\n        if (this.workerCount >= this.maxParallel)\n            return;\n        this.workerCount++;\n        let entry;\n        while ((entry = this.queue.shift())) {\n            const { reject\x2C resolve\x2C task } = entry;\n            try {\n                const result = await task();\n                resolve(result);\n            }\n            catch (error) {\n                reject(error);\n            }\n        }\n        this.workerCount--;\n    }\n}\n\nfunction normalizeEntryModules(entryModules) {\n    if (Array.isArray(entryModules)) {\n        return entryModules.map(id => ({\n            fileName: null\x2C\n            id\x2C\n            implicitlyLoadedAfter: []\x2C\n            importer: undefined\x2C\n            name: null\n        }));\n    }\n    return Object.entries(entryModules).map(([name\x2C id]) => ({\n        fileName: null\x2C\n        id\x2C\n        implicitlyLoadedAfter: []\x2C\n        importer: undefined\x2C\n        name\n    }));\n}\nclass Graph {\n    constructor(options\x2C watcher) {\n        this.options = options;\n        this.astLru = flru(5);\n        this.cachedModules = new Map();\n        this.deoptimizationTracker = new PathTracker();\n        this.entryModules = [];\n        this.modulesById = new Map();\n        this.needsTreeshakingPass = false;\n        this.phase = BuildPhase.LOAD_AND_PARSE;\n        this.scope = new GlobalScope();\n        this.watchFiles = Object.create(null);\n        this.watchMode = false;\n        this.externalModules = [];\n        this.implicitEntryModules = [];\n        this.modules = [];\n        this.getModuleInfo = (moduleId) => {\n            const foundModule = this.modulesById.get(moduleId);\n            if (!foundModule)\n                return null;\n            return foundModule.info;\n        };\n        if (options.cache !== false) {\n            if (options.cache?.modules) {\n                for (const module of options.cache.modules)\n                    this.cachedModules.set(module.id\x2C module);\n            }\n            this.pluginCache = options.cache?.plugins || Object.create(null);\n            // increment access counter\n            for (const name in this.pluginCache) {\n                const cache = this.pluginCache[name];\n                for (const value of Object.values(cache))\n                    value[0]++;\n            }\n        }\n        if (watcher) {\n            this.watchMode = true;\n            const handleChange = (...parameters) => this.pluginDriver.hookParallel('watchChange'\x2C parameters);\n            const handleClose = () => this.pluginDriver.hookParallel('closeWatcher'\x2C []);\n            watcher.onCurrentRun('change'\x2C handleChange);\n            watcher.onCurrentRun('close'\x2C handleClose);\n        }\n        this.pluginDriver = new PluginDriver(this\x2C options\x2C options.plugins\x2C this.pluginCache);\n        this.acornParser = Parser.extend(...options.acornInjectPlugins);\n        this.moduleLoader = new ModuleLoader(this\x2C this.modulesById\x2C this.options\x2C this.pluginDriver);\n        this.fileOperationQueue = new Queue(options.maxParallelFileOps);\n        this.pureFunctions = getPureFunctions(options);\n    }\n    async build() {\n        timeStart('generate module graph'\x2C 2);\n        await this.generateModuleGraph();\n        timeEnd('generate module graph'\x2C 2);\n        timeStart('sort and bind modules'\x2C 2);\n        this.phase = BuildPhase.ANALYSE;\n        this.sortModules();\n        timeEnd('sort and bind modules'\x2C 2);\n        timeStart('mark included statements'\x2C 2);\n        this.includeStatements();\n        timeEnd('mark included statements'\x2C 2);\n        this.phase = BuildPhase.GENERATE;\n    }\n    contextParse(code\x2C options = {}) {\n        const onCommentOrig = options.onComment;\n        const comments = [];\n        options.onComment =\n            onCommentOrig && typeof onCommentOrig == 'function'\n                ? (block\x2C text\x2C start\x2C end\x2C ...parameters) => {\n                    comments.push({ end\x2C start\x2C type: block ? 'Block' : 'Line'\x2C value: text });\n                    return onCommentOrig.call(options\x2C block\x2C text\x2C start\x2C end\x2C ...parameters);\n                }\n                : comments;\n        const ast = this.acornParser.parse(code\x2C {\n            ...this.options.acorn\x2C\n            ...options\n        });\n        if (typeof onCommentOrig == 'object') {\n            onCommentOrig.push(...comments);\n        }\n        options.onComment = onCommentOrig;\n        addAnnotations(comments\x2C ast\x2C code);\n        return ast;\n    }\n    getCache() {\n        // handle plugin cache eviction\n        for (const name in this.pluginCache) {\n            const cache = this.pluginCache[name];\n            let allDeleted = true;\n            for (const [key\x2C value] of Object.entries(cache)) {\n                if (value[0] >= this.options.experimentalCacheExpiry)\n                    delete cache[key];\n                else\n                    allDeleted = false;\n            }\n            if (allDeleted)\n                delete this.pluginCache[name];\n        }\n        return {\n            modules: this.modules.map(module => module.toJSON())\x2C\n            plugins: this.pluginCache\n        };\n    }\n    async generateModuleGraph() {\n        ({ entryModules: this.entryModules\x2C implicitEntryModules: this.implicitEntryModules } =\n            await this.moduleLoader.addEntryModules(normalizeEntryModules(this.options.input)\x2C true));\n        if (this.entryModules.length === 0) {\n            throw new Error('You must supply options.input to rollup');\n        }\n        for (const module of this.modulesById.values()) {\n            if (module instanceof Module) {\n                this.modules.push(module);\n            }\n            else {\n                this.externalModules.push(module);\n            }\n        }\n    }\n    includeStatements() {\n        const entryModules = [...this.entryModules\x2C ...this.implicitEntryModules];\n        for (const module of entryModules) {\n            markModuleAndImpureDependenciesAsExecuted(module);\n        }\n        if (this.options.treeshake) {\n            let treeshakingPass = 1;\n            do {\n                timeStart(`treeshaking pass ${treeshakingPass}`\x2C 3);\n                this.needsTreeshakingPass = false;\n                for (const module of this.modules) {\n                    if (module.isExecuted) {\n                        if (module.info.moduleSideEffects === 'no-treeshake') {\n                            module.includeAllInBundle();\n                        }\n                        else {\n                            module.include();\n                        }\n                    }\n                }\n                if (treeshakingPass === 1) {\n                    // We only include exports after the first pass to avoid issues with\n                    // the TDZ detection logic\n                    for (const module of entryModules) {\n                        if (module.preserveSignature !== false) {\n                            module.includeAllExports(false);\n                            this.needsTreeshakingPass = true;\n                        }\n                    }\n                }\n                timeEnd(`treeshaking pass ${treeshakingPass++}`\x2C 3);\n            } while (this.needsTreeshakingPass);\n        }\n        else {\n            for (const module of this.modules)\n                module.includeAllInBundle();\n        }\n        for (const externalModule of this.externalModules)\n            externalModule.warnUnusedImports();\n        for (const module of this.implicitEntryModules) {\n            for (const dependant of module.implicitlyLoadedAfter) {\n                if (!(dependant.info.isEntry || dependant.isIncluded())) {\n                    error(logImplicitDependantIsNotIncluded(dependant));\n                }\n            }\n        }\n    }\n    sortModules() {\n        const { orderedModules\x2C cyclePaths } = analyseModuleExecution(this.entryModules);\n        for (const cyclePath of cyclePaths) {\n            this.options.onLog(LOGLEVEL_WARN\x2C logCircularDependency(cyclePath));\n        }\n        this.modules = orderedModules;\n        for (const module of this.modules) {\n            module.bindReferences();\n        }\n        this.warnForMissingExports();\n    }\n    warnForMissingExports() {\n        for (const module of this.modules) {\n            for (const importDescription of module.importDescriptions.values()) {\n                if (importDescription.name !== '*' &&\n                    !importDescription.module.getVariableForExportName(importDescription.name)[0]) {\n                    module.log(LOGLEVEL_WARN\x2C logMissingExport(importDescription.name\x2C module.id\x2C importDescription.module.id)\x2C importDescription.start);\n                }\n            }\n        }\n    }\n}\n\nfunction formatAction([pluginName\x2C hookName\x2C parameters]) {\n    const action = `(${pluginName}) ${hookName}`;\n    const s = JSON.stringify;\n    switch (hookName) {\n        case 'resolveId': {\n            return `${action} ${s(parameters[0])} ${s(parameters[1])}`;\n        }\n        case 'load': {\n            return `${action} ${s(parameters[0])}`;\n        }\n        case 'transform': {\n            return `${action} ${s(parameters[1])}`;\n        }\n        case 'shouldTransformCachedModule': {\n            return `${action} ${s(parameters[0].id)}`;\n        }\n        case 'moduleParsed': {\n            return `${action} ${s(parameters[0].id)}`;\n        }\n    }\n    return action;\n}\nlet handleBeforeExit = null;\nconst rejectByPluginDriver = new Map();\nasync function catchUnfinishedHookActions(pluginDriver\x2C callback) {\n    const emptyEventLoopPromise = new Promise((_\x2C reject) => {\n        rejectByPluginDriver.set(pluginDriver\x2C reject);\n        if (!handleBeforeExit) {\n            // We only ever create a single event listener to avoid max listener and\n            // other issues\n            handleBeforeExit = () => {\n                for (const [pluginDriver\x2C reject] of rejectByPluginDriver) {\n                    const unfulfilledActions = pluginDriver.getUnfulfilledHookActions();\n                    reject(new Error(`Unexpected early exit. This happens when Promises returned by plugins cannot resolve. Unfinished hook action(s) on exit:\\n` +\n                        [...unfulfilledActions].map(formatAction).join('\\n')));\n                }\n            };\n            process$1.once('beforeExit'\x2C handleBeforeExit);\n        }\n    });\n    try {\n        return await Promise.race([callback()\x2C emptyEventLoopPromise]);\n    }\n    finally {\n        rejectByPluginDriver.delete(pluginDriver);\n        if (rejectByPluginDriver.size === 0) {\n            process$1.off('beforeExit'\x2C handleBeforeExit);\n            handleBeforeExit = null;\n        }\n    }\n}\n\nfunction getLogger(plugins\x2C onLog\x2C watchMode\x2C logLevel) {\n    plugins = getSortedValidatedPlugins('onLog'\x2C plugins);\n    const minimalPriority = logLevelPriority[logLevel];\n    const logger = (level\x2C log\x2C skipped = EMPTY_SET) => {\n        const logPriority = logLevelPriority[level];\n        if (logPriority < minimalPriority) {\n            return;\n        }\n        for (const plugin of plugins) {\n            if (skipped.has(plugin))\n                continue;\n            const { onLog: pluginOnLog } = plugin;\n            const getLogHandler = (level) => {\n                if (logLevelPriority[level] < minimalPriority) {\n                    return doNothing;\n                }\n                return log => logger(level\x2C normalizeLog(log)\x2C new Set(skipped).add(plugin));\n            };\n            const handler = 'handler' in pluginOnLog ? pluginOnLog.handler : pluginOnLog;\n            if (handler.call({\n                debug: getLogHandler(LOGLEVEL_DEBUG)\x2C\n                error: (log) => error(normalizeLog(log))\x2C\n                info: getLogHandler(LOGLEVEL_INFO)\x2C\n                meta: { rollupVersion: version$1\x2C watchMode }\x2C\n                warn: getLogHandler(LOGLEVEL_WARN)\n            }\x2C level\x2C log) === false) {\n                return;\n            }\n        }\n        onLog(level\x2C log);\n    };\n    return logger;\n}\n\nconst leftCurlyBrace = "{".charCodeAt(0);\nconst space = " ".charCodeAt(0);\n\nconst keyword = "assert";\nconst FUNC_STATEMENT = 1\x2C FUNC_NULLABLE_ID = 4;\n\nfunction importAssertions(Parser) {\n  // Use supplied version acorn version if present\x2C to avoid\n  // reference mismatches due to different acorn versions. This\n  // allows this plugin to be used with Rollup which supplies\n  // its own internal version of acorn and thereby sidesteps\n  // the package manager.\n  const acorn = Parser.acorn || _acorn;\n  const { tokTypes: tt\x2C TokenType } = acorn;\n\n  return class extends Parser {\n    constructor(...args) {\n      super(...args);\n      this.assertToken = new TokenType(keyword);\n    }\n\n    _codeAt(i) {\n      return this.input.charCodeAt(i);\n    }\n\n    _eat(t) {\n      if (this.type !== t) {\n        this.unexpected();\n      }\n      this.next();\n    }\n\n    readToken(code) {\n      let i = 0;\n      for (; i < keyword.length; i++) {\n        if (this._codeAt(this.pos + i) !== keyword.charCodeAt(i)) {\n          return super.readToken(code);\n        }\n      }\n\n      // ensure that the keyword is at the correct location\n      // ie `assert{...` or `assert {...`\n      for (;; i++) {\n        if (this._codeAt(this.pos + i) === leftCurlyBrace) {\n          // Found '{'\n          break;\n        } else if (this._codeAt(this.pos + i) === space) {\n          // white space is allowed between `assert` and `{`\x2C so continue.\n          continue;\n        } else {\n          return super.readToken(code);\n        }\n      }\n\n      // If we're inside a dynamic import expression we'll parse\n      // the `assert` keyword as a standard object property name\n      // ie `import(""./foo.json"\x2C { assert: { type: "json" } })`\n      if (this.type.label === "{") {\n        return super.readToken(code);\n      }\n\n      this.pos += keyword.length;\n      return this.finishToken(this.assertToken);\n    }\n\n    parseDynamicImport(node) {\n      this.next(); // skip `(`\n\n      // Parse node.source.\n      node.source = this.parseMaybeAssign();\n\n      if (this.eat(tt.comma)) {\n        const obj = this.parseObj(false);\n        node.arguments = [obj];\n      }\n      this._eat(tt.parenR);\n      return this.finishNode(node\x2C "ImportExpression");\n    }\n\n    // ported from acorn/src/statement.js pp.parseExport\n    parseExport(node\x2C exports) {\n      this.next();\n      // export * from '...'\n      if (this.eat(tt.star)) {\n        if (this.options.ecmaVersion >= 11) {\n          if (this.eatContextual("as")) {\n            node.exported = this.parseIdent(true);\n            this.checkExport(exports\x2C node.exported.name\x2C this.lastTokStart);\n          } else {\n            node.exported = null;\n          }\n        }\n        this.expectContextual("from");\n        if (this.type !== tt.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n\n        if (this.type === this.assertToken || this.type === tt._with) {\n          this.next();\n          const assertions = this.parseImportAssertions();\n          if (assertions) {\n            node.assertions = assertions;\n          }\n        }\n\n        this.semicolon();\n        return this.finishNode(node\x2C "ExportAllDeclaration")\n      }\n      if (this.eat(tt._default)) { // export default ...\n        this.checkExport(exports\x2C "default"\x2C this.lastTokStart);\n        var isAsync;\n        if (this.type === tt._function || (isAsync = this.isAsyncFunction())) {\n          var fNode = this.startNode();\n          this.next();\n          if (isAsync) { this.next(); }\n          node.declaration = this.parseFunction(fNode\x2C FUNC_STATEMENT | FUNC_NULLABLE_ID\x2C false\x2C isAsync);\n        } else if (this.type === tt._class) {\n          var cNode = this.startNode();\n          node.declaration = this.parseClass(cNode\x2C "nullableID");\n        } else {\n          node.declaration = this.parseMaybeAssign();\n          this.semicolon();\n        }\n        return this.finishNode(node\x2C "ExportDefaultDeclaration")\n      }\n      // export var|const|let|function|class ...\n      if (this.shouldParseExportStatement()) {\n        node.declaration = this.parseStatement(null);\n        if (node.declaration.type === "VariableDeclaration")\n          { this.checkVariableExport(exports\x2C node.declaration.declarations); }\n        else\n          { this.checkExport(exports\x2C node.declaration.id.name\x2C node.declaration.id.start); }\n        node.specifiers = [];\n        node.source = null;\n      } else { // export { x\x2C y as z } [from '...']\n        node.declaration = null;\n        node.specifiers = this.parseExportSpecifiers(exports);\n        if (this.eatContextual("from")) {\n          if (this.type !== tt.string) { this.unexpected(); }\n          node.source = this.parseExprAtom();\n\n          if (this.type === this.assertToken || this.type === tt._with) {\n            this.next();\n            const assertions = this.parseImportAssertions();\n            if (assertions) {\n              node.assertions = assertions;\n            }\n          }\n        } else {\n          for (var i = 0\x2C list = node.specifiers; i < list.length; i += 1) {\n            // check for keywords used as local names\n            var spec = list[i];\n\n            this.checkUnreserved(spec.local);\n            // check if export is defined\n            this.checkLocalExport(spec.local);\n          }\n\n          node.source = null;\n        }\n        this.semicolon();\n      }\n      return this.finishNode(node\x2C "ExportNamedDeclaration")\n    }\n\n    parseImport(node) {\n      this.next();\n      // import '...'\n      if (this.type === tt.string) {\n        node.specifiers = [];\n        node.source = this.parseExprAtom();\n      } else {\n        node.specifiers = this.parseImportSpecifiers();\n        this.expectContextual("from");\n        node.source =\n          this.type === tt.string ? this.parseExprAtom() : this.unexpected();\n      }\n\n      if (this.type === this.assertToken || this.type == tt._with) {\n        this.next();\n        const assertions = this.parseImportAssertions();\n        if (assertions) {\n          node.assertions = assertions;\n        }\n      }\n      this.semicolon();\n      return this.finishNode(node\x2C "ImportDeclaration");\n    }\n\n    parseImportAssertions() {\n      this._eat(tt.braceL);\n      const attrs = this.parseAssertEntries();\n      this._eat(tt.braceR);\n      return attrs;\n    }\n\n    parseAssertEntries() {\n      const attrs = [];\n      const attrNames = new Set();\n\n      do {\n        if (this.type === tt.braceR) {\n          break;\n        }\n\n        const node = this.startNode();\n\n        // parse AssertionKey : IdentifierName\x2C StringLiteral\n        let assertionKeyNode;\n        if (this.type === tt.string) {\n          assertionKeyNode = this.parseLiteral(this.value);\n        } else {\n          assertionKeyNode = this.parseIdent(true);\n        }\n        this.next();\n        node.key = assertionKeyNode;\n\n        // check if we already have an entry for an attribute\n        // if a duplicate entry is found\x2C throw an error\n        // for now this logic will come into play only when someone declares `type` twice\n        if (attrNames.has(node.key.name)) {\n          this.raise(this.pos\x2C "Duplicated key in assertions");\n        }\n        attrNames.add(node.key.name);\n\n        if (this.type !== tt.string) {\n          this.raise(\n            this.pos\x2C\n            "Only string is supported as an assertion value"\n          );\n        }\n\n        node.value = this.parseLiteral(this.value);\n\n        attrs.push(this.finishNode(node\x2C "ImportAttribute"));\n      } while (this.eat(tt.comma));\n\n      return attrs;\n    }\n  };\n}\n\nfunction ensureArray(items) {\n    if (Array.isArray(items)) {\n        return items.filter(Boolean);\n    }\n    if (items) {\n        return [items];\n    }\n    return [];\n}\n\nasync function normalizeInputOptions(config\x2C watchMode) {\n    // These are options that may trigger special warnings or behaviour later\n    // if the user did not select an explicit value\n    const unsetOptions = new Set();\n    const context = config.context ?? 'undefined';\n    const plugins = await normalizePluginOption(config.plugins);\n    const logLevel = config.logLevel || LOGLEVEL_INFO;\n    const onLog = getLogger(plugins\x2C getOnLog(config\x2C logLevel)\x2C watchMode\x2C logLevel);\n    const strictDeprecations = config.strictDeprecations || false;\n    const maxParallelFileOps = getMaxParallelFileOps(config\x2C onLog\x2C strictDeprecations);\n    const options = {\n        acorn: getAcorn(config)\x2C\n        acornInjectPlugins: getAcornInjectPlugins(config)\x2C\n        cache: getCache(config)\x2C\n        context\x2C\n        experimentalCacheExpiry: config.experimentalCacheExpiry ?? 10\x2C\n        experimentalLogSideEffects: config.experimentalLogSideEffects || false\x2C\n        external: getIdMatcher(config.external)\x2C\n        inlineDynamicImports: getInlineDynamicImports$1(config\x2C onLog\x2C strictDeprecations)\x2C\n        input: getInput(config)\x2C\n        logLevel\x2C\n        makeAbsoluteExternalsRelative: config.makeAbsoluteExternalsRelative ?? 'ifRelativeSource'\x2C\n        manualChunks: getManualChunks$1(config\x2C onLog\x2C strictDeprecations)\x2C\n        maxParallelFileOps\x2C\n        maxParallelFileReads: maxParallelFileOps\x2C\n        moduleContext: getModuleContext(config\x2C context)\x2C\n        onLog\x2C\n        onwarn: warning => onLog(LOGLEVEL_WARN\x2C warning)\x2C\n        perf: config.perf || false\x2C\n        plugins\x2C\n        preserveEntrySignatures: config.preserveEntrySignatures ?? 'exports-only'\x2C\n        preserveModules: getPreserveModules$1(config\x2C onLog\x2C strictDeprecations)\x2C\n        preserveSymlinks: config.preserveSymlinks || false\x2C\n        shimMissingExports: config.shimMissingExports || false\x2C\n        strictDeprecations\x2C\n        treeshake: getTreeshake(config)\n    };\n    warnUnknownOptions(config\x2C [...Object.keys(options)\x2C 'watch']\x2C 'input options'\x2C onLog\x2C /^(output)$/);\n    return { options\x2C unsetOptions };\n}\nconst getAcorn = (config) => ({\n    ecmaVersion: 'latest'\x2C\n    sourceType: 'module'\x2C\n    ...config.acorn\n});\nconst getAcornInjectPlugins = (config) => [\n    importAssertions\x2C\n    ...ensureArray(config.acornInjectPlugins)\n];\nconst getCache = (config) => config.cache === true // `true` is the default\n    ? undefined\n    : config.cache?.cache || config.cache;\nconst getIdMatcher = (option) => {\n    if (option === true) {\n        return () => true;\n    }\n    if (typeof option === 'function') {\n        return (id\x2C ...parameters) => (!id.startsWith('\\0') && option(id\x2C ...parameters)) || false;\n    }\n    if (option) {\n        const ids = new Set();\n        const matchers = [];\n        for (const value of ensureArray(option)) {\n            if (value instanceof RegExp) {\n                matchers.push(value);\n            }\n            else {\n                ids.add(value);\n            }\n        }\n        return (id\x2C ..._arguments) => ids.has(id) || matchers.some(matcher => matcher.test(id));\n    }\n    return () => false;\n};\nconst getInlineDynamicImports$1 = (config\x2C log\x2C strictDeprecations) => {\n    const configInlineDynamicImports = config.inlineDynamicImports;\n    if (configInlineDynamicImports) {\n        warnDeprecationWithOptions('The "inlineDynamicImports" option is deprecated. Use the "output.inlineDynamicImports" option instead.'\x2C URL_OUTPUT_INLINEDYNAMICIMPORTS\x2C true\x2C log\x2C strictDeprecations);\n    }\n    return configInlineDynamicImports;\n};\nconst getInput = (config) => {\n    const configInput = config.input;\n    return configInput == null ? [] : typeof configInput === 'string' ? [configInput] : configInput;\n};\nconst getManualChunks$1 = (config\x2C log\x2C strictDeprecations) => {\n    const configManualChunks = config.manualChunks;\n    if (configManualChunks) {\n        warnDeprecationWithOptions('The "manualChunks" option is deprecated. Use the "output.manualChunks" option instead.'\x2C URL_OUTPUT_MANUALCHUNKS\x2C true\x2C log\x2C strictDeprecations);\n    }\n    return configManualChunks;\n};\nconst getMaxParallelFileOps = (config\x2C log\x2C strictDeprecations) => {\n    const maxParallelFileReads = config.maxParallelFileReads;\n    if (typeof maxParallelFileReads === 'number') {\n        warnDeprecationWithOptions('The "maxParallelFileReads" option is deprecated. Use the "maxParallelFileOps" option instead.'\x2C URL_MAXPARALLELFILEOPS\x2C true\x2C log\x2C strictDeprecations);\n    }\n    const maxParallelFileOps = config.maxParallelFileOps ?? maxParallelFileReads;\n    if (typeof maxParallelFileOps === 'number') {\n        if (maxParallelFileOps <= 0)\n            return Infinity;\n        return maxParallelFileOps;\n    }\n    return 20;\n};\nconst getModuleContext = (config\x2C context) => {\n    const configModuleContext = config.moduleContext;\n    if (typeof configModuleContext === 'function') {\n        return id => configModuleContext(id) ?? context;\n    }\n    if (configModuleContext) {\n        const contextByModuleId = Object.create(null);\n        for (const [key\x2C moduleContext] of Object.entries(configModuleContext)) {\n            contextByModuleId[resolve(key)] = moduleContext;\n        }\n        return id => contextByModuleId[id] ?? context;\n    }\n    return () => context;\n};\nconst getPreserveModules$1 = (config\x2C log\x2C strictDeprecations) => {\n    const configPreserveModules = config.preserveModules;\n    if (configPreserveModules) {\n        warnDeprecationWithOptions('The "preserveModules" option is deprecated. Use the "output.preserveModules" option instead.'\x2C URL_OUTPUT_PRESERVEMODULES\x2C true\x2C log\x2C strictDeprecations);\n    }\n    return configPreserveModules;\n};\nconst getTreeshake = (config) => {\n    const configTreeshake = config.treeshake;\n    if (configTreeshake === false) {\n        return false;\n    }\n    const configWithPreset = getOptionWithPreset(config.treeshake\x2C treeshakePresets\x2C 'treeshake'\x2C URL_TREESHAKE\x2C 'false\x2C true\x2C ');\n    return {\n        annotations: configWithPreset.annotations !== false\x2C\n        correctVarValueBeforeDeclaration: configWithPreset.correctVarValueBeforeDeclaration === true\x2C\n        manualPureFunctions: configWithPreset.manualPureFunctions ?? EMPTY_ARRAY\x2C\n        moduleSideEffects: getHasModuleSideEffects(configWithPreset.moduleSideEffects)\x2C\n        propertyReadSideEffects: configWithPreset.propertyReadSideEffects === 'always'\n            ? 'always'\n            : configWithPreset.propertyReadSideEffects !== false\x2C\n        tryCatchDeoptimization: configWithPreset.tryCatchDeoptimization !== false\x2C\n        unknownGlobalSideEffects: configWithPreset.unknownGlobalSideEffects !== false\n    };\n};\nconst getHasModuleSideEffects = (moduleSideEffectsOption) => {\n    if (typeof moduleSideEffectsOption === 'boolean') {\n        return () => moduleSideEffectsOption;\n    }\n    if (moduleSideEffectsOption === 'no-external') {\n        return (_id\x2C external) => !external;\n    }\n    if (typeof moduleSideEffectsOption === 'function') {\n        return (id\x2C external) => id.startsWith('\\0') ? true : moduleSideEffectsOption(id\x2C external) !== false;\n    }\n    if (Array.isArray(moduleSideEffectsOption)) {\n        const ids = new Set(moduleSideEffectsOption);\n        return id => ids.has(id);\n    }\n    if (moduleSideEffectsOption) {\n        error(logInvalidOption('treeshake.moduleSideEffects'\x2C URL_TREESHAKE_MODULESIDEEFFECTS\x2C 'please use one of false\x2C "no-external"\x2C a function or an array'));\n    }\n    return () => true;\n};\n\n// https://datatracker.ietf.org/doc/html/rfc2396\n// eslint-disable-next-line no-control-regex\nconst INVALID_CHAR_REGEX = /[\\u0000-\\u001F"#$&*+\x2C:;<=>?[\\]^`{|}\\u007F]/g;\nconst DRIVE_LETTER_REGEX = /^[a-z]:/i;\nfunction sanitizeFileName(name) {\n    const match = DRIVE_LETTER_REGEX.exec(name);\n    const driveLetter = match ? match[0] : '';\n    // A `:` is only allowed as part of a windows drive letter (ex: C:\\foo)\n    // Otherwise\x2C avoid them because they can refer to NTFS alternate data streams.\n    return driveLetter + name.slice(driveLetter.length).replace(INVALID_CHAR_REGEX\x2C '_');\n}\n\nasync function normalizeOutputOptions(config\x2C inputOptions\x2C unsetInputOptions) {\n    // These are options that may trigger special warnings or behaviour later\n    // if the user did not select an explicit value\n    const unsetOptions = new Set(unsetInputOptions);\n    const compact = config.compact || false;\n    const format = getFormat(config);\n    const inlineDynamicImports = getInlineDynamicImports(config\x2C inputOptions);\n    const preserveModules = getPreserveModules(config\x2C inlineDynamicImports\x2C inputOptions);\n    const file = getFile(config\x2C preserveModules\x2C inputOptions);\n    const preferConst = getPreferConst(config\x2C inputOptions);\n    const generatedCode = getGeneratedCode(config\x2C preferConst);\n    const outputOptions = {\n        amd: getAmd(config)\x2C\n        assetFileNames: config.assetFileNames ?? 'assets/[name]-[hash][extname]'\x2C\n        banner: getAddon(config\x2C 'banner')\x2C\n        chunkFileNames: config.chunkFileNames ?? '[name]-[hash].js'\x2C\n        compact\x2C\n        dir: getDir(config\x2C file)\x2C\n        dynamicImportFunction: getDynamicImportFunction(config\x2C inputOptions\x2C format)\x2C\n        dynamicImportInCjs: config.dynamicImportInCjs ?? true\x2C\n        entryFileNames: getEntryFileNames(config\x2C unsetOptions)\x2C\n        esModule: config.esModule ?? 'if-default-prop'\x2C\n        experimentalDeepDynamicChunkOptimization: getExperimentalDeepDynamicChunkOptimization(config\x2C inputOptions)\x2C\n        experimentalMinChunkSize: config.experimentalMinChunkSize ?? 1\x2C\n        exports: getExports(config\x2C unsetOptions)\x2C\n        extend: config.extend || false\x2C\n        externalImportAssertions: config.externalImportAssertions ?? true\x2C\n        externalLiveBindings: config.externalLiveBindings ?? true\x2C\n        file\x2C\n        footer: getAddon(config\x2C 'footer')\x2C\n        format\x2C\n        freeze: config.freeze ?? true\x2C\n        generatedCode\x2C\n        globals: config.globals || {}\x2C\n        hoistTransitiveImports: config.hoistTransitiveImports ?? true\x2C\n        indent: getIndent(config\x2C compact)\x2C\n        inlineDynamicImports\x2C\n        interop: getInterop(config)\x2C\n        intro: getAddon(config\x2C 'intro')\x2C\n        manualChunks: getManualChunks(config\x2C inlineDynamicImports\x2C preserveModules\x2C inputOptions)\x2C\n        minifyInternalExports: getMinifyInternalExports(config\x2C format\x2C compact)\x2C\n        name: config.name\x2C\n        namespaceToStringTag: getNamespaceToStringTag(config\x2C generatedCode\x2C inputOptions)\x2C\n        noConflict: config.noConflict || false\x2C\n        outro: getAddon(config\x2C 'outro')\x2C\n        paths: config.paths || {}\x2C\n        plugins: await normalizePluginOption(config.plugins)\x2C\n        preferConst\x2C\n        preserveModules\x2C\n        preserveModulesRoot: getPreserveModulesRoot(config)\x2C\n        sanitizeFileName: typeof config.sanitizeFileName === 'function'\n            ? config.sanitizeFileName\n            : config.sanitizeFileName === false\n                ? id => id\n                : sanitizeFileName\x2C\n        sourcemap: config.sourcemap || false\x2C\n        sourcemapBaseUrl: getSourcemapBaseUrl(config)\x2C\n        sourcemapExcludeSources: config.sourcemapExcludeSources || false\x2C\n        sourcemapFile: config.sourcemapFile\x2C\n        sourcemapIgnoreList: typeof config.sourcemapIgnoreList === 'function'\n            ? config.sourcemapIgnoreList\n            : config.sourcemapIgnoreList === false\n                ? () => false\n                : relativeSourcePath => relativeSourcePath.includes('node_modules')\x2C\n        sourcemapPathTransform: config.sourcemapPathTransform\x2C\n        strict: config.strict ?? true\x2C\n        systemNullSetters: config.systemNullSetters ?? true\x2C\n        validate: config.validate || false\n    };\n    warnUnknownOptions(config\x2C Object.keys(outputOptions)\x2C 'output options'\x2C inputOptions.onLog);\n    return { options: outputOptions\x2C unsetOptions };\n}\nconst getFile = (config\x2C preserveModules\x2C inputOptions) => {\n    const { file } = config;\n    if (typeof file === 'string') {\n        if (preserveModules) {\n            return error(logInvalidOption('output.file'\x2C URL_OUTPUT_DIR\x2C 'you must set "output.dir" instead of "output.file" when using the "output.preserveModules" option'));\n        }\n        if (!Array.isArray(inputOptions.input))\n            return error(logInvalidOption('output.file'\x2C URL_OUTPUT_DIR\x2C 'you must set "output.dir" instead of "output.file" when providing named inputs'));\n    }\n    return file;\n};\nconst getFormat = (config) => {\n    const configFormat = config.format;\n    switch (configFormat) {\n        case undefined:\n        case 'es':\n        case 'esm':\n        case 'module': {\n            return 'es';\n        }\n        case 'cjs':\n        case 'commonjs': {\n            return 'cjs';\n        }\n        case 'system':\n        case 'systemjs': {\n            return 'system';\n        }\n        case 'amd':\n        case 'iife':\n        case 'umd': {\n            return configFormat;\n        }\n        default: {\n            return error(logInvalidOption('output.format'\x2C URL_OUTPUT_FORMAT\x2C `Valid values are "amd"\x2C "cjs"\x2C "system"\x2C "es"\x2C "iife" or "umd"`\x2C configFormat));\n        }\n    }\n};\nconst getInlineDynamicImports = (config\x2C inputOptions) => {\n    const inlineDynamicImports = (config.inlineDynamicImports ?? inputOptions.inlineDynamicImports) || false;\n    const { input } = inputOptions;\n    if (inlineDynamicImports && (Array.isArray(input) ? input : Object.keys(input)).length > 1) {\n        return error(logInvalidOption('output.inlineDynamicImports'\x2C URL_OUTPUT_INLINEDYNAMICIMPORTS\x2C 'multiple inputs are not supported when "output.inlineDynamicImports" is true'));\n    }\n    return inlineDynamicImports;\n};\nconst getPreserveModules = (config\x2C inlineDynamicImports\x2C inputOptions) => {\n    const preserveModules = (config.preserveModules ?? inputOptions.preserveModules) || false;\n    if (preserveModules) {\n        if (inlineDynamicImports) {\n            return error(logInvalidOption('output.inlineDynamicImports'\x2C URL_OUTPUT_INLINEDYNAMICIMPORTS\x2C `this option is not supported for "output.preserveModules"`));\n        }\n        if (inputOptions.preserveEntrySignatures === false) {\n            return error(logInvalidOption('preserveEntrySignatures'\x2C URL_PRESERVEENTRYSIGNATURES\x2C 'setting this option to false is not supported for "output.preserveModules"'));\n        }\n    }\n    return preserveModules;\n};\nconst getPreferConst = (config\x2C inputOptions) => {\n    const configPreferConst = config.preferConst;\n    if (configPreferConst != null) {\n        warnDeprecation(`The "output.preferConst" option is deprecated. Use the "output.generatedCode.constBindings" option instead.`\x2C URL_OUTPUT_GENERATEDCODE_CONSTBINDINGS\x2C true\x2C inputOptions);\n    }\n    return !!configPreferConst;\n};\nconst getPreserveModulesRoot = (config) => {\n    const { preserveModulesRoot } = config;\n    if (preserveModulesRoot === null || preserveModulesRoot === undefined) {\n        return undefined;\n    }\n    return resolve(preserveModulesRoot);\n};\nconst getAmd = (config) => {\n    const mergedOption = {\n        autoId: false\x2C\n        basePath: ''\x2C\n        define: 'define'\x2C\n        forceJsExtensionForImports: false\x2C\n        ...config.amd\n    };\n    if ((mergedOption.autoId || mergedOption.basePath) && mergedOption.id) {\n        return error(logInvalidOption('output.amd.id'\x2C URL_OUTPUT_AMD_ID\x2C 'this option cannot be used together with "output.amd.autoId"/"output.amd.basePath"'));\n    }\n    if (mergedOption.basePath && !mergedOption.autoId) {\n        return error(logInvalidOption('output.amd.basePath'\x2C URL_OUTPUT_AMD_BASEPATH\x2C 'this option only works with "output.amd.autoId"'));\n    }\n    return mergedOption.autoId\n        ? {\n            autoId: true\x2C\n            basePath: mergedOption.basePath\x2C\n            define: mergedOption.define\x2C\n            forceJsExtensionForImports: mergedOption.forceJsExtensionForImports\n        }\n        : {\n            autoId: false\x2C\n            define: mergedOption.define\x2C\n            forceJsExtensionForImports: mergedOption.forceJsExtensionForImports\x2C\n            id: mergedOption.id\n        };\n};\nconst getAddon = (config\x2C name) => {\n    const configAddon = config[name];\n    if (typeof configAddon === 'function') {\n        return configAddon;\n    }\n    return () => configAddon || '';\n};\n// eslint-disable-next-line unicorn/prevent-abbreviations\nconst getDir = (config\x2C file) => {\n    const { dir } = config;\n    if (typeof dir === 'string' && typeof file === 'string') {\n        return error(logInvalidOption('output.dir'\x2C URL_OUTPUT_DIR\x2C 'you must set either "output.file" for a single-file build or "output.dir" when generating multiple chunks'));\n    }\n    return dir;\n};\nconst getDynamicImportFunction = (config\x2C inputOptions\x2C format) => {\n    const configDynamicImportFunction = config.dynamicImportFunction;\n    if (configDynamicImportFunction) {\n        warnDeprecation(`The "output.dynamicImportFunction" option is deprecated. Use the "renderDynamicImport" plugin hook instead.`\x2C URL_RENDERDYNAMICIMPORT\x2C true\x2C inputOptions);\n        if (format !== 'es') {\n            inputOptions.onLog(LOGLEVEL_WARN\x2C logInvalidOption('output.dynamicImportFunction'\x2C URL_OUTPUT_DYNAMICIMPORTFUNCTION\x2C 'this option is ignored for formats other than "es"'));\n        }\n    }\n    return configDynamicImportFunction;\n};\nconst getEntryFileNames = (config\x2C unsetOptions) => {\n    const configEntryFileNames = config.entryFileNames;\n    if (configEntryFileNames == null) {\n        unsetOptions.add('entryFileNames');\n    }\n    return configEntryFileNames ?? '[name].js';\n};\nfunction getExperimentalDeepDynamicChunkOptimization(config\x2C inputOptions) {\n    const configExperimentalDeepDynamicChunkOptimization = config.experimentalDeepDynamicChunkOptimization;\n    if (configExperimentalDeepDynamicChunkOptimization != null) {\n        warnDeprecation(`The "output.experimentalDeepDynamicChunkOptimization" option is deprecated as Rollup always runs the full chunking algorithm now. The option should be removed.`\x2C URL_OUTPUT_EXPERIMENTALDEEPCHUNKOPTIMIZATION\x2C true\x2C inputOptions);\n    }\n    return configExperimentalDeepDynamicChunkOptimization || false;\n}\nfunction getExports(config\x2C unsetOptions) {\n    const configExports = config.exports;\n    if (configExports == null) {\n        unsetOptions.add('exports');\n    }\n    else if (!['default'\x2C 'named'\x2C 'none'\x2C 'auto'].includes(configExports)) {\n        return error(logInvalidExportOptionValue(configExports));\n    }\n    return configExports || 'auto';\n}\nconst getGeneratedCode = (config\x2C preferConst) => {\n    const configWithPreset = getOptionWithPreset(config.generatedCode\x2C generatedCodePresets\x2C 'output.generatedCode'\x2C URL_OUTPUT_GENERATEDCODE\x2C '');\n    return {\n        arrowFunctions: configWithPreset.arrowFunctions === true\x2C\n        constBindings: configWithPreset.constBindings === true || preferConst\x2C\n        objectShorthand: configWithPreset.objectShorthand === true\x2C\n        reservedNamesAsProps: configWithPreset.reservedNamesAsProps !== false\x2C\n        symbols: configWithPreset.symbols === true\n    };\n};\nconst getIndent = (config\x2C compact) => {\n    if (compact) {\n        return '';\n    }\n    const configIndent = config.indent;\n    return configIndent === false ? '' : configIndent ?? true;\n};\nconst ALLOWED_INTEROP_TYPES = new Set([\n    'compat'\x2C\n    'auto'\x2C\n    'esModule'\x2C\n    'default'\x2C\n    'defaultOnly'\n]);\nconst getInterop = (config) => {\n    const configInterop = config.interop;\n    if (typeof configInterop === 'function') {\n        const interopPerId = Object.create(null);\n        let defaultInterop = null;\n        return id => id === null\n            ? defaultInterop || validateInterop((defaultInterop = configInterop(id)))\n            : id in interopPerId\n                ? interopPerId[id]\n                : validateInterop((interopPerId[id] = configInterop(id)));\n    }\n    return configInterop === undefined ? () => 'default' : () => validateInterop(configInterop);\n};\nconst validateInterop = (interop) => {\n    if (!ALLOWED_INTEROP_TYPES.has(interop)) {\n        return error(logInvalidOption('output.interop'\x2C URL_OUTPUT_INTEROP\x2C \n        // eslint-disable-next-line unicorn/prefer-spread\n        `use one of ${Array.from(ALLOWED_INTEROP_TYPES\x2C value => JSON.stringify(value)).join('\x2C ')}`\x2C interop));\n    }\n    return interop;\n};\nconst getManualChunks = (config\x2C inlineDynamicImports\x2C preserveModules\x2C inputOptions) => {\n    const configManualChunks = config.manualChunks || inputOptions.manualChunks;\n    if (configManualChunks) {\n        if (inlineDynamicImports) {\n            return error(logInvalidOption('output.manualChunks'\x2C URL_OUTPUT_MANUALCHUNKS\x2C 'this option is not supported for "output.inlineDynamicImports"'));\n        }\n        if (preserveModules) {\n            return error(logInvalidOption('output.manualChunks'\x2C URL_OUTPUT_MANUALCHUNKS\x2C 'this option is not supported for "output.preserveModules"'));\n        }\n    }\n    return configManualChunks || {};\n};\nconst getMinifyInternalExports = (config\x2C format\x2C compact) => config.minifyInternalExports ?? (compact || format === 'es' || format === 'system');\nconst getNamespaceToStringTag = (config\x2C generatedCode\x2C inputOptions) => {\n    const configNamespaceToStringTag = config.namespaceToStringTag;\n    if (configNamespaceToStringTag != null) {\n        warnDeprecation(`The "output.namespaceToStringTag" option is deprecated. Use the "output.generatedCode.symbols" option instead.`\x2C URL_OUTPUT_GENERATEDCODE_SYMBOLS\x2C true\x2C inputOptions);\n        return configNamespaceToStringTag;\n    }\n    return generatedCode.symbols || false;\n};\nconst getSourcemapBaseUrl = (config) => {\n    const { sourcemapBaseUrl } = config;\n    if (sourcemapBaseUrl) {\n        if (isValidUrl(sourcemapBaseUrl)) {\n            return addTrailingSlashIfMissed(sourcemapBaseUrl);\n        }\n        return error(logInvalidOption('output.sourcemapBaseUrl'\x2C URL_OUTPUT_SOURCEMAPBASEURL\x2C `must be a valid URL\x2C received ${JSON.stringify(sourcemapBaseUrl)}`));\n    }\n};\n\nfunction rollup(rawInputOptions) {\n    return rollupInternal(rawInputOptions\x2C null);\n}\nasync function rollupInternal(rawInputOptions\x2C watcher) {\n    const { options: inputOptions\x2C unsetOptions: unsetInputOptions } = await getInputOptions(rawInputOptions\x2C watcher !== null);\n    initialiseTimers(inputOptions);\n    const graph = new Graph(inputOptions\x2C watcher);\n    // remove the cache object from the memory after graph creation (cache is not used anymore)\n    const useCache = rawInputOptions.cache !== false;\n    if (rawInputOptions.cache) {\n        inputOptions.cache = undefined;\n        rawInputOptions.cache = undefined;\n    }\n    timeStart('BUILD'\x2C 1);\n    await catchUnfinishedHookActions(graph.pluginDriver\x2C async () => {\n        try {\n            timeStart('initialize'\x2C 2);\n            await graph.pluginDriver.hookParallel('buildStart'\x2C [inputOptions]);\n            timeEnd('initialize'\x2C 2);\n            await graph.build();\n        }\n        catch (error_) {\n            const watchFiles = Object.keys(graph.watchFiles);\n            if (watchFiles.length > 0) {\n                error_.watchFiles = watchFiles;\n            }\n            await graph.pluginDriver.hookParallel('buildEnd'\x2C [error_]);\n            await graph.pluginDriver.hookParallel('closeBundle'\x2C []);\n            throw error_;\n        }\n        await graph.pluginDriver.hookParallel('buildEnd'\x2C []);\n    });\n    timeEnd('BUILD'\x2C 1);\n    const result = {\n        cache: useCache ? graph.getCache() : undefined\x2C\n        async close() {\n            if (result.closed)\n                return;\n            result.closed = true;\n            await graph.pluginDriver.hookParallel('closeBundle'\x2C []);\n        }\x2C\n        closed: false\x2C\n        async generate(rawOutputOptions) {\n            if (result.closed)\n                return error(logAlreadyClosed());\n            return handleGenerateWrite(false\x2C inputOptions\x2C unsetInputOptions\x2C rawOutputOptions\x2C graph);\n        }\x2C\n        watchFiles: Object.keys(graph.watchFiles)\x2C\n        async write(rawOutputOptions) {\n            if (result.closed)\n                return error(logAlreadyClosed());\n            return handleGenerateWrite(true\x2C inputOptions\x2C unsetInputOptions\x2C rawOutputOptions\x2C graph);\n        }\n    };\n    if (inputOptions.perf)\n        result.getTimings = getTimings;\n    return result;\n}\nasync function getInputOptions(initialInputOptions\x2C watchMode) {\n    if (!initialInputOptions) {\n        throw new Error('You must supply an options object to rollup');\n    }\n    const processedInputOptions = await getProcessedInputOptions(initialInputOptions\x2C watchMode);\n    const { options\x2C unsetOptions } = await normalizeInputOptions(processedInputOptions\x2C watchMode);\n    normalizePlugins(options.plugins\x2C ANONYMOUS_PLUGIN_PREFIX);\n    return { options\x2C unsetOptions };\n}\nasync function getProcessedInputOptions(inputOptions\x2C watchMode) {\n    const plugins = getSortedValidatedPlugins('options'\x2C await normalizePluginOption(inputOptions.plugins));\n    const logLevel = inputOptions.logLevel || LOGLEVEL_INFO;\n    const logger = getLogger(plugins\x2C getOnLog(inputOptions\x2C logLevel)\x2C watchMode\x2C logLevel);\n    for (const plugin of plugins) {\n        const { name\x2C options } = plugin;\n        const handler = 'handler' in options ? options.handler : options;\n        const processedOptions = await handler.call({\n            debug: getLogHandler(LOGLEVEL_DEBUG\x2C 'PLUGIN_LOG'\x2C logger\x2C name\x2C logLevel)\x2C\n            error: (error_) => error(logPluginError(normalizeLog(error_)\x2C name\x2C { hook: 'onLog' }))\x2C\n            info: getLogHandler(LOGLEVEL_INFO\x2C 'PLUGIN_LOG'\x2C logger\x2C name\x2C logLevel)\x2C\n            meta: { rollupVersion: version$1\x2C watchMode }\x2C\n            warn: getLogHandler(LOGLEVEL_WARN\x2C 'PLUGIN_WARNING'\x2C logger\x2C name\x2C logLevel)\n        }\x2C inputOptions);\n        if (processedOptions) {\n            inputOptions = processedOptions;\n        }\n    }\n    return inputOptions;\n}\nfunction normalizePlugins(plugins\x2C anonymousPrefix) {\n    for (const [index\x2C plugin] of plugins.entries()) {\n        if (!plugin.name) {\n            plugin.name = `${anonymousPrefix}${index + 1}`;\n        }\n    }\n}\nasync function handleGenerateWrite(isWrite\x2C inputOptions\x2C unsetInputOptions\x2C rawOutputOptions\x2C graph) {\n    const { options: outputOptions\x2C outputPluginDriver\x2C unsetOptions } = await getOutputOptionsAndPluginDriver(rawOutputOptions\x2C graph.pluginDriver\x2C inputOptions\x2C unsetInputOptions);\n    return catchUnfinishedHookActions(outputPluginDriver\x2C async () => {\n        const bundle = new Bundle(outputOptions\x2C unsetOptions\x2C inputOptions\x2C outputPluginDriver\x2C graph);\n        const generated = await bundle.generate(isWrite);\n        if (isWrite) {\n            timeStart('WRITE'\x2C 1);\n            if (!outputOptions.dir && !outputOptions.file) {\n                return error(logMissingFileOrDirOption());\n            }\n            await Promise.all(Object.values(generated).map(chunk => graph.fileOperationQueue.run(() => writeOutputFile(chunk\x2C outputOptions))));\n            await outputPluginDriver.hookParallel('writeBundle'\x2C [outputOptions\x2C generated]);\n            timeEnd('WRITE'\x2C 1);\n        }\n        return createOutput(generated);\n    });\n}\nasync function getOutputOptionsAndPluginDriver(rawOutputOptions\x2C inputPluginDriver\x2C inputOptions\x2C unsetInputOptions) {\n    if (!rawOutputOptions) {\n        throw new Error('You must supply an options object');\n    }\n    const rawPlugins = await normalizePluginOption(rawOutputOptions.plugins);\n    normalizePlugins(rawPlugins\x2C ANONYMOUS_OUTPUT_PLUGIN_PREFIX);\n    const outputPluginDriver = inputPluginDriver.createOutputPluginDriver(rawPlugins);\n    return {\n        ...(await getOutputOptions(inputOptions\x2C unsetInputOptions\x2C rawOutputOptions\x2C outputPluginDriver))\x2C\n        outputPluginDriver\n    };\n}\nfunction getOutputOptions(inputOptions\x2C unsetInputOptions\x2C rawOutputOptions\x2C outputPluginDriver) {\n    return normalizeOutputOptions(outputPluginDriver.hookReduceArg0Sync('outputOptions'\x2C [rawOutputOptions]\x2C (outputOptions\x2C result) => result || outputOptions\x2C pluginContext => {\n        const emitError = () => pluginContext.error(logCannotEmitFromOptionsHook());\n        return {\n            ...pluginContext\x2C\n            emitFile: emitError\x2C\n            setAssetSource: emitError\n        };\n    })\x2C inputOptions\x2C unsetInputOptions);\n}\nfunction createOutput(outputBundle) {\n    return {\n        output: Object.values(outputBundle).filter(outputFile => Object.keys(outputFile).length > 0).sort((outputFileA\x2C outputFileB) => getSortingFileType(outputFileA) - getSortingFileType(outputFileB))\n    };\n}\nvar SortingFileType;\n(function (SortingFileType) {\n    SortingFileType[SortingFileType["ENTRY_CHUNK"] = 0] = "ENTRY_CHUNK";\n    SortingFileType[SortingFileType["SECONDARY_CHUNK"] = 1] = "SECONDARY_CHUNK";\n    SortingFileType[SortingFileType["ASSET"] = 2] = "ASSET";\n})(SortingFileType || (SortingFileType = {}));\nfunction getSortingFileType(file) {\n    if (file.type === 'asset') {\n        return SortingFileType.ASSET;\n    }\n    if (file.isEntry) {\n        return SortingFileType.ENTRY_CHUNK;\n    }\n    return SortingFileType.SECONDARY_CHUNK;\n}\nasync function writeOutputFile(outputFile\x2C outputOptions) {\n    const fileName = resolve(outputOptions.dir || dirname(outputOptions.file)\x2C outputFile.fileName);\n    // 'recursive: true' does not throw if the folder structure\x2C or parts of it\x2C already exist\n    await mkdir(dirname(fileName)\x2C { recursive: true });\n    return writeFile(fileName\x2C outputFile.type === 'asset' ? outputFile.source : outputFile.code);\n}\n/**\n * Auxiliary function for defining rollup configuration\n * Mainly to facilitate IDE code prompts\x2C after all\x2C export default does not\n * prompt\x2C even if you add @type annotations\x2C it is not accurate\n * @param options\n */\nfunction defineConfig(options) {\n    return options;\n}\n\nconst {\n  env = {}\x2C\n  argv = []\x2C\n  platform = ""\x2C\n} = typeof process === "undefined" ? {} : process;\n\nconst isDisabled = "NO_COLOR" in env || argv.includes("--no-color");\nconst isForced = "FORCE_COLOR" in env || argv.includes("--color");\nconst isWindows = platform === "win32";\nconst isDumbTerminal = env.TERM === "dumb";\n\nconst isCompatibleTerminal =\n  tty && tty.isatty && tty.isatty(1) && env.TERM && !isDumbTerminal;\n\nconst isCI =\n  "CI" in env &&\n  ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env);\n\nconst isColorSupported =\n  !isDisabled &&\n  (isForced || (isWindows && !isDumbTerminal) || isCompatibleTerminal || isCI);\n\nconst replaceClose = (\n  index\x2C\n  string\x2C\n  close\x2C\n  replace\x2C\n  head = string.substring(0\x2C index) + replace\x2C\n  tail = string.substring(index + close.length)\x2C\n  next = tail.indexOf(close)\n) => head + (next < 0 ? tail : replaceClose(next\x2C tail\x2C close\x2C replace));\n\nconst clearBleed = (index\x2C string\x2C open\x2C close\x2C replace) =>\n  index < 0\n    ? open + string + close\n    : open + replaceClose(index\x2C string\x2C close\x2C replace) + close;\n\nconst filterEmpty =\n  (open\x2C close\x2C replace = open\x2C at = open.length + 1) =>\n  (string) =>\n    string || !(string === "" || string === undefined)\n      ? clearBleed(\n          ("" + string).indexOf(close\x2C at)\x2C\n          string\x2C\n          open\x2C\n          close\x2C\n          replace\n        )\n      : "";\n\nconst init = (open\x2C close\x2C replace) =>\n  filterEmpty(`\\x1b[${open}m`\x2C `\\x1b[${close}m`\x2C replace);\n\nconst colors = {\n  reset: init(0\x2C 0)\x2C\n  bold: init(1\x2C 22\x2C "\\x1b[22m\\x1b[1m")\x2C\n  dim: init(2\x2C 22\x2C "\\x1b[22m\\x1b[2m")\x2C\n  italic: init(3\x2C 23)\x2C\n  underline: init(4\x2C 24)\x2C\n  inverse: init(7\x2C 27)\x2C\n  hidden: init(8\x2C 28)\x2C\n  strikethrough: init(9\x2C 29)\x2C\n  black: init(30\x2C 39)\x2C\n  red: init(31\x2C 39)\x2C\n  green: init(32\x2C 39)\x2C\n  yellow: init(33\x2C 39)\x2C\n  blue: init(34\x2C 39)\x2C\n  magenta: init(35\x2C 39)\x2C\n  cyan: init(36\x2C 39)\x2C\n  white: init(37\x2C 39)\x2C\n  gray: init(90\x2C 39)\x2C\n  bgBlack: init(40\x2C 49)\x2C\n  bgRed: init(41\x2C 49)\x2C\n  bgGreen: init(42\x2C 49)\x2C\n  bgYellow: init(43\x2C 49)\x2C\n  bgBlue: init(44\x2C 49)\x2C\n  bgMagenta: init(45\x2C 49)\x2C\n  bgCyan: init(46\x2C 49)\x2C\n  bgWhite: init(47\x2C 49)\x2C\n  blackBright: init(90\x2C 39)\x2C\n  redBright: init(91\x2C 39)\x2C\n  greenBright: init(92\x2C 39)\x2C\n  yellowBright: init(93\x2C 39)\x2C\n  blueBright: init(94\x2C 39)\x2C\n  magentaBright: init(95\x2C 39)\x2C\n  cyanBright: init(96\x2C 39)\x2C\n  whiteBright: init(97\x2C 39)\x2C\n  bgBlackBright: init(100\x2C 49)\x2C\n  bgRedBright: init(101\x2C 49)\x2C\n  bgGreenBright: init(102\x2C 49)\x2C\n  bgYellowBright: init(103\x2C 49)\x2C\n  bgBlueBright: init(104\x2C 49)\x2C\n  bgMagentaBright: init(105\x2C 49)\x2C\n  bgCyanBright: init(106\x2C 49)\x2C\n  bgWhiteBright: init(107\x2C 49)\x2C\n};\n\nconst createColors = ({ useColor = isColorSupported } = {}) =>\n  useColor\n    ? colors\n    : Object.keys(colors).reduce(\n        (colors\x2C key) => ({ ...colors\x2C [key]: String })\x2C\n        {}\n      );\n\ncreateColors();\n\n// @see https://no-color.org\n// @see https://www.npmjs.com/package/chalk\nconst { bold\x2C cyan\x2C dim\x2C gray\x2C green\x2C red\x2C underline\x2C yellow } = createColors({\n    useColor: env$1.FORCE_COLOR !== '0' && !env$1.NO_COLOR\n});\n\n// log to stderr to keep `rollup main.js > bundle.js` from breaking\nconst stderr = (...parameters) => process$1.stderr.write(`${parameters.join('')}\\n`);\nfunction handleError(error\x2C recover = false) {\n    const name = error.name || error.cause?.name;\n    const nameSection = name ? `${name}: ` : '';\n    const pluginSection = error.plugin ? `(plugin ${error.plugin}) ` : '';\n    const message = `${pluginSection}${nameSection}${error.message}`;\n    const outputLines = [bold(red(`[!] ${bold(message.toString())}`))];\n    if (error.url) {\n        outputLines.push(cyan(error.url));\n    }\n    if (error.loc) {\n        outputLines.push(`${relativeId((error.loc.file || error.id))} (${error.loc.line}:${error.loc.column})`);\n    }\n    else if (error.id) {\n        outputLines.push(relativeId(error.id));\n    }\n    if (error.frame) {\n        outputLines.push(dim(error.frame));\n    }\n    if (error.stack) {\n        outputLines.push(dim(error.stack?.replace(`${nameSection}${error.message}\\n`\x2C '')));\n    }\n    outputLines.push(''\x2C '');\n    stderr(outputLines.join('\\n'));\n    if (!recover)\n        process$1.exit(1);\n}\n\nconst commandAliases = {\n    c: 'config'\x2C\n    d: 'dir'\x2C\n    e: 'external'\x2C\n    f: 'format'\x2C\n    g: 'globals'\x2C\n    h: 'help'\x2C\n    i: 'input'\x2C\n    m: 'sourcemap'\x2C\n    n: 'name'\x2C\n    o: 'file'\x2C\n    p: 'plugin'\x2C\n    v: 'version'\x2C\n    w: 'watch'\n};\nconst EMPTY_COMMAND_OPTIONS = { external: []\x2C globals: undefined };\nasync function mergeOptions(config\x2C watchMode\x2C rawCommandOptions = EMPTY_COMMAND_OPTIONS\x2C printLog) {\n    const command = getCommandOptions(rawCommandOptions);\n    const plugins = await normalizePluginOption(config.plugins);\n    const logLevel = config.logLevel || LOGLEVEL_INFO;\n    const onLog = getOnLog(config\x2C logLevel\x2C printLog);\n    const log = getLogger(plugins\x2C onLog\x2C watchMode\x2C logLevel);\n    const inputOptions = await mergeInputOptions(config\x2C command\x2C plugins\x2C log\x2C onLog);\n    if (command.output) {\n        Object.assign(command\x2C command.output);\n    }\n    const outputOptionsArray = ensureArray(config.output);\n    if (outputOptionsArray.length === 0)\n        outputOptionsArray.push({});\n    const outputOptions = await Promise.all(outputOptionsArray.map(singleOutputOptions => mergeOutputOptions(singleOutputOptions\x2C command\x2C log)));\n    warnUnknownOptions(command\x2C [\n        ...Object.keys(inputOptions)\x2C\n        ...Object.keys(outputOptions[0]).filter(option => option !== 'sourcemapIgnoreList' && option !== 'sourcemapPathTransform')\x2C\n        ...Object.keys(commandAliases)\x2C\n        'bundleConfigAsCjs'\x2C\n        'config'\x2C\n        'environment'\x2C\n        'filterLogs'\x2C\n        'plugin'\x2C\n        'silent'\x2C\n        'failAfterWarnings'\x2C\n        'stdin'\x2C\n        'waitForBundleInput'\x2C\n        'configPlugin'\n    ]\x2C 'CLI flags'\x2C log\x2C /^_$|output$|config/);\n    inputOptions.output = outputOptions;\n    return inputOptions;\n}\nfunction getCommandOptions(rawCommandOptions) {\n    const external = rawCommandOptions.external && typeof rawCommandOptions.external === 'string'\n        ? rawCommandOptions.external.split('\x2C')\n        : [];\n    return {\n        ...rawCommandOptions\x2C\n        external\x2C\n        globals: typeof rawCommandOptions.globals === 'string'\n            ? rawCommandOptions.globals.split('\x2C').reduce((globals\x2C globalDefinition) => {\n                const [id\x2C variableName] = globalDefinition.split(':');\n                globals[id] = variableName;\n                if (!external.includes(id)) {\n                    external.push(id);\n                }\n                return globals;\n            }\x2C Object.create(null))\n            : undefined\n    };\n}\nfunction mergeInputOptions(config\x2C overrides\x2C plugins\x2C log\x2C onLog) {\n    const getOption = (name) => overrides[name] ?? config[name];\n    const inputOptions = {\n        acorn: getOption('acorn')\x2C\n        acornInjectPlugins: config.acornInjectPlugins\x2C\n        cache: config.cache\x2C\n        context: getOption('context')\x2C\n        experimentalCacheExpiry: getOption('experimentalCacheExpiry')\x2C\n        experimentalLogSideEffects: getOption('experimentalLogSideEffects')\x2C\n        external: getExternal(config\x2C overrides)\x2C\n        inlineDynamicImports: getOption('inlineDynamicImports')\x2C\n        input: getOption('input') || []\x2C\n        logLevel: getOption('logLevel')\x2C\n        makeAbsoluteExternalsRelative: getOption('makeAbsoluteExternalsRelative')\x2C\n        manualChunks: getOption('manualChunks')\x2C\n        maxParallelFileOps: getOption('maxParallelFileOps')\x2C\n        maxParallelFileReads: getOption('maxParallelFileReads')\x2C\n        moduleContext: getOption('moduleContext')\x2C\n        onLog\x2C\n        onwarn: undefined\x2C\n        perf: getOption('perf')\x2C\n        plugins\x2C\n        preserveEntrySignatures: getOption('preserveEntrySignatures')\x2C\n        preserveModules: getOption('preserveModules')\x2C\n        preserveSymlinks: getOption('preserveSymlinks')\x2C\n        shimMissingExports: getOption('shimMissingExports')\x2C\n        strictDeprecations: getOption('strictDeprecations')\x2C\n        treeshake: getObjectOption(config\x2C overrides\x2C 'treeshake'\x2C objectifyOptionWithPresets(treeshakePresets\x2C 'treeshake'\x2C URL_TREESHAKE\x2C 'false\x2C true\x2C '))\x2C\n        watch: getWatch(config\x2C overrides)\n    };\n    warnUnknownOptions(config\x2C Object.keys(inputOptions)\x2C 'input options'\x2C log\x2C /^output$/);\n    return inputOptions;\n}\nconst getExternal = (config\x2C overrides) => {\n    const configExternal = config.external;\n    return typeof configExternal === 'function'\n        ? (source\x2C importer\x2C isResolved) => configExternal(source\x2C importer\x2C isResolved) || overrides.external.includes(source)\n        : [...ensureArray(configExternal)\x2C ...overrides.external];\n};\nconst getObjectOption = (config\x2C overrides\x2C name\x2C objectifyValue = objectifyOption) => {\n    const commandOption = normalizeObjectOptionValue(overrides[name]\x2C objectifyValue);\n    const configOption = normalizeObjectOptionValue(config[name]\x2C objectifyValue);\n    if (commandOption !== undefined) {\n        return commandOption && { ...configOption\x2C ...commandOption };\n    }\n    return configOption;\n};\nconst getWatch = (config\x2C overrides) => config.watch !== false && getObjectOption(config\x2C overrides\x2C 'watch');\nconst normalizeObjectOptionValue = (optionValue\x2C objectifyValue) => {\n    if (!optionValue) {\n        return optionValue;\n    }\n    if (Array.isArray(optionValue)) {\n        return optionValue.reduce((result\x2C value) => value && result && { ...result\x2C ...objectifyValue(value) }\x2C {});\n    }\n    return objectifyValue(optionValue);\n};\nasync function mergeOutputOptions(config\x2C overrides\x2C log) {\n    const getOption = (name) => overrides[name] ?? config[name];\n    const outputOptions = {\n        amd: getObjectOption(config\x2C overrides\x2C 'amd')\x2C\n        assetFileNames: getOption('assetFileNames')\x2C\n        banner: getOption('banner')\x2C\n        chunkFileNames: getOption('chunkFileNames')\x2C\n        compact: getOption('compact')\x2C\n        dir: getOption('dir')\x2C\n        dynamicImportFunction: getOption('dynamicImportFunction')\x2C\n        dynamicImportInCjs: getOption('dynamicImportInCjs')\x2C\n        entryFileNames: getOption('entryFileNames')\x2C\n        esModule: getOption('esModule')\x2C\n        experimentalDeepDynamicChunkOptimization: getOption('experimentalDeepDynamicChunkOptimization')\x2C\n        experimentalMinChunkSize: getOption('experimentalMinChunkSize')\x2C\n        exports: getOption('exports')\x2C\n        extend: getOption('extend')\x2C\n        externalImportAssertions: getOption('externalImportAssertions')\x2C\n        externalLiveBindings: getOption('externalLiveBindings')\x2C\n        file: getOption('file')\x2C\n        footer: getOption('footer')\x2C\n        format: getOption('format')\x2C\n        freeze: getOption('freeze')\x2C\n        generatedCode: getObjectOption(config\x2C overrides\x2C 'generatedCode'\x2C objectifyOptionWithPresets(generatedCodePresets\x2C 'output.generatedCode'\x2C URL_OUTPUT_GENERATEDCODE\x2C ''))\x2C\n        globals: getOption('globals')\x2C\n        hoistTransitiveImports: getOption('hoistTransitiveImports')\x2C\n        indent: getOption('indent')\x2C\n        inlineDynamicImports: getOption('inlineDynamicImports')\x2C\n        interop: getOption('interop')\x2C\n        intro: getOption('intro')\x2C\n        manualChunks: getOption('manualChunks')\x2C\n        minifyInternalExports: getOption('minifyInternalExports')\x2C\n        name: getOption('name')\x2C\n        namespaceToStringTag: getOption('namespaceToStringTag')\x2C\n        noConflict: getOption('noConflict')\x2C\n        outro: getOption('outro')\x2C\n        paths: getOption('paths')\x2C\n        plugins: await normalizePluginOption(config.plugins)\x2C\n        preferConst: getOption('preferConst')\x2C\n        preserveModules: getOption('preserveModules')\x2C\n        preserveModulesRoot: getOption('preserveModulesRoot')\x2C\n        sanitizeFileName: getOption('sanitizeFileName')\x2C\n        sourcemap: getOption('sourcemap')\x2C\n        sourcemapBaseUrl: getOption('sourcemapBaseUrl')\x2C\n        sourcemapExcludeSources: getOption('sourcemapExcludeSources')\x2C\n        sourcemapFile: getOption('sourcemapFile')\x2C\n        sourcemapIgnoreList: getOption('sourcemapIgnoreList')\x2C\n        sourcemapPathTransform: getOption('sourcemapPathTransform')\x2C\n        strict: getOption('strict')\x2C\n        systemNullSetters: getOption('systemNullSetters')\x2C\n        validate: getOption('validate')\n    };\n    warnUnknownOptions(config\x2C Object.keys(outputOptions)\x2C 'output options'\x2C log);\n    return outputOptions;\n}\n\nclass WatchEmitter {\n    constructor() {\n        this.currentHandlers = Object.create(null);\n        this.persistentHandlers = Object.create(null);\n    }\n    // Will be overwritten by Rollup\n    async close() { }\n    emit(event\x2C ...parameters) {\n        return Promise.all([...this.getCurrentHandlers(event)\x2C ...this.getPersistentHandlers(event)].map(handler => handler(...parameters)));\n    }\n    off(event\x2C listener) {\n        const listeners = this.persistentHandlers[event];\n        if (listeners) {\n            // A hack stolen from "mitt": ">>> 0" does not change numbers >= 0\x2C but -1\n            // (which would remove the last array element if used unchanged) is turned\n            // into max_int\x2C which is outside the array and does not change anything.\n            listeners.splice(listeners.indexOf(listener) >>> 0\x2C 1);\n        }\n        return this;\n    }\n    on(event\x2C listener) {\n        this.getPersistentHandlers(event).push(listener);\n        return this;\n    }\n    onCurrentRun(event\x2C listener) {\n        this.getCurrentHandlers(event).push(listener);\n        return this;\n    }\n    once(event\x2C listener) {\n        const selfRemovingListener = (...parameters) => {\n            this.off(event\x2C selfRemovingListener);\n            return listener(...parameters);\n        };\n        this.on(event\x2C selfRemovingListener);\n        return this;\n    }\n    removeAllListeners() {\n        this.removeListenersForCurrentRun();\n        this.persistentHandlers = Object.create(null);\n        return this;\n    }\n    removeListenersForCurrentRun() {\n        this.currentHandlers = Object.create(null);\n        return this;\n    }\n    getCurrentHandlers(event) {\n        return this.currentHandlers[event] || (this.currentHandlers[event] = []);\n    }\n    getPersistentHandlers(event) {\n        return this.persistentHandlers[event] || (this.persistentHandlers[event] = []);\n    }\n}\n\nlet fsEvents;\nlet fsEventsImportError;\nasync function loadFsEvents() {\n    try {\n        ({ default: fsEvents } = await import('fsevents'));\n    }\n    catch (error) {\n        fsEventsImportError = error;\n    }\n}\n// A call to this function will be injected into the chokidar code\nfunction getFsEvents() {\n    if (fsEventsImportError)\n        throw fsEventsImportError;\n    return fsEvents;\n}\n\nconst fseventsImporter = /*#__PURE__*/Object.defineProperty({\n  __proto__: null\x2C\n  getFsEvents\x2C\n  loadFsEvents\n}\x2C Symbol.toStringTag\x2C { value: 'Module' });\n\nfunction watch(configs) {\n    const emitter = new WatchEmitter();\n    watchInternal(configs\x2C emitter).catch(error => {\n        handleError(error);\n    });\n    return emitter;\n}\nasync function watchInternal(configs\x2C emitter) {\n    const optionsList = await Promise.all(ensureArray(configs).map(config => mergeOptions(config\x2C true)));\n    const watchOptionsList = optionsList.filter(config => config.watch !== false);\n    if (watchOptionsList.length === 0) {\n        return error(logInvalidOption('watch'\x2C URL_WATCH\x2C 'there must be at least one config where "watch" is not set to "false"'));\n    }\n    await loadFsEvents();\n    const { Watcher } = await import('./watch.js');\n    new Watcher(watchOptionsList\x2C emitter);\n}\n\nexport { createFilter\x2C defineConfig\x2C fseventsImporter\x2C getAugmentedNamespace\x2C picomatch\x2C rollup\x2C rollupInternal\x2C version$1 as version\x2C watch };\n
code-source-info,0xd55be4c95e
code-creation,Function,10,1105060,0xd55be5f28e,40, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:26735:11,0x1a51132e238,~
code-source-info,0xd55be5f28e,187,1001912,1002148,C0O1001936C2O1001983C8O1001988C12O1002009C15O1002060C21O1002065C25O1002090C28O1002131C34O1002136C39O1002147,,
code-creation,Function,10,1105125,0xd55be5f356,22, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:18257:42,0x1a511321a58,~
code-source-info,0xd55be5f356,187,685944,686007,C0O685952C5O685972C10O685972C18O685982C21O686005,,
code-creation,Function,10,1105172,0xd55be5f3f6,17, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:18253:41,0x1a511321a20,~
code-source-info,0xd55be5f3f6,187,685831,685899,C0O685849C5O685875C10O685875C16O685897,,
code-creation,Function,10,1105224,0xd55be5f49e,40, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:13256:11,0x1a51131f578,~
code-source-info,0xd55be5f49e,187,452809,453006,C0O452828C2O452868C8O452873C12O452897C15O452930C21O452935C25O452952C28O452986C34O452991C39O453005,,
code-creation,Function,10,1105284,0xd55be5fc7e,206, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/rollup/dist/es/shared/node-entry.js:3165:11,0x1a51130e568,~
code-source-info,0xd55be5fc7e,187,97506,99431,C0O97506C27O97533C32O97533C34O97562C38O97570C45O97579C48O97562C50O97707C59O97604C65O97624C71O97651C77O97675C83O97722C90O97739C94O97813C101O97835C105O97876C112O97896C116O97954C123O97974C127O98033C134O98056C138O98102C145O98128C149O98250C156O98278C160O98479C167O98497C171O98657C178O98676C182O98932C189O98953C193O99123C200O99142C205O99430,,
tick,0x7ff6d63a7f85,1105391,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff81324d664,1105671,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff6d6b99520,1105706,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff6d6b89b23,1105737,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
tick,0x7ff8131df25f,1105766,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
scavenge,begin,0,625000,1724493771661
new,MemoryChunk,0x35cf9cc0000,262144
new,MemoryChunk,0x36cabe40000,262144
scavenge,end,0,625000,1724493771662
new,MemoryChunk,0xacb7940000,221184
code-creation,Script,10,1112459,0xd55be68b06,3181, file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/js-yaml/dist/js-yaml.mjs:1:1,0xd55be63620,~
script-source,188,file:///C:/Users/Krank/Documents/webdev/krank-portfolio/node_modules/js-yaml/dist/js-yaml.mjs,\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */\nfunction isNothing(subject) {\n  return (typeof subject === 'undefined') || (subject === null);\n}\n\n\nfunction isObject(subject) {\n  return (typeof subject === 'object') && (subject !== null);\n}\n\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;\n  else if (isNothing(sequence)) return [];\n\n  return [ sequence ];\n}\n\n\nfunction extend(target\x2C source) {\n  var index\x2C length\x2C key\x2C sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0\x2C length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n\nfunction repeat(string\x2C count) {\n  var result = ''\x2C cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\n\nfunction isNegativeZero(number) {\n  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\n\n\nvar isNothing_1      = isNothing;\nvar isObject_1       = isObject;\nvar toArray_1        = toArray;\nvar repeat_1         = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1         = extend;\n\nvar common = {\n\x09isNothing: isNothing_1\x2C\n\x09isObject: isObject_1\x2C\n\x09toArray: toArray_1\x2C\n\x09repeat: repeat_1\x2C\n\x09isNegativeZero: isNegativeZero_1\x2C\n\x09extend: extend_1\n};\n\n// YAML error class. http://stackoverflow.com/questions/8458984\n\n\nfunction formatError(exception\x2C compact) {\n  var where = ''\x2C message = exception.reason || '(unknown reason)';\n\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in "' + exception.mark.name + '" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\n\nfunction YAMLException$1(reason\x2C mark) {\n  // Super constructor\n  Error.call(this);\n\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this\x2C false);\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this\x2C this.constructor);\n  } else {\n    // FF\x2C IE 10+ and Safari 6+. Fallback for others\n    this.stack = (new Error()).stack || '';\n  }\n}\n\n\n// Inherit from Error\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\n\n\nYAMLException$1.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this\x2C compact);\n};\n\n\nvar exception = YAMLException$1;\n\n// get snippet for a single line\x2C respecting maxLength\nfunction getLine(buffer\x2C lineStart\x2C lineEnd\x2C position\x2C maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart\x2C lineEnd).replace(/\\t/g\x2C '\u2192') + tail\x2C\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string\x2C max) {\n  return common.repeat(' '\x2C max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark\x2C options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = ''\x2C i\x2C line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter\x2C lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer\x2C\n      lineStarts[foundLineNo - i]\x2C\n      lineEnds[foundLineNo - i]\x2C\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i])\x2C\n      maxLineLength\n    );\n    result = common.repeat(' '\x2C options.indent) + padStart((mark.line - i + 1).toString()\x2C lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer\x2C lineStarts[foundLineNo]\x2C lineEnds[foundLineNo]\x2C mark.position\x2C maxLineLength);\n  result += common.repeat(' '\x2C options.indent) + padStart((mark.line + 1).toString()\x2C lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-'\x2C options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer\x2C\n      lineStarts[foundLineNo + i]\x2C\n      lineEnds[foundLineNo + i]\x2C\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i])\x2C\n      maxLineLength\n    );\n    result += common.repeat(' '\x2C options.indent) + padStart((mark.line + i + 1).toString()\x2C lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/\x2C '');\n}\n\n\nvar snippet = makeSnippet;\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind'\x2C\n  'multi'\x2C\n  'resolve'\x2C\n  'construct'\x2C\n  'instanceOf'\x2C\n  'predicate'\x2C\n  'represent'\x2C\n  'representName'\x2C\n  'defaultStyle'\x2C\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar'\x2C\n  'sequence'\x2C\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type$1(tag\x2C options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');\n  }\n}\n\nvar type = Type$1;\n\n/*eslint-disable max-len*/\n\n\n\n\n\nfunction compileList(schema\x2C name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType\x2C previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {}\x2C\n        sequence: {}\x2C\n        mapping: {}\x2C\n        fallback: {}\x2C\n        multi: {\n          scalar: []\x2C\n          sequence: []\x2C\n          mapping: []\x2C\n          fallback: []\n        }\n      }\x2C index\x2C length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0\x2C length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema$1(definition) {\n  return this.extend(definition);\n}\n\n\nSchema$1.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1\x2C type2\x2C ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1\x2C type2\x2C ... ]\x2C implicit: [ type1\x2C type2\x2C ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new exception('Schema.extend argument should be a Type\x2C [ Type ]\x2C ' +\n      'or a schema definition ({ implicit: [...]\x2C explicit: [...] })');\n  }\n\n  implicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type$1.loadKind && type$1.loadKind !== 'scalar') {\n      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type$1.multi) {\n      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema$1.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result\x2C 'implicit');\n  result.compiledExplicit = compileList(result\x2C 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit\x2C result.compiledExplicit);\n\n  return result;\n};\n\n\nvar schema = Schema$1;\n\nvar str = new type('tag:yaml.org\x2C2002:str'\x2C {\n  kind: 'scalar'\x2C\n  construct: function (data) { return data !== null ? data : ''; }\n});\n\nvar seq = new type('tag:yaml.org\x2C2002:seq'\x2C {\n  kind: 'sequence'\x2C\n  construct: function (data) { return data !== null ? data : []; }\n});\n\nvar map = new type('tag:yaml.org\x2C2002:map'\x2C {\n  kind: 'mapping'\x2C\n  construct: function (data) { return data !== null ? data : {}; }\n});\n\nvar failsafe = new schema({\n  explicit: [\n    str\x2C\n    seq\x2C\n    map\n  ]\n});\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n\n  var max = data.length;\n\n  return (max === 1 && data === '~') ||\n         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nvar _null = new type('tag:yaml.org\x2C2002:null'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlNull\x2C\n  construct: constructYamlNull\x2C\n  predicate: isNull\x2C\n  represent: {\n    canonical: function () { return '~';    }\x2C\n    lowercase: function () { return 'null'; }\x2C\n    uppercase: function () { return 'NULL'; }\x2C\n    camelcase: function () { return 'Null'; }\x2C\n    empty:     function () { return '';     }\n  }\x2C\n  defaultStyle: 'lowercase'\n});\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n\n  var max = data.length;\n\n  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' ||\n         data === 'True' ||\n         data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nvar bool = new type('tag:yaml.org\x2C2002:bool'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlBoolean\x2C\n  construct: constructYamlBoolean\x2C\n  predicate: isBoolean\x2C\n  represent: {\n    lowercase: function (object) { return object ? 'true' : 'false'; }\x2C\n    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; }\x2C\n    camelcase: function (object) { return object ? 'True' : 'False'; }\n  }\x2C\n  defaultStyle: 'lowercase'\n});\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length\x2C\n      index = 0\x2C\n      hasDigits = false\x2C\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2\x2C base 8\x2C base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n\n  // base 10 (except 0)\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data\x2C sign = 1\x2C ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g\x2C '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2)\x2C 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2)\x2C 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2)\x2C 8);\n  }\n\n  return sign * parseInt(value\x2C 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nvar int = new type('tag:yaml.org\x2C2002:int'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlInteger\x2C\n  construct: constructYamlInteger\x2C\n  predicate: isInteger\x2C\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); }\x2C\n    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); }\x2C\n    decimal:     function (obj) { return obj.toString(10); }\x2C\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  }\x2C\n  defaultStyle: 'decimal'\x2C\n  styleAliases: {\n    binary:      [ 2\x2C  'bin' ]\x2C\n    octal:       [ 8\x2C  'oct' ]\x2C\n    decimal:     [ 10\x2C 'dec' ]\x2C\n    hexadecimal: [ 16\x2C 'hex' ]\n  }\n});\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4\x2C 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4\x2C .2\n  // special case\x2C seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value\x2C sign;\n\n  value  = data.replace(/_/g\x2C '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value\x2C 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object\x2C style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100\x2C\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e'\x2C '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nvar float = new type('tag:yaml.org\x2C2002:float'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlFloat\x2C\n  construct: constructYamlFloat\x2C\n  predicate: isFloat\x2C\n  represent: representYamlFloat\x2C\n  defaultStyle: 'lowercase'\n});\n\nvar json = failsafe.extend({\n  implicit: [\n    _null\x2C\n    bool\x2C\n    int\x2C\n    float\n  ]\n});\n\nvar core = json;\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match\x2C year\x2C month\x2C day\x2C hour\x2C minute\x2C second\x2C fraction = 0\x2C\n      delta = null\x2C tz_hour\x2C tz_minute\x2C date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year\x2C month\x2C day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0\x2C 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year\x2C month\x2C day\x2C hour\x2C minute\x2C second\x2C fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*\x2C style*/) {\n  return object.toISOString();\n}\n\nvar timestamp = new type('tag:yaml.org\x2C2002:timestamp'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlTimestamp\x2C\n  construct: constructYamlTimestamp\x2C\n  instanceOf: Date\x2C\n  represent: representYamlTimestamp\n});\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nvar merge = new type('tag:yaml.org\x2C2002:merge'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlMerge\n});\n\n/*eslint-disable no-bitwise*/\n\n\n\n\n\n// [ 64\x2C 65\x2C 66 ] -> [ padding\x2C CR\x2C LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code\x2C idx\x2C bitlen = 0\x2C max = data.length\x2C map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left\x2C source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx\x2C tailbits\x2C\n      input = data.replace(/[\\r\\n=]/g\x2C '')\x2C // remove CR/LF & padding to simplify scan\n      max = input.length\x2C\n      map = BASE64_MAP\x2C\n      bits = 0\x2C\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object /*\x2C style*/) {\n  var result = ''\x2C bits = 0\x2C idx\x2C tail\x2C\n      max = object.length\x2C\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n}\n\nvar binary = new type('tag:yaml.org\x2C2002:binary'\x2C {\n  kind: 'scalar'\x2C\n  resolve: resolveYamlBinary\x2C\n  construct: constructYamlBinary\x2C\n  predicate: isBinary\x2C\n  represent: representYamlBinary\n});\n\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2       = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n\n  var objectKeys = []\x2C index\x2C length\x2C pair\x2C pairKey\x2C pairHasKey\x2C\n      object = data;\n\n  for (index = 0\x2C length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n\n    if (_toString$2.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty$3.call(pair\x2C pairKey)) {\n        if (!pairHasKey) pairHasKey = true;\n        else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n    else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nvar omap = new type('tag:yaml.org\x2C2002:omap'\x2C {\n  kind: 'sequence'\x2C\n  resolve: resolveYamlOmap\x2C\n  construct: constructYamlOmap\n});\n\nvar _toString$1 = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n\n  var index\x2C length\x2C pair\x2C keys\x2C result\x2C\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0\x2C length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    if (_toString$1.call(pair) !== '[object Object]') return false;\n\n    keys = Object.keys(pair);\n\n    if (keys.length !== 1) return false;\n\n    result[index] = [ keys[0]\x2C pair[keys[0]] ];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n\n  var index\x2C length\x2C pair\x2C keys\x2C result\x2C\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0\x2C length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    keys = Object.keys(pair);\n\n    result[index] = [ keys[0]\x2C pair[keys[0]] ];\n  }\n\n  return result;\n}\n\nvar pairs = new type('tag:yaml.org\x2C2002:pairs'\x2C {\n  kind: 'sequence'\x2C\n  resolve: resolveYamlPairs\x2C\n  construct: constructYamlPairs\n});\n\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n\n  var key\x2C object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty$2.call(object\x2C key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nvar set = new type('tag:yaml.org\x2C2002:set'\x2C {\n  kind: 'mapping'\x2C\n  resolve: resolveYamlSet\x2C\n  construct: constructYamlSet\n});\n\nvar _default = core.extend({\n  implicit: [\n    timestamp\x2C\n    merge\n  ]\x2C\n  explicit: [\n    binary\x2C\n    omap\x2C\n    pairs\x2C\n    set\n  ]\n});\n\n/*eslint-disable max-len\x2Cno-use-before-define*/\n\n\n\n\n\n\n\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[\x2C\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^\x2C\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$\x2C_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* \x2C */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* " */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800\x2C\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer\x2C for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State$1(input\x2C options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || _default;\n  this.onWarning = options['onWarning'] || null;\n  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n  this.legacy    = options['legacy']    || false;\n\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  // position of first leading tab in the current line\x2C\n  // used to make sure there are no tabs in the indentation\n  this.firstTabInLine = -1;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state\x2C message) {\n  var mark = {\n    name:     state.filename\x2C\n    buffer:   state.input.slice(0\x2C -1)\x2C // omit trailing \\0\n    position: state.position\x2C\n    line:     state.line\x2C\n    column:   state.position - state.lineStart\n  };\n\n  mark.snippet = snippet(mark);\n\n  return new exception(message\x2C mark);\n}\n\nfunction throwError(state\x2C message) {\n  throw generateError(state\x2C message);\n}\n\nfunction throwWarning(state\x2C message) {\n  if (state.onWarning) {\n    state.onWarning.call(null\x2C generateError(state\x2C message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state\x2C name\x2C args) {\n\n    var match\x2C major\x2C minor;\n\n    if (state.version !== null) {\n      throwError(state\x2C 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state\x2C 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state\x2C 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1]\x2C 10);\n    minor = parseInt(match[2]\x2C 10);\n\n    if (major !== 1) {\n      throwError(state\x2C 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state\x2C 'unsupported YAML version of the document');\n    }\n  }\x2C\n\n  TAG: function handleTagDirective(state\x2C name\x2C args) {\n\n    var handle\x2C prefix;\n\n    if (args.length !== 2) {\n      throwError(state\x2C 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state\x2C 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty$1.call(state.tagMap\x2C handle)) {\n      throwError(state\x2C 'there is a previously declared suffix for "' + handle + '" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state\x2C 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state\x2C 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state\x2C start\x2C end\x2C checkJson) {\n  var _position\x2C _length\x2C _character\x2C _result;\n\n  if (start < end) {\n    _result = state.input.slice(start\x2C end);\n\n    if (checkJson) {\n      for (_position = 0\x2C _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state\x2C 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state\x2C 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state\x2C destination\x2C source\x2C overridableKeys) {\n  var sourceKeys\x2C key\x2C index\x2C quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state\x2C 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0\x2C quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty$1.call(destination\x2C key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C valueNode\x2C\n  startLine\x2C startLineStart\x2C startPos) {\n\n  var index\x2C quantity;\n\n  // The output is a plain object here\x2C so keys can only be strings.\n  // We need to convert keyNode to a string\x2C but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0\x2C quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state\x2C 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays\x2C timestamps\x2C\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org\x2C2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0\x2C quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state\x2C _result\x2C valueNode[index]\x2C overridableKeys);\n      }\n    } else {\n      mergeMappings(state\x2C _result\x2C valueNode\x2C overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty$1.call(overridableKeys\x2C keyNode) &&\n        _hasOwnProperty$1.call(_result\x2C keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state\x2C 'duplicated mapping key');\n    }\n\n    // used for this specific key only because Object.defineProperty is slow\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result\x2C keyNode\x2C {\n        configurable: true\x2C\n        enumerable: true\x2C\n        writable: true\x2C\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state\x2C 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state\x2C allowComments\x2C checkIndent) {\n  var lineBreaks = 0\x2C\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state\x2C 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position\x2C\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call\x2C for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state\x2C count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n'\x2C count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state\x2C nodeIndent\x2C withinFlowCollection) {\n  var preceding\x2C\n      following\x2C\n      captureStart\x2C\n      captureEnd\x2C\n      hasPendingContent\x2C\n      _line\x2C\n      _lineStart\x2C\n      _lineIndent\x2C\n      _kind = state.kind\x2C\n      _result = state.result\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* " */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state\x2C false\x2C -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state\x2C captureStart\x2C captureEnd\x2C false);\n      writeFoldedLines(state\x2C state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state\x2C captureStart\x2C captureEnd\x2C false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state\x2C nodeIndent) {\n  var ch\x2C\n      captureStart\x2C captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state\x2C captureStart\x2C state.position\x2C true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state\x2C captureStart\x2C captureEnd\x2C true);\n      writeFoldedLines(state\x2C skipSeparationSpace(state\x2C false\x2C nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state\x2C 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state\x2C 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state\x2C nodeIndent) {\n  var captureStart\x2C\n      captureEnd\x2C\n      hexLength\x2C\n      hexResult\x2C\n      tmp\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* " */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* " */) {\n      captureSegment(state\x2C captureStart\x2C state.position\x2C true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state\x2C captureStart\x2C state.position\x2C true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state\x2C false\x2C nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state\x2C 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state\x2C 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state\x2C captureStart\x2C captureEnd\x2C true);\n      writeFoldedLines(state\x2C skipSeparationSpace(state\x2C false\x2C nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state\x2C 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state\x2C 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state\x2C nodeIndent) {\n  var readNext = true\x2C\n      _line\x2C\n      _lineStart\x2C\n      _pos\x2C\n      _tag     = state.tag\x2C\n      _result\x2C\n      _anchor  = state.anchor\x2C\n      following\x2C\n      terminator\x2C\n      isPair\x2C\n      isExplicitPair\x2C\n      isMapping\x2C\n      overridableKeys = Object.create(null)\x2C\n      keyNode\x2C\n      keyTag\x2C\n      valueNode\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state\x2C true\x2C nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state\x2C 'missed comma between flow collection entries');\n    } else if (ch === 0x2C/* \x2C */) {\n      // "flow collection entries can never be completely empty"\x2C as per YAML 1.2\x2C section 7.4\n      throwError(state\x2C "expected the node content\x2C but found '\x2C'");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state\x2C true\x2C nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state\x2C nodeIndent\x2C CONTEXT_FLOW_IN\x2C false\x2C true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state\x2C true\x2C nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state\x2C true\x2C nodeIndent);\n      composeNode(state\x2C nodeIndent\x2C CONTEXT_FLOW_IN\x2C false\x2C true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C valueNode\x2C _line\x2C _lineStart\x2C _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state\x2C null\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C valueNode\x2C _line\x2C _lineStart\x2C _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state\x2C true\x2C nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* \x2C */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state\x2C 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state\x2C nodeIndent) {\n  var captureStart\x2C\n      folding\x2C\n      chomping       = CHOMPING_CLIP\x2C\n      didReadContent = false\x2C\n      detectedIndent = false\x2C\n      textIndent     = nodeIndent\x2C\n      emptyLines     = 0\x2C\n      atMoreIndented = false\x2C\n      tmp\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state\x2C 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state\x2C 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state\x2C 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n'\x2C didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n'\x2C didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n'\x2C emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n'\x2C emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n'\x2C didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state\x2C captureStart\x2C state.position\x2C false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state\x2C nodeIndent) {\n  var _line\x2C\n      _tag      = state.tag\x2C\n      _anchor   = state.anchor\x2C\n      _result   = []\x2C\n      following\x2C\n      detected  = false\x2C\n      ch;\n\n  // there is a leading tab before this token\x2C so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state\x2C 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state\x2C true\x2C -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state\x2C nodeIndent\x2C CONTEXT_BLOCK_IN\x2C false\x2C true);\n    _result.push(state.result);\n    skipSeparationSpace(state\x2C true\x2C -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state\x2C 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state\x2C nodeIndent\x2C flowIndent) {\n  var following\x2C\n      allowCompact\x2C\n      _line\x2C\n      _keyLine\x2C\n      _keyLineStart\x2C\n      _keyPos\x2C\n      _tag          = state.tag\x2C\n      _anchor       = state.anchor\x2C\n      _result       = {}\x2C\n      overridableKeys = Object.create(null)\x2C\n      keyTag        = null\x2C\n      keyNode       = null\x2C\n      valueNode     = null\x2C\n      atExplicitKey = false\x2C\n      detected      = false\x2C\n      ch;\n\n  // there is a leading tab before this token\x2C so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state\x2C 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by "?") and second for the value (denoted by ":")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C null\x2C _keyLine\x2C _keyLineStart\x2C _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state\x2C 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first\x2C then ":"\x2C and the value.\n    //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state\x2C flowIndent\x2C CONTEXT_FLOW_OUT\x2C false\x2C true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state\x2C 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C null\x2C _keyLine\x2C _keyLineStart\x2C _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state\x2C 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state\x2C 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state\x2C nodeIndent\x2C CONTEXT_BLOCK_OUT\x2C true\x2C allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C valueNode\x2C _keyLine\x2C _keyLineStart\x2C _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state\x2C true\x2C -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state\x2C 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state\x2C _result\x2C overridableKeys\x2C keyTag\x2C keyNode\x2C null\x2C _keyLine\x2C _keyLineStart\x2C _keyPos);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position\x2C\n      isVerbatim = false\x2C\n      isNamed    = false\x2C\n      tagHandle\x2C\n      tagName\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state\x2C 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position\x2C state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state\x2C 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1\x2C state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state\x2C 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state\x2C 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position\x2C state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state\x2C 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state\x2C 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state\x2C 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty$1.call(state.tagMap\x2C tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org\x2C2002:' + tagName;\n\n  } else {\n    throwError(state\x2C 'undeclared tag handle "' + tagHandle + '"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state\x2C 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state\x2C 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position\x2C state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position\x2C alias\x2C\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state\x2C 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position\x2C state.position);\n\n  if (!_hasOwnProperty$1.call(state.anchorMap\x2C alias)) {\n    throwError(state\x2C 'unidentified alias "' + alias + '"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state\x2C true\x2C -1);\n  return true;\n}\n\nfunction composeNode(state\x2C parentIndent\x2C nodeContext\x2C allowToSeek\x2C allowCompact) {\n  var allowBlockStyles\x2C\n      allowBlockScalars\x2C\n      allowBlockCollections\x2C\n      indentStatus = 1\x2C // 1: this>parent\x2C 0: this=parent\x2C -1: this<parent\n      atNewLine  = false\x2C\n      hasContent = false\x2C\n      typeIndex\x2C\n      typeQuantity\x2C\n      typeList\x2C\n      type\x2C\n      flowIndent\x2C\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open'\x2C state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state\x2C true\x2C -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state\x2C true\x2C -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state\x2C blockIndent) ||\n           readBlockMapping(state\x2C blockIndent\x2C flowIndent)) ||\n          readFlowCollection(state\x2C flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state\x2C flowIndent)) ||\n            readSingleQuotedScalar(state\x2C flowIndent) ||\n            readDoubleQuotedScalar(state\x2C flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state\x2C 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state\x2C flowIndent\x2C CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state\x2C blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types\x2C and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag\x2C for example like this: "!<?> [0]"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state\x2C 'unacceptable node kind for !<?> tag; it should be "scalar"\x2C not "' + state.kind + '"');\n    }\n\n    for (typeIndex = 0\x2C typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback']\x2C state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0\x2C typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0\x2C typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state\x2C 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state\x2C 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '"\x2C not "' + state.kind + '"');\n    }\n\n    if (!type.resolve(state.result\x2C state.tag)) { // `state.result` updated in resolver if matched\n      throwError(state\x2C 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result\x2C state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close'\x2C state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position\x2C\n      _position\x2C\n      directiveName\x2C\n      directiveArgs\x2C\n      hasDirectives = false\x2C\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state\x2C true\x2C -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position\x2C state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state\x2C 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position\x2C state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty$1.call(directiveHandlers\x2C directiveName)) {\n      directiveHandlers[directiveName](state\x2C directiveName\x2C directiveArgs);\n    } else {\n      throwWarning(state\x2C 'unknown document directive "' + directiveName + '"');\n    }\n  }\n\n  skipSeparationSpace(state\x2C true\x2C -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state\x2C true\x2C -1);\n\n  } else if (hasDirectives) {\n    throwError(state\x2C 'directives end mark is expected');\n  }\n\n  composeNode(state\x2C state.lineIndent - 1\x2C CONTEXT_BLOCK_OUT\x2C false\x2C true);\n  skipSeparationSpace(state\x2C true\x2C -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart\x2C state.position))) {\n    throwWarning(state\x2C 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state\x2C true\x2C -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state\x2C 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input\x2C options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State$1(input\x2C options);\n\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state\x2C 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll$1(input\x2C iterator\x2C options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input\x2C options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0\x2C length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load$1(input\x2C options) {\n  var documents = loadDocuments(input\x2C options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new exception('expected a single document in the stream\x2C but found more');\n}\n\n\nvar loadAll_1 = loadAll$1;\nvar load_1    = load$1;\n\nvar loader = {\n\x09loadAll: loadAll_1\x2C\n\x09load: load_1\n};\n\n/*eslint-disable no-use-before-define*/\n\n\n\n\n\nvar _toString       = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar CHAR_BOM                  = 0xFEFF;\nvar CHAR_TAB                  = 0x09; /* Tab */\nvar CHAR_LINE_FEED            = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\nvar CHAR_SPACE                = 0x20; /* Space */\nvar CHAR_EXCLAMATION          = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22; /* " */\nvar CHAR_SHARP                = 0x23; /* # */\nvar CHAR_PERCENT              = 0x25; /* % */\nvar CHAR_AMPERSAND            = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27; /* ' */\nvar CHAR_ASTERISK             = 0x2A; /* * */\nvar CHAR_COMMA                = 0x2C; /* \x2C */\nvar CHAR_MINUS                = 0x2D; /* - */\nvar CHAR_COLON                = 0x3A; /* : */\nvar CHAR_EQUALS               = 0x3D; /* = */\nvar CHAR_GREATER_THAN         = 0x3E; /* > */\nvar CHAR_QUESTION             = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT         = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\n\nESCAPE_SEQUENCES[0x00]   = '\\\\0';\nESCAPE_SEQUENCES[0x07]   = '\\\\a';\nESCAPE_SEQUENCES[0x08]   = '\\\\b';\nESCAPE_SEQUENCES[0x09]   = '\\\\t';\nESCAPE_SEQUENCES[0x0A]   = '\\\\n';\nESCAPE_SEQUENCES[0x0B]   = '\\\\v';\nESCAPE_SEQUENCES[0x0C]   = '\\\\f';\nESCAPE_SEQUENCES[0x0D]   = '\\\\r';\nESCAPE_SEQUENCES[0x1B]   = '\\\\e';\nESCAPE_SEQUENCES[0x22]   = '\\\\"';\nESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85]   = '\\\\N';\nESCAPE_SEQUENCES[0xA0]   = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n  'y'\x2C 'Y'\x2C 'yes'\x2C 'Yes'\x2C 'YES'\x2C 'on'\x2C 'On'\x2C 'ON'\x2C\n  'n'\x2C 'N'\x2C 'no'\x2C 'No'\x2C 'NO'\x2C 'off'\x2C 'Off'\x2C 'OFF'\n];\n\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema\x2C map) {\n  var result\x2C keys\x2C index\x2C length\x2C tag\x2C style\x2C type;\n\n  if (map === null) return {};\n\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0\x2C length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0\x2C 2) === '!!') {\n      tag = 'tag:yaml.org\x2C2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases\x2C style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string\x2C handle\x2C length;\n\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0'\x2C length - string.length) + string;\n}\n\n\nvar QUOTING_TYPE_SINGLE = 1\x2C\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema        = options['schema'] || _default;\n  this.indent        = Math.max(1\x2C (options['indent'] || 2));\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid   = options['skipInvalid'] || false;\n  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n  this.styleMap      = compileStyleMap(this.schema\x2C options['styles'] || null);\n  this.sortKeys      = options['sortKeys'] || false;\n  this.lineWidth     = options['lineWidth'] || 80;\n  this.noRefs        = options['noRefs'] || false;\n  this.noCompatMode  = options['noCompatMode'] || false;\n  this.condenseFlow  = options['condenseFlow'] || false;\n  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes   = options['forceQuotes'] || false;\n  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n\n  this.tag = null;\n  this.result = '';\n\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string\x2C spaces) {\n  var ind = common.repeat(' '\x2C spaces)\x2C\n      position = 0\x2C\n      next = -1\x2C\n      result = ''\x2C\n      line\x2C\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n'\x2C position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position\x2C next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state\x2C level) {\n  return '\\n' + common.repeat(' '\x2C state.indent * level);\n}\n\nfunction testImplicitResolving(state\x2C str) {\n  var index\x2C length\x2C type;\n\n  for (index = 0\x2C length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: "any allowed characters known to be non-printable\n// should also be escaped. [However\x2C] This isn\u2019t mandatory"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return  (0x00020 <= c && c <= 0x00007E)\n      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n      ||  (0x10000 <= c && c <= 0x10FFFF);\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason\x2C examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c)\n    && c !== CHAR_BOM\n    // - b-char\n    && c !== CHAR_CARRIAGE_RETURN\n    && c !== CHAR_LINE_FEED;\n}\n\n// [127]  ns-plain-safe(c) ::= c = flow-out  \u21d2 ns-plain-safe-out\n//                             c = flow-in   \u21d2 ns-plain-safe-in\n//                             c = block-key \u21d2 ns-plain-safe-out\n//                             c = flow-key  \u21d2 ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - \u201c:\u201d - \u201c#\u201d )\n//                            | ( /* An ns-char preceding */ \u201c#\u201d )\n//                            | ( \u201c:\u201d /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c\x2C prev\x2C inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (\n    // ns-plain-safe\n    inblock ? // c = flow-in\n      cIsNsCharOrWhitespace\n      : cIsNsCharOrWhitespace\n        // - c-flow-indicator\n        && c !== CHAR_COMMA\n        && c !== CHAR_LEFT_SQUARE_BRACKET\n        && c !== CHAR_RIGHT_SQUARE_BRACKET\n        && c !== CHAR_LEFT_CURLY_BRACKET\n        && c !== CHAR_RIGHT_CURLY_BRACKET\n  )\n    // ns-plain-char\n    && c !== CHAR_SHARP // false on '#'\n    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( \u201c?\u201d | \u201c:\u201d | \u201c-\u201d ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM\n    && !isWhitespace(c) // - s-white\n    // - (c-indicator ::=\n    // \u201c-\u201d | \u201c?\u201d | \u201c:\u201d | \u201c\x2C\u201d | \u201c[\u201d | \u201c]\u201d | \u201c{\u201d | \u201c}\u201d\n    && c !== CHAR_MINUS\n    && c !== CHAR_QUESTION\n    && c !== CHAR_COLON\n    && c !== CHAR_COMMA\n    && c !== CHAR_LEFT_SQUARE_BRACKET\n    && c !== CHAR_RIGHT_SQUARE_BRACKET\n    && c !== CHAR_LEFT_CURLY_BRACKET\n    && c !== CHAR_RIGHT_CURLY_BRACKET\n    // | \u201c#\u201d | \u201c&\u201d | \u201c*\u201d | \u201c!\u201d | \u201c|\u201d | \u201c=\u201d | \u201c>\u201d | \u201c'\u201d | \u201c"\u201d\n    && c !== CHAR_SHARP\n    && c !== CHAR_AMPERSAND\n    && c !== CHAR_ASTERISK\n    && c !== CHAR_EXCLAMATION\n    && c !== CHAR_VERTICAL_LINE\n    && c !== CHAR_EQUALS\n    && c !== CHAR_GREATER_THAN\n    && c !== CHAR_SINGLE_QUOTE\n    && c !== CHAR_DOUBLE_QUOTE\n    // | \u201c%\u201d | \u201c@\u201d | \u201c`\u201d)\n    && c !== CHAR_PERCENT\n    && c !== CHAR_COMMERCIAL_AT\n    && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon\x2C it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\n\n// Same as 'string'.codePointAt(pos)\x2C but works in older browsers.\nfunction codePointAt(string\x2C pos) {\n  var first = string.charCodeAt(pos)\x2C second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN   = 1\x2C\n    STYLE_SINGLE  = 2\x2C\n    STYLE_LITERAL = 3\x2C\n    STYLE_FOLDED  = 4\x2C\n    STYLE_DOUBLE  = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string\x2C singleLineOnly\x2C indentPerLevel\x2C lineWidth\x2C\n  testAmbiguousType\x2C quotingType\x2C forceQuotes\x2C inblock) {\n\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(codePointAt(string\x2C 0))\n          && isPlainSafeLast(codePointAt(string\x2C string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string\x2C i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char\x2C prevChar\x2C inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string\x2C i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n            // Foldable line = too long\x2C and not more-indented.\n            (i - previousLineBreak - 1 > lineWidth &&\n             string[previousLineBreak + 1] !== ' ');\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char\x2C prevChar\x2C inblock);\n      prevChar = char;\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n      (i - previousLineBreak - 1 > lineWidth &&\n       string[previousLineBreak + 1] !== ' '));\n  }\n  // Although every style can represent \\n without escaping\x2C prefer block styles\n  // for multiline\x2C since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    \u2022 No ending newline => unaffected; already using strip "-" chomping.\n//    \u2022 Ending newline    => removed then restored.\n//  Importantly\x2C this keeps the "+" chomp indicator from gaining an extra line.\nfunction writeScalar(state\x2C string\x2C level\x2C iskey\x2C inblock) {\n  state.dump = (function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");\n      }\n    }\n\n    var indent = state.indent * Math.max(1\x2C level); // no 0-indent scalars\n    // As indentation gets deeper\x2C let the width decrease monotonically\n    // to the lower bound min(state.lineWidth\x2C 40).\n    // Note that this implies\n    //  state.lineWidth \u2264 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options\x2C\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1\n      ? -1 : Math.max(Math.min(state.lineWidth\x2C 40)\x2C state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit\x2C assume implicit for safety.\n    var singleLineOnly = iskey\n      // No block styles in flow mode.\n      || (state.flowLevel > -1 && level >= state.flowLevel);\n    function testAmbiguity(string) {\n      return testImplicitResolving(state\x2C string);\n    }\n\n    switch (chooseScalarStyle(string\x2C singleLineOnly\x2C state.indent\x2C lineWidth\x2C\n      testAmbiguity\x2C state.quotingType\x2C state.forceQuotes && !iskey\x2C inblock)) {\n\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return "'" + string.replace(/'/g\x2C "''") + "'";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string\x2C state.indent)\n          + dropEndingNewline(indentString(string\x2C indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string\x2C state.indent)\n          + dropEndingNewline(indentString(foldString(string\x2C lineWidth)\x2C indent));\n      case STYLE_DOUBLE:\n        return '"' + escapeString(string) + '"';\n      default:\n        throw new exception('impossible error: invalid scalar style');\n    }\n  }());\n}\n\n// Pre-conditions: string is valid for a block scalar\x2C 1 <= indentPerLevel <= 9.\nfunction blockHeader(string\x2C indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a "trailing" empty line.\n  var clip =          string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : (clip ? '' : '-');\n\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0\x2C -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable\x2C str.length > 0\x2C width > 0.\nfunction foldString(string\x2C width) {\n  // In folded style\x2C $k$ consecutive newlines output as $k+1$ newlines\u2014\n  // unless they're before or after a more-indented line\x2C or at the very\n  // beginning or end\x2C in which case $k$ maps to $k$.\n  // Therefore\x2C parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = (function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0\x2C nextLF)\x2C width);\n  }());\n  // If we haven't reached the first content line yet\x2C don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while ((match = lineRe.exec(string))) {\n    var prefix = match[1]\x2C line = match[2];\n    moreIndented = (line[0] === ' ');\n    result += prefix\n      + (!prevMoreIndented && !moreIndented && line !== ''\n        ? '\\n' : '')\n      + foldLine(line\x2C width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time\x2C\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded\x2C as that would add an extra \\n.\nfunction foldLine(line\x2C width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n\x2C breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end\x2C curr\x2C and next are exclusive.\n  var start = 0\x2C end\x2C curr = 0\x2C next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0\x2C length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2\x2C so curr and next are <= length-2.\n  while ((match = breakRe.exec(line))) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = (curr > start) ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start\x2C end);\n      // skip the space that was output as \\n\n      start = end + 1;                    // derive start <= length-1\n    }\n    curr = next;\n  }\n\n  // By the invariants\x2C start <= length-1\x2C so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start\x2C curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string\x2C i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state\x2C level\x2C object) {\n  var _result = ''\x2C\n      _tag    = state.tag\x2C\n      index\x2C\n      length\x2C\n      value;\n\n  for (index = 0\x2C length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object\x2C String(index)\x2C value);\n    }\n\n    // Write only valid elements\x2C put null instead of invalid elements.\n    if (writeNode(state\x2C level\x2C value\x2C false\x2C false) ||\n        (typeof value === 'undefined' &&\n         writeNode(state\x2C level\x2C null\x2C false\x2C false))) {\n\n      if (_result !== '') _result += '\x2C' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state\x2C level\x2C object\x2C compact) {\n  var _result = ''\x2C\n      _tag    = state.tag\x2C\n      index\x2C\n      length\x2C\n      value;\n\n  for (index = 0\x2C length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object\x2C String(index)\x2C value);\n    }\n\n    // Write only valid elements\x2C put null instead of invalid elements.\n    if (writeNode(state\x2C level + 1\x2C value\x2C true\x2C true\x2C false\x2C true) ||\n        (typeof value === 'undefined' &&\n         writeNode(state\x2C level + 1\x2C null\x2C true\x2C true\x2C false\x2C true))) {\n\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state\x2C level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state\x2C level\x2C object) {\n  var _result       = ''\x2C\n      _tag          = state.tag\x2C\n      objectKeyList = Object.keys(object)\x2C\n      index\x2C\n      length\x2C\n      objectKey\x2C\n      objectValue\x2C\n      pairBuffer;\n\n  for (index = 0\x2C length = objectKeyList.length; index < length; index += 1) {\n\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += '\x2C ';\n\n    if (state.condenseFlow) pairBuffer += '"';\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object\x2C objectKey\x2C objectValue);\n    }\n\n    if (!writeNode(state\x2C level\x2C objectKey\x2C false\x2C false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n\n    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state\x2C level\x2C objectValue\x2C false\x2C false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state\x2C level\x2C object\x2C compact) {\n  var _result       = ''\x2C\n      _tag          = state.tag\x2C\n      objectKeyList = Object.keys(object)\x2C\n      index\x2C\n      length\x2C\n      objectKey\x2C\n      objectValue\x2C\n      explicitPair\x2C\n      pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new exception('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0\x2C length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state\x2C level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object\x2C objectKey\x2C objectValue);\n    }\n\n    if (!writeNode(state\x2C level + 1\x2C objectKey\x2C true\x2C true\x2C true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = (state.tag !== null && state.tag !== '?') ||\n                   (state.dump && state.dump.length > 1024);\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state\x2C level);\n    }\n\n    if (!writeNode(state\x2C level + 1\x2C objectValue\x2C true\x2C explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state\x2C object\x2C explicit) {\n  var _result\x2C typeList\x2C index\x2C length\x2C type\x2C style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0\x2C length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf  || type.predicate) &&\n        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n        (!type.predicate  || type.predicate(object))) {\n\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object\x2C style);\n        } else if (_hasOwnProperty.call(type.represent\x2C style)) {\n          _result = type.represent[style](object\x2C style);\n        } else {\n          throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success\x2C or false on invalid object.\n//\nfunction writeNode(state\x2C level\x2C object\x2C block\x2C compact\x2C iskey\x2C isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state\x2C object\x2C false)) {\n    detectType(state\x2C object\x2C true);\n  }\n\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = (state.flowLevel < 0 || state.flowLevel > level);\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]'\x2C\n      duplicateIndex\x2C\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && (Object.keys(state.dump).length !== 0)) {\n        writeBlockMapping(state\x2C level\x2C state.dump\x2C compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state\x2C level\x2C state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && (state.dump.length !== 0)) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state\x2C level - 1\x2C state.dump\x2C compact);\n        } else {\n          writeBlockSequence(state\x2C level\x2C state.dump\x2C compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state\x2C level\x2C state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state\x2C state.dump\x2C level\x2C iskey\x2C inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new exception('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | \u201c-\u201d\n      // [39] ns-uri-char     ::=  \u201c%\u201d ns-hex-digit ns-hex-digit | ns-word-char | \u201c#\u201d\n      //                         | \u201c;\u201d | \u201c/\u201d | \u201c?\u201d | \u201c:\u201d | \u201c@\u201d | \u201c&\u201d | \u201c=\u201d | \u201c+\u201d | \u201c$\u201d | \u201c\x2C\u201d\n      //                         | \u201c_\u201d | \u201c.\u201d | \u201c!\u201d | \u201c~\u201d | \u201c*\u201d | \u201c'\u201d | \u201c(\u201d | \u201c)\u201d | \u201c[\u201d | \u201c]\u201d\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(\n        state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n      ).replace(/!/g\x2C '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0\x2C 18) === 'tag:yaml.org\x2C2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object\x2C state) {\n  var objects = []\x2C\n      duplicatesIndexes = []\x2C\n      index\x2C\n      length;\n\n  inspectNode(object\x2C objects\x2C duplicatesIndexes);\n\n  for (index = 0\x2C length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object\x2C objects\x2C duplicatesIndexes) {\n  var objectKeyList\x2C\n      index\x2C\n      length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0\x2C length = object.length; index < length; index += 1) {\n          inspectNode(object[index]\x2C objects\x2C duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0\x2C length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]]\x2C objects\x2C duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump$1(input\x2C options) {\n  options = options || {};\n\n  var state = new State(options);\n\n  if (!state.noRefs) getDuplicateReferences(input\x2C state);\n\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({ '': value }\x2C ''\x2C value);\n  }\n\n  if (writeNode(state\x2C 0\x2C value\x2C true\x2C true)) return state.dump + '\\n';\n\n  return '';\n}\n\nvar dump_1 = dump$1;\n\nvar dumper = {\n\x09dump: dump_1\n};\n\nfunction renamed(from\x2C to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n      'Use yaml.' + to + ' instead\x2C which is now safe by default.');\n  };\n}\n\n\nvar Type                = type;\nvar Schema              = schema;\nvar FAILSAFE_SCHEMA     = failsafe;\nvar JSON_SCHEMA         = json;\nvar CORE_SCHEMA         = core;\nvar DEFAULT_SCHEMA      = _default;\nvar load                = loader.load;\nvar loadAll             = loader.loadAll;\nvar dump                = dumper.dump;\nvar YAMLException       = exception;\n\n// Re-export all types in case user wants to create custom schema\nvar types = {\n  binary:    binary\x2C\n  float:     float\x2C\n  map:       map\x2C\n  null:      _null\x2C\n  pairs:     pairs\x2C\n  set:       set\x2C\n  timestamp: timestamp\x2C\n  bool:      bool\x2C\n  int:       int\x2C\n  merge:     merge\x2C\n  omap:      omap\x2C\n  seq:       seq\x2C\n  str:       str\n};\n\n// Removed functions from JS-YAML 3.0.x\nvar safeLoad            = renamed('safeLoad'\x2C 'load');\nvar safeLoadAll         = renamed('safeLoadAll'\x2C 'loadAll');\nvar safeDump            = renamed('safeDump'\x2C 'dump');\n\nvar jsYaml = {\n\x09Type: Type\x2C\n\x09Schema: Schema\x2C\n\x09FAILSAFE_SCHEMA: FAILSAFE_SCHEMA\x2C\n\x09JSON_SCHEMA: JSON_SCHEMA\x2C\n\x09CORE_SCHEMA: CORE_SCHEMA\x2C\n\x09DEFAULT_SCHEMA: DEFAULT_SCHEMA\x2C\n\x09load: load\x2C\n\x09loadAll: loadAll\x2C\n\x09dump: dump\x2C\n\x09YAMLException: YAMLException\x2C\n\x09types: types\x2C\n\x09safeLoad: safeLoad\x2C\n\x09safeLoadAll: safeLoadAll\x2C\n\x09safeDump: safeDump\n};\n\nexport default jsYaml;\nexport { CORE_SCHEMA\x2C DEFAULT_SCHEMA\x2C FAILSAFE_SCHEMA\x2C JSON_SCHEMA\x2C Schema\x2C Type\x2C YAMLException\x2C dump\x2C load\x2C loadAll\x2C safeDump\x2C safeLoad\x2C safeLoadAll\x2C types };\n
code-source-info,0xd55be68b
tick,0x7ff81324d664,1120096,1,0x7ff6d5cf6d60,3,0x7ff6d65ae370,0x246eeef0ce1,0x246eeeeab23,0x7ff6d6643c13
code-creation,LazyCompile,10,1122727,0xd55be74556,90,decorateErrorStack node:internal/util:142:28,0x2392d46518,~
code-source-info,0xd55be74556,15,3821,4144,C0O3832C3O3838C9O3858C17O3875C22O3895C25O3875C32O3925C37O3940C38O3947C39O3967C46O3987C49O3967C55O4026C57O4068C61O4062C64O4054C68O4080C75O4100C83O4080C89O4143,,
code-creation,LazyCompile,10,1122859,0xd55be746b6,19,isError node:internal/util:83:17,0x2392d46300,~
code-source-info,0xd55be746b6,15,1995,2234,C0O2185C5O2192C13O2225C15O2214C18O2231,,
code-creation,LazyCompile,10,1123077,0xd55be7490e,343,prepareStackTrace node:internal/errors:90:27,0x39b87e66b0,~
code-source-info,0xd55be7490e
code-creation,LazyCompile,10,1123281,0xd55be74c06,70,maybeOverridePrepareStackTrace node:internal/errors:135:40,0x39b87e7550,~
code-source-info,0xd55be74c06,11,3819,4542,C0O4052C7O4057C18O4118C23O4124C28O4124C34O4156C35O4384C40O4412C48O4453C53O4477C58O4477C64O4509C65O4520C69O4539,,
code-creation,LazyCompile,10,1124289,0xd55be74e5e,12,hasUncaughtExceptionCaptureCallback node:internal/process/execution:122:45,0x1b7857b5df0,~
script-source,81,node:internal/process/execution,'use strict';\x0d\n\x0d\nconst {\x0d\n  RegExpPrototypeExec\x2C\x0d\n  globalThis\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst path = require('path');\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_INVALID_ARG_TYPE\x2C\x0d\n    ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\x2C\x0d\n    ERR_EVAL_ESM_CANNOT_PRINT\x2C\x0d\n  }\x2C\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  executionAsyncId\x2C\x0d\n  clearDefaultTriggerAsyncId\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n  hasAsyncIdStack\x2C\x0d\n  afterHooksExist\x2C\x0d\n  emitAfter\x2C\x0d\n  popAsyncContext\x2C\x0d\n} = require('internal/async_hooks');\x0d\n\x0d\n// shouldAbortOnUncaughtToggle is a typed array for faster\x0d\n// communication with JS.\x0d\nconst { shouldAbortOnUncaughtToggle } = internalBinding('util');\x0d\n\x0d\nfunction tryGetCwd() {\x0d\n  try {\x0d\n    return process.cwd();\x0d\n  } catch {\x0d\n    // getcwd(3) can fail if the current working directory has been deleted.\x0d\n    // Fall back to the directory name of the (absolute) executable path.\x0d\n    // It's not really correct but what are the alternatives?\x0d\n    return path.dirname(process.execPath);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction evalModule(source\x2C print) {\x0d\n  if (print) {\x0d\n    throw new ERR_EVAL_ESM_CANNOT_PRINT();\x0d\n  }\x0d\n  const { loadESM } = require('internal/process/esm_loader');\x0d\n  const { handleMainPromise } = require('internal/modules/run_main');\x0d\n  RegExpPrototypeExec(/^/\x2C ''); // Necessary to reset RegExp statics before user code runs.\x0d\n  return handleMainPromise(loadESM((loader) => loader.eval(source)));\x0d\n}\x0d\n\x0d\nfunction evalScript(name\x2C body\x2C breakFirstLine\x2C print) {\x0d\n  const CJSModule = require('internal/modules/cjs/loader').Module;\x0d\n  const { kVmBreakFirstLineSymbol } = require('internal/util');\x0d\n  const { pathToFileURL } = require('url');\x0d\n\x0d\n  const cwd = tryGetCwd();\x0d\n  const origModule = globalThis.module;  // Set e.g. when called from the REPL.\x0d\n\x0d\n  const module = new CJSModule(name);\x0d\n  module.filename = path.join(cwd\x2C name);\x0d\n  module.paths = CJSModule._nodeModulePaths(cwd);\x0d\n\x0d\n  const asyncESM = require('internal/process/esm_loader');\x0d\n  const baseUrl = pathToFileURL(module.filename).href;\x0d\n\x0d\n  // Create wrapper for cache entry\x0d\n  const script = `\x0d\n    globalThis.module = module;\x0d\n    globalThis.exports = exports;\x0d\n    globalThis.__dirname = __dirname;\x0d\n    globalThis.require = require;\x0d\n    return (main) => main();\x0d\n  `;\x0d\n  globalThis.__filename = name;\x0d\n  RegExpPrototypeExec(/^/\x2C ''); // Necessary to reset RegExp statics before user code runs.\x0d\n  const result = module._compile(script\x2C `${name}-wrapper`)(() =>\x0d\n    require('vm').runInThisContext(body\x2C {\x0d\n      filename: name\x2C\x0d\n      displayErrors: true\x2C\x0d\n      [kVmBreakFirstLineSymbol]: !!breakFirstLine\x2C\x0d\n      importModuleDynamically(specifier\x2C _\x2C importAssertions) {\x0d\n        const loader = asyncESM.esmLoader;\x0d\n        return loader.import(specifier\x2C baseUrl\x2C importAssertions);\x0d\n      }\x0d\n    }));\x0d\n  if (print) {\x0d\n    const { log } = require('internal/console/global');\x0d\n    log(result);\x0d\n  }\x0d\n\x0d\n  if (origModule !== undefined)\x0d\n    globalThis.module = origModule;\x0d\n}\x0d\n\x0d\nconst exceptionHandlerState = {\x0d\n  captureFn: null\x2C\x0d\n  reportFlag: false\x0d\n};\x0d\n\x0d\nfunction setUncaughtExceptionCaptureCallback(fn) {\x0d\n  if (fn === null) {\x0d\n    exceptionHandlerState.captureFn = fn;\x0d\n    shouldAbortOnUncaughtToggle[0] = 1;\x0d\n    process.report.reportOnUncaughtException = exceptionHandlerState.reportFlag;\x0d\n    return;\x0d\n  }\x0d\n  if (typeof fn !== 'function') {\x0d\n    throw new ERR_INVALID_ARG_TYPE('fn'\x2C ['Function'\x2C 'null']\x2C fn);\x0d\n  }\x0d\n  if (exceptionHandlerState.captureFn !== null) {\x0d\n    throw new ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET();\x0d\n  }\x0d\n  exceptionHandlerState.captureFn = fn;\x0d\n  shouldAbortOnUncaughtToggle[0] = 0;\x0d\n  exceptionHandlerState.reportFlag =\x0d\n    process.report.reportOnUncaughtException === true;\x0d\n  process.report.reportOnUncaughtException = false;\x0d\n}\x0d\n\x0d\nfunction hasUncaughtExceptionCaptureCallback() {\x0d\n  return exceptionHandlerState.captureFn !== null;\x0d\n}\x0d\n\x0d\nfunction noop() {}\x0d\n\x0d\n// XXX(joyeecheung): for some reason this cannot be defined at the top-level\x0d\n// and exported to be written to process._fatalException\x2C it has to be\x0d\n// returned as an *anonymous function* wrapped inside a factory function\x2C\x0d\n// otherwise it breaks the test-timers.setInterval async hooks test -\x0d\n// this may indicate that node::errors::TriggerUncaughtException() should\x0d\n// fix up the callback scope before calling into process._fatalException\x2C\x0d\n// or this function should take extra care of the async hooks before it\x0d\n// schedules a setImmediate.\x0d\nfunction createOnGlobalUncaughtException() {\x0d\n  // The C++ land node::errors::TriggerUncaughtException() will\x0d\n  // exit the process if it returns false\x2C and continue execution if it\x0d\n  // returns true (which indicates that the exception is handled by the user).\x0d\n  return (er\x2C fromPromise) => {\x0d\n    // It's possible that defaultTriggerAsyncId was set for a constructor\x0d\n    // call that threw and was never cleared. So clear it now.\x0d\n    clearDefaultTriggerAsyncId();\x0d\n\x0d\n    const type = fromPromise ? 'unhandledRejection' : 'uncaughtException';\x0d\n    process.emit('uncaughtExceptionMonitor'\x2C er\x2C type);\x0d\n    if (exceptionHandlerState.captureFn !== null) {\x0d\n      exceptionHandlerState.captureFn(er);\x0d\n    } else if (!process.emit('uncaughtException'\x2C er\x2C type)) {\x0d\n      // If someone handled it\x2C then great. Otherwise\x2C die in C++ land\x0d\n      // since that means that we'll exit the process\x2C emit the 'exit' event.\x0d\n      try {\x0d\n        if (!process._exiting) {\x0d\n          process._exiting = true;\x0d\n          process.exitCode = 1;\x0d\n          process.emit('exit'\x2C 1);\x0d\n        }\x0d\n      } catch {\x0d\n        // Nothing to be done about it at this point.\x0d\n      }\x0d\n      return false;\x0d\n    }\x0d\n\x0d\n    // If we handled an error\x2C then make sure any ticks get processed\x0d\n    // by ensuring that the next Immediate cycle isn't empty.\x0d\n    require('timers').setImmediate(noop);\x0d\n\x0d\n    // Emit the after() hooks now that the exception has been handled.\x0d\n    if (afterHooksExist()) {\x0d\n      do {\x0d\n        const asyncId = executionAsyncId();\x0d\n        if (asyncId === 0)\x0d\n          popAsyncContext(0);\x0d\n        else\x0d\n          emitAfter(asyncId);\x0d\n      } while (hasAsyncIdStack());\x0d\n    }\x0d\n    // And completely empty the id stack\x2C including anything that may be\x0d\n    // cached on the native side.\x0d\n    clearAsyncIdStack();\x0d\n\x0d\n    return true;\x0d\n  };\x0d\n}\x0d\n\x0d\nfunction readStdin(callback) {\x0d\n  process.stdin.setEncoding('utf8');\x0d\n\x0d\n  let code = '';\x0d\n  process.stdin.on('data'\x2C (d) => {\x0d\n    code += d;\x0d\n  });\x0d\n\x0d\n  process.stdin.on('end'\x2C () => {\x0d\n    callback(code);\x0d\n  });\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  readStdin\x2C\x0d\n  tryGetCwd\x2C\x0d\n  evalModule\x2C\x0d\n  evalScript\x2C\x0d\n  onGlobalUncaughtException: createOnGlobalUncaughtException()\x2C\x0d\n  setUncaughtExceptionCaptureCallback\x2C\x0d\n  hasUncaughtExceptionCaptureCallback\x0d\n};\x0d\n
code-source-info,0xd55be74e5e,81,3776,3835,C0O3784C5O3813C10O3823C11O3832,,
code-creation,LazyCompile,10,1125384,0xd55be756ee,244, node:internal/process/execution:140:10,0x1b7857b5ec8,~
code-source-info,0xd55be756ee,81,4683,6245,C0O4850C5O4850C8O4900C19O4963C22O4971C36O4971C41O5020C46O5046C52O5075C57O5097C62O5097C69O5124C72O5137C86O5137C96O5349C99O5362C105O5385C109O5402C113O5421C118O5438C122O5454C125O5462C136O5462C148O5578C149O5591C150O5740C156O5740C161O5757C169O5758C174O5857C179O5861C184O5919C189O5919C193O5948C194O5960C199O5978C206O5978C212O6023C217O6023C221O6059C226O6059C231O5889C234O6200C239O6200C242O6228C243O6240,,
code-creation,LazyCompile,10,1125577,0xd55be7593e,18,clearDefaultTriggerAsyncId node:internal/async_hooks:441:36,0x39b87faad8,~
script-source,13,node:internal/async_hooks,'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ErrorCaptureStackTrace\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  Symbol\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst promiseHooks = require('internal/promise_hooks');\x0d\n\x0d\nconst async_wrap = internalBinding('async_wrap');\x0d\nconst { setCallbackTrampoline } = async_wrap;\x0d\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\x0d\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\x0d\n * hooks for each type.\x0d\n *\x0d\n * async_id_fields is a Float64Array wrapping the double array of\x0d\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\x0d\n * the various asynchronous states of the application. These are:\x0d\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\x0d\n *    current execution stack.\x0d\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\x0d\n *    the resource corresponding to the current execution stack.\x0d\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\x0d\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\x0d\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\x0d\n *    of retrieving the triggerAsyncId value is:\x0d\n *    1. the value passed directly to the constructor\x0d\n *    2. value set in kDefaultTriggerAsyncId\x0d\n *    3. executionAsyncId of the current resource.\x0d\n *\x0d\n * async_ids_stack is a Float64Array that contains part of the async ID\x0d\n * stack. Each pushAsyncContext() call adds two doubles to it\x2C and each\x0d\n * popAsyncContext() call removes two doubles from it.\x0d\n * It has a fixed size\x2C so if that is exceeded\x2C calls to the native\x0d\n * side are used instead in pushAsyncContext() and popAsyncContext().\x0d\n */\x0d\nconst {\x0d\n  async_hook_fields\x2C\x0d\n  async_id_fields\x2C\x0d\n  execution_async_resources\x0d\n} = async_wrap;\x0d\n// Store the pair executionAsyncId and triggerAsyncId in a AliasedFloat64Array\x0d\n// in Environment::AsyncHooks::async_ids_stack_ which tracks the resource\x0d\n// responsible for the current execution stack. This is unwound as each resource\x0d\n// exits. In the case of a fatal exception this stack is emptied after calling\x0d\n// each hook's after() callback.\x0d\nconst {\x0d\n  pushAsyncContext: pushAsyncContext_\x2C\x0d\n  popAsyncContext: popAsyncContext_\x2C\x0d\n  executionAsyncResource: executionAsyncResource_\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n} = async_wrap;\x0d\n// Properties in active_hooks are used to keep track of the set of hooks being\x0d\n// executed in case another hook is enabled/disabled. The new set of hooks is\x0d\n// then restored once the active set of hooks is finished executing.\x0d\nconst active_hooks = {\x0d\n  // Array of all AsyncHooks that will be iterated whenever an async event\x0d\n  // fires. Using var instead of (preferably const) in order to assign\x0d\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\x0d\n  // execution.\x0d\n  array: []\x2C\x0d\n  // Use a counter to track nested calls of async hook callbacks and make sure\x0d\n  // the active_hooks.array isn't altered mid execution.\x0d\n  call_depth: 0\x2C\x0d\n  // Use to temporarily store and updated active_hooks.array if the user\x0d\n  // enables or disables a hook while hooks are being processed. If a hook is\x0d\n  // enabled() or disabled() during hook execution then the current set of\x0d\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\x0d\n  // subsequent changes are on the duplicated array. When all hooks have\x0d\n  // completed executing active_hooks.tmp_array is assigned to\x0d\n  // active_hooks.array.\x0d\n  tmp_array: null\x2C\x0d\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\x0d\n  // async_hook_fields can't be reassigned\x2C store each uint32 in an array that\x0d\n  // is written back to async_hook_fields when active_hooks.array is restored.\x0d\n  tmp_fields: null\x0d\n};\x0d\n\x0d\nconst { registerDestroyHook } = async_wrap;\x0d\nconst { enqueueMicrotask } = internalBinding('task_queue');\x0d\nconst { resource_symbol\x2C owner_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Each constant tracks how many callbacks there are for any given step of\x0d\n// async execution. These are tracked so if the user didn't include callbacks\x0d\n// for a given step\x2C that step can bail out early.\x0d\nconst {\x0d\n  kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x2C\x0d\n  kCheck\x2C kExecutionAsyncId\x2C kAsyncIdCounter\x2C kTriggerAsyncId\x2C\x0d\n  kDefaultTriggerAsyncId\x2C kStackLength\x2C kUsesExecutionAsyncResource\x2C\x0d\n} = async_wrap.constants;\x0d\n\x0d\nconst { async_id_symbol\x2C\x0d\n        trigger_async_id_symbol } = internalBinding('symbols');\x0d\n\x0d\n// Lazy load of internal/util/inspect;\x0d\nlet inspect;\x0d\n\x0d\n// Used in AsyncHook and AsyncResource.\x0d\nconst init_symbol = Symbol('init');\x0d\nconst before_symbol = Symbol('before');\x0d\nconst after_symbol = Symbol('after');\x0d\nconst destroy_symbol = Symbol('destroy');\x0d\nconst promise_resolve_symbol = Symbol('promiseResolve');\x0d\nconst emitBeforeNative = emitHookFactory(before_symbol\x2C 'emitBeforeNative');\x0d\nconst emitAfterNative = emitHookFactory(after_symbol\x2C 'emitAfterNative');\x0d\nconst emitDestroyNative = emitHookFactory(destroy_symbol\x2C 'emitDestroyNative');\x0d\nconst emitPromiseResolveNative =\x0d\n    emitHookFactory(promise_resolve_symbol\x2C 'emitPromiseResolveNative');\x0d\n\x0d\nlet domain_cb;\x0d\nfunction useDomainTrampoline(fn) {\x0d\n  domain_cb = fn;\x0d\n}\x0d\n\x0d\nfunction callbackTrampoline(asyncId\x2C resource\x2C cb\x2C ...args) {\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  execution_async_resources[index] = resource;\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n\x0d\n  let result;\x0d\n  if (asyncId === 0 && typeof domain_cb === 'function') {\x0d\n    args.unshift(cb);\x0d\n    result = domain_cb.apply(this\x2C args);\x0d\n  } else {\x0d\n    result = cb.apply(this\x2C args);\x0d\n  }\x0d\n\x0d\n  if (asyncId !== 0 && hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  execution_async_resources.pop();\x0d\n  return result;\x0d\n}\x0d\n\x0d\nconst topLevelResource = {};\x0d\n\x0d\nfunction executionAsyncResource() {\x0d\n  // Indicate to the native layer that this function is likely to be used\x2C\x0d\n  // in which case it will inform JS about the current async resource via\x0d\n  // the trampoline above.\x0d\n  async_hook_fields[kUsesExecutionAsyncResource] = 1;\x0d\n\x0d\n  const index = async_hook_fields[kStackLength] - 1;\x0d\n  if (index === -1) return topLevelResource;\x0d\n  const resource = execution_async_resources[index] ||\x0d\n    executionAsyncResource_(index);\x0d\n  return lookupPublicResource(resource);\x0d\n}\x0d\n\x0d\nfunction inspectExceptionValue(e) {\x0d\n  inspect ??= require('internal/util/inspect').inspect;\x0d\n  return { message: inspect(e) };\x0d\n}\x0d\n\x0d\n// Used to fatally abort the process if a callback throws.\x0d\nfunction fatalError(e) {\x0d\n  if (typeof e?.stack === 'string') {\x0d\n    process._rawDebug(e.stack);\x0d\n  } else {\x0d\n    const o = inspectExceptionValue(e);\x0d\n    ErrorCaptureStackTrace(o\x2C fatalError);\x0d\n    process._rawDebug(o.stack);\x0d\n  }\x0d\n\x0d\n  const { getOptionValue } = require('internal/options');\x0d\n  if (getOptionValue('--abort-on-uncaught-exception')) {\x0d\n    process.abort();\x0d\n  }\x0d\n  process.exit(1);\x0d\n}\x0d\n\x0d\nfunction lookupPublicResource(resource) {\x0d\n  if (typeof resource !== 'object' || resource === null) return resource;\x0d\n  // TODO(addaleax): Merge this with owner_symbol and use it across all\x0d\n  // AsyncWrap instances.\x0d\n  const publicResource = resource[resource_symbol];\x0d\n  if (publicResource !== undefined)\x0d\n    return publicResource;\x0d\n  return resource;\x0d\n}\x0d\n\x0d\n// Emit From Native //\x0d\n\x0d\n// Used by C++ to call all init() callbacks. Because some state can be setup\x0d\n// from C++ there's no need to perform all the same operations as in\x0d\n// emitInitScript.\x0d\nfunction emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  resource = lookupPublicResource(resource);\x0d\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    // eslint-disable-next-line no-var\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\x0d\n        active_hooks.array[i][init_symbol](\x0d\n          asyncId\x2C type\x2C triggerAsyncId\x2C\x0d\n          resource\x0d\n        );\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case active_hooks.tmp_array\x0d\n  // will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Called from native. The asyncId stack handling is taken care of there\x0d\n// before this is called.\x0d\nfunction emitHook(symbol\x2C asyncId) {\x0d\n  active_hooks.call_depth += 1;\x0d\n  // Use a single try/catch for all hook to avoid setting up one per\x0d\n  // iteration.\x0d\n  try {\x0d\n    // Using var here instead of let because "for (var ...)" is faster than let.\x0d\n    // Refs: https://github.com/nodejs/node/pull/30380#issuecomment-552948364\x0d\n    // eslint-disable-next-line no-var\x0d\n    for (var i = 0; i < active_hooks.array.length; i++) {\x0d\n      if (typeof active_hooks.array[i][symbol] === 'function') {\x0d\n        active_hooks.array[i][symbol](asyncId);\x0d\n      }\x0d\n    }\x0d\n  } catch (e) {\x0d\n    fatalError(e);\x0d\n  } finally {\x0d\n    active_hooks.call_depth -= 1;\x0d\n  }\x0d\n\x0d\n  // Hooks can only be restored if there have been no recursive hook calls.\x0d\n  // Also the active hooks do not need to be restored if enable()/disable()\x0d\n  // weren't called during hook execution\x2C in which case\x0d\n  // active_hooks.tmp_array will be null.\x0d\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\x0d\n    restoreActiveHooks();\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction emitHookFactory(symbol\x2C name) {\x0d\n  const fn = emitHook.bind(undefined\x2C symbol);\x0d\n\x0d\n  // Set the name property of the function as it looks good in the stack trace.\x0d\n  ObjectDefineProperty(fn\x2C 'name'\x2C {\x0d\n    __proto__: null\x2C\x0d\n    value: name\x0d\n  });\x0d\n  return fn;\x0d\n}\x0d\n\x0d\n// Manage Active Hooks //\x0d\n\x0d\nfunction getHookArrays() {\x0d\n  if (active_hooks.call_depth === 0)\x0d\n    return [active_hooks.array\x2C async_hook_fields];\x0d\n  // If this hook is being enabled while in the middle of processing the array\x0d\n  // of currently active hooks then duplicate the current set of active hooks\x0d\n  // and store this there. This shouldn't fire until the next time hooks are\x0d\n  // processed.\x0d\n  if (active_hooks.tmp_array === null)\x0d\n    storeActiveHooks();\x0d\n  return [active_hooks.tmp_array\x2C active_hooks.tmp_fields];\x0d\n}\x0d\n\x0d\n\x0d\nfunction storeActiveHooks() {\x0d\n  active_hooks.tmp_array = ArrayPrototypeSlice(active_hooks.array);\x0d\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\x0d\n  // 4. So do this the long way.\x0d\n  active_hooks.tmp_fields = [];\x0d\n  copyHooks(active_hooks.tmp_fields\x2C async_hook_fields);\x0d\n}\x0d\n\x0d\nfunction copyHooks(destination\x2C source) {\x0d\n  destination[kInit] = source[kInit];\x0d\n  destination[kBefore] = source[kBefore];\x0d\n  destination[kAfter] = source[kAfter];\x0d\n  destination[kDestroy] = source[kDestroy];\x0d\n  destination[kPromiseResolve] = source[kPromiseResolve];\x0d\n}\x0d\n\x0d\n\x0d\n// Then restore the correct hooks array in case any hooks were added/removed\x0d\n// during hook callback execution.\x0d\nfunction restoreActiveHooks() {\x0d\n  active_hooks.array = active_hooks.tmp_array;\x0d\n  copyHooks(async_hook_fields\x2C active_hooks.tmp_fields);\x0d\n\x0d\n  active_hooks.tmp_array = null;\x0d\n  active_hooks.tmp_fields = null;\x0d\n}\x0d\n\x0d\nfunction trackPromise(promise\x2C parent) {\x0d\n  if (promise[async_id_symbol]) {\x0d\n    return;\x0d\n  }\x0d\n\x0d\n  // Get trigger id from parent async id before making the async id of the\x0d\n  // child so if a new one must be made it will be lower than the child.\x0d\n  const triggerAsyncId = parent ? getOrSetAsyncId(parent) :\x0d\n    getDefaultTriggerAsyncId();\x0d\n\x0d\n  promise[async_id_symbol] = newAsyncId();\x0d\n  promise[trigger_async_id_symbol] = triggerAsyncId;\x0d\n}\x0d\n\x0d\nfunction promiseInitHook(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerAsyncId = promise[trigger_async_id_symbol];\x0d\n  emitInitScript(asyncId\x2C 'PROMISE'\x2C triggerAsyncId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseInitHookWithDestroyTracking(promise\x2C parent) {\x0d\n  promiseInitHook(promise\x2C parent);\x0d\n  destroyTracking(promise\x2C parent);\x0d\n}\x0d\n\x0d\nfunction destroyTracking(promise\x2C parent) {\x0d\n  trackPromise(promise\x2C parent);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  registerDestroyHook(promise\x2C asyncId);\x0d\n}\x0d\n\x0d\nfunction promiseBeforeHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  const triggerId = promise[trigger_async_id_symbol];\x0d\n  emitBeforeScript(asyncId\x2C triggerId\x2C promise);\x0d\n}\x0d\n\x0d\nfunction promiseAfterHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  if (hasHooks(kAfter)) {\x0d\n    emitAfterNative(asyncId);\x0d\n  }\x0d\n  if (asyncId === executionAsyncId()) {\x0d\n    // This condition might not be true if async_hooks was enabled during\x0d\n    // the promise callback execution.\x0d\n    // Popping it off the stack can be skipped in that case\x2C because it is\x0d\n    // known that it would correspond to exactly one call with\x0d\n    // PromiseHookType::kBefore that was not witnessed by the PromiseHook.\x0d\n    popAsyncContext(asyncId);\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction promiseResolveHook(promise) {\x0d\n  trackPromise(promise);\x0d\n  const asyncId = promise[async_id_symbol];\x0d\n  emitPromiseResolveNative(asyncId);\x0d\n}\x0d\n\x0d\nlet wantPromiseHook = false;\x0d\nfunction enableHooks() {\x0d\n  async_hook_fields[kCheck] += 1;\x0d\n\x0d\n  setCallbackTrampoline(callbackTrampoline);\x0d\n}\x0d\n\x0d\nlet stopPromiseHook;\x0d\nfunction updatePromiseHookMode() {\x0d\n  wantPromiseHook = true;\x0d\n  let initHook;\x0d\n  if (initHooksExist()) {\x0d\n    initHook = destroyHooksExist() ? promiseInitHookWithDestroyTracking :\x0d\n      promiseInitHook;\x0d\n  } else if (destroyHooksExist()) {\x0d\n    initHook = destroyTracking;\x0d\n  }\x0d\n  if (stopPromiseHook) stopPromiseHook();\x0d\n  stopPromiseHook = promiseHooks.createHook({\x0d\n    init: initHook\x2C\x0d\n    before: promiseBeforeHook\x2C\x0d\n    after: promiseAfterHook\x2C\x0d\n    settled: promiseResolveHooksExist() ? promiseResolveHook : undefined\x0d\n  });\x0d\n}\x0d\n\x0d\nfunction disableHooks() {\x0d\n  async_hook_fields[kCheck] -= 1;\x0d\n\x0d\n  wantPromiseHook = false;\x0d\n\x0d\n  setCallbackTrampoline();\x0d\n\x0d\n  // Delay the call to `disablePromiseHook()` because we might currently be\x0d\n  // between the `before` and `after` calls of a Promise.\x0d\n  enqueueMicrotask(disablePromiseHookIfNecessary);\x0d\n}\x0d\n\x0d\nfunction disablePromiseHookIfNecessary() {\x0d\n  if (!wantPromiseHook && stopPromiseHook) {\x0d\n    stopPromiseHook();\x0d\n  }\x0d\n}\x0d\n\x0d\n// Internal Embedder API //\x0d\n\x0d\n// Increment the internal id counter and return the value. Important that the\x0d\n// counter increment first. Since it's done the same way in\x0d\n// Environment::new_async_uid()\x0d\nfunction newAsyncId() {\x0d\n  return ++async_id_fields[kAsyncIdCounter];\x0d\n}\x0d\n\x0d\nfunction getOrSetAsyncId(object) {\x0d\n  if (ObjectPrototypeHasOwnProperty(object\x2C async_id_symbol)) {\x0d\n    return object[async_id_symbol];\x0d\n  }\x0d\n\x0d\n  return object[async_id_symbol] = newAsyncId();\x0d\n}\x0d\n\x0d\n\x0d\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\x0d\n// the user to safeguard this call and make sure it's zero'd out when the\x0d\n// constructor is complete.\x0d\nfunction getDefaultTriggerAsyncId() {\x0d\n  const defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  // If defaultTriggerAsyncId isn't set\x2C use the executionAsyncId\x0d\n  if (defaultTriggerAsyncId < 0)\x0d\n    return async_id_fields[kExecutionAsyncId];\x0d\n  return defaultTriggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\nfunction clearDefaultTriggerAsyncId() {\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Sets a default top level trigger ID to be used\x0d\n *\x0d\n * @template {Array<unknown>} T\x0d\n * @template {unknown} R\x0d\n * @param {number} triggerAsyncId\x0d\n * @param { (...T: args) => R } block\x0d\n * @param  {T} args\x0d\n * @returns {R}\x0d\n */\x0d\nfunction defaultTriggerAsyncIdScope(triggerAsyncId\x2C block\x2C ...args) {\x0d\n  if (triggerAsyncId === undefined)\x0d\n    return block.apply(null\x2C args);\x0d\n  // CHECK(NumberIsSafeInteger(triggerAsyncId))\x0d\n  // CHECK(triggerAsyncId > 0)\x0d\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\x0d\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\x0d\n\x0d\n  try {\x0d\n    return block.apply(null\x2C args);\x0d\n  } finally {\x0d\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction hasHooks(key) {\x0d\n  return async_hook_fields[key] > 0;\x0d\n}\x0d\n\x0d\nfunction enabledHooksExist() {\x0d\n  return hasHooks(kCheck);\x0d\n}\x0d\n\x0d\nfunction initHooksExist() {\x0d\n  return hasHooks(kInit);\x0d\n}\x0d\n\x0d\nfunction afterHooksExist() {\x0d\n  return hasHooks(kAfter);\x0d\n}\x0d\n\x0d\nfunction destroyHooksExist() {\x0d\n  return hasHooks(kDestroy);\x0d\n}\x0d\n\x0d\nfunction promiseResolveHooksExist() {\x0d\n  return hasHooks(kPromiseResolve);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitInitScript(asyncId\x2C type\x2C triggerAsyncId\x2C resource) {\x0d\n  // Short circuit all checks for the common case. Which is that no hooks have\x0d\n  // been set. Do this to remove performance impact for embedders (and core).\x0d\n  if (!hasHooks(kInit))\x0d\n    return;\x0d\n\x0d\n  if (triggerAsyncId === null) {\x0d\n    triggerAsyncId = getDefaultTriggerAsyncId();\x0d\n  }\x0d\n\x0d\n  emitInitNative(asyncId\x2C type\x2C triggerAsyncId\x2C resource);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitBeforeScript(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource);\x0d\n\x0d\n  if (hasHooks(kBefore))\x0d\n    emitBeforeNative(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitAfterScript(asyncId) {\x0d\n  if (hasHooks(kAfter))\x0d\n    emitAfterNative(asyncId);\x0d\n\x0d\n  popAsyncContext(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction emitDestroyScript(asyncId) {\x0d\n  // Return early if there are no destroy callbacks\x2C or invalid asyncId.\x0d\n  if (!hasHooks(kDestroy) || asyncId <= 0)\x0d\n    return;\x0d\n  async_wrap.queueDestroyAsyncId(asyncId);\x0d\n}\x0d\n\x0d\n\x0d\nfunction hasAsyncIdStack() {\x0d\n  return hasHooks(kStackLength);\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native push_async_ids() call.\x0d\nfunction pushAsyncContext(asyncId\x2C triggerAsyncId\x2C resource) {\x0d\n  const offset = async_hook_fields[kStackLength];\x0d\n  execution_async_resources[offset] = resource;\x0d\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\x0d\n    return pushAsyncContext_(asyncId\x2C triggerAsyncId);\x0d\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\x0d\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\x0d\n  async_hook_fields[kStackLength]++;\x0d\n  async_id_fields[kExecutionAsyncId] = asyncId;\x0d\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\x0d\n}\x0d\n\x0d\n\x0d\n// This is the equivalent of the native pop_async_ids() call.\x0d\nfunction popAsyncContext(asyncId) {\x0d\n  const stackLength = async_hook_fields[kStackLength];\x0d\n  if (stackLength === 0) return false;\x0d\n\x0d\n  if (enabledHooksExist() && async_id_fields[kExecutionAsyncId] !== asyncId) {\x0d\n    // Do the same thing as the native code (i.e. crash hard).\x0d\n    return popAsyncContext_(asyncId);\x0d\n  }\x0d\n\x0d\n  const offset = stackLength - 1;\x0d\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\x0d\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\x0d\n  execution_async_resources.pop();\x0d\n  async_hook_fields[kStackLength] = offset;\x0d\n  return offset > 0;\x0d\n}\x0d\n\x0d\n\x0d\nfunction executionAsyncId() {\x0d\n  return async_id_fields[kExecutionAsyncId];\x0d\n}\x0d\n\x0d\nfunction triggerAsyncId() {\x0d\n  return async_id_fields[kTriggerAsyncId];\x0d\n}\x0d\n\x0d\n\x0d\nmodule.exports = {\x0d\n  executionAsyncId\x2C\x0d\n  triggerAsyncId\x2C\x0d\n  // Private API\x0d\n  getHookArrays\x2C\x0d\n  symbols: {\x0d\n    async_id_symbol\x2C trigger_async_id_symbol\x2C\x0d\n    init_symbol\x2C before_symbol\x2C after_symbol\x2C destroy_symbol\x2C\x0d\n    promise_resolve_symbol\x2C owner_symbol\x0d\n  }\x2C\x0d\n  constants: {\x0d\n    kInit\x2C kBefore\x2C kAfter\x2C kDestroy\x2C kTotals\x2C kPromiseResolve\x0d\n  }\x2C\x0d\n  enableHooks\x2C\x0d\n  disableHooks\x2C\x0d\n  updatePromiseHookMode\x2C\x0d\n  clearDefaultTriggerAsyncId\x2C\x0d\n  clearAsyncIdStack\x2C\x0d\n  hasAsyncIdStack\x2C\x0d\n  executionAsyncResource\x2C\x0d\n  // Internal Embedder API\x0d\n  newAsyncId\x2C\x0d\n  getOrSetAsyncId\x2C\x0d\n  getDefaultTriggerAsyncId\x2C\x0d\n  defaultTriggerAsyncIdScope\x2C\x0d\n  enabledHooksExist\x2C\x0d\n  initHooksExist\x2C\x0d\n  afterHooksExist\x2C\x0d\n  destroyHooksExist\x2C\x0d\n  emitInit: emitInitScript\x2C\x0d\n  emitBefore: emitBeforeScript\x2C\x0d\n  emitAfter: emitAfterScript\x2C\x0d\n  emitDestroy: emitDestroyScript\x2C\x0d\n  pushAsyncContext\x2C\x0d\n  popAsyncContext\x2C\x0d\n  registerDestroyHook\x2C\x0d\n  useDomainTrampoline\x2C\x0d\n  nativeHooks: {\x0d\n    init: emitInitNative\x2C\x0d\n    before: emitBeforeNative\x2C\x0d\n    after: emitAfterNative\x2C\x0d\n    destroy: emitDestroyNative\x2C\x0d\n    promise_resolve: emitPromiseResolveNative\x0d\n  }\x2C\x0d\n  asyncWrap: {\x0d\n    Providers: async_wrap.Providers\x2C\x0d\n  }\x0d\n};\x0d\n
code-source-info,0xd55be7593e,13,15667,15723,C0O15675C7O15691C12O15715C17O15722,,
code-creation,LazyCompile,10,1127139,0xd55be76dd6,19,handleProcessExit node:internal/modules/esm/handle_process_exit:6:27,0xb0b6e993f0,~
script-source,31,node:internal/modules/esm/handle_process_exit,'use strict';\x0d\n\x0d\n// Handle a Promise from running code that potentially does Top-Level Await.\x0d\n// In that case\x2C it makes sense to set the exit code to a specific non-zero\x0d\n// value if the main code never finishes running.\x0d\nfunction handleProcessExit() {\x0d\n  process.exitCode ??= 13;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  handleProcessExit\x2C\x0d\n};\x0d\n
code-source-info,0xd55be76dd6,31,249,284,C0O257C13O274C18O283,,
code-creation,LazyCompile,10,1127290,0xd55be76f66,46,beforeInspector node:internal/errors:752:18,0x39b87e81d8,~
code-source-info,0xd55be76f66,11,23235,23624,C0O23250C2O23267C4O23266C11O23335C15O23341C19O23453C21O23473C23O23472C27O23502C31O23465C41O23613C45O23619,,
code-creation,LazyCompile,10,1127479,0xd55be7721e,243,afterInspector node:internal/errors:766:17,0x39b87e8248,~
code-source-info,0xd55be7721e,11,23643,25068,C0O23686C5O23714C7O24204C10O24216C17O24225C22O24260C28O24260C33O24281C38O24282C43O24321C50O24339C55O24364C62O24339C70O24412C73O24321C79O24428C80O24435C86O24439C93O24452C101O24456C106O24476C108O24621C111O24621C115O24531C125O24589C130O24668C140O24703C145O24726C153O24727C161O24746C172O24779C177O24802C182O24803C194O24888C201O24906C207O24961C210O24977C215O24992C223O24961C232O24880C237O25012C240O25035C242O25056,,
code-creation,LazyCompile,10,1127820,0xd55be78236,32,lazyInternalUtilInspect node:internal/errors:182:33,0x39b87e7640,~
code-source-info,0xd55be78236,11,5370,5469,C0O5378C14O5402C21O5398C27O5439C31O5466,,
code-creation,LazyCompile,10,1128146,0xd55be78336,63,hasColors node:internal/tty:222:19,0x24a76c62088,~
code-source-info,0xd55be78336,157,6395,6660,C0O6413C18O6524C21O6542C27O6571C41O6571C46O6617C52O6638C56O6635C59O6630C62O6657,,
code-creation,LazyCompile,10,1128426,0xd55be79126,762,getColorDepth node:internal/tty:106:23,0x24a76c62038,~
code-source-info,0xd55be
code-creation,Eval,10,1129508,0xd55be79f06,5, node:os:1:1,0xd55be79b90,~
script-source,189,node:os,// Copyright Joyent\x2C Inc. and other Node contributors.\x0d\n//\x0d\n// Permission is hereby granted\x2C free of charge\x2C to any person obtaining a\x0d\n// copy of this software and associated documentation files (the\x0d\n// "Software")\x2C to deal in the Software without restriction\x2C including\x0d\n// without limitation the rights to use\x2C copy\x2C modify\x2C merge\x2C publish\x2C\x0d\n// distribute\x2C sublicense\x2C and/or sell copies of the Software\x2C and to permit\x0d\n// persons to whom the Software is furnished to do so\x2C subject to the\x0d\n// following conditions:\x0d\n//\x0d\n// The above copyright notice and this permission notice shall be included\x0d\n// in all copies or substantial portions of the Software.\x0d\n//\x0d\n// THE SOFTWARE IS PROVIDED "AS IS"\x2C WITHOUT WARRANTY OF ANY KIND\x2C EXPRESS\x0d\n// OR IMPLIED\x2C INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\x0d\n// MERCHANTABILITY\x2C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\x0d\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM\x2C\x0d\n// DAMAGES OR OTHER LIABILITY\x2C WHETHER IN AN ACTION OF CONTRACT\x2C TORT OR\x0d\n// OTHERWISE\x2C ARISING FROM\x2C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\x0d\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\x0d\n\x0d\n'use strict';\x0d\n\x0d\nconst {\x0d\n  ArrayPrototypePush\x2C\x0d\n  Float64Array\x2C\x0d\n  NumberParseInt\x2C\x0d\n  ObjectDefineProperties\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  SymbolToPrimitive\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst { safeGetenv } = internalBinding('credentials');\x0d\nconst constants = internalBinding('constants').os;\x0d\nconst isWindows = process.platform === 'win32';\x0d\n\x0d\nconst {\x0d\n  codes: {\x0d\n    ERR_SYSTEM_ERROR\x0d\n  }\x2C\x0d\n  hideStackFrames\x0d\n} = require('internal/errors');\x0d\nconst { validateInt32 } = require('internal/validators');\x0d\n\x0d\nconst {\x0d\n  getCPUs\x2C\x0d\n  getFreeMem\x2C\x0d\n  getHomeDirectory: _getHomeDirectory\x2C\x0d\n  getHostname: _getHostname\x2C\x0d\n  getInterfaceAddresses: _getInterfaceAddresses\x2C\x0d\n  getLoadAvg\x2C\x0d\n  getPriority: _getPriority\x2C\x0d\n  getOSInformation: _getOSInformation\x2C\x0d\n  getTotalMem\x2C\x0d\n  getUserInfo\x2C\x0d\n  getUptime: _getUptime\x2C\x0d\n  isBigEndian\x2C\x0d\n  setPriority: _setPriority\x0d\n} = internalBinding('os');\x0d\n\x0d\nfunction getCheckedFunction(fn) {\x0d\n  return hideStackFrames(function checkError(...args) {\x0d\n    const ctx = {};\x0d\n    const ret = fn(...args\x2C ctx);\x0d\n    if (ret === undefined) {\x0d\n      throw new ERR_SYSTEM_ERROR(ctx);\x0d\n    }\x0d\n    return ret;\x0d\n  });\x0d\n}\x0d\n\x0d\nconst {\x0d\n  0: type\x2C\x0d\n  1: version\x2C\x0d\n  2: release\x2C\x0d\n  3: machine\x2C\x0d\n} = _getOSInformation();\x0d\n\x0d\nconst getHomeDirectory = getCheckedFunction(_getHomeDirectory);\x0d\nconst getHostname = getCheckedFunction(_getHostname);\x0d\nconst getInterfaceAddresses = getCheckedFunction(_getInterfaceAddresses);\x0d\nconst getUptime = getCheckedFunction(_getUptime);\x0d\n\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nconst getOSRelease = () => release;\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nconst getOSType = () => type;\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nconst getOSVersion = () => version;\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nconst getMachine = () => machine;\x0d\n\x0d\ngetFreeMem[SymbolToPrimitive] = () => getFreeMem();\x0d\ngetHostname[SymbolToPrimitive] = () => getHostname();\x0d\ngetOSVersion[SymbolToPrimitive] = () => getOSVersion();\x0d\ngetOSType[SymbolToPrimitive] = () => getOSType();\x0d\ngetOSRelease[SymbolToPrimitive] = () => getOSRelease();\x0d\ngetMachine[SymbolToPrimitive] = () => getMachine();\x0d\ngetHomeDirectory[SymbolToPrimitive] = () => getHomeDirectory();\x0d\ngetTotalMem[SymbolToPrimitive] = () => getTotalMem();\x0d\ngetUptime[SymbolToPrimitive] = () => getUptime();\x0d\n\x0d\nconst kEndianness = isBigEndian ? 'BE' : 'LE';\x0d\n\x0d\nconst avgValues = new Float64Array(3);\x0d\n\x0d\n/**\x0d\n * @returns {[number\x2C number\x2C number]}\x0d\n */\x0d\nfunction loadavg() {\x0d\n  getLoadAvg(avgValues);\x0d\n  return [avgValues[0]\x2C avgValues[1]\x2C avgValues[2]];\x0d\n}\x0d\n\x0d\n/**\x0d\n * Returns an array of objects containing information about each\x0d\n * logical CPU core.\x0d\n *\x0d\n * @returns {Array<{\x0d\n *  model: string\x2C\x0d\n *  speed: number\x2C\x0d\n *  times: {\x0d\n *    user: number\x2C\x0d\n *    nice: number\x2C\x0d\n *    sys: number\x2C\x0d\n *    idle: number\x2C\x0d\n *    irq: number\x2C\x0d\n *  }\x2C\x0d\n * }>}\x0d\n */\x0d\nfunction cpus() {\x0d\n  // [] is a bugfix for a regression introduced in 51cea61\x0d\n  const data = getCPUs() || [];\x0d\n  const result = [];\x0d\n  let i = 0;\x0d\n  while (i < data.length) {\x0d\n    ArrayPrototypePush(result\x2C {\x0d\n      model: data[i++]\x2C\x0d\n      speed: data[i++]\x2C\x0d\n      times: {\x0d\n        user: data[i++]\x2C\x0d\n        nice: data[i++]\x2C\x0d\n        sys: data[i++]\x2C\x0d\n        idle: data[i++]\x2C\x0d\n        irq: data[i++]\x0d\n      }\x0d\n    });\x0d\n  }\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nfunction arch() {\x0d\n  return process.arch;\x0d\n}\x0d\narch[SymbolToPrimitive] = () => process.arch;\x0d\n\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nfunction platform() {\x0d\n  return process.platform;\x0d\n}\x0d\nplatform[SymbolToPrimitive] = () => process.platform;\x0d\n\x0d\n/**\x0d\n * @returns {string}\x0d\n */\x0d\nfunction tmpdir() {\x0d\n  let path;\x0d\n  if (isWindows) {\x0d\n    path = process.env.TEMP ||\x0d\n           process.env.TMP ||\x0d\n           (process.env.SystemRoot || process.env.windir) + '\\\\temp';\x0d\n    if (path.length > 1 && StringPrototypeEndsWith(path\x2C '\\\\') &&\x0d\n        !StringPrototypeEndsWith(path\x2C ':\\\\'))\x0d\n      path = StringPrototypeSlice(path\x2C 0\x2C -1);\x0d\n  } else {\x0d\n    path = safeGetenv('TMPDIR') ||\x0d\n           safeGetenv('TMP') ||\x0d\n           safeGetenv('TEMP') ||\x0d\n           '/tmp';\x0d\n    if (path.length > 1 && StringPrototypeEndsWith(path\x2C '/'))\x0d\n      path = StringPrototypeSlice(path\x2C 0\x2C -1);\x0d\n  }\x0d\n\x0d\n  return path;\x0d\n}\x0d\ntmpdir[SymbolToPrimitive] = () => tmpdir();\x0d\n\x0d\n/**\x0d\n * @returns {'BE' | 'LE'}\x0d\n */\x0d\nfunction endianness() {\x0d\n  return kEndianness;\x0d\n}\x0d\nendianness[SymbolToPrimitive] = () => kEndianness;\x0d\n\x0d\n// Returns the number of ones in the binary representation of the decimal\x0d\n// number.\x0d\nfunction countBinaryOnes(n) {\x0d\n  // Count the number of bits set in parallel\x2C which is faster than looping\x0d\n  n = n - ((n >>> 1) & 0x55555555);\x0d\n  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);\x0d\n  return ((n + (n >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\x0d\n}\x0d\n\x0d\nfunction getCIDR(address\x2C netmask\x2C family) {\x0d\n  let ones = 0;\x0d\n  let split = '.';\x0d\n  let range = 10;\x0d\n  let groupLength = 8;\x0d\n  let hasZeros = false;\x0d\n\x0d\n  if (family === 'IPv6') {\x0d\n    split = ':';\x0d\n    range = 16;\x0d\n    groupLength = 16;\x0d\n  }\x0d\n\x0d\n  const parts = StringPrototypeSplit(netmask\x2C split);\x0d\n  for (let i = 0; i < parts.length; i++) {\x0d\n    if (parts[i] !== '') {\x0d\n      const binary = NumberParseInt(parts[i]\x2C range);\x0d\n      const tmp = countBinaryOnes(binary);\x0d\n      ones += tmp;\x0d\n      if (hasZeros) {\x0d\n        if (tmp !== 0) {\x0d\n          return null;\x0d\n        }\x0d\n      } else if (tmp !== groupLength) {\x0d\n        if ((binary & 1) !== 0) {\x0d\n          return null;\x0d\n        }\x0d\n        hasZeros = true;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return `${address}/${ones}`;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @returns {Record<string\x2C Array<{\x0d\n *  address: string\x2C\x0d\n *  netmask: string\x2C\x0d\n *  family: 'IPv4' | 'IPv6'\x2C\x0d\n *  mac: string\x2C\x0d\n *  internal: boolean\x2C\x0d\n *  scopeid: number\x2C\x0d\n *  cidr: string | null\x2C\x0d\n * }>>}\x0d\n */\x0d\nfunction networkInterfaces() {\x0d\n  const data = getInterfaceAddresses();\x0d\n  const result = {};\x0d\n\x0d\n  if (data === undefined)\x0d\n    return result;\x0d\n  for (let i = 0; i < data.length; i += 7) {\x0d\n    const name = data[i];\x0d\n    const entry = {\x0d\n      address: data[i + 1]\x2C\x0d\n      netmask: data[i + 2]\x2C\x0d\n      family: data[i + 3]\x2C\x0d\n      mac: data[i + 4]\x2C\x0d\n      internal: data[i + 5]\x2C\x0d\n      cidr: getCIDR(data[i + 1]\x2C data[i + 2]\x2C data[i + 3])\x0d\n    };\x0d\n    const scopeid = data[i + 6];\x0d\n    if (scopeid !== -1)\x0d\n      entry.scopeid = scopeid;\x0d\n\x0d\n    const existing = result[name];\x0d\n    if (existing !== undefined)\x0d\n      ArrayPrototypePush(existing\x2C entry);\x0d\n    else\x0d\n      result[name] = [entry];\x0d\n  }\x0d\n\x0d\n  return result;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {number} [pid=0]\x0d\n * @param {number} priority\x0d\n * @returns {void}\x0d\n */\x0d\nfunction setPriority(pid\x2C priority) {\x0d\n  if (priority === undefined) {\x0d\n    priority = pid;\x0d\n    pid = 0;\x0d\n  }\x0d\n\x0d\n  validateInt32(pid\x2C 'pid');\x0d\n  validateInt32(priority\x2C 'priority'\x2C -20\x2C 19);\x0d\n\x0d\n  const ctx = {};\x0d\n\x0d\n  if (_setPriority(pid\x2C priority\x2C ctx) !== 0)\x0d\n    throw new ERR_SYSTEM_ERROR(ctx);\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {number} [pid=0]\x0d\n * @returns {number}\x0d\n */\x0d\nfunction getPriority(pid) {\x0d\n  if (pid === undefined)\x0d\n    pid = 0;\x0d\n  else\x0d\n    validateInt32(pid\x2C 'pid');\x0d\n\x0d\n  const ctx = {};\x0d\n  const priority = _getPriority(pid\x2C ctx);\x0d\n\x0d\n  if (priority === undefined)\x0d\n    throw new ERR_SYSTEM_ERROR(ctx);\x0d\n\x0d\n  return priority;\x0d\n}\x0d\n\x0d\n/**\x0d\n * @param {{ encoding?: string }} [options=utf8] If `encoding` is set to\x0d\n * `'buffer'`\x2C the `username`\x2C `shell`\x2C and `homedir` values will\x0d\n * be `Buffer` instances.\x0d\n * @returns {{\x0d\n *   uid: number\x2C\x0d\n *   gid: number\x2C\x0d\n *   username: string\x2C\x0d\n *   homedir: string\x2C\x0d\n *   shell: string | null\x2C\x0d\n * }}\x0d\n */\x0d\nfunction userInfo(options) {\x0d\n  if (typeof options !== 'object')\x0d\n    options = null;\x0d\n\x0d\n  const ctx = {};\x0d\n  const user = getUserInfo(options\x2C ctx);\x0d\n\x0d\n  if (user === undefined)\x0d\n    throw new ERR_SYSTEM_ERROR(ctx);\x0d\n\x0d\n  return user;\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  arch\x2C\x0d\n  cpus\x2C\x0d\n  endianness\x2C\x0d\n  freemem: getFreeMem\x2C\x0d\n  getPriority\x2C\x0d\n  homedir: getHomeDirectory\x2C\x0d\n  hostname: getHostname\x2C\x0d\n  loadavg\x2C\x0d\n  networkInterfaces\x2C\x0d\n  platform\x2C\x0d\n  release: getOSRelease\x2C\x0d\n  setPriority\x2C\x0d\n  tmpdir\x2C\x0d\n  totalmem: getTotalMem\x2C\x0d\n  type: getOSType\x2C\x0d\n  userInfo\x2C\x0d\n  uptime: getUptime\x2C\x0d\n  version: getOSVersion\x2C\x0d\n  machine: getMachine\x2C\x0d\n};\x0d\n\x0d\nObjectDefineProperties(module.exports\x2C {\x0d\n  constants: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: false\x2C\x0d\n    enumerable: true\x2C\x0d\n    value: constants\x0d\n  }\x2C\x0d\n\x0d\n  EOL: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    writable: false\x2C\x0d\n    value: isWindows ? '\\r\\n' : '\\n'\x0d\n  }\x2C\x0d\n\x0d\n  devNull: {\x0d\n    __proto__: null\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: true\x2C\x0d\n    writable: false\x2C\x0d\n    value: isWindows ? '\\\\\\\\.\\\\nul' : '/dev/null'\x0d\n  }\x0d\n});\x0d\n
code-source-info,0xd55be79f06,189,0,9766,C0O0C4O9766,,
code-creation,Function,10,1130358,0xd55be7b1c6,868, node:os:1:1,0xd55be79e80,~
code-source-info,0xd55be7b1c
code-creation,LazyCompile,10,1130858,0xd55be7c8b6,26,getCheckedFunction node:os:63:28,0xd55be79f38,~
code-source-info,0xd55be7c8b6,189,2109,2332,C0O2109C9O2119C21O2126C25O2329,,
code-creation,LazyCompile,10,1131093,0xd55be7d9ae,5,getOSRelease node:os:89:22,0xd55be7a370,~
code-source-info,0xd55be7d9ae,189,2731,2744,C0O2737C4O2744,,
code-creation,LazyCompile,10,1131381,0xd55be7da6e,5,get node:internal/util/inspect:371:6,0x2392d65298,~
script-source,20,node:internal/util/inspect,'use strict';\x0d\n\x0d\nconst {\x0d\n  Array\x2C\x0d\n  ArrayIsArray\x2C\x0d\n  ArrayPrototypeFilter\x2C\x0d\n  ArrayPrototypeForEach\x2C\x0d\n  ArrayPrototypeIncludes\x2C\x0d\n  ArrayPrototypeIndexOf\x2C\x0d\n  ArrayPrototypeJoin\x2C\x0d\n  ArrayPrototypeMap\x2C\x0d\n  ArrayPrototypePop\x2C\x0d\n  ArrayPrototypePush\x2C\x0d\n  ArrayPrototypePushApply\x2C\x0d\n  ArrayPrototypeSlice\x2C\x0d\n  ArrayPrototypeSplice\x2C\x0d\n  ArrayPrototypeSort\x2C\x0d\n  ArrayPrototypeUnshift\x2C\x0d\n  BigIntPrototypeValueOf\x2C\x0d\n  BooleanPrototypeValueOf\x2C\x0d\n  DatePrototypeGetTime\x2C\x0d\n  DatePrototypeToISOString\x2C\x0d\n  DatePrototypeToString\x2C\x0d\n  ErrorPrototypeToString\x2C\x0d\n  FunctionPrototypeBind\x2C\x0d\n  FunctionPrototypeCall\x2C\x0d\n  FunctionPrototypeToString\x2C\x0d\n  JSONStringify\x2C\x0d\n  MapPrototypeGetSize\x2C\x0d\n  MapPrototypeEntries\x2C\x0d\n  MathFloor\x2C\x0d\n  MathMax\x2C\x0d\n  MathMin\x2C\x0d\n  MathRound\x2C\x0d\n  MathSqrt\x2C\x0d\n  MathTrunc\x2C\x0d\n  Number\x2C\x0d\n  NumberIsFinite\x2C\x0d\n  NumberIsNaN\x2C\x0d\n  NumberParseFloat\x2C\x0d\n  NumberParseInt\x2C\x0d\n  NumberPrototypeToString\x2C\x0d\n  NumberPrototypeValueOf\x2C\x0d\n  Object\x2C\x0d\n  ObjectAssign\x2C\x0d\n  ObjectCreate\x2C\x0d\n  ObjectDefineProperty\x2C\x0d\n  ObjectGetOwnPropertyDescriptor\x2C\x0d\n  ObjectGetOwnPropertyNames\x2C\x0d\n  ObjectGetOwnPropertySymbols\x2C\x0d\n  ObjectGetPrototypeOf\x2C\x0d\n  ObjectIs\x2C\x0d\n  ObjectKeys\x2C\x0d\n  ObjectPrototypeHasOwnProperty\x2C\x0d\n  ObjectPrototypePropertyIsEnumerable\x2C\x0d\n  ObjectSeal\x2C\x0d\n  ObjectSetPrototypeOf\x2C\x0d\n  ReflectApply\x2C\x0d\n  ReflectOwnKeys\x2C\x0d\n  RegExp\x2C\x0d\n  RegExpPrototypeExec\x2C\x0d\n  RegExpPrototypeSymbolReplace\x2C\x0d\n  RegExpPrototypeSymbolSplit\x2C\x0d\n  RegExpPrototypeToString\x2C\x0d\n  SafeStringIterator\x2C\x0d\n  SafeMap\x2C\x0d\n  SafeSet\x2C\x0d\n  SetPrototypeGetSize\x2C\x0d\n  SetPrototypeValues\x2C\x0d\n  String\x2C\x0d\n  StringPrototypeCharCodeAt\x2C\x0d\n  StringPrototypeCodePointAt\x2C\x0d\n  StringPrototypeIncludes\x2C\x0d\n  StringPrototypeIndexOf\x2C\x0d\n  StringPrototypeLastIndexOf\x2C\x0d\n  StringPrototypeNormalize\x2C\x0d\n  StringPrototypePadEnd\x2C\x0d\n  StringPrototypePadStart\x2C\x0d\n  StringPrototypeRepeat\x2C\x0d\n  StringPrototypeReplaceAll\x2C\x0d\n  StringPrototypeSlice\x2C\x0d\n  StringPrototypeSplit\x2C\x0d\n  StringPrototypeEndsWith\x2C\x0d\n  StringPrototypeStartsWith\x2C\x0d\n  StringPrototypeToLowerCase\x2C\x0d\n  StringPrototypeTrim\x2C\x0d\n  StringPrototypeValueOf\x2C\x0d\n  SymbolPrototypeToString\x2C\x0d\n  SymbolPrototypeValueOf\x2C\x0d\n  SymbolIterator\x2C\x0d\n  SymbolToStringTag\x2C\x0d\n  TypedArrayPrototypeGetLength\x2C\x0d\n  TypedArrayPrototypeGetSymbolToStringTag\x2C\x0d\n  Uint8Array\x2C\x0d\n  globalThis\x2C\x0d\n  uncurryThis\x2C\x0d\n} = primordials;\x0d\n\x0d\nconst {\x0d\n  getOwnNonIndexProperties\x2C\x0d\n  getPromiseDetails\x2C\x0d\n  getProxyDetails\x2C\x0d\n  kPending\x2C\x0d\n  kRejected\x2C\x0d\n  previewEntries\x2C\x0d\n  getConstructorName: internalGetConstructorName\x2C\x0d\n  getExternalValue\x2C\x0d\n  propertyFilter: {\x0d\n    ALL_PROPERTIES\x2C\x0d\n    ONLY_ENUMERABLE\x0d\n  }\x0d\n} = internalBinding('util');\x0d\n\x0d\nconst {\x0d\n  customInspectSymbol\x2C\x0d\n  isError\x2C\x0d\n  join\x2C\x0d\n  removeColors\x0d\n} = require('internal/util');\x0d\n\x0d\nconst {\x0d\n  isStackOverflowError\x0d\n} = require('internal/errors');\x0d\n\x0d\nconst {\x0d\n  isAsyncFunction\x2C\x0d\n  isGeneratorFunction\x2C\x0d\n  isAnyArrayBuffer\x2C\x0d\n  isArrayBuffer\x2C\x0d\n  isArgumentsObject\x2C\x0d\n  isBoxedPrimitive\x2C\x0d\n  isDataView\x2C\x0d\n  isExternal\x2C\x0d\n  isMap\x2C\x0d\n  isMapIterator\x2C\x0d\n  isModuleNamespaceObject\x2C\x0d\n  isNativeError\x2C\x0d\n  isPromise\x2C\x0d\n  isSet\x2C\x0d\n  isSetIterator\x2C\x0d\n  isWeakMap\x2C\x0d\n  isWeakSet\x2C\x0d\n  isRegExp\x2C\x0d\n  isDate\x2C\x0d\n  isTypedArray\x2C\x0d\n  isStringObject\x2C\x0d\n  isNumberObject\x2C\x0d\n  isBooleanObject\x2C\x0d\n  isBigIntObject\x2C\x0d\n} = require('internal/util/types');\x0d\n\x0d\nconst assert = require('internal/assert');\x0d\n\x0d\nconst { BuiltinModule } = require('internal/bootstrap/loaders');\x0d\nconst {\x0d\n  validateObject\x2C\x0d\n  validateString\x2C\x0d\n} = require('internal/validators');\x0d\n\x0d\nlet hexSlice;\x0d\nlet internalUrl;\x0d\n\x0d\nfunction pathToFileUrlHref(filepath) {\x0d\n  internalUrl ??= require('internal/url');\x0d\n  return internalUrl.pathToFileURL(filepath).href;\x0d\n}\x0d\n\x0d\nconst builtInObjects = new SafeSet(\x0d\n  ArrayPrototypeFilter(\x0d\n    ObjectGetOwnPropertyNames(globalThis)\x2C\x0d\n    (e) => RegExpPrototypeExec(/^[A-Z][a-zA-Z0-9]+$/\x2C e) !== null\x0d\n  )\x0d\n);\x0d\n\x0d\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\x0d\nconst isUndetectableObject = (v) => typeof v === 'undefined' && v !== undefined;\x0d\n\x0d\n// These options must stay in sync with `getUserOptions`. So if any option will\x0d\n// be added or removed\x2C `getUserOptions` must also be updated accordingly.\x0d\nconst inspectDefaultOptions = ObjectSeal({\x0d\n  showHidden: false\x2C\x0d\n  depth: 2\x2C\x0d\n  colors: false\x2C\x0d\n  customInspect: true\x2C\x0d\n  showProxy: false\x2C\x0d\n  maxArrayLength: 100\x2C\x0d\n  maxStringLength: 10000\x2C\x0d\n  breakLength: 80\x2C\x0d\n  compact: 3\x2C\x0d\n  sorted: false\x2C\x0d\n  getters: false\x2C\x0d\n  numericSeparator: false\x2C\x0d\n});\x0d\n\x0d\nconst kObjectType = 0;\x0d\nconst kArrayType = 1;\x0d\nconst kArrayExtrasType = 2;\x0d\n\x0d\n/* eslint-disable no-control-regex */\x0d\nconst strEscapeSequencesRegExp = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\x0d\nconst strEscapeSequencesReplacer = /[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\x0d\nconst strEscapeSequencesRegExpSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/;\x0d\nconst strEscapeSequencesReplacerSingle = /[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]/g;\x0d\n/* eslint-enable no-control-regex */\x0d\n\x0d\nconst keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;\x0d\nconst numberRegExp = /^(0|[1-9][0-9]*)$/;\x0d\n\x0d\nconst coreModuleRegExp = /^ {4}at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$/;\x0d\nconst nodeModulesRegExp = /[/\\\\]node_modules[/\\\\](.+?)(?=[/\\\\])/g;\x0d\n\x0d\nconst classRegExp = /^(\\s+[^(]*?)\\s*{/;\x0d\n// eslint-disable-next-line node-core/no-unescaped-regexp-dot\x0d\nconst stripCommentsRegExp = /(\\/\\/.*?\\n)|(\\/\\*(.|\\n)*?\\*\\/)/g;\x0d\n\x0d\nconst kMinLineLength = 16;\x0d\n\x0d\n// Constants to map the iterator state.\x0d\nconst kWeak = 0;\x0d\nconst kIterator = 1;\x0d\nconst kMapEntries = 2;\x0d\n\x0d\n// Escaped control characters (plus the single quote and the backslash). Use\x0d\n// empty strings to fill up unused entries.\x0d\nconst meta = [\x0d\n  '\\\\x00'\x2C '\\\\x01'\x2C '\\\\x02'\x2C '\\\\x03'\x2C '\\\\x04'\x2C '\\\\x05'\x2C '\\\\x06'\x2C '\\\\x07'\x2C // x07\x0d\n  '\\\\b'\x2C '\\\\t'\x2C '\\\\n'\x2C '\\\\x0B'\x2C '\\\\f'\x2C '\\\\r'\x2C '\\\\x0E'\x2C '\\\\x0F'\x2C           // x0F\x0d\n  '\\\\x10'\x2C '\\\\x11'\x2C '\\\\x12'\x2C '\\\\x13'\x2C '\\\\x14'\x2C '\\\\x15'\x2C '\\\\x16'\x2C '\\\\x17'\x2C // x17\x0d\n  '\\\\x18'\x2C '\\\\x19'\x2C '\\\\x1A'\x2C '\\\\x1B'\x2C '\\\\x1C'\x2C '\\\\x1D'\x2C '\\\\x1E'\x2C '\\\\x1F'\x2C // x1F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C "\\\\'"\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C      // x2F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C         // x3F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C         // x4F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C '\\\\\\\\'\x2C ''\x2C ''\x2C ''\x2C     // x5F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C         // x6F\x0d\n  ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C ''\x2C '\\\\x7F'\x2C    // x7F\x0d\n  '\\\\x80'\x2C '\\\\x81'\x2C '\\\\x82'\x2C '\\\\x83'\x2C '\\\\x84'\x2C '\\\\x85'\x2C '\\\\x86'\x2C '\\\\x87'\x2C // x87\x0d\n  '\\\\x88'\x2C '\\\\x89'\x2C '\\\\x8A'\x2C '\\\\x8B'\x2C '\\\\x8C'\x2C '\\\\x8D'\x2C '\\\\x8E'\x2C '\\\\x8F'\x2C // x8F\x0d\n  '\\\\x90'\x2C '\\\\x91'\x2C '\\\\x92'\x2C '\\\\x93'\x2C '\\\\x94'\x2C '\\\\x95'\x2C '\\\\x96'\x2C '\\\\x97'\x2C // x97\x0d\n  '\\\\x98'\x2C '\\\\x99'\x2C '\\\\x9A'\x2C '\\\\x9B'\x2C '\\\\x9C'\x2C '\\\\x9D'\x2C '\\\\x9E'\x2C '\\\\x9F'\x2C // x9F\x0d\n];\x0d\n\x0d\n// Regex used for ansi escape code splitting\x0d\n// Adopted from https://github.com/chalk/ansi-regex/blob/HEAD/index.js\x0d\n// License: MIT\x2C authors: @sindresorhus\x2C Qix-\x2C arjunmehta and LitoMore\x0d\n// Matches all ansi escape code sequences in a string\x0d\nconst ansiPattern = '[\\\\u001B\\\\u009B][[\\\\]()#;?]*' +\x0d\n  '(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*' +\x0d\n  '|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)' +\x0d\n  '|(?:(?:\\\\d{1\x2C4}(?:;\\\\d{0\x2C4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))';\x0d\nconst ansi = new RegExp(ansiPattern\x2C 'g');\x0d\n\x0d\nlet getStringWidth;\x0d\n\x0d\nfunction getUserOptions(ctx\x2C isCrossContext) {\x0d\n  const ret = {\x0d\n    stylize: ctx.stylize\x2C\x0d\n    showHidden: ctx.showHidden\x2C\x0d\n    depth: ctx.depth\x2C\x0d\n    colors: ctx.colors\x2C\x0d\n    customInspect: ctx.customInspect\x2C\x0d\n    showProxy: ctx.showProxy\x2C\x0d\n    maxArrayLength: ctx.maxArrayLength\x2C\x0d\n    maxStringLength: ctx.maxStringLength\x2C\x0d\n    breakLength: ctx.breakLength\x2C\x0d\n    compact: ctx.compact\x2C\x0d\n    sorted: ctx.sorted\x2C\x0d\n    getters: ctx.getters\x2C\x0d\n    numericSeparator: ctx.numericSeparator\x2C\x0d\n    ...ctx.userOptions\x0d\n  };\x0d\n\x0d\n  // Typically\x2C the target value will be an instance of `Object`. If that is\x0d\n  // *not* the case\x2C the object may come from another vm.Context\x2C and we want\x0d\n  // to avoid passing it objects from this Context in that case\x2C so we remove\x0d\n  // the prototype from the returned object itself + the `stylize()` function\x2C\x0d\n  // and remove all other non-primitives\x2C including non-primitive user options.\x0d\n  if (isCrossContext) {\x0d\n    ObjectSetPrototypeOf(ret\x2C null);\x0d\n    for (const key of ObjectKeys(ret)) {\x0d\n      if ((typeof ret[key] === 'object' || typeof ret[key] === 'function') &&\x0d\n          ret[key] !== null) {\x0d\n        delete ret[key];\x0d\n      }\x0d\n    }\x0d\n    ret.stylize = ObjectSetPrototypeOf((value\x2C flavour) => {\x0d\n      let stylized;\x0d\n      try {\x0d\n        stylized = `${ctx.stylize(value\x2C flavour)}`;\x0d\n      } catch {\x0d\n        // Continue regardless of error.\x0d\n      }\x0d\n\x0d\n      if (typeof stylized !== 'string') return value;\x0d\n      // `stylized` is a string as it should be\x2C which is safe to pass along.\x0d\n      return stylized;\x0d\n    }\x2C null);\x0d\n  }\x0d\n\x0d\n  return ret;\x0d\n}\x0d\n\x0d\n/**\x0d\n * Echos the value of any input. Tries to print the value out\x0d\n * in the best way possible given the different types.\x0d\n *\x0d\n * @param {any} value The value to print out.\x0d\n * @param {object} opts Optional options object that alters the output.\x0d\n */\x0d\n/* Legacy: value\x2C showHidden\x2C depth\x2C colors */\x0d\nfunction inspect(value\x2C opts) {\x0d\n  // Default options\x0d\n  const ctx = {\x0d\n    budget: {}\x2C\x0d\n    indentationLvl: 0\x2C\x0d\n    seen: []\x2C\x0d\n    currentDepth: 0\x2C\x0d\n    stylize: stylizeNoColor\x2C\x0d\n    showHidden: inspectDefaultOptions.showHidden\x2C\x0d\n    depth: inspectDefaultOptions.depth\x2C\x0d\n    colors: inspectDefaultOptions.colors\x2C\x0d\n    customInspect: inspectDefaultOptions.customInspect\x2C\x0d\n    showProxy: inspectDefaultOptions.showProxy\x2C\x0d\n    maxArrayLength: inspectDefaultOptions.maxArrayLength\x2C\x0d\n    maxStringLength: inspectDefaultOptions.maxStringLength\x2C\x0d\n    breakLength: inspectDefaultOptions.breakLength\x2C\x0d\n    compact: inspectDefaultOptions.compact\x2C\x0d\n    sorted: inspectDefaultOptions.sorted\x2C\x0d\n    getters: inspectDefaultOptions.getters\x2C\x0d\n    numericSeparator: inspectDefaultOptions.numericSeparator\x2C\x0d\n  };\x0d\n  if (arguments.length > 1) {\x0d\n    // Legacy...\x0d\n    if (arguments.length > 2) {\x0d\n      if (arguments[2] !== undefined) {\x0d\n        ctx.depth = arguments[2];\x0d\n      }\x0d\n      if (arguments.length > 3 && arguments[3] !== undefined) {\x0d\n        ctx.colors = arguments[3];\x0d\n      }\x0d\n    }\x0d\n    // Set user-specified options\x0d\n    if (typeof opts === 'boolean') {\x0d\n      ctx.showHidden = opts;\x0d\n    } else if (opts) {\x0d\n      const optKeys = ObjectKeys(opts);\x0d\n      for (let i = 0; i < optKeys.length; ++i) {\x0d\n        const key = optKeys[i];\x0d\n        // TODO(BridgeAR): Find a solution what to do about stylize. Either make\x0d\n        // this function public or add a new API with a similar or better\x0d\n        // functionality.\x0d\n        if (\x0d\n          ObjectPrototypeHasOwnProperty(inspectDefaultOptions\x2C key) ||\x0d\n          key === 'stylize') {\x0d\n          ctx[key] = opts[key];\x0d\n        } else if (ctx.userOptions === undefined) {\x0d\n          // This is required to pass through the actual user input.\x0d\n          ctx.userOptions = opts;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\x0d\n  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;\x0d\n  if (ctx.maxStringLength === null) ctx.maxStringLength = Infinity;\x0d\n  return formatValue(ctx\x2C value\x2C 0);\x0d\n}\x0d\ninspect.custom = customInspectSymbol;\x0d\n\x0d\nObjectDefineProperty(inspect\x2C 'defaultOptions'\x2C {\x0d\n  __proto__: null\x2C\x0d\n  get() {\x0d\n    return inspectDefaultOptions;\x0d\n  }\x2C\x0d\n  set(options) {\x0d\n    validateObject(options\x2C 'options');\x0d\n    return ObjectAssign(inspectDefaultOptions\x2C options);\x0d\n  }\x0d\n});\x0d\n\x0d\n// Set Graphics Rendition https://en.wikipedia.org/wiki/ANSI_escape_code#graphics\x0d\n// Each color consists of an array with the color code as first entry and the\x0d\n// reset code as second entry.\x0d\nconst defaultFG = 39;\x0d\nconst defaultBG = 49;\x0d\ninspect.colors = {\x0d\n  __proto__: null\x2C\x0d\n  reset: [0\x2C 0]\x2C\x0d\n  bold: [1\x2C 22]\x2C\x0d\n  dim: [2\x2C 22]\x2C // Alias: faint\x0d\n  italic: [3\x2C 23]\x2C\x0d\n  underline: [4\x2C 24]\x2C\x0d\n  blink: [5\x2C 25]\x2C\x0d\n  // Swap foreground and background colors\x0d\n  inverse: [7\x2C 27]\x2C // Alias: swapcolors\x2C swapColors\x0d\n  hidden: [8\x2C 28]\x2C // Alias: conceal\x0d\n  strikethrough: [9\x2C 29]\x2C // Alias: strikeThrough\x2C crossedout\x2C crossedOut\x0d\n  doubleunderline: [21\x2C 24]\x2C // Alias: doubleUnderline\x0d\n  black: [30\x2C defaultFG]\x2C\x0d\n  red: [31\x2C defaultFG]\x2C\x0d\n  green: [32\x2C defaultFG]\x2C\x0d\n  yellow: [33\x2C defaultFG]\x2C\x0d\n  blue: [34\x2C defaultFG]\x2C\x0d\n  magenta: [35\x2C defaultFG]\x2C\x0d\n  cyan: [36\x2C defaultFG]\x2C\x0d\n  white: [37\x2C defaultFG]\x2C\x0d\n  bgBlack: [40\x2C defaultBG]\x2C\x0d\n  bgRed: [41\x2C defaultBG]\x2C\x0d\n  bgGreen: [42\x2C defaultBG]\x2C\x0d\n  bgYellow: [43\x2C defaultBG]\x2C\x0d\n  bgBlue: [44\x2C defaultBG]\x2C\x0d\n  bgMagenta: [45\x2C defaultBG]\x2C\x0d\n  bgCyan: [46\x2C defaultBG]\x2C\x0d\n  bgWhite: [47\x2C defaultBG]\x2C\x0d\n  framed: [51\x2C 54]\x2C\x0d\n  overlined: [53\x2C 55]\x2C\x0d\n  gray: [90\x2C defaultFG]\x2C // Alias: grey\x2C blackBright\x0d\n  redBright: [91\x2C defaultFG]\x2C\x0d\n  greenBright: [92\x2C defaultFG]\x2C\x0d\n  yellowBright: [93\x2C defaultFG]\x2C\x0d\n  blueBright: [94\x2C defaultFG]\x2C\x0d\n  magentaBright: [95\x2C defaultFG]\x2C\x0d\n  cyanBright: [96\x2C defaultFG]\x2C\x0d\n  whiteBright: [97\x2C defaultFG]\x2C\x0d\n  bgGray: [100\x2C defaultBG]\x2C // Alias: bgGrey\x2C bgBlackBright\x0d\n  bgRedBright: [101\x2C defaultBG]\x2C\x0d\n  bgGreenBright: [102\x2C defaultBG]\x2C\x0d\n  bgYellowBright: [103\x2C defaultBG]\x2C\x0d\n  bgBlueBright: [104\x2C defaultBG]\x2C\x0d\n  bgMagentaBright: [105\x2C defaultBG]\x2C\x0d\n  bgCyanBright: [106\x2C defaultBG]\x2C\x0d\n  bgWhiteBright: [107\x2C defaultBG]\x2C\x0d\n};\x0d\n\x0d\nfunction defineColorAlias(target\x2C alias) {\x0d\n  ObjectDefineProperty(inspect.colors\x2C alias\x2C {\x0d\n    __proto__: null\x2C\x0d\n    get() {\x0d\n      return this[target];\x0d\n    }\x2C\x0d\n    set(value) {\x0d\n      this[target] = value;\x0d\n    }\x2C\x0d\n    configurable: true\x2C\x0d\n    enumerable: false\x0d\n  });\x0d\n}\x0d\n\x0d\ndefineColorAlias('gray'\x2C 'grey');\x0d\ndefineColorAlias('gray'\x2C 'blackBright');\x0d\ndefineColorAlias('bgGray'\x2C 'bgGrey');\x0d\ndefineColorAlias('bgGray'\x2C 'bgBlackBright');\x0d\ndefineColorAlias('dim'\x2C 'faint');\x0d\ndefineColorAlias('strikethrough'\x2C 'crossedout');\x0d\ndefineColorAlias('strikethrough'\x2C 'strikeThrough');\x0d\ndefineColorAlias('strikethrough'\x2C 'crossedOut');\x0d\ndefineColorAlias('hidden'\x2C 'conceal');\x0d\ndefineColorAlias('inverse'\x2C 'swapColors');\x0d\ndefineColorAlias('inverse'\x2C 'swapcolors');\x0d\ndefineColorAlias('doubleunderline'\x2C 'doubleUnderline');\x0d\n\x0d\n// TODO(BridgeAR): Add function style support for more complex styles.\x0d\n// Don't use 'blue' not visible on cmd.exe\x0d\ninspect.styles = ObjectAssign(ObjectCreate(null)\x2C {\x0d\n  special: 'cyan'\x2C\x0d\n  number: 'yellow'\x2C\x0d\n  bigint: 'yellow'\x2C\x0d\n  boolean: 'yellow'\x2C\x0d\n  undefined: 'grey'\x2C\x0d\n  null: 'bold'\x2C\x0d\n  string: 'green'\x2C\x0d\n  symbol: 'green'\x2C\x0d\n  date: 'magenta'\x2C\x0d\n  // "name": intentionally not styling\x0d\n  // TODO(BridgeAR): Highlight regular expressions properly.\x0d\n  regexp: 'red'\x2C\x0d\n  module: 'underline'\x0d\n});\x0d\n\x0d\nfunction addQuotes(str\x2C quotes) {\x0d\n  if (quotes === -1) {\x0d\n    return `"${str}"`;\x0d\n  }\x0d\n  if (quotes === -2) {\x0d\n    return `\\`${str}\\``;\x0d\n  }\x0d\n  return `'${str}'`;\x0d\n}\x0d\n\x0d\nfunction escapeFn(str) {\x0d\n  const charCode = StringPrototypeCharCodeAt(str);\x0d\n  return meta.length > charCode ? meta[charCode] : `\\\\u${NumberPrototypeToString(charCode\x2C 16)}`;\x0d\n}\x0d\n\x0d\n// Escape control characters\x2C single quotes and the backslash.\x0d\n// This is similar to JSON stringify escaping.\x0d\nfunction strEscape(str) {\x0d\n  let escapeTest = strEscapeSequencesRegExp;\x0d\n  let escapeReplace = strEscapeSequencesReplacer;\x0d\n  let singleQuote = 39;\x0d\n\x0d\n  // Check for double quotes. If not present\x2C do not escape single quotes and\x0d\n  // instead wrap the text in double quotes. If double quotes exist\x2C check for\x0d\n  // backticks. If they do not exist\x2C use those as fallback instead of the\x0d\n  // double quotes.\x0d\n  if (StringPrototypeIncludes(str\x2C "'")) {\x0d\n    // This invalidates the charCode and therefore can not be matched for\x0d\n    // anymore.\x0d\n    if (!StringPrototypeIncludes(str\x2C '"')) {\x0d\n      singleQuote = -1;\x0d\n    } else if (!StringPrototypeIncludes(str\x2C '`') &&\x0d\n               !StringPrototypeIncludes(str\x2C '${')) {\x0d\n      singleQuote = -2;\x0d\n    }\x0d\n    if (singleQuote !== 39) {\x0d\n      escapeTest = strEscapeSequencesRegExpSingle;\x0d\n      escapeReplace = strEscapeSequencesReplacerSingle;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Some magic numbers that worked out fine while benchmarking with v8 6.0\x0d\n  if (str.length < 5000 && RegExpPrototypeExec(escapeTest\x2C str) === null)\x0d\n    return addQuotes(str\x2C singleQuote);\x0d\n  if (str.length > 100) {\x0d\n    str = RegExpPrototypeSymbolReplace(escapeReplace\x2C str\x2C escapeFn);\x0d\n    return addQuotes(str\x2C singleQuote);\x0d\n  }\x0d\n\x0d\n  let result = '';\x0d\n  let last = 0;\x0d\n  for (let i = 0; i < str.length; i++) {\x0d\n    const point = StringPrototypeCharCodeAt(str\x2C i);\x0d\n    if (point === singleQuote ||\x0d\n        point === 92 ||\x0d\n        point < 32 ||\x0d\n        (point > 126 && point < 160)) {\x0d\n      if (last === i) {\x0d\n        result += meta[point];\x0d\n      } else {\x0d\n        result += `${StringPrototypeSlice(str\x2C last\x2C i)}${meta[point]}`;\x0d\n      }\x0d\n      last = i + 1;\x0d\n    } else if (point >= 0xd800 && point <= 0xdfff) {\x0d\n      if (point <= 0xdbff && i + 1 < str.length) {\x0d\n        const point = StringPrototypeCharCodeAt(str\x2C i + 1);\x0d\n        if (point >= 0xdc00 && point <= 0xdfff) {\x0d\n          i++;\x0d\n          continue;\x0d\n        }\x0d\n      }\x0d\n      result += `${StringPrototypeSlice(str\x2C last\x2C i)}\\\\u${NumberPrototypeToString(point\x2C 16)}`;\x0d\n      last = i + 1;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (last !== str.length) {\x0d\n    result += StringPrototypeSlice(str\x2C last);\x0d\n  }\x0d\n  return addQuotes(result\x2C singleQuote);\x0d\n}\x0d\n\x0d\nfunction stylizeWithColor(str\x2C styleType) {\x0d\n  const style = inspect.styles[styleType];\x0d\n  if (style !== undefined) {\x0d\n    const color = inspect.colors[style];\x0d\n    if (color !== undefined)\x0d\n      return `\\u001b[${color[0]}m${str}\\u001b[${color[1]}m`;\x0d\n  }\x0d\n  return str;\x0d\n}\x0d\n\x0d\nfunction stylizeNoColor(str) {\x0d\n  return str;\x0d\n}\x0d\n\x0d\n// Return a new empty array to push in the results of the default formatter.\x0d\nfunction getEmptyFormatArray() {\x0d\n  return [];\x0d\n}\x0d\n\x0d\nfunction isInstanceof(object\x2C proto) {\x0d\n  try {\x0d\n    return object instanceof proto;\x0d\n  } catch {\x0d\n    return false;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction getConstructorName(obj\x2C ctx\x2C recurseTimes\x2C protoProps) {\x0d\n  let firstProto;\x0d\n  const tmp = obj;\x0d\n  while (obj || isUndetectableObject(obj)) {\x0d\n    const descriptor = ObjectGetOwnPropertyDescriptor(obj\x2C 'constructor');\x0d\n    if (descriptor !== undefined &&\x0d\n        typeof descriptor.value === 'function' &&\x0d\n        descriptor.value.name !== '' &&\x0d\n        isInstanceof(tmp\x2C descriptor.value)) {\x0d\n      if (protoProps !== undefined &&\x0d\n         (firstProto !== obj ||\x0d\n         !builtInObjects.has(descriptor.value.name))) {\x0d\n        addPrototypeProperties(\x0d\n          ctx\x2C tmp\x2C firstProto || tmp\x2C recurseTimes\x2C protoProps);\x0d\n      }\x0d\n      return String(descriptor.value.name);\x0d\n    }\x0d\n\x0d\n    obj = ObjectGetPrototypeOf(obj);\x0d\n    if (firstProto === undefined) {\x0d\n      firstProto = obj;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (firstProto === null) {\x0d\n    return null;\x0d\n  }\x0d\n\x0d\n  const res = internalGetConstructorName(tmp);\x0d\n\x0d\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\x0d\n    return `${res} <Complex prototype>`;\x0d\n  }\x0d\n\x0d\n  const protoConstr = getConstructorName(\x0d\n    firstProto\x2C ctx\x2C recurseTimes + 1\x2C protoProps);\x0d\n\x0d\n  if (protoConstr === null) {\x0d\n    return `${res} <${inspect(firstProto\x2C {\x0d\n      ...ctx\x2C\x0d\n      customInspect: false\x2C\x0d\n      depth: -1\x0d\n    })}>`;\x0d\n  }\x0d\n\x0d\n  return `${res} <${protoConstr}>`;\x0d\n}\x0d\n\x0d\n// This function has the side effect of adding prototype properties to the\x0d\n// `output` argument (which is an array). This is intended to highlight user\x0d\n// defined prototype properties.\x0d\nfunction addPrototypeProperties(ctx\x2C main\x2C obj\x2C recurseTimes\x2C output) {\x0d\n  let depth = 0;\x0d\n  let keys;\x0d\n  let keySet;\x0d\n  do {\x0d\n    if (depth !== 0 || main === obj) {\x0d\n      obj = ObjectGetPrototypeOf(obj);\x0d\n      // Stop as soon as a null prototype is encountered.\x0d\n      if (obj === null) {\x0d\n        return;\x0d\n      }\x0d\n      // Stop as soon as a built-in object type is detected.\x0d\n      const descriptor = ObjectGetOwnPropertyDescriptor(obj\x2C 'constructor');\x0d\n      if (descriptor !== undefined &&\x0d\n          typeof descriptor.value === 'function' &&\x0d\n          builtInObjects.has(descriptor.value.name)) {\x0d\n        return;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    if (depth === 0) {\x0d\n      keySet = new SafeSet();\x0d\n    } else {\x0d\n      ArrayPrototypeForEach(keys\x2C (key) => keySet.add(key));\x0d\n    }\x0d\n    // Get all own property names and symbols.\x0d\n    keys = ReflectOwnKeys(obj);\x0d\n    ArrayPrototypePush(ctx.seen\x2C main);\x0d\n    for (const key of keys) {\x0d\n      // Ignore the `constructor` property and keys that exist on layers above.\x0d\n      if (key === 'constructor' ||\x0d\n          ObjectPrototypeHasOwnProperty(main\x2C key) ||\x0d\n          (depth !== 0 && keySet.has(key))) {\x0d\n        continue;\x0d\n      }\x0d\n      const desc = ObjectGetOwnPropertyDescriptor(obj\x2C key);\x0d\n      if (typeof desc.value === 'function') {\x0d\n        continue;\x0d\n      }\x0d\n      const value = formatProperty(\x0d\n        ctx\x2C obj\x2C recurseTimes\x2C key\x2C kObjectType\x2C desc\x2C main);\x0d\n      if (ctx.colors) {\x0d\n        // Faint!\x0d\n        ArrayPrototypePush(output\x2C `\\u001b[2m${value}\\u001b[22m`);\x0d\n      } else {\x0d\n        ArrayPrototypePush(output\x2C value);\x0d\n      }\x0d\n    }\x0d\n    ArrayPrototypePop(ctx.seen);\x0d\n  // Limit the inspection to up to three prototype layers. Using `recurseTimes`\x0d\n  // is not a good choice here\x2C because it's as if the properties are declared\x0d\n  // on the current object from the users perspective.\x0d\n  } while (++depth !== 3);\x0d\n}\x0d\n\x0d\nfunction getPrefix(constructor\x2C tag\x2C fallback\x2C size = '') {\x0d\n  if (constructor === null) {\x0d\n    if (tag !== '' && fallback !== tag) {\x0d\n      return `[${fallback}${size}: null prototype] [${tag}] `;\x0d\n    }\x0d\n    return `[${fallback}${size}: null prototype] `;\x0d\n  }\x0d\n\x0d\n  if (tag !== '' && constructor !== tag) {\x0d\n    return `${constructor}${size} [${tag}] `;\x0d\n  }\x0d\n  return `${constructor}${size} `;\x0d\n}\x0d\n\x0d\n// Look up the keys of the object.\x0d\nfunction getKeys(value\x2C showHidden) {\x0d\n  let keys;\x0d\n  const symbols = ObjectGetOwnPropertySymbols(value);\x0d\n  if (showHidden) {\x0d\n    keys = ObjectGetOwnPropertyNames(value);\x0d\n    if (symbols.length !== 0)\x0d\n      ArrayPrototypePushApply(keys\x2C symbols);\x0d\n  } else {\x0d\n    // This might throw if `value` is a Module Namespace Object from an\x0d\n    // unevaluated module\x2C but we don't want to perform the actual type\x0d\n    // check because it's expensive.\x0d\n    // TODO(devsnek): track https://github.com/tc39/ecma262/issues/1209\x0d\n    // and modify this logic as needed.\x0d\n    try {\x0d\n      keys = ObjectKeys(value);\x0d\n    } catch (err) {\x0d\n      assert(isNativeError(err) && err.name === 'ReferenceError' &&\x0d\n             isModuleNamespaceObject(value));\x0d\n      keys = ObjectGetOwnPropertyNames(value);\x0d\n    }\x0d\n    if (symbols.length !== 0) {\x0d\n      const filter = (key) => ObjectPrototypePropertyIsEnumerable(value\x2C key);\x0d\n      ArrayPrototypePushApply(keys\x2C ArrayPrototypeFilter(symbols\x2C filter));\x0d\n    }\x0d\n  }\x0d\n  return keys;\x0d\n}\x0d\n\x0d\nfunction getCtxStyle(value\x2C constructor\x2C tag) {\x0d\n  let fallback = '';\x0d\n  if (constructor === null) {\x0d\n    fallback = internalGetConstructorName(value);\x0d\n    if (fallback === tag) {\x0d\n      fallback = 'Object';\x0d\n    }\x0d\n  }\x0d\n  return getPrefix(constructor\x2C tag\x2C fallback);\x0d\n}\x0d\n\x0d\nfunction formatProxy(ctx\x2C proxy\x2C recurseTimes) {\x0d\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\x0d\n    return ctx.stylize('Proxy [Array]'\x2C 'special');\x0d\n  }\x0d\n  recurseTimes += 1;\x0d\n  ctx.indentationLvl += 2;\x0d\n  const res = [\x0d\n    formatValue(ctx\x2C proxy[0]\x2C recurseTimes)\x2C\x0d\n    formatValue(ctx\x2C proxy[1]\x2C recurseTimes)\x2C\x0d\n  ];\x0d\n  ctx.indentationLvl -= 2;\x0d\n  return reduceToSingleString(\x0d\n    ctx\x2C res\x2C ''\x2C ['Proxy ['\x2C ']']\x2C kArrayExtrasType\x2C recurseTimes);\x0d\n}\x0d\n\x0d\n// Note: using `formatValue` directly requires the indentation level to be\x0d\n// corrected by setting `ctx.indentationLvL += diff` and then to decrease the\x0d\n// value afterwards again.\x0d\nfunction formatValue(ctx\x2C value\x2C recurseTimes\x2C typedArray) {\x0d\n  // Primitive types cannot have properties.\x0d\n  if (typeof value !== 'object' &&\x0d\n      typeof value !== 'function' &&\x0d\n      !isUndetectableObject(value)) {\x0d\n    return formatPrimitive(ctx.stylize\x2C value\x2C ctx);\x0d\n  }\x0d\n  if (value === null) {\x0d\n    return ctx.stylize('null'\x2C 'null');\x0d\n  }\x0d\n\x0d\n  // Memorize the context for custom inspection on proxies.\x0d\n  const context = value;\x0d\n  // Always check for proxies to prevent side effects and to prevent triggering\x0d\n  // any proxy handlers.\x0d\n  const proxy = getProxyDetails(value\x2C !!ctx.showProxy);\x0d\n  if (proxy !== undefined) {\x0d\n    if (proxy === null || proxy[0] === null) {\x0d\n      return ctx.stylize('<Revoked Proxy>'\x2C 'special');\x0d\n    }\x0d\n    if (ctx.showProxy) {\x0d\n      return formatProxy(ctx\x2C proxy\x2C recurseTimes);\x0d\n    }\x0d\n    value = proxy;\x0d\n  }\x0d\n\x0d\n  // Provide a hook for user-specified inspect functions.\x0d\n  // Check that value is an object with an inspect function on it.\x0d\n  if (ctx.customInspect) {\x0d\n    const maybeCustom = value[customInspectSymbol];\x0d\n    if (typeof maybeCustom === 'function' &&\x0d\n        // Filter out the util module\x2C its inspect function is special.\x0d\n        maybeCustom !== inspect &&\x0d\n        // Also filter out any prototype objects using the circular check.\x0d\n        !(value.constructor && value.constructor.prototype === value)) {\x0d\n      // This makes sure the recurseTimes are reported as before while using\x0d\n      // a counter internally.\x0d\n      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;\x0d\n      const isCrossContext =\x0d\n        proxy !== undefined || !(context instanceof Object);\x0d\n      const ret = FunctionPrototypeCall(\x0d\n        maybeCustom\x2C\x0d\n        context\x2C\x0d\n        depth\x2C\x0d\n        getUserOptions(ctx\x2C isCrossContext)\x2C\x0d\n        inspect\x0d\n      );\x0d\n      // If the custom inspection method returned `this`\x2C don't go into\x0d\n      // infinite recursion.\x0d\n      if (ret !== context) {\x0d\n        if (typeof ret !== 'string') {\x0d\n          return formatValue(ctx\x2C ret\x2C recurseTimes);\x0d\n        }\x0d\n        return StringPrototypeReplaceAll(ret\x2C '\\n'\x2C `\\n${StringPrototypeRepeat(' '\x2C ctx.indentationLvl)}`);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  // Using an array here is actually better for the average case than using\x0d\n  // a Set. `seen` will only check for the depth and will never grow too large.\x0d\n  if (ctx.seen.includes(value)) {\x0d\n    let index = 1;\x0d\n    if (ctx.circular === undefined) {\x0d\n      ctx.circular = new SafeMap();\x0d\n      ctx.circular.set(value\x2C index);\x0d\n    } else {\x0d\n      index = ctx.circular.get(value);\x0d\n      if (index === undefined) {\x0d\n        index = ctx.circular.size + 1;\x0d\n        ctx.circular.set(value\x2C index);\x0d\n      }\x0d\n    }\x0d\n    return ctx.stylize(`[Circular *${index}]`\x2C 'special');\x0d\n  }\x0d\n\x0d\n  return formatRaw(ctx\x2C value\x2C recurseTimes\x2C typedArray);\x0d\n}\x0d\n\x0d\nfunction formatRaw(ctx\x2C value\x2C recurseTimes\x2C typedArray) {\x0d\n  let keys;\x0d\n  let protoProps;\x0d\n  if (ctx.showHidden && (recurseTimes <= ctx.depth || ctx.depth === null)) {\x0d\n    protoProps = [];\x0d\n  }\x0d\n\x0d\n  const constructor = getConstructorName(value\x2C ctx\x2C recurseTimes\x2C protoProps);\x0d\n  // Reset the variable to check for this later on.\x0d\n  if (protoProps !== undefined && protoProps.length === 0) {\x0d\n    protoProps = undefined;\x0d\n  }\x0d\n\x0d\n  let tag = value[SymbolToStringTag];\x0d\n  // Only list the tag in case it's non-enumerable / not an own property.\x0d\n  // Otherwise we'd print this twice.\x0d\n  if (typeof tag !== 'string' ||\x0d\n      (tag !== '' &&\x0d\n      (ctx.showHidden ?\x0d\n        ObjectPrototypeHasOwnProperty :\x0d\n        ObjectPrototypePropertyIsEnumerable)(\x0d\n        value\x2C SymbolToStringTag\x0d\n      ))) {\x0d\n    tag = '';\x0d\n  }\x0d\n  let base = '';\x0d\n  let formatter = getEmptyFormatArray;\x0d\n  let braces;\x0d\n  let noIterator = true;\x0d\n  let i = 0;\x0d\n  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;\x0d\n\x0d\n  let extrasType = kObjectType;\x0d\n\x0d\n  // Iterators and the rest are split to reduce checks.\x0d\n  // We have to check all values in case the constructor is set to null.\x0d\n  // Otherwise it would not possible to identify all types properly.\x0d\n  if (SymbolIterator in value || constructor === null) {\x0d\n    noIterator = false;\x0d\n    if (ArrayIsArray(value)) {\x0d\n      // Only set the constructor for non ordinary ("Array [...]") arrays.\x0d\n      const prefix = (constructor !== 'Array' || tag !== '') ?\x0d\n        getPrefix(constructor\x2C tag\x2C 'Array'\x2C `(${value.length})`) :\x0d\n        '';\x0d\n      keys = getOwnNonIndexProperties(value\x2C filter);\x0d\n      braces = [`${prefix}[`\x2C ']'];\x0d\n      if (value.length === 0 && keys.length === 0 && protoProps === undefined)\x0d\n        return `${braces[0]}]`;\x0d\n      extrasType = kArrayExtrasType;\x0d\n      formatter = formatArray;\x0d\n    } else if (isSet(value)) {\x0d\n      const size = SetPrototypeGetSize(value);\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C 'Set'\x2C `(${size})`);\x0d\n      keys = getKeys(value\x2C ctx.showHidden);\x0d\n      formatter = constructor !== null ?\x0d\n        FunctionPrototypeBind(formatSet\x2C null\x2C value) :\x0d\n        FunctionPrototypeBind(formatSet\x2C null\x2C SetPrototypeValues(value));\x0d\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\x0d\n        return `${prefix}{}`;\x0d\n      braces = [`${prefix}{`\x2C '}'];\x0d\n    } else if (isMap(value)) {\x0d\n      const size = MapPrototypeGetSize(value);\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C 'Map'\x2C `(${size})`);\x0d\n      keys = getKeys(value\x2C ctx.showHidden);\x0d\n      formatter = constructor !== null ?\x0d\n        FunctionPrototypeBind(formatMap\x2C null\x2C value) :\x0d\n        FunctionPrototypeBind(formatMap\x2C null\x2C MapPrototypeEntries(value));\x0d\n      if (size === 0 && keys.length === 0 && protoProps === undefined)\x0d\n        return `${prefix}{}`;\x0d\n      braces = [`${prefix}{`\x2C '}'];\x0d\n    } else if (isTypedArray(value)) {\x0d\n      keys = getOwnNonIndexProperties(value\x2C filter);\x0d\n      let bound = value;\x0d\n      let fallback = '';\x0d\n      if (constructor === null) {\x0d\n        fallback = TypedArrayPrototypeGetSymbolToStringTag(value);\x0d\n        // Reconstruct the array information.\x0d\n        bound = new primordials[fallback](value);\x0d\n      }\x0d\n      const size = TypedArrayPrototypeGetLength(value);\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C fallback\x2C `(${size})`);\x0d\n      braces = [`${prefix}[`\x2C ']'];\x0d\n      if (value.length === 0 && keys.length === 0 && !ctx.showHidden)\x0d\n        return `${braces[0]}]`;\x0d\n      // Special handle the value. The original value is required below. The\x0d\n      // bound function is required to reconstruct missing information.\x0d\n      formatter = FunctionPrototypeBind(formatTypedArray\x2C null\x2C bound\x2C size);\x0d\n      extrasType = kArrayExtrasType;\x0d\n    } else if (isMapIterator(value)) {\x0d\n      keys = getKeys(value\x2C ctx.showHidden);\x0d\n      braces = getIteratorBraces('Map'\x2C tag);\x0d\n      // Add braces to the formatter parameters.\x0d\n      formatter = FunctionPrototypeBind(formatIterator\x2C null\x2C braces);\x0d\n    } else if (isSetIterator(value)) {\x0d\n      keys = getKeys(value\x2C ctx.showHidden);\x0d\n      braces = getIteratorBraces('Set'\x2C tag);\x0d\n      // Add braces to the formatter parameters.\x0d\n      formatter = FunctionPrototypeBind(formatIterator\x2C null\x2C braces);\x0d\n    } else {\x0d\n      noIterator = true;\x0d\n    }\x0d\n  }\x0d\n  if (noIterator) {\x0d\n    keys = getKeys(value\x2C ctx.showHidden);\x0d\n    braces = ['{'\x2C '}'];\x0d\n    if (constructor === 'Object') {\x0d\n      if (isArgumentsObject(value)) {\x0d\n        braces[0] = '[Arguments] {';\x0d\n      } else if (tag !== '') {\x0d\n        braces[0] = `${getPrefix(constructor\x2C tag\x2C 'Object')}{`;\x0d\n      }\x0d\n      if (keys.length === 0 && protoProps === undefined) {\x0d\n        return `${braces[0]}}`;\x0d\n      }\x0d\n    } else if (typeof value === 'function') {\x0d\n      base = getFunctionBase(value\x2C constructor\x2C tag);\x0d\n      if (keys.length === 0 && protoProps === undefined)\x0d\n        return ctx.stylize(base\x2C 'special');\x0d\n    } else if (isRegExp(value)) {\x0d\n      // Make RegExps say that they are RegExps\x0d\n      base = RegExpPrototypeToString(\x0d\n        constructor !== null ? value : new RegExp(value)\x0d\n      );\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C 'RegExp');\x0d\n      if (prefix !== 'RegExp ')\x0d\n        base = `${prefix}${base}`;\x0d\n      if ((keys.length === 0 && protoProps === undefined) ||\x0d\n          (recurseTimes > ctx.depth && ctx.depth !== null)) {\x0d\n        return ctx.stylize(base\x2C 'regexp');\x0d\n      }\x0d\n    } else if (isDate(value)) {\x0d\n      // Make dates with properties first say the date\x0d\n      base = NumberIsNaN(DatePrototypeGetTime(value)) ?\x0d\n        DatePrototypeToString(value) :\x0d\n        DatePrototypeToISOString(value);\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C 'Date');\x0d\n      if (prefix !== 'Date ')\x0d\n        base = `${prefix}${base}`;\x0d\n      if (keys.length === 0 && protoProps === undefined) {\x0d\n        return ctx.stylize(base\x2C 'date');\x0d\n      }\x0d\n    } else if (isError(value)) {\x0d\n      base = formatError(value\x2C constructor\x2C tag\x2C ctx\x2C keys);\x0d\n      if (keys.length === 0 && protoProps === undefined)\x0d\n        return base;\x0d\n    } else if (isAnyArrayBuffer(value)) {\x0d\n      // Fast path for ArrayBuffer and SharedArrayBuffer.\x0d\n      // Can't do the same for DataView because it has a non-primitive\x0d\n      // .buffer property that we need to recurse for.\x0d\n      const arrayType = isArrayBuffer(value) ? 'ArrayBuffer' :\x0d\n        'SharedArrayBuffer';\x0d\n      const prefix = getPrefix(constructor\x2C tag\x2C arrayType);\x0d\n      if (typedArray === undefined) {\x0d\n        formatter = formatArrayBuffer;\x0d\n      } else if (keys.length === 0 && protoProps === undefined) {\x0d\n        return prefix +\x0d\n              `{ byteLength: ${formatNumber(ctx.stylize\x2C value.byteLength\x2C false)} }`;\x0d\n      }\x0d\n      braces[0] = `${prefix}{`;\x0d\n      ArrayPrototypeUnshift(keys\x2C 'byteLength');\x0d\n    } else if (isDataView(value)) {\x0d\n      braces[0] = `${getPrefix(constructor\x2C tag\x2C 'DataView')}{`;\x0d\n      // .buffer goes last\x2C it's not a primitive like the others.\x0d\n      ArrayPrototypeUnshift(keys\x2C 'byteLength'\x2C 'byteOffset'\x2C 'buffer');\x0d\n    } else if (isPromise(value)) {\x0d\n      braces[0] = `${getPrefix(constructor\x2C tag\x2C 'Promise')}{`;\x0d\n      formatter = formatPromise;\x0d\n    } else if (isWeakSet(value)) {\x0d\n      braces[0] = `${getPrefix(constructor\x2C tag\x2C 'WeakSet')}{`;\x0d\n      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;\x0d\n    } else if (isWeakMap(value)) {\x0d\n      braces[0] = `${getPrefix(constructor\x2C tag\x2C 'WeakMap')}{`;\x0d\n      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;\x0d\n    } else if (isModuleNamespaceObject(value)) {\x0d\n      braces[0] = `${getPrefix(constructor\x2C tag\x2C 'Module')}{`;\x0d\n      // Special handle keys for namespace objects.\x0d\n      formatter = formatNamespaceObject.bind(null\x2C keys);\x0d\n    } else if (isBoxedPrimitive(value)) {\x0d\n      base = getBoxedBase(value\x2C ctx\x2C keys\x2C constructor\x2C tag);\x0d\n      if (keys.length === 0 && protoProps === undefined) {\x0d\n        return base;\x0d\n      }\x0d\n    } else {\x0d\n      if (keys.length === 0 && protoProps === undefined) {\x0d\n        if (isExternal(value)) {\x0d\n          const address = getExternalValue(value).toString(16);\x0d\n          return ctx.stylize(`[External: ${address}]`\x2C 'special');\x0d\n        }\x0d\n        return `${getCtxStyle(value\x2C constructor\x2C tag)}{}`;\x0d\n      }\x0d\n      braces[0] = `${getCtxStyle(value\x2C constructor\x2C tag)}{`;\x0d\n    }\x0d\n  }\x0d\n\x0d\n  if (recurseTimes > ctx.depth && ctx.depth !== null) {\x0d\n    let constructorName = StringPrototypeSlice(getCtxStyle(value\x2C constructor\x2C tag)\x2C 0\x2C -1);\x0d\n    if (constructor !== null)\x0d\n      constructorName = `[${constructorName}]`;\x0d\n    return ctx.stylize(constructorName\x2C 'special');\x0d\n  }\x0d\n  recurseTimes += 1;\x0d\n\x0d\n  ctx.seen.push(value);\x0d\n  ctx.currentDepth = recurseTimes;\x0d\n  let output;\x0d\n  const indentationLvl = ctx.indentationLvl;\x0d\n  try {\x0d\n    output = formatter(ctx\x2C value\x2C recurseTimes);\x0d\n    for (i = 0; i < keys.length; i++) {\x0d\n      ArrayPrototypePush(\x0d\n        output\x2C\x0d\n        formatProperty(ctx\x2C value\x2C recurseTimes\x2C keys[i]\x2C extrasType)\x2C\x0d\n      );\x0d\n    }\x0d\n    if (protoProps !== undefined) {\x0d\n      ArrayPrototypePushApply(output\x2C protoProps);\x0d\n    }\x0d\n  } catch (err) {\x0d\n    const constructorName = StringPrototypeSlice(getCtxStyle(value\x2C constructor\x2C tag)\x2C 0\x2C -1);\x0d\n    return handleMaxCallStackSize(ctx\x2C err\x2C constructorName\x2C indentationLvl);\x0d\n  }\x0d\n  if (ctx.circular !== undefined) {\x0d\n    const index = ctx.circular.get(value);\x0d\n    if (index !== undefined) {\x0d\n      const reference = ctx.stylize(`<ref *${index}>`\x2C 'special');\x0d\n      // Add reference always to the very beginning of the output.\x0d\n      if (ctx.compact !== true) {\x0d\n        base = base === '' ? reference : `${reference} ${base}`;\x0d\n      } else {\x0d\n        braces[0] = `${reference} ${braces[0]}`;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  ctx.seen.pop();\x0d\n\x0d\n  if (ctx.sorted) {\x0d\n    const comparator = ctx.sorted === true ? undefined : ctx.sorted;\x0d\n    if (extrasType === kObjectType) {\x0d\n      ArrayPrototypeSort(output\x2C comparator);\x0d\n    } else if (keys.length > 1) {\x0d\n      const sorted = ArrayPrototypeSort(ArrayPrototypeSlice(output\x2C output.length - keys.length)\x2C comparator);\x0d\n      ArrayPrototypeUnshift(sorted\x2C output\x2C output.length - keys.length\x2C keys.length);\x0d\n      ReflectApply(ArrayPrototypeSplice\x2C null\x2C sorted);\x0d\n    }\x0d\n  }\x0d\n\x0d\n  const res = reduceToSingleString(\x0d\n    ctx\x2C output\x2C base\x2C braces\x2C extrasType\x2C recurseTimes\x2C value);\x0d\n  const budget = ctx.budget[ctx.indentationLvl] || 0;\x0d\n  const newLength = budget + res.length;\x0d\n  ctx.budget[ctx.indentationLvl] = newLength;\x0d\n  // If any indentationLvl exceeds this limit\x2C limit further inspecting to the\x0d\n  // minimum. Otherwise the recursive algorithm might continue inspecting the\x0d\n  // object even though the maximum string size (~2 ** 28 on 32 bit systems and\x0d\n  // ~2 ** 30 on 64 bit systems) exceeded. The actual output is not limited at\x0d\n  // exactly 2 ** 27 but a bit higher. This depends on the object shape.\x0d\n  // This limit also makes sure that huge objects don't block the event loop\x0d\n  // significantly.\x0d\n  if (newLength > 2 ** 27) {\x0d\n    ctx.depth = -1;\x0d\n  }\x0d\n  return res;\x0d\n}\x0d\n\x0d\nfunction getIteratorBraces(type\x2C tag) {\x0d\n  if (tag !== `${type} Iterator`) {\x0d\n    if (tag !== '')\x0d\n      tag += '] [';\x0d\n    tag += `${type} Iterator`;\x0d\n  }\x0d\n  return [`[${tag}] {`\x2C '}'];\x0d\n}\x0d\n\x0d\nfunction getBoxedBase(value\x2C ctx\x2C keys\x2C constructor\x2C tag) {\x0d\n  let fn;\x0d\n  let type;\x0d\n  if (isNumberObject(value)) {\x0d\n    fn = NumberPrototypeValueOf;\x0d\n    type = 'Number';\x0d\n  } else if (isStringObject(value)) {\x0d\n    fn = StringPrototypeValueOf;\x0d\n    type = 'String';\x0d\n    // For boxed Strings\x2C we have to remove the 0-n indexed entries\x2C\x0d\n    // since they just noisy up the output and are redundant\x0d\n    // Make boxed primitive Strings look like such\x0d\n    keys.splice(0\x2C value.length);\x0d\n  } else if (isBooleanObject(value)) {\x0d\n    fn = BooleanPrototypeValueOf;\x0d\n    type = 'Boolean';\x0d\n  } else if (isBigIntObject(value)) {\x0d\n    fn = BigIntPrototypeValueOf;\x0d\n    type = 'BigInt';\x0d\n  } else {\x0d\n    fn = SymbolPrototypeValueOf;\x0d\n    type = 'Symbol';\x0d\n  }\x0d\n  let base = `[${type}`;\x0d\n  if (type !== constructor) {\x0d\n    if (constructor === null) {\x0d\n      base += ' (null prototype)';\x0d\n    } else {\x0d\n      base += ` (${constructor})`;\x0d\n    }\x0d\n  }\x0d\n  base += `: ${formatPrimitive(stylizeNoColor\x2C fn(value)\x2C ctx)}]`;\x0d\n  if (tag !== '' && tag !== constructor) {\x0d\n    base += ` [${tag}]`;\x0d\n  }\x0d\n  if (keys.length !== 0 || ctx.stylize === stylizeNoColor)\x0d\n    return base;\x0d\n  return ctx.stylize(base\x2C StringPrototypeToLowerCase(type));\x0d\n}\x0d\n\x0d\nfunction getClassBase(value\x2C constructor\x2C tag) {\x0d\n  const hasName = ObjectPrototypeHasOwnProperty(value\x2C 'name');\x0d\n  const name = (hasName && value.name) || '(anonymous)';\x0d\n  let base = `class ${name}`;\x0d\n  if (constructor !== 'Function' && constructor !== null) {\x0d\n    base += ` [${constructor}]`;\x0d\n  }\x0d\n  if (tag !== '' && constructor !== tag) {\x0d\n    base += ` [${tag}]`;\x0d\n  }\x0d\n  if (constructor !== null) {\x0d\n    const superName = ObjectGetPrototypeOf(value).name;\x0d\n    if (superName) {\x0d\n      base += ` extends ${superName}`;\x0d\n    }\x0d\n  } else {\x0d\n    base += ' extends [null prototype]';\x0d\n  }\x0d\n  return `[${base}]`;\x0d\n}\x0d\n\x0d\nfunction getFunctionBase(value\x2C constructor\x2C tag) {\x0d\n  const stringified = FunctionPrototypeToString(value);\x0d\n  if (StringPrototypeStartsWith(stringified\x2C 'class') && StringPrototypeEndsWith(stringified\x2C '}')) {\x0d\n    const slice = StringPrototypeSlice(stringified\x2C 5\x2C -1);\x0d\n    const bracketIndex = StringPrototypeIndexOf(slice\x2C '{');\x0d\n    if (bracketIndex !== -1 &&\x0d\n        (!StringPrototypeIncludes(StringPrototypeSlice(slice\x2C 0\x2C bracketIndex)\x2C '(') ||\x0d\n        // Slow path to guarantee that it's indeed a class.\x0d\n        RegExpPrototypeExec(classRegExp\x2C RegExpPrototypeSymbolReplace(stripCommentsRegExp\x2C slice)) !== null)\x0d\n    ) {\x0d\n      return getClassBase(value\x2C constructor\x2C tag);\x0d\n    }\x0d\n  }\x0d\n  let type = 'Function';\x0d\n  if (isGeneratorFunction(value)) {\x0d\n    type = `Generator${type}`;\x0d\n  }\x0d\n  if (isAsyncFunction(value)) {\x0d\n    type = `Async${type}`;\x0d\n  }\x0d\n  let base = `[${type}`;\x0d\n  if (constructor === null) {\x0d\n    base += ' (null prototype)';\x0d\n  }\x0d\n  if (value.name === '') {\x0d\n    base += ' (anonymous)';\x0d\n  } else {\x0d\n    base += `: ${value.name}`;\x0d\n  }\x0d\n  base += ']';\x0d\n  if (constructor !== type && constructor !== null) {\x0d\n    base += ` ${constructor}`;\x0d\n  }\x0d\n  if (tag !== '' && constructor !== tag) {\x0d\n    base += ` [${tag}]`;\x0d\n  }\x0d\n  return base;\x0d\n}\x0d\n\x0d\nfunction identicalSequenceRange(a\x2C b) {\x0d\n  for (let i = 0; i < a.length - 3; i++) {\x0d\n    // Find the first entry of b that matches the current entry of a.\x0d\n    const pos = b.indexOf(a[i]);\x0d\n    if (pos !== -1) {\x0d\n      const rest = b.length - pos;\x0d\n      if (rest > 3) {\x0d\n        let len = 1;\x0d\n        const maxLen = MathMin(a.length - i\x2C rest);\x0d\n        // Count the number of consecutive entries.\x0d\n        while (maxLen > len && a[i + len] === b[pos + len]) {\x0d\n          len++;\x0d\n        }\x0d\n        if (len > 3) {\x0d\n          return { len\x2C offset: i };\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  return { len: 0\x2C offset: 0 };\x0d\n}\x0d\n\x0d\nfunction getStackString(error) {\x0d\n  return error.stack ? String(error.stack) : ErrorPrototypeToString(error);\x0d\n}\x0d\n\x0d\nfunction getStackFrames(ctx\x2C err\x2C stack) {\x0d\n  const frames = StringPrototypeSplit(stack\x2C '\\n');\x0d\n\x0d\n  // Remove stack frames identical to frames in cause.\x0d\n  if (err.cause && isError(err.cause)) {\x0d\n    const causeStack = getStackString(err.cause);\x0d\n    const causeStackStart = StringPrototypeIndexOf(causeStack\x2C '\\n    at');\x0d\n    if (causeStackStart !== -1) {\x0d\n      const causeFrames = StringPrototypeSplit(StringPrototypeSlice(causeStack\x2C causeStackStart + 1)\x2C '\\n');\x0d\n      const { len\x2C offset } = identicalSequenceRange(frames\x2C causeFrames);\x0d\n      if (len > 0) {\x0d\n        const skipped = len - 2;\x0d\n        const msg = `    ... ${skipped} lines matching cause stack trace ...`;\x0d\n        frames.splice(offset + 1\x2C skipped\x2C ctx.stylize(msg\x2C 'undefined'));\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return frames;\x0d\n}\x0d\n\x0d\nfunction improveStack(stack\x2C constructor\x2C name\x2C tag) {\x0d\n  // A stack trace may contain arbitrary data. Only manipulate the output\x0d\n  // for "regular errors" (errors that "look normal") for now.\x0d\n  let len = name.length;\x0d\n\x0d\n  if (constructor === null ||\x0d\n      (StringPrototypeEndsWith(name\x2C 'Error') &&\x0d\n      StringPrototypeStartsWith(stack\x2C name) &&\x0d\n      (stack.length === len || stack[len] === ':' || stack[len] === '\\n'))) {\x0d\n    let fallback = 'Error';\x0d\n    if (constructor === null) {\x0d\n      const start = RegExpPrototypeExec(/^([A-Z][a-z_ A-Z0-9[\\]()-]+)(?::|\\n {4}at)/\x2C stack) ||\x0d\n      RegExpPrototypeExec(/^([a-z_A-Z0-9-]*Error)$/\x2C stack);\x0d\n      fallback = (start && start[1]) || '';\x0d\n      len = fallback.length;\x0d\n      fallback = fallback || 'Error';\x0d\n    }\x0d\n    const prefix = StringPrototypeSlice(getPrefix(constructor\x2C tag\x2C fallback)\x2C 0\x2C -1);\x0d\n    if (name !== prefix) {\x0d\n      if (StringPrototypeIncludes(prefix\x2C name)) {\x0d\n        if (len === 0) {\x0d\n          stack = `${prefix}: ${stack}`;\x0d\n        } else {\x0d\n          stack = `${prefix}${StringPrototypeSlice(stack\x2C len)}`;\x0d\n        }\x0d\n      } else {\x0d\n        stack = `${prefix} [${name}]${StringPrototypeSlice(stack\x2C len)}`;\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n  return stack;\x0d\n}\x0d\n\x0d\nfunction removeDuplicateErrorKeys(ctx\x2C keys\x2C err\x2C stack) {\x0d\n  if (!ctx.showHidden && keys.length !== 0) {\x0d\n    for (const name of ['name'\x2C 'message'\x2C 'stack']) {\x0d\n      const index = ArrayPrototypeIndexOf(keys\x2C name);\x0d\n      // Only hide the property in case it's part of the original stack\x0d\n      if (index !== -1 && StringPrototypeIncludes(stack\x2C err[name])) {\x0d\n        ArrayPrototypeSplice(keys\x2C index\x2C 1);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction markNodeModules(ctx\x2C line) {\x0d\n  let tempLine = '';\x0d\n  let nodeModule;\x0d\n  let pos = 0;\x0d\n  while ((nodeModule = nodeModulesRegExp.exec(line)) !== null) {\x0d\n    // '/node_modules/'.length === 14\x0d\n    tempLine += StringPrototypeSlice(line\x2C pos\x2C nodeModule.index + 14);\x0d\n    tempLine += ctx.stylize(nodeModule[1]\x2C 'module');\x0d\n    pos = nodeModule.index + nodeModule[0].length;\x0d\n  }\x0d\n  if (pos !== 0) {\x0d\n    line = tempLine + StringPrototypeSlice(line\x2C pos);\x0d\n  }\x0d\n  return line;\x0d\n}\x0d\n\x0d\nfunction markCwd(ctx\x2C line\x2C workingDirectory) {\x0d\n  let cwdStartPos = StringPrototypeIndexOf(line\x2C workingDirectory);\x0d\n  let tempLine = '';\x0d\n  let cwdLength = workingDirectory.length;\x0d\n  if (cwdStartPos !== -1) {\x0d\n    if (StringPrototypeSlice(line\x2C cwdStartPos - 7\x2C cwdStartPos) === 'file://') {\x0d\n      cwdLength += 7;\x0d\n      cwdStartPos -= 7;\x0d\n    }\x0d\n    const start = line[cwdStartPos - 1] === '(' ? cwdStartPos - 1 : cwdStartPos;\x0d\n    const end = start !== cwdStartPos && StringPrototypeEndsWith(line\x2C ')') ? -1 : line.length;\x0d\n    const workingDirectoryEndPos = cwdStartPos + cwdLength + 1;\x0d\n    const cwdSlice = StringPrototypeSlice(line\x2C start\x2C workingDirectoryEndPos);\x0d\n\x0d\n    tempLine += StringPrototypeSlice(line\x2C 0\x2C start);\x0d\n    tempLine += ctx.stylize(cwdSlice\x2C 'undefined');\x0d\n    tempLine += StringPrototypeSlice(line\x2C workingDirectoryEndPos\x2C end);\x0d\n    if (end === -1) {\x0d\n      tempLine += ctx.stylize(')'\x2C 'undefined');\x0d\n    }\x0d\n  } else {\x0d\n    tempLine += line;\x0d\n  }\x0d\n  return tempLine;\x0d\n}\x0d\n\x0d\nfunction safeGetCWD() {\x0d\n  let workingDirectory;\x0d\n  try {\x0d\n    workingDirectory = process.cwd();\x0d\n  } catch {\x0d\n    return;\x0d\n  }\x0d\n  return workingDirectory;\x0d\n}\x0d\n\x0d\nfunction formatError(err\x2C constructor\x2C tag\x2C ctx\x2C keys) {\x0d\n  const name = err.name != null ? String(err.name) : 'Error';\x0d\n  let stack = getStackString(err);\x0d\n\x0d\n  removeDuplicateErrorKeys(ctx\x2C keys\x2C err\x2C stack);\x0d\n\x0d\n  if ('cause' in err &&\x0d\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys\x2C 'cause'))) {\x0d\n    ArrayPrototypePush(keys\x2C 'cause');\x0d\n  }\x0d\n\x0d\n  // Print errors aggregated into AggregateError\x0d\n  if (ArrayIsArray(err.errors) &&\x0d\n      (keys.length === 0 || !ArrayPrototypeIncludes(keys\x2C 'errors'))) {\x0d\n    ArrayPrototypePush(keys\x2C 'errors');\x0d\n  }\x0d\n\x0d\n  stack = improveStack(stack\x2C constructor\x2C name\x2C tag);\x0d\n\x0d\n  // Ignore the error message if it's contained in the stack.\x0d\n  let pos = (err.message && StringPrototypeIndexOf(stack\x2C err.message)) || -1;\x0d\n  if (pos !== -1)\x0d\n    pos += err.message.length;\x0d\n  // Wrap the error in brackets in case it has no stack trace.\x0d\n  const stackStart = StringPrototypeIndexOf(stack\x2C '\\n    at'\x2C pos);\x0d\n  if (stackStart === -1) {\x0d\n    stack = `[${stack}]`;\x0d\n  } else {\x0d\n    let newStack = StringPrototypeSlice(stack\x2C 0\x2C stackStart);\x0d\n    const stackFramePart = StringPrototypeSlice(stack\x2C stackStart + 1);\x0d\n    const lines = getStackFrames(ctx\x2C err\x2C stackFramePart);\x0d\n    if (ctx.colors) {\x0d\n      // Highlight userland code and node modules.\x0d\n      const workingDirectory = safeGetCWD();\x0d\n      let esmWorkingDirectory;\x0d\n      for (let line of lines) {\x0d\n        const core = RegExpPrototypeExec(coreModuleRegExp\x2C line);\x0d\n        if (core !== null && BuiltinModule.exists(core[1])) {\x0d\n          newStack += `\\n${ctx.stylize(line\x2C 'undefined')}`;\x0d\n        } else {\x0d\n          newStack += '\\n';\x0d\n\x0d\n          line = markNodeModules(ctx\x2C line);\x0d\n          if (workingDirectory !== undefined) {\x0d\n            let newLine = markCwd(ctx\x2C line\x2C workingDirectory);\x0d\n            if (newLine === line) {\x0d\n              esmWorkingDirectory ??= pathToFileUrlHref(workingDirectory);\x0d\n              newLine = markCwd(ctx\x2C line\x2C esmWorkingDirectory);\x0d\n            }\x0d\n            line = newLine;\x0d\n          }\x0d\n\x0d\n          newStack += line;\x0d\n        }\x0d\n      }\x0d\n    } else {\x0d\n      newStack += `\\n${ArrayPrototypeJoin(lines\x2C '\\n')}`;\x0d\n    }\x0d\n    stack = newStack;\x0d\n  }\x0d\n  // The message and the stack have to be indented as well!\x0d\n  if (ctx.indentationLvl !== 0) {\x0d\n    const indentation = StringPrototypeRepeat(' '\x2C ctx.indentationLvl);\x0d\n    stack = StringPrototypeReplaceAll(stack\x2C '\\n'\x2C `\\n${indentation}`);\x0d\n  }\x0d\n  return stack;\x0d\n}\x0d\n\x0d\nfunction groupArrayElements(ctx\x2C output\x2C value) {\x0d\n  let totalLength = 0;\x0d\n  let maxLength = 0;\x0d\n  let i = 0;\x0d\n  let outputLength = output.length;\x0d\n  if (ctx.maxArrayLength < output.length) {\x0d\n    // This makes sure the "... n more items" part is not taken into account.\x0d\n    outputLength--;\x0d\n  }\x0d\n  const separatorSpace = 2; // Add 1 for the space and 1 for the separator.\x0d\n  const dataLen = new Array(outputLength);\x0d\n  // Calculate the total length of all output entries and the individual max\x0d\n  // entries length of all output entries. We have to remove colors first\x2C\x0d\n  // otherwise the length would not be calculated properly.\x0d\n  for (; i < outputLength; i++) {\x0d\n    const len = getStringWidth(output[i]\x2C ctx.colors);\x0d\n    dataLen[i] = len;\x0d\n    totalLength += len + separatorSpace;\x0d\n    if (maxLength < len)\x0d\n      maxLength = len;\x0d\n  }\x0d\n  // Add two to `maxLength` as we add a single whitespace character plus a comma\x0d\n  // in-between two entries.\x0d\n  const actualMax = maxLength + separatorSpace;\x0d\n  // Check if at least three entries fit next to each other and prevent grouping\x0d\n  // of arrays that contains entries of very different length (i.e.\x2C if a single\x0d\n  // entry is longer than 1/5 of all other entries combined). Otherwise the\x0d\n  // space in-between small entries would be enormous.\x0d\n  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength &&\x0d\n      (totalLength / actualMax > 5 || maxLength <= 6)) {\x0d\n\x0d\n    const approxCharHeights = 2.5;\x0d\n    const averageBias = MathSqrt(actualMax - totalLength / output.length);\x0d\n    const biasedMax = MathMax(actualMax - 3 - averageBias\x2C 1);\x0d\n    // Dynamically check how many columns seem possible.\x0d\n    const columns = MathMin(\x0d\n      // Ideally a square should be drawn. We expect a character to be about 2.5\x0d\n      // times as high as wide. This is the area formula to calculate a square\x0d\n      // which contains n rectangles of size `actualMax * approxCharHeights`.\x0d\n      // Divide that by `actualMax` to receive the correct number of columns.\x0d\n      // The added bias increases the columns for short entries.\x0d\n      MathRound(\x0d\n        MathSqrt(\x0d\n          approxCharHeights * biasedMax * outputLength\x0d\n        ) / biasedMax\x0d\n      )\x2C\x0d\n      // Do not exceed the breakLength.\x0d\n      MathFloor((ctx.breakLength - ctx.indentationLvl) / actualMax)\x2C\x0d\n      // Limit array grouping for small `compact` modes as the user requested\x0d\n      // minimal grouping.\x0d\n      ctx.compact * 4\x2C\x0d\n      // Limit the columns to a maximum of fifteen.\x0d\n      15\x0d\n    );\x0d\n    // Return with the original output if no grouping should happen.\x0d\n    if (columns <= 1) {\x0d\n      return output;\x0d\n    }\x0d\n    const tmp = [];\x0d\n    const maxLineLength = [];\x0d\n    for (let i = 0; i < columns; i++) {\x0d\n      let lineMaxLength = 0;\x0d\n      for (let j = i; j < output.length; j += columns) {\x0d\n        if (dataLen[j] > lineMaxLength)\x0d\n          lineMaxLength = dataLen[j];\x0d\n      }\x0d\n      lineMaxLength += separatorSpace;\x0d\n      maxLineLength[i] = lineMaxLength;\x0d\n    }\x0d\n    let order = StringPrototypePadStart;\x0d\n    if (value !== undefined) {\x0d\n      for (let i = 0; i < output.length; i++) {\x0d\n        if (typeof value[i] !== 'number' && typeof value[i] !== 'bigint') {\x0d\n          order = StringPrototypePadEnd;\x0d\n          break;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    // Each iteration creates a single line of grouped entries.\x0d\n    for (let i = 0; i < outputLength; i += columns) {\x0d\n      // The last lines may contain less entries than columns.\x0d\n      const max = MathMin(i + columns\x2C outputLength);\x0d\n      let str = '';\x0d\n      let j = i;\x0d\n      for (; j < max - 1; j++) {\x0d\n        // Calculate extra color padding in case it's active. This has to be\x0d\n        // done line by line as some lines might contain more colors than\x0d\n        // others.\x0d\n        const padding = maxLineLength[j - i] + output[j].length - dataLen[j];\x0d\n        str += order(`${output[j]}\x2C `\x2C padding\x2C ' ');\x0d\n      }\x0d\n      if (order === StringPrototypePadStart) {\x0d\n        const padding = maxLineLength[j - i] +\x0d\n                        output[j].length -\x0d\n                        dataLen[j] -\x0d\n                        separatorSpace;\x0d\n        str += StringPrototypePadStart(output[j]\x2C padding\x2C ' ');\x0d\n      } else {\x0d\n        str += output[j];\x0d\n      }\x0d\n      ArrayPrototypePush(tmp\x2C str);\x0d\n    }\x0d\n    if (ctx.maxArrayLength < output.length) {\x0d\n      ArrayPrototypePush(tmp\x2C output[outputLength]);\x0d\n    }\x0d\n    output = tmp;\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction handleMaxCallStackSize(ctx\x2C err\x2C constructorName\x2C indentationLvl) {\x0d\n  if (isStackOverflowError(err)) {\x0d\n    ctx.seen.pop();\x0d\n    ctx.indentationLvl = indentationLvl;\x0d\n    return ctx.stylize(\x0d\n      `[${constructorName}: Inspection interrupted ` +\x0d\n        'prematurely. Maximum call stack size exceeded.]'\x2C\x0d\n      'special'\x0d\n    );\x0d\n  }\x0d\n  /* c8 ignore next */\x0d\n  assert.fail(err.stack);\x0d\n}\x0d\n\x0d\nfunction addNumericSeparator(integerString) {\x0d\n  let result = '';\x0d\n  let i = integerString.length;\x0d\n  const start = StringPrototypeStartsWith(integerString\x2C '-') ? 1 : 0;\x0d\n  for (; i >= start + 4; i -= 3) {\x0d\n    result = `_${StringPrototypeSlice(integerString\x2C i - 3\x2C i)}${result}`;\x0d\n  }\x0d\n  return i === integerString.length ?\x0d\n    integerString :\x0d\n    `${StringPrototypeSlice(integerString\x2C 0\x2C i)}${result}`;\x0d\n}\x0d\n\x0d\nfunction addNumericSeparatorEnd(integerString) {\x0d\n  let result = '';\x0d\n  let i = 0;\x0d\n  for (; i < integerString.length - 3; i += 3) {\x0d\n    result += `${StringPrototypeSlice(integerString\x2C i\x2C i + 3)}_`;\x0d\n  }\x0d\n  return i === 0 ?\x0d\n    integerString :\x0d\n    `${result}${StringPrototypeSlice(integerString\x2C i)}`;\x0d\n}\x0d\n\x0d\nconst remainingText = (remaining) => `... ${remaining} more item${remaining > 1 ? 's' : ''}`;\x0d\n\x0d\nfunction formatNumber(fn\x2C number\x2C numericSeparator) {\x0d\n  if (!numericSeparator) {\x0d\n    // Format -0 as '-0'. Checking `number === -0` won't distinguish 0 from -0.\x0d\n    if (ObjectIs(number\x2C -0)) {\x0d\n      return fn('-0'\x2C 'number');\x0d\n    }\x0d\n    return fn(`${number}`\x2C 'number');\x0d\n  }\x0d\n  const integer = MathTrunc(number);\x0d\n  const string = String(integer);\x0d\n  if (integer === number) {\x0d\n    if (!NumberIsFinite(number) || StringPrototypeIncludes(string\x2C 'e')) {\x0d\n      return fn(string\x2C 'number');\x0d\n    }\x0d\n    return fn(`${addNumericSeparator(string)}`\x2C 'number');\x0d\n  }\x0d\n  if (NumberIsNaN(number)) {\x0d\n    return fn(string\x2C 'number');\x0d\n  }\x0d\n  return fn(`${\x0d\n    addNumericSeparator(string)\x0d\n  }.${\x0d\n    addNumericSeparatorEnd(\x0d\n      StringPrototypeSlice(String(number)\x2C string.length + 1)\x0d\n    )\x0d\n  }`\x2C 'number');\x0d\n}\x0d\n\x0d\nfunction formatBigInt(fn\x2C bigint\x2C numericSeparator) {\x0d\n  const string = String(bigint);\x0d\n  if (!numericSeparator) {\x0d\n    return fn(`${string}n`\x2C 'bigint');\x0d\n  }\x0d\n  return fn(`${addNumericSeparator(string)}n`\x2C 'bigint');\x0d\n}\x0d\n\x0d\nfunction formatPrimitive(fn\x2C value\x2C ctx) {\x0d\n  if (typeof value === 'string') {\x0d\n    let trailer = '';\x0d\n    if (value.length > ctx.maxStringLength) {\x0d\n      const remaining = value.length - ctx.maxStringLength;\x0d\n      value = StringPrototypeSlice(value\x2C 0\x2C ctx.maxStringLength);\x0d\n      trailer = `... ${remaining} more character${remaining > 1 ? 's' : ''}`;\x0d\n    }\x0d\n    if (ctx.compact !== true &&\x0d\n        // We do not support handling unicode characters width with\x0d\n        // the readline getStringWidth function as there are\x0d\n        // performance implications.\x0d\n        value.length > kMinLineLength &&\x0d\n        value.length > ctx.breakLength - ctx.indentationLvl - 4) {\x0d\n      return ArrayPrototypeJoin(\x0d\n        ArrayPrototypeMap(\x0d\n          RegExpPrototypeSymbolSplit(/(?<=\\n)/\x2C value)\x2C\x0d\n          (line) => fn(strEscape(line)\x2C 'string')\x2C\x0d\n        )\x2C\x0d\n        ` +\\n${StringPrototypeRepeat(' '\x2C ctx.indentationLvl + 2)}`\x2C\x0d\n      ) + trailer;\x0d\n    }\x0d\n    return fn(strEscape(value)\x2C 'string') + trailer;\x0d\n  }\x0d\n  if (typeof value === 'number')\x0d\n    return formatNumber(fn\x2C value\x2C ctx.numericSeparator);\x0d\n  if (typeof value === 'bigint')\x0d\n    return formatBigInt(fn\x2C value\x2C ctx.numericSeparator);\x0d\n  if (typeof value === 'boolean')\x0d\n    return fn(`${value}`\x2C 'boolean');\x0d\n  if (typeof value === 'undefined')\x0d\n    return fn('undefined'\x2C 'undefined');\x0d\n  // es6 symbol primitive\x0d\n  return fn(SymbolPrototypeToString(value)\x2C 'symbol');\x0d\n}\x0d\n\x0d\nfunction formatNamespaceObject(keys\x2C ctx\x2C value\x2C recurseTimes) {\x0d\n  const output = new Array(keys.length);\x0d\n  for (let i = 0; i < keys.length; i++) {\x0d\n    try {\x0d\n      output[i] = formatProperty(ctx\x2C value\x2C recurseTimes\x2C keys[i]\x2C\x0d\n                                 kObjectType);\x0d\n    } catch (err) {\x0d\n      assert(isNativeError(err) && err.name === 'ReferenceError');\x0d\n      // Use the existing functionality. This makes sure the indentation and\x0d\n      // line breaks are always correct. Otherwise it is very difficult to keep\x0d\n      // this aligned\x2C even though this is a hacky way of dealing with this.\x0d\n      const tmp = { [keys[i]]: '' };\x0d\n      output[i] = formatProperty(ctx\x2C tmp\x2C recurseTimes\x2C keys[i]\x2C kObjectType);\x0d\n      const pos = StringPrototypeLastIndexOf(output[i]\x2C ' ');\x0d\n      // We have to find the last whitespace and have to replace that value as\x0d\n      // it will be visualized as a regular string.\x0d\n      output[i] = StringPrototypeSlice(output[i]\x2C 0\x2C pos + 1) +\x0d\n                  ctx.stylize('<uninitialized>'\x2C 'special');\x0d\n    }\x0d\n  }\x0d\n  // Reset the keys to an empty array. This prevents duplicated inspection.\x0d\n  keys.length = 0;\x0d\n  return output;\x0d\n}\x0d\n\x0d\n// The array is sparse and/or has extra keys\x0d\nfunction formatSpecialArray(ctx\x2C value\x2C recurseTimes\x2C maxLength\x2C output\x2C i) {\x0d\n  const keys = ObjectKeys(value);\x0d\n  let index = i;\x0d\n  for (; i < keys.length && output.length < maxLength; i++) {\x0d\n    const key = keys[i];\x0d\n    const tmp = +key;\x0d\n    // Arrays can only have up to 2^32 - 1 entries\x0d\n    if (tmp > 2 ** 32 - 2) {\x0d\n      break;\x0d\n    }\x0d\n    if (`${index}` !== key) {\x0d\n      if (RegExpPrototypeExec(numberRegExp\x2C key) === null) {\x0d\n        break;\x0d\n      }\x0d\n      const emptyItems = tmp - index;\x0d\n      const ending = emptyItems > 1 ? 's' : '';\x0d\n      const message = `<${emptyItems} empty item${ending}>`;\x0d\n      ArrayPrototypePush(output\x2C ctx.stylize(message\x2C 'undefined'));\x0d\n      index = tmp;\x0d\n      if (output.length === maxLength) {\x0d\n        break;\x0d\n      }\x0d\n    }\x0d\n    ArrayPrototypePush(output\x2C formatProperty(ctx\x2C value\x2C recurseTimes\x2C key\x2C kArrayType));\x0d\n    index++;\x0d\n  }\x0d\n  const remaining = value.length - index;\x0d\n  if (output.length !== maxLength) {\x0d\n    if (remaining > 0) {\x0d\n      const ending = remaining > 1 ? 's' : '';\x0d\n      const message = `<${remaining} empty item${ending}>`;\x0d\n      ArrayPrototypePush(output\x2C ctx.stylize(message\x2C 'undefined'));\x0d\n    }\x0d\n  } else if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatArrayBuffer(ctx\x2C value) {\x0d\n  let buffer;\x0d\n  try {\x0d\n    buffer = new Uint8Array(value);\x0d\n  } catch {\x0d\n    return [ctx.stylize('(detached)'\x2C 'special')];\x0d\n  }\x0d\n  if (hexSlice === undefined)\x0d\n    hexSlice = uncurryThis(require('buffer').Buffer.prototype.hexSlice);\x0d\n  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(\x0d\n    /(.{2})/g\x2C\x0d\n    hexSlice(buffer\x2C 0\x2C MathMin(ctx.maxArrayLength\x2C buffer.length))\x2C\x0d\n    '$1 '\x2C\x0d\n  ));\x0d\n  const remaining = buffer.length - ctx.maxArrayLength;\x0d\n  if (remaining > 0)\x0d\n    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;\x0d\n  return [`${ctx.stylize('[Uint8Contents]'\x2C 'special')}: <${str}>`];\x0d\n}\x0d\n\x0d\nfunction formatArray(ctx\x2C value\x2C recurseTimes) {\x0d\n  const valLen = value.length;\x0d\n  const len = MathMin(MathMax(0\x2C ctx.maxArrayLength)\x2C valLen);\x0d\n\x0d\n  const remaining = valLen - len;\x0d\n  const output = [];\x0d\n  for (let i = 0; i < len; i++) {\x0d\n    // Special handle sparse arrays.\x0d\n    if (!ObjectPrototypeHasOwnProperty(value\x2C i)) {\x0d\n      return formatSpecialArray(ctx\x2C value\x2C recurseTimes\x2C len\x2C output\x2C i);\x0d\n    }\x0d\n    ArrayPrototypePush(output\x2C formatProperty(ctx\x2C value\x2C recurseTimes\x2C i\x2C kArrayType));\x0d\n  }\x0d\n  if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatTypedArray(value\x2C length\x2C ctx\x2C ignored\x2C recurseTimes) {\x0d\n  const maxLength = MathMin(MathMax(0\x2C ctx.maxArrayLength)\x2C length);\x0d\n  const remaining = value.length - maxLength;\x0d\n  const output = new Array(maxLength);\x0d\n  const elementFormatter = value.length > 0 && typeof value[0] === 'number' ?\x0d\n    formatNumber :\x0d\n    formatBigInt;\x0d\n  for (let i = 0; i < maxLength; ++i) {\x0d\n    output[i] = elementFormatter(ctx.stylize\x2C value[i]\x2C ctx.numericSeparator);\x0d\n  }\x0d\n  if (remaining > 0) {\x0d\n    output[maxLength] = remainingText(remaining);\x0d\n  }\x0d\n  if (ctx.showHidden) {\x0d\n    // .buffer goes last\x2C it's not a primitive like the others.\x0d\n    // All besides `BYTES_PER_ELEMENT` are actually getters.\x0d\n    ctx.indentationLvl += 2;\x0d\n    for (const key of [\x0d\n      'BYTES_PER_ELEMENT'\x2C\x0d\n      'length'\x2C\x0d\n      'byteLength'\x2C\x0d\n      'byteOffset'\x2C\x0d\n      'buffer'\x2C\x0d\n    ]) {\x0d\n      const str = formatValue(ctx\x2C value[key]\x2C recurseTimes\x2C true);\x0d\n      ArrayPrototypePush(output\x2C `[${key}]: ${str}`);\x0d\n    }\x0d\n    ctx.indentationLvl -= 2;\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatSet(value\x2C ctx\x2C ignored\x2C recurseTimes) {\x0d\n  const length = value.size;\x0d\n  const maxLength = MathMin(MathMax(0\x2C ctx.maxArrayLength)\x2C length);\x0d\n  const remaining = length - maxLength;\x0d\n  const output = [];\x0d\n  ctx.indentationLvl += 2;\x0d\n  let i = 0;\x0d\n  for (const v of value) {\x0d\n    if (i >= maxLength) break;\x0d\n    ArrayPrototypePush(output\x2C formatValue(ctx\x2C v\x2C recurseTimes));\x0d\n    i++;\x0d\n  }\x0d\n  if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  ctx.indentationLvl -= 2;\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatMap(value\x2C ctx\x2C ignored\x2C recurseTimes) {\x0d\n  const length = value.size;\x0d\n  const maxLength = MathMin(MathMax(0\x2C ctx.maxArrayLength)\x2C length);\x0d\n  const remaining = length - maxLength;\x0d\n  const output = [];\x0d\n  ctx.indentationLvl += 2;\x0d\n  let i = 0;\x0d\n  for (const { 0: k\x2C 1: v } of value) {\x0d\n    if (i >= maxLength) break;\x0d\n    ArrayPrototypePush(\x0d\n      output\x2C\x0d\n      `${formatValue(ctx\x2C k\x2C recurseTimes)} => ${formatValue(ctx\x2C v\x2C recurseTimes)}`\x2C\x0d\n    );\x0d\n    i++;\x0d\n  }\x0d\n  if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  ctx.indentationLvl -= 2;\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatSetIterInner(ctx\x2C recurseTimes\x2C entries\x2C state) {\x0d\n  const maxArrayLength = MathMax(ctx.maxArrayLength\x2C 0);\x0d\n  const maxLength = MathMin(maxArrayLength\x2C entries.length);\x0d\n  const output = new Array(maxLength);\x0d\n  ctx.indentationLvl += 2;\x0d\n  for (let i = 0; i < maxLength; i++) {\x0d\n    output[i] = formatValue(ctx\x2C entries[i]\x2C recurseTimes);\x0d\n  }\x0d\n  ctx.indentationLvl -= 2;\x0d\n  if (state === kWeak && !ctx.sorted) {\x0d\n    // Sort all entries to have a halfway reliable output (if more entries than\x0d\n    // retrieved ones exist\x2C we can not reliably return the same output) if the\x0d\n    // output is not sorted anyway.\x0d\n    ArrayPrototypeSort(output);\x0d\n  }\x0d\n  const remaining = entries.length - maxLength;\x0d\n  if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatMapIterInner(ctx\x2C recurseTimes\x2C entries\x2C state) {\x0d\n  const maxArrayLength = MathMax(ctx.maxArrayLength\x2C 0);\x0d\n  // Entries exist as [key1\x2C val1\x2C key2\x2C val2\x2C ...]\x0d\n  const len = entries.length / 2;\x0d\n  const remaining = len - maxArrayLength;\x0d\n  const maxLength = MathMin(maxArrayLength\x2C len);\x0d\n  const output = new Array(maxLength);\x0d\n  let i = 0;\x0d\n  ctx.indentationLvl += 2;\x0d\n  if (state === kWeak) {\x0d\n    for (; i < maxLength; i++) {\x0d\n      const pos = i * 2;\x0d\n      output[i] =\x0d\n        `${formatValue(ctx\x2C entries[pos]\x2C recurseTimes)} => ${formatValue(ctx\x2C entries[pos + 1]\x2C recurseTimes)}`;\x0d\n    }\x0d\n    // Sort all entries to have a halfway reliable output (if more entries than\x0d\n    // retrieved ones exist\x2C we can not reliably return the same output) if the\x0d\n    // output is not sorted anyway.\x0d\n    if (!ctx.sorted)\x0d\n      ArrayPrototypeSort(output);\x0d\n  } else {\x0d\n    for (; i < maxLength; i++) {\x0d\n      const pos = i * 2;\x0d\n      const res = [\x0d\n        formatValue(ctx\x2C entries[pos]\x2C recurseTimes)\x2C\x0d\n        formatValue(ctx\x2C entries[pos + 1]\x2C recurseTimes)\x2C\x0d\n      ];\x0d\n      output[i] = reduceToSingleString(\x0d\n        ctx\x2C res\x2C ''\x2C ['['\x2C ']']\x2C kArrayExtrasType\x2C recurseTimes);\x0d\n    }\x0d\n  }\x0d\n  ctx.indentationLvl -= 2;\x0d\n  if (remaining > 0) {\x0d\n    ArrayPrototypePush(output\x2C remainingText(remaining));\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatWeakCollection(ctx) {\x0d\n  return [ctx.stylize('<items unknown>'\x2C 'special')];\x0d\n}\x0d\n\x0d\nfunction formatWeakSet(ctx\x2C value\x2C recurseTimes) {\x0d\n  const entries = previewEntries(value);\x0d\n  return formatSetIterInner(ctx\x2C recurseTimes\x2C entries\x2C kWeak);\x0d\n}\x0d\n\x0d\nfunction formatWeakMap(ctx\x2C value\x2C recurseTimes) {\x0d\n  const entries = previewEntries(value);\x0d\n  return formatMapIterInner(ctx\x2C recurseTimes\x2C entries\x2C kWeak);\x0d\n}\x0d\n\x0d\nfunction formatIterator(braces\x2C ctx\x2C value\x2C recurseTimes) {\x0d\n  const { 0: entries\x2C 1: isKeyValue } = previewEntries(value\x2C true);\x0d\n  if (isKeyValue) {\x0d\n    // Mark entry iterators as such.\x0d\n    braces[0] = RegExpPrototypeSymbolReplace(/ Iterator] {$/\x2C braces[0]\x2C ' Entries] {');\x0d\n    return formatMapIterInner(ctx\x2C recurseTimes\x2C entries\x2C kMapEntries);\x0d\n  }\x0d\n\x0d\n  return formatSetIterInner(ctx\x2C recurseTimes\x2C entries\x2C kIterator);\x0d\n}\x0d\n\x0d\nfunction formatPromise(ctx\x2C value\x2C recurseTimes) {\x0d\n  let output;\x0d\n  const { 0: state\x2C 1: result } = getPromiseDetails(value);\x0d\n  if (state === kPending) {\x0d\n    output = [ctx.stylize('<pending>'\x2C 'special')];\x0d\n  } else {\x0d\n    ctx.indentationLvl += 2;\x0d\n    const str = formatValue(ctx\x2C result\x2C recurseTimes);\x0d\n    ctx.indentationLvl -= 2;\x0d\n    output = [\x0d\n      state === kRejected ?\x0d\n        `${ctx.stylize('<rejected>'\x2C 'special')} ${str}` :\x0d\n        str\x2C\x0d\n    ];\x0d\n  }\x0d\n  return output;\x0d\n}\x0d\n\x0d\nfunction formatProperty(ctx\x2C value\x2C recurseTimes\x2C key\x2C type\x2C desc\x2C\x0d\n                        original = value) {\x0d\n  let name\x2C str;\x0d\n  let extra = ' ';\x0d\n  desc = desc || ObjectGetOwnPropertyDescriptor(value\x2C key) ||\x0d\n    { value: value[key]\x2C enumerable: true };\x0d\n  if (desc.value !== undefined) {\x0d\n    const diff = (ctx.compact !== true || type !== kObjectType) ? 2 : 3;\x0d\n    ctx.indentationLvl += diff;\x0d\n    str = formatValue(ctx\x2C desc.value\x2C recurseTimes);\x0d\n    if (diff === 3 && ctx.breakLength < getStringWidth(str\x2C ctx.colors)) {\x0d\n      extra = `\\n${StringPrototypeRepeat(' '\x2C ctx.indentationLvl)}`;\x0d\n    }\x0d\n    ctx.indentationLvl -= diff;\x0d\n  } else if (desc.get !== undefined) {\x0d\n    const label = desc.set !== undefined ? 'Getter/Setter' : 'Getter';\x0d\n    const s = ctx.stylize;\x0d\n    const sp = 'special';\x0d\n    if (ctx.getters && (ctx.getters === true ||\x0d\n          (ctx.getters === 'get' && desc.set === undefined) ||\x0d\n          (ctx.getters === 'set' && desc.set !== undefined))) {\x0d\n      try {\x0d\n        const tmp = FunctionPrototypeCall(desc.get\x2C original);\x0d\n        ctx.indentationLvl += 2;\x0d\n        if (tmp === null) {\x0d\n          str = `${s(`[${label}:`\x2C sp)} ${s('null'\x2C 'null')}${s(']'\x2C sp)}`;\x0d\n        } else if (typeof tmp === 'object') {\x0d\n          str = `${s(`[${label}]`\x2C sp)} ${formatValue(ctx\x2C tmp\x2C recurseTimes)}`;\x0d\n        } else {\x0d\n          const primitive = formatPrimitive(s\x2C tmp\x2C ctx);\x0d\n          str = `${s(`[${label}:`\x2C sp)} ${primitive}${s(']'\x2C sp)}`;\x0d\n        }\x0d\n        ctx.indentationLvl -= 2;\x0d\n      } catch (err) {\x0d\n        const message = `<Inspection threw (${err.message})>`;\x0d\n        str = `${s(`[${label}:`\x2C sp)} ${message}${s(']'\x2C sp)}`;\x0d\n      }\x0d\n    } else {\x0d\n      str = ctx.stylize(`[${label}]`\x2C sp);\x0d\n    }\x0d\n  } else if (desc.set !== undefined) {\x0d\n    str = ctx.stylize('[Setter]'\x2C 'special');\x0d\n  } else {\x0d\n    str = ctx.stylize('undefined'\x2C 'undefined');\x0d\n  }\x0d\n  if (type === kArrayType) {\x0d\n    return str;\x0d\n  }\x0d\n  if (typeof key === 'symbol') {\x0d\n    const tmp = RegExpPrototypeSymbolReplace(\x0d\n      strEscapeSequencesReplacer\x2C\x0d\n      SymbolPrototypeToString(key)\x2C\x0d\n      escapeFn\x0d\n    );\x0d\n    name = `[${ctx.stylize(tmp\x2C 'symbol')}]`;\x0d\n  } else if (key === '__proto__') {\x0d\n    name = "['__proto__']";\x0d\n  } else if (desc.enumerable === false) {\x0d\n    const tmp = RegExpPrototypeSymbolReplace(\x0d\n      strEscapeSequencesReplacer\x2C\x0d\n      key\x2C\x0d\n      escapeFn\x2C\x0d\n    );\x0d\n    name = `[${tmp}]`;\x0d\n  } else if (RegExpPrototypeExec(keyStrRegExp\x2C key) !== null) {\x0d\n    name = ctx.stylize(key\x2C 'name');\x0d\n  } else {\x0d\n    name = ctx.stylize(strEscape(key)\x2C 'string');\x0d\n  }\x0d\n  return `${name}:${extra}${str}`;\x0d\n}\x0d\n\x0d\nfunction isBelowBreakLength(ctx\x2C output\x2C start\x2C base) {\x0d\n  // Each entry is separated by at least a comma. Thus\x2C we start with a total\x0d\n  // length of at least `output.length`. In addition\x2C some cases have a\x0d\n  // whitespace in-between each other that is added to the total as well.\x0d\n  // TODO(BridgeAR): Add unicode support. Use the readline getStringWidth\x0d\n  // function. Check the performance overhead and make it an opt-in in case it's\x0d\n  // significant.\x0d\n  let totalLength = output.length + start;\x0d\n  if (totalLength + output.length > ctx.breakLength)\x0d\n    return false;\x0d\n  for (let i = 0; i < output.length; i++) {\x0d\n    if (ctx.colors) {\x0d\n      totalLength += removeColors(output[i]).length;\x0d\n    } else {\x0d\n      totalLength += output[i].length;\x0d\n    }\x0d\n    if (totalLength > ctx.breakLength) {\x0d\n      return false;\x0d\n    }\x0d\n  }\x0d\n  // Do not line up properties on the same line if `base` contains line breaks.\x0d\n  return base === '' || !StringPrototypeIncludes(base\x2C '\\n');\x0d\n}\x0d\n\x0d\nfunction reduceToSingleString(\x0d\n  ctx\x2C output\x2C base\x2C braces\x2C extrasType\x2C recurseTimes\x2C value) {\x0d\n  if (ctx.compact !== true) {\x0d\n    if (typeof ctx.compact === 'number' && ctx.compact >= 1) {\x0d\n      // Memorize the original output length. In case the output is grouped\x2C\x0d\n      // prevent lining up the entries on a single line.\x0d\n      const entries = output.length;\x0d\n      // Group array elements together if the array contains at least six\x0d\n      // separate entries.\x0d\n      if (extrasType === kArrayExtrasType && entries > 6) {\x0d\n        output = groupArrayElements(ctx\x2C output\x2C value);\x0d\n      }\x0d\n      // `ctx.currentDepth` is set to the most inner depth of the currently\x0d\n      // inspected object part while `recurseTimes` is the actual current depth\x0d\n      // that is inspected.\x0d\n      //\x0d\n      // Example:\x0d\n      //\x0d\n      // const a = { first: [ 1\x2C 2\x2C 3 ]\x2C second: { inner: [ 1\x2C 2\x2C 3 ] } }\x0d\n      //\x0d\n      // The deepest depth of `a` is 2 (a.second.inner) and `a.first` has a max\x0d\n      // depth of 1.\x0d\n      //\x0d\n      // Consolidate all entries of the local most inner depth up to\x0d\n      // `ctx.compact`\x2C as long as the properties are smaller than\x0d\n      // `ctx.breakLength`.\x0d\n      if (ctx.currentDepth - recurseTimes < ctx.compact &&\x0d\n          entries === output.length) {\x0d\n        // Line up all entries on a single line in case the entries do not\x0d\n        // exceed `breakLength`. Add 10 as constant to start next to all other\x0d\n        // factors that may reduce `breakLength`.\x0d\n        const start = output.length + ctx.indentationLvl +\x0d\n                      braces[0].length + base.length + 10;\x0d\n        if (isBelowBreakLength(ctx\x2C output\x2C start\x2C base)) {\x0d\n          const joinedOutput = join(output\x2C '\x2C ');\x0d\n          if (!StringPrototypeIncludes(joinedOutput\x2C '\\n')) {\x0d\n            return `${base ? `${base} ` : ''}${braces[0]} ${joinedOutput}` +\x0d\n              ` ${braces[1]}`;\x0d\n          }\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    // Line up each entry on an individual line.\x0d\n    const indentation = `\\n${StringPrototypeRepeat(' '\x2C ctx.indentationLvl)}`;\x0d\n    return `${base ? `${base} ` : ''}${braces[0]}${indentation}  ` +\x0d\n      `${join(output\x2C `\x2C${indentation}  `)}${indentation}${braces[1]}`;\x0d\n  }\x0d\n  // Line up all entries on a single line in case the entries do not exceed\x0d\n  // `breakLength`.\x0d\n  if (isBelowBreakLength(ctx\x2C output\x2C 0\x2C base)) {\x0d\n    return `${braces[0]}${base ? ` ${base}` : ''} ${join(output\x2C '\x2C ')} ` +\x0d\n      braces[1];\x0d\n  }\x0d\n  const indentation = StringPrototypeRepeat(' '\x2C ctx.indentationLvl);\x0d\n  // If the opening "brace" is too large\x2C like in the case of "Set {"\x2C\x0d\n  // we need to force the first item to be on the next line or the\x0d\n  // items will not line up correctly.\x0d\n  const ln = base === '' && braces[0].length === 1 ?\x0d\n    ' ' : `${base ? ` ${base}` : ''}\\n${indentation}  `;\x0d\n  // Line up each entry on an individual line.\x0d\n  return `${braces[0]}${ln}${join(output\x2C `\x2C\\n${indentation}  `)} ${braces[1]}`;\x0d\n}\x0d\n\x0d\nfunction hasBuiltInToString(value) {\x0d\n  // Prevent triggering proxy traps.\x0d\n  const getFullProxy = false;\x0d\n  const proxyTarget = getProxyDetails(value\x2C getFullProxy);\x0d\n  if (proxyTarget !== undefined) {\x0d\n    if (proxyTarget === null) {\x0d\n      return true;\x0d\n    }\x0d\n    value = proxyTarget;\x0d\n  }\x0d\n\x0d\n  // Count objects that have no `toString` function as built-in.\x0d\n  if (typeof value.toString !== 'function') {\x0d\n    return true;\x0d\n  }\x0d\n\x0d\n  // The object has a own `toString` property. Thus it's not not a built-in one.\x0d\n  if (ObjectPrototypeHasOwnProperty(value\x2C 'toString')) {\x0d\n    return false;\x0d\n  }\x0d\n\x0d\n  // Find the object that has the `toString` property as own property in the\x0d\n  // prototype chain.\x0d\n  let pointer = value;\x0d\n  do {\x0d\n    pointer = ObjectGetPrototypeOf(pointer);\x0d\n  } while (!ObjectPrototypeHasOwnProperty(pointer\x2C 'toString'));\x0d\n\x0d\n  // Check closer if the object is a built-in.\x0d\n  const descriptor = ObjectGetOwnPropertyDescriptor(pointer\x2C 'constructor');\x0d\n  return descriptor !== undefined &&\x0d\n    typeof descriptor.value === 'function' &&\x0d\n    builtInObjects.has(descriptor.value.name);\x0d\n}\x0d\n\x0d\nconst firstErrorLine = (error) => StringPrototypeSplit(error.message\x2C '\\n'\x2C 1)[0];\x0d\nlet CIRCULAR_ERROR_MESSAGE;\x0d\nfunction tryStringify(arg) {\x0d\n  try {\x0d\n    return JSONStringify(arg);\x0d\n  } catch (err) {\x0d\n    // Populate the circular error message lazily\x0d\n    if (!CIRCULAR_ERROR_MESSAGE) {\x0d\n      try {\x0d\n        const a = {};\x0d\n        a.a = a;\x0d\n        JSONStringify(a);\x0d\n      } catch (circularError) {\x0d\n        CIRCULAR_ERROR_MESSAGE = firstErrorLine(circularError);\x0d\n      }\x0d\n    }\x0d\n    if (err.name === 'TypeError' &&\x0d\n        firstErrorLine(err) === CIRCULAR_ERROR_MESSAGE) {\x0d\n      return '[Circular]';\x0d\n    }\x0d\n    throw err;\x0d\n  }\x0d\n}\x0d\n\x0d\nfunction format(...args) {\x0d\n  return formatWithOptionsInternal(undefined\x2C args);\x0d\n}\x0d\n\x0d\nfunction formatWithOptions(inspectOptions\x2C ...args) {\x0d\n  validateObject(inspectOptions\x2C 'inspectOptions'\x2C { allowArray: true });\x0d\n  return formatWithOptionsInternal(inspectOptions\x2C args);\x0d\n}\x0d\n\x0d\nfunction formatNumberNoColor(number\x2C options) {\x0d\n  return formatNumber(\x0d\n    stylizeNoColor\x2C\x0d\n    number\x2C\x0d\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction formatBigIntNoColor(bigint\x2C options) {\x0d\n  return formatBigInt(\x0d\n    stylizeNoColor\x2C\x0d\n    bigint\x2C\x0d\n    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator\x0d\n  );\x0d\n}\x0d\n\x0d\nfunction formatWithOptionsInternal(inspectOptions\x2C args) {\x0d\n  const first = args[0];\x0d\n  let a = 0;\x0d\n  let str = '';\x0d\n  let join = '';\x0d\n\x0d\n  if (typeof first === 'string') {\x0d\n    if (args.length === 1) {\x0d\n      return first;\x0d\n    }\x0d\n    let tempStr;\x0d\n    let lastPos = 0;\x0d\n\x0d\n    for (let i = 0; i < first.length - 1; i++) {\x0d\n      if (StringPrototypeCharCodeAt(first\x2C i) === 37) { // '%'\x0d\n        const nextChar = StringPrototypeCharCodeAt(first\x2C ++i);\x0d\n        if (a + 1 !== args.length) {\x0d\n          switch (nextChar) {\x0d\n            case 115: { // 's'\x0d\n              const tempArg = args[++a];\x0d\n              if (typeof tempArg === 'number') {\x0d\n                tempStr = formatNumberNoColor(tempArg\x2C inspectOptions);\x0d\n              } else if (typeof tempArg === 'bigint') {\x0d\n                tempStr = formatBigIntNoColor(tempArg\x2C inspectOptions);\x0d\n              } else if (typeof tempArg !== 'object' ||\x0d\n                         tempArg === null ||\x0d\n                         !hasBuiltInToString(tempArg)) {\x0d\n                tempStr = String(tempArg);\x0d\n              } else {\x0d\n                tempStr = inspect(tempArg\x2C {\x0d\n                  ...inspectOptions\x2C\x0d\n                  compact: 3\x2C\x0d\n                  colors: false\x2C\x0d\n                  depth: 0\x0d\n                });\x0d\n              }\x0d\n              break;\x0d\n            }\x0d\n            case 106: // 'j'\x0d\n              tempStr = tryStringify(args[++a]);\x0d\n              break;\x0d\n            case 100: { // 'd'\x0d\n              const tempNum = args[++a];\x0d\n              if (typeof tempNum === 'bigint') {\x0d\n                tempStr = formatBigIntNoColor(tempNum\x2C inspectOptions);\x0d\n              } else if (typeof tempNum === 'symbol') {\x0d\n                tempStr = 'NaN';\x0d\n              } else {\x0d\n                tempStr = formatNumberNoColor(Number(tempNum)\x2C inspectOptions);\x0d\n              }\x0d\n              break;\x0d\n            }\x0d\n            case 79: // 'O'\x0d\n              tempStr = inspect(args[++a]\x2C inspectOptions);\x0d\n              break;\x0d\n            case 111: // 'o'\x0d\n              tempStr = inspect(args[++a]\x2C {\x0d\n                ...inspectOptions\x2C\x0d\n                showHidden: true\x2C\x0d\n                showProxy: true\x2C\x0d\n                depth: 4\x0d\n              });\x0d\n              break;\x0d\n            case 105: { // 'i'\x0d\n              const tempInteger = args[++a];\x0d\n              if (typeof tempInteger === 'bigint') {\x0d\n                tempStr = formatBigIntNoColor(tempInteger\x2C inspectOptions);\x0d\n              } else if (typeof tempInteger === 'symbol') {\x0d\n                tempStr = 'NaN';\x0d\n              } else {\x0d\n                tempStr = formatNumberNoColor(\x0d\n                  NumberParseInt(tempInteger)\x2C inspectOptions);\x0d\n              }\x0d\n              break;\x0d\n            }\x0d\n            case 102: { // 'f'\x0d\n              const tempFloat = args[++a];\x0d\n              if (typeof tempFloat === 'symbol') {\x0d\n                tempStr = 'NaN';\x0d\n              } else {\x0d\n                tempStr = formatNumberNoColor(\x0d\n                  NumberParseFloat(tempFloat)\x2C inspectOptions);\x0d\n              }\x0d\n              break;\x0d\n            }\x0d\n            case 99: // 'c'\x0d\n              a += 1;\x0d\n              tempStr = '';\x0d\n              break;\x0d\n            case 37: // '%'\x0d\n              str += StringPrototypeSlice(first\x2C lastPos\x2C i);\x0d\n              lastPos = i + 1;\x0d\n              continue;\x0d\n            default: // Any other character is not a correct placeholder\x0d\n              continue;\x0d\n          }\x0d\n          if (lastPos !== i - 1) {\x0d\n            str += StringPrototypeSlice(first\x2C lastPos\x2C i - 1);\x0d\n          }\x0d\n          str += tempStr;\x0d\n          lastPos = i + 1;\x0d\n        } else if (nextChar === 37) {\x0d\n          str += StringPrototypeSlice(first\x2C lastPos\x2C i);\x0d\n          lastPos = i + 1;\x0d\n        }\x0d\n      }\x0d\n    }\x0d\n    if (lastPos !== 0) {\x0d\n      a++;\x0d\n      join = ' ';\x0d\n      if (lastPos < first.length) {\x0d\n        str += StringPrototypeSlice(first\x2C lastPos);\x0d\n      }\x0d\n    }\x0d\n  }\x0d\n\x0d\n  while (a < args.length) {\x0d\n    const value = args[a];\x0d\n    str += join;\x0d\n    str += typeof value !== 'string' ? inspect(value\x2C inspectOptions) : value;\x0d\n    join = ' ';\x0d\n    a++;\x0d\n  }\x0d\n  return str;\x0d\n}\x0d\n\x0d\nif (internalBinding('config').hasIntl) {\x0d\n  const icu = internalBinding('icu');\x0d\n  // icu.getStringWidth(string\x2C ambiguousAsFullWidth\x2C expandEmojiSequence)\x0d\n  // Defaults: ambiguousAsFullWidth = false; expandEmojiSequence = true;\x0d\n  // TODO(BridgeAR): Expose the options to the user. That is probably the\x0d\n  // best thing possible at the moment\x2C since it's difficult to know what\x0d\n  // the receiving end supports.\x0d\n  getStringWidth = function getStringWidth(str\x2C removeControlChars = true) {\x0d\n    let width = 0;\x0d\n\x0d\n    if (removeControlChars) {\x0d\n      str = stripVTControlCharacters(str);\x0d\n    }\x0d\n    for (let i = 0; i < str.length; i++) {\x0d\n      // Try to avoid calling into C++ by first handling the ASCII portion of\x0d\n      // the string. If it is fully ASCII\x2C we skip the C++ part.\x0d\n      const code = str.charCodeAt(i);\x0d\n      if (code >= 127) {\x0d\n        width += icu.getStringWidth(StringPrototypeNormalize(StringPrototypeSlice(str\x2C i)\x2C 'NFC'));\x0d\n        break;\x0d\n      }\x0d\n      width += code >= 32 ? 1 : 0;\x0d\n    }\x0d\n    return width;\x0d\n  };\x0d\n} else {\x0d\n  /**\x0d\n   * Returns the number of columns required to display the given string.\x0d\n   */\x0d\n  getStringWidth = function getStringWidth(str\x2C removeControlChars = true) {\x0d\n    let width = 0;\x0d\n\x0d\n    if (removeControlChars)\x0d\n      str = stripVTControlCharacters(str);\x0d\n    str = StringPrototypeNormalize(str\x2C 'NFC');\x0d\n    for (const char of new SafeStringIterator(str)) {\x0d\n      const code = StringPrototypeCodePointAt(char\x2C 0);\x0d\n      if (isFullWidthCodePoint(code)) {\x0d\n        width += 2;\x0d\n      } else if (!isZeroWidthCodePoint(code)) {\x0d\n        width++;\x0d\n      }\x0d\n    }\x0d\n\x0d\n    return width;\x0d\n  };\x0d\n\x0d\n  /**\x0d\n   * Returns true if the character represented by a given\x0d\n   * Unicode code point is full-width. Otherwise returns false.\x0d\n   */\x0d\n  const isFullWidthCodePoint = (code) => {\x0d\n    // Code points are partially derived from:\x0d\n    // https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt\x0d\n    return code >= 0x1100 && (\x0d\n      code <= 0x115f ||  // Hangul Jamo\x0d\n      code === 0x2329 || // LEFT-POINTING ANGLE BRACKET\x0d\n      code === 0x232a || // RIGHT-POINTING ANGLE BRACKET\x0d\n      // CJK Radicals Supplement .. Enclosed CJK Letters and Months\x0d\n      (code >= 0x2e80 && code <= 0x3247 && code !== 0x303f) ||\x0d\n      // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\x0d\n      (code >= 0x3250 && code <= 0x4dbf) ||\x0d\n      // CJK Unified Ideographs .. Yi Radicals\x0d\n      (code >= 0x4e00 && code <= 0xa4c6) ||\x0d\n      // Hangul Jamo Extended-A\x0d\n      (code >= 0xa960 && code <= 0xa97c) ||\x0d\n      // Hangul Syllables\x0d\n      (code >= 0xac00 && code <= 0xd7a3) ||\x0d\n      // CJK Compatibility Ideographs\x0d\n      (code >= 0xf900 && code <= 0xfaff) ||\x0d\n      // Vertical Forms\x0d\n      (code >= 0xfe10 && code <= 0xfe19) ||\x0d\n      // CJK Compatibility Forms .. Small Form Variants\x0d\n      (code >= 0xfe30 && code <= 0xfe6b) ||\x0d\n      // Halfwidth and Fullwidth Forms\x0d\n      (code >= 0xff01 && code <= 0xff60) ||\x0d\n      (code >= 0xffe0 && code <= 0xffe6) ||\x0d\n      // Kana Supplement\x0d\n      (code >= 0x1b000 && code <= 0x1b001) ||\x0d\n      // Enclosed Ideographic Supplement\x0d\n      (code >= 0x1f200 && code <= 0x1f251) ||\x0d\n      // Miscellaneous Symbols and Pictographs 0x1f300 - 0x1f5ff\x0d\n      // Emoticons 0x1f600 - 0x1f64f\x0d\n      (code >= 0x1f300 && code <= 0x1f64f) ||\x0d\n      // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\x0d\n      (code >= 0x20000 && code <= 0x3fffd)\x0d\n    );\x0d\n  };\x0d\n\x0d\n  const isZeroWidthCodePoint = (code) => {\x0d\n    return code <= 0x1F || // C0 control codes\x0d\n      (code >= 0x7F && code <= 0x9F) || // C1 control codes\x0d\n      (code >= 0x300 && code <= 0x36F) || // Combining Diacritical Marks\x0d\n      (code >= 0x200B && code <= 0x200F) || // Modifying Invisible Characters\x0d\n      // Combining Diacritical Marks for Symbols\x0d\n      (code >= 0x20D0 && code <= 0x20FF) ||\x0d\n      (code >= 0xFE00 && code <= 0xFE0F) || // Variation Selectors\x0d\n      (code >= 0xFE20 && code <= 0xFE2F) || // Combining Half Marks\x0d\n      (code >= 0xE0100 && code <= 0xE01EF); // Variation Selectors\x0d\n  };\x0d\n}\x0d\n\x0d\n/**\x0d\n * Remove all VT control characters. Use to estimate displayed string width.\x0d\n */\x0d\nfunction stripVTControlCharacters(str) {\x0d\n  validateString(str\x2C 'str');\x0d\n\x0d\n  return RegExpPrototypeSymbolReplace(ansi\x2C str\x2C '');\x0d\n}\x0d\n\x0d\nmodule.exports = {\x0d\n  identicalSequenceRange\x2C\x0d\n  inspect\x2C\x0d\n  inspectDefaultOptions\x2C\x0d\n  format\x2C\x0d\n  formatWithOptions\x2C\x0d\n  getStringWidth\x2C\x0d\n  stripVTControlCharacters\x2C\x0d\n};\x0d\n
code-source-info,0xd55be7da6e,20,11505,11549,C0O11515C4O11544,,
code-creation,LazyCompile,10,1138308,0x35cf9cf5d5e,395,inspect node:internal/util/inspect:310:17,0x2392d65248,~
code-source-info,0x35cf9cf5d5e,20,9320,11386,C0O9320C2O9373C9O9467C15O9500C18O9522C28O9546C31O9568C41O9588C44O9610C54O9638C57O9660C67O9691C70O9713C80O9745C83O9767C93O9805C96O9827C106O9862C109O9884C119O9911C122O9933C132O9955C135O9977C145O9999C148O10021C158O10053C161O10075C172O10116C179O10123C184O10167C191O10174C196O10188C198O10201C203O10231C205O10252C208O10241C212O10287C219O10294C226O10310C231O10340C233O10362C236O10351C240O10423C246O10463C248O10478C254O10498C258O10533C263O10533C268O10571C270O10586C274O10576C279O10622C281O10629C285O10827C292O10873C295O10843C304O10919C309O10947C311O10962C314O10956C320O10993C326O11103C328O11119C332O10596C337O10558C340O11170C346O11178C348O11190C352O11221C358O11267C361O11265C365O11288C371O11336C374O11334C378O11349C389O11356C394O11383,,
tick,0x7ff6d5b31e55,1138504,0,0x0,3,0x7ff6d61dcec0,0xd55be772f0,0x7ff6d5cbe4a0,0x2ade89fb4d0,0x7ff6d6643b5b
code-creation,LazyCompile,10,1138779,0x35cf9cf62d6,491,formatValue node:internal/util/inspect:766:21,0x2392d65868,~
code-source-info,0x35cf9cf62d
code-creation,LazyCompile,10,1139636,0x35cf9cf6da6,3304,formatRaw node:internal/util/inspect:844:19,0x2392d658b8,~
code-source-info,0x35cf9cf6da
code-creation,LazyCompile,10,1140454,0x35cf9cf811e,321,getConstructorName node:internal/util/inspect:588:28,0x2392d65688,~
code-source-info,0x35cf9cf811e
code-creation,LazyCompile,10,1140628,0x35cf9cf83ee,13,isInstanceof node:internal/util/inspect:580:22,0x2392d65638,~
code-source-info,0x35cf9cf83ee,20,17937,18040,C3O17969C5O17983C8O18000C11O18019C12O18032,,
code-creation,LazyCompile,10,1140775,0x35cf9cf85f6,223,getKeys node:internal/util/inspect:709:17,0x2392d65778,~
code-source-info,0x35cf9cf85f6,20,21895,22896,C0O21895C9O21924C11O21949C21O21949C26O21988C30O22011C40O22018C45O22069C51O22076C56O22090C63O22090C73O22458C83O22465C91O22463C101O22512C112O22519C118O22519C127O22545C134O22550C143O22588C151O22588C156O22512C160O22628C172O22635C179O22693C185O22700C190O22731C195O22796C206O22826C209O22826C215O22796C220O22881C222O22893,,
code-creation,LazyCompile,10,1141087,0x35cf9cf8a3e,766,formatError node:internal/util/inspect:1361:21,0x2392d65cc8,~
code-source-info,0x35cf9cf8a3e
code-creation,LazyCompile,10,1141305,0x35cf9cf8f46,32,getStackString node:internal/util/inspect:1240:24,0x2392d65a98,~
code-source-info,0x35cf9cf8f46,20,41740,41829,C0O41766C8O41774C11O41787C16O41774C24O41796C27O41796C31O41826,,
code-creation,LazyCompile,10,1141435,0x35cf9cf90fe,200,removeDuplicateErrorKeys node:internal/util/inspect:1297:34,0x2392d65b88,~
code-source-info,0x35cf9cf90fe,20,43908,44308,C0O43946C6O43965C12O43972C17O44005C46O43997C74O43997C77O44058C82O44058C88O44173C90O44183C100O44193C105O44227C109O44193C116O44247C130O44247C135O43986C199O44307,,
code-creation,LazyCompile,10,1141614,0x35cf9cf93ae,281,improveStack node:internal/util/inspect:1264:22,0x2392d65b38,~
code-source-info,0x35cf9cf93ae,20,42656,43871,C0O42847C5O42860C11O42896C17O42896C26O42945C29O42945C36O43001C43O43008C50O43024C56O43030C63O43046C69O43052C74O43086C77O43100C81O43149C91O43149C100O43232C108O43232C114O43294C118O43320C126O43354C131O43369C138O43428C155O43449C166O43428C172O43501C174O43510C179O43531C184O43535C191O43585C192O43593C197O43613C209O43635C217O43673C223O43693C226O43693C239O43765C251O43787C264O43795C267O43795C278O43855C280O43868,,
code-creation,LazyCompile,10,1141824,0x35cf9cf9726,188,getStackFrames node:internal/util/inspect:1244:24,0x2392d65ae8,~
code-source-info,0x35cf9cf9726,20,41856,42631,C0O41894C8O41894C14O41998C22O42007C25O42019C30O42007C36O42053C39O42072C44O42053C49O42109C57O42109C63O42162C65O42182C70O42219C77O42240C82O42289C86O42240C95O42219C101O42333C104O42333C110O42317C115O42322C120O42385C121O42393C126O42425C128O42429C132O42455C137O42466C148O42530C155O42544C159O42562C167O42562C180O42530C185O42614C187O42628,,
code-creation,LazyCompile,10,1141963,0x35cf9cf9936,27,safeGetCWD node:internal/util/inspect:1351:20,0x2392d65c78,~
code-source-info,0x35cf9cf9936,20,45824,45963,C0O45836C5O45868C8O45895C13O45895C21O45885C22O45920C23O45927C24O45936C26O45960,,
code-creation,LazyCompile,10,1142164,0x35cf9cf9a46,21,exists node:internal/bootstrap/loaders:243:16,0x39b87d0920,~
code-source-info,0x35cf9cf9a46,9,7670,7720,C0O7682C5O7703C10O7707C15O7707C20O7715,,
code-creation,LazyCompile,10,1142273,0x35cf9cf9b86,82,stylizeWithColor node:internal/util/inspect:561:26,0x2392d65548,~
code-source-info,0x35cf9cf9b86,20,17480,17729,C0O17516C3O17524C10O17530C14O17546C16O17592C19O17600C26O17606C30O17620C32O17652C36O17674C52O17681C65O17699C78O17706C79O17715C81O17726,,
code-creation,LazyCompile,10,1142368,0x35cf9cf9cbe,6,get node:internal/util/inspect:437:8,0x2392d65338,~
code-source-info,0x35cf9cf9cbe,20,13574,13613,C0O13586C2O13597C5O13606,,
code-creation,RegExp,3,1142559,0x246eef0eea0,2208,^ {4}at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$
code-creation,LazyCompile,10,1142672,0x35cf9cf9e46,128,markNodeModules node:internal/util/inspect:1309:25,0x2392d65bd8,~
code-source-info,0x35cf9cf9e46,20,44336,44796,C0O44368C3O44379C5O44404C7O44461C12O44449C17O44449C25O44517C27O44529C30O44572C34O44578C44O44529C56O44606C63O44624C70O44606C83O44662C89O44680C93O44684C97O44668C101O44410C104O44700C105O44708C110O44722C112O44740C115O44740C120O44738C125O44781C127O44793,,
code-creation,LazyCompile,10,1142916,0x35cf9cfa13e,271,markCwd node:internal/util/inspect:1325:17,0x2392d65c28,~
code-source-info,0x35cf9cfa13e,20,44816,45801,C0O44869C5O44869C11O44935C14O44975C19O44986C21O45002C26O45017C33O45060C43O45021C51O45078C56O45102C62O45125C68O45169C70O45186C73O45173C79O45191C86O45213C94O45249C96O45255C103O45274C109O45274C120O45321C125O45365C127O45377C130O45389C134O45416C148O45416C154O45482C156O45494C167O45494C179O45553C187O45553C200O45590C202O45602C214O45602C226O45664C228O45672C233O45705C244O45705C259O45756C261O45768C268O45782C270O45798,,
code-creation,LazyCompile,10,1143066,0x35cf9cfa3b6,48,pathToFileUrlHref node:internal/util/inspect:163:27,0x2392d62ce0,~
code-source-info,0x35cf9cfa3b6,20,3414,3525,C0O3430C14O3446C21O3442C27O3474C32O3493C37O3493C43O3516C47O3522,,
